[
    {
        "TaskId": 1,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity.",
        "CanonicalCode": "# Write python code to start an absolute position command of Axis 0 to position 180 with 1000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n\n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(0).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(0)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 0. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 0 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(0)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(0, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(0)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n\n    \n    # Start an absolute position command of Axis 0 to position 180 with 1000 velocity.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(0, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()\n",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 2,
        "Instruction": "Start a relative position command of Axis 1 with 200 distance and 2000 velocity.",
        "CanonicalCode": "# Write python code to Start a relative position command of Axis 1 with 200 distance and 2000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n    \n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(1).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(1)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 1. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(1).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 1 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(1)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(1, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(1)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(1)\n\n\n    # Start a relative position command of Axis 1 with 200 distance and 2000 velocity.\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 1\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(1)\n\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(1, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[1],\n[200]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 3,
        "Instruction": "Jog Axis 2 for 1.5s with 160 velocity, then start an absolute position command to position 10 with 1000 velocity.",
        "CanonicalCode": "# Write python code to Jog Axis 2 for 1.5s with 160 velocity, then start an absolute position command to position 10 with 1000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n    \n    #Clear every servo/motor/amplifier's alarm\n    timeoutCounter=0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (not CmStatus.GetAxesStatus(2).ampAlarm):\n            break\n        ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(2)\n        sleep(0.5)\n        timeoutCounter=timeoutCounter+1\n        if(timeoutCounter > 5):\n            break\n    if(timeoutCounter > 5):\n        print('Clear axis alarm fails!')\n        return\n\n    # Set servo on for Axis 2. \n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 1)\n    timeoutCounter = 0\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(2).servoOn):\n            break\n        sleep(0.4)\n        timeoutCounter += 1\n        if (timeoutCounter > 5):\n            break\n    if (timeoutCounter > 5):\n        print('Set servo on for axis 2 fails!')\n        return\n\n    #Sleep is a must between SetServoOn and Homing\n    sleep(0.1) \n    # Homing\n    homeParam = Config_HomeParam()\n    ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(2)\n    homeParam.homeType = Config_HomeType.CurrentPos\n\n    # SetHomeParam -> First return value: Error code, Second return value: param error\n    ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(2, homeParam)\n\n    ret = Wmx3Lib_cm.home.StartHome(2)\n    if ret!=0:\n        print('StartHome error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(2)\n\n\n    # Jog Axis 2 for 1.5s with 160 velocity, then start an absolute position command to position 10 with 1000 velocity.\n    jogCommand = Motion_JogCommand()\n    jogCommand.profile.type = ProfileType.Trapezoidal\n    jogCommand.axis = 2\n    jogCommand.profile.velocity = 160\n    jogCommand.profile.acc = 10000\n    jogCommand.profile.dec = 10000\n\n    # Rotate the motor at the specified speed.\n    ret =Wmx3Lib_cm.motion.StartJog(jogCommand)\n    if ret!=0:\n        print('StartJog error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    #Jogging for 1.5 seconds\n    sleep(1.5)\n    \n    Wmx3Lib_cm.motion.Stop(2)\n\n    Wmx3Lib_cm.motion.Wait(2)\n    \n    # Create a command value of target as 10.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 2\n    posCommand.target = 10\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(2)\n\n\n    # Set servo off.\n    ret = Wmx3Lib_cm.axisControl.SetServoOn(2, 0)\n    if ret!=0:\n        print('SetServoOn to off error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[2],\n[10]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 4,
        "Instruction": "Start an absolute position command of Axis 0 to position 180 with 1000 velocity, and then start a relative position command of Axis 0 with 200 distance and 2000 velocity.",
        "CanonicalCode": "# Write python code to Start an absolute position command of Axis 0 to position 180 with 1000 velocity, and then start a relative position command of Axis 0 with 200 distance and 2000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n    \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    # Start an absolute position command of Axis 0 to position 180 with 1000 velocity, and then start a relative position command of Axis 0 with 200 distance and 2000 velocity.\n    # Create a command value of target as 180.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 180\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to specified absolute position.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret!=0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n    # Create a command value of target as 200.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 200\n    posCommand.profile.velocity = 2000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move from current position to a specified distance relatively. e.g. 'Move 100..'\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret!=0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n    # Set servo off for Axis 0\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[380]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 5,
        "Instruction": "Start an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (-200, -200), the 2nd segment is a counterclockwise circular interpolation to position (-150, -200) with center point (0, 0), the 3rd segment is a linear interpolation to position (-180, -10), and the 4th segment is a clockwise circular interpolation to position (-10, -150) with center point (0, 0).",
        "CanonicalCode": "# Write python code to Start an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (-200, -200), the 2nd segment is a counterclockwise circular interpolation to position (-150, -200) with center point (0, 0), the 3rd segment is a linear interpolation to position (-180, -10), and the 4th segment is a clockwise circular interpolation to position (-10, -150) with center point (0, 0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (-200, -200), the 2nd segment is a counterclockwise circular interpolation to position (-150, -200) with center point (0, 0), the 3rd segment is a linear interpolation to position (-180, -10), and the 4th segment is a clockwise circular interpolation to position (-10, -150) with center point (0, 0).\n    adv = AdvancedMotion(Wmx3Lib)\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    path.enableConstProfile = 1\n\n    path.profile = Profile()\n    path.profile.type = ProfileType.Trapezoidal\n    path.profile.velocity = 1000\n    path.profile.acc = 10000\n    path.profile.dec = 10000\n\n    path.numPoints = 4\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n\n    path.SetTarget(0, 0, -200)\n    path.SetTarget(1, 0, -200)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, -150)\n    path.SetTarget(1, 1, -200)\n    path.SetCenterPos(0, 1, 0)\n    path.SetCenterPos(1, 1, 0)\n    path.SetDirection(1, 1)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, -180)\n    path.SetTarget(1, 2, -10)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, -10)\n    path.SetTarget(1, 3, -150)\n    path.SetCenterPos(0, 3, 0)\n    path.SetCenterPos(1, 3, 0)\n    path.SetDirection(3, 1)\n\n    ret = adv.advMotion.StartPathIntplPos(path)\n    if ret!=0:\n            print('StartPathIntplPos error code is ' + str(ret) + ': ' + adv.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[-10,-150]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 6,
        "Instruction": "Set output bit 0.2 to be 1, sleep for 0.15 seconds, then set it to be 0.",
        "CanonicalCode": "# Write python code to Set output bit 0.2 to be 1, sleep for 0.15 seconds, and then set it to be 0.\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n\n    # Set output bit 0.2 to be 1, sleep for 0.15 seconds, and then set it to be 0.\n    Wmx3Lib_Io = Io(Wmx3Lib)\n    ret = Wmx3Lib_Io.SetOutBit(0x0, 0x02, 0x01)\n    if ret!=0:\n        print('SetOutBit error code is ' + str(ret) + ': ' + Wmx3Lib_Io.ErrorToString(ret))\n        return\n    \n    sleep(0.15)\n    ret = Wmx3Lib_Io.SetOutBit(0x0, 0x02, 0x00)\n    if ret!=0:\n        print('SetOutBit error code is ' + str(ret) + ': ' + Wmx3Lib_Io.ErrorToString(ret))\n        return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": NaN,
        "MotionLogData": NaN
    },
    {
        "TaskId": 7,
        "Instruction": "Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity.",
        "CanonicalCode": "# Write python code to Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity.\n    # Create a command value of target as (300, 100).\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,300)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,100)  #Set target of Axis 1 to be 100\n\n    # Start an absolute position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret!=0:\n            print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[300,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 8,
        "Instruction": "Start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.",
        "CanonicalCode": "# Write python code to Start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.\n    # Create a command value of relative distance of (200, -150).\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,200)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,-150)  #Set target of Axis 1 to be 100\n\n    # Start an relative position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplMov(lin)\n    if ret!=0:\n            print('StartLinearIntplMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[200,150]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 9,
        "Instruction": "Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity, and then start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.",
        "CanonicalCode": "# Write python code to Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity, and then start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n        \n\n    # Start an absolute position linear interpolation motion command of Axis 0 and 1 to position (300, 100) with 1000 velocity, and then start a relative position linear interpolation motion command of Axis 0 and 1 with  (200, -150) distance with 1000 velocity.\n    # Create a command value of relative distance\n    lin = Motion_LinearIntplCommand()\n    lin.axisCount = 2 \n    lin.SetAxis(0,0)\n    lin.SetAxis(1,1) \n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0,300)  #Set target of Axis 0 to be 300\n    lin.SetTarget(1,100)  #Set target of Axis 1 to be 100\n\n    # Start an absolute position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret!=0:\n            print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n\n    lin.SetTarget(0,200)  #Set target of Axis 0  \n    lin.SetTarget(1,-150)  #Set target of Axis 1  \n\n    # Start an relative position linear interpolation motion command.\n    ret =Wmx3Lib_cm.motion.StartLinearIntplMov(lin)\n    if ret!=0:\n            print('StartLinearIntplMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n    Wmx3Lib_cm.motion.Wait(0) #need to wait the Axis 0 to be idle\n    \n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[500,-50]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 10,
        "Instruction": "Establish synchronous control between master axis 0 and a slave axis 1, then move Axis 0 to position 188 with velocity 1200.",
        "CanonicalCode": "# Write python code to Establish synchronous control between master axis 0 and a slave axis 1, then move Axis 0 to position 188 with velocity 1200.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0, 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Establish synchronous control between master axis 0 and a slave axis 1, then move Axis 0 to position 188 with velocity 1200.\n    # Establish the synchronization between Axis 0 and Axis 1, with Axis 0 designated as the master axis and Axis 1 as the slave axis.\n    ret = Wmx3Lib_cm.sync.SetSyncMasterSlave(0, 1)\n    if ret != 0:\n        print('SetSyncMasterSlave error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Create a command with target position 1,000,000 and velocity 100,000.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 188\n    posCommand.profile.velocity = 1200\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute the command to move the master axis from its current position to a specified absolute position, with the slave axis moving in synchronization.\n    ret = Wmx3Lib_cm.motion.StartPos(posCommand)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the positioning motion to complete. Start a blocking wait command, returning only when Axis 0 becomes idle.\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Release the synchronization between Axis 0 and Axis 1.\n    ret = Wmx3Lib_cm.sync.ResolveSync(1)\n    if ret != 0:\n        print('ResolveSync error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[188,188]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 11,
        "Instruction": "Start a cubic spline motion command of Axis 2 and 3 with the total time of 1000ms to complete, the 1st point to 9th point are (0,0),(10,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(7,8).",
        "CanonicalCode": "# Write python code to Start a cubic spline motion command of Axis 2 and 3 with the total time of 1000ms to complete, the 1st point to 9th point are (0,0),(10,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(7,8).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 2, 3\n    for axis in [2, 3]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start a cubic spline motion command of Axis 2 and 3 with the total time of 1000ms to complete, the 1st point to 9th point are (0,0),(10,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(7,8).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    # Allocate buffer memory for a spline execution channel with 100 points for Channel 0.\n    ret = Wmx3Lib_adv.advMotion.CreateSplineBuffer(0, 100)\n    if ret != 0:\n        print('CreateSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Set the spline command options, specifying Axis 0 and Axis 1, with a total time of 1,000 milliseconds to complete the spline motion.\n    splineCommand = AdvMotion_TotalTimeSplineCommand()\n    splineCommand.dimensionCount = 2\n    splineCommand.SetAxis(0, 2)\n    splineCommand.SetAxis(1, 3)\n    splineCommand.totalTimeMilliseconds = 1000\n\n    # Set the spline point data with 9 points.\n    splinePoint = []\n\n    ret, CmStatus = Wmx3Lib_cm.GetStatus()\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[0].SetPos(0, 0)\n    splinePoint[0].SetPos(1, 0)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[1].SetPos(0, 10)\n    splinePoint[1].SetPos(1, 0)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[2].SetPos(0, 50)\n    splinePoint[2].SetPos(1, 50)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[3].SetPos(0, 100)\n    splinePoint[3].SetPos(1, 100)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[4].SetPos(0, 100)\n    splinePoint[4].SetPos(1, 150)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[5].SetPos(0, 0)\n    splinePoint[5].SetPos(1, 150)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[6].SetPos(0, 0)\n    splinePoint[6].SetPos(1, 100)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[7].SetPos(0, 50)\n    splinePoint[7].SetPos(1, 50)\n\n    splinePoint.append(AdvMotion_SplinePoint())\n    splinePoint[8].SetPos(0, 7)\n    splinePoint[8].SetPos(1, 8)\n\n    # Execute the spline command.\n    ret = Wmx3Lib_adv.advMotion.StartCSplinePos_TotalTime(0, splineCommand, 9, splinePoint)\n    if ret != 0:\n        print('StartCSplinePos_TotalTime error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 2)\n    axisSel.SetAxis(1, 3)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Free buffer memory for the spline execution channel. (Normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n    if ret != 0:\n        print('FreeSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axis 2 and 3\n\n    for axis in [2, 3]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[2,3],\n[7,8]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 12,
        "Instruction": "Create and execute a cyclic buffer memory space for Axis 4, to pisition 100 within 200 cycles, then move a relative 0 distance within 600 cycles, then to pisition -100 within 200 cycles, then sleep 1.5s, and close the cyclic buffer.",
        "CanonicalCode": "# Write python code to Create and execute a cyclic buffer memory space for Axis 4, to pisition 100 within 200 cycles, then move a relative 0 distance within 600 cycles, then to pisition -100 within 200 cycles, then sleep 1.5s, and close the cyclic buffer.\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 4\n    for axis in [4]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Create and execute a cyclic buffer memory space for Axis 4, to pisition 100 within 200 cycles, then move a relative 0 distance within 600 cycles, then to pisition -100 within 200 cycles, then sleep 1.5s, and close the cyclic buffer.\n    Wmx3Lib_cyc = CyclicBuffer(Wmx3Lib)\n\n    # Create a new cyclic buffer memory space for Axis 4, with a size of 1,024 cycles.\n    ret = Wmx3Lib_cyc.OpenCyclicBuffer(4, 1024)\n    if ret != 0:\n        print('OpenCyclicBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n    # Start the execution of the cyclic position command buffer for Axis 4.\n    ret = Wmx3Lib_cyc.Execute(4)\n    if ret != 0:\n        print('Execute error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n    # Dynamically add points to move from the current position to the absolute position of 100 within 200 cycles.\n    cyclicBufferSingleAxisCommand = CyclicBufferSingleAxisCommand()\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.AbsolutePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 200\n    cyclicBufferSingleAxisCommand.command = 100\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n    # The relative position is 0, which means there was no movement for 600 cycles from the previous position.\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.RelativePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 600\n    cyclicBufferSingleAxisCommand.command = 0\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n    # Move from the current position to the absolute position of -100 within 200 cycles.\n    cyclicBufferSingleAxisCommand.type = CyclicBufferCommandType.AbsolutePos\n    cyclicBufferSingleAxisCommand.intervalCycles = 200\n    cyclicBufferSingleAxisCommand.command = -100\n    ret = Wmx3Lib_cyc.AddCommand(4, cyclicBufferSingleAxisCommand)\n    if ret != 0:\n        print('AddCommand error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n    # Wait for 1.5 seconds until the motion ends.\n    sleep(1.5)\n\n    # Close the cyclic buffer memory space.\n    ret = Wmx3Lib_cyc.CloseCyclicBuffer(4)\n    if ret != 0:\n        print('CloseCyclicBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_cyc.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axis 4\n    for axis in [4]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[4],\n[-100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 13,
        "Instruction": "Start the motion for a path interpolation with look ahead channel 0 for Axis 0 and 1, with velocity 500, the 1st to 4th points are (100, 0) with smoothRadius as 12.5, (100, 100) with smoothRadius as 25,(0, 100) with smoothRadius as 50, and(0, 0).",
        "CanonicalCode": "# Write python code to Start the motion for a path interpolation with look ahead channel 0 for Axis 0 and 1, with velocity 500, the 1st to 4th points are (100, 0) with smoothRadius as 12.5, (100, 100) with smoothRadius as 25,(0, 100) with smoothRadius as 50, and(0, 0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0 and 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n    \n\n    # Start the motion for a path interpolation with look ahead channel 0 for Axis 0 and 1, with velocity 500, the 1st to 4th points are (100, 0) with smoothRadius as 12.5, (100, 100) with smoothRadius as 25,(0, 100) with smoothRadius as 50, and(0, 0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n\n    sleep(0.1)\n\n    # Allocate buffer memory for a path interpolation with look ahead channel with 1,000 points for Channel 0.\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Set the configuration for the path interpolation with lookahead channel, specifying Axis 0 and Axis 1, with composite velocity of 1,000, composite acceleration of 20,000, and sample distance of 100.\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 500\n    conf.compositeAcc = 10000\n    conf.sampleDistance = 100\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add interpolation commands to the path interpolation with look ahead channel, with the main body being a square trajectory formed by four points, with a side length of 100. There are smooth radius of 12.5, 25, and 50 at the end of the first, second, and third segments, respectively.\n    path = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 12.5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 25\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 50\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start the motion for the path interpolation with look ahead channel.\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Free buffer memory for a path interpolation with lookahead channel. \n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 14,
        "Instruction": "Start a clockwise circular interpolation motion command of Axis 0 and 1 with center position (100, 200), arc length 360, and velocity 1000.",
        "CanonicalCode": "# Write python code to Start a clockwise circular interpolation motion command of Axis 0 and 1 with center position (100, 200), arc length 360, and velocity 1000.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axis 0 and 1\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start a clockwise circular interpolation motion command of Axis 0 and 1 with center position (100, 200), arc length 360, and velocity 1000.\n    circularIntplCommand = Motion_CenterAndLengthCircularIntplCommand()\n\n    # Execute Circular Interpolation of Axis 0 and 1 with center position (100, 200), arc length 360, velocity 1000.\n    circularIntplCommand.SetAxis(0, 0)\n    circularIntplCommand.SetAxis(1, 1)\n    circularIntplCommand.SetCenterPos(0, 100)\n    circularIntplCommand.SetCenterPos(1, 200)\n    circularIntplCommand.clockwise = 1\n    circularIntplCommand.arcLengthDegree = 360\n    circularIntplCommand.profile.type = ProfileType.Trapezoidal\n    circularIntplCommand.profile.velocity = 1000\n    circularIntplCommand.profile.acc = 10000\n    circularIntplCommand.profile.dec = 10000\n    ret = Wmx3Lib_cm.motion.StartCircularIntplPos_CenterAndLength(circularIntplCommand)\n    if ret != 0:\n        print('StartCircularIntplPos_RadiusAndEnd error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axis 0 and 1\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 15,
        "Instruction": "Start a helical interpolation motion command of clockwise circular interpolation of Axis 4 and 5 with center position  (100, 120), rotation degree 720, and velocity 1060, while concurrently moving axis 8 as the linear axis to position 140.",
        "CanonicalCode": "# Write python code to Start a helical interpolation motion command of clockwise circular interpolation of Axis 4 and 5 with center position  (100, 120), rotation degree 720, and velocity 1060, while concurrently moving axis 8 as the linear axis to position 140.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [4, 5, 8]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Start a helical interpolation motion command of clockwise circular interpolation of Axis 4 and 5 with center position  (100, 120), rotation degree 720, and velocity 1060, while concurrently moving axis 8 as the linear axis to position 140.\n    helicalCommand = Motion_HelicalIntplCommand()\n\n    # Execute Helical Motion\n    helicalCommand.SetAxis(0, 4)\n    helicalCommand.SetAxis(1, 5)\n    helicalCommand.zAxis = 8\n    helicalCommand.SetCenterPos(0, 100)\n    helicalCommand.SetCenterPos(1, 120)\n    helicalCommand.zEndPos = 140\n    helicalCommand.clockwise = 1\n    helicalCommand.arcLengthDegree = 720\n    helicalCommand.profile.type = ProfileType.Trapezoidal\n    helicalCommand.profile.velocity = 1060\n    helicalCommand.profile.acc = 10000\n    helicalCommand.profile.dec = 10000\n    ret = Wmx3Lib_cm.motion.StartHelicalIntplPos(helicalCommand)\n    if ret != 0:\n        print('StartHelicalIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 3\n    axisSel.SetAxis(0, 4)\n    axisSel.SetAxis(1, 5)\n    axisSel.SetAxis(2, 8)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n        \n\n\n    # Set servo off for Axes\n    for axis in [4, 5, 8]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[4,5,8],\n[0,0,140]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 16,
        "Instruction": "Start a relative triggered position command of Axis 1 with 180 distance and velocity of 1000, and the triggered condition is the remaining distance for Axis 0 to the target position is 30 while it moves a relative 100 distance.",
        "CanonicalCode": "# Write python code to Start a relative triggered position command of Axis 1 with 180 distance and velocity of 1000, and the triggered condition is the remaining distance for Axis 0 to the target position is 30 while it moves a relative 100 distance.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n \n    # Start a relative triggered position command of Axis 1 with 180 distance and velocity of 1000, and the triggered condition is the remaining distance for Axis 0 to the target position is 30 while it moves a relative 100 distance.\n    posCommand = Motion_PosCommand()\n    tgrPosCommand = Motion_TriggerPosCommand()\n    trigger = Trigger()\n\n    # Move the motor to the specified position.\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 100\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n    ret = Wmx3Lib_cm.motion.StartMov(posCommand)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Set trigger PosCommand.\n    tgrPosCommand.profile.type = ProfileType.Trapezoidal\n    tgrPosCommand.axis = 1\n    tgrPosCommand.target = 180\n    tgrPosCommand.profile.velocity = 1000\n    tgrPosCommand.profile.acc = 10000\n    tgrPosCommand.profile.dec = 10000\n\n    # Create Trigger\n    # Start when the remaining distance of 0 axis reaches 30 pulse.\n    trigger.triggerAxis = 0\n    trigger.triggerType = TriggerType.RemainingDistance\n    trigger.triggerValue = 30\n    tgrPosCommand.trigger = trigger\n    ret = Wmx3Lib_cm.motion.StartMov_Trigger(tgrPosCommand)\n    if ret != 0:\n        print('StartMov_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(1)\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n        \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[100,180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 17,
        "Instruction": "Initialize WMX3, sleep 1.6s, and close WMX3.",
        "CanonicalCode": "# Write python code to Initialize WMX3, sleep 1.6s, and close WMX3.\n# This python code is to initialized WMX3(includes CreateDevice, SetDeviceName, StartCommunication, ImportAndSetAll, ClearAmpAlarm, SetServoOn, StartHome), and sleep 1.6s, and close WMX3(includes SetServoOn, StopCommunication and CloseDevice). \n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n    # Sleep 1.6s\n    sleep(1.6)\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()\n\n",
        "EndPoint": "[[0],\n[0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 18,
        "Instruction": "Record and execute an API buffer with two segments: Move Axis 0 to position 200 and Axis 1 to postion 100.",
        "CanonicalCode": "# Write python code to Record and execute an API buffer with two segments: Move Axis 0 to position 200 and Axis 1 to postion 100.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Record and execute an API buffer with two segments: Move Axis 0 to position 200 and Axis 1 to postion 100.\n    Wmx3Lib_buf = ApiBuffer(Wmx3Lib)\n    #  Clear the buffer of the specified channel.\n    Wmx3Lib_buf.Clear(0)\n    # Create a buffer for the specified channel.\n    Wmx3Lib_buf.CreateApiBuffer(0, 1024 * 1024 * 3)\n    # Start recording for the specified channel.\n    Wmx3Lib_buf.StartRecordBufferChannel(0)\n\n    # Create a command value.\n    posCommand = Motion_PosCommand()\n    posCommand.profile.type = ProfileType.Trapezoidal\n    posCommand.axis = 0\n    posCommand.target = 200\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move to a specified absolute position. \n    Wmx3Lib_cm.motion.StartPos(posCommand)\n\n    Wmx3Lib_buf.Wait(0)\n\n    posCommand.axis = 1\n    posCommand.target = 100\n    posCommand.profile.velocity = 1000\n    posCommand.profile.acc = 10000\n    posCommand.profile.dec = 10000\n\n    # Execute command to move to a specified absolute position.\n    Wmx3Lib_cm.motion.StartPos(posCommand)\n    Wmx3Lib_buf.Wait(1)\n\n    # End Recording.\n    Wmx3Lib_buf.EndRecordBufferChannel()\n    # Drive the motion accumulated in the buffer so far.\n    Wmx3Lib_buf.Execute(0)\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Destroy API buffer resources.\n    Wmx3Lib_buf.Halt(0)\n    Wmx3Lib_buf.FreeApiBuffer(0)\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[200,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 19,
        "Instruction": "Set an event to trigger a relative position command of Axis 0 with 100 distance and 1000 velocity, when Output 0.1 = 1. Event id is 10.",
        "CanonicalCode": "# Write python code to Set an event to trigger a relative position command of Axis 0 with 100 distance and 1000 velocity, when Output 1.0 = 1. Event id is 10.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Set an event to trigger a relative position command of Axis 0 with 100 distance and 1000 velocity, when Output 1.0 = 1. Event id is 10.\n    Wmx3Lib_EventCtl = EventControl(Wmx3Lib)\n    eventIN_IO = IoEventInput()\n    eventOut_Motion = CoreMotionEventOutput()\n    # Event ID\n    posEventID = 10\n    # RemoveEvent\n    Wmx3Lib_EventCtl.RemoveEvent(posEventID)\n\n    eventIN_IO.type = IoEventInputType.IOBit\n    eventIN_IO.ioBit.ioSourceType = IOSourceType.Output\n    eventIN_IO.ioBit.bitAddress = 0\n    eventIN_IO.ioBit.byteAddress = 1\n\n    eventOut_Motion.type = CoreMotionEventOutputType.StartSingleMov\n    eventOut_Motion.startSingleMov.axis = 0\n    eventOut_Motion.startSingleMov.type = ProfileType.Trapezoidal\n    eventOut_Motion.startSingleMov.target = 100\n    eventOut_Motion.startSingleMov.velocity = 1000\n    eventOut_Motion.startSingleMov.acc = 10000\n    eventOut_Motion.startSingleMov.dec = 10000\n\n    # Set input events, output events, and event addresses.\n    ret,Event_ID = Wmx3Lib_EventCtl.SetEvent_ID(eventIN_IO, eventOut_Motion, posEventID)\n    if ret != 0:\n        print('SetEvent_ID error code is ' + str(ret))\n        return\n    # EnableEvent\n    Wmx3Lib_EventCtl.EnableEvent(posEventID, 1)\n\n    sleep(0.01)\n    # Set Output 1.0 = 1 to trigger the motion\n    Wmx3Lib_Io = Io(Wmx3Lib)\n    ret = Wmx3Lib_Io.SetOutBit(0x01, 0x00, 0x01)\n    if ret!=0:\n        print('SetOutBit error code is ' + str(ret) + ': ' + Wmx3Lib_Io.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[110]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 20,
        "Instruction": "Execute an absolute triggered position command.Start an absolute postion command of Axis 0 to position 124 with velocity 1000, when the remaining time is 0, triggers Axis 0 to move to the absolute position of 70 with velocity 2000.",
        "CanonicalCode": "# Write python code to Execute an absolute triggered position command.Start an absolute postion command of Axis 0 to position 124 with velocity 1000, when the remaining time is 0, triggers Axis 0 to move to the absolute position of 70 with velocity 2000.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute triggered position command.Start an absolute postion command of Axis 0 to position 124 with velocity 1000, when the remaining time is 0, triggers Axis 0 to move to the absolute position of 70 with velocity 2000.\n    pos = Motion_PosCommand()\n    trigPos = Motion_TriggerPosCommand()\n\n    # Execute normal motion command\n    pos.axis = 0\n    pos.profile.type = ProfileType.Trapezoidal\n    pos.profile.velocity = 1000\n    pos.profile.acc = 10000\n    pos.profile.dec = 10000\n    pos.profile.endVelocity = 1000\n    pos.target = 124\n\n    ret = Wmx3Lib_cm.motion.StartPos(pos)\n    if ret != 0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion command\n    trigPos.axis = 0\n    trigPos.profile.type = ProfileType.Trapezoidal\n    trigPos.profile.velocity = 2000\n    trigPos.profile.acc = 10000\n    trigPos.profile.dec = 10000\n    trigPos.target = 70\n    trigPos.trigger.triggerType = TriggerType.RemainingTime\n    trigPos.trigger.triggerAxis = 0\n    trigPos.trigger.triggerValue = 0\n\n    ret = Wmx3Lib_cm.motion.StartPos_Trigger(trigPos)\n    if ret != 0:\n        print('StarttrigPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the axis moves to the target position and stops.\n    Wmx3Lib_cm.motion.Wait(0)\n\n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[70]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 21,
        "Instruction": "Execute an absolute position linear interpolation motion command. Control Axis 0 and 1 to linearly interpolate to position (300, 100) at a velocity of 1000, with acceleration and deceleration of 10000. Set the maximum velocity of Axis 0 to 600.",
        "CanonicalCode": "# Write python code to Execute an absolute position linear interpolation motion command. Control Axis 0 and 1 to linearly interpolate to position (300, 100) at a velocity of 1000, with acceleration and deceleration of 10000. Set the maximum velocity of Axis 0 to 600.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position linear interpolation motion command. Control Axis 0 and 1 to linearly interpolate to position (300, 100) at a velocity of 1000, with acceleration and deceleration of 10000. Set the maximum velocity of Axis 0 to 600.\n    lin = Motion_LinearIntplCommand()\n\n    # Execute absolute position linear interpolation motion command\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0, 300)\n    lin.SetTarget(1, 100)\n\n    lin.SetMaxVelocity(0, 600)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[300,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 22,
        "Instruction": "Execute an absolute position linear interpolation motion command. Control Axis 0 and Axis 1 to linearly interpolate to position (300, 100). Set the maximum velocity of Axis 0 to 600 and Axis 1 to 500, with a maximum acceleration and deceleration of Axis 0 to 4000 and Axis 1 to 3000.",
        "CanonicalCode": "# Write python code to Execute an absolute position linear interpolation motion command. Control Axis 0 and Axis 1 to linearly interpolate to position (300, 100). Set the maximum velocity of Axis 0 to 600 and Axis 1 to 500, with a maximum acceleration and deceleration of Axis 0 to 4000 and Axis 1 to 3000.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position linear interpolation motion command. Control Axis 0 and Axis 1 to linearly interpolate to position (300, 100). Set the maximum velocity of Axis 0 to 600 and Axis 1 to 500, with a maximum acceleration and deceleration of Axis 0 to 4000 and Axis 1 to 3000.\n    lin = Motion_LinearIntplCommand()\n\n    # Execute absolute position linear interpolation motion command\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0, 300)\n    lin.SetTarget(1, 100)\n\n    lin.SetMaxVelocity(0, 600)\n    lin.SetMaxVelocity(1, 500)\n\n    lin.SetMaxAcc(0, 4000)\n    lin.SetMaxAcc(1, 3000)\n\n    lin.SetMaxDec(0, 4000)\n    lin.SetMaxDec(1, 3000)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[300,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 23,
        "Instruction": "Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (150, 30) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the completed distance reaches 100, move Axis 0 and Axis 1 to (-100, -10).",
        "CanonicalCode": "# Write python code to Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (150, 30) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the completed distance reaches 100, move Axis 0 and Axis 1 to (-100, -10).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (150, 30) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the completed distance reaches 100, move Axis 0 and Axis 1 to (-100, -10).\n    lin = Motion_LinearIntplCommand()\n    trig = Trigger()\n\n    # Execute normal motion command\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0, 150)\n    lin.SetTarget(1, 30)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n\n    lin.SetTarget(0, -100)\n    lin.SetTarget(1, -10)\n\n    trig.triggerType = TriggerType.CompletedDistance\n    trig.triggerValue = 100\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[-100,-10]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 24,
        "Instruction": "Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (130, 60) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 80, trigger Axis 0 and Axis 1 to (-70, -40).",
        "CanonicalCode": "# Write python code to Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (130, 60) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 80, trigger Axis 0 and Axis 1 to (-70, -40).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (130, 60) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 80, trigger Axis 0 and Axis 1 to (-70, -40).\n    lin = Motion_LinearIntplCommand()\n    trig = Trigger()\n\n    # Execute normal motion command\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0, 130)\n    lin.SetTarget(1, 60)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n\n    lin.SetTarget(0, -70)\n    lin.SetTarget(1, -40)\n\n    trig.triggerAxis = 0\n    trig.triggerType = TriggerType.RemainingDistance\n    trig.triggerValue = 80\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return   \n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[-70,-40]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 25,
        "Instruction": "Execute an absolute position triggered circular interpolation motion command.Control Axis 0 and Axis 1 to perform a clockwise circular interpolation with a 50 radius to pisition (100, 0) at a velocity 1000. Wait for 1 millisecond, then execute the trigger circular interpolation motion command. When the remaining distance of Axis 0 is 80, trigger Axis 0 and Axis 1 to perform a clockwise circular interpolation (200, 0).",
        "CanonicalCode": "# Write python code to Execute an absolute position triggered circular interpolation motion command.Control Axis 0 and Axis 1 to perform a clockwise circular interpolation with a 50 radius to pisition (100, 0) at a velocity of 1000. Wait for 1 millisecond, then execute the trigger circular interpolation motion command. When the remaining distance of Axis 0 is 80, trigger Axis 0 and Axis 1 to perform a clockwise circular interpolation (200, 0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position triggered circular interpolation motion command.Control Axis 0 and Axis 1 to perform a clockwise circular interpolation with a 50 radius to pisition (100, 0) at a velocity of 1000. Wait for 1 millisecond, then execute the trigger circular interpolation motion command. When the remaining distance of Axis 0 is 80, trigger Axis 0 and Axis 1 to perform a clockwise circular interpolation (200, 0).\n    cir = Motion_RadiusAndEndCircularIntplCommand()\n    trig = Trigger()\n\n    # Execute normal motion command\n    cir.SetAxis(0, 0)\n    cir.SetAxis(1, 1)\n\n    cir.profile.type = ProfileType.Trapezoidal\n    cir.profile.velocity = 1000\n    cir.profile.acc = 10000\n    cir.profile.dec = 10000\n\n    cir.SetEndPos(0, 100)\n    cir.SetEndPos(1, 0)\n\n    cir.radius = 50\n    cir.clockwise = 1\n\n    ret = Wmx3Lib_cm.motion.StartCircularIntplPos_RadiusAndEnd(cir)\n    if ret != 0:\n        print('StartCircularIntplPos_RadiusAndEnd error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n\n    cir.SetEndPos(0, 200)\n    cir.SetEndPos(1, 0)\n\n    trig.triggerAxis = 0\n    trig.triggerType = TriggerType.RemainingDistance\n    trig.triggerValue = 80\n\n    ret = Wmx3Lib_cm.motion.StartCircularIntplPos_RadiusAndEnd_Trigger(cir, trig)\n    if ret != 0:\n        print('StartCircularIntplPos_RadiusAndEnd_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[200,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 26,
        "Instruction": "Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (100, 100) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0). After previous interpolation completes, when the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0).And using same trigger and condition to trigger Axis 0 and Axis 1 to (300, 100),(400, 0) and (500, 100).",
        "CanonicalCode": "# Write python code to Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (100, 100) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0). After previous interpolation completes, when the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0).And using same trigger and condition to trigger Axis 0 and Axis 1 to (300, 100),(400, 0) and (500, 100).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position triggered linear interpolation motion command.Control Axis 0 and Axis 1 to linearly interpolate to (100, 100) at a velocity of 1000 with acceleration and deceleration of 10000. Wait for 1 millisecond, then execute the trigger linear interpolation motion command. When the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0). After previous interpolation completes, when the remaining distance is 30, trigger Axis 0 and Axis 1 to (200, 0).And using same trigger and condition to trigger Axis 0 and Axis 1 to (300, 100),(400, 0) and (500, 100).\n    lin = Motion_LinearIntplCommand()\n    trig = Trigger()\n\n    # Execute normal motion command\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 1000\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    lin.SetTarget(0, 100)\n    lin.SetTarget(1, 100)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n\n    lin.SetTarget(0, 200)\n    lin.SetTarget(1, 0)\n\n    trig.triggerAxis = 0\n    trig.triggerType = TriggerType.RemainingDistance\n    trig.triggerValue = 30\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the first interpolation completes before setting trigger for third interpolation\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).commandReady == 1):\n            break\n        sleep(0.1)\n\n    lin.SetTarget(0, 300)\n    lin.SetTarget(1, 100)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the second interpolation completes before setting trigger for fourth interpolation\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).commandReady == 1):\n            break\n        sleep(0.1)\n\n    lin.SetTarget(0, 400)\n    lin.SetTarget(1, 0)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until the third interpolation completes before setting trigger for fifth interpolation\n    while True:\n        # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n        ret, CmStatus = Wmx3Lib_cm.GetStatus()\n        if (CmStatus.GetAxesStatus(0).commandReady == 1):\n            break\n        sleep(0.1)\n\n    lin.SetTarget(0, 500)\n    lin.SetTarget(1, 100)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[500,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 27,
        "Instruction": "Execute a sequence of moving position command with blocking wait command.The moving distance of Axis 0 is 100, -100 and 100 with blocking wait.",
        "CanonicalCode": "# Write python code to Execute a sequence of moving position command with blocking wait command.The moving distance of Axis 0 is 100, -100 and 100 with blocking wait.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a sequence of moving position command with blocking wait command.The moving distance of Axis 0 is 100, -100 and 100 with blocking wait.\n    pos = Motion_PosCommand()\n\n    # Set position command parameters\n    pos.axis = 0\n    pos.profile.type = ProfileType.Trapezoidal\n    pos.profile.velocity = 1000\n    pos.profile.acc = 10000\n    pos.profile.dec = 10000\n\n    # Execute motion to move axis forward 100\n    pos.target = 100\n\n    ret = Wmx3Lib_cm.motion.StartMov(pos)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finishedmoving \n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute motion to move axis backward 100\n    pos.target = -100\n    ret = Wmx3Lib_cm.motion.StartMov(pos)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute motion to move axis forward 100\n    pos.target = 100\n    ret = Wmx3Lib_cm.motion.StartMov(pos)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 28,
        "Instruction": "Execute a sequence of motion commands using trigger motion functions and Wait functions. Move Axis 0 as 100 distance with 1000 velocity, and trigger it to move as -100 distance when the remaining time is 0, and then move as 200 distance, and -200 distance after waiting it to be overridable.",
        "CanonicalCode": "# Write python code to Execute a sequence of motion commands using trigger motion functions and Wait functions.Move Axis 0 as 100 distance with 1000 velocity, and trigger it to move as -100 distance when the remaining time is 0, and then move as 200 distance, and -200 distance after waiting it to be overridable.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a sequence of motion commands using trigger motion functions and Wait functions.Move Axis 0 as 100 distance with 1000 velocity, and trigger it to move as -100 distance when the remaining time is 0, and then move as 200 distance, and -200 distance after waiting it to be overridable.\n    pos = Motion_PosCommand()\n    tpos = Motion_TriggerPosCommand()\n    wait = Motion_WaitCondition()\n\n    # Set position command parameters\n    pos.axis = 0\n    pos.profile.type = ProfileType.Trapezoidal;\n    pos.profile.velocity = 1000\n    pos.profile.acc = 10000\n    pos.profile.dec = 10000\n\n    # Set triggered position command parameters\n    tpos.axis = 0\n    tpos.profile.type = ProfileType.Trapezoidal\n    tpos.profile.velocity = 1000\n    tpos.profile.acc = 10000\n    tpos.profile.dec = 10000\n    tpos.trigger.triggerAxis = 0\n    tpos.trigger.triggerType = TriggerType.RemainingTime\n    tpos.trigger.triggerValue = 0\n\n    # Set wait condition parameters, waiting Axis 0 to be overridable.\n    wait.waitConditionType = Motion_WaitConditionType.MotionStartedOverrideReady\n    wait.axisCount = 1\n    wait.SetAxis(0, 0)\n\n    # Execute motion to move axis forward 100\n    pos.target = 100\n\n    ret = Wmx3Lib_cm.motion.StartMov(pos)\n    if ret != 0:\n        print('StartMov error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to move axis backward 100 at the end of the previous motion\n    tpos.target = -100\n\n    ret = Wmx3Lib_cm.motion.StartMov_Trigger(tpos)\n    if ret != 0:\n        print('StartMov_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to move axis forward 200 at the end of the previous motion\n    tpos.target = 200\n\n    ret = Wmx3Lib_cm.motion.StartMov_Trigger(tpos)\n    if ret != 0:\n        print('StartMov_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to move axis backward 20000 at the end of the previous motion\n    tpos.target = -200\n    ret = Wmx3Lib_cm.motion.StartMov_Trigger(tpos)\n    if ret != 0:\n        print('StartMov_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 29,
        "Instruction": "Execute a sequence of motion commands using trigger motion functions and Wait functions. Move Axis 0 to position 180 with 20 velocity, and trigger the velocity override to 40, 60, 40, and 20 respectively when the completed time is 1s.",
        "CanonicalCode": "# Write python code to Execute a sequence of motion commands using trigger motion functions and Wait functions. Move Axis 0 to position 180 with 20 velocity, and trigger the velocity override to 40, 60, 40, and 20 respectively when the completed time is 1s.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a sequence of motion commands using trigger motion functions and Wait functions. Move Axis 0 to position 180 with 20 velocity, and trigger the velocity override to 40, 60, 40, and 20 respectively when the completed time is 1s.\n    pos = Motion_PosCommand()\n    tpos = Motion_TriggerPosCommand()\n    wait = Motion_WaitCondition()\n\n    # Set position command parameters\n    pos.axis = 0\n    pos.profile.type = ProfileType.Trapezoidal\n    pos.profile.acc = 1000\n    pos.profile.dec = 1000\n    pos.target = 180\n\n    # Set triggered position command parameters\n    tpos.axis = 0\n    tpos.profile.type = ProfileType.Trapezoidal\n    tpos.profile.acc = 1000\n    tpos.profile.dec = 1000\n    tpos.trigger.triggerAxis = 0\n    tpos.trigger.triggerType = TriggerType.CompletedTime\n    tpos.trigger.triggerValue = 1000\n    tpos.target = 180\n\n    # Set wait condition parameters\n    wait.waitConditionType = Motion_WaitConditionType.MotionStartedOverrideReady\n    wait.axisCount = 1\n    wait.SetAxis(0, 0)\n\n    # Execute motion to move axis forward 20\n    pos.profile.velocity = 20\n\n    ret = Wmx3Lib_cm.motion.StartPos(pos)\n    if ret != 0:\n        print('StartPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to change axis velocity\n    tpos.profile.velocity = 40\n\n    ret = Wmx3Lib_cm.motion.StartPos_Trigger(tpos)\n    if ret != 0:\n        print('StartPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to change axis velocity\n    tpos.profile.velocity = 60\n\n    ret = Wmx3Lib_cm.motion.StartPos_Trigger(tpos)\n    if ret != 0:\n        print('StartPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to change axis velocity\n    tpos.profile.velocity = 40\n\n    ret = Wmx3Lib_cm.motion.StartPos_Trigger(tpos)\n    if ret != 0:\n        print('StartPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger motion to change axis velocity\n    tpos.profile.velocity = 20\n    ret = Wmx3Lib_cm.motion.StartPos_Trigger(tpos)\n    if ret != 0:\n        print('StartPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[180]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 30,
        "Instruction": "Execute a sequence of linear interpolation commands using trigger motion functions and Wait functions. Control Axis 0 and Axis 1 to linearly interpolate to (100, 0) at a velocity of 500\uff0cand then trigger Axis 0 and Axis 1 to linearly interpolate to (100, 100), (0, 100) and (0, 0) respectively when the remaining distance is 20.",
        "CanonicalCode": "# Write python code to Execute a sequence of linear interpolation commands using trigger motion functions and Wait functions. Control Axis 0 and Axis 1 to linearly interpolate to (100, 0) at a velocity of 500\uff0cand then trigger Axis 0 and Axis 1 to linearly interpolate to (100, 100), (0, 100) and (0, 0) respectively when the remaining distance is 20.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a sequence of linear interpolation commands using trigger motion functions and Wait functions. Control Axis 0 and Axis 1 to linearly interpolate to (100, 0) at a velocity of 500\uff0cand then trigger Axis 0 and Axis 1 to linearly interpolate to (100, 100), (0, 100) and (0, 0) respectively when the remaining distance is 20.\n    lin = Motion_LinearIntplCommand()\n    trig = Trigger()\n    wait = Motion_WaitCondition()\n\n    # Set interpolation command parameters\n    lin.axisCount = 2\n    lin.SetAxis(0, 0)\n    lin.SetAxis(1, 1)\n\n    lin.profile.type = ProfileType.Trapezoidal\n    lin.profile.velocity = 500\n    lin.profile.acc = 10000\n    lin.profile.dec = 10000\n\n    # Set trigger parameters (trigger at 2000 remaining distance)\n    trig.triggerAxis = 0\n    trig.triggerType = TriggerType.RemainingDistance\n    trig.triggerValue = 20\n\n    # Set wait condition parameters\n    wait.waitConditionType = Motion_WaitConditionType.MotionStartedOverrideReady\n    wait.axisCount = 1\n    wait.SetAxis(0, 0)\n\n    # Execute linear interpolation to position (100, 0)\n    lin.SetTarget(0, 100)\n    lin.SetTarget(1, 0)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos(lin)\n    if ret != 0:\n        print('StartLinearIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger linear interpolation to position (100, 100)\n    sleep(0.001)\n    lin.SetTarget(0, 100)\n    lin.SetTarget(1, 100)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger linear interpolation to position (0, 100)\n    lin.SetTarget(0, 0)\n    lin.SetTarget(1, 100)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until trigger motion executes\n    ret = Wmx3Lib_cm.motion.Wait_WaitCondition(wait)\n    if ret != 0:\n        print('Wait_WaitCondition error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Execute trigger linear interpolation to position (0, 0)\n    lin.SetTarget(0, 0)\n    lin.SetTarget(1, 0)\n\n    ret = Wmx3Lib_cm.motion.StartLinearIntplPos_Trigger(lin, trig)\n    if ret != 0:\n        print('StartLinearIntplPos_Trigger error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 31,
        "Instruction": "Execute a simple PVT command of Axis 0 consisting of five points as a format of (Position, Velocity, Time): (0,0,0),(55,1000,100),(205,2000,200),(450,3000,300),(600,0,400)",
        "CanonicalCode": "# Write python code to Execute a simple PVT command of Axis 0 consisting of five points as a format of (Position, Velocity, Time): (0,0,0),(55,1000,100),(205,2000,200),(450,3000,300),(600,0,400)\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    \n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a simple PVT command of Axis 0 consisting of five points as a format of (Position, Velocity, Time): (0,0,0),(55,1000,100),(205,2000,200),(450,3000,300),(600,0,400)\n    pvt = Motion_PVTCommand()\n    pvtparameter = Motion_PVTPoint()\n\n    pvt.axis = 0\n    pvt.pointCount = 5\n\n    # Define point data\n    pvtparameter.pos = 0\n    pvtparameter.velocity = 0\n    pvtparameter.timeMilliseconds = 0\n    pvt.SetPoints(0, pvtparameter)\n\n    pvtparameter.pos = 55\n    pvtparameter.velocity = 1000\n    pvtparameter.timeMilliseconds = 100\n    pvt.SetPoints(1, pvtparameter)\n\n    pvtparameter.pos = 205\n    pvtparameter.velocity = 2000\n    pvtparameter.timeMilliseconds = 200\n    pvt.SetPoints(2, pvtparameter)\n\n    pvtparameter.pos = 450\n    pvtparameter.velocity = 3000\n    pvtparameter.timeMilliseconds = 300\n    pvt.SetPoints(3, pvtparameter)\n\n    pvtparameter.pos = 600\n    pvtparameter.velocity = 0\n    pvtparameter.timeMilliseconds = 400\n    pvt.SetPoints(4, pvtparameter)\n\n    # Start PVT motion\n    ret = Wmx3Lib_cm.motion.StartPVT(pvt)\n    if ret != 0:\n        print('StartPVT error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[600]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 32,
        "Instruction": "Execute a PVT interpolation command of Axis 0 and Axis 1 of 4 points as a format of (Position0, Velocity0, Time0, Position1, Velocity1, Time1): (0,0,0,0,0,0),(50,1000,100,100,2000,100),(100,2000,200,250,1000,200),(200,0,300,300,0,300)",
        "CanonicalCode": "# Write python code to Execute a PVT interpolation command of Axis 0 and Axis 1 of 4 points as a format of (Position0, Velocity0, Time0, Position1, Velocity1, Time1): (0,0,0,0,0,0),(50,1000,100,100,2000,100),(100,2000,200,250,1000,200),(200,0,300,300,0,300)\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a PVT interpolation command of Axis 0 and Axis 1 of 4 points as a format of (Position0, Velocity0, Time0, Position1, Velocity1, Time1): (0,0,0,0,0,0),(50,1000,100,100,2000,100),(100,2000,200,250,1000,200),(200,0,300,300,0,300)\n    pvti = Motion_PVTIntplCommand()\n\n    pvtparameter0 = Motion_PVTPoint()\n    pvtparameter1 = Motion_PVTPoint()\n\n    pvti.axisCount = 2\n    pvti.SetAxis(0, 0)\n    pvti.SetAxis(1, 1)\n    pvti.SetPointCount(0, 4)\n    pvti.SetPointCount(1, 4)\n\n    # Define point data\n    pvtparameter0.pos = 0\n    pvtparameter0.velocity = 0\n    pvtparameter0.timeMilliseconds = 0\n    pvtparameter1.pos = 0\n    pvtparameter1.velocity = 0\n    pvtparameter1.timeMilliseconds = 0\n    pvti.SetPoints(0, 0, pvtparameter0)\n    pvti.SetPoints(1, 0, pvtparameter1)\n\n    pvtparameter0.pos = 50\n    pvtparameter0.velocity = 1000\n    pvtparameter0.timeMilliseconds = 100\n    pvtparameter1.pos = 100\n    pvtparameter1.velocity = 2000\n    pvtparameter1.timeMilliseconds = 100\n    pvti.SetPoints(0, 1, pvtparameter0)\n    pvti.SetPoints(1, 1, pvtparameter1)\n\n    pvtparameter0.pos = 100\n    pvtparameter0.velocity = 2000\n    pvtparameter0.timeMilliseconds = 200\n    pvtparameter1.pos = 250\n    pvtparameter1.velocity = 1000\n    pvtparameter1.timeMilliseconds = 200\n    pvti.SetPoints(0, 2, pvtparameter0)\n    pvti.SetPoints(1, 2, pvtparameter1)\n\n    pvtparameter0.pos = 200\n    pvtparameter0.velocity = 0\n    pvtparameter0.timeMilliseconds = 300\n    pvtparameter1.pos = 300\n    pvtparameter1.velocity = 0\n    pvtparameter1.timeMilliseconds = 300\n    pvti.SetPoints(0, 3, pvtparameter0)\n    pvti.SetPoints(1, 3, pvtparameter1)\n\n\n    ret = Wmx3Lib_cm.motion.StartPVT_Intpl(pvti)\n    if ret != 0:\n        print('StartPVT_Intpl error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    \n    # Wait for the motion to complete. Start a blocking wait command, returning only when Axis 0 and Axis 1 become idle.\n    axisSel = AxisSelection()\n    axisSel.axisCount = 2\n    axisSel.SetAxis(0, 0)\n    axisSel.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axisSel)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[200,300]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 33,
        "Instruction": "Execute a PT (Position-Time) command of Axis 0 of 6 points: (0,0),(100,500),(160,1000),(200,1500),(260,2000),(300,2500)",
        "CanonicalCode": "# Write python code to Execute a PT (Position-Time) command of Axis 0 of 6 points: (0,0),(100,500),(160,1000),(200,1500),(260,2000),(300,2500)\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    \n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a PT (Position-Time) command of Axis 0 of 6 points: (0,0),(100,500),(160,1000),(200,1500),(260,2000),(300,2500)\n    pt = Motion_PTCommand()\n    ptparameter = Motion_PTPoint()\n\n    pt.axis = 0\n    pt.pointCount = 6\n\n    # Define point data\n    ptparameter.pos = 0\n    ptparameter.timeMilliseconds = 0\n    pt.SetPoints(0, ptparameter)\n\n    ptparameter.pos = 100\n    ptparameter.timeMilliseconds = 500\n    pt.SetPoints(1, ptparameter)\n\n    ptparameter.pos = 160\n    ptparameter.timeMilliseconds = 1000\n    pt.SetPoints(2, ptparameter)\n\n    ptparameter.pos = 200\n    ptparameter.timeMilliseconds = 1500\n    pt.SetPoints(3, ptparameter)\n\n    ptparameter.pos = 260\n    ptparameter.timeMilliseconds = 2000\n    pt.SetPoints(4, ptparameter)\n\n    ptparameter.pos = 300\n    ptparameter.timeMilliseconds = 2500\n    pt.SetPoints(5, ptparameter)\n\n    ret = Wmx3Lib_cm.motion.StartPT(pt)\n    if ret != 0:\n        print('StartPT error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[300]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 34,
        "Instruction": "Execute a VT (Velocity-Time) command of Axis 0 of 6 points: (0,0),(100,500),(200,1000),(300,1500),(400,2000),(500,2500)",
        "CanonicalCode": "# Write python code to Execute a VT (Velocity-Time) command of Axis 0 of 6 points: (0,0),(100,500),(200,1000),(300,1500),(400,2000),(500,2500)\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    \n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a VT (Velocity-Time) command of Axis 0 of 6 points: (0,0),(100,500),(200,1000),(300,1500),(400,2000),(500,2500)\n    vt = Motion_VTCommand()\n    vtparameter = Motion_VTPoint()\n\n    vt.axis = 0\n    vt.pointCount = 6\n\n    # Define point data\n    vtparameter.velocity = 0\n    vtparameter.timeMilliseconds = 0\n    vt.SetPoints(0, vtparameter)\n\n    vtparameter.velocity = 100\n    vtparameter.timeMilliseconds = 500\n    vt.SetPoints(1, vtparameter)\n\n    vtparameter.velocity = 200\n    vtparameter.timeMilliseconds = 1000\n    vt.SetPoints(2, vtparameter)\n\n    vtparameter.velocity = 300\n    vtparameter.timeMilliseconds = 1500\n    vt.SetPoints(3, vtparameter)\n\n    vtparameter.velocity = 400\n    vtparameter.timeMilliseconds = 2000\n    vt.SetPoints(4, vtparameter)\n\n    vtparameter.velocity = 500\n    vtparameter.timeMilliseconds = 2500\n    vt.SetPoints(5, vtparameter)\n\n    ret = Wmx3Lib_cm.motion.StartVT(vt)\n    if ret != 0:\n        print('StartVT error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[750]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 35,
        "Instruction": "Execute an AT (Acceleration-Time) command of Axis 0 of 7 points: (0,0),(100,500),(100,1000),(-100,1500),(100,2000),(-100,2500),(-100,3000)",
        "CanonicalCode": "# Write python code to Execute anw AT (Acceleration-Time) command of Axis 0 of 7 points: (0,0),(100,500),(100,1000),(-100,1500),(100,2000),(-100,2500),(-100,3000)\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    \n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute anw AT (Acceleration-Time) command of Axis 0 of 7 points: (0,0),(100,500),(100,1000),(-100,1500),(100,2000),(-100,2500),(-100,3000)\n    at = Motion_ATCommand()\n    atparameter = Motion_ATPoint()\n\n    at.axis = 0\n    at.pointCount = 7\n\n    # Define point data\n    atparameter.acc = 0\n    atparameter.timeMilliseconds = 0\n    at.SetPoints(0, atparameter)\n\n    atparameter.acc = 100\n    atparameter.timeMilliseconds = 500\n    at.SetPoints(1, atparameter)\n\n    atparameter.acc = 100\n    atparameter.timeMilliseconds = 1000\n    at.SetPoints(2, atparameter)\n\n    atparameter.acc = -100\n    atparameter.timeMilliseconds = 1500\n    at.SetPoints(3, atparameter)\n\n    atparameter.acc = 100\n    atparameter.timeMilliseconds = 2000\n    at.SetPoints(4, atparameter)\n\n    atparameter.acc = -100\n    atparameter.timeMilliseconds = 2500\n    at.SetPoints(5, atparameter)\n\n    atparameter.acc = -100\n    atparameter.timeMilliseconds = 3000\n    at.SetPoints(6, atparameter)\n\n    ret = Wmx3Lib_cm.motion.StartAT(at)\n    if ret != 0:\n        print('StartAT error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Wait until motion is finished\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    if ret != 0:\n        print('Wait error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0],\n[175]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 36,
        "Instruction": "Execute a total time(1s) type cubic spline of Axis 0 and Axis 1 with 9 points: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).",
        "CanonicalCode": "# Write python code to Execute a total time(1s) type cubic spline of Axis 0 and Axis 1 with 9 points: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a total time(1s) type cubic spline of Axis 0 and Axis 1 with 9 points: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n\n    # Create the spline channel buffer\n    ret = Wmx3Lib_adv.advMotion.CreateSplineBuffer(0, 100)\n    if ret != 0:\n        print('CreateSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Set the spline command options\n    spl = AdvMotion_TotalTimeSplineCommand()\n\n    spl.dimensionCount = 2\n    spl.SetAxis(0, 0)\n    spl.SetAxis(1, 1)\n    spl.totalTimeMilliseconds = 1000\n\n    pt = []\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[0].SetPos(0, 0)\n    pt[0].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[1].SetPos(0, 100)\n    pt[1].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[2].SetPos(0, 50)\n    pt[2].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[3].SetPos(0, 100)\n    pt[3].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[4].SetPos(0, 100)\n    pt[4].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[5].SetPos(0, 0)\n    pt[5].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[6].SetPos(0, 0)\n    pt[6].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[7].SetPos(0, 50)\n    pt[7].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[8].SetPos(0, 0)\n    pt[8].SetPos(1, 0)\n\n    # Execute the spline command\n    ret = Wmx3Lib_adv.advMotion.StartCSplinePos_TotalTime(0, spl, 9, pt)\n    if ret != 0:\n        print('StartCSplinePos_TotalTime error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Free the spline buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n    if ret != 0:\n        print('FreeSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n    sleep(0.5)\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 37,
        "Instruction": "Execute a trapezoidal profile type cubic spline of Axis 0 and Axis 1 with 9 points and the velocity is 1000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).",
        "CanonicalCode": "# Write python code to Execute a trapezoidal profile type cubic spline of Axis 0 and Axis 1 with 9 points and the velocity is 1000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a trapezoidal profile type cubic spline of Axis 0 and Axis 1 with 9 points and the velocity is 1000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n        \n    # Create the spline channel buffer\n    ret = Wmx3Lib_adv.advMotion.CreateSplineBuffer(0, 100)\n    if ret != 0:\n        print('CreateSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n    # Set the spline command options\n    spl = AdvMotion_ProfileSplineCommand()\n    spl.dimensionCount = 2\n    spl.SetAxis(0, 0)\n    spl.SetAxis(1, 1)\n    spl.profile = Profile()\n    spl.profile.type = ProfileType.Trapezoidal\n    spl.profile.velocity = 1000\n    spl.profile.acc = 10000\n    spl.profile.dec = 10000\n\n    pt = []\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[0].SetPos(0, 0)\n    pt[0].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[1].SetPos(0, 100)\n    pt[1].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[2].SetPos(0, 50)\n    pt[2].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[3].SetPos(0, 100)\n    pt[3].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[4].SetPos(0, 100)\n    pt[4].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[5].SetPos(0, 0)\n    pt[5].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[6].SetPos(0, 0)\n    pt[6].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[7].SetPos(0, 50)\n    pt[7].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[8].SetPos(0, 0)\n    pt[8].SetPos(1, 0)\n\n    # Execute the spline command\n    ret = Wmx3Lib_adv.advMotion.StartCSplinePos_Profile(0, spl, 9, pt)\n    if ret != 0:\n        print('StartCSplinePos_Profile error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Free the spline buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n    if ret != 0:\n        print('FreeSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n    sleep(0.5)\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 38,
        "Instruction": "Execute a velocity and acceleration limited cubic spline of Axis 0 and Axis 1 with 9 points and the velocity limit of Axis 0 and Axis 1 is 400 and 300, and the acceleration limit of Axis 0 and Axis 1 is 4000 and 3000, and the composite velocity and acceleration is 1000 and 10000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).",
        "CanonicalCode": "# Write python code to Execute a velocity and acceleration limited cubic spline of Axis 0 and Axis 1 with 9 points and the velocity limit of Axis 0 and Axis 1 is 400 and 300, and the acceleration limit of Axis 0 and Axis 1 is 4000 and 3000, and the composite velocity and acceleration is 1000 and 10000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a velocity and acceleration limited cubic spline of Axis 0 and Axis 1 with 9 points and the velocity limit of Axis 0 and Axis 1 is 400 and 300, and the acceleration limit of Axis 0 and Axis 1 is 4000 and 3000, and the composite velocity and acceleration is 1000 and 10000: (0,0),(100,0),(50,50),(100,100),(100,150),(0,150),(0,100),(50,50),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n        \n    # Create the spline channel buffer\n    ret = Wmx3Lib_adv.advMotion.CreateSplineBuffer(0, 200)\n    if ret != 0:\n        print('CreateSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    sleep(0.001)\n    # Set the spline command options\n    spl = AdvMotion_VelAccLimitedSplineCommand()\n    spl.dimensionCount = 2\n    spl.SetAxis(0, 0)\n    spl.SetAxis(1, 1)\n    spl.SetVelLimit(0, 400)\n    spl.SetVelLimit(1, 300)\n    spl.SetAccLimit(0, 4000)\n    spl.SetAccLimit(1, 3000)\n    spl.compositeVel = 1000\n    spl.compositeAcc = 10000\n    # As with profile type splines, the sampleMultiplier parameter can be increased to improve the accuracy and granularity of the generated velocity and acceleration profile. The sampleMultiplier should be especially increased for point data with a relatively small number of points and a large distance between points. Increasing the sampleMultiplier will not change the shape of the spline trajectory.\n    spl.sampleMultiplier = 20\n\n    # Set the spline point data\n    pt = []\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[0].SetPos(0, 0)\n    pt[0].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[1].SetPos(0, 100)\n    pt[1].SetPos(1, 0)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[2].SetPos(0, 50)\n    pt[2].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[3].SetPos(0, 100)\n    pt[3].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[4].SetPos(0, 100)\n    pt[4].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[5].SetPos(0, 0)\n    pt[5].SetPos(1, 150)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[6].SetPos(0, 0)\n    pt[6].SetPos(1, 100)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[7].SetPos(0, 50)\n    pt[7].SetPos(1, 50)\n\n    pt.append(AdvMotion_SplinePoint())\n    pt[8].SetPos(0, 0)\n    pt[8].SetPos(1, 0)\n\n    # Execute the spline command\n    ret = Wmx3Lib_adv.advMotion.StartCSplinePos_VelAccLimited(0, spl, 9, pt)\n\n    if ret != 0:\n        print('StartCSplinePos_PointTime error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Free the spline buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreeSplineBuffer(0)\n    if ret != 0:\n        print('FreeSplineBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n    sleep(0.5)\n\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 39,
        "Instruction": "Execute an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (100, 0), the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50), the 3rd segment is a linear interpolation to position (150, 100), the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100), the 5th segment is a linear interpolation to position (0, 150), the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100), the 7th segment is a linear interpolation to position (-50, 50), the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50). ",
        "CanonicalCode": "# Write python code to Execute an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (100, 0), the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50), the 3rd segment is a linear interpolation to position (150, 100), the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100), the 5th segment is a linear interpolation to position (0, 150), the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100), the 7th segment is a linear interpolation to position (-50, 50), the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position path interpolation motion command of Axis 0 and 1 with velocity 1000. The 1st segment is a linear interpolation to position (100, 0), the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50), the 3rd segment is a linear interpolation to position (150, 100), the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100), the 5th segment is a linear interpolation to position (0, 150), the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100), the 7th segment is a linear interpolation to position (-50, 50), the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    # Use single motion profile for entire path\n    path.enableConstProfile = 1\n    \n    path.profile = Profile()\n    path.profile.type = ProfileType.Trapezoidal\n    path.profile.velocity = 1000\n    path.profile.acc = 10000\n    path.profile.dec = 10000\n\n    # Define linear and circular segments\n    path.numPoints = 8\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 0, 100)\n    path.SetTarget(1, 0, 0)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, 150)\n    path.SetTarget(1, 1, 50)\n    path.SetCenterPos(0, 1, 100)\n    path.SetCenterPos(1, 1, 50)\n    path.SetDirection(1, 1)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, 150)\n    path.SetTarget(1, 2, 100)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, 100)\n    path.SetTarget(1, 3, 150)\n    path.SetCenterPos(0, 3, 100)\n    path.SetCenterPos(1, 3, 100)\n    path.SetDirection(3, 1)\n\n    path.SetType(4, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 4, 0)\n    path.SetTarget(1, 4, 150)\n\n    path.SetType(5, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 5, -50)\n    path.SetTarget(1, 5, 100)\n    path.SetCenterPos(0, 5, 0)\n    path.SetCenterPos(1, 5, 100)\n    path.SetDirection(5, 1)\n\n    path.SetType(6, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 6, -50)\n    path.SetTarget(1, 6, 50)\n\n    path.SetType(7, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 7, 0)\n    path.SetTarget(1, 7, 0)\n    path.SetCenterPos(0, 7, 0)\n    path.SetCenterPos(1, 7, 50)\n    path.SetDirection(7, 1)\n\n\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplPos(path)\n    if ret != 0:\n        print('StartPathIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 40,
        "Instruction": "Execute an absolute position path interpolation motion command of Axis 0 and 1. The 1st segment is a linear interpolation to position (100, 0) with velocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. ",
        "CanonicalCode": "# Write python code to Execute an absolute position path interpolation motion command of Axis 0 and 1. The 1st segment is a linear interpolation to position (100, 0) with velocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. \n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position path interpolation motion command of Axis 0 and 1. The 1st segment is a linear interpolation to position (100, 0) with velocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. \n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    # Specify motion profile for each segment\n    path.enableConstProfile = 0\n\n    # Define linear and circular segments\n    path.numPoints = 8\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 0, 100)\n    path.SetTarget(1, 0, 0)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 1000\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(0, profile)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, 150)\n    path.SetTarget(1, 1, 50)\n    path.SetCenterPos(0, 1, 100)\n    path.SetCenterPos(1, 1, 50)\n    path.SetDirection(1, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 900\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(1, profile)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, 150)\n    path.SetTarget(1, 2, 100)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 800\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(2, profile)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, 100)\n    path.SetTarget(1, 3, 150)\n    path.SetCenterPos(0, 3, 100)\n    path.SetCenterPos(1, 3, 100)\n    path.SetDirection(3, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 700\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(3, profile)\n\n    path.SetType(4, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 4, 0)\n    path.SetTarget(1, 4, 150)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 600\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(4, profile)\n\n    path.SetType(5, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 5, -50)\n    path.SetTarget(1, 5, 100)\n    path.SetCenterPos(0, 5, 0)\n    path.SetCenterPos(1, 5, 100)\n    path.SetDirection(5, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 700\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(5, profile)\n\n    path.SetType(6, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 6, -50)\n    path.SetTarget(1, 6, 50)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 800\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(6, profile)\n\n    path.SetType(7, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 7, 0)\n    path.SetTarget(1, 7, 0)\n    path.SetCenterPos(0, 7, 0)\n    path.SetCenterPos(1, 7, 50)\n    path.SetDirection(5, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 900\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(7, profile)\n\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplPos(path)\n    if ret != 0:\n        print('StartPathIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 41,
        "Instruction": "Execute an absolute position path interpolation motion command of Axis 0 and 1 specifying the Motion Profile for Each Segment. The 1st segment is a linear interpolation to position (100, 0) with velocity and endvelocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity and endvelocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity and endvelocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity and endvelocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity and endvelocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity and endvelocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity and endvelocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. ",
        "CanonicalCode": "# Write python code to Execute an absolute position path interpolation motion command of Axis 0 and 1 specifying the Motion Profile for Each Segment. The 1st segment is a linear interpolation to position (100, 0) with velocity and endvelocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity and endvelocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity and endvelocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity and endvelocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity and endvelocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity and endvelocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity and endvelocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. \n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position path interpolation motion command of Axis 0 and 1 specifying the Motion Profile for Each Segment. The 1st segment is a linear interpolation to position (100, 0) with velocity and endvelocity 1000, the 2nd segment is a clockwise circular interpolation to position (150, 50) with center point (100, 50) with velocity and endvelocity 900, the 3rd segment is a linear interpolation to position (150, 100) with velocity and endvelocity 800, the 4th segment is a clockwise circular interpolation to position (100, 150) with center point (100, 100) with velocity and endvelocity 700, the 5th segment is a linear interpolation to position (0, 150) with velocity and endvelocity 600, the 6th segment is a clockwise circular interpolation to position (-50, 100) with center point (0, 100) with velocity and endvelocity 700, the 7th segment is a linear interpolation to position (-50, 50) with velocity and endvelocity 800, the 8th segment is a clockwise circular interpolation to position (0, 0) with center point (0, 50) with velocity 900. \n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    # Specify motion profile for each segment\n    path.enableConstProfile = 0\n\n    # Define linear and circular segments\n    path.numPoints = 8\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 0, 100)\n    path.SetTarget(1, 0, 0)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 1000\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 1000\n    path.SetProfile(0, profile)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, 150)\n    path.SetTarget(1, 1, 50)\n    path.SetCenterPos(0, 1, 100)\n    path.SetCenterPos(1, 1, 50)\n    path.SetDirection(1, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 900\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 900\n    path.SetProfile(1, profile)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, 150)\n    path.SetTarget(1, 2, 100)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 800\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 800\n    path.SetProfile(2, profile)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, 100)\n    path.SetTarget(1, 3, 150)\n    path.SetCenterPos(0, 3, 100)\n    path.SetCenterPos(1, 3, 100)\n    path.SetDirection(3, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 700\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 700\n    path.SetProfile(3, profile)\n\n    path.SetType(4, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 4, 0)\n    path.SetTarget(1, 4, 150)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 600\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 600\n    path.SetProfile(4, profile)\n\n    path.SetType(5, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 5, -50)\n    path.SetTarget(1, 5, 100)\n    path.SetCenterPos(0, 5, 0)\n    path.SetCenterPos(1, 5, 100)\n    path.SetDirection(5, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 700\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 700\n    path.SetProfile(5, profile)\n\n    path.SetType(6, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 6, -50)\n    path.SetTarget(1, 6, 50)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 800\n    profile.acc = 10000\n    profile.dec = 10000\n    profile.endVelocity = 800\n    path.SetProfile(6, profile)\n\n    path.SetType(7, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 7, 0)\n    path.SetTarget(1, 7, 0)\n    path.SetCenterPos(0, 7, 0)\n    path.SetCenterPos(1, 7, 50)\n    path.SetDirection(5, 1)\n\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 900\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(7, profile)\n\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplPos(path)\n    if ret != 0:\n        print('StartPathIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 42,
        "Instruction": "Execute an absolute position path interpolation motion command of Axis 0 and 1 with auto smoothing and the velocity is 1000. The 1st segment is a linear interpolation to position (40, 100) with autoSmoothRadius 10, and the 2nd segment is a linear interpolation to position (80, 0) with autoSmoothRadius 20, and the 3rd segment is a linear interpolation to position (120, 100) with autoSmoothRadius 30, and the 4th segment is a linear interpolation to position (160, 0) with autoSmoothRadius 40, and the 5th segment is a linear interpolation to position (200, 100) with autoSmoothRadius 50, and the 6th segment is a linear interpolation to position (240, 0).",
        "CanonicalCode": "# Write python code to Execute an absolute position path interpolation motion command of Axis 0 and 1 with auto smoothing and the velocity is 1000. The 1st segment is a linear interpolation to position (40, 100) with autoSmoothRadius 10, and the 2nd segment is a linear interpolation to position (80, 0) with autoSmoothRadius 20, and the 3rd segment is a linear interpolation to position (120, 100) with autoSmoothRadius 30, and the 4th segment is a linear interpolation to position (160, 0) with autoSmoothRadius 40, and the 5th segment is a linear interpolation to position (200, 100) with autoSmoothRadius 50, and the 6th segment is a linear interpolation to position (240, 0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute an absolute position path interpolation motion command of Axis 0 and 1 with auto smoothing and the velocity is 1000. The 1st segment is a linear interpolation to position (40, 100) with autoSmoothRadius 10, and the 2nd segment is a linear interpolation to position (80, 0) with autoSmoothRadius 20, and the 3rd segment is a linear interpolation to position (120, 100) with autoSmoothRadius 30, and the 4th segment is a linear interpolation to position (160, 0) with autoSmoothRadius 40, and the 5th segment is a linear interpolation to position (200, 100) with autoSmoothRadius 50, and the 6th segment is a linear interpolation to position (240, 0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n\n    # Use single motion profile for entire path\n    path.enableConstProfile = 1\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 1000\n    profile.acc = 10000\n    profile.dec = 10000\n    path.SetProfile(0, profile)\n\n    # Auto smoothing\n    path.enableAutoSmooth = 1\n\n    # Define linear segments\n    path.numPoints = 6\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 0, 40)\n    path.SetTarget(1, 0, 100)\n    path.SetAutoSmoothRadius(0, 10)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 1, 80)\n    path.SetTarget(1, 1, 0)\n    path.SetAutoSmoothRadius(1, 20)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, 120)\n    path.SetTarget(1, 2, 100)\n    path.SetAutoSmoothRadius(2, 30)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 3, 160)\n    path.SetTarget(1, 3, 0)\n    path.SetAutoSmoothRadius(3, 40)\n\n    path.SetType(4, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 4, 200)\n    path.SetTarget(1, 4, 100)\n    path.SetAutoSmoothRadius(4, 50)\n\n    path.SetType(5, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 5, 240)\n    path.SetTarget(1, 5, 0)\n\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplPos(path)\n    if ret != 0:\n        print('StartPathIntplPos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 2\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[240,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 43,
        "Instruction": "Execute a 3D path interpolation of Axis 0, 1, and 2 with velocity 200. There are 21 segments. 1)Linear interpolation to (90,0,0); 2)Circular interpolation to (100,10,0) with center (97.071,10-7.071,0); 3)Linear interpolation to (100,90,0); 4)Circular interpolation to (90,100,0) with center (97.071,97.071,0); 5)Linear interpolation to (10,100,0); 6)Circular interpolation to (0,90,0) with center (10-7.071,97.071,0); 7)Linear interpolation to (0,0,0); 8)Linear interpolation to (90,0,0); 9)Circular interpolation to (100,0,-10) with center (97.071,0,-10+7.071); 10)Linear interpolation to (100,0,-90); 11)Circular interpolation to (90,0,-100) with center (97.071,0,-97.071); 12)Linear interpolation to (10,0,-100); 13)Circular interpolation to (0,0,-90) with center (10-7.071,0,-97.071); 14)Linear interpolation to (0,0,0); 15)Linear interpolation to (0,90,0);  16)Circular interpolation to (0,100,-10) with center (0,97.071,-10+7.071); 17)Linear interpolation to (0,100,-90); 18)Circular interpolation to (0,90,-100) with center (0,97.071,-97.071); 19)Linear interpolation to (0,10,-100); 20)Circular interpolation to (0,0,-90) with center (0,10-7.071,-97.071); 21)Linear interpolation to (0,0,0).",
        "CanonicalCode": "# Write python code to Execute a 3D path interpolation of Axis 0, 1, and 2 with velocity 200. There are 21 segments. 1)Linear interpolation to (90,0,0); 2)Circular interpolation to (100,10,0) with center (97.071,10-7.071,0); 3)Linear interpolation to (100,90,0); 4)Circular interpolation to (90,100,0) with center (97.071,97.071,0); 5)Linear interpolation to (10,100,0); 6)Circular interpolation to (0,90,0) with center (10-7.071,97.071,0); 7)Linear interpolation to (0,0,0); 8)Linear interpolation to (90,0,0); 9)Circular interpolation to (100,0,-10) with center (97.071,0,-10+7.071); 10)Linear interpolation to (100,0,-90); 11)Circular interpolation to (90,0,-100) with center (97.071,0,-97.071); 12)Linear interpolation to (10,0,-100); 13)Circular interpolation to (0,0,-90) with center (10-7.071,0,-97.071); 14)Linear interpolation to (0,0,0); 15)Linear interpolation to (0,90,0);  16)Circular interpolation to (0,100,-10) with center (0,97.071,-10+7.071); 17)Linear interpolation to (0,100,-90); 18)Circular interpolation to (0,90,-100) with center (0,97.071,-97.071); 19)Linear interpolation to (0,10,-100); 20)Circular interpolation to (0,0,-90) with center (0,10-7.071,-97.071); 21)Linear interpolation to (0,0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        #.\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a 3D path interpolation of Axis 0, 1, and 2 with velocity 200. There are 21 segments. 1)Linear interpolation to (90,0,0); 2)Circular interpolation to (100,10,0) with center (97.071,10-7.071,0); 3)Linear interpolation to (100,90,0); 4)Circular interpolation to (90,100,0) with center (97.071,97.071,0); 5)Linear interpolation to (10,100,0); 6)Circular interpolation to (0,90,0) with center (10-7.071,97.071,0); 7)Linear interpolation to (0,0,0); 8)Linear interpolation to (90,0,0); 9)Circular interpolation to (100,0,-10) with center (97.071,0,-10+7.071); 10)Linear interpolation to (100,0,-90); 11)Circular interpolation to (90,0,-100) with center (97.071,0,-97.071); 12)Linear interpolation to (10,0,-100); 13)Circular interpolation to (0,0,-90) with center (10-7.071,0,-97.071); 14)Linear interpolation to (0,0,0); 15)Linear interpolation to (0,90,0);  16)Circular interpolation to (0,100,-10) with center (0,97.071,-10+7.071); 17)Linear interpolation to (0,100,-90); 18)Circular interpolation to (0,90,-100) with center (0,97.071,-97.071); 19)Linear interpolation to (0,10,-100); 20)Circular interpolation to (0,0,-90) with center (0,10-7.071,-97.071); 21)Linear interpolation to (0,0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntpl3DCommand()\n\n    path.SetAxis(0, 0)\n    path.SetAxis(1, 1)\n    path.SetAxis(2, 2)\n\n    # Use single motion profile for entire path\n    path.enableConstProfile = 1\n    profile = Profile()\n    profile.type = ProfileType.Trapezoidal\n    profile.velocity = 200\n    profile.acc = 2000\n    profile.dec = 2000\n    path.SetProfile(0, profile)\n\n    # Define linear and circular segments\n    path.numPoints = 21\n\n    path.SetType(0, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 0, 90)\n    path.SetTarget(1, 0, 0)\n    path.SetTarget(2, 0, 0)\n\n    path.SetType(1, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 1, 100)\n    path.SetTarget(1, 1, 10)\n    path.SetTarget(2, 1, 0)\n    path.SetCircleIntermediateTarget(0, 1, 97.071)\n    path.SetCircleIntermediateTarget(1, 1, 10 - 7.071)\n    path.SetCircleIntermediateTarget(2, 1, 0)\n\n    path.SetType(2, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 2, 100)\n    path.SetTarget(1, 2, 90)\n    path.SetTarget(2, 2, 0)\n\n    path.SetType(3, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 3, 90)\n    path.SetTarget(1, 3, 100)\n    path.SetTarget(2, 3, 0)\n    path.SetCircleIntermediateTarget(0, 3, 97.071)\n    path.SetCircleIntermediateTarget(1, 3, 97.071)\n    path.SetCircleIntermediateTarget(2, 3, 0)\n\n    path.SetType(4, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 4, 10)\n    path.SetTarget(1, 4, 100)\n    path.SetTarget(2, 4, 0)\n\n    path.SetType(5, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 5, 0)\n    path.SetTarget(1, 5, 90)\n    path.SetTarget(2, 5, 0)\n    path.SetCircleIntermediateTarget(0, 5, 10 - 7.071)\n    path.SetCircleIntermediateTarget(1, 5, 97.071)\n    path.SetCircleIntermediateTarget(2, 5, 0)\n\n    path.SetType(6, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 6, 0)\n    path.SetTarget(1, 6, 0)\n    path.SetTarget(2, 6, 0)\n\n    path.SetType(7, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 7, 90)\n    path.SetTarget(1, 7, 0)\n    path.SetTarget(2, 7, 0)\n\n    path.SetType(8, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 8, 100)\n    path.SetTarget(1, 8, 0)\n    path.SetTarget(2, 8, -10)\n    path.SetCircleIntermediateTarget(0, 8, 97.071)\n    path.SetCircleIntermediateTarget(1, 8, 0)\n    path.SetCircleIntermediateTarget(2, 8, -(10 - 7.071))\n\n    path.SetType(9, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 9, 100)\n    path.SetTarget(1, 9, 0)\n    path.SetTarget(2, 9, -90)\n\n    path.SetType(10, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 10, 90)\n    path.SetTarget(1, 10, 0)\n    path.SetTarget(2, 10, -100)\n    path.SetCircleIntermediateTarget(0, 10, 97.071)\n    path.SetCircleIntermediateTarget(1, 10, 0)\n    path.SetCircleIntermediateTarget(2, 10, -97.071)\n\n    path.SetType(11, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 11, 10)\n    path.SetTarget(1, 11, 0)\n    path.SetTarget(2, 11, -100)\n\n    path.SetType(12, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 12, 0)\n    path.SetTarget(1, 12, 0)\n    path.SetTarget(2, 12, -90)\n    path.SetCircleIntermediateTarget(0, 12, 10 - 7.071)\n    path.SetCircleIntermediateTarget(1, 12, 0)\n    path.SetCircleIntermediateTarget(2, 12, -97.071)\n\n    path.SetType(13, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 13, 0)\n    path.SetTarget(1, 13, 0)\n    path.SetTarget(2, 1, 0)\n\n    path.SetType(14, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 14, 0)\n    path.SetTarget(1, 14, 90)\n    path.SetTarget(2, 14, 0)\n\n    path.SetType(15, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 15, 0)\n    path.SetTarget(1, 15, 100)\n    path.SetTarget(2, 15, -10)\n    path.SetCircleIntermediateTarget(0, 15, 0)\n    path.SetCircleIntermediateTarget(1, 15, 97.071)\n    path.SetCircleIntermediateTarget(2, 15, -(10 - 7.071))\n\n    path.SetType(16, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 16, 0)\n    path.SetTarget(1, 16, 100)\n    path.SetTarget(2, 16, -90)\n\n    path.SetType(17, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 17, 0)\n    path.SetTarget(1, 17, 90)\n    path.SetTarget(2, 17, -100)\n    path.SetCircleIntermediateTarget(0, 17, 0)\n    path.SetCircleIntermediateTarget(1, 17, 97.071)\n    path.SetCircleIntermediateTarget(2, 17, -97.071)\n\n    path.SetType(18, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 18, 0)\n    path.SetTarget(1, 18, 10)\n    path.SetTarget(2, 18, -100)\n\n    path.SetType(19, AdvMotion_PathIntplSegmentType.Circular)\n    path.SetTarget(0, 19, 0)\n    path.SetTarget(1, 19, 0)\n    path.SetTarget(2, 19, -90)\n    path.SetCircleIntermediateTarget(0, 19, 0)\n    path.SetCircleIntermediateTarget(1, 19, 10 - 7.071)\n    path.SetCircleIntermediateTarget(2, 19, -97.071)\n\n    path.SetType(20, AdvMotion_PathIntplSegmentType.Linear)\n    path.SetTarget(0, 20, 0)\n    path.SetTarget(1, 20, 0)\n    path.SetTarget(2, 20, 0)\n\n    ret = Wmx3Lib_adv.advMotion.StartPathIntpl3DPos(path)\n    if ret != 0:\n        print('StartPathIntpl3DPos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n\n    # Wait for the spline motion to complete\n    axes = AxisSelection()\n    axes.axisCount = 3\n    axes.SetAxis(0, 0)\n    axes.SetAxis(1, 1)\n    axes.SetAxis(2, 2)\n    ret = Wmx3Lib_cm.motion.Wait_AxisSel(axes)\n    if ret != 0:\n        print('Wait_AxisSel error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[0,0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 44,
        "Instruction": "Execute a path interpolation with rotation sequence consisting of four linear interpolations of Axis 0 and 1 with a rotation Axis 2, and the velocity is 1000. Disable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).",
        "CanonicalCode": "# Write python code to Execute a path interpolation with rotation sequence consisting of four linear interpolations of Axis 0 and 1 with a rotation Axis 2, and the velocity is 1000. Disable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute a path interpolation with rotation sequence consisting of four linear interpolations of Axis 0 and 1 with a rotation Axis 2, and the velocity is 1000. Disable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 900\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    # Disable rotating the X and Y axes around the center of rotation when the rotational axis moves\n    conf.disableXYRotationalMotion = 1\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 1000\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 1000\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 1000\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 1000\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)\n\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    sleep(1)\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[0,0,270]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 45,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2, and the velocity is 100.  Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2, and the velocity is 100.  Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n    \n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 200\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    sleep(1)\n    #Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    \n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    \n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[100,0,270]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 46,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 without stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 without stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 without stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 200\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    # Enable auto smoothing\n    conf.enableAutoSmooth = 1\n\n    # Do not stop the motion along the path at very small angles between two segments\n    conf.angleCorrectionMinimumAngle = 0.01\n\n    # Enable constant profile\n    conf.enableConstProfile = 1\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count .\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    # Only specify the profile for the first point as constant profile is enabled\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    point.autoSmoothRadius = 30  # Auto smoothing radius after first segment\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    point.autoSmoothRadius = 20  # Auto smoothing radius after second segment\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    point.autoSmoothRadius = 10  # Auto smoothing radius after third segment\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)\n\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[100,0,270]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 47,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 with stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 with stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 with stopping after executing each segment, and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). Auto smoothing radius after 1st, 2nd and 3rd segment are 30, 20, 10.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 200\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    # Enable auto smoothing\n    conf.enableAutoSmooth = 1\n\n    # Do not stop the motion along the path at very small angles between two segments\n    conf.angleCorrectionMinimumAngle = 0.01\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    # Only specify the profile for the first point as constant profile is enabled\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    point.autoSmoothRadius = 30  # Auto smoothing radius after first segment\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    point.autoSmoothRadius = 20  # Auto smoothing radius after second segment\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    point.autoSmoothRadius = 10  # Auto smoothing radius after third segment\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[100,0,270]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 48,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). First linearly interpolate to Point 2, then sleep 0.2s, and linearly interpolate to the last point, then sleep 0.2s, and linearly interpolate to Point 0.",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). First linearly interpolate to Point 2, then sleep 0.2s, and linearly interpolate to the last point, then sleep 0.2s, and linearly interpolate to Point 0.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation. The center of rotation is (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). First linearly interpolate to Point 2, then sleep 0.2s, and linearly interpolate to the last point, then sleep 0.2s, and linearly interpolate to Point 0.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 200\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation_Pos(0, 2)  # Move to point 2\n    if ret != 0:\n        print('StartPathIntplWithRotation_Pos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for axis 0 to finish motion\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    # Sleep for 200ms after motion finishes\n    sleep(0.2)\n\n    # Move to end of path\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)  # Move to the last point\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for axis 0 to finish motion\n    ret = Wmx3Lib_cm.motion.Wait(0)\n    # Sleep for 200ms after motion finishes\n    sleep(0.2)\n    # Move to point 0 (start of path)\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation_Pos(0, 0)  # Move to point 0\n    if ret != 0:\n        print('StartPathIntplWithRotation_Pos error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[0,0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 49,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation of (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). The local center rotation of each segment is respectively (50,40),(60,50),(50,60) and (40,50).",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation of (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). The local center rotation of each segment is respectively (50,40),(60,50),(50,60) and (40,50).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and the velocity is 100. Sequence consisting of four linear interpolations and enable rotating the X and Y axes around the center of rotation of (50,50). The positions of four linear interpolations are: (100,0),(100,100),(0,100),(0,0). The local center rotation of each segment is respectively (50,40),(60,50),(50,60) and (40,50).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 50)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 50)  # Y axis center of rotation position\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 200\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    # Enable local center of rotation\n    conf.enableLocalCenterOfRotation = 1\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    point.useLocalCenterOfRotation = 1\n    point.localCenterOfRotationDirection = 1\n    point.SetLocalCenterOfRotation(0, 50)\n    point.SetLocalCenterOfRotation(1, 40)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 100)\n    point.useLocalCenterOfRotation = 1\n    point.localCenterOfRotationDirection = 1\n    point.SetLocalCenterOfRotation(0, 60)\n    point.SetLocalCenterOfRotation(1, 50)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    point.useLocalCenterOfRotation = 1\n    point.localCenterOfRotationDirection = 1\n    point.SetLocalCenterOfRotation(0, 50)\n    point.SetLocalCenterOfRotation(1, 60)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 100\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    point.useLocalCenterOfRotation = 1\n    point.localCenterOfRotationDirection = 1\n    point.SetLocalCenterOfRotation(0, 40)\n    point.SetLocalCenterOfRotation(1, 50)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)  # Move to point 2\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[-10,12,127]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 50,
        "Instruction": "Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and with a Z axis 3, the center of rotation is (75,75) and the velocity is 1000. There are 7 segments. 1)Linear interpolation to (100,0) and Z axis to 25; 2)Circular interpolation to (150,50) with center (100,50) and Z axis to 50; 3)Linear interpolation to (150,100) and Z axis to 75; 4)Circular interpolation to (100,150) with center (100,100) and Z axis to 100; 5)Linear interpolation to (50,150) and Z axis to 125; 6)Circular interpolation to (100,150) with center (50,100) and Z axis to 150; 7)Linear interpolation to (0,0) and Z axis to 175.",
        "CanonicalCode": "# Write python code to Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and with a Z axis 3, the center of rotation is (75,75) and the velocity is 1000. There are 7 segments. 1)Linear interpolation to (100,0) and Z axis to 25; 2)Circular interpolation to (150,50) with center (100,50) and Z axis to 50; 3)Linear interpolation to (150,100) and Z axis to 75; 4)Circular interpolation to (100,150) with center (100,100) and Z axis to 100; 5)Linear interpolation to (50,150) and Z axis to 125; 6)Circular interpolation to (100,150) with center (50,100) and Z axis to 150; 7)Linear interpolation to (0,0) and Z axis to 175.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2, 3]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Executes a path interpolation of Axis 0 and 1 with a rotation Axis 2 and with a Z axis 3, the center of rotation is (75,75) and the velocity is 1000. There are 7 segments. 1)Linear interpolation to (100,0) and Z axis to 25; 2)Circular interpolation to (150,50) with center (100,50) and Z axis to 50; 3)Linear interpolation to (150,100) and Z axis to 75; 4)Circular interpolation to (100,150) with center (100,100) and Z axis to 100; 5)Linear interpolation to (50,150) and Z axis to 125; 6)Circular interpolation to (100,150) with center (50,100) and Z axis to 150; 7)Linear interpolation to (0,0) and Z axis to 175.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplWithRotationCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    # Create the path interpolation with rotation buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplWithRotationBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with rotation channel\n    conf = AdvMotion_PathIntplWithRotationConfiguration()\n\n    conf.SetAxis(0, 0)  # X axis\n    conf.SetAxis(1, 1)  # Y axis\n    conf.rotationalAxis = 2  # Rotational axis\n    conf.SetCenterOfRotation(0, 75)  # X axis center of rotation position\n    conf.SetCenterOfRotation(1, 75)  # Y axis center of rotation position\n\n    # Enable constant profile\n    conf.enableConstProfile = 1\n\n    # Prevent stop from occurring at very small angles\n    conf.angleCorrectionMinimumAngle = 0.01\n\n    # Enable Z axis\n    conf.enableZAxis = 1\n    conf.zAxis = 3\n\n    # Rotational axis angle correction motion profile parameters\n    conf.angleCorrectionProfile.type = ProfileType.Trapezoidal\n    conf.angleCorrectionProfile.velocity = 900\n    conf.angleCorrectionProfile.acc = 1800\n    conf.angleCorrectionProfile.dec = 1800\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplWithRotationConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplWithRotationConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Set Axis 2 to single-turn mode, single-turn encoder count 360.\n    ret=Wmx3Lib_cm.config.SetSingleTurn(2,True,360)\n    if ret != 0:\n        print('SetSingleTurn error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with rotation commands\n    path.numPoints = 7\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    profile = Profile()\n    point.profile.type = ProfileType.Trapezoidal\n    point.profile.velocity = 1000\n    point.profile.acc = 2000\n    point.profile.dec = 2000\n    point.SetTarget(0, 100)\n    point.SetTarget(1, 0)\n    point.zAxisTarget = 25\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Circular\n    point.direction = 1\n    point.SetCenterPos(0, 100)\n    point.SetCenterPos(1, 50)\n    point.SetTarget(0, 150)\n    point.SetTarget(1, 50)\n    point.zAxisTarget = 50\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 150)\n    point.SetTarget(1, 100)\n    point.zAxisTarget = 75\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Circular\n    point.direction = 1\n    point.SetCenterPos(0, 100)\n    point.SetCenterPos(1, 100)\n    point.SetTarget(0, 150)\n    point.SetTarget(1, 150)\n    point.zAxisTarget = 100\n    path.SetPoint(3, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 50)\n    point.SetTarget(1, 150)\n    point.zAxisTarget = 125\n    path.SetPoint(4, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Circular\n    point.direction = 1\n    point.SetCenterPos(0, 50)\n    point.SetCenterPos(1, 100)\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 100)\n    point.zAxisTarget = 1500\n    path.SetPoint(5, point)\n\n    point = AdvMotion_PathIntplWithRotationCommandPoint()\n    point.type = AdvMotion_PathIntplSegmentType.Linear\n    point.SetTarget(0, 0)\n    point.SetTarget(1, 0)\n    point.zAxisTarget = 175\n    path.SetPoint(6, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplWithRotationCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplWithRotationCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with rotation\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplWithRotation(0)  # Move to point 2\n    if ret != 0:\n        print('StartPathIntplWithRotation error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with rotation is in Idle state\n    pathStatus = AdvMotion_PathIntplWithRotationState()\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    while True:\n        if (pathStatus.state == AdvMotion_PathIntplWithRotationState.Idle):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplWithRotationStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplWithRotation Runuing timeout.!')\n        return\n    # Free the path interpolation with rotation buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplWithRotationBuffer(0)\n    if ret != 0:\n        print('FreePathIntplWithRotationBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    #Turn off Axis 2 single-turn mode.\n    AxisParam=Config_AxisParam()\n    ret,AxisParam =Wmx3Lib_cm.config.GetAxisParam()\n    AxisParam.SetSingleTurnMode(2,False)\n\n    ret,AxisParamError=Wmx3Lib_cm.config.SetAxisParam(AxisParam)\n    if ret != 0:\n        print('Close SingleTurnMode error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2, 3]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2,3],\n[150,0,2700,175]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 51,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 52,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0). First start executing it for 0.5s, then stop and sleep for 1s, and then resume it.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0). First start executing it for 0.5s, then stop and sleep for 1s, and then resume it.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0). First start executing it for 0.5s, then stop and sleep for 1s, and then resume it.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    sleep(0.5)\n    # Stop path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StopPathIntplLookahead(0)\n    if ret != 0:\n        print('StopPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n    sleep(1)\n    # Execute path interpolation with look ahead (Resume execution)\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    \n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 53,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 54,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 12.5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 25\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 50\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 55,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit for each axis is 1500, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit  for each axis is 1500, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit  for each axis is 1500, with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n    conf.SetAccLimit(0, 1500)\n    conf.SetAccLimit(1, 1500)\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 12.5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 25\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 50\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 56,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit for each axis is 1500, and the velocity limit for Axis 0 and 1 is 700 and 500,  with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit for each axis is 1500, and the velocity limit for Axis 0 and 1 is 700 and 500,  with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, composite acceleration 2000, and the acceleration limit for each axis is 1500, and the velocity limit for Axis 0 and 1 is 700 and 500,  with a sample distance 100, consisting of four linear interpolations: (100,0),(100,100),(0,100),(0,0), while the smoothRadius are 12.5, 25 and 50.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n    conf.SetAccLimit(0, 1500)\n    conf.SetAccLimit(1, 1500)\n    conf.SetVelocityLimit(0, 700)\n    conf.SetVelocityLimit(1, 500)\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 12.5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 25\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 50\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 57,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50 and angle tolerance 11, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50 and angle tolerance 11, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\nimport math\n\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50 and angle tolerance 11, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    \n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 4000\n    conf.sampleDistance = 50\n    conf.stopOnEmptyBuffer = True\n    conf.setAngleTolerance = True\n    conf.angleToleranceDegrees = 11\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 36\n\n    PI = float(3.141592653589793238)\n\n    for i in range(0, 36):\n        Point = AdvMotion_PathIntplLookaheadCommandPoint()\n        Point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n        Point.linear.axisCount = 2\n        Point.linear.SetAxis(0, 0)\n        Point.linear.SetAxis(1, 1)\n        Point.linear.SetTarget(0, -200 + 200 * math.cos((i + 1) / 36.0 * (2 * PI)))\n        Point.linear.SetTarget(1, 0 + 200 * math.sin((i + 1) / 36.0 * (2 * PI)))\n        path.SetPoint(i, Point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 58,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, the smoothRadius 20, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50 and angle tolerance 11, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\nimport math\n\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50 and angle tolerance 11, consisting of 36 linear interpolations to comprise a counterclockwise circle which starts from (0,0) and the radius is 200.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    \n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 4000\n    conf.sampleDistance = 50\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 36\n\n    PI = float(3.141592653589793238)\n\n    for i in range(0, 36):\n        Point = AdvMotion_PathIntplLookaheadCommandPoint()\n        Point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n        Point.linear.axisCount = 2\n        Point.linear.SetAxis(0, 0)\n        Point.linear.SetAxis(1, 1)\n        Point.linear.SetTarget(0, -200 + 200 * math.cos((i + 1) / 36.0 * (2 * PI)))\n        Point.linear.SetTarget(1, 0 + 200 * math.sin((i + 1) / 36.0 * (2 * PI)))\n        Point.smoothRadius = 20\n        path.SetPoint(i, Point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 59,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\nimport math\n\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 4000\n    conf.sampleDistance = 50\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, 50)\n    point.throughAndEndCircular.SetThroughPos(1, 50)\n    point.throughAndEndCircular.SetEndPos(0, 100)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, 50)\n    point.throughAndEndCircular.SetThroughPos(1, -50)\n    point.throughAndEndCircular.SetEndPos(0, 0)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, -50)\n    point.throughAndEndCircular.SetThroughPos(1, 50)\n    point.throughAndEndCircular.SetEndPos(0, -100)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, -50)\n    point.throughAndEndCircular.SetThroughPos(1, -50)\n    point.throughAndEndCircular.SetEndPos(0, 0)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 60,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, and with the velocityLimit of axis 1 set to 500, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, and with the velocityLimit of axis 1 set to 500, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\nimport math\n\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 50, and with the velocityLimit of axis 1 set to 500, consisting of four circular interpolations defined as (throughPos0,throughPos1,endPos0,endPos1): (50,50,100,0),(50,-50,0,0),(-50,50,-100,0),(-50,-50,0,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 4000\n    conf.sampleDistance = 50\n    conf.stopOnEmptyBuffer = True\n    conf.SetVelocityLimit(1, 500)\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, 50)\n    point.throughAndEndCircular.SetThroughPos(1, 50)\n    point.throughAndEndCircular.SetEndPos(0, 100)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, 50)\n    point.throughAndEndCircular.SetThroughPos(1, -50)\n    point.throughAndEndCircular.SetEndPos(0, 0)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, -50)\n    point.throughAndEndCircular.SetThroughPos(1, 50)\n    point.throughAndEndCircular.SetEndPos(0, -100)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEndCircular\n    point.throughAndEndCircular.SetAxis(0, 0)\n    point.throughAndEndCircular.SetAxis(1, 1)\n    point.throughAndEndCircular.SetThroughPos(0, -50)\n    point.throughAndEndCircular.SetThroughPos(1, -50)\n    point.throughAndEndCircular.SetEndPos(0, 0)\n    point.throughAndEndCircular.SetEndPos(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 61,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 2, consisting of two linear interpolations: (50,0),(50,50). After executing 0.1s, dynamically add two linear interpolations: (50,100),(100,100).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 2, consisting of two linear interpolations: (50,0),(50,50). After executing 0.1s, dynamically add two linear interpolations: (50,100),(100,100).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 2, consisting of two linear interpolations: (50,0),(50,50). After executing 0.1s, dynamically add two linear interpolations: (50,100),(100,100).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 2\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 2\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 50)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 50)\n    point.linear.SetTarget(1, 50)\n    path.SetPoint(1, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n    sleep(0.1)\n\n    point.linear.SetTarget(0, 50)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(0, point)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    path.SetPoint(1, point)       \n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[100,100]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 62,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four sequences: linear interpolations to (100,0), linear interpolations to (100,100), sleep 0.5s, linear interpolations to (0,0), while the smoothRadius is 30.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four sequences: linear interpolations to (100,0), linear interpolations to (100,100), sleep 0.5s, linear interpolations to (0,0), while the smoothRadius is 30.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of four sequences: linear interpolations to (100,0), linear interpolations to (100,100), sleep 0.5s, linear interpolations to (0,0), while the smoothRadius is 30.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 30\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Sleep\n    point.sleep.milliseconds = 500\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 63,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of eight sequences: linear interpolations to (100,0), linear interpolations to (100,100), linear interpolations to (60,100), set output 0.0 to 1, linear interpolations to (40,100),  set output 0.0 to 0, linear interpolations to (0,100), linear interpolations to (10,20), while the smoothRadius is 30.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of eight sequences: linear interpolations to (100,0), linear interpolations to (100,100), linear interpolations to (60,100), set output 0.0 to 1, linear interpolations to (40,100),  set output 0.0 to 0, linear interpolations to (0,100), linear interpolations to (10,20), while the smoothRadius is 30.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of eight sequences: linear interpolations to (100,0), linear interpolations to (100,100), linear interpolations to (60,100), set output 0.0 to 1, linear interpolations to (40,100),  set output 0.0 to 0, linear interpolations to (0,100), linear interpolations to (10,20), while the smoothRadius is 30.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 100\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 8\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 30\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 60)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 0\n    point.setOutputBit.value = 1\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.Immediate\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(3, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 40)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    path.SetPoint(4, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 0\n    point.setOutputBit.value = 0\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.Immediate\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(5, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    path.SetPoint(6, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 10)\n    point.linear.SetTarget(1, 20)\n    path.SetPoint(7, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[1,2]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 64,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of two sequences: set output 0.0 to 1 when completed distance is 20, linear interpolations to (40,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of two sequences: set output 0.0 to 1 when completed distance is 20, linear interpolations to (40,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of two sequences: set output 0.0 to 1 when completed distance is 20, linear interpolations to (40,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    conf.sampleDistance = 100\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 2\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 0\n    point.setOutputBit.value = 1\n    point.setOutputBit.triggerValue = 20\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.CompletedDist\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 40)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(1, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[40,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 65,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 20, set output 0.1 to 1 when remaining distance is 10, linear interpolations to (40,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 20, set output 0.0 to 1 when remaining distance is 10, linear interpolations to (40,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 20, set output 0.0 to 1 when remaining distance is 10, linear interpolations to (40,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    conf.sampleDistance = 100\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 3\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 0\n    point.setOutputBit.value = 1\n    point.setOutputBit.triggerValue = 20\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.CompletedDist\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 1\n    point.setOutputBit.value = 1\n    point.setOutputBit.triggerValue = 10\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.RemainingDist\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 40)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(2, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[40,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 66,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 30, set output 0.1 to 1 when completed distance is 20, linear interpolations to (40,0).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 20, set output 0.0 to 1 when remaining distance is 10, linear interpolations to (40,0).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 100, consisting of three sequences: set output 0.0 to 1 when completed distance is 20, set output 0.0 to 1 when remaining distance is 10, linear interpolations to (40,0).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    conf.sampleDistance = 100\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 3\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 0\n    point.setOutputBit.value = 1\n    point.setOutputBit.triggerValue = 30\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.CompletedDist\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.SetOutputBit\n    point.setOutputBit.byteAddress = 0\n    point.setOutputBit.bitAddress = 1\n    point.setOutputBit.value = 1\n    point.setOutputBit.triggerValue = 20\n    point.setOutputBit.type = AdvMotion_PathIntplOutputType.CompletedDist\n    point.setOutputBit.source = AdvMotion_PathIntplOutputSource.IOOutput\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 40)\n    point.linear.SetTarget(1, 0)\n    path.SetPoint(2, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[40,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 67,
        "Instruction": "Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 10, consisting of four linear interpolations: (100,0) with velocity 900,(100,100) with velocity 700,(0,100) with velocity 500,(0,0) with velocity 300, while the smoothRadius is 30.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 10, consisting of four linear interpolations: (100,0) with velocity 900,(100,100) with velocity 700,(0,100) with velocity 500,(0,0) with velocity 300, while the smoothRadius is 30.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0 and Axis 1 with velocity 1000, with a sample distance 10, consisting of four linear interpolations: (100,0) with velocity 900,(100,100) with velocity 700,(0,100) with velocity 500,(0,0) with velocity 300, while the smoothRadius is 30.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 2\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 2000\n    #  The commanded axes will automatically change to Idle operation state after all interpolation commands in the path have been executed.\n    conf.stopOnEmptyBuffer = True\n    # Sample the profile at every specified distance along the path, improving the granularity of the generated profile.\n    conf.sampleDistance = 10\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    path.numPoints = 4\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 0)\n    point.linear.smoothRadius = 30\n    point.linear.setSegmentCompositeVel = 1\n    point.linear.segmentCompositeVel = 900\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 100)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    point.linear.setSegmentCompositeVel = 1\n    point.linear.segmentCompositeVel = 700\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 100)\n    point.linear.smoothRadius = 30\n    point.linear.setSegmentCompositeVel = 1\n    point.linear.segmentCompositeVel = 500\n    path.SetPoint(2, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 2\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    point.linear.setSegmentCompositeVel = 1\n    point.linear.segmentCompositeVel = 300\n    path.SetPoint(3, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Execute path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n\n\n    # Set servo off for Axes\n    for axis in [0, 1]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1],\n[0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 68,
        "Instruction": "Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 100, composite acceleration 1000, and the acceleration limit for Axis 0, 1 and 2 is 300, 600 and 900, with a sample distance 100, consisting of three linear interpolations: (40,60,70),(30,20,120),(0,0,0), while the smoothRadius is 5.",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 100, composite acceleration 1000, and the acceleration limit for Axis 0, 1 and 2 is 300, 600 and 900, with a sample distance 100, consisting of three linear interpolations: (40,60,70),(30,20,120),(0,0,0), while the smoothRadius is 5.\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 100, composite acceleration 1000, and the acceleration limit for Axis 0, 1 and 2 is 300, 600 and 900, with a sample distance 100, consisting of three linear interpolations: (40,60,70),(30,20,120),(0,0,0), while the smoothRadius is 5.\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 3\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.SetAxis(2, 2)\n    conf.compositeVel = 100\n    conf.compositeAcc = 1000\n    conf.sampleDistance = 10\n    conf.stopOnEmptyBuffer = True\n    conf.SetAccLimit(0, 300)\n    conf.SetAccLimit(1, 600)\n    conf.SetAccLimit(2, 900)\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 3\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 3\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetAxis(2, 2)\n    point.linear.SetTarget(0, 40)\n    point.linear.SetTarget(1, 60)\n    point.linear.SetTarget(2, 70)\n    point.linear.smoothRadius = 5\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 3\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetAxis(2, 2)\n    point.linear.SetTarget(0, 30)\n    point.linear.SetTarget(1, 20)\n    point.linear.SetTarget(2, 120)\n    point.linear.smoothRadius = 5\n    path.SetPoint(1, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.Linear\n    point.linear.axisCount = 3\n    point.linear.SetAxis(0, 0)\n    point.linear.SetAxis(1, 1)\n    point.linear.SetAxis(2, 2)\n    point.linear.SetTarget(0, 0)\n    point.linear.SetTarget(1, 0)\n    point.linear.SetTarget(2, 0)\n    path.SetPoint(2, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2],\n[0,0,0]]",
        "MotionLogData": NaN
    },
    {
        "TaskId": 69,
        "Instruction": "Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 1000, and Axis 3 as the auxiliary axis, consisting of two circular interpolations defined as (throughPos0,throughPos1,throughPos2,endPos0,endPos1,endPos2,auxiliaryTarget): (70.71,29.29,0,100,100,0,50),(29.29,70.71,0,0,0,0,100).",
        "CanonicalCode": "# Write python code to Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 1000, and Axis 3 as the auxiliary axis, consisting of two circular interpolations defined as (throughPos0,throughPos1,throughPos2,endPos0,endPos1,endPos2,auxiliaryTarget): (70.71,29.29,0,100,100,0,50),(29.29,70.71,0,0,0,0,100).\n\n#WMX3 python library\nfrom WMX3ApiPython import *\nfrom time import *\n\nINFINITE = int(0xFFFFFFFF)\n\ndef main():\n    Wmx3Lib = WMX3Api()\n    CmStatus = CoreMotionStatus()\n    Wmx3Lib_cm = CoreMotion(Wmx3Lib)\n    print('Program begin.')\n    sleep(0.1)\n\n    # Create devices. \n    ret = Wmx3Lib.CreateDevice('C:\\\\Program Files\\\\SoftServo\\\\WMX3', DeviceType.DeviceTypeNormal, INFINITE)\n    if ret!=0:\n        print('CreateDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Set Device Name.\n    Wmx3Lib.SetDeviceName('WMX3initTest')\n\n    # Start Communication.\n    ret = Wmx3Lib.StartCommunication(INFINITE)\n    if ret!=0:\n        print('StartCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Import and set all the preset motion parameters.\n    ret=Wmx3Lib_cm.config.ImportAndSetAll(\"C:\\\\Program Files\\\\SoftServo\\\\WMX3\\\\wmx_parameters.xml\")\n    if ret != 0:\n        print('ImportAndSetAll Parameters error code is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n    sleep(0.5)\n \n    # Clear alarms, set servos on, and perform homing for Axes\n    for axis in [0, 1, 2, 3]:\n        # Clear the amplifier alarm\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if not CmStatus.GetAxesStatus(axis).ampAlarm:\n                break\n            ret = Wmx3Lib_cm.axisControl.ClearAmpAlarm(axis)\n            sleep(0.5)\n            timeoutCounter += 1\n            if timeoutCounter > 5:\n                break\n        if timeoutCounter > 5:\n            print(f'Clear axis {axis} alarm fails!')\n            return\n\n        # Set servo on for Axis\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 1)\n        timeoutCounter = 0\n        while True:\n            # GetStatus -> First return value : Error code, Second return value: CoreMotionStatus\n            ret, CmStatus = Wmx3Lib_cm.GetStatus()\n            if (CmStatus.GetAxesStatus(axis).servoOn):\n                break\n            sleep(0.4)\n            timeoutCounter += 1\n            if (timeoutCounter > 5):\n                break\n        if (timeoutCounter > 5):\n            print('Set servo on for axis {axis} fails!')\n            return\n\n        # Sleep is a must between SetServoOn and Homing\n        sleep(0.1)\n\n        # Homing\n        homeParam = Config_HomeParam()\n        ret, homeParam = Wmx3Lib_cm.config.GetHomeParam(axis)\n        homeParam.homeType = Config_HomeType.CurrentPos\n\n        # SetHomeParam -> First return value: Error code, Second return value: param error\n        ret, homeParamError = Wmx3Lib_cm.config.SetHomeParam(axis, homeParam)\n\n        ret = Wmx3Lib_cm.home.StartHome(axis)\n        if ret != 0:\n            print(f'StartHome error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n        Wmx3Lib_cm.motion.Wait(axis)\n\n\n    # Execute path interpolation with look ahead of Axis 0, 1 and 2 with velocity 1000, and Axis 3 as the auxiliary axis, consisting of two circular interpolations defined as (throughPos0,throughPos1,throughPos2,endPos0,endPos1,endPos2,auxiliaryTarget): (70.71,29.29,0,100,100,0,50),(29.29,70.71,0,0,0,0,100).\n    Wmx3Lib_adv = AdvancedMotion(Wmx3Lib)\n\n    path = AdvMotion_PathIntplLookaheadCommand()\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    # Create the path interpolation with look ahead buffer\n    ret = Wmx3Lib_adv.advMotion.CreatePathIntplLookaheadBuffer(0, 1000)\n    if ret != 0:\n        print('CreatePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Configure the path interpolation with look ahead channel\n    conf = AdvMotion_PathIntplLookaheadConfiguration()\n\n    conf.axisCount = 4\n    conf.SetAxis(0, 0)\n    conf.SetAxis(1, 1)\n    conf.SetAxis(2, 2)\n    conf.SetAxis(3, 3)\n    conf.compositeVel = 1000\n    conf.compositeAcc = 4000\n    conf.stopOnEmptyBuffer = True\n\n    ret = Wmx3Lib_adv.advMotion.SetPathIntplLookaheadConfiguration(0, conf)\n    if ret != 0:\n        print('SetPathIntplLookaheadConfiguration error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Add the path interpolation with look ahead commands\n    point = AdvMotion_PathIntplLookaheadCommand()\n    path.numPoints = 2\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEnd3DCircular\n    point.throughAndEnd3DCircular.axisCount = 3\n    point.throughAndEnd3DCircular.SetAxis(0, 0)\n    point.throughAndEnd3DCircular.SetAxis(1, 1)\n    point.throughAndEnd3DCircular.SetAxis(2, 2)\n    point.throughAndEnd3DCircular.SetThroughPos(0, 70.71)\n    point.throughAndEnd3DCircular.SetThroughPos(1, 29.29)\n    point.throughAndEnd3DCircular.SetThroughPos(2, 0)\n    point.throughAndEnd3DCircular.SetEndPos(0, 100)\n    point.throughAndEnd3DCircular.SetEndPos(1, 100)\n    point.throughAndEnd3DCircular.SetEndPos(2, 0)\n    point.throughAndEnd3DCircular.auxiliaryAxisCount = 1\n    point.throughAndEnd3DCircular.SetAuxiliaryAxis(0, 3)\n    point.throughAndEnd3DCircular.SetAuxiliaryTarget(0, 50)\n    path.SetPoint(0, point)\n\n    point = AdvMotion_PathIntplLookaheadCommandPoint()\n    point.type = AdvMotion_PathIntplLookaheadSegmentType.ThroughAndEnd3DCircular\n    point.throughAndEnd3DCircular.axisCount = 3\n    point.throughAndEnd3DCircular.SetAxis(0, 0)\n    point.throughAndEnd3DCircular.SetAxis(1, 1)\n    point.throughAndEnd3DCircular.SetAxis(2, 2)\n    point.throughAndEnd3DCircular.SetThroughPos(0, 29.29)\n    point.throughAndEnd3DCircular.SetThroughPos(1, 70.71)\n    point.throughAndEnd3DCircular.SetThroughPos(2, 0)\n    point.throughAndEnd3DCircular.SetEndPos(0, 0)\n    point.throughAndEnd3DCircular.SetEndPos(1, 0)\n    point.throughAndEnd3DCircular.SetEndPos(2, 0)\n    point.throughAndEnd3DCircular.auxiliaryAxisCount = 1\n    point.throughAndEnd3DCircular.SetAuxiliaryAxis(0, 3)\n    point.throughAndEnd3DCircular.SetAuxiliaryTarget(0, 100)\n    path.SetPoint(1, point)\n\n    ret = Wmx3Lib_adv.advMotion.AddPathIntplLookaheadCommand(0, path)\n    if ret != 0:\n        print('AddPathIntplLookaheadCommand error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Start path interpolation with look ahead\n    ret = Wmx3Lib_adv.advMotion.StartPathIntplLookahead(0)\n    if ret != 0:\n        print('StartPathIntplLookahead error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n\n    # Wait for the path interpolation with look ahead to complete\n    Wmx3Lib_cm.motion.Wait(0)\n    timeoutCounter = 0\n    # Wait until the path interpolation with look ahead is in Stopped state\n    ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    while True:\n        if (pathStatus.state != AdvMotion_PathIntplLookaheadState.Stopped):\n            break\n        sleep(0.1)\n        timeoutCounter = timeoutCounter + 1\n        if (timeoutCounter > 500):\n            break\n        ret, pathStatus = Wmx3Lib_adv.advMotion.GetPathIntplLookaheadStatus(0)\n    if (timeoutCounter > 500):\n        print('PathIntplLookahead Runuing timeout.!')\n        return\n    # Free the path interpolation with look ahead buffer (normally, the buffer should only be freed at the end of the application)\n    ret = Wmx3Lib_adv.advMotion.FreePathIntplLookaheadBuffer(0)\n    if ret != 0:\n        print('FreePathIntplLookaheadBuffer error code is ' + str(ret) + ': ' + Wmx3Lib_adv.ErrorToString(ret))\n        return\n    \n\n\n    # Set servo off for Axes\n    for axis in [0, 1, 2, 3]:\n        ret = Wmx3Lib_cm.axisControl.SetServoOn(axis, 0)\n        if ret != 0:\n            print(f'SetServoOn to off error code for axis {axis} is ' + str(ret) + ': ' + Wmx3Lib_cm.ErrorToString(ret))\n            return\n\n    # Stop Communication.\n    ret = Wmx3Lib.StopCommunication(INFINITE)\n    if ret!=0:\n        print('StopCommunication error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    # Close Device.\n    ret = Wmx3Lib.CloseDevice()\n    if ret!=0:\n        print('CloseDevice error code is ' + str(ret) + ': ' + Wmx3Lib.ErrorToString(ret))\n        return\n\n    print('Program End.')\n\nif __name__ == '__main__':\n    main()",
        "EndPoint": "[[0,1,2,3],\n[0,0,0,100]]",
        "MotionLogData": NaN
    }
]