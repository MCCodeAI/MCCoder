[
    {
        "No": 1,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "Clear(channel)\u00a0",
        "C": "GetPlannedVelOverrideStatus(channel)\u00a0",
        "D": "ApiLogDataToString(pLogData, logDataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 2,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "GetStatus(channel)\u00a0",
        "C": "SetLogOption(channel, pOption)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 3,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "EndRecordBufferChannel()\u00a0",
        "C": "OverridePos(pPosCommand)\u00a0",
        "D": "IsValidDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 4,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "FlowIf(condition)",
        "C": "GetApiLogData_ApiLogInfo(pFile, buffSize)\u00a0",
        "D": "FetchVersionInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 5,
        "Instruction": "Create a memory space for use with the API buffer. This function must be called before the API buffer functions can be used.",
        "A": "CreateApiBuffer(channel, size)\u00a0",
        "B": "FlowElse()\u00a0",
        "C": "FreeApiBuffer(channel)\u00a0",
        "D": "InitializeApiBuffer(channel_name, buffer_size)",
        "Answer(s)": "A"
    },
    {
        "No": 6,
        "Instruction": "Create a memory space for use with the API buffer using the default memory size.",
        "A": "CreateApiBuffer(channel)\u00a0",
        "B": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "C": "FreeSplineBuffer(channel)\u00a0",
        "D": "ModifyApiBuffer(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 7,
        "Instruction": "Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units.",
        "A": "CreateApiBuffer(channel, size, sizeUnit)\u00a0",
        "B": "Wait_AxisSel(pAxisSelection)\u00a0",
        "C": "CreateApiBuffer(channel, size)\u00a0",
        "D": "UpdateApiBufferParameters(endpoint, bufferSize, units)",
        "Answer(s)": "A"
    },
    {
        "No": 8,
        "Instruction": "Close an API buffer memory space",
        "A": "FreeApiBuffer(channel)\u00a0",
        "B": "CreateApiBuffer(channel)\u00a0",
        "C": "CreateApiBuffer(channel, size)\u00a0",
        "D": "FreeChannelBuffer(api)",
        "Answer(s)": "A"
    },
    {
        "No": 9,
        "Instruction": "Start recording APIs to the API buffer channel.",
        "A": "StartRecordBufferChannel(channel)\u00a0",
        "B": "Sleep(milliseconds)\u00a0",
        "C": "CloseMemoryLogBuffer(channel)\u00a0",
        "D": "StartChannelBufferRecording(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 10,
        "Instruction": "End recording APIs to the API buffer channel.",
        "A": "EndRecordBufferChannel()\u00a0",
        "B": "Clear(channel)\u00a0",
        "C": "OpenMemoryLogBuffer(channel)\u00a0",
        "D": "EndRecordBufferChannelV2()",
        "Answer(s)": "A"
    },
    {
        "No": 11,
        "Instruction": "Get the currently recording API buffer channel, if any",
        "A": "GetRecordingBufferChannel()\u00a0",
        "B": "EndRecordBufferChannel()\u00a0",
        "C": "OpenMemoryLogBuffer(channel)\u00a0",
        "D": "GetRecordingBufferChannel(int channelIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 12,
        "Instruction": "Execute an API buffer.",
        "A": "Execute(channel)\u00a0",
        "B": "Wait_ApiBufferCondition(condition)\u00a0",
        "C": "GetECAM(channel)\u00a0",
        "D": "performTask(task_channel)",
        "Answer(s)": "A"
    },
    {
        "No": 13,
        "Instruction": "Halt an API buffer.",
        "A": "Halt(channel)\u00a0",
        "B": "FlowIf(condition)",
        "C": "StartLog(channel)\u00a0",
        "D": "Terminate(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 14,
        "Instruction": "Clear an API buffer.",
        "A": "Clear(channel)\u00a0",
        "B": "Rewind(channel)\u00a0",
        "C": "Halt(channel)\u00a0",
        "D": "ClearChannel(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 15,
        "Instruction": "Rewind an API buffer.",
        "A": "Rewind(channel)\u00a0",
        "B": "SetOutputData(moduleId, data, dataSize)\u00a0",
        "C": "GetOptions(channel)\u00a0",
        "D": "ReplayPrevious(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 16,
        "Instruction": "Get the current status of an API buffer.",
        "A": "GetStatus(channel)\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "GetWatch(channel)\u00a0",
        "D": "CheckChannelStatus(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 17,
        "Instruction": "Set options for an API buffer.",
        "A": "SetOptions(channel, pOptions)\u00a0",
        "B": "Execute(channel)\u00a0",
        "C": "SetLogOption(channel, pOption)\u00a0",
        "D": "SetChannelOptions(channel, options)",
        "Answer(s)": "A"
    },
    {
        "No": 18,
        "Instruction": "Get the currently applied options for an API buffer.",
        "A": "GetOptions(channel)\u00a0",
        "B": "StartRecordBufferChannel(channel)\u00a0",
        "C": "GetLogOption(channel)\u00a0",
        "D": "GetChannelOptions(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 19,
        "Instruction": "Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected.",
        "A": "SetWatch(channel, pWatch)\u00a0",
        "B": "EndRecordBufferChannel()\u00a0",
        "C": "SetWatchdog(deviceId, watchdog)\u00a0",
        "D": "SetWatchChannel(channelID, watchObject)",
        "Answer(s)": "A"
    },
    {
        "No": 20,
        "Instruction": "Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected.",
        "A": "GetWatch(channel)\u00a0",
        "B": "CreateApiBuffer(channel)\u00a0",
        "C": "GetECAM(channel)\u00a0",
        "D": "GetChannelWatch(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 21,
        "Instruction": "Add a sleep command to an API buffer.",
        "A": "Sleep(milliseconds)\u00a0",
        "B": "Wait_ApiBufferCondition(condition)\u00a0",
        "C": "SimulatePos(pSimulatePosCommand)\u00a0",
        "D": "SleepForDuration(duration)",
        "Answer(s)": "A"
    },
    {
        "No": 22,
        "Instruction": "Add a wait command to an API buffer.",
        "A": "Wait(int axis)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "Wait(axis)\u00a0",
        "D": "WaitForAxis(int axis)",
        "Answer(s)": "A"
    },
    {
        "No": 23,
        "Instruction": "Add a wait command to an API buffer.",
        "A": "Wait_AxisSel(pAxisSelection)\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "Pause_AxisSel(pAxisSelection)\u00a0",
        "D": "Wait_AxisSelection(pAxes)",
        "Answer(s)": "A"
    },
    {
        "No": 24,
        "Instruction": "Add a wait command to an API buffer.",
        "A": "Wait_ApiBufferCondition(condition)\u00a0",
        "B": "CreateApiBuffer(channel, size, sizeUnit)\u00a0",
        "C": "Wait_WaitCondition(pWaitCondition)\u00a0",
        "D": "Wait_ApiBufferConditionWithTimeout(condition, timeout)",
        "Answer(s)": "A"
    },
    {
        "No": 25,
        "Instruction": "Add an If command to an API buffer.",
        "A": "FlowIf(condition)",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "StopCommunication()",
        "D": "CheckConditionFlowIf(condition)",
        "Answer(s)": "A"
    },
    {
        "No": 26,
        "Instruction": "Add an Else If command to an API buffer.",
        "A": "FlowElseIf(condition)\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "FlowEndIf()\u00a0",
        "D": "FlowIfElse(condition)",
        "Answer(s)": "A"
    },
    {
        "No": 27,
        "Instruction": "Add an Else command to an API buffer.",
        "A": "FlowElse()\u00a0",
        "B": "Sleep(milliseconds)\u00a0",
        "C": "ReleaseEStop()\u00a0",
        "D": "FlowIfElse()",
        "Answer(s)": "A"
    },
    {
        "No": 28,
        "Instruction": "Add an End If command to an API buffer.",
        "A": "FlowEndIf()\u00a0",
        "B": "Execute(channel)\u00a0",
        "C": "FlowElseIf(condition)\u00a0",
        "D": "FlowEndIf(condition: bool)",
        "Answer(s)": "A"
    },
    {
        "No": 29,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "EnablePitchErrorCompensation(axis)\u00a0",
        "C": "IsDeviceValid()\u00a0",
        "D": "ConvertErrorCodeToString(code)",
        "Answer(s)": "A"
    },
    {
        "No": 30,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "SetEventInput(id, pEventInput)\u00a0",
        "D": "ApiLogDataToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 31,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "SetBacklashCompensation(axis, pBacklashCompData)\u00a0",
        "C": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 32,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "EnableBacklashCompensation(axis)\u00a0",
        "C": "SetOutBytesEx(addr, size, pData)\u00a0",
        "D": "isValidDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 33,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)\u00a0",
        "C": "ErrorToString(errCode)\u00a0",
        "D": "GetSoftwareVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 34,
        "Instruction": "Set pitch error compensation parameters.",
        "A": "SetPitchErrorCompensation(axis, pitchErrCompData)\u00a0",
        "B": "GetPitchErrorCompensationAtPosition(axis, pos)\u00a0",
        "C": "Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)\u00a0",
        "D": "SetPitchErrorCompensationParameters(axis, pitchErrCompData)",
        "Answer(s)": "A"
    },
    {
        "No": 35,
        "Instruction": "Set free position mode pitch error compensation parameters.",
        "A": "SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)\u00a0",
        "B": "EnablePitchErrorCompensation(axis)\u00a0",
        "C": "GetPitchErrorCompensation_FreePosition(axis)\u00a0",
        "D": "SetPitchErrorCompensation(axis, pitchErrorCompensationData)",
        "Answer(s)": "A"
    },
    {
        "No": 36,
        "Instruction": "Get pitch error compensation parameters.",
        "A": "GetPitchErrorCompensation(axis)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "DisablePitchErrorCompensation(axis)\u00a0",
        "D": "GetPitchErrorCompensation(axis_name)",
        "Answer(s)": "A"
    },
    {
        "No": 37,
        "Instruction": "Get free position mode pitch error compensation parameters.",
        "A": "GetPitchErrorCompensation_FreePosition(axis)\u00a0",
        "B": "DisableBacklashCompensation(axis)\u00a0",
        "C": "Get2DPitchErrorCompensation_FreePosition(channel)\u00a0",
        "D": "EstimatePitchErrorCompensation_AxisPosition(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 38,
        "Instruction": "Enable pitch error compensation.",
        "A": "EnablePitchErrorCompensation(axis)\u00a0",
        "B": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "C": "EnableBacklashCompensation(axis)\u00a0",
        "D": "RenewPitchErrorCorrection(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 39,
        "Instruction": "Disable pitch error compensation.",
        "A": "DisablePitchErrorCompensation(axis)\u00a0",
        "B": "EnablePitchErrorCompensation(axis)\u00a0",
        "C": "EnablePitchErrorCompensation(axis)\u00a0",
        "D": "DisablePitchCompensation(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 40,
        "Instruction": "Obtain the pitch error compensation amount at the specified position.",
        "A": "GetPitchErrorCompensationAtPosition(axis, pos)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "Get2DPitchErrorCompensation_FreePosition(channel)\u00a0",
        "D": "GetPitchErrorCompensationValue(axis, position)",
        "Answer(s)": "A"
    },
    {
        "No": 41,
        "Instruction": "Set two-dimensional (2D) pitch error compensation parameters.",
        "A": "Set2DPitchErrorCompensation(channel, pitchErrCompData2D)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "SetPitchErrorCompensation(axis, pitchErrCompData)\u00a0",
        "D": "Set2DPitchErrorCompensation(channelNumber, pitchErrorDataMatrix)",
        "Answer(s)": "A"
    },
    {
        "No": 42,
        "Instruction": "Set free position two-dimensional (2D) pitch error compensation parameters.",
        "A": "Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)\u00a0",
        "B": "GetPitchErrorCompensation(axis)\u00a0",
        "C": "SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)\u00a0",
        "D": "Set2DPitchErrorCompensationByPosition(channel, pitchErrCompData2D)",
        "Answer(s)": "A"
    },
    {
        "No": 43,
        "Instruction": "Get two-dimensional (2D) pitch error compensation parameters.",
        "A": "Get2DPitchErrorCompensation(channel)\u00a0",
        "B": "DisableBacklashCompensation(axis)\u00a0",
        "C": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "D": "Get2DPitchErrorCorrection(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 44,
        "Instruction": "Get free position two-dimensional (2D) pitch error compensation parameters.",
        "A": "Get2DPitchErrorCompensation_FreePosition(channel)\u00a0",
        "B": "GetPitchErrorCompensation(axis)\u00a0",
        "C": "Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)\u00a0",
        "D": "Get2DPitchErrorCompensation(channel, position)",
        "Answer(s)": "A"
    },
    {
        "No": 45,
        "Instruction": "Enable two-dimensional (2D) pitch error compensation.",
        "A": "Enable2DPitchErrorCompensation(channel)\u00a0",
        "B": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "C": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "D": "Update2DPitchErrorCompensation(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 46,
        "Instruction": "Disable two-dimensional (2D) pitch error compensation.",
        "A": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "B": "GetPitchErrorCompensationAtPosition(axis, pos)\u00a0",
        "C": "Get2DPitchErrorCompensation_FreePosition(channel)\u00a0",
        "D": "disable_2d_pitch_error_compensation(channel_id):",
        "Answer(s)": "A"
    },
    {
        "No": 47,
        "Instruction": "Obtain the two-dimensional (2D) pitch error compensation amount at the specified position.",
        "A": "Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)\u00a0",
        "B": "Disable2DPitchErrorCompensation(channel)\u00a0",
        "C": "Get2DPitchErrorCompensation(channel)\u00a0",
        "D": "Get2DPitchErrorAtPosition(channel, position1, position2)",
        "Answer(s)": "A"
    },
    {
        "No": 48,
        "Instruction": "Set backlash compensation parameters.",
        "A": "SetBacklashCompensation(axis, pBacklashCompData)\u00a0",
        "B": "Set2DPitchErrorCompensation(channel, pitchErrCompData2D)\u00a0",
        "C": "DisableBacklashCompensation(axis)\u00a0",
        "D": "SetBacklashCompensationParams(axis, pBacklashCompData)",
        "Answer(s)": "A"
    },
    {
        "No": 49,
        "Instruction": "Get backlash compensation parameters.",
        "A": "GetBacklashCompensation(axis)\u00a0",
        "B": "Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)\u00a0",
        "C": "EnableBacklashCompensation(axis)\u00a0",
        "D": "ApplyBacklashCompensation(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 50,
        "Instruction": "Enable backlash compensation.",
        "A": "EnableBacklashCompensation(axis)\u00a0",
        "B": "DisableBacklashCompensation(axis)\u00a0",
        "C": "SetBacklashCompensation(axis, pBacklashCompData)\u00a0",
        "D": "EnableCompensateBacklash(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 51,
        "Instruction": "Disable backlash compensation.",
        "A": "DisableBacklashCompensation(axis)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "EnablePitchErrorCompensation(axis)\u00a0",
        "D": "CancelBacklashCompensation(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 52,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "StartVT(pVTCommand)\u00a0",
        "C": "Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "D": "ErrorMessage(errCode)",
        "Answer(s)": "A"
    },
    {
        "No": 53,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "C": "OverrideDec(pPosCommand)\u00a0",
        "D": "ApiLogDataToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 54,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "ClearAxisAlarm(axis)\u00a0",
        "C": "StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "GetLibVersionInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 55,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "RemoveAxisFromSyncGroup(groupId, axis)\u00a0",
        "C": "GetOutByteEx(addr)\u00a0",
        "D": "IsDeviceValid(device_id)",
        "Answer(s)": "A"
    },
    {
        "No": 56,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "StartMov(pPosCommand)\u00a0",
        "C": "SetOutBits(pByte, pBit, pData, count)\u00a0",
        "D": "FetchVersionInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 57,
        "Instruction": "Read the current system status from the engine.",
        "A": "GetStatus()\u00a0",
        "B": "SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "C": "GetStatistic()\u00a0",
        "D": "CheckConnectionStatus()",
        "Answer(s)": "A"
    },
    {
        "No": 58,
        "Instruction": "Initiate an emergency stop to stop the motion of all axes.",
        "A": "ExecEStop(level)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "ExecQuickStop(axis)\u00a0",
        "D": "ExecStartEmergencyStop(priorityLevel)",
        "Answer(s)": "A"
    },
    {
        "No": 59,
        "Instruction": "Clear the emergency stop state to allow the axes to be controlled again.",
        "A": "ReleaseEStop()\u00a0",
        "B": "StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "C": "ReleaseStdOut()",
        "D": "ReleaseSafetyStop()",
        "Answer(s)": "A"
    },
    {
        "No": 60,
        "Instruction": "Trigger the flight recorder to write the flight recorder data to file.",
        "A": "TriggerFlightRecorder()\u00a0",
        "B": "Resume_AxisSel(pAxisSelection)\u00a0",
        "C": "GetFlightRecorderParam()\u00a0",
        "D": "RecordFlightData()",
        "Answer(s)": "A"
    },
    {
        "No": 61,
        "Instruction": "Reset the flight recorder so that it may be triggered again.",
        "A": "ResetFlightRecorder()\u00a0",
        "B": "StartMov_Trigger(pPosCommand)\u00a0",
        "C": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "D": "ClearFlightDataRecorder()",
        "Answer(s)": "A"
    },
    {
        "No": 62,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "C": "GetInputModuleId()\u00a0",
        "D": "CheckDeviceValidity()",
        "Answer(s)": "A"
    },
    {
        "No": 63,
        "Instruction": "Start an absolute position command.",
        "A": "StartPos(pPosCommand)\u00a0",
        "B": "OverrideDec(pPosCommand)\u00a0",
        "C": "StopJogAtPos(pPosCommand)\u00a0",
        "D": "StartPosition(pPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 64,
        "Instruction": "Start a relative position command.",
        "A": "StartMov(pPosCommand)\u00a0",
        "B": "StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "C": "StartMovToJog(pPosToJogCommand)\u00a0",
        "D": "MoveStart(pStartPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 65,
        "Instruction": "Start an absolute triggered position command.",
        "A": "StartPos_Trigger(pPosCommand)\u00a0",
        "B": "StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartMov_Trigger(pPosCommand)\u00a0",
        "D": "newStartPos_Trigger(pCmdPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 66,
        "Instruction": "Start a relative triggered position command.",
        "A": "StartMov_Trigger(pPosCommand)\u00a0",
        "B": "StartVel_TimedVel(numCommands, pTimedVelCommand)\u00a0",
        "C": "StartVelToMov(pTriggerPosCommand)\u00a0",
        "D": "ActionTrigger_Start(pCommandPos)",
        "Answer(s)": "A"
    },
    {
        "No": 67,
        "Instruction": "Start an absolute triggered position command with multiple trigger events.",
        "A": "StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "Stop(axis)\u00a0",
        "C": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "Initialize_PositionAndTrigger(pPositionCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 68,
        "Instruction": "Start a relative triggered position command with multiple trigger events.",
        "A": "StartMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "OverrideJerkAcc(pPosCommand)\u00a0",
        "C": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "TriggerEventsOnMovement(pMovementCommand, pTriggerEvents).",
        "Answer(s)": "A"
    },
    {
        "No": 69,
        "Instruction": "Start absolute position commands for multiple axes.",
        "A": "StartPos(numCommands, pPosCommand)\u00a0",
        "B": "StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "D": "StartCommandExecution(numCommands, initialPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 70,
        "Instruction": "Start relative position commands for multiple axes.",
        "A": "StartMov(numCommands, pPosCommand)\u00a0",
        "B": "OverrideJerkAcc(pPosCommand)\u00a0",
        "C": "StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "D": "StartMoving(numCommands, playerPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 71,
        "Instruction": "Start absolute triggered position commands for multiple axes.",
        "A": "StartPos_Trigger(numCommands, pPosCommand)\u00a0",
        "B": "StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "C": "StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "D": "SetInitialPosition(triggerCount, initialPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 72,
        "Instruction": "Start relative triggered position commands for multiple axes.",
        "A": "StartMov_Trigger(numCommands, pPosCommand)\u00a0",
        "B": "AddRelativeSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "C": "StartMov(numCommands, pPosCommand)\u00a0",
        "D": "StopMovementTrigger(numCommands, pausePositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 73,
        "Instruction": "Start absolute triggered position commands with multiple trigger events for multiple axes.",
        "A": "StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "StopTrq(axis)\u00a0",
        "C": "StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "UpdateStartPositionTriggerEvents(numCommands, startingPosCommand, triggerEventsList)",
        "Answer(s)": "A"
    },
    {
        "No": 74,
        "Instruction": "Start relative triggered position commands with multiple trigger events for multiple axes.",
        "A": "StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "OverridePos(pPosCommand)\u00a0",
        "C": "StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "StartModifiedMov_TriggerEvents(numMovCommands, pPosCommandList, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 75,
        "Instruction": "Start an absolute position linear interpolation motion command.",
        "A": "StartLinearIntplPos(pLinearIntplCommand)\u00a0",
        "B": "GetEmergencyStopParam()\u00a0",
        "C": "StartHelicalIntplMov(pHelicalIntplCommand)\u00a0",
        "D": "StartLinearInterpolationPosition(p_linear_interpolation_command)",
        "Answer(s)": "A"
    },
    {
        "No": 76,
        "Instruction": "Start a relative position linear interpolation motion command.",
        "A": "StartLinearIntplMov(pLinearIntplCommand)\u00a0",
        "B": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "C": "StartHelicalIntplMov(pHelicalIntplCommand)\u00a0",
        "D": "StartLinearInterpolatedMovement(pLinearIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 77,
        "Instruction": "Start an absolute position triggered linear interpolation motion command.",
        "A": "StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "B": "StartPosToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "C": "StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "D": "StartLinearIntplPos_TriggerWithDelay(pLinearIntplCommand, pTrigger, delayTime)",
        "Answer(s)": "A"
    },
    {
        "No": 78,
        "Instruction": "Start a relative position triggered linear interpolation motion command.",
        "A": "StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "B": "StartMov(pPosCommand)\u00a0",
        "C": "StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "D": "EditLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 79,
        "Instruction": "Start an absolute position triggered linear interpolation motion command with multiple trigger events.",
        "A": "StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "B": "SuperimposeMov(pPosCommand)\u00a0",
        "C": "StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "D": "StopLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 80,
        "Instruction": "Start a relative position triggered linear interpolation motion command with multiple trigger events.",
        "A": "StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartPos(pPosCommand)\u00a0",
        "C": "StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "D": "RespondToLinearIntplMov_TriggeredEvents(pLinearIntplCmd, pTriggeredEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 81,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length.",
        "A": "StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)\u00a0",
        "B": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "C": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "D": "StartCircularIntplPos_CenterAndRadius(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 82,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length.",
        "A": "StartCircularIntplMov_CenterAndLength(pCircularIntplCommand)\u00a0",
        "B": "GetSingleTurn(axis)\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "D": "StopCircularIntplMov_CenterAndLength(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 83,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc.",
        "A": "StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "B": "OverrideAcc(pPosCommand)\u00a0",
        "C": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "D": "StartCircularIntplPos_CenterAndEnd(pCircularIntplSegment)",
        "Answer(s)": "A"
    },
    {
        "No": 84,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center and end positions of the arc.",
        "A": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "B": "StartMovToJog(pPosToJogCommand)\u00a0",
        "C": "StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)\u00a0",
        "D": "UpdateCircularIntplMov_CenterAndEnd(pUpdatedCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 85,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "B": "StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "D": "EndCircularInterpolation_PositionThroughTo(pCircularInterpolationCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 86,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "B": "SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "D": "StartCircularIntplMotion_ThroughAndUpdate(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 87,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "B": "StartPVT(AdvMotion_PVTCommand pPVTCommand)\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "D": "EndCircularIntplPos_LengthAndStart(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 88,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc.",
        "A": "StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "B": "ReleaseEStop()\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "D": "ExecuteCircularIntplMov_WithCommandOptions(commandOptions)",
        "Answer(s)": "A"
    },
    {
        "No": 89,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_RadiusAndEnd(pCircularIntplCommand)\u00a0",
        "B": "StartVel_MaxTrq(pVelCommand, maxTrqLimit)\u00a0",
        "C": "StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "D": "StopCircularIntplPos_SpeedAndDuration(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 90,
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.",
        "A": "StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)\u00a0",
        "B": "Import_AxisPrm(pPath)\u00a0",
        "C": "StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "D": "EndCircularIntplMov_RadiusAndFinish(pCircularIntplCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 91,
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "B": "OverridePos(numCommands, pPosCommand)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "D": "InitiateCircularInterpolationAroundEnd3D(pCircularInterpolationCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 92,
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "B": "GetInputModuleId()\u00a0",
        "C": "StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "D": "InitiateCircularInterpolatedMoveIn3D(pCircularInterpolationSettings)",
        "Answer(s)": "A"
    },
    {
        "No": 93,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length.",
        "A": "StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplPos_CenterAndLength_Target(pCircularIntplCommand, pTarget)",
        "Answer(s)": "A"
    },
    {
        "No": 94,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length.",
        "A": "StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "C": "StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplMov_CenterLength_Trigger(pCircularIntplData, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 95,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc.",
        "A": "StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularInterpolationWithCenterAndEndTrigger(pCircularInterpolationCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 96,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center and end positions of the arc.",
        "A": "StartCircularIntplMov_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplMov_CenterAndEnd_Trigger(pCircularCommand, pEndTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 97,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "OverrideJerkDec(numCommands, pPosCommand)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplPos_ThroughAndEnd_Trigger(pCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 98,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplMov_StopAtEnd_Trigger(pCircularIntplCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 99,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplPos_LengthAndEnd_Trigger(pCmd, pTrig)",
        "Answer(s)": "A"
    },
    {
        "No": 100,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc.",
        "A": "StartCircularIntplMov_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularInterpolatedMovement_LengthAndEnd_Trigger(pCircularInterpolatedCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 101,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "GetPosFeedback(axis)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularIntplPos_RadiusAndEnd_Trigger(pCircleInterpolationCmd, pTriggerSignal)",
        "Answer(s)": "A"
    },
    {
        "No": 102,
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the relative end position of the arc.",
        "A": "StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "C": "StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularInterpolationWithinRadiusAndEndOnTrigger(pCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 103,
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "GetSyncGroup(groupId)\u00a0",
        "C": "StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "EndCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 104,
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "B": "SetFeedbackParam(axis, pParam)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "D": "StartCircularInterpolationMovement_ThroughEndTrigger(pCircularInterpolationCmd, pEndTrigger).",
        "Answer(s)": "A"
    },
    {
        "No": 105,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center position of the arc and the arc length.",
        "A": "StartCircularIntplPos_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "SetParam(pParam)\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularInterpolation_CenterLength_TriggerEvents(pInterpolationCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 106,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center position of the arc and the arc length.",
        "A": "StartCircularIntplMov_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "UpdateCircularIntplMov_CenterAndLength_TriggerEvents(pCommand, pEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 107,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center and end positions of the arc.",
        "A": "StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "ReleaseEStop()\u00a0",
        "C": "StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularIntplPos_CenterAndEnd_TriggerEvents(command, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 108,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center and end positions of the arc.",
        "A": "StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularIntplMov_TriggerEventsCenterAndEnd(pCircularIntplCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 109,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartJog(pJogCommand)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "UpdateCircularIntplPos_WithTriggerEvents(pCircularIntplCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 110,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "SetHomeDone(axis, value)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularInterpolationWithTriggerEvents(commandParameters, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 111,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartJog_TimedJog(numCommands, pTimedJogCommand)\u00a0",
        "C": "StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularInterpolation_LoopAndExecute_TriggerEvents(pCircularInterpolation, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 112,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the relative end position of the arc.",
        "A": "StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartPosToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "BeginCircularInterpolatedMovement_WithLengthAndStopTrigger(pCircularInterpolationCommand, pStopTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 113,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularInterpolation_Pos_Radius_AndEnd_WatchdogEvents(pCircularInterpolationCommand, pWatchdogEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 114,
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the relative end position of the arc.",
        "A": "StartCircularIntplMov_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "ExecTimedStop_TimeCmd(numCommands, pTimeCommand)\u00a0",
        "C": "StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "startCircularInterpolationWithRadiusAndTriggers(pCircularInterpolationCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 115,
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.",
        "A": "StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "SetAxisParam_Axis(axis, pParam)\u00a0",
        "C": "StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartIntplPos_ThroughEnd3D_TriggerEvents(pInterpolatedPosCommand, pEventTriggers)",
        "Answer(s)": "A"
    },
    {
        "No": 116,
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.",
        "A": "StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "B": "Stop_Dec(axis, dec)\u00a0",
        "C": "StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartCircularIntplMov_WithEvents3D_Trigger(pCircularIntplCommand, pEventsTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 117,
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.",
        "A": "StartHelicalIntplPos(pHelicalIntplCommand)\u00a0",
        "B": "StartTrq(numCommands, pTrqCommand)\u00a0",
        "C": "StartLinearIntplPos(pLinearIntplCommand)\u00a0",
        "D": "StartHelicalInterpolationPosition(pHelicalInterpolationParams)",
        "Answer(s)": "A"
    },
    {
        "No": 118,
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.",
        "A": "StartHelicalIntplMov(pHelicalIntplCommand)\u00a0",
        "B": "SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)\u00a0",
        "C": "StartLinearIntplMov(pLinearIntplCommand)\u00a0",
        "D": "StartHelicalInterpolatedMovement(helical_interpolation_command):",
        "Answer(s)": "A"
    },
    {
        "No": 119,
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.",
        "A": "StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "B": "StartMovToJog(pPosToJogCommand)\u00a0",
        "C": "StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "D": "SetupHelicalIntplPos(pHelicalIntplConfig, pTriggerSource)",
        "Answer(s)": "A"
    },
    {
        "No": 120,
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.",
        "A": "StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "B": "OverrideDec(numCommands, pPosCommand)\u00a0",
        "C": "StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "D": "TriggerHelicalMovement(pHelicalCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 121,
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.",
        "A": "StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartMov_Trigger(numCommands, pPosCommand)\u00a0",
        "C": "StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartHelicalInterpolationWithTriggers(pHelicalInterpolationCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 122,
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.",
        "A": "StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "B": "Export_AxisPrm_Axis(pPath, pAxisParam, axis)\u00a0",
        "C": "StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartHelicalInterpolatedMovementWithTriggers(pInterpolatedMovementCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 123,
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command.",
        "A": "StartVelToPos(pTriggerPosCommand)\u00a0",
        "B": "StartTrqToPos(pTriggerPosCommand)\u00a0",
        "C": "StartTrqToPos(pTriggerPosCommand)\u00a0",
        "D": "UpdateTriggerPosition(pTriggerPosCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 124,
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command.",
        "A": "StartVelToMov(pTriggerPosCommand)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartMov_Trigger(pPosCommand)\u00a0",
        "D": "UpdateCommandedMovement(pTriggerPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 125,
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands.",
        "A": "StartVelToPos(numCommands, pTriggerPosCommand)\u00a0",
        "B": "Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "C": "StartVelToMov(numCommands, pTriggerPosCommand)\u00a0",
        "D": "UpdateStartVelToPos(numCommands, pStartingPosCmd)",
        "Answer(s)": "A"
    },
    {
        "No": 126,
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands.",
        "A": "StartVelToMov(numCommands, pTriggerPosCommand)\u00a0",
        "B": "OverrideVel(numCommands, pVelCommand)\u00a0",
        "C": "StartVelToPos(numCommands, pTriggerPosCommand)\u00a0",
        "D": "StartMovementFromVelocity(numCommands, triggerPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 127,
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.",
        "A": "StartVelToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "ClearAxisAlarm(axis)\u00a0",
        "C": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "ConvertPosToVel_withTriggers(posCommand, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 128,
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.",
        "A": "StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "InitializeMotionWithTriggers(pStartPosition, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 129,
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.",
        "A": "StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "StartMov_Trigger(pPosCommand)\u00a0",
        "C": "StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "TransformVelToPos_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 130,
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.",
        "A": "StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "StartMov(pPosCommand)\u00a0",
        "C": "StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "StartVelToMov_TriggerEventsV2(numCommands, posCommands, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 131,
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command.",
        "A": "StartTrqToPos(pTriggerPosCommand)\u00a0",
        "B": "GetFeedbackParam(axis)\u00a0",
        "C": "StartVelToMov(pTriggerPosCommand)\u00a0",
        "D": "ConvertStartTrqToPos(triggerPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 132,
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command.",
        "A": "StartTrqToMov(pTriggerPosCommand)\u00a0",
        "B": "Export_SysPrm(pPath, pParam)\u00a0",
        "C": "StartMov_Trigger(pPosCommand)\u00a0",
        "D": "UpdateTrqForMovement(pTriggerPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 133,
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands.",
        "A": "StartTrqToPos(numCommands, pTriggerPosCommand)\u00a0",
        "B": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)\u00a0",
        "C": "StartVelToPos(numCommands, pTriggerPosCommand)\u00a0",
        "D": "StartTrqToPosition(numCommands, initialPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 134,
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands.",
        "A": "StartTrqToMov(numCommands, pTriggerPosCommand)\u00a0",
        "B": "SetAxisUnit(axis, unit)\u00a0",
        "C": "StartMov(numCommands, pPosCommand)\u00a0",
        "D": "InitializeMovementFromPosition(numCommands, initialTriggerPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 135,
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.",
        "A": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "StartVel_MaxTrq(pVelCommand, maxTrqLimit)\u00a0",
        "C": "StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "SetPositionAndTriggerEvents(positionValue, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 136,
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.",
        "A": "StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "B": "StopTrq(axis)\u00a0",
        "C": "StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "DetectMovementandTriggerEvents(pNewPosition, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 137,
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.",
        "A": "StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "StartMovToJog(numCommands, pPosToJogCommand)\u00a0",
        "C": "StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "StartTrqToPoint_TriggerEvents(numInputs, pPointInput, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 138,
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.",
        "A": "StartTrqToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "B": "Cancel(axis)\u00a0",
        "C": "StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "StartTorqueToMovement_TriggerEvents(numCommands, positionCommands, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 139,
        "Instruction": "Start a jog command.",
        "A": "StartJog(pJogCommand)\u00a0",
        "B": "GetHomeParam(axis)\u00a0",
        "C": "StartJog(numCommands, pJogCommand)\u00a0",
        "D": "BeginRunning(pRunningCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 140,
        "Instruction": "Start a timed jog command.",
        "A": "StartJog_TimedJog(pTimedJogCommand)\u00a0",
        "B": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "C": "StartVel_TimedVel(pTimedVelCommand)\u00a0",
        "D": "StartJog_TimedJog_v2(pTimedJogCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 141,
        "Instruction": "Start jog commands for multiple axes.",
        "A": "StartJog(numCommands, pJogCommand)\u00a0",
        "B": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "C": "StartMovToJog(numCommands, pPosToJogCommand)\u00a0",
        "D": "BeginJog(numCommands, jogSettings)",
        "Answer(s)": "A"
    },
    {
        "No": 142,
        "Instruction": "Start timed jog commands for multiple axes.",
        "A": "StartJog_TimedJog(numCommands, pTimedJogCommand)\u00a0",
        "B": "Pause_AxisSel(pAxisSelection)\u00a0",
        "C": "StartPosToJog_Trigger(numCommands, pTriggerJogCommand)\u00a0",
        "D": "StartTimedJog(numCommands, timedJogCommandList)",
        "Answer(s)": "A"
    },
    {
        "No": 143,
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command.",
        "A": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "B": "StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "StartTrqToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "D": "SendStartPosToJogTrigger(pJogStartPosCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 144,
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.",
        "A": "StartPosToJog_Trigger(numCommands, pTriggerJogCommand)\u00a0",
        "B": "Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)\u00a0",
        "C": "StartPos_Trigger(numCommands, pPosCommand)\u00a0",
        "D": "StartJog_Trigger(numCommands, pJogTriggerCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 145,
        "Instruction": "Start triggered jog commands for multiple axes that are currently executing position commands.",
        "A": "StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)\u00a0",
        "B": "SetNegativeTrqLimit(axis, torque)\u00a0",
        "C": "StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)\u00a0",
        "D": "InitiateJogWithTriggers(pJogCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 146,
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.",
        "A": "StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)\u00a0",
        "B": "ResolveSync(slaveAxis)\u00a0",
        "C": "StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "StartPosToJog_TriggerEvents(numJogCommands, pJogCommands, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 147,
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied.",
        "A": "StartPosToJog_PosToJog(pPosToJogCommand)\u00a0",
        "B": "StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)\u00a0",
        "C": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "D": "PosToJog_StartPosToJog(pPosToJogCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 148,
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied.",
        "A": "StartPosToJog_PosToJog(numCommands, pPosToJogCommand)\u00a0",
        "B": "SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "C": "StartPosToJog_Trigger(numCommands, pTriggerJogCommand)\u00a0",
        "D": "StartPosToJog_PosToJogCommands(numCommands, pPosToJogCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 149,
        "Instruction": "Start a relative position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied.",
        "A": "StartMovToJog(pPosToJogCommand)\u00a0",
        "B": "StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "C": "StartMov_Trigger(pPosCommand)\u00a0",
        "D": "MoveToJogStartPosition(pStartPositionToJog)",
        "Answer(s)": "A"
    },
    {
        "No": 150,
        "Instruction": "Start a relative position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied.",
        "A": "StartMovToJog(numCommands, pPosToJogCommand)\u00a0",
        "B": "SyncToJog(slaveAxis)\u00a0",
        "C": "StartJog(numCommands, pJogCommand)\u00a0",
        "D": "StartMovementToJog(numCommands, initialPositionToJogFrom)",
        "Answer(s)": "A"
    },
    {
        "No": 151,
        "Instruction": "Stop the motion of an axis.",
        "A": "Stop(axis)\u00a0",
        "B": "SetParam_Axis(axis, pParam)\u00a0",
        "C": "StartHome(axis)\u00a0",
        "D": "StopEngine(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 152,
        "Instruction": "Stop the motion of multiple axes.",
        "A": "Stop_AxisSel(pAxisSelection)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "StartHome_AxisSel(pAxisSelection)\u00a0",
        "D": "Stop_AxisSelection(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 153,
        "Instruction": "Stop the motion of an axis using the specified deceleration and a trapezoidal profile.",
        "A": "Stop_Dec(axis, dec)\u00a0",
        "B": "StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "C": "SetHomeDone(axis, value)\u00a0",
        "D": "Stop_Deceleration(axis, dec)",
        "Answer(s)": "A"
    },
    {
        "No": 154,
        "Instruction": "Stop the motion of multiple axes using the specified decelerations and trapezoidal profiles.",
        "A": "Stop_StopCommand(numCommands, pStopCommand)\u00a0",
        "B": "StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "C": "StartMovToJog(numCommands, pPosToJogCommand)\u00a0",
        "D": "StopCommand(numCommands, stopCommandParameters)",
        "Answer(s)": "A"
    },
    {
        "No": 155,
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration.",
        "A": "ExecQuickStop(axis)\u00a0",
        "B": "Stop_AxisSel(pAxisSelection)\u00a0",
        "C": "Stop(axis)\u00a0",
        "D": "ExecQuickStopCommand(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 156,
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration.",
        "A": "ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "B": "StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "ExecuteQuickStop_AxisSelection(axisSelection)",
        "Answer(s)": "A"
    },
    {
        "No": 157,
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile.",
        "A": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "B": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "C": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "D": "ExecuteWithTimeout(axis, timeoutMillis)",
        "Answer(s)": "A"
    },
    {
        "No": 158,
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile",
        "A": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "B": "GetPVTBytesPerPoint(pBytes)\u00a0",
        "C": "ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "D": "ExecTimedOperation_AxisSelection(pSelectedAxis, nTimeMs)",
        "Answer(s)": "A"
    },
    {
        "No": 159,
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile.",
        "A": "ExecTimedStop_TimeCmd(numCommands, pTimeCommand)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartVel_TimedVel(numCommands, pTimedVelCommand)\u00a0",
        "D": "ExecuteWithTimeout(numCommands, commandExecutionTime)",
        "Answer(s)": "A"
    },
    {
        "No": 160,
        "Instruction": "Add a wait command to an API buffer.",
        "A": "Wait(axis)\u00a0",
        "B": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "C": "GetAxisUnit(axis)\u00a0",
        "D": "Await(axis_to_wait)",
        "Answer(s)": "A"
    },
    {
        "No": 161,
        "Instruction": "Add a wait command to an API buffer.",
        "A": "Wait_AxisSel(pAxisSelection)\u00a0",
        "B": "SetVelocityFeedforwardGain(axis, gain)\u00a0",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "Wait_ForAxisSelection(pAxisSelection)",
        "Answer(s)": "A"
    },
    {
        "No": 162,
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true.",
        "A": "Wait_WaitCondition(pWaitCondition)\u00a0",
        "B": "Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "C": "WaitForDeviceWaitEvent(waitTime, errCode)",
        "D": "Wait_ForCondition(pWaitCondition)",
        "Answer(s)": "A"
    },
    {
        "No": 163,
        "Instruction": "Start a blocking wait command, returning only when the axis becomes idle or the wait time elapses.",
        "A": "Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "B": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "Wait_TimeMs(axis, delayMs)",
        "Answer(s)": "A"
    },
    {
        "No": 164,
        "Instruction": "Start a blocking wait command, returning only when the axes become idle.",
        "A": "Wait_AxisSel_TimeMilli(pAxisSelection, waitTimeMilliseconds)\u00a0",
        "B": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "Wait_For_Axis_Selection_Time_in_Milliseconds(AXS_Selection, time_in_ms)",
        "Answer(s)": "A"
    },
    {
        "No": 165,
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true.",
        "A": "Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)\u00a0",
        "B": "StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "WaitForConditionTimeout(pConditionToWaitFor, timeoutMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 166,
        "Instruction": "Pause the execution of a position command or interpolation command.",
        "A": "Pause(axis)\u00a0",
        "B": "StartPT(pPTCommand)\u00a0",
        "C": "Execute(axis)",
        "D": "PauseAxis(axis_to_pause)",
        "Answer(s)": "A"
    },
    {
        "No": 167,
        "Instruction": "Pause the execution of a position command or interpolation command for multiple axes.",
        "A": "Pause_AxisSel(pAxisSelection)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "Wait_AxisSel(pAxisSelection)\u00a0",
        "D": "Pause_AxisSel(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 168,
        "Instruction": "Resume the execution of a paused position command or interpolation command.",
        "A": "Resume(axis)\u00a0",
        "B": "GetGearRatio(axis)\u00a0",
        "C": "Execute(axis)",
        "D": "ResumeProcessingOnAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 169,
        "Instruction": "Resume the execution of a paused position command or interpolation command for multiple axes.",
        "A": "Resume_AxisSel(pAxisSelection)\u00a0",
        "B": "StopSuperimpose_AxisSel(pAxisSelection)\u00a0",
        "C": "Execute_AxisSel(pAxisSelection)",
        "D": "Resume_AxisSelection(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 170,
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as an absolute position",
        "A": "OverridePos(pPosCommand)\u00a0",
        "B": "SetSingleTurn(axis, enable. encoderCount)\u00a0",
        "C": "OverrideVel(pPosCommand)\u00a0",
        "D": "OverridePosition(pPosInput)",
        "Answer(s)": "A"
    },
    {
        "No": 171,
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as a relative position.",
        "A": "OverrideMov(pPosCommand)\u00a0",
        "B": "ExecEStop(level)\u00a0",
        "C": "OverrideVel(pPosCommand)\u00a0",
        "D": "OverrideMovCommand(pPosCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 172,
        "Instruction": "Override the velocity of an axis currently executing a position, jog, or velocity command.",
        "A": "OverrideVel(pPosCommand)\u00a0",
        "B": "StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "C": "OverridePos(pPosCommand)\u00a0",
        "D": "UpdateVel(pPosCommand):",
        "Answer(s)": "A"
    },
    {
        "No": 173,
        "Instruction": "Override the acceleration of an axis currently executing a position, jog, or velocity command",
        "A": "OverrideAcc(pPosCommand)\u00a0",
        "B": "StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "OverrideMov(pPosCommand)\u00a0",
        "D": "OverrideAccessPointCommand(pAccessPointCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 174,
        "Instruction": "Override the deceleration of an axis currently executing a position, jog, or velocity command.",
        "A": "OverrideDec(pPosCommand)\u00a0",
        "B": "GetAxisParam_Axis(axis)\u00a0",
        "C": "OverrideVel(pPosCommand)\u00a0",
        "D": "UpdateDec(pUpdatedCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 175,
        "Instruction": "Override the acceleration jerk of an axis currently executing a position, jog, or velocity command.",
        "A": "OverrideJerkAcc(pPosCommand)\u00a0",
        "B": "StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "C": "OverrideVel(pPosCommand)\u00a0",
        "D": "AdjustJerkAcceleration(pTargetPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 176,
        "Instruction": "Override the deceleration jerk of an axis currently executing a position, jog, or velocity command.",
        "A": "OverrideJerkDec(pPosCommand)\u00a0",
        "B": "StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "C": "OverrideDec(pPosCommand)\u00a0",
        "D": "OverrideJerkDec(pPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 177,
        "Instruction": "Override the entire profile of an axis currently executing a position, jog, or velocity command.",
        "A": "OverrideProfile(pPosCommand)\u00a0",
        "B": "OverrideMov(pPosCommand)\u00a0",
        "C": "OverrideJerkDec(pPosCommand)\u00a0",
        "D": "UpdateUserProfile(userProfileData)",
        "Answer(s)": "A"
    },
    {
        "No": 178,
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as absolute positions.",
        "A": "OverridePos(numCommands, pPosCommand)\u00a0",
        "B": "Continue(axis)\u00a0",
        "C": "OverrideVel(numCommands, pPosCommand)\u00a0",
        "D": "OverridePosition(numCommands, newPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 179,
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as relative positions.",
        "A": "OverrideMov(numCommands, pPosCommand)\u00a0",
        "B": "StartPosToJog_PosToJog(numCommands, pPosToJogCommand)\u00a0",
        "C": "OverridePos(numCommands, pPosCommand)\u00a0",
        "D": "ModifyMove(numCommands, newPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 180,
        "Instruction": "Override the velocities of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideVel(numCommands, pPosCommand)\u00a0",
        "B": "SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "C": "OverrideMov(numCommands, pPosCommand)\u00a0",
        "D": "UpdateVel(numOfCommands, pPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 181,
        "Instruction": "Override the accelerations of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideAcc(numCommands, pPosCommand)\u00a0",
        "B": "StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)\u00a0",
        "C": "OverrideMov(numCommands, pPosCommand)\u00a0",
        "D": "OverrideAccumulator(numCommands, positionAtIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 182,
        "Instruction": "Override the decelerations of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideDec(numCommands, pPosCommand)\u00a0",
        "B": "Stop_StopCommand(numCommands, pStopCommand)\u00a0",
        "C": "OverrideVel(numCommands, pPosCommand)\u00a0",
        "D": "OverrideDecr(numCommands, firstPositiveCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 183,
        "Instruction": "Override the acceleration jerks of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideJerkAcc(numCommands, pPosCommand)\u00a0",
        "B": "StopJogAtPos(pPosCommand)\u00a0",
        "C": "OverridePos(numCommands, pPosCommand)\u00a0",
        "D": "updateJerkAcceleration(numUpdates, newJerkValues):",
        "Answer(s)": "A"
    },
    {
        "No": 184,
        "Instruction": "Override the deceleration jerks of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideJerkDec(numCommands, pPosCommand)\u00a0",
        "B": "ClearAmpAlarm(axis)\u00a0",
        "C": "OverridePos(numCommands, pPosCommand)\u00a0",
        "D": "UpdateJerkDec(numCommands, pPosCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 185,
        "Instruction": "Override the entire profiles of multiple axes currently executing position, jog, or velocity commands.",
        "A": "OverrideProfile(numCommands, pPosCommand)\u00a0",
        "B": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)\u00a0",
        "C": "OverrideJerkDec(numCommands, pPosCommand)\u00a0",
        "D": "OverrideProfile(numCommands, positionToOverride)",
        "Answer(s)": "A"
    },
    {
        "No": 186,
        "Instruction": "Stop an axis executing a jog command at a timing that will cause the axis to stop at exactly the specified position.",
        "A": "StopJogAtPos(pPosCommand)\u00a0",
        "B": "ClearAxisAlarm_AxisSel(axisSel)\u00a0",
        "C": "StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "D": "PauseRunningAtPosition(pPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 187,
        "Instruction": "Stop multiple axes executing jog commands at timing that wil cause the axes to stop at exactly the specified positions.",
        "A": "StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "B": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "C": "StartPos_Trigger(numCommands, pPosCommand)\u00a0",
        "D": "StopJogAtPosition(numCommands, targetPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 188,
        "Instruction": "Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing.",
        "A": "SuperimposeMov(pPosCommand)\u00a0",
        "B": "EnableSyncGroup(groupId, enable)\u00a0",
        "C": "SuperimposeMov(numCommands, pPosCommand)\u00a0",
        "D": "SuperimposeMovWithOffset(pPosCommand, offset)",
        "Answer(s)": "A"
    },
    {
        "No": 189,
        "Instruction": "Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing.",
        "A": "SuperimposeMov(numCommands, pPosCommand)\u00a0",
        "B": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "C": "OverrideMov(numCommands, pPosCommand)\u00a0",
        "D": "SuperimposeMovement(numCommands, playerPositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 190,
        "Instruction": "Stop a superimposed motion.",
        "A": "StopSuperimpose(axis)\u00a0",
        "B": "GetParam()\u00a0",
        "C": "Stop(axis)\u00a0",
        "D": "StopSuperimposeOnAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 191,
        "Instruction": "Stop the superimposed motion of multiple axes.",
        "A": "StopSuperimpose_AxisSel(pAxisSelection)\u00a0",
        "B": "StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "StopSuperimpose_AxisSel(virtualAxisSelection)",
        "Answer(s)": "A"
    },
    {
        "No": 192,
        "Instruction": "Simulate a position command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the position command are returned.",
        "A": "SimulatePos(pSimulatePosCommand)\u00a0",
        "B": "Stop(axis)\u00a0",
        "C": "StopJogAtPos(pPosCommand)\u00a0",
        "D": "SimulatePosition(pSimulatePositionCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 193,
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the linear interpolation motion command are returned.",
        "A": "SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)\u00a0",
        "D": "SimulateLinearInterpolatedPosition(simulationCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 194,
        "Instruction": "Simulate a position command without moving any axes. The position and velocity of the axis after the motion command runs for the specified time are returned.",
        "A": "SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)\u00a0",
        "B": "Stop_Dec(axis, dec)\u00a0",
        "C": "SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)\u00a0",
        "D": "SimulatePosAtTimeExtended(pExtendedSimulatePosCommand, int extendedReturnType, double newTimeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 195,
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move distance, remain distance, and total distance after the linear interpolation runs for a specified amount of time are returned.",
        "A": "SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)\u00a0",
        "B": "GetParam()\u00a0",
        "C": "SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "D": "SimulatePositionAtTime_LinearInterpolation(pLinearInterpolationSimulationCommand, timeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 196,
        "Instruction": "Simulate a position command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned.",
        "A": "SimulateTimeAtPos(pSimulatePosCommand, specificPos)\u00a0",
        "B": "SetCommandPos(axis, position)\u00a0",
        "C": "SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "D": "SimulateTimeAtSpecificPos(specificPos)",
        "Answer(s)": "A"
    },
    {
        "No": 197,
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move time, remain time, and total time after the linear interpolation runs for a specified distance are returned.",
        "A": "SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)\u00a0",
        "B": "AddRelativeSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "C": "SimulateTimeAtDist(pPathIntplCommand, specificDistance)\u00a0",
        "D": "SimulateTimeAtDistance_LinearInterpolation(pLinearInterpolationSimulationCommand, distance)",
        "Answer(s)": "A"
    },
    {
        "No": 198,
        "Instruction": "Allocate buffer memory to an axis for the execution of PVT motion commands.",
        "A": "CreatePVTBuffer(axis, points)\u00a0",
        "B": "SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "C": "FreePVTBuffer(axis)\u00a0",
        "D": "CalculatePVTProfile(axis, points):",
        "Answer(s)": "A"
    },
    {
        "No": 199,
        "Instruction": "Free PVT buffer memory for an axis.",
        "A": "FreePVTBuffer(axis)\u00a0",
        "B": "StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "FreePathIntplBuffer(axis)\u00a0",
        "D": "FreePrivateBuffer(device)",
        "Answer(s)": "A"
    },
    {
        "No": 200,
        "Instruction": "Get the amount of PVT buffer memory currently allocated to an axis.",
        "A": "GetPVTBufferPoints(axis, pPoints)\u00a0",
        "B": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)\u00a0",
        "C": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "D": "FetchPVTBufferPoints(axis, pPoints)",
        "Answer(s)": "A"
    },
    {
        "No": 201,
        "Instruction": "Get the number of bytes required per point data in the PVT buffer memory.",
        "A": "GetPVTBytesPerPoint(pBytes)\u00a0",
        "B": "StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)\u00a0",
        "C": "GetPathIntplLookaheadBytesPerPoint()\u00a0",
        "D": "GetPVTBytesPerPoint(pvtBytes)",
        "Answer(s)": "A"
    },
    {
        "No": 202,
        "Instruction": "Start executing a PVT motion command.",
        "A": "StartPVT(AdvMotion_PVTCommand pPVTCommand)\u00a0",
        "B": "SetFeedbackParam(axis, pParam)\u00a0",
        "C": "StartTrq(numCommands, pTrqCommand)\u00a0",
        "D": "UpdatePVT(AdvancedMotion_Command pCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 203,
        "Instruction": "Start executing a PVT interpolation motion command.",
        "A": "StartPVT_Intpl(pPVTCommand)\u00a0",
        "B": "Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "C": "StartVT(pVTCommand)\u00a0",
        "D": "StartPVT_Interpolation(pPVTCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 204,
        "Instruction": "Start executing a PT motion command.",
        "A": "StartPT(pPTCommand)\u00a0",
        "B": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "C": "StartAT(pATCommand)\u00a0",
        "D": "StartPTCommand(pPTCommand: PTCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 205,
        "Instruction": "Start executing a VT motion command.",
        "A": "StartVT(pVTCommand)\u00a0",
        "B": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "C": "StartAT(pATCommand)\u00a0",
        "D": "StartVTCommand(pVTCommand, configuration)",
        "Answer(s)": "A"
    },
    {
        "No": 206,
        "Instruction": "Start executing a AT motion command.",
        "A": "StartAT(pATCommand)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartMov(pPosCommand)\u00a0",
        "D": "StartATCommand(pATCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 207,
        "Instruction": "Start executing a PVT motion command.",
        "A": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)\u00a0",
        "B": "GetAxisUnit(axis)\u00a0",
        "C": "StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPVTExecution(pInitialCommand, numAdditionalCommands, pAdditionalCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 208,
        "Instruction": "Start executing a PVT interpolation motion command.",
        "A": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "B": "SetMaxTrqLimit(axis, torque)\u00a0",
        "C": "StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPVT_Interpolate(pPVTCommand, numAdditionalCommands, PyObject *pPVTAdditionalCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 209,
        "Instruction": "Start executing a PT motion command.",
        "A": "StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)\u00a0",
        "B": "StartLinearIntplPos(pLinearIntplCommand)\u00a0",
        "C": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)\u00a0",
        "D": "StartPTWithAdditionalCommands(pPTCommand, numAdditionalCommands, pPTAdditionalCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 210,
        "Instruction": "Start executing a VT motion command.",
        "A": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)\u00a0",
        "B": "StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)\u00a0",
        "D": "StartVirtualTerminal(pVTCommand, numAdditionalCommands, pVTAdditionalCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 211,
        "Instruction": "Start executing a AT motion command.",
        "A": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)\u00a0",
        "B": "StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "C": "StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartATCommand(pATCommand, numAdditionalCommands, pATAddlCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 212,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "Stop_StopCommand(numCommands, pStopCommand)\u00a0",
        "C": "GetMByteEx(addr)\u00a0",
        "D": "CheckDeviceValidity()",
        "Answer(s)": "A"
    },
    {
        "No": 213,
        "Instruction": "Start homing an axis. The axis will search for the home position. If found, the home position will become the zero position for that axis.",
        "A": "StartHome(axis)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "GetHomeParam(axis)\u00a0",
        "D": "InitializeHome(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 214,
        "Instruction": "Start homing multiple axes. The axes will search for the home positions. If found, the home position will become the zero position for that axis",
        "A": "StartHome_AxisSel(pAxisSelection)\u00a0",
        "B": "GetVelCommand(axis)\u00a0",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "StartHome_AxisSelect(pAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 215,
        "Instruction": "Continue homing an axis that has been paused during the homing operation.",
        "A": "Continue(axis)\u00a0",
        "B": "StartTrq(pTrqCommand)\u00a0",
        "C": "Resume(axis)\u00a0",
        "D": "ContinueAxis(axis):",
        "Answer(s)": "A"
    },
    {
        "No": 216,
        "Instruction": "Continue homing multiple axes that have been paused during the homing operation.",
        "A": "Continue_AxisSel(pAxisSelection)\u00a0",
        "B": "SetSyncMasterSlave(masterAxis, slaveAxis)",
        "C": "Pause_AxisSel(pAxisSelection)\u00a0",
        "D": "Revise_AxisSelParams(pAxisSelection)",
        "Answer(s)": "A"
    },
    {
        "No": 217,
        "Instruction": "Cancel the homing operation for an axis that has been paused during homing operation.",
        "A": "Cancel(axis)\u00a0",
        "B": "StartMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "Wait(axis)\u00a0",
        "D": "Stop(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 218,
        "Instruction": "Cancel the homing procedure for multiple axes that have been paused during homing operation",
        "A": "Cancel_AxisSel(pAxisSelection)\u00a0",
        "B": "StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)\u00a0",
        "C": "Wait_AxisSel(pAxisSelection)\u00a0",
        "D": "Update_AxisSelection(pUpdatedSelection)",
        "Answer(s)": "A"
    },
    {
        "No": 219,
        "Instruction": "Set the current command position of the axis to the specified value.",
        "A": "SetCommandPos(axis, position)\u00a0",
        "B": "StartMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "GetVelCommand(axis)\u00a0",
        "D": "UpdateCommandLocation(axis, new_position)",
        "Answer(s)": "A"
    },
    {
        "No": 220,
        "Instruction": "Set the current feedback position of the axis to the specified value.",
        "A": "SetFeedbackPos(axis, position)\u00a0",
        "B": "StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "C": "SetFeedbackParam(axis, pParam)\u00a0",
        "D": "SetFeedbackPosition(axis, newPosition)",
        "Answer(s)": "A"
    },
    {
        "No": 221,
        "Instruction": "Set the home done state.",
        "A": "SetHomeDone(axis, value)\u00a0",
        "B": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "C": "SetAxisCommandMode(axis, mode)\u00a0",
        "D": "SetHomeDoneV2(axis_number, is_complete)",
        "Answer(s)": "A"
    },
    {
        "No": 222,
        "Instruction": "Set the current cyclic command position equal to the feedback position.",
        "A": "SetCommandPosToFeedbackPos(axis)",
        "B": "StartVel(pVelCommand)\u00a0",
        "C": "SetCommandPos(axis, position)\u00a0",
        "D": "SetCommandPositionToFeedbackPosition(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 223,
        "Instruction": "Get the homing related data for all axes.",
        "A": "GetHomeData()\u00a0",
        "B": "GetSyncParam(axis)\u00a0",
        "C": "GetModuleId()\u00a0",
        "D": "GetUserData()",
        "Answer(s)": "A"
    },
    {
        "No": 224,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartJog(pJogCommand)\u00a0",
        "C": "ClearSyncGroupError(groupId)\u00a0",
        "D": "isDeviceValid(device: Device)",
        "Answer(s)": "A"
    },
    {
        "No": 225,
        "Instruction": "Establish synchronous control between a master axis and a slave axis.",
        "A": "SetSyncMasterSlave(masterAxis, slaveAxis)",
        "B": "SetFeedbackParam(axis, pParam)\u00a0",
        "C": "SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)\u00a0",
        "D": "SetSynchronizationMasterSlave(masterAxis, slaveAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 226,
        "Instruction": "Combine the position commands of two master axes and set it as the position command of a slave axis.",
        "A": "SetSyncCombine(masterAxis1, masterAxis2, slaveAxis)",
        "B": "StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "D": "SetSyncCombineWithDelay(masterAxis1, masterAxis2, slaveAxis, delayTime)",
        "Answer(s)": "A"
    },
    {
        "No": 227,
        "Instruction": "Set the absolute sync phase of a slave axis.",
        "A": "SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "B": "ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "C": "SyncToJog(slaveAxis, pProfile)\u00a0",
        "D": "SetSyncPhaseAbsolute(slaveAxis, phase, profileParams)",
        "Answer(s)": "A"
    },
    {
        "No": 228,
        "Instruction": "Add a relative sync phase to a slave axis.",
        "A": "AddRelativeSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "B": "SetSyncGroup(groupId, pSyncGroup)\u00a0",
        "C": "SetSyncGearRatio(slaveAxis, gearRatio, pProfile)\u00a0",
        "D": "UpdateRelativeSyncPhase(slaveAxis, newPhase, pProfile)",
        "Answer(s)": "A"
    },
    {
        "No": 229,
        "Instruction": "Set the sync gear ratio between a sync slave axis and the master axis.",
        "A": "SetSyncGearRatio(slaveAxis, gearRatio, pProfile)\u00a0",
        "B": "SetMaxTrqLimit(axis, torque)\u00a0",
        "C": "SyncToJog(slaveAxis, pProfile)\u00a0",
        "D": "SetSyncGearRatioV2(slaveAxis, updatedGearRatio, motionProfile)",
        "Answer(s)": "A"
    },
    {
        "No": 230,
        "Instruction": "Establish sync control between two axes, and set the sync gear ratio between a sync slave axis and the master axis.",
        "A": "SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)\u00a0",
        "B": "Export_SysPrm(pPath, pParam)\u00a0",
        "C": "SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "D": "SetSyncGearRatioWithProfile(masterAxis, slaveAxis, gearRatio, pProfile)",
        "Answer(s)": "A"
    },
    {
        "No": 231,
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis.",
        "A": "SyncToJog(slaveAxis, pProfile)\u00a0",
        "B": "SetEmergencyStopParam(pParam)\u00a0",
        "C": "AddRelativeSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "D": "SyncToJog(slaveAxisID, jogProfile)",
        "Answer(s)": "A"
    },
    {
        "No": 232,
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis with the velocity equal to the velocity that the slave axis was moving at",
        "A": "SyncToJog(slaveAxis)\u00a0",
        "B": "StartVelToPos(pTriggerPosCommand)\u00a0",
        "C": "StopTrq(axis)\u00a0",
        "D": "SyncToJogController(joggingAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 233,
        "Instruction": "Release the specified slave axis from synchronous control.",
        "A": "ResolveSync(slaveAxis)\u00a0",
        "B": "RemoveAxisFromSyncGroup(groupId, axis)\u00a0",
        "C": "Resume(axis)\u00a0",
        "D": "ResolveSlaveAxisSync(slaveAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 234,
        "Instruction": "Set the axes and parameters of a synchronization group.",
        "A": "SetSyncGroup(groupId, pSyncGroup)\u00a0",
        "B": "OverrideMov(pPosCommand)\u00a0",
        "C": "GetSyncGroupStatus(groupId)\u00a0",
        "D": "SetSyncGroupById(groupId, syncGroupId)",
        "Answer(s)": "A"
    },
    {
        "No": 235,
        "Instruction": "Get the axes and parameters of a sync group.",
        "A": "GetSyncGroup(groupId)\u00a0",
        "B": "StopTrq_AxisSel(pAxisSelection)\u00a0",
        "C": "GetSyncGroupStatus(groupId)\u00a0",
        "D": "GetSyncGroupInfo(GroupID)",
        "Answer(s)": "A"
    },
    {
        "No": 236,
        "Instruction": "Add another axis to an existing sync group.",
        "A": "AddAxisToSyncGroup(groupId, axis, isMaster)\u00a0",
        "B": "OverrideJerkAcc(pPosCommand)\u00a0",
        "C": "SetSyncGroup(groupId, pSyncGroup)\u00a0",
        "D": "AddAxisToSyncGroupV2(groupId, axis, isMaster)",
        "Answer(s)": "A"
    },
    {
        "No": 237,
        "Instruction": "Remove an axis from an existing sync group.",
        "A": "RemoveAxisFromSyncGroup(groupId, axis)\u00a0",
        "B": "Pause_AxisSel(pAxisSelection)\u00a0",
        "C": "ClearSyncGroupError(groupId)\u00a0",
        "D": "ChangeAxisInSyncGroup(groupId, currentAxis, newAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 238,
        "Instruction": "Enable or disable a sync group.",
        "A": "EnableSyncGroup(groupId, enable)\u00a0",
        "B": "SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "C": "GetSyncGroup(groupId)\u00a0",
        "D": "EnableGroupSync(groupId, isEnabled)",
        "Answer(s)": "A"
    },
    {
        "No": 239,
        "Instruction": "Read the current status of the specified sync group.",
        "A": "GetSyncGroupStatus(groupId)\u00a0",
        "B": "SetServoOn(axis, newStatus)\u00a0",
        "C": "RemoveAxisFromSyncGroup(groupId, axis)\u00a0",
        "D": "GetSyncGroupInfo(groupID)",
        "Answer(s)": "A"
    },
    {
        "No": 240,
        "Instruction": "Clear all sync group errors of the specified sync group.",
        "A": "ClearSyncGroupError(groupId)\u00a0",
        "B": "Stop(axis)\u00a0",
        "C": "GetSyncGroupStatus(groupId)\u00a0",
        "D": "UpdateSyncGroupError(groupId)",
        "Answer(s)": "A"
    },
    {
        "No": 241,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetHomeData()\u00a0",
        "C": "CompareWindowsUpdates()\u00a0",
        "D": "IsDeviceValid(device_id: str)",
        "Answer(s)": "A"
    },
    {
        "No": 242,
        "Instruction": "Turn a servo drive in the servo network on or off.",
        "A": "SetServoOn(axis, newStatus)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "C": "GetEngineStatus()\u00a0",
        "D": "SetAxisServoStatus(axisNumber, isEnabled)",
        "Answer(s)": "A"
    },
    {
        "No": 243,
        "Instruction": "Turn multiple servo drives in the servo network on or off.",
        "A": "SetServoOn_AxisSel(axisSel, newStatus)\u00a0",
        "B": "StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "StopTrq_AxisSel(pAxisSelection)\u00a0",
        "D": "SetServoStatus(axisSelection, isEnabled)",
        "Answer(s)": "A"
    },
    {
        "No": 244,
        "Instruction": "Clear the servo drive amp alarm on the specified axis.",
        "A": "ClearAmpAlarm(axis)\u00a0",
        "B": "SetAxisUnit(axis, unit)\u00a0",
        "C": "GetAlarmParam(axis)\u00a0",
        "D": "ClearAmpAlarm(axis, alarm_id)",
        "Answer(s)": "A"
    },
    {
        "No": 245,
        "Instruction": "Clear the servo drive amp alarms on multiple axes.",
        "A": "ClearAmpAlarm_AxisSel(axisSel)\u00a0",
        "B": "AddAxisToSyncGroup(groupId, axis, isMaster)\u00a0",
        "C": "GetParam_Axis(axis)\u00a0",
        "D": "ClearAmpAlarm_Axis(axisNum)",
        "Answer(s)": "A"
    },
    {
        "No": 246,
        "Instruction": "Clear any axis alarms on the specified axis.",
        "A": "ClearAxisAlarm(axis)\u00a0",
        "B": "Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "C": "GetParam_Axis(axis)\u00a0",
        "D": "ResetAxisAlarm(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 247,
        "Instruction": "Clear any axis alarms on multiple axes.",
        "A": "ClearAxisAlarm_AxisSel(axisSel)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "C": "GetAxisParam_Axis(axis)\u00a0",
        "D": "ResetAxisAlarm_SelectedAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 248,
        "Instruction": "Set the command mode of the axis.",
        "A": "SetAxisCommandMode(axis, mode)\u00a0",
        "B": "GetPVTBufferPoints(axis, pPoints)\u00a0",
        "C": "AddCommand(axis, pCmd)\u00a0",
        "D": "SetAxisControlMode(axis, control_mode)",
        "Answer(s)": "A"
    },
    {
        "No": 249,
        "Instruction": "Set the command mode of multiple axes.",
        "A": "SetAxisCommandMode_AxisSel(axisSel, mode)\u00a0",
        "B": "Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "C": "AddCommand_AxisSel(pAxisSelection, pCmds)\u00a0",
        "D": "SetAxisCommandMode_SelectedAxis(axis, commandMode)",
        "Answer(s)": "A"
    },
    {
        "No": 250,
        "Instruction": "Get the command mode of the axis.",
        "A": "GetAxisCommandMode(axis)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "GetPosCommand(axis)\u00a0",
        "D": "GetAxisState(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 251,
        "Instruction": "Get the current cycle position command of the axis.",
        "A": "GetPosCommand(axis)\u00a0",
        "B": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "SetAxisCommandMode(axis, mode)\u00a0",
        "D": "GetPositionCommand(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 252,
        "Instruction": "Get the current cycle position feedback of the axis.",
        "A": "GetPosFeedback(axis)\u00a0",
        "B": "StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "C": "GetPosCommand(axis)\u00a0",
        "D": "GetAxisPosFeedback(axis_name)",
        "Answer(s)": "A"
    },
    {
        "No": 253,
        "Instruction": "Get the current cycle velocity command of the axis",
        "A": "GetVelCommand(axis)\u00a0",
        "B": "SyncToJog(slaveAxis, pProfile)\u00a0",
        "C": "AddCommand(axis, pCmd)\u00a0",
        "D": "GetVelocityCommand(axis):",
        "Answer(s)": "A"
    },
    {
        "No": 254,
        "Instruction": "Get the current cycle velocity feedback of the axis",
        "A": "GetVelFeedback(axis)\u00a0",
        "B": "SetServoOn_AxisSel(axisSel, newStatus)\u00a0",
        "C": "GetPosFeedback(axis)\u00a0",
        "D": "GetAxisVelFeedback(axis_id)",
        "Answer(s)": "A"
    },
    {
        "No": 255,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetSingleTurn(axis)\u00a0",
        "C": "SetOutputData(moduleId, data, dataSize)\u00a0",
        "D": "IsDeviceConnectionValid()",
        "Answer(s)": "A"
    },
    {
        "No": 256,
        "Instruction": "Start a velocity command.",
        "A": "StartVel(pVelCommand)\u00a0",
        "B": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)\u00a0",
        "C": "StartPT(pPTCommand)\u00a0",
        "D": "InitiateVelocity(previousVelocity_command)",
        "Answer(s)": "A"
    },
    {
        "No": 257,
        "Instruction": "Start a timed velocity command.",
        "A": "StartVel_TimedVel(pTimedVelCommand)\u00a0",
        "B": "StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "StartTrqToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "D": "EndVel_TimedVel(pTimedVelCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 258,
        "Instruction": "Start a velocity command and set the maximum torque limit.",
        "A": "StartVel_MaxTrq(pVelCommand, maxTrqLimit)\u00a0",
        "B": "StopSuperimpose(axis)\u00a0",
        "C": "StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "D": "StartVelocity_MaxTorque(velocityCommand, maxTorqueLimit)",
        "Answer(s)": "A"
    },
    {
        "No": 259,
        "Instruction": "Start velocity commands for multiple axes.",
        "A": "StartVel(numCommands, pVelCommand)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartVel_TimedVel(numCommands, pTimedVelCommand)\u00a0",
        "D": "LaunchSequence(numEvents, launchCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 260,
        "Instruction": "Start timed velocity commands for multiple axes",
        "A": "StartVel_TimedVel(numCommands, pTimedVelCommand)\u00a0",
        "B": "SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)\u00a0",
        "C": "StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "D": "InitiateMotion(TotalCommands, arrayMotionCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 261,
        "Instruction": "Stop the motion of an axis.",
        "A": "Stop(axis)\u00a0",
        "B": "StartMovToJog(pPosToJogCommand)\u00a0",
        "C": "Stop_Dec(axis, dec)\u00a0",
        "D": "Halt(axis):",
        "Answer(s)": "A"
    },
    {
        "No": 262,
        "Instruction": "Stop the motion of multiple axes.",
        "A": "Stop_AxisSel(pAxisSelection)\u00a0",
        "B": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "C": "Wait_AxisSel(pAxisSelection)\u00a0",
        "D": "Stop_AxisSelection(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 263,
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration.",
        "A": "ExecQuickStop(axis)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "Stop(axis)\u00a0",
        "D": "StopAxisQuickly(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 264,
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration.",
        "A": "ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "B": "SyncToJog(slaveAxis)\u00a0",
        "C": "Execute_AxisSel(pAxisSelection)",
        "D": "ExecCriticalStop_AxisSel(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 265,
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile.",
        "A": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "B": "SetServoOn(axis, newStatus)\u00a0",
        "C": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "D": "ExecTimedStop_TimeLimit(axis, timeLimitMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 266,
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile",
        "A": "ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "B": "StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "ExecTimedStop_AxisSel(pSelectedAxis, durationMs)",
        "Answer(s)": "A"
    },
    {
        "No": 267,
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile.",
        "A": "ExecTimedStop_TimeCmd(numCommands, pTimeCommand)\u00a0",
        "B": "OverridePos(numCommands, pPosCommand)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "ExecTimedStop_CommandTime(numCommands, pTimeCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 268,
        "Instruction": "Set the maximum motor speed of an axis.",
        "A": "SetMaxMotorSpeed(axis, speed)\u00a0",
        "B": "GetFlightRecorderParam()\u00a0",
        "C": "StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)\u00a0",
        "D": "SetMotorLimit(axis, max_speed)",
        "Answer(s)": "A"
    },
    {
        "No": 269,
        "Instruction": "Get the maximum motor speed of an axis.",
        "A": "GetMaxMotorSpeed(axis)\u00a0",
        "B": "SetParam(pParam)\u00a0",
        "C": "GetMotionParam(axis)\u00a0",
        "D": "GetMaxMotorRPM(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 270,
        "Instruction": "Set an override velocity for a single axis that is currently executing a velocity command.",
        "A": "OverrideVel(pVelCommand)\u00a0",
        "B": "StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "C": "OverrideVel(pPosCommand)\u00a0",
        "D": "AdjustVelocity(pVelocityCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 271,
        "Instruction": "Set override velocities for multiple axes that are currently executing velocity commands.",
        "A": "OverrideVel(numCommands, pVelCommand)\u00a0",
        "B": "GetMaxTrqLimit(axis)\u00a0",
        "C": "OverrideVel(numCommands, pPosCommand)\u00a0",
        "D": "RevisedOverrideVel(numCommands, newVelCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 272,
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command.",
        "A": "StartPosToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "B": "SetHomeParam(axis, pParam)\u00a0",
        "C": "StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "D": "SetInitialPosition_And_TriggerVelocity(pTriggerVelocityCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 273,
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands.",
        "A": "StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "B": "ResetFlightRecorder()\u00a0",
        "C": "StartPosToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "D": "StartPosToVel_PulseVel(numCommands, pPulseVelCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 274,
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.",
        "A": "StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "B": "SetSyncParam(axis, pParam)\u00a0",
        "C": "StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "D": "StartPosToVel_TriggerEvents(pVelocityCommand, pEventTriggers)",
        "Answer(s)": "A"
    },
    {
        "No": 275,
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events",
        "A": "StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "B": "GetInputModuleId()\u00a0",
        "C": "StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "D": "UpdatePosToVel_TriggerEvents(numChanges, pUpdatedVelCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 276,
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.",
        "A": "StartTrqToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "B": "GetVelFeedback(axis)\u00a0",
        "C": "StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "D": "StartTrqToVel_CheckForTriggerVelCommand(triggerVelocity)",
        "Answer(s)": "A"
    },
    {
        "No": 277,
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.",
        "A": "StartTrqToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "B": "StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "C": "StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "D": "StartTrqToVel_TriggerVel(numTriggerVelCommands, pTriggerVelCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 278,
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.",
        "A": "StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "B": "StartPos_Trigger(pPosCommand)\u00a0",
        "C": "StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "UpdateTrqToVel_TriggerEvents(pVelSetpoint, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 279,
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.",
        "A": "StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "B": "GetAxisParam_Axis(axis)\u00a0",
        "C": "StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "D": "ModifyTrqToVel_TriggerEvents(numCommands, pVelCommands, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 280,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "C": "GetFlightRecorderParam()\u00a0",
        "D": "ValidateDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 281,
        "Instruction": "Set the maximum torque limit of an axis.",
        "A": "SetMaxTrqLimit(axis, torque)\u00a0",
        "B": "StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "C": "SetAxisUnit(axis, unit)\u00a0",
        "D": "SetMaximumTorqueLimit(axis, max_torque)",
        "Answer(s)": "A"
    },
    {
        "No": 282,
        "Instruction": "Get the maximum torque limit of an axis.",
        "A": "GetMaxTrqLimit(axis)\u00a0",
        "B": "StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "C": "GetNegativeTrqLimit(axis)\u00a0",
        "D": "GetMaxTorqueLimit(axis_id)",
        "Answer(s)": "A"
    },
    {
        "No": 283,
        "Instruction": "Set the maximum torque limit in the positive direction of an axis.",
        "A": "SetPositiveTrqLimit(axis, torque)\u00a0",
        "B": "SetGearRatio(axis, numerator, denominator)\u00a0",
        "C": "SetNegativeTrqLimit(axis, torque)\u00a0",
        "D": "SetMaxTorqueLimit(axis, max_torque)",
        "Answer(s)": "A"
    },
    {
        "No": 284,
        "Instruction": "Get the maximum torque limit in the positive direction of an axis.",
        "A": "GetPositiveTrqLimit(axis)\u00a0",
        "B": "Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)\u00a0",
        "C": "SetPositiveTrqLimit(axis, torque)\u00a0",
        "D": "GetMaxPositiveTorqueLimit(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 285,
        "Instruction": "Set the maximum torque limit in the negative direction of an axis.",
        "A": "SetNegativeTrqLimit(axis, torque)\u00a0",
        "B": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "C": "SetPositiveTrqLimit(axis, torque)\u00a0",
        "D": "SetNegativeTorqueLimit(axis, limit)",
        "Answer(s)": "A"
    },
    {
        "No": 286,
        "Instruction": "Get the maximum torque limit in the negative direction of an axis.",
        "A": "GetNegativeTrqLimit(axis)\u00a0",
        "B": "GetVelFeedback(axis)\u00a0",
        "C": "SetMaxTrqLimit(axis, torque)\u00a0",
        "D": "GetNegativeTorqueLimit(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 287,
        "Instruction": "Start a torque command.",
        "A": "StartTrq(pTrqCommand)\u00a0",
        "B": "SetAxisPolarity(axis, polarity)\u00a0",
        "C": "StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "D": "StartTorque(pCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 288,
        "Instruction": "Start torque commands for multiple axes.",
        "A": "StartTrq(numCommands, pTrqCommand)\u00a0",
        "B": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "C": "StartTrqToPos(numCommands, pTriggerPosCommand)\u00a0",
        "D": "ExecuteCommands(numCommands, commandsList)",
        "Answer(s)": "A"
    },
    {
        "No": 289,
        "Instruction": "Start a torque command and set the maximum motor speed.",
        "A": "StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)\u00a0",
        "B": "Stop(axis)\u00a0",
        "C": "StartVel_MaxTrq(pVelCommand, maxTrqLimit)\u00a0",
        "D": "EnduranceMode_SetMaxSpeed(pTrqCommand, maxMotorSpeed)",
        "Answer(s)": "A"
    },
    {
        "No": 290,
        "Instruction": "Start a triggered torque command in which the torque is changed over time",
        "A": "StartRampTimeTrq(pTrqCommand, rampCycleTime)\u00a0",
        "B": "SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "C": "StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)\u00a0",
        "D": "UpdateRampTimeTrq(pTrqCommand, newRampCycleTime)",
        "Answer(s)": "A"
    },
    {
        "No": 291,
        "Instruction": "Start a torque command in which the torque is changed over time and set the maximum motor speed.",
        "A": "StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)\u00a0",
        "B": "SetAxisPolarity(axis, polarity)\u00a0",
        "C": "StartJog_TimedJog(numCommands, pTimedJogCommand)\u00a0",
        "D": "StartRampTimeTrq(pTrqOutput, rampTime, maxTorque)",
        "Answer(s)": "A"
    },
    {
        "No": 292,
        "Instruction": "Start a torque command in which the torque is changed at a specified rate.",
        "A": "StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "C": "StartTrq(pTrqCommand)\u00a0",
        "D": "StartChangingRampTrq(pTrqSetpoint, rampRate)",
        "Answer(s)": "A"
    },
    {
        "No": 293,
        "Instruction": "Start a torque command in which the torque is changed at a specified rate and set the maximum motor speed.",
        "A": "StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)\u00a0",
        "B": "SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "C": "StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)\u00a0",
        "D": "UpdateRampRateTrq(pTrqCommand, newRampRate, maxMotorSpeed)",
        "Answer(s)": "A"
    },
    {
        "No": 294,
        "Instruction": "Stop a torque command.",
        "A": "StopTrq(axis)\u00a0",
        "B": "SimulateTimeAtPos(pSimulatePosCommand, specificPos)\u00a0",
        "C": "StopSuperimpose(axis)\u00a0",
        "D": "PauseTorque(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 295,
        "Instruction": "Stop torque commands for multiple axes.",
        "A": "StopTrq_AxisSel(pAxisSelection)\u00a0",
        "B": "StopTrq(axis)\u00a0",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "StopAxisSelect: (axisToStop)",
        "Answer(s)": "A"
    },
    {
        "No": 296,
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command.",
        "A": "StartPosToTrq(pTriggerTrqCommand)\u00a0",
        "B": "GetAbsoluteEncoderHomeOffset(axis)\u00a0",
        "C": "StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "D": "SetTrqStartPos(pCmdTriggerTrq)",
        "Answer(s)": "A"
    },
    {
        "No": 297,
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands.",
        "A": "StartPosToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "B": "StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "C": "StartVelToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "D": "UpdatePosToTrq(numFunctions, pDetectedTrqCmd)",
        "Answer(s)": "A"
    },
    {
        "No": 298,
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.",
        "A": "StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "B": "GetHomeData()\u00a0",
        "C": "StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)\u00a0",
        "D": "UpdateStartPosToTrq_TriggerEvents(pTrqCmd, pTrigEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 299,
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events.",
        "A": "StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "B": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "C": "StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "UpdateTrqTrigEvent(numCommands, trqCommands, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 300,
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command.",
        "A": "StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "B": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "C": "StartTrq(pTrqCommand)\u00a0",
        "D": "StartVelToTrqWithOverride(pOverrideTriggerTrq)",
        "Answer(s)": "A"
    },
    {
        "No": 301,
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands.",
        "A": "StartVelToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "B": "GetSyncParam(axis)\u00a0",
        "C": "StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "D": "StartVelToTrq(numCommands, triggerTorqueCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 302,
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.",
        "A": "StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "B": "Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "C": "StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "D": "SetTrqCmdAndTriggerEvents(pTrqCmd, pEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 303,
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.",
        "A": "StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "B": "StartMovToJog(pPosToJogCommand)\u00a0",
        "C": "StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "D": "AdjustStartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 304,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartVelToPos(pTriggerPosCommand)\u00a0",
        "C": "GetMasterInfo()\u00a0",
        "D": "IsDeviceValidCheck()",
        "Answer(s)": "A"
    },
    {
        "No": 305,
        "Instruction": "Set system parameter settings for all axes.",
        "A": "SetParam(pParam)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "GetDefaultParam(pParam)\u00a0",
        "D": "UpdateParam(pUpdatedParam)",
        "Answer(s)": "A"
    },
    {
        "No": 306,
        "Instruction": "Get system parameter settings for all axes.",
        "A": "GetParam()\u00a0",
        "B": "StartRampTimeTrq(pTrqCommand, rampCycleTime)\u00a0",
        "C": "GetSyncParam(axis)\u00a0",
        "D": "FetchParameter()",
        "Answer(s)": "A"
    },
    {
        "No": 307,
        "Instruction": "Set system parameter settings for a single axis.",
        "A": "SetParam_Axis(axis, pParam)\u00a0",
        "B": "GetParam_Axis(axis)\u00a0",
        "C": "SetHomeParam(axis, pParam)\u00a0",
        "D": "SetParam_Axis(axis_index, param_value)",
        "Answer(s)": "A"
    },
    {
        "No": 308,
        "Instruction": "Get system parameter settings for a single axis.",
        "A": "GetParam_Axis(axis)\u00a0",
        "B": "StartPVT(AdvMotion_PVTCommand pPVTCommand)\u00a0",
        "C": "GetSyncParam(axis)\u00a0",
        "D": "AccessAxisParam(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 309,
        "Instruction": "Set axis parameters for all axes.",
        "A": "SetAxisParam(pParam)\u00a0",
        "B": "SetPositiveTrqLimit(axis, torque)\u00a0",
        "C": "SetParam(pParam)\u00a0",
        "D": "SetParamAxis(pAxisParam)",
        "Answer(s)": "A"
    },
    {
        "No": 310,
        "Instruction": "Get axis parameters for all axes.",
        "A": "GetAxisParam()\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "GetDefaultAxisParam()\u00a0",
        "D": "GetAxisParameters()",
        "Answer(s)": "A"
    },
    {
        "No": 311,
        "Instruction": "Set axis parameters for a single axis.",
        "A": "SetAxisParam_Axis(axis, pParam)\u00a0",
        "B": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "C": "SetAlarmParam(axis, pParam)\u00a0",
        "D": "SetAxisParameter(axis, parameter)",
        "Answer(s)": "A"
    },
    {
        "No": 312,
        "Instruction": "Get axis parameters for a single axis.",
        "A": "GetAxisParam_Axis(axis)\u00a0",
        "B": "StartVel(numCommands, pVelCommand)\u00a0",
        "C": "SetParam_Axis(axis, pParam)\u00a0",
        "D": "GetAxisInfo_Axis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 313,
        "Instruction": "Set the gear ratio of the axis.",
        "A": "SetGearRatio(axis, numerator, denominator)\u00a0",
        "B": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "C": "SetServoOn(axis, newStatus)\u00a0",
        "D": "SetGearRatio(axisIndex, newNumerator, newDenominator)",
        "Answer(s)": "A"
    },
    {
        "No": 314,
        "Instruction": "Set the single turn mode and single turn encoder count of an axis.",
        "A": "SetSingleTurn(axis, enable. encoderCount)\u00a0",
        "B": "StartMovToJog(pPosToJogCommand)\u00a0",
        "C": "SetAbsoluteEncoderMode(axis, enable)\u00a0",
        "D": "SetSingleTurn(axis, enable, encoderCount)",
        "Answer(s)": "A"
    },
    {
        "No": 315,
        "Instruction": "Set the moving average profile time parameter for an axis.",
        "A": "SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "B": "SimulatePos(pSimulatePosCommand)\u00a0",
        "C": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "D": "SetRealTimeMovingAverageProfile(axis, milliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 316,
        "Instruction": "Set the axis unit parameter for an axis.",
        "A": "SetAxisUnit(axis, unit)\u00a0",
        "B": "GetSyncParam(axis)\u00a0",
        "C": "GetAxisPolatity(axis)\u00a0",
        "D": "SetAxisMeasureUnit(axis, unit)",
        "Answer(s)": "A"
    },
    {
        "No": 317,
        "Instruction": "Set the velocity feedforward gain parameter for an axis.",
        "A": "SetVelocityFeedforwardGain(axis, gain)\u00a0",
        "B": "GetParam()\u00a0",
        "C": "SetFeedbackParam(axis, pParam)\u00a0",
        "D": "SetVelocityFeedforwardGain(axis_number, new_gain)",
        "Answer(s)": "A"
    },
    {
        "No": 318,
        "Instruction": "Set the axis polarity for an axis.",
        "A": "SetAxisPolarity(axis, polarity)\u00a0",
        "B": "StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "C": "SetSyncParam(axis, pParam)\u00a0",
        "D": "SetAxisDirection(axis, direction)",
        "Answer(s)": "A"
    },
    {
        "No": 319,
        "Instruction": "Set the absolute encoder mode for an axis.",
        "A": "SetAbsoluteEncoderMode(axis, enable)\u00a0",
        "B": "Wait(axis)\u00a0",
        "C": "GetAbsoluteEncoderHomeOffset(axis)\u00a0",
        "D": "SetAbsoluteEncoderEnable(axis_number, is_enabled)",
        "Answer(s)": "A"
    },
    {
        "No": 320,
        "Instruction": "Set the absolute encoder home offset for an axis.",
        "A": "SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "B": "TriggerFlightRecorder()\u00a0",
        "C": "GetAbsoluteEncoderMode(axis)\u00a0",
        "D": "SetAbsoluteEncoderHomeOffsetForAxis(axis_number, new_offset_value)",
        "Answer(s)": "A"
    },
    {
        "No": 321,
        "Instruction": "Get the gear ratio of the axis.",
        "A": "GetGearRatio(axis)\u00a0",
        "B": "SetSingleTurn(axis, enable. encoderCount)\u00a0",
        "C": "GetAlarmParam(axis)\u00a0",
        "D": "GetGearRatios(vehicle)",
        "Answer(s)": "A"
    },
    {
        "No": 322,
        "Instruction": "Get the single turn mode and single turn encoder count of an axis.",
        "A": "GetSingleTurn(axis)\u00a0",
        "B": "StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "GetAxisUnit(axis)\u00a0",
        "D": "ReadAxisRotation()",
        "Answer(s)": "A"
    },
    {
        "No": 323,
        "Instruction": "Get the moving average profile time parameter of an axis.",
        "A": "GetMovingAverageProfileTime(axis)\u00a0",
        "B": "Resume_AxisSel(pAxisSelection)\u00a0",
        "C": "GetGearRatio(axis)\u00a0",
        "D": "CalculateAverageProfileTime(axis, window_size)",
        "Answer(s)": "A"
    },
    {
        "No": 324,
        "Instruction": "Get the axis unit parameter of an axis.",
        "A": "GetAxisUnit(axis)\u00a0",
        "B": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "C": "GetAxisPolatity(axis)\u00a0",
        "D": "GetNormalizedAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 325,
        "Instruction": "Get the velocity feedforward gain of an axis.",
        "A": "GetVelocityFeedforwardGain(axis)\u00a0",
        "B": "ClearSyncGroupError(groupId)\u00a0",
        "C": "GetPosFeedback(axis)\u00a0",
        "D": "CalculateVelocityFeedforwardGainOnAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 326,
        "Instruction": "Get the axis polarity of an axis.",
        "A": "GetAxisPolatity(axis)\u00a0",
        "B": "SetLimitParam(axis, pParam)\u00a0",
        "C": "GetAxisParam_Axis(axis)\u00a0",
        "D": "GetAxisPolarity(axis_number)",
        "Answer(s)": "A"
    },
    {
        "No": 327,
        "Instruction": "Get the absolute encoder mode of an axis.",
        "A": "GetAbsoluteEncoderMode(axis)\u00a0",
        "B": "GetAbsoluteEncoderHomeOffset(axis)\u00a0",
        "C": "SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "D": "GetAbsoluteEncoderModeForAxis(axis_id)",
        "Answer(s)": "A"
    },
    {
        "No": 328,
        "Instruction": "Get the absolute encoder home offset of an axis.",
        "A": "GetAbsoluteEncoderHomeOffset(axis)\u00a0",
        "B": "Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "C": "SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "D": "GetIntegratedEncoderZeroOffset(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 329,
        "Instruction": "Set feedback parameter settings for an axis.",
        "A": "SetFeedbackParam(axis, pParam)\u00a0",
        "B": "GetMotionParam(axis)\u00a0",
        "C": "GetFeedbackParam(axis)\u00a0",
        "D": "SetAxisParam(axis, newParam)",
        "Answer(s)": "A"
    },
    {
        "No": 330,
        "Instruction": "Set home parameter settings for an axis.",
        "A": "SetHomeParam(axis, pParam)\u00a0",
        "B": "StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "C": "SetParam_Axis(axis, pParam)\u00a0",
        "D": "SetHomeParameter(axis, newParam)",
        "Answer(s)": "A"
    },
    {
        "No": 331,
        "Instruction": "Set limit parameter settings for an axis.",
        "A": "SetLimitParam(axis, pParam)\u00a0",
        "B": "SuperimposeMov(pPosCommand)\u00a0",
        "C": "SetMotionParam(axis, pParam)\u00a0",
        "D": "SetAxisLimitParameter(axis, newParam)",
        "Answer(s)": "A"
    },
    {
        "No": 332,
        "Instruction": "Set motion parameter settings for an axis.",
        "A": "SetMotionParam(axis, pParam)\u00a0",
        "B": "StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "C": "SetLimitParam(axis, pParam)\u00a0",
        "D": "SetMotionParameters(axis, newParams)",
        "Answer(s)": "A"
    },
    {
        "No": 333,
        "Instruction": "Set alarm parameter settings for an axis.",
        "A": "SetAlarmParam(axis, pParam)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "SetLimitParam(axis, pParam)\u00a0",
        "D": "SetAlarmConfiguration(axis, params)",
        "Answer(s)": "A"
    },
    {
        "No": 334,
        "Instruction": "Set sync parameter settings for an axis.",
        "A": "SetSyncParam(axis, pParam)\u00a0",
        "B": "StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "C": "SetLimitParam(axis, pParam)\u00a0",
        "D": "SetAxisSyncParam(axis, newParam)",
        "Answer(s)": "A"
    },
    {
        "No": 335,
        "Instruction": "Set flight recorder parameters.",
        "A": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "B": "StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "C": "SetHomeParam(axis, pParam)\u00a0",
        "D": "SetFlightRecorderParamNew(axis, newParam)",
        "Answer(s)": "A"
    },
    {
        "No": 336,
        "Instruction": "Set the file path to save the flight recorder data to.",
        "A": "SetFlightRecorderPath(pPath)\u00a0",
        "B": "SetParam(pParam)\u00a0",
        "C": "ResetFlightRecorder()\u00a0",
        "D": "SetFlightRecorderPath(path)",
        "Answer(s)": "A"
    },
    {
        "No": 337,
        "Instruction": "Set emergency stop parameters.",
        "A": "SetEmergencyStopParam(pParam)\u00a0",
        "B": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "C": "SetHomeParam(axis, pParam)\u00a0",
        "D": "SetEmergencyStopParameter(pParameter)",
        "Answer(s)": "A"
    },
    {
        "No": 338,
        "Instruction": "Get feedback parameter settings for an axis.",
        "A": "GetFeedbackParam(axis)\u00a0",
        "B": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "C": "SetFeedbackParam(axis, pParam)\u00a0",
        "D": "GetFeedbackAxisParam(feedback_axis)",
        "Answer(s)": "A"
    },
    {
        "No": 339,
        "Instruction": "Get home parameter settings for an axis.",
        "A": "GetHomeParam(axis)\u00a0",
        "B": "GetStatus()\u00a0",
        "C": "GetAlarmParam(axis)\u00a0",
        "D": "GetHomeParamsByAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 340,
        "Instruction": "Get limit switch parameter settings for an axis",
        "A": "GetLimitParam(axis)\u00a0",
        "B": "OverrideVel(numCommands, pVelCommand)\u00a0",
        "C": "SetLimitParam(axis, pParam)\u00a0",
        "D": "GetAxisLimit(axis_length)",
        "Answer(s)": "A"
    },
    {
        "No": 341,
        "Instruction": "Get motion parameter settings for an axis.",
        "A": "GetMotionParam(axis)\u00a0",
        "B": "StartPosToJog_PosToJog(numCommands, pPosToJogCommand)\u00a0",
        "C": "SetMotionParam(axis, pParam)\u00a0",
        "D": "GetMotionParamsForAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 342,
        "Instruction": "Get alarm parameter settings for an axis.",
        "A": "GetAlarmParam(axis)\u00a0",
        "B": "GetPosFeedback(axis)\u00a0",
        "C": "SetAlarmParam(axis, pParam)\u00a0",
        "D": "DisarmAlarmParam(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 343,
        "Instruction": "Get the sync parameters of the axis.",
        "A": "GetSyncParam(axis)\u00a0",
        "B": "ClearSyncGroupError(groupId)\u00a0",
        "C": "GetMotionParam(axis)\u00a0",
        "D": "FetchSyncParam(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 344,
        "Instruction": "Get flight recorder parameters.",
        "A": "GetFlightRecorderParam()\u00a0",
        "B": "StartVel(numCommands, pVelCommand)\u00a0",
        "C": "SetFlightRecorderPath(pPath)\u00a0",
        "D": "GetFlightRecorderParameters()",
        "Answer(s)": "A"
    },
    {
        "No": 345,
        "Instruction": "Get emergency stop parameters.",
        "A": "GetEmergencyStopParam()\u00a0",
        "B": "StartLinearIntplPos(pLinearIntplCommand)\u00a0",
        "C": "GetHomeParam(axis)\u00a0",
        "D": "GetEmergencyStopParams()",
        "Answer(s)": "A"
    },
    {
        "No": 346,
        "Instruction": "Get the default system parameters.",
        "A": "GetDefaultParam(pParam)\u00a0",
        "B": "Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)\u00a0",
        "C": "GetDefaultAxisParam()\u00a0",
        "D": "GetDefaultParamValue(paramName)",
        "Answer(s)": "A"
    },
    {
        "No": 347,
        "Instruction": "Get the default axis parameters.",
        "A": "GetDefaultAxisParam()\u00a0",
        "B": "GetParam_Axis(axis)\u00a0",
        "C": "GetAlarmParam(axis)\u00a0",
        "D": "GetDefaultAxisParams()",
        "Answer(s)": "A"
    },
    {
        "No": 348,
        "Instruction": "Export system parameters to an xml file.",
        "A": "Export_SysPrm(pPath, pParam)\u00a0",
        "B": "GetFeedbackParam(axis)\u00a0",
        "C": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "D": "Update_SysPrm(pConfigPath, pParameters)",
        "Answer(s)": "A"
    },
    {
        "No": 349,
        "Instruction": "Export axis parameters to an xml file.",
        "A": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "B": "SetAxisUnit(axis, unit)\u00a0",
        "C": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "D": "Export_AxisParameters(path, axis_parameters)",
        "Answer(s)": "A"
    },
    {
        "No": 350,
        "Instruction": "Export system and axis parameters to an xml file.",
        "A": "Export_SysPrm_AxisPrm(pPath, pParam, pAxisParam)\u00a0",
        "B": "StartPVT(AdvMotion_PVTCommand pPVTCommand)\u00a0",
        "C": "Export_SysPrm(pPath, pParam)\u00a0",
        "D": "Export_SystemParameter_AxisParameter(filePath, paramValue, axisParameterValue)",
        "Answer(s)": "A"
    },
    {
        "No": 351,
        "Instruction": "Export system parameters of one axis to an xml file.",
        "A": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "B": "StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "C": "Export_AxisPrm_Axis(pPath, pAxisParam, axis)\u00a0",
        "D": "Update_SysPrm_Axis_Path(pNewPath, pParam, newAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 352,
        "Instruction": "Export axis parameters of one axis to an xml file.",
        "A": "Export_AxisPrm_Axis(pPath, pAxisParam, axis)\u00a0",
        "B": "OverrideVel(pPosCommand)\u00a0",
        "C": "Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "D": "Export_AxisParam_and_Axis_Params(path, axis_parameters, axis_value)",
        "Answer(s)": "A"
    },
    {
        "No": 353,
        "Instruction": "Export system parameters to an xml file.",
        "A": "Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "B": "ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "C": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "D": "Export_SysPrm_AxisPrm_ByAxis(pPath, pParam, pAxisParam, axis)",
        "Answer(s)": "A"
    },
    {
        "No": 354,
        "Instruction": "Import system parameters from an xml file.",
        "A": "Import_SysPrm(pPath)\u00a0",
        "B": "StartJog_TimedJog(pTimedJogCommand)\u00a0",
        "C": "Export_SysPrm(pPath, pParam)\u00a0",
        "D": "Load_System_Params(path_name)",
        "Answer(s)": "A"
    },
    {
        "No": 355,
        "Instruction": "Import axis parameters from an xml file.",
        "A": "Import_AxisPrm(pPath)\u00a0",
        "B": "SetFlightRecorderParam(axis, pParam)\u00a0",
        "C": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "D": "Update_AxisParms(path)",
        "Answer(s)": "A"
    },
    {
        "No": 356,
        "Instruction": "Import system and axis parameters from an xml file.",
        "A": "Import_SysPrm_AxisPrm(pPath)\u00a0",
        "B": "GetFeedbackParam(axis)\u00a0",
        "C": "Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "D": "Export_SysParam_AxisParam(pPath)",
        "Answer(s)": "A"
    },
    {
        "No": 357,
        "Instruction": "Import system parameters of one axis from an xml file.",
        "A": "Import_SysPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "B": "ReleaseEStop()\u00a0",
        "C": "Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "D": "Update_SysPrm_Axis(pPath, axisName, newParamValues)",
        "Answer(s)": "A"
    },
    {
        "No": 358,
        "Instruction": "Import axis parameters of one axis from an xml file.",
        "A": "Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "B": "OverrideVel(pPosCommand)\u00a0",
        "C": "Export_AxisPrm_Axis(pPath, pAxisParam, axis)\u00a0",
        "D": "Export_AxisPrm_Axis(pPath, axis, updateParamOnAxes):",
        "Answer(s)": "A"
    },
    {
        "No": 359,
        "Instruction": "Import system and axis parameters of one axis from an xml file.",
        "A": "Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "B": "Continue_AxisSel(pAxisSelection)\u00a0",
        "C": "Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "D": "Import_System_Parameters_Axis_Parameters(axisPath, axisName, copyParametersToAllAxes)",
        "Answer(s)": "A"
    },
    {
        "No": 360,
        "Instruction": "Get the current parameters for all axes and export them to an xml file.",
        "A": "GetAndExportAll(pPath)\u00a0",
        "B": "StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "C": "GetDefaultParam(pParam)\u00a0",
        "D": "FetchAndSaveAllData(pDirectory)",
        "Answer(s)": "A"
    },
    {
        "No": 361,
        "Instruction": "Imports parameters from an xml file and set them as the current parameters for all axes.",
        "A": "ImportAndSetAll(path)\u00a0",
        "B": "StartPos(numCommands, pPosCommand)\u00a0",
        "C": "Import_SysPrm(pPath)\u00a0",
        "D": "loadAndInitializeAll(path)",
        "Answer(s)": "A"
    },
    {
        "No": 362,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "C": "StartPosToJog_PosToJog(pPosToJogCommand)\u00a0",
        "D": "ErrorToDescription(code)",
        "Answer(s)": "A"
    },
    {
        "No": 363,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "FreeSplineBuffer(channel)\u00a0",
        "C": "SetLogOption(channel, pOption)\u00a0",
        "D": "ApiLogDataToString(pApiLogData, apiLogDataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 364,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "GetMaxMotorSpeed(axis)\u00a0",
        "D": "FetchLibraryVersion():",
        "Answer(s)": "A"
    },
    {
        "No": 365,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "GetInAnalogDataUInt(addr)\u00a0",
        "D": "IsDeviceValid(deviceID: string): boolean",
        "Answer(s)": "A"
    },
    {
        "No": 366,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)\u00a0",
        "C": "IsDeviceValid()\u00a0",
        "D": "GetAppVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 367,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "C": "SetSyncMasterSlave(masterAxis, slaveAxis)",
        "D": "IsDeviceValid(device_id)",
        "Answer(s)": "A"
    },
    {
        "No": 368,
        "Instruction": "Allocate buffer memory for a spline execution channel.",
        "A": "CreateSplineBuffer(channel, points)\u00a0",
        "B": "GetSplineBufferPoints(channel)\u00a0",
        "C": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "D": "CreateSplineStructure(channel, points)",
        "Answer(s)": "A"
    },
    {
        "No": 369,
        "Instruction": "Free buffer memory for a spline execution channel.",
        "A": "FreeSplineBuffer(channel)\u00a0",
        "B": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "C": "CreateSplineBuffer(channel, points)\u00a0",
        "D": "FreeSplineBuffer(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 370,
        "Instruction": "Get the amount of buffer memory currently allocated to a spline execution channel.",
        "A": "GetSplineBufferPoints(channel)\u00a0",
        "B": "AddPathIntplWithRotationCommand(channel, pCommand)\u00a0",
        "C": "FreeSplineBuffer(channel)\u00a0",
        "D": "GetSplineBufferPoints(channel_name)",
        "Answer(s)": "A"
    },
    {
        "No": 371,
        "Instruction": "Get the number of bytes required per point data in the spline execution buffer memory.",
        "A": "GetSplineBytesPerPoint()\u00a0",
        "B": "StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "GetPathIntplWithRotationBytesPerPoint()\u00a0",
        "D": "GetSplineBytesPerPointV2()",
        "Answer(s)": "A"
    },
    {
        "No": 372,
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions.",
        "A": "StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "B": "StartTwoLinkLinearPos(pTwoLinkCommand)\u00a0",
        "C": "StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "D": "StartCSplinePos_PointTime_v2(channel, pSplineCommand, numPoints, pPoint, pTimeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 373,
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions.",
        "A": "StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "UpdateCSplineTotalTime(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 374,
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions.",
        "A": "StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)\u00a0",
        "C": "StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "InitiateCubicSplinePositionProfile(channel, splineCommand, numPoints, points)",
        "Answer(s)": "A"
    },
    {
        "No": 375,
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions.",
        "A": "StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartPathIntplWithRotation_Pos(channel, double pos)\u00a0",
        "C": "StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCubicSplineWithLimitedAcc(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 376,
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as relative positions.",
        "A": "StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "B": "StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "C": "StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "D": "StartCSplineMov_PointTimeFromPointsList (channel, pSplineCommand, numPoints, pointsList, pointsTimeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 377,
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions.",
        "A": "StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "C": "StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "CalculateCSplineMov_TimeRemaining (channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 378,
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions.",
        "A": "StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "CreateSplineBuffer(channel, points)\u00a0",
        "C": "StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCSplineMov_ProfileChanged(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 379,
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions.",
        "A": "StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "GetPathIntplWithRotationBytesPerPoint()\u00a0",
        "C": "StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCSplineMovement_VelocityAccelerationLimited(channel, pSplineCmd, numPts, pPts)",
        "Answer(s)": "A"
    },
    {
        "No": 380,
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as absolute positions.",
        "A": "StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "B": "StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "C": "StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "D": "StartCubicSplinePositionWithTime (channel, splineCommand, numControlPoints, controlPointCoordinates, controlPointTimeArray)",
        "Answer(s)": "A"
    },
    {
        "No": 381,
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions.",
        "A": "StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "C": "StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "SetupCBSplineMotion_TotalDuration(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 382,
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions.",
        "A": "StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "GetPathIntplWithRotationStatus(channel)\u00a0",
        "C": "StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "InitializeCBSplinePositionProfile(channel, splineType, numPositions, positions)",
        "Answer(s)": "A"
    },
    {
        "No": 383,
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions.",
        "A": "StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "C": "StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCubicSplinePosVelAccLimited(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 384,
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as relative positions.",
        "A": "StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "B": "StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "D": "UpdateCBSplineMovementTiming(channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 385,
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions.",
        "A": "StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)\u00a0",
        "C": "StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "EndCBSplineMov_TotalTime(channel, pSplineCommand, numPoints, pPoint)",
        "Answer(s)": "A"
    },
    {
        "No": 386,
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions.",
        "A": "StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartPathIntpl3DMov(pPathIntplCommand)\u00a0",
        "C": "StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCubicSplineMovementWithProfile(channel, splineCommand, numPoints, pointList)",
        "Answer(s)": "A"
    },
    {
        "No": 387,
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions.",
        "A": "StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "B": "StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)\u00a0",
        "C": "StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "StartCubicSplineMovementWithLimitedVelAcc(channel, pSplineCmd, numPoints, pPoints)",
        "Answer(s)": "A"
    },
    {
        "No": 388,
        "Instruction": "Allocate buffer memory to an axis for the execution of path interpolation commands.",
        "A": "CreatePathIntplBuffer(axis, unsigned points)\u00a0",
        "B": "StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "CreatePVTBuffer(axis, points)\u00a0",
        "D": "CreatePathInterpolatorBuffer(axis, unsigned int numPoints)",
        "Answer(s)": "A"
    },
    {
        "No": 389,
        "Instruction": "Free path interpolation buffer memory for an axis.",
        "A": "FreePathIntplBuffer(axis)\u00a0",
        "B": "StartPathIntplWithRotation_Point(channel, point)\u00a0",
        "C": "CreatePathIntplBuffer(axis, unsigned points)\u00a0",
        "D": "ImproveFreePathIntplBuffer(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 390,
        "Instruction": "Get the amount of path interpolation buffer memory currently allocated to an axis.",
        "A": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "B": "StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "GetPVTBufferPoints(axis, pPoints)\u00a0",
        "D": "GetInterpolatedBufferPoints(axis, pPoints)",
        "Answer(s)": "A"
    },
    {
        "No": 391,
        "Instruction": "Get the number of bytes required per point data in the path interpolation buffer memory.",
        "A": "GetPathIntplBytesPerPoint(pBytes)\u00a0",
        "B": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "GetPathIntplLookaheadBytesPerPoint()\u00a0",
        "D": "GetPathInterpolatedBytesPerPoint(prevBytes, nextBytes)",
        "Answer(s)": "A"
    },
    {
        "No": 392,
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos(pPathIntplCommand)\u00a0",
        "B": "StopECAM(channel)\u00a0",
        "C": "StartPathIntplMov(pPathIntplCommand)\u00a0",
        "D": "StartPathInterpolatorPosition(pInterpolatorPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 393,
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov(pPathIntplCommand)\u00a0",
        "B": "StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntpl3DPos(pPathIntplCommand)\u00a0",
        "D": "StartPathInterpolateMovement(pInterpolationPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 394,
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "B": "StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)\u00a0",
        "C": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartPathIntplPosWithTrigger(pInterpolatorPath, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 395,
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "B": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "D": "InitiatePathInterpolationMovement(pCommand, pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 396,
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "D": "StartPathInterpolationWithEventTriggers(pathInterpolationCommand, triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 397,
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartPathInterpolationMove_TriggerEvents(pInterpolationCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 398,
        "Instruction": "Override a path interpolation motion using a velocity multiplier.",
        "A": "OverridePathIntplVelocityMultiplier(int axis, double multiplier)",
        "B": "StartPathIntpl3DMov(pPathIntplCommand)\u00a0",
        "C": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "D": "OverridePathInterpolatorVelocityMultiplier(int axisIndex, double newMultiplier)",
        "Answer(s)": "A"
    },
    {
        "No": 399,
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos(pPathIntplCommand)\u00a0",
        "B": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "C": "StartPathIntplMov(pPathIntplCommand)\u00a0",
        "D": "InitializePathInterpolation3DPosition(pathInterpolationCmd)",
        "Answer(s)": "A"
    },
    {
        "No": 400,
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov(pPathIntplCommand)\u00a0",
        "B": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntplMov(pPathIntplCommand)\u00a0",
        "D": "Start3DMovementPathInterpolation(pMovementPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 401,
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "B": "SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)\u00a0",
        "C": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartPathIntpl3DPos_TriggerWithOffset(pPathCommand, pTrigger, offset)",
        "Answer(s)": "A"
    },
    {
        "No": 402,
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov_Trigger(pPathIntplCommand, Trigger pTrigger)\u00a0",
        "B": "StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)\u00a0",
        "C": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartPathIntpl3DMov_TriggerWithCondition(pPathIntplCommand, Trigger pTrigger, Condition pCondition)",
        "Answer(s)": "A"
    },
    {
        "No": 403,
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "UpdatePathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 404,
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "B": "StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "StartPathInterp3DMovementWithTriggers(pPathInterpolationCommand, pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 405,
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "UpdatePathIntplCommand(pPathIntplCommand, numAddlCommands, pAddedCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 406,
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartInterpolatedMovementWithAdditionalCommands(pStartInterpolationCommand, numAdditionalCommands, pAdditionalInterpolationCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 407,
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "C": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartNewPathTrigger(pNewPathCommand, pTrigger, numAdditionalCommands, pAdditionalPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 408,
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "C": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPathIntplMov_TriggerWithDelay(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 409,
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntpl3DMov(pPathIntplCommand)\u00a0",
        "C": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPathIntplPos_TriggerEvents_AdditionalCommands(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 410,
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "C": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "UpdatePathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEventsList, numAdditionalCommands, pPathIntplAdditionalCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 411,
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "C": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPathIntpl3DPosWithAdditionalCommands(pPathIntplCmd, numAddlCmds, pAddlCmd)",
        "Answer(s)": "A"
    },
    {
        "No": 412,
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "C": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "UpdatePathIntpl3DMov(pStartCommand, numAddlCommands, pAdditionalCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 413,
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "C": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "Start3DPathIntpl_PosTrigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 414,
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPathIntpl3DMov_Trigger(pPathCommand, pTriggerData, numAdditionalCmds, pAdditionalPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 415,
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)\u00a0",
        "C": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "UpdatePathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAdditionalCommands, pPathIntplAdditionalCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 416,
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.",
        "A": "StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "B": "StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "C": "StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "StartPathIntpl3DMov_TriggerEvents(pPathCommand, pEventsToTrigger, numAdditionalCommands, pAdditionalPathCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 417,
        "Instruction": "Override a 3D path interpolation motion using a velocity multiplier.",
        "A": "OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)",
        "B": "GetPathIntplLookaheadStatus(channel)\u00a0",
        "C": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "D": "AdjustPathInterpolation3DVelocityMultiplier(int axisToAdjust, double newMultiplier)",
        "Answer(s)": "A"
    },
    {
        "No": 418,
        "Instruction": "Allocate buffer memory for a path interpolation with rotation channel.",
        "A": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "B": "StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "ClearPathIntplWithRotation(channel)\u00a0",
        "D": "CreatePathWithRotationBufferAndWaypoints(channel, waypoints)",
        "Answer(s)": "A"
    },
    {
        "No": 419,
        "Instruction": "Free buffer memory for a path interpolation with rotation channel.",
        "A": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "B": "StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "StartPathIntplWithRotation(channel)\u00a0",
        "D": "FreePathIntplWithRotationBuffer(channel, interpolation_type)",
        "Answer(s)": "A"
    },
    {
        "No": 420,
        "Instruction": "Get the number of bytes required per point data in the path interpolation with rotation buffer memory.",
        "A": "GetPathIntplWithRotationBytesPerPoint()\u00a0",
        "B": "ResolveConstantLinearVel(axis)\u00a0",
        "C": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "D": "GetPathInterpolationWithRotationBytesPerPoint()",
        "Answer(s)": "A"
    },
    {
        "No": 421,
        "Instruction": "Set the configuration data for a path interpolation with rotation channel.",
        "A": "SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)\u00a0",
        "B": "SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "C": "StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "D": "SetPathIntplAndRotateConfiguration(channel, AdvMotion_PathIntplAndRotateConfiguration pConfig)",
        "Answer(s)": "A"
    },
    {
        "No": 422,
        "Instruction": "Add interpolation commands to a path interpolation with rotation channel.",
        "A": "AddPathIntplWithRotationCommand(channel, pCommand)\u00a0",
        "B": "StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "D": "AddPathWithRotationIntplCommand(channel, pCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 423,
        "Instruction": "Execute motion for a path interpolation with rotation channel.",
        "A": "StartPathIntplWithRotation(channel)\u00a0",
        "B": "SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)\u00a0",
        "C": "ClearPathIntplWithRotation(channel)\u00a0",
        "D": "StartPathWithRotation(channel, rotation_angle)",
        "Answer(s)": "A"
    },
    {
        "No": 424,
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_Trigger(channel, pTrigger)\u00a0",
        "B": "StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)\u00a0",
        "C": "StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)\u00a0",
        "D": "StartPathIntplWithRotation_Trigger(channel_id, trigger_point)",
        "Answer(s)": "A"
    },
    {
        "No": 425,
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "D": "StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 426,
        "Instruction": "Execute motion to the specified position for a path interpolation with rotation channel.",
        "A": "StartPathIntplWithRotation_Pos(channel, double pos)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)\u00a0",
        "D": "InitializePathInterpolationWithRotation_Pos(channel, double initialPos)",
        "Answer(s)": "A"
    },
    {
        "No": 427,
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)\u00a0",
        "B": "SimulateTimeAtDist(pPathIntplCommand, specificDistance)\u00a0",
        "C": "StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "D": "PathIntplWithRotation_Pos_Trigger(channel, double targetPos, Trigger pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 428,
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)\u00a0",
        "B": "ResolveConstantLinearVel(axis)\u00a0",
        "C": "StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)\u00a0",
        "D": "UpdatePathIntplWithRotation_Pos_TriggerEvents(channel, double position, TriggerEvents triggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 429,
        "Instruction": "Execute motion to the specified point for a path interpolation with rotation channel.",
        "A": "StartPathIntplWithRotation_Point(channel, point)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "StartPathIntplWithRotation_Trigger(channel, pTrigger)\u00a0",
        "D": "EndPathIntplWithRotation_Point(channel, endpoint)",
        "Answer(s)": "A"
    },
    {
        "No": 430,
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)\u00a0",
        "D": "InitiatePathInterpolationWithRotation_Point_Activate(channel, point, Trigger pTrigger)",
        "Answer(s)": "A"
    },
    {
        "No": 431,
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.",
        "A": "StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)\u00a0",
        "B": "CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "C": "StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)\u00a0",
        "D": "StartInterpolatorWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)",
        "Answer(s)": "A"
    },
    {
        "No": 432,
        "Instruction": "Clear all data for a path interpolation with rotation channel.",
        "A": "ClearPathIntplWithRotation(channel)\u00a0",
        "B": "StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)\u00a0",
        "C": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "D": "ClearPathIntplWithRotation(channel, enableRotation)",
        "Answer(s)": "A"
    },
    {
        "No": 433,
        "Instruction": "Get the current status for a path inteprolation with rotation channel.",
        "A": "GetPathIntplWithRotationStatus(channel)\u00a0",
        "B": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "ClearPathIntplWithRotation(channel)\u00a0",
        "D": "GetPathIntplWithRotationStatusAndTimestamp(channel, timestamp)",
        "Answer(s)": "A"
    },
    {
        "No": 434,
        "Instruction": "Allocate buffer memory for a path interpolation with look ahead channel.",
        "A": "CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "B": "GetECAM(channel)\u00a0",
        "C": "CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "D": "UpdatePathInterpolationWithLookaheadBuffer(channel, points)",
        "Answer(s)": "A"
    },
    {
        "No": 435,
        "Instruction": "Free buffer memory for a path interpolation with lookahead channel.",
        "A": "FreePathIntplLookaheadBuffer(channel)\u00a0",
        "B": "StartPathIntplLookahead(channel)\u00a0",
        "C": "ClearPathIntplLookahead(channel)\u00a0",
        "D": "FreePathIntplLookaheadBuffer_V2(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 436,
        "Instruction": "Get the number of bytes required per point data in the path interpolation with look ahead buffer memory.",
        "A": "GetPathIntplLookaheadBytesPerPoint()\u00a0",
        "B": "StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "C": "GetSplineBytesPerPoint()\u00a0",
        "D": "GetPathInterpolatedLookaheadBytesPerPoint()",
        "Answer(s)": "A"
    },
    {
        "No": 437,
        "Instruction": "Set the configuration data for a path interpolation with lookahead channel.",
        "A": "SetPathIntplLookaheadConfiguration(channel, pConfig)\u00a0",
        "B": "StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "C": "CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "D": "SetPathIntplLookaheadConfigurationV2(channel, pConfig)",
        "Answer(s)": "A"
    },
    {
        "No": 438,
        "Instruction": "Add interpolation commands to a path interpolation with look ahead channel.",
        "A": "AddPathIntplLookaheadCommand(channel, pCommand)\u00a0",
        "B": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "C": "StartPathIntplLookahead(channel)\u00a0",
        "D": "AddPathIntplLookaheadCommandWithOffset(channel, pCommand, offset)",
        "Answer(s)": "A"
    },
    {
        "No": 439,
        "Instruction": "Start the motion for a path interpolation with look ahead channel.",
        "A": "StartPathIntplLookahead(channel)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartPathIntplWithRotation(channel)\u00a0",
        "D": "InitializePathIntplLookahead(channel, options)",
        "Answer(s)": "A"
    },
    {
        "No": 440,
        "Instruction": "Stop the motion for a path interpolation with look ahead channel.",
        "A": "StopPathIntplLookahead(channel)\u00a0",
        "B": "StartPathIntplPos(pPathIntplCommand)\u00a0",
        "C": "ClearPathIntplLookahead(channel)\u00a0",
        "D": "StopPathInterpolationLookAhead(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 441,
        "Instruction": "Clear all data for a path interpolation with look ahead channel.",
        "A": "ClearPathIntplLookahead(channel)\u00a0",
        "B": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "C": "CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "D": "ClearPathIntplLookaheadWithPrediction(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 442,
        "Instruction": "Get the current status for a path interpolation with look ahead channel.",
        "A": "GetPathIntplLookaheadStatus(channel)\u00a0",
        "B": "FreePathIntplWithRotationBuffer(channel)\u00a0",
        "C": "GetPathIntplWithRotationStatus(channel)\u00a0",
        "D": "GetNextPathPrediction(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 443,
        "Instruction": "Start an interpolation between two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time.",
        "A": "StartCoordinatedPos(pPosCommand)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "StartPos(pPosCommand)\u00a0",
        "D": "StartCoordinatedPosition(pCoordinates)",
        "Answer(s)": "A"
    },
    {
        "No": 444,
        "Instruction": "Start multiple interpolations, each between pairs of two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time.",
        "A": "StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "B": "FreePathIntplLookaheadBuffer(channel)\u00a0",
        "C": "StartMov_Trigger(numCommands, pPosCommand)\u00a0",
        "D": "InitializePosition(numCommands, positions)",
        "Answer(s)": "A"
    },
    {
        "No": 445,
        "Instruction": "Start an interpolation between two or more axes, where one axis executes a normal position command and the remaining axes travel the specified distances in the same amount of time.",
        "A": "StartCoordinatedPos_JerkRatio(pPosCommand)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "D": "StartCoordinatedPos_JerkRatio(pPosCommand, pVelocityProfile)",
        "Answer(s)": "A"
    },
    {
        "No": 446,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates.",
        "A": "StartTwoLinkLinearPos(pTwoLinkCommand)\u00a0",
        "B": "StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)\u00a0",
        "C": "StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)\u00a0",
        "D": "StartTwoLinkLinearPos(new_pTwoLinkCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 447,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates.",
        "A": "StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "B": "StartTwoLinkLinearPos(pTwoLinkCommand)\u00a0",
        "C": "StartTwoLinkRotaryMov(pTwoLinkCommand)\u00a0",
        "D": "StartTwoLinkLinearMovement(pTwoLinkCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 448,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates.",
        "A": "StartTwoLinkRotaryPos(pTwoLinkCommand)\u00a0",
        "B": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "C": "StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)\u00a0",
        "D": "UpdateTwoLinkRotaryPos(pUpdatedTwoLinkCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 449,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates.",
        "A": "StartTwoLinkRotaryMov(pTwoLinkCommand)\u00a0",
        "B": "SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "C": "StartTwoLinkLinearPos(pTwoLinkCommand)\u00a0",
        "D": "StopTwoLinkRotaryMov(pTwoLinkCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 450,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates.",
        "A": "StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)\u00a0",
        "B": "StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "D": "StartUntetheredTwoLinkLinearPos(pLinearPosCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 451,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates.",
        "A": "StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)\u00a0",
        "D": "StartTwoLinkUntetheredLinearMovement(pTwoLinkCmd)",
        "Answer(s)": "A"
    },
    {
        "No": 452,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates.",
        "A": "StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)\u00a0",
        "B": "ClearPathIntplLookahead(channel)\u00a0",
        "C": "StartTwoLinkRotaryPos(pTwoLinkCommand)\u00a0",
        "D": "StartTwoLinkUntetheredRotaryPosWithSpeed(pTwoLinkCommand, speed)\nNew function_str: StartTwoLinkUntetheredRotaryPosWithSpeed(pTwoLinkCommand, speed)",
        "Answer(s)": "A"
    },
    {
        "No": 453,
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates.",
        "A": "StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)\u00a0",
        "B": "ClearPathIntplWithRotation(channel)\u00a0",
        "C": "StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "D": "StartTwoLinkUntetheredRotaryMovement(pTwoLinkCommand)",
        "Answer(s)": "A"
    },
    {
        "No": 454,
        "Instruction": "Simulate a path interpolation command without moving any axes. The move distance, remain distance, and total distance after the path interpolation runs for a specified amount of time are returned.",
        "A": "SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "B": "StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "C": "SimulateTimeAtDist(pPathIntplCommand, specificDistance)\u00a0",
        "D": "SimulatePositionAtTime(self, trajectoryInterpolator, timeElapsed)",
        "Answer(s)": "A"
    },
    {
        "No": 455,
        "Instruction": "Simulate a path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned.",
        "A": "SimulateTimeAtPos(pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex)\u00a0",
        "B": "StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "SimulateTimeAtPos(pSimulatePosCommand, specificPos)\u00a0",
        "D": "InterpolateTimeAtPositionPath(pPathIntplCommand, startPos, endPos, minIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 456,
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned.",
        "A": "SimulateTimeAtDist(pPathIntplCommand, specificDistance)\u00a0",
        "B": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "C": "SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "D": "DisplayTimeAtDistance(pathInterpolator, targetDistance)",
        "Answer(s)": "A"
    },
    {
        "No": 457,
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned.",
        "A": "SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "B": "StartPathIntplWithRotation_Trigger(channel, pTrigger)\u00a0",
        "C": "SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)\u00a0",
        "D": "SimulatePositionAtGivenTime_3D(self, positionInterpolationCommand, elapsedTimeMs)",
        "Answer(s)": "A"
    },
    {
        "No": 458,
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned",
        "A": "SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)\u00a0",
        "D": "SimulateTimeAtPos_3D_Extended(pPathCommand, startPos, endPos, referencePos, searchIndexMin)",
        "Answer(s)": "A"
    },
    {
        "No": 459,
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move time, remain time, and total time after the 3D path interpolation runs for the specified distance are returned.",
        "A": "SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)\u00a0",
        "B": "CreatePathIntplBuffer(axis, unsigned points)\u00a0",
        "C": "SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)\u00a0",
        "D": "EstimateTimeAtDist_3D(pPathInterpolateCmd, targetDistance)",
        "Answer(s)": "A"
    },
    {
        "No": 460,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "GetBacklashCompensation(axis)\u00a0",
        "D": "IsValidDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 461,
        "Instruction": "Start constant linear velocity control for an axis.",
        "A": "SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)\u00a0",
        "B": "CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "C": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "D": "SetConstantLinearVelocity(masterAxis, slaveAxis, centerPos, minRadius, posMaxRadius, negMaxRadius, constLinVel, initVelVariance)",
        "Answer(s)": "A"
    },
    {
        "No": 462,
        "Instruction": "Resolve constant linear velocity control for an axis.",
        "A": "ResolveConstantLinearVel(axis)\u00a0",
        "B": "StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "ResolveSync(slaveAxis)\u00a0",
        "D": "CalculateConstantLinearVelFromAxis(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 463,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "StopPathIntplLookahead(channel)\u00a0",
        "C": "SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "D": "IsDeviceValid(deviceId: str)",
        "Answer(s)": "A"
    },
    {
        "No": 464,
        "Instruction": "Start E-CAM control.",
        "A": "StartECAM(channel, pECAMData)\u00a0",
        "B": "GetPathIntplLookaheadBytesPerPoint()\u00a0",
        "C": "SetWatch(channel, pWatch)\u00a0",
        "D": "ModifyECAM(channel, pData)",
        "Answer(s)": "A"
    },
    {
        "No": 465,
        "Instruction": "Get E-CAM control parameters.",
        "A": "GetECAM(channel)\u00a0",
        "B": "StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "GetWatch(channel)\u00a0",
        "D": "GetECAMInfo(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 466,
        "Instruction": "Stop E-CAM control.",
        "A": "StopECAM(channel)\u00a0",
        "B": "ResolveConstantLinearVel(axis)\u00a0",
        "C": "StopLog(channel)\u00a0",
        "D": "StopEcamSignal(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 467,
        "Instruction": "Start dancer control.",
        "A": "StartDancerControl(axis, AdvSync_DancerControlOptions pDancerControlOptions)\u00a0",
        "B": "StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "C": "StopDancerControl(axis)\u00a0",
        "D": "LetsDance(axis, DancerControlSettings options)",
        "Answer(s)": "A"
    },
    {
        "No": 468,
        "Instruction": "Stop dancer control.",
        "A": "StopDancerControl(axis)\u00a0",
        "B": "StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "C": "StopSuperimpose(axis)\u00a0",
        "D": "endDancerControl(axis):",
        "Answer(s)": "A"
    },
    {
        "No": 469,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "ClearPathIntplWithRotation(channel)\u00a0",
        "C": "GetVersion()\u00a0",
        "D": "ErrorToMessage(errorCode)",
        "Answer(s)": "A"
    },
    {
        "No": 470,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "GetOutAnalogDataUCharEx(addr)\u00a0",
        "D": "ErrorToString_v2(errorCode)",
        "Answer(s)": "A"
    },
    {
        "No": 471,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)\u00a0",
        "C": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "D": "ApiLogDataToFormattedString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 472,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "Execute_AxisSel(pAxisSelection)",
        "C": "ClearTxPdoWrite(slaveId, index, subindex)\u00a0",
        "D": "FetchLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 473,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "AddCommand(axis, pCmd, count)\u00a0",
        "C": "SetVelocityFeedforwardGain(axis, gain)\u00a0",
        "D": "IsDeviceValidForUser(userId: int, deviceId: String)",
        "Answer(s)": "A"
    },
    {
        "No": 474,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "GetEmergencyStopParam()\u00a0",
        "D": "FetchCurrentVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 475,
        "Instruction": "Create a new cyclic buffer memory space for an axis.",
        "A": "OpenCyclicBuffer(axis, buffSize)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)\u00a0",
        "D": "OpenCircularBuffer(axis, size)",
        "Answer(s)": "A"
    },
    {
        "No": 476,
        "Instruction": "Create a new cyclic buffer memory space for multiple axes.",
        "A": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)\u00a0",
        "B": "GetStatus_AxisSel(pAxisSelection)\u00a0",
        "C": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)\u00a0",
        "D": "OpenCyclicBuffer_SelectAxis(pSelectedAxis, bufferSize)",
        "Answer(s)": "A"
    },
    {
        "No": 477,
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units.",
        "A": "OpenCyclicBuffer(axis, buffSize, sizeUnit)\u00a0",
        "B": "Abort_AxisSel(pAxisSelection)\u00a0",
        "C": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)\u00a0",
        "D": "revised_function_str = InitializeCyclicBuffer(axis, maxSize, unitSize)",
        "Answer(s)": "A"
    },
    {
        "No": 478,
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units.",
        "A": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)\u00a0",
        "B": "Execute(axis)",
        "C": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)\u00a0",
        "D": "OpenCyclicBuffer_AxisSelection(axis, maxSize, unit)",
        "Answer(s)": "A"
    },
    {
        "No": 479,
        "Instruction": "Close the cyclic buffer memory space of an axis.",
        "A": "CloseCyclicBuffer(axis)\u00a0",
        "B": "AddCommand(axis, pCmd, count)\u00a0",
        "C": "CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "D": "UpdateAxisBufferCyclic(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 480,
        "Instruction": "Close the cyclic buffer memory space of multiple axes.",
        "A": "CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)\u00a0",
        "D": "CloseCyclicBuffer_AxisSelection(axisSelectionParameter)",
        "Answer(s)": "A"
    },
    {
        "No": 481,
        "Instruction": "Add one position command data to the cyclic position command buffer of one axis.",
        "A": "AddCommand(axis, pCmd)\u00a0",
        "B": "OpenCyclicBuffer(axis, buffSize)\u00a0",
        "C": "AddCommand(axis, pCmd, count)\u00a0",
        "D": "registerCommand(newAxis, command).",
        "Answer(s)": "A"
    },
    {
        "No": 482,
        "Instruction": "Add any number of position command data to the cyclic position command buffer of one axis.",
        "A": "AddCommand(axis, pCmd, count)\u00a0",
        "B": "Execute(axis)",
        "C": "AddCommand_AxisSel(pAxisSelection, pCmds)\u00a0",
        "D": "CreateCommand(axis, command, quantity)",
        "Answer(s)": "A"
    },
    {
        "No": 483,
        "Instruction": "Add one position command data each to the cyclic position command buffer of multiple axes.",
        "A": "AddCommand_AxisSel(pAxisSelection, pCmds)\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "Continue_AxisSel(pAxisSelection)\u00a0",
        "D": "UpdateFunction_AxisSelection(pSelection, pCommands)",
        "Answer(s)": "A"
    },
    {
        "No": 484,
        "Instruction": "Add any number of position command data to the cyclic position command buffer of multiple axes.",
        "A": "AddCommand_AxisSel(pAxisSelection, pCmds, count)\u00a0",
        "B": "OpenCyclicBuffer(axis, buffSize)\u00a0",
        "C": "AddCommand_AxisSel(pAxisSelection, pCmds)\u00a0",
        "D": "UpdateAxisSelection(pAxisSelection, pCommands, count)",
        "Answer(s)": "A"
    },
    {
        "No": 485,
        "Instruction": "Start the execution of the cyclic position command buffer for a single axis.",
        "A": "Execute(axis)",
        "B": "CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "C": "Pause(axis)\u00a0",
        "D": "ExecuteAxis(axis_command)",
        "Answer(s)": "A"
    },
    {
        "No": 486,
        "Instruction": "Start the execution of the cyclic position command buffer for multiple axes.",
        "A": "Execute_AxisSel(pAxisSelection)",
        "B": "IsDeviceValid()\u00a0",
        "C": "Resume_AxisSel(pAxisSelection)\u00a0",
        "D": "Execute_AxisSelection(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 487,
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and clear the buffer.",
        "A": "Abort(axis)\u00a0",
        "B": "No alternative function available",
        "C": "Wait(axis)\u00a0",
        "D": "Terminate(axis)",
        "Answer(s)": "A"
    },
    {
        "No": 488,
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and clear the buffer.",
        "A": "Abort_AxisSel(pAxisSelection)\u00a0",
        "B": "OpenCyclicBuffer(axis, buffSize)\u00a0",
        "C": "Wait_AxisSel(pAxisSelection)\u00a0",
        "D": "Terminate_AxisSelection(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 489,
        "Instruction": "Get the cyclic position command buffer status of the specified axis.",
        "A": "GetStatus(axis)\u00a0",
        "B": "CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "C": "GetStatus()\u00a0",
        "D": "get_axis_status(axis):",
        "Answer(s)": "A"
    },
    {
        "No": 490,
        "Instruction": "Get the cyclic position command buffer status of the specified axes.",
        "A": "GetStatus_AxisSel(pAxisSelection)\u00a0",
        "B": "Execute_AxisSel(pAxisSelection)",
        "C": "Stop_AxisSel(pAxisSelection)\u00a0",
        "D": "GetAxisSelectionStatus(pSelectedAxis)",
        "Answer(s)": "A"
    },
    {
        "No": 491,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "C": "StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "D": "ErrorCodeToString(err)",
        "Answer(s)": "A"
    },
    {
        "No": 492,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "SetEvent(pEventData)\u00a0",
        "C": "SetOptions(channel, pOptions)\u00a0",
        "D": "ApiLogToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 493,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "SetEvent(pEventData)\u00a0",
        "C": "StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 494,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "StartMemoryLog(channel)\u00a0",
        "D": "IsDeviceDataValid()",
        "Answer(s)": "A"
    },
    {
        "No": 495,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)\u00a0",
        "C": "StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)\u00a0",
        "D": "RetrieveVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 496,
        "Instruction": "Set an event.",
        "A": "SetEvent(pEventInput, pEventOutput)\u00a0",
        "B": "RemoveEvent(id)\u00a0",
        "C": "SetEvent_Option(pEventInput, pEventOutput, pOption)\u00a0",
        "D": "SetEventDetails(eventInputData, eventOutputData)",
        "Answer(s)": "A"
    },
    {
        "No": 497,
        "Instruction": "Set an event.",
        "A": "SetEvent_Option(pEventInput, pEventOutput, pOption)\u00a0",
        "B": "StopPSO(channel)\u00a0",
        "C": "SetEventOutput(id, pEventOutput)\u00a0",
        "D": "SetEventOption(pInputEvent, pOutputEvent, option)",
        "Answer(s)": "A"
    },
    {
        "No": 498,
        "Instruction": "Set an event.",
        "A": "SetEvent_ID(pEventInput, pEventOutput, id)\u00a0",
        "B": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "C": "SetEventOutput(id, pEventOutput)\u00a0",
        "D": "ModifyEventID(pInputEvent, pOutputEvent, newID)",
        "Answer(s)": "A"
    },
    {
        "No": 499,
        "Instruction": "Set an event.",
        "A": "SetEvent_ID_Option(pEventInput, pEventOutput, id, pOption)\u00a0",
        "B": "GetSoftwareTouchProbe(channel)\u00a0",
        "C": "SetEventInput(id, pEventInput)\u00a0",
        "D": "SetEvent_Option_ID(pEventInput, pEventOutput, id, pOption)",
        "Answer(s)": "A"
    },
    {
        "No": 500,
        "Instruction": "Get the input function module ID and output function module ID of an existing event.",
        "A": "GetEventModuleId(id)\u00a0",
        "B": "SetPlannedVelOverrideSingleData(channel, sData)\u00a0",
        "C": "GetInputModuleId()\u00a0",
        "D": "GetModuleEventId(moduleId)",
        "Answer(s)": "A"
    },
    {
        "No": 501,
        "Instruction": "Get an event.",
        "A": "GetEvent_InOut(id)\u00a0",
        "B": "GetPSOConfig(channel)\u00a0",
        "C": "GetEventOption(id)\u00a0",
        "D": "RetrieveEventDetailsInOut(eventId)",
        "Answer(s)": "A"
    },
    {
        "No": 502,
        "Instruction": "Get the option settings of an existing event.",
        "A": "GetEventOption(id)\u00a0",
        "B": "GetEvent(id)\u00a0",
        "C": "GetEventInput(id)\u00a0",
        "D": "GetEventDetails(event_id)",
        "Answer(s)": "A"
    },
    {
        "No": 503,
        "Instruction": "This function sets the input function of an event.",
        "A": "SetEventInput(id, pEventInput)\u00a0",
        "B": "EnableEvent(id, enable)\u00a0",
        "C": "SetEvent(pEventInput, pEventOutput)\u00a0",
        "D": "SetEvent(id, eventDetails)",
        "Answer(s)": "A"
    },
    {
        "No": 504,
        "Instruction": "This function sets the output function of an event.",
        "A": "SetEventOutput(id, pEventOutput)\u00a0",
        "B": "ClearAllEvent()\u00a0",
        "C": "SetEvent_ID(pEventInput, pEventOutput, id)\u00a0",
        "D": "SetEventOutputByEventId(eventId, eventOutput)",
        "Answer(s)": "A"
    },
    {
        "No": 505,
        "Instruction": "This function gets the input function of an event.",
        "A": "GetEventInput(id)\u00a0",
        "B": "SetEvent(pEventData)\u00a0",
        "C": "GetEventOutput(id)\u00a0",
        "D": "GetEventData(id)",
        "Answer(s)": "A"
    },
    {
        "No": 506,
        "Instruction": "This function gets the output function of an event.",
        "A": "GetEventOutput(id)\u00a0",
        "B": "SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "C": "GetEvent_InOut(id)\u00a0",
        "D": "GetEventInfo(event_id)",
        "Answer(s)": "A"
    },
    {
        "No": 507,
        "Instruction": "Get the IDs of all existing events.",
        "A": "GetAllEventID()\u00a0",
        "B": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "C": "GetAllDevices()\u00a0",
        "D": "GetAllEventIDsByCategory(category: str)",
        "Answer(s)": "A"
    },
    {
        "No": 508,
        "Instruction": "Get the IDs of all existing events.",
        "A": "GetAllEventID_In(filterInputModuleId)\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "GetInputModuleId()\u00a0",
        "D": "GetAllEventIDByInputModuleId(filterInputModuleId)",
        "Answer(s)": "A"
    },
    {
        "No": 509,
        "Instruction": "Get the IDs of all existing events.",
        "A": "GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)\u00a0",
        "B": "StartPSO(channel)\u00a0",
        "C": "GetAllEventID_In(filterInputModuleId)\u00a0",
        "D": "GetAllEventIDs(filterInputModuleID, filterOutputModuleID)",
        "Answer(s)": "A"
    },
    {
        "No": 510,
        "Instruction": "Enable or disable an existing event.",
        "A": "EnableEvent(id, enable)\u00a0",
        "B": "SetOutputData(moduleId, data, dataSize)\u00a0",
        "C": "EnableSyncGroup(groupId, enable)\u00a0",
        "D": "EnableNotification(id, enabled)",
        "Answer(s)": "A"
    },
    {
        "No": 511,
        "Instruction": "Remove an existing event.",
        "A": "RemoveEvent(id)\u00a0",
        "B": "GetPlannedVelOverrideConfig(channel)\u00a0",
        "C": "GetEventInput(id)\u00a0",
        "D": "UpdateEvent(id)",
        "Answer(s)": "A"
    },
    {
        "No": 512,
        "Instruction": "Clear all existing events.",
        "A": "ClearAllEvent()\u00a0",
        "B": "GetPlannedVelOverrideDataCount(channel)\u00a0",
        "C": "GetAllEventID()\u00a0",
        "D": "ClearAllEvents()",
        "Answer(s)": "A"
    },
    {
        "No": 513,
        "Instruction": "Set an event.",
        "A": "SetEvent(pEventData)\u00a0",
        "B": "GetPSOConfig(channel)\u00a0",
        "C": "SetEventInput(id, pEventInput)\u00a0",
        "D": "ModifyEvent(pEventData)",
        "Answer(s)": "A"
    },
    {
        "No": 514,
        "Instruction": "Get the parameters of an event.",
        "A": "GetEvent(id)\u00a0",
        "B": "GetEventModuleId(id)\u00a0",
        "C": "GetAllEventID()\u00a0",
        "D": "RetrieveEventByID(eventID)",
        "Answer(s)": "A"
    },
    {
        "No": 515,
        "Instruction": "Set parameters for a software touch probe channel. A software touch probe channel is able to latch onto the encoder data of an axis when a particular input signal is detected.",
        "A": "SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)\u00a0",
        "B": "SetPSOSingleData(channel, sData)\u00a0",
        "C": "IsSoftwareTouchProbeLatched(channel)\u00a0",
        "D": "SetSoftwareTouchProbeConfiguration(channel, enable, axis, byteAddrs, bitOffset, logic, mode)",
        "Answer(s)": "A"
    },
    {
        "No": 516,
        "Instruction": "Enable a software touch probe channel. A software touch probe channel will only latch encoder data when enabled.",
        "A": "EnableSoftwareTouchProbe(channel, enable)\u00a0",
        "B": "SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "C": "EnableHardwareTouchProbe(axis, enable)\u00a0",
        "D": "python\nEnableTouchProbeSoftware(channel, enable)\n",
        "Answer(s)": "A"
    },
    {
        "No": 517,
        "Instruction": "Get parameters of a software touch probe channel.",
        "A": "GetSoftwareTouchProbe(channel)\u00a0",
        "B": "SetEvent(pEventInput, pEventOutput)\u00a0",
        "C": "GetStatus(channel)\u00a0",
        "D": "GetHardwareTouchProbe(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 518,
        "Instruction": "Check whether a software touch probe channel has latched data.",
        "A": "IsSoftwareTouchProbeLatched(channel)\u00a0",
        "B": "StartPlannedVelOverride(channel)\u00a0",
        "C": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "D": "IsTouchProbeLatched(channelNumber)",
        "Answer(s)": "A"
    },
    {
        "No": 519,
        "Instruction": "Get latched data of software touch probe.",
        "A": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "B": "ErrorToString(errCode)\u00a0",
        "C": "EnableSoftwareTouchProbe(channel, enable)\u00a0",
        "D": "CaptureTouchProbeCounterValue(channel, latched, counterValue)",
        "Answer(s)": "A"
    },
    {
        "No": 520,
        "Instruction": "Set parameters for the hardware touch probe of an axis. A hardware touch probe latches the encoder data of the axis when the touch probe input signal is detected.",
        "A": "SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)\u00a0",
        "B": "GetEvent_InOut(id)\u00a0",
        "C": "EnableHardwareTouchProbe(axis, enable)\u00a0",
        "D": "SetHardwareTouchProbeConfig(axis, enabled, operationMode, triggerInput, channelNumber)",
        "Answer(s)": "A"
    },
    {
        "No": 521,
        "Instruction": "Get parameters and current state of the hardware touch probe of an axis.",
        "A": "GetHardwareTouchProbeStatus(axis)\u00a0",
        "B": "SetEvent(pEventData)\u00a0",
        "C": "EnableHardwareTouchProbe(axis, enable)\u00a0",
        "D": "CheckHardwareTouchProbeStatus(input_axis)",
        "Answer(s)": "A"
    },
    {
        "No": 522,
        "Instruction": "Enable or disable the hardware touch probe of an axis.",
        "A": "EnableHardwareTouchProbe(axis, enable)\u00a0",
        "B": "StartPSO(channel)\u00a0",
        "C": "SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)\u00a0",
        "D": "ToggleHardwareTouchProbe(axis, enabled)",
        "Answer(s)": "A"
    },
    {
        "No": 523,
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met.",
        "A": "SetPSOConfig(channel, pType, pMinDurationMilliseconds)\u00a0",
        "B": "GetEventOutput(id)\u00a0",
        "C": "SetOptions(channel, pOptions)\u00a0",
        "D": "SetPSOConfiguration(channelName, parameterType, minDurationMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 524,
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met.",
        "A": "SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)\u00a0",
        "B": "GetPSOIntervalData(channel)\u00a0",
        "C": "SetOptions(channel, pOptions)\u00a0",
        "D": "SetPSOConfigOption(channelId, optionType, minDurationMs, specificOption)",
        "Answer(s)": "A"
    },
    {
        "No": 525,
        "Instruction": "Get parameters for a position synchronous output channel.",
        "A": "GetPSOConfig(channel)\u00a0",
        "B": "StopPSO(channel)\u00a0",
        "C": "GetLogOption(channel)\u00a0",
        "D": "GetPSOConfigDetails(clientId, channelType)",
        "Answer(s)": "A"
    },
    {
        "No": 526,
        "Instruction": "Get parameters for a position synchronous output channel.",
        "A": "GetPSOConfig_Option(channel)\u00a0",
        "B": "SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)\u00a0",
        "C": "GetPSOConfig(channel)\u00a0",
        "D": "GetPSOConfig_Options(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 527,
        "Instruction": "Set a single data point for a position synchronous output channel.",
        "A": "SetPSOSingleData(channel, sData)\u00a0",
        "B": "GetHardwareTouchProbeStatus(axis)\u00a0",
        "C": "SetLogFilePath(channel, pPath)\u00a0",
        "D": "SetSinglePSOData(sData, channel)",
        "Answer(s)": "A"
    },
    {
        "No": 528,
        "Instruction": "Set multiple data points for a position synchronous output channel.",
        "A": "SetPSOMultipleData(channel, count, pMData)\u00a0",
        "B": "GetEventOption(id)\u00a0",
        "C": "SetPlannedVelOverrideSingleData(channel, sData)\u00a0",
        "D": "SetPSOMultipleData(channel_id, num_readings, data_array)",
        "Answer(s)": "A"
    },
    {
        "No": 529,
        "Instruction": "Set data points over a range for a position synchronous output channel.",
        "A": "SetPSOIntervalData(channel, rangeStart, rangeEnd, interval)\u00a0",
        "B": "GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)\u00a0",
        "C": "GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "D": "SetPSODataInterval(channelId, startTimestamp, endTimestamp, samplingInterval)",
        "Answer(s)": "A"
    },
    {
        "No": 530,
        "Instruction": "Get all data points that are currently set for a position synchronous output channel.",
        "A": "GetPSOData(channel, maxCount)\u00a0",
        "B": "SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)\u00a0",
        "C": "SetPSOSingleData(channel, sData)\u00a0",
        "D": "RetrievePSOData(channelName, numberOfRecords)",
        "Answer(s)": "A"
    },
    {
        "No": 531,
        "Instruction": "Get the number of data points that are currently set for a position synchronous output channel.",
        "A": "GetPSODataCount(channel)\u00a0",
        "B": "GetEventModuleId(id)\u00a0",
        "C": "GetPSOIntervalData(channel)\u00a0",
        "D": "FetchPSODataCount(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 532,
        "Instruction": "Get the range and interval of a position synchronous output channel.",
        "A": "GetPSOIntervalData(channel)\u00a0",
        "B": "GetPlannedVelOverrideStatus(channel)\u00a0",
        "C": "GetPSODataCount(channel)\u00a0",
        "D": "GetPSOChannelData(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 533,
        "Instruction": "Start a position synchronous output channel. A position synchronous output channel must be started before it controls the output.",
        "A": "StartPSO(channel)\u00a0",
        "B": "GetPSOConfig(channel)\u00a0",
        "C": "StartLog(channel)\u00a0",
        "D": "InitiatePSO(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 534,
        "Instruction": "Stop a position synchronous output channel. A stopped position synchronous output channel will stop controlling any outputs.",
        "A": "StopPSO(channel)\u00a0",
        "B": "SetEventInput(id, pEventInput)\u00a0",
        "C": "GetOptions(channel)\u00a0",
        "D": "StopProcessing(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 535,
        "Instruction": "Get the state of a position synchronous output channel.",
        "A": "GetPSOStatus(channel)\u00a0",
        "B": "StartPSO(channel)\u00a0",
        "C": "GetPSODataCount(channel)\u00a0",
        "D": "GetPowerStatus(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 536,
        "Instruction": "Set parameters for a planned velocity override channel. A planned velocity override channel is able to override the velocity of an axis when certain conditions, such as an axis reaching a certain position, are met.",
        "A": "SetPlannedVelOverrideConfig(channel, type, pSource, axis)\u00a0",
        "B": "StartPlannedVelOverride(channel)\u00a0",
        "C": "SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "D": "SetPlannedVelOverrideConfigWithAxis(channel, type, source, axisNumber)",
        "Answer(s)": "A"
    },
    {
        "No": 537,
        "Instruction": "Get parameters for a planned velocity override channel.",
        "A": "GetPlannedVelOverrideConfig(channel)\u00a0",
        "B": "GetPSODataCount(channel)\u00a0",
        "C": "GetPlannedVelOverrideDataCount(channel)\u00a0",
        "D": "GetPlannedVelOverrideConfigData(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 538,
        "Instruction": "Set a single data point for a planned velocity override channel.",
        "A": "SetPlannedVelOverrideSingleData(channel, sData)\u00a0",
        "B": "GetEvent(id)\u00a0",
        "C": "GetPlannedVelOverrideData(channel, maxCount)\u00a0",
        "D": "SetPlannedVelocityOverrideData(channel, data)",
        "Answer(s)": "A"
    },
    {
        "No": 539,
        "Instruction": "Set multiple data points for a planned velocity override channel.",
        "A": "SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "B": "SetEvent(pEventInput, pEventOutput)\u00a0",
        "C": "SetPlannedVelOverrideSingleData(channel, sData)\u00a0",
        "D": "SetPlannedVelOverridesBulkData(channel, num_overrides, overrides_data)",
        "Answer(s)": "A"
    },
    {
        "No": 540,
        "Instruction": "Get all data points that are currently set for a planned velocity override channel.",
        "A": "GetPlannedVelOverrideData(channel, maxCount)\u00a0",
        "B": "GetPlannedVelOverrideDataCount(channel)\u00a0",
        "C": "SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "D": "GetPlannedVelOverrideDataWithLimit(channelName, maxItems)",
        "Answer(s)": "A"
    },
    {
        "No": 541,
        "Instruction": "Get the number of data points that are currently set for a planned velocity override channel.",
        "A": "GetPlannedVelOverrideDataCount(channel)\u00a0",
        "B": "RemoveEvent(id)\u00a0",
        "C": "StopPlannedVelOverride(channel)\u00a0",
        "D": "GetPlannedVelocityOverrideDataCount(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 542,
        "Instruction": "Start a planned velocity override channel. A planned velocity override channel must be started before it controls the output.",
        "A": "StartPlannedVelOverride(channel)\u00a0",
        "B": "GetPSOIntervalData(channel)\u00a0",
        "C": "GetPlannedVelOverrideConfig(channel)\u00a0",
        "D": "BeginPlannedVelocityOverride(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 543,
        "Instruction": "Stop a planned velocity override channel. A stopped planned velocity override channel will stop controlling any outputs.",
        "A": "StopPlannedVelOverride(channel)\u00a0",
        "B": "SetPSOConfig(channel, pType, pMinDurationMilliseconds)\u00a0",
        "C": "GetPlannedVelOverrideConfig(channel)\u00a0",
        "D": "StopPlannedVelocityOverride(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 544,
        "Instruction": "Get the state of a planned velocity override channel.",
        "A": "GetPlannedVelOverrideStatus(channel)\u00a0",
        "B": "GetEventOption(id)\u00a0",
        "C": "StartPlannedVelOverride(channel)\u00a0",
        "D": "GetPlannedVelOverrideStatusUpdated(vehicleChannel)",
        "Answer(s)": "A"
    },
    {
        "No": 545,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "GetInitialOutBytesInterruptId(addr, size)\u00a0",
        "C": "SetOutAnalogDataUInt(addr, analogData)\u00a0",
        "D": "ErrorToString(code)",
        "Answer(s)": "A"
    },
    {
        "No": 546,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "GetOutByteEx(addr)\u00a0",
        "C": "GetPSOConfig_Option(channel)\u00a0",
        "D": "ApiLogDataToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 547,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "SetOutAnalogDataUShort(addr, analogData)\u00a0",
        "C": "Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 548,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "GetOutBitEx(addr, bit)\u00a0",
        "D": "IsDeviceAuthenticationValid()",
        "Answer(s)": "A"
    },
    {
        "No": 549,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "GetInAnalogDataUInt(addr)\u00a0",
        "C": "GetBacklashCompensation(axis)\u00a0",
        "D": "GetSoftwareVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 550,
        "Instruction": "Set the value of an output bit.",
        "A": "SetOutBit(addr, bit, data)\u00a0",
        "B": "GetOutAnalogDataInt(addr)\u00a0",
        "C": "SetMBit(addr, bit, data)\u00a0",
        "D": "SetOutputBit(address, bitPosition, value)",
        "Answer(s)": "A"
    },
    {
        "No": 551,
        "Instruction": "Set the value of an output byte.",
        "A": "SetOutByte(addr, data)\u00a0",
        "B": "SetOutBytesEx(addr, size, pData)\u00a0",
        "C": "SetMByte(addr, data)\u00a0",
        "D": "SetOutputByte(address, value)",
        "Answer(s)": "A"
    },
    {
        "No": 552,
        "Instruction": "Set the value of multiple output bytes.",
        "A": "SetOutBytes(addr, size, pData)\u00a0",
        "B": "SetInputData(moduleId, data, dataSize)\u00a0",
        "C": "SetOutBytesEx(addr, size, pData)\u00a0",
        "D": "SetOutputBytes(address, length, data)",
        "Answer(s)": "A"
    },
    {
        "No": 553,
        "Instruction": "Set the value of multiple output bits.",
        "A": "SetOutBits(pByte, pBit, pData, count)\u00a0",
        "B": "SetOutAnalogDataUIntEx(addr, analogData)\u00a0",
        "C": "SetOutBit(addr, bit, data)\u00a0",
        "D": "SetOutputBits(bytePointer, bitIndex, dataValue, count)",
        "Answer(s)": "A"
    },
    {
        "No": 554,
        "Instruction": "Set the value of output analog data spanning one byte.",
        "A": "SetOutAnalogDataChar(addr, analogData)\u00a0",
        "B": "GetOutputModuleId()\u00a0",
        "C": "SetOutAnalogDataCharEx(addr, analogData)\u00a0",
        "D": "SetOutputVoltage(addr, voltage)",
        "Answer(s)": "A"
    },
    {
        "No": 555,
        "Instruction": "Set the value of output analog data spanning one byte.",
        "A": "SetOutAnalogDataUChar(addr, analogData)\u00a0",
        "B": "GetInBytesEx(addr, size)\u00a0",
        "C": "SetMAnalogDataUChar(addr, analogData)\u00a0",
        "D": "SetOutAnalogDataUInt16(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 556,
        "Instruction": "Set the value of output analog data spanning two bytes.",
        "A": "SetOutAnalogDataShort(addr, analogData)\u00a0",
        "B": "GetOutAnalogDataUCharEx(addr)\u00a0",
        "C": "SetOutAnalogDataChar(addr, analogData)\u00a0",
        "D": "SetAnalogOutputShort(address, data)",
        "Answer(s)": "A"
    },
    {
        "No": 557,
        "Instruction": "Set the value of output analog data spanning two bytes.",
        "A": "SetOutAnalogDataUShort(addr, analogData)\u00a0",
        "B": "SetOutBit(addr, bit, data)\u00a0",
        "C": "SetOutAnalogDataShortEx(addr, analogData)\u00a0",
        "D": "SetAnalogOutputUShort(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 558,
        "Instruction": "Set the value of output analog data spanning four bytes.",
        "A": "SetOutAnalogDataInt(addr, analogData)\u00a0",
        "B": "SetOutByte(addr, data)\u00a0",
        "C": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "D": "SetOutputAnalogDataInt(addrIndex, analogValue)",
        "Answer(s)": "A"
    },
    {
        "No": 559,
        "Instruction": "Set the value of output analog data spanning four bytes.",
        "A": "SetOutAnalogDataUInt(addr, analogData)\u00a0",
        "B": "GetInAnalogDataCharEx(addr)\u00a0",
        "C": "SetOutAnalogDataIntEx(addr, analogData)\u00a0",
        "D": "SetAnalogOutputDataInt(addr, analogValue)",
        "Answer(s)": "A"
    },
    {
        "No": 560,
        "Instruction": "Get the value of an input bit.",
        "A": "GetInBit(addr, bit)\u00a0",
        "B": "SetOutBytes(addr, size, pData)\u00a0",
        "C": "GetMBitEx(addr, bit)\u00a0",
        "D": "SetBit(addr, bit_num)",
        "Answer(s)": "A"
    },
    {
        "No": 561,
        "Instruction": "Get the value of an input byte.",
        "A": "GetInByte(addr)\u00a0",
        "B": "GetInAnalogDataUIntEx(addr)\u00a0",
        "C": "GetOutByte(addr)\u00a0",
        "D": "GetByteAtAddress(memory_address)",
        "Answer(s)": "A"
    },
    {
        "No": 562,
        "Instruction": "Get the value of multiple input bytes.",
        "A": "GetInBytes(addr, size)\u00a0",
        "B": "GetInitialOutByteInterruptId(addr)\u00a0",
        "C": "GetMBytesEx(addr, size)\u00a0",
        "D": "GetBytes(address, length)",
        "Answer(s)": "A"
    },
    {
        "No": 563,
        "Instruction": "Get the value of input analog data spanning one byte.",
        "A": "GetInAnalogDataChar(addr)\u00a0",
        "B": "SetOutBytes(addr, size, pData)\u00a0",
        "C": "GetInAnalogDataUCharEx(addr)\u00a0",
        "D": "GetAnalogDataChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 564,
        "Instruction": "Get the value of input analog data spanning one byte.",
        "A": "GetInAnalogDataUChar(addr)\u00a0",
        "B": "GetInByte(addr)\u00a0",
        "C": "GetMAnalogDataUChar(addr)\u00a0",
        "D": "GetAnalogDataUChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 565,
        "Instruction": "Get the value of input analog data spanning two bytes.",
        "A": "GetInAnalogDataShort(addr)\u00a0",
        "B": "GetInputData(buff, buffSize, dataSize, initialState)\u00a0",
        "C": "GetMAnalogDataShort(addr)\u00a0",
        "D": "FetchAnalogShortData(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 566,
        "Instruction": "Get the value of input analog data spanning two bytes.",
        "A": "GetInAnalogDataUShort(addr)\u00a0",
        "B": "SetOutBytesEx(addr, size, pData)\u00a0",
        "C": "GetInAnalogDataShortEx(addr)\u00a0",
        "D": "GetAnalogDataUShort(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 567,
        "Instruction": "Get the value of input analog data spanning four bytes.",
        "A": "GetInAnalogDataInt(addr)\u00a0",
        "B": "GetInAnalogDataIntEx(addr)\u00a0",
        "C": "GetInAnalogDataIntEx(addr)\u00a0",
        "D": "GetAnalogDataIntFromAddress(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 568,
        "Instruction": "Get the value of input analog data spanning four bytes.",
        "A": "GetInAnalogDataUInt(addr)\u00a0",
        "B": "GetOutAnalogDataShort(addr)\u00a0",
        "C": "GetInAnalogDataUIntEx(addr)\u00a0",
        "D": "GetAnalogDataUInt(addr, channel)",
        "Answer(s)": "A"
    },
    {
        "No": 569,
        "Instruction": "Get the value of an output bit.",
        "A": "GetOutBit(addr, bit)\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "GetInBit(addr, bit)\u00a0",
        "D": "ExtractBit(addr, bit)",
        "Answer(s)": "A"
    },
    {
        "No": 570,
        "Instruction": "Get the value of an output byte.",
        "A": "GetOutByte(addr)\u00a0",
        "B": "GetInitialOutByteInterruptId(addr)\u00a0",
        "C": "GetOutBytes(addr, size)\u00a0",
        "D": "RetrieveByteFromAddress(address)",
        "Answer(s)": "A"
    },
    {
        "No": 571,
        "Instruction": "Get the value of multiple output bytes.",
        "A": "GetOutBytes(addr, size)\u00a0",
        "B": "GetOutAnalogDataUCharEx(addr)\u00a0",
        "C": "GetOutBytesEx(addr, size)\u00a0",
        "D": "GetOutputData(destination_addr, data_size)",
        "Answer(s)": "A"
    },
    {
        "No": 572,
        "Instruction": "Get the value of output analog data spanning one byte.",
        "A": "GetOutAnalogDataChar(addr)\u00a0",
        "B": "GetInAnalogDataChar(addr)\u00a0",
        "C": "GetInAnalogDataChar(addr)\u00a0",
        "D": "GetAnalogDataCharOut(address)",
        "Answer(s)": "A"
    },
    {
        "No": 573,
        "Instruction": "Get the value of output analog data spanning one byte.",
        "A": "GetOutAnalogDataUChar(addr)\u00a0",
        "B": "SetOutAnalogDataUCharEx(addr, analogData)\u00a0",
        "C": "GetMAnalogDataUChar(addr)\u00a0",
        "D": "GetAnalogDataUChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 574,
        "Instruction": "Get the value of output analog data spanning two bytes.",
        "A": "GetOutAnalogDataShort(addr)\u00a0",
        "B": "GetInAnalogDataUShort(addr)\u00a0",
        "C": "GetOutAnalogDataShortEx(addr)\u00a0",
        "D": "GetAnalogDataOutShort(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 575,
        "Instruction": "Get the value of output analog data spanning two bytes.",
        "A": "GetOutAnalogDataUShort(addr)\u00a0",
        "B": "GetOutByte(addr)\u00a0",
        "C": "GetOutAnalogDataShortEx(addr)\u00a0",
        "D": "GetAnalogDataUShort(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 576,
        "Instruction": "Get the value of output analog data spanning four bytes.",
        "A": "GetOutAnalogDataInt(addr)\u00a0",
        "B": "SetOutputData(moduleId, data, dataSize)\u00a0",
        "C": "GetOutAnalogDataIntEx(addr)\u00a0",
        "D": "GetAnalogDataInt(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 577,
        "Instruction": "Get the value of output analog data spanning four bytes.",
        "A": "GetOutAnalogDataUInt(addr)\u00a0",
        "B": "GetInAnalogDataUShortEx(addr)\u00a0",
        "C": "GetMAnalogDataUInt(addr)\u00a0",
        "D": "GetAnalogDataUInt(addr, channelId)",
        "Answer(s)": "A"
    },
    {
        "No": 578,
        "Instruction": "Set the value of an output bit.",
        "A": "SetOutBitEx(addr, bit, data)\u00a0",
        "B": "GetInAnalogDataUIntEx(addr)\u00a0",
        "C": "SetOutBit(addr, bit, data)\u00a0",
        "D": "SetOutBit(addr: int, bit_pos: int, value: bool)",
        "Answer(s)": "A"
    },
    {
        "No": 579,
        "Instruction": "Set the value of an output byte.",
        "A": "SetOutByteEx(addr, data)\u00a0",
        "B": "GetInputData(buff, buffSize, dataSize)\u00a0",
        "C": "SetOutBitEx(addr, bit, data)\u00a0",
        "D": "SetOutputData(address, value)",
        "Answer(s)": "A"
    },
    {
        "No": 580,
        "Instruction": "Set the value of multiple output bytes.",
        "A": "SetOutBytesEx(addr, size, pData)\u00a0",
        "B": "GetInitialOutByte(addr)\u00a0",
        "C": "GetOutBytesEx(addr, size)\u00a0",
        "D": "SetOutputBytesExtended(address, byte_size, data_buffer)",
        "Answer(s)": "A"
    },
    {
        "No": 581,
        "Instruction": "Set the value of multiple output bits.",
        "A": "SetOutBitsEx(pByte, pBit, pData, count)\u00a0",
        "B": "SetOutByte(addr, data)\u00a0",
        "C": "SetMBitsEx(pByte, pBit, pData, count)\u00a0",
        "D": "SetOutBits(pByteData, startingBitIndex, newData, numberOfBits)",
        "Answer(s)": "A"
    },
    {
        "No": 582,
        "Instruction": "Set the value of output analog data spanning one byte.",
        "A": "SetOutAnalogDataCharEx(addr, analogData)\u00a0",
        "B": "GetInputModuleId()\u00a0",
        "C": "SetOutAnalogDataUChar(addr, analogData)\u00a0",
        "D": "SetAnalogDataCharEx(addr, newData)",
        "Answer(s)": "A"
    },
    {
        "No": 583,
        "Instruction": "Set the value of output analog data spanning one byte.",
        "A": "SetOutAnalogDataUCharEx(addr, analogData)\u00a0",
        "B": "SetOutAnalogDataIntEx(addr, analogData)\u00a0",
        "C": "SetOutAnalogDataCharEx(addr, analogData)\u00a0",
        "D": "SetOutAnalogDataFloatEx(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 584,
        "Instruction": "Set the value of output analog data spanning two bytes.",
        "A": "SetOutAnalogDataShortEx(addr, analogData)\u00a0",
        "B": "GetOutAnalogDataCharEx(addr)\u00a0",
        "C": "SetOutAnalogDataShort(addr, analogData)\u00a0",
        "D": "SetAnalogDataShortEx(addr, newData)",
        "Answer(s)": "A"
    },
    {
        "No": 585,
        "Instruction": "Set the value of output analog data spanning two bytes.",
        "A": "SetOutAnalogDataUShortEx(addr, analogData)\u00a0",
        "B": "GetOutAnalogDataUIntEx(addr)\u00a0",
        "C": "SetOutAnalogDataShort(addr, analogData)\u00a0",
        "D": "SetOutAnalogDataUShort(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 586,
        "Instruction": "Set the value of output analog data spanning four bytes.",
        "A": "SetOutAnalogDataIntEx(addr, analogData)\u00a0",
        "B": "SetOutAnalogDataUChar(addr, analogData)\u00a0",
        "C": "SetMAnalogDataUIntEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataOutput(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 587,
        "Instruction": "Set the value of output analog data spanning four bytes.",
        "A": "SetOutAnalogDataUIntEx(addr, analogData)\u00a0",
        "B": "GetOutAnalogDataChar(addr)\u00a0",
        "C": "SetOutAnalogDataUInt(addr, analogData)\u00a0",
        "D": "SetOutputAnalogDataUInt(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 588,
        "Instruction": "Get the value of an input bit.",
        "A": "GetInBitEx(addr, bit)\u00a0",
        "B": "GetInAnalogDataShortEx(addr)\u00a0",
        "C": "GetMBitEx(addr, bit)\u00a0",
        "D": "GetBitValueAtAddress(address, position)",
        "Answer(s)": "A"
    },
    {
        "No": 589,
        "Instruction": "Get the value of an input byte.",
        "A": "GetInByteEx(addr)\u00a0",
        "B": "SetOutAnalogDataUShortEx(addr, analogData)\u00a0",
        "C": "GetMByteEx(addr)\u00a0",
        "D": "FetchByteAt(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 590,
        "Instruction": "Get the value of multiple input bytes.",
        "A": "GetInBytesEx(addr, size)\u00a0",
        "B": "GetInAnalogDataChar(addr)\u00a0",
        "C": "GetInBytes(addr, size)\u00a0",
        "D": "GetMemoryChunkEx(addr, length)",
        "Answer(s)": "A"
    },
    {
        "No": 591,
        "Instruction": "Get the value of input analog data spanning one byte.",
        "A": "GetInAnalogDataCharEx(addr)\u00a0",
        "B": "SetOutByte(addr, data)\u00a0",
        "C": "GetMAnalogDataUCharEx(addr)\u00a0",
        "D": "RetrieveAnalogInputDataExtended(address)",
        "Answer(s)": "A"
    },
    {
        "No": 592,
        "Instruction": "Get the value of input analog data spanning one byte.",
        "A": "GetInAnalogDataUCharEx(addr)\u00a0",
        "B": "SetInitialOutByte(addr, data, enable)\u00a0",
        "C": "GetMAnalogDataCharEx(addr)\u00a0",
        "D": "GetAnalogDataUChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 593,
        "Instruction": "Get the value of input analog data spanning two bytes",
        "A": "GetInAnalogDataShortEx(addr)\u00a0",
        "B": "SetOutBytesEx(addr, size, pData)\u00a0",
        "C": "GetMAnalogDataUShortEx(addr)\u00a0",
        "D": "GetShortAnalogDataEx(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 594,
        "Instruction": "Get the value of input analog data spanning two bytes.",
        "A": "GetInAnalogDataUShortEx(addr)\u00a0",
        "B": "GetInAnalogDataUIntEx(addr)\u00a0",
        "C": "GetInAnalogDataShortEx(addr)\u00a0",
        "D": "GetInAnalogDataUShortEx(address)",
        "Answer(s)": "A"
    },
    {
        "No": 595,
        "Instruction": "Get the value of input analog data spanning four bytes.",
        "A": "GetInAnalogDataIntEx(addr)\u00a0",
        "B": "GetOutByte(addr)\u00a0",
        "C": "GetInAnalogDataUIntEx(addr)\u00a0",
        "D": "GetAnalogInputDataIntEx(address)",
        "Answer(s)": "A"
    },
    {
        "No": 596,
        "Instruction": "Get the value of input analog data spanning four bytes.",
        "A": "GetInAnalogDataUIntEx(addr)\u00a0",
        "B": "SetOutAnalogDataShort(addr, analogData)\u00a0",
        "C": "GetMAnalogDataIntEx(addr)\u00a0",
        "D": "GetPositionAnalogDataInt(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 597,
        "Instruction": "Get the value of an output bit.",
        "A": "GetOutBitEx(addr, bit)\u00a0",
        "B": "SetOutAnalogDataShortEx(addr, analogData)\u00a0",
        "C": "SetOutBitEx(addr, bit, data)\u00a0",
        "D": "GetBitExtraction(addr, bit_position)",
        "Answer(s)": "A"
    },
    {
        "No": 598,
        "Instruction": "Get the value of an output byte.",
        "A": "GetOutByteEx(addr)\u00a0",
        "B": "SetOutBitEx(addr, bit, data)\u00a0",
        "C": "GetOutBytesEx(addr, size)\u00a0",
        "D": "GetOutputByte(addr):",
        "Answer(s)": "A"
    },
    {
        "No": 599,
        "Instruction": "Get the value of multiple output bytes.",
        "A": "GetOutBytesEx(addr, size)\u00a0",
        "B": "GetInAnalogDataUIntEx(addr)\u00a0",
        "C": "GetMBytes(addr, size)\u00a0",
        "D": "GetOutputData(addr_ptr, num_elements)",
        "Answer(s)": "A"
    },
    {
        "No": 600,
        "Instruction": "Get the value of output analog data spanning one byte.",
        "A": "GetOutAnalogDataCharEx(addr)\u00a0",
        "B": "GetOutByte(addr)\u00a0",
        "C": "GetInAnalogDataCharEx(addr)\u00a0",
        "D": "GetAnalogDataCharFromAddressEx(address)",
        "Answer(s)": "A"
    },
    {
        "No": 601,
        "Instruction": "Get the value of output analog data spanning one byte.",
        "A": "GetOutAnalogDataUCharEx(addr)\u00a0",
        "B": "SetOutAnalogDataUCharEx(addr, analogData)\u00a0",
        "C": "GetMAnalogDataUCharEx(addr)\u00a0",
        "D": "GetAnalogDataUChar(address)",
        "Answer(s)": "A"
    },
    {
        "No": 602,
        "Instruction": "Get the value of output analog data spanning two bytes.",
        "A": "GetOutAnalogDataShortEx(addr)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "GetOutAnalogDataUShortEx(addr)\u00a0",
        "D": "GetAnalogDataShortEx(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 603,
        "Instruction": "Get the value of output analog data spanning two bytes.",
        "A": "GetOutAnalogDataUShortEx(addr)\u00a0",
        "B": "GetOutBitEx(addr, bit)\u00a0",
        "C": "GetInAnalogDataUShortEx(addr)\u00a0",
        "D": "GetOutAnalogDataUShortEx(address)",
        "Answer(s)": "A"
    },
    {
        "No": 604,
        "Instruction": "Get the value of output analog data spanning four bytes.",
        "A": "GetOutAnalogDataIntEx(addr)\u00a0",
        "B": "GetOutAnalogDataShortEx(addr)\u00a0",
        "C": "GetOutAnalogDataInt(addr)\u00a0",
        "D": "GetAnalogDataIntEx(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 605,
        "Instruction": "Get the value of output analog data spanning four bytes.",
        "A": "GetOutAnalogDataUIntEx(addr)\u00a0",
        "B": "SetOutBitEx(addr, bit, data)\u00a0",
        "C": "GetOutAnalogDataUInt(addr)\u00a0",
        "D": "GetOutAnalogDataUInt(addr, options)",
        "Answer(s)": "A"
    },
    {
        "No": 606,
        "Instruction": "Set the initial value of an output byte that is applied when communication is started.",
        "A": "SetInitialOutByte(addr, data, enable)\u00a0",
        "B": "GetInAnalogDataChar(addr)\u00a0",
        "C": "GetInitialOutBytes(addr, size)\u00a0",
        "D": "SetInitialOutputByte(address, value, isEnabled)",
        "Answer(s)": "A"
    },
    {
        "No": 607,
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started.",
        "A": "SetInitialOutBytes(addr, size, pData, pEnable)\u00a0",
        "B": "GetInAnalogDataUCharEx(addr)\u00a0",
        "C": "SetInitialOutByte(addr, data, enable)\u00a0",
        "D": "SetInitialOutboundData(addr, size, dataBuffer, enableFlag)",
        "Answer(s)": "A"
    },
    {
        "No": 608,
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started.",
        "A": "GetInitialOutByte(addr)\u00a0",
        "B": "GetOutByteEx(addr)\u00a0",
        "C": "GetInitialOutBytes(addr, size)\u00a0",
        "D": "FetchInitialOutputByte(address)",
        "Answer(s)": "A"
    },
    {
        "No": 609,
        "Instruction": "Get the initial values of multiple output bytes that are applied when communication is started.",
        "A": "GetInitialOutBytes(addr, size)\u00a0",
        "B": "GetOutBytesEx(addr, size)\u00a0",
        "C": "GetOutBytesEx(addr, size)\u00a0",
        "D": "FetchInitialOutBytes(address, byte_count)",
        "Answer(s)": "A"
    },
    {
        "No": 610,
        "Instruction": "Get the ID of the interrupt (cyclic handler) that will set the initial value of the specified output byte.",
        "A": "GetInitialOutByteInterruptId(addr)\u00a0",
        "B": "GetOutAnalogDataUShort(addr)\u00a0",
        "C": "GetInitialOutByte(addr)\u00a0",
        "D": "GetInitialOutputByteInterruptId(address)",
        "Answer(s)": "A"
    },
    {
        "No": 611,
        "Instruction": "Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the specified output bytes.",
        "A": "GetInitialOutBytesInterruptId(addr, size)\u00a0",
        "B": "SetOutBitsEx(pByte, pBit, pData, count)\u00a0",
        "C": "GetInitialOutBytes(addr, size)\u00a0",
        "D": "GetInitialOutputBytesInterruptId(address, length)",
        "Answer(s)": "A"
    },
    {
        "No": 612,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "OpenApiLogFile(pPath)\u00a0",
        "C": "Import_SysPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "D": "ErrorToMessage(errNumber)",
        "Answer(s)": "A"
    },
    {
        "No": 613,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "SetInputData(moduleId, data, dataSize)\u00a0",
        "C": "SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)\u00a0",
        "D": "ApiLogDataToString(logDataPtr, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 614,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "SetMAnalogDataChar(addr, analogData)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 615,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "GetEventModuleId(id)\u00a0",
        "D": "IsDeviceValidated()",
        "Answer(s)": "A"
    },
    {
        "No": 616,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "StartLog(channel)\u00a0",
        "C": "GetInAnalogDataUShortEx(addr)\u00a0",
        "D": "GetAppVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 617,
        "Instruction": "Start logging data.",
        "A": "StartLog(channel)\u00a0",
        "B": "OpenApiLogFile(pPath)\u00a0",
        "C": "ResetLog(channel)\u00a0",
        "D": "InitializeLogging(channel_id):",
        "Answer(s)": "A"
    },
    {
        "No": 618,
        "Instruction": "Stop logging data.",
        "A": "StopLog(channel)\u00a0",
        "B": "GetLogOption(channel)\u00a0",
        "C": "StopECAM(channel)\u00a0",
        "D": "UpdateLogChannel(channel_name)",
        "Answer(s)": "A"
    },
    {
        "No": 619,
        "Instruction": "Reset the log settings, options, and statuses for the specified log channel.",
        "A": "ResetLog(channel)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "GetLogOption(channel)\u00a0",
        "D": "UpdateLog(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 620,
        "Instruction": "Set the log header string that is copied to the beginning of the log file.",
        "A": "SetLogHeader(channel, pLogHeader)\u00a0",
        "B": "StartMemoryLog(channel)\u00a0",
        "C": "SetLog(channel, input)\u00a0",
        "D": "SetChannelLogHeader(channelName, logHeader)",
        "Answer(s)": "A"
    },
    {
        "No": 621,
        "Instruction": "Specify data to be collected by the logging operation.",
        "A": "SetLog(channel, input)\u00a0",
        "B": "StopMemoryLog(channel)\u00a0",
        "C": "StopLog(channel)\u00a0",
        "D": "SetChannelLog(channel, input)",
        "Answer(s)": "A"
    },
    {
        "No": 622,
        "Instruction": "Set the log options for a log channel.",
        "A": "SetLogOption(channel, pOption)\u00a0",
        "B": "OpenMemoryLogBuffer(channel)\u00a0",
        "C": "SetOptions(channel, pOptions)\u00a0",
        "D": "SetLoggingOption(loggingChannel, optionParams)",
        "Answer(s)": "A"
    },
    {
        "No": 623,
        "Instruction": "Get the log options for a log channel.",
        "A": "GetLogOption(channel)\u00a0",
        "B": "SetLogFilePath(channel, pPath)\u00a0",
        "C": "GetOptions(channel)\u00a0",
        "D": "GetLoggingOption(channel_name)",
        "Answer(s)": "A"
    },
    {
        "No": 624,
        "Instruction": "Set the file path for a log channel.",
        "A": "SetLogFilePath(channel, pPath)\u00a0",
        "B": "SetMemoryMLog(channel, pMAddress, size)\u00a0",
        "C": "GetLogFilePath(channel)\u00a0",
        "D": "SetLogFilePath(channel_id, file_path)",
        "Answer(s)": "A"
    },
    {
        "No": 625,
        "Instruction": "Get the file path for a log channel.",
        "A": "GetLogFilePath(channel)\u00a0",
        "B": "SetMemoryLog(channel, pAxisSelection, pOption)\u00a0",
        "C": "GetWatch(channel)\u00a0",
        "D": "GetLogFilePathForChannel(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 626,
        "Instruction": "Get the current status of the data logging operation.",
        "A": "GetLogStatus(channel)\u00a0",
        "B": "ResetLog(channel)\u00a0",
        "C": "GetPSOStatus(channel)\u00a0",
        "D": "GetChannelLogStatus(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 627,
        "Instruction": "Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained.",
        "A": "GetDetailLogStatus(channel)\u00a0",
        "B": "SetLogHeader(channel, pLogHeader)\u00a0",
        "C": "GetPathIntplLookaheadStatus(channel)\u00a0",
        "D": "GetChannelDetailLogStatus(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 628,
        "Instruction": "Specify data to be collected by the logging operation.",
        "A": "SetLog(channel, pPath, milliseconds, samplePeriodInCycles, pAxisSelection, pOptions, mode)",
        "B": "GetInputData(buff, buffSize, dataSize)\u00a0",
        "C": "StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "D": "SetLogChannel(channel, filePath, duration, sampleRate, axisSelection, options, mode)",
        "Answer(s)": "A"
    },
    {
        "No": 629,
        "Instruction": "Open the memory log buffer.",
        "A": "OpenMemoryLogBuffer(channel)\u00a0",
        "B": "SetMemoryMLog(channel, pMAddress, size)\u00a0",
        "C": "CloseMemoryLogBuffer(channel)\u00a0",
        "D": "CreateMemoryLogBuffer(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 630,
        "Instruction": "Close the memory log buffer.",
        "A": "CloseMemoryLogBuffer(channel)\u00a0",
        "B": "SetMemoryIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)\u00a0",
        "C": "StartMemoryLog(channel)\u00a0",
        "D": "CloseBufferedLog(channel)",
        "Answer(s)": "A"
    },
    {
        "No": 631,
        "Instruction": "Start the memory log operation.",
        "A": "StartMemoryLog(channel)\u00a0",
        "B": "GetLogOption(channel)\u00a0",
        "C": "GetMemoryLogData(channel)\u00a0",
        "D": "StartMemoryLogging(channel, parameters)",
        "Answer(s)": "A"
    },
    {
        "No": 632,
        "Instruction": "Stop the memory log operation.",
        "A": "StopMemoryLog(channel)\u00a0",
        "B": "SetLogOption(channel, pOption)\u00a0",
        "C": "OpenMemoryLogBuffer(channel)\u00a0",
        "D": "StopMemoryLogging (channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 633,
        "Instruction": "Get the current status of the memory log operation.",
        "A": "GetMemoryLogStatus(channel)\u00a0",
        "B": "SetIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)\u00a0",
        "C": "GetPSOStatus(channel)\u00a0",
        "D": "GetMemoryLogStatusForChannel(channel_id)",
        "Answer(s)": "A"
    },
    {
        "No": 634,
        "Instruction": "Set the parameters for the API log.",
        "A": "SetApiLog(pPath)",
        "B": "SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)\u00a0",
        "C": "StopApiLog()\u00a0",
        "D": "SetLogPath(log_path)",
        "Answer(s)": "A"
    },
    {
        "No": 635,
        "Instruction": "Start logging data to the API log.",
        "A": "StartApiLog()\u00a0",
        "B": "GetMemoryLogData(channel)\u00a0",
        "C": "SetApiLog(pPath)",
        "D": "UpdateApiLogStart()",
        "Answer(s)": "A"
    },
    {
        "No": 636,
        "Instruction": "Stop logging data to the API log.",
        "A": "StopApiLog()\u00a0",
        "B": "OpenMemoryLogBuffer(channel)\u00a0",
        "C": "Stop(axis)\u00a0",
        "D": "EndApiLog()",
        "Answer(s)": "A"
    },
    {
        "No": 637,
        "Instruction": "Get the current status of the API log.",
        "A": "GetApiLogStatus()\u00a0",
        "B": "SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)\u00a0",
        "C": "GetLogStatus(channel)\u00a0",
        "D": "FetchApiLogStatus()",
        "Answer(s)": "A"
    },
    {
        "No": 638,
        "Instruction": "Open an API log file to extract information from the contents.",
        "A": "OpenApiLogFile(pPath)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "CloseApiLogFile(pFile)",
        "D": "OpenLogFile(pFilePath)",
        "Answer(s)": "A"
    },
    {
        "No": 639,
        "Instruction": "Extract the information of one API function call from the API log file.",
        "A": "GetApiLogData_ApiLogInfo(pFile, buffSize)\u00a0",
        "B": "CloseApiLogFile(pFile)",
        "C": "GetOutputData(buff, buffSize, dataSize)\u00a0",
        "D": "GetApiLogData_ApiLogInfo(pFileName, bufferSize)",
        "Answer(s)": "A"
    },
    {
        "No": 640,
        "Instruction": "Close an API log file.",
        "A": "CloseApiLogFile(pFile)",
        "B": "SetLog(channel, input)\u00a0",
        "C": "ClearAllEvent()\u00a0",
        "D": "CloseLogFile(pLogFileHandle)",
        "Answer(s)": "A"
    },
    {
        "No": 641,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "C": "StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "D": "ConvertErrorCodeToString(code)",
        "Answer(s)": "A"
    },
    {
        "No": 642,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "GetMBit(addr, bit)\u00a0",
        "C": "GetParam_Axis(axis)\u00a0",
        "D": "ApiLogDataToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 643,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "SetMAnalogDataUShort(addr, analogData)\u00a0",
        "C": "SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "D": "FetchLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 644,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetMAnalogDataCharEx(addr)\u00a0",
        "C": "ErrorToString(errCode)\u00a0",
        "D": "IsDeviceValid(deviceId: string)",
        "Answer(s)": "A"
    },
    {
        "No": 645,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "SetMAnalogDataInt(addr, analogData)\u00a0",
        "C": "ClearPathIntplWithRotation(channel)\u00a0",
        "D": "FetchVersionInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 646,
        "Instruction": "Set the value of a user memory bit.",
        "A": "SetMBit(addr, bit, data)\u00a0",
        "B": "SetMAnalogDataInt(addr, analogData)\u00a0",
        "C": "SetOutBit(addr, bit, data)\u00a0",
        "D": "SetBit(data_address, bit_position, new_bit_value)",
        "Answer(s)": "A"
    },
    {
        "No": 647,
        "Instruction": "Set the value of a user memory byte.",
        "A": "SetMByte(addr, data)\u00a0",
        "B": "SetMAnalogDataUChar(addr, analogData)\u00a0",
        "C": "SetMBitEx(addr, bit, data)\u00a0",
        "D": "SetMemoryByte(address, value)",
        "Answer(s)": "A"
    },
    {
        "No": 648,
        "Instruction": "Set the value of multiple user memory bytes.",
        "A": "SetMBytes(addr, size, pData)\u00a0",
        "B": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "C": "SetOutBytesEx(addr, size, pData)\u00a0",
        "D": "SetMemoryBytes(address, numBytes, data)",
        "Answer(s)": "A"
    },
    {
        "No": 649,
        "Instruction": "Set the value of multiple user memory bits.",
        "A": "SetMBits(pByte, pBit, pData, count)\u00a0",
        "B": "GetMAnalogDataUIntEx(addr)\u00a0",
        "C": "SetMBit(addr, bit, data)\u00a0",
        "D": "SetMultipleBits(pBuffer, startIndex, bitValues, numBits)",
        "Answer(s)": "A"
    },
    {
        "No": 650,
        "Instruction": "Set the value of user memory analog data spanning one byte.",
        "A": "SetMAnalogDataChar(addr, analogData)\u00a0",
        "B": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "C": "SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataChar(address, data)",
        "Answer(s)": "A"
    },
    {
        "No": 651,
        "Instruction": "Set the value of user memory analog data spanning one byte.",
        "A": "SetMAnalogDataUChar(addr, analogData)\u00a0",
        "B": "SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "C": "SetMAnalogDataChar(addr, analogData)\u00a0",
        "D": "SetMAnalogDataUChar(addr, newAnalogData)",
        "Answer(s)": "A"
    },
    {
        "No": 652,
        "Instruction": "Set the value of user memory analog data spanning two bytes.",
        "A": "SetMAnalogDataShort(addr, analogData)\u00a0",
        "B": "SetMBits(pByte, pBit, pData, count)\u00a0",
        "C": "SetMAnalogDataShortEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataShort(address, data)",
        "Answer(s)": "A"
    },
    {
        "No": 653,
        "Instruction": "Set the value of user memory analog data spanning two bytes.",
        "A": "SetMAnalogDataUShort(addr, analogData)\u00a0",
        "B": "SetMBytesEx(addr, size, pData)\u00a0",
        "C": "SetMAnalogDataShortEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataUShort(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 654,
        "Instruction": "Set the value of user memory analog data spanning four bytes.",
        "A": "SetMAnalogDataInt(addr, analogData)\u00a0",
        "B": "SetMBit(addr, bit, data)\u00a0",
        "C": "SetOutAnalogDataUInt(addr, analogData)\u00a0",
        "D": "SetAnalogDataInt(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 655,
        "Instruction": "Set the value of user memory analog data spanning four bytes.",
        "A": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "B": "GetMAnalogDataUInt(addr)\u00a0",
        "C": "SetMAnalogDataIntEx(addr, analogData)\u00a0",
        "D": "SetMAnalogDataUIntUpdated(addr, newAnalogData)",
        "Answer(s)": "A"
    },
    {
        "No": 656,
        "Instruction": "Get the value of a user memory bit.",
        "A": "GetMBit(addr, bit)\u00a0",
        "B": "GetMAnalogDataInt(addr)\u00a0",
        "C": "GetInBit(addr, bit)\u00a0",
        "D": "FetchBitAtMemoryAddress(addr, bit)",
        "Answer(s)": "A"
    },
    {
        "No": 657,
        "Instruction": "Get the value of a user memory byte.",
        "A": "GetMByte(addr)\u00a0",
        "B": "SetMBits(pByte, pBit, pData, count)\u00a0",
        "C": "GetInByte(addr)\u00a0",
        "D": "GetMByteAtAddress(address)",
        "Answer(s)": "A"
    },
    {
        "No": 658,
        "Instruction": "Get the value of multiple user memory bytes.",
        "A": "GetMBytes(addr, size)\u00a0",
        "B": "SetMAnalogDataUShort(addr, analogData)\u00a0",
        "C": "GetOutBytes(addr, size)\u00a0",
        "D": "GetMegaBytes(address, size)",
        "Answer(s)": "A"
    },
    {
        "No": 659,
        "Instruction": "Get the value of user memory analog data spanning one byte.",
        "A": "GetMAnalogDataChar(addr)\u00a0",
        "B": "GetMAnalogDataUInt(addr)\u00a0",
        "C": "GetMAnalogDataUChar(addr)\u00a0",
        "D": "GetAnalogDataChar(address)",
        "Answer(s)": "A"
    },
    {
        "No": 660,
        "Instruction": "Get the value of user memory analog data spanning one byte.",
        "A": "GetMAnalogDataUChar(addr)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "GetMAnalogDataCharEx(addr)\u00a0",
        "D": "GetAnalogDataUChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 661,
        "Instruction": "Get the value of user memory analog data spanning two bytes.",
        "A": "GetMAnalogDataShort(addr)\u00a0",
        "B": "SetMByte(addr, data)\u00a0",
        "C": "GetInAnalogDataShort(addr)\u00a0",
        "D": "FetchAnalogDataShort(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 662,
        "Instruction": "Get the value of user memory analog data spanning two bytes.",
        "A": "GetMAnalogDataUShort(addr)\u00a0",
        "B": "SetMAnalogDataUChar(addr, analogData)\u00a0",
        "C": "GetInAnalogDataUShort(addr)\u00a0",
        "D": "GetAnalogDataUShort(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 663,
        "Instruction": "Get the value of user memory analog data spanning four bytes.",
        "A": "GetMAnalogDataInt(addr)\u00a0",
        "B": "SetMBytes(addr, size, pData)\u00a0",
        "C": "GetMAnalogDataIntEx(addr)\u00a0",
        "D": "GetAnalogDataInt(address)",
        "Answer(s)": "A"
    },
    {
        "No": 664,
        "Instruction": "Get the value of user memory analog data spanning four bytes.",
        "A": "GetMAnalogDataUInt(addr)\u00a0",
        "B": "GetMByteEx(addr)\u00a0",
        "C": "GetMAnalogDataInt(addr)\u00a0",
        "D": "GetAnalogDataUInt(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 665,
        "Instruction": "Set the value of a user memory bit.",
        "A": "SetMBitEx(addr, bit, data)\u00a0",
        "B": "SetMAnalogDataUCharEx(addr, analogData)\u00a0",
        "C": "SetMByte(addr, data)\u00a0",
        "D": "SetBitExtended(address, bitPosition, value)",
        "Answer(s)": "A"
    },
    {
        "No": 666,
        "Instruction": "Set the value of a user memory byte.",
        "A": "SetMByteEx(addr, data)\u00a0",
        "B": "GetMAnalogDataUShort(addr)\u00a0",
        "C": "SetMBytesEx(addr, size, pData)\u00a0",
        "D": "WriteMByteEx(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 667,
        "Instruction": "Set the value of multiple user memory bytes.",
        "A": "SetMBytesEx(addr, size, pData)\u00a0",
        "B": "GetMBitEx(addr, bit)\u00a0",
        "C": "SetOutBytes(addr, size, pData)\u00a0",
        "D": "SetMBytes(addr, numBytes, dataBlock)",
        "Answer(s)": "A"
    },
    {
        "No": 668,
        "Instruction": "Set the value of multiple user memory bits.",
        "A": "SetMBitsEx(pByte, pBit, pData, count)\u00a0",
        "B": "GetMBytes(addr, size)\u00a0",
        "C": "SetOutBitsEx(pByte, pBit, pData, count)\u00a0",
        "D": "UpdateBitsInByteEx(pByteData, bitPosition, newData, bitCount)",
        "Answer(s)": "A"
    },
    {
        "No": 669,
        "Instruction": "Set the value of user memory analog data spanning one byte.",
        "A": "SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "B": "SetMAnalogDataChar(addr, analogData)\u00a0",
        "C": "SetOutAnalogDataCharEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataEx(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 670,
        "Instruction": "Set the value of user memory analog data spanning one byte.",
        "A": "SetMAnalogDataUCharEx(addr, analogData)\u00a0",
        "B": "GetMAnalogDataShortEx(addr)\u00a0",
        "C": "SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "D": "SetMAnalogDataUChar(addr, analogData)",
        "Answer(s)": "A"
    },
    {
        "No": 671,
        "Instruction": "Set the value of user memory analog data spanning two bytes.",
        "A": "SetMAnalogDataShortEx(addr, analogData)\u00a0",
        "B": "SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "C": "SetOutAnalogDataShortEx(addr, analogData)\u00a0",
        "D": "SetMAnalogDataShort(addr, data)",
        "Answer(s)": "A"
    },
    {
        "No": 672,
        "Instruction": "Set the value of user memory analog data spanning two bytes.",
        "A": "SetMAnalogDataUShortEx(addr, analogData)\u00a0",
        "B": "GetMBytesEx(addr, size)\u00a0",
        "C": "SetMAnalogDataShort(addr, analogData)\u00a0",
        "D": "SetMAnalogDataUShortEx(addr, newAnalogData)",
        "Answer(s)": "A"
    },
    {
        "No": 673,
        "Instruction": "Set the value of user memory analog data spanning four bytes.",
        "A": "SetMAnalogDataIntEx(addr, analogData)\u00a0",
        "B": "SetMAnalogDataUShortEx(addr, analogData)\u00a0",
        "C": "SetMAnalogDataUIntEx(addr, analogData)\u00a0",
        "D": "SetAnalogData(addr, analogValues)",
        "Answer(s)": "A"
    },
    {
        "No": 674,
        "Instruction": "Set the value of user memory analog data spanning four bytes.",
        "A": "SetMAnalogDataUIntEx(addr, analogData)\u00a0",
        "B": "GetMAnalogDataUShort(addr)\u00a0",
        "C": "SetMAnalogDataIntEx(addr, analogData)\u00a0",
        "D": "SetAnalogDataUIntEx(address, data)",
        "Answer(s)": "A"
    },
    {
        "No": 675,
        "Instruction": "Get the value of a user memory bit.",
        "A": "GetMBitEx(addr, bit)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "GetInBit(addr, bit)\u00a0",
        "D": "GetMBitRange(addr, start_bit, end_bit)",
        "Answer(s)": "A"
    },
    {
        "No": 676,
        "Instruction": "Get the value of a user memory byte.",
        "A": "GetMByteEx(addr)\u00a0",
        "B": "GetMBytesEx(addr, size)\u00a0",
        "C": "GetInByteEx(addr)\u00a0",
        "D": "GetMegabyteExtended(address)",
        "Answer(s)": "A"
    },
    {
        "No": 677,
        "Instruction": "Get the value of multiple user memory bytes.",
        "A": "GetMBytesEx(addr, size)\u00a0",
        "B": "IsDeviceValid()\u00a0",
        "C": "GetMBytes(addr, size)\u00a0",
        "D": "ReadMemoryBlockEx(address, blockSize)",
        "Answer(s)": "A"
    },
    {
        "No": 678,
        "Instruction": "Get the value of user memory analog data spanning one byte.",
        "A": "GetMAnalogDataCharEx(addr)\u00a0",
        "B": "SetMAnalogDataUShortEx(addr, analogData)\u00a0",
        "C": "GetMAnalogDataUCharEx(addr)\u00a0",
        "D": "GetAnalogDataAtAddress(addr):",
        "Answer(s)": "A"
    },
    {
        "No": 679,
        "Instruction": "Get the value of user memory analog data spanning one byte.",
        "A": "GetMAnalogDataUCharEx(addr)\u00a0",
        "B": "SetMAnalogDataUIntEx(addr, analogData)\u00a0",
        "C": "GetMAnalogDataUChar(addr)\u00a0",
        "D": "GetAnalogDataUChar(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 680,
        "Instruction": "Get the value of user memory analog data spanning two bytes.",
        "A": "GetMAnalogDataShortEx(addr)\u00a0",
        "B": "SetMAnalogDataShort(addr, analogData)\u00a0",
        "C": "GetMAnalogDataUShortEx(addr)\u00a0",
        "D": "GetAnalogShortData(addr)",
        "Answer(s)": "A"
    },
    {
        "No": 681,
        "Instruction": "Get the value of user memory analog data spanning two bytes.",
        "A": "GetMAnalogDataUShortEx(addr)\u00a0",
        "B": "SetMAnalogDataUInt(addr, analogData)\u00a0",
        "C": "GetInAnalogDataUShortEx(addr)\u00a0",
        "D": "GetAnalogDataUShortExtended(address)",
        "Answer(s)": "A"
    },
    {
        "No": 682,
        "Instruction": "Get the value of user memory analog data spanning four bytes.",
        "A": "GetMAnalogDataIntEx(addr)\u00a0",
        "B": "SetMAnalogDataShortEx(addr, analogData)\u00a0",
        "C": "GetInAnalogDataUIntEx(addr)\u00a0",
        "D": "FetchAnalogDataIntByAddressEx(address)",
        "Answer(s)": "A"
    },
    {
        "No": 683,
        "Instruction": "Get the value of user memory analog data spanning four bytes.",
        "A": "GetMAnalogDataUIntEx(addr)\u00a0",
        "B": "SetMAnalogDataUChar(addr, analogData)\u00a0",
        "C": "GetMAnalogDataInt(addr)\u00a0",
        "D": "GetAnalogMeasurementDataUintExtended(address)",
        "Answer(s)": "A"
    },
    {
        "No": 684,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "GetAllDevices()\u00a0",
        "C": "IsDeviceValid()\u00a0",
        "D": "ErrorToStringFormatted(errorCode)",
        "Answer(s)": "A"
    },
    {
        "No": 685,
        "Instruction": "Get a string representation of the raw data of an API log.",
        "A": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "GetOutAnalogDataUInt(addr)\u00a0",
        "D": "ApiLogDataToString(logData, dataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 686,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "SetDeviceWaitEvent(errCode)",
        "C": "Execute(channel)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 687,
        "Instruction": "Get the version of the IMDll.",
        "A": "GetIMDllVersion()\u00a0",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "GetVersion()\u00a0",
        "D": "GetImDllVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 688,
        "Instruction": "Append a string to a file.",
        "A": "PrintToFile(filePath, format)\u00a0",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "OpenApiLogFile(pPath)\u00a0",
        "D": "SaveToFile(file_path, file_format)",
        "Answer(s)": "A"
    },
    {
        "No": 689,
        "Instruction": "Append a string to a file.",
        "A": "PrintToFileIfExist(filePath, format)\u00a0",
        "B": "GetWatchDog()\u00a0",
        "C": "Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "D": "SaveFileIfExists(filePath, fileFormat)",
        "Answer(s)": "A"
    },
    {
        "No": 690,
        "Instruction": "Get the character string stored in the WMX3 engine message output buffer.",
        "A": "GetStdOutStr()\u00a0",
        "B": "PrintToServerConsole(format)\u00a0",
        "C": "GetStatistic()\u00a0",
        "D": "GetStandardOutputString()",
        "Answer(s)": "A"
    },
    {
        "No": 691,
        "Instruction": "Get the size of the string stored in the WMX3 engine message output buffer.",
        "A": "GetStdOutDataSize()",
        "B": "GetModuleInfo(moduleId)\u00a0",
        "C": "GetHomeData()\u00a0",
        "D": "RetrieveStdOutDataSize():",
        "Answer(s)": "A"
    },
    {
        "No": 692,
        "Instruction": "Clear the string stored in the WMX3 engine message output buffer.",
        "A": "ClearStdOut()",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "GetStdOutDataSize()",
        "D": "ClearConsoleOutput()",
        "Answer(s)": "A"
    },
    {
        "No": 693,
        "Instruction": "Release resources related to the WMX3 engine message output buffer.",
        "A": "ReleaseStdOut()",
        "B": "CompareWindowsUpdates()\u00a0",
        "C": "ReleaseEStop()\u00a0",
        "D": "ReleaseStdOutBuffer():",
        "Answer(s)": "A"
    },
    {
        "No": 694,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetModuleSuspend()\u00a0",
        "C": "GetMAnalogDataInt(addr)\u00a0",
        "D": "IsValidDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 695,
        "Instruction": "Start the WMX3 engine without creating a device.",
        "A": "StartEngine(path)",
        "B": "GetLibVersion()\u00a0",
        "C": "RestartEngine(path)",
        "D": "InitializeEngine(filePath)",
        "Answer(s)": "A"
    },
    {
        "No": 696,
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine.",
        "A": "RestartEngine(path)",
        "B": "PrintToServerConsole(format)\u00a0",
        "C": "GetEngineStatus()\u00a0",
        "D": "RevertEngine(path)",
        "Answer(s)": "A"
    },
    {
        "No": 697,
        "Instruction": "Stop the currently running WMX3 engine.",
        "A": "StopEngine()",
        "B": "GetDeviceID()\u00a0",
        "C": "StopLog(channel)\u00a0",
        "D": "ShutdownEngine():",
        "Answer(s)": "A"
    },
    {
        "No": 698,
        "Instruction": "Create a device to interface with the WMX3 engine.",
        "A": "CreateDevice(path)",
        "B": "SetDeviceName(name)\u00a0",
        "C": "ResetDeviceWaitEvent()",
        "D": "UpdateDevice(path)",
        "Answer(s)": "A"
    },
    {
        "No": 699,
        "Instruction": "Close a device.",
        "A": "CloseDevice()\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "IsDeviceValid()\u00a0",
        "D": "CloseConnection()",
        "Answer(s)": "A"
    },
    {
        "No": 700,
        "Instruction": "Get the device ID number of the device.",
        "A": "GetDeviceID()\u00a0",
        "B": "SetDeviceName(name)\u00a0",
        "C": "GetDeviceName()\u00a0",
        "D": "GetDeviceSerialNumber()",
        "Answer(s)": "A"
    },
    {
        "No": 701,
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out.",
        "A": "AutoQuitWithoutActiveDev(quit)\u00a0",
        "B": "ResetDeviceWaitEvent()",
        "C": "StartPathIntplWithRotation_Point(channel, point)\u00a0",
        "D": "AutoQuitWithoutActiveDev(withConfirmation)",
        "Answer(s)": "A"
    },
    {
        "No": 702,
        "Instruction": "Set the watchdog time out period for the device that called this function.",
        "A": "SetWatchdog(watchdog)\u00a0",
        "B": "SetDeviceWaitEvent(errCode)",
        "C": "SetWatch(channel, pWatch)\u00a0",
        "D": "SetAlarmSystem(watchdog_system)",
        "Answer(s)": "A"
    },
    {
        "No": 703,
        "Instruction": "Set the watchdog time out period for a specific device.",
        "A": "SetWatchdog(deviceId, watchdog)\u00a0",
        "B": "GetDeviceName()\u00a0",
        "C": "CreateDevice(path)",
        "D": "setWatchdogConfig(deviceId, configOptions)",
        "Answer(s)": "A"
    },
    {
        "No": 704,
        "Instruction": "Get the watchdog time out period and the current watchdog count.",
        "A": "GetWatchDog()\u00a0",
        "B": "ReleaseStdOut()",
        "C": "GetWatch(channel)\u00a0",
        "D": "GetWatchDogConfiguration()",
        "Answer(s)": "A"
    },
    {
        "No": 705,
        "Instruction": "Reset the watchdog count of a device.",
        "A": "ResetWatchdogTimer()\u00a0",
        "B": "RestartEngine(path)",
        "C": "SetWatchdog(deviceId, watchdog)\u00a0",
        "D": "RefreshWatchdogTimer()",
        "Answer(s)": "A"
    },
    {
        "No": 706,
        "Instruction": "Configure a device to collect API execution statistics data.",
        "A": "SetStatistic(enable)\u00a0",
        "B": "SetDeviceName(name)\u00a0",
        "C": "SetSingleTurn(axis, enable. encoderCount)\u00a0",
        "D": "ToggleStatistic(enable_toggle)",
        "Answer(s)": "A"
    },
    {
        "No": 707,
        "Instruction": "Read the currently collected API execution statistics data.",
        "A": "GetStatistic()\u00a0",
        "B": "GetDeviceName()\u00a0",
        "C": "GetStatus()\u00a0",
        "D": "GetStatisticsMetrics()",
        "Answer(s)": "A"
    },
    {
        "No": 708,
        "Instruction": "Set the interrupt (cyclic handler) associated with the calling device.",
        "A": "SetInterruptId(interrputId)\u00a0",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "SetUpdatePeriod(period)\u00a0",
        "D": "SetInterruptIdWithPriority(interruptId, priority)",
        "Answer(s)": "A"
    },
    {
        "No": 709,
        "Instruction": "Get the interrupt (cyclic handler) associated with the calling device.",
        "A": "GetInterruptId(interrputId)\u00a0",
        "B": "PrintToFile(filePath, format)\u00a0",
        "C": "SetEventOutput(id, pEventOutput)\u00a0",
        "D": "GetInterruptById(interruptId)",
        "Answer(s)": "A"
    },
    {
        "No": 710,
        "Instruction": "Start communication with the servo network.",
        "A": "StartCommunication()",
        "B": "GetEngineStatus()\u00a0",
        "C": "StopCommunication()",
        "D": "InitiateCommunication():",
        "Answer(s)": "A"
    },
    {
        "No": 711,
        "Instruction": "Stop communication with the servo network.",
        "A": "StopCommunication()",
        "B": "SleepAtEngine(microSecond)\u00a0",
        "C": "StartCommunication()",
        "D": "EndCommunication()",
        "Answer(s)": "A"
    },
    {
        "No": 712,
        "Instruction": "Obtain information of the modules that are loaded by the engine.",
        "A": "GetModulesInfo()\u00a0",
        "B": "AutoQuitWithoutActiveDev(quit)\u00a0",
        "C": "GetModuleInfo(moduleId)\u00a0",
        "D": "GetModulesDetails()",
        "Answer(s)": "A"
    },
    {
        "No": 713,
        "Instruction": "Obtain information of a single module that is loaded by the engine.",
        "A": "GetModuleInfo(moduleId)\u00a0",
        "B": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "C": "GetModuleId()\u00a0",
        "D": "GetModuleDetails(moduleId)",
        "Answer(s)": "A"
    },
    {
        "No": 714,
        "Instruction": "Obtain the status of the engine.",
        "A": "GetEngineStatus()\u00a0",
        "B": "SetInterruptId(interrputId)\u00a0",
        "C": "GetStatus(axis)\u00a0",
        "D": "GetEngineStatusInformation()",
        "Answer(s)": "A"
    },
    {
        "No": 715,
        "Instruction": "Obtain information of all existing devices.",
        "A": "GetAllDevices()\u00a0",
        "B": "GetStdOutDataSize()",
        "C": "ClearAllEvent()\u00a0",
        "D": "GetAllConnectedDevices()",
        "Answer(s)": "A"
    },
    {
        "No": 716,
        "Instruction": "Set the name of this device.",
        "A": "SetDeviceName(name)\u00a0",
        "B": "CreateDevice(path)",
        "C": "SetDeviceWaitEvent(errCode)",
        "D": "UpdateDeviceName(name)",
        "Answer(s)": "A"
    },
    {
        "No": 717,
        "Instruction": "Get the name of this device.",
        "A": "GetDeviceName()\u00a0",
        "B": "PrintToServerConsole(format)\u00a0",
        "C": "GetDeviceID()\u00a0",
        "D": "GetProductName(deviceId: int)",
        "Answer(s)": "A"
    },
    {
        "No": 718,
        "Instruction": "Reserved.",
        "A": "SetDeviceWaitEvent(errCode)",
        "B": "AutoQuitWithoutActiveDev(quit)\u00a0",
        "C": "ResetDeviceWaitEvent()",
        "D": "SetDeviceWaitEventWithTimeout(errCode, timeout)",
        "Answer(s)": "A"
    },
    {
        "No": 719,
        "Instruction": "Reserved.",
        "A": "ResetDeviceWaitEvent()",
        "B": "SetWatchdog(watchdog)\u00a0",
        "C": "GetDeviceName()\u00a0",
        "D": "function_str = ResetDeviceOptionalEvent()",
        "Answer(s)": "A"
    },
    {
        "No": 720,
        "Instruction": "Reserved.",
        "A": "WaitForDeviceWaitEvent(waitTime, errCode)",
        "B": "SetDeviceName(name)\u00a0",
        "C": "RecordWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "D": "WaitForDeviceWaitEventWithTimeout(timeToWait, errorCode)",
        "Answer(s)": "A"
    },
    {
        "No": 721,
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication.",
        "A": "SetModuleSuspend(suspend)\u00a0",
        "B": "SetInterruptId(interrputId)\u00a0",
        "C": "GetModuleId()\u00a0",
        "D": "SetModulePause(pause)",
        "Answer(s)": "A"
    },
    {
        "No": 722,
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication.",
        "A": "GetModuleSuspend()\u00a0",
        "B": "PrintToFile(filePath, format)\u00a0",
        "C": "GetModuleId()\u00a0",
        "D": "GetSuspendModuleInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 723,
        "Instruction": "Clear all settings of whether to suspend loading specific platform modules when starting communication.",
        "A": "AbortModuleSuspend()\u00a0",
        "B": "GetModuleInfo(moduleId)\u00a0",
        "C": "GetModuleId()\u00a0",
        "D": "Slightly modified function: CancelModuleSuspend()",
        "Answer(s)": "A"
    },
    {
        "No": 724,
        "Instruction": "Pauses execution of the current thread until the specified timeout interval elapses.",
        "A": "SleepAtEngine(microSecond)\u00a0",
        "B": "SetStatistic(enable)\u00a0",
        "C": "SetUpdatePeriod(period)\u00a0",
        "D": "SleepAtEngine(milliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 725,
        "Instruction": "Print a message to the Console Screen.",
        "A": "PrintToServerConsole(format)\u00a0",
        "B": "RecordWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "C": "GetPitchErrorCompensation(axis)\u00a0",
        "D": "PrintToServerLog(format)",
        "Answer(s)": "A"
    },
    {
        "No": 726,
        "Instruction": "Record a list of installed Windows Updates to file.",
        "A": "RecordWindowsUpdates()\u00a0",
        "B": "CreateDevice(path)",
        "C": "GetRecordingBufferChannel()\u00a0",
        "D": "UpdateWindowsRecord()",
        "Answer(s)": "A"
    },
    {
        "No": 727,
        "Instruction": "Record a list of installed Windows Updates to file.",
        "A": "RecordWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "B": "StartCommunication()",
        "C": "Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "D": "RecordWindowsUpdates(updateIntervalSeconds)",
        "Answer(s)": "A"
    },
    {
        "No": 728,
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file.",
        "A": "CompareWindowsUpdates()\u00a0",
        "B": "StartEngine(path)",
        "C": "RecordWindowsUpdates()\u00a0",
        "D": "UpdateWindowsComparison()",
        "Answer(s)": "A"
    },
    {
        "No": 729,
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file.",
        "A": "CompareWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "B": "RecordWindowsUpdates()\u00a0",
        "C": "Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "D": "CompareSoftwarePatchUpdates(waitTimeMilliseconds)",
        "Answer(s)": "A"
    },
    {
        "No": 730,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "C": "StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "D": "ErrorDescription(code)",
        "Answer(s)": "A"
    },
    {
        "No": 731,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "GetPSOConfig_Option(channel)\u00a0",
        "D": "FetchLibVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 732,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "C": "SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "D": "IsValidDevice()",
        "Answer(s)": "A"
    },
    {
        "No": 733,
        "Instruction": "Get the version of the module rtdll.",
        "A": "GetVersion()\u00a0",
        "B": "ScanNetwork()\u00a0",
        "C": "SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)\u00a0",
        "D": "FetchCurrentVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 734,
        "Instruction": "Scan the network topology.",
        "A": "ScanNetwork()\u00a0",
        "B": "SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "C": "StartHotconnect()\u00a0",
        "D": "DiscoverNetworkDevices()",
        "Answer(s)": "A"
    },
    {
        "No": 735,
        "Instruction": "Change the specified slave state.",
        "A": "ChangeSlaveState(slaveId, state)\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "HaltAxis(slaveId, axisIndex)\u00a0",
        "D": "ChangeSlaveStatus(slaveId, status)",
        "Answer(s)": "A"
    },
    {
        "No": 736,
        "Instruction": "Start hot connect.",
        "A": "StartHotconnect()\u00a0",
        "B": "SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "C": "StartEngine(path)",
        "D": "InitiateHotConnection()",
        "Answer(s)": "A"
    },
    {
        "No": 737,
        "Instruction": "Read the current master information from the engine.",
        "A": "GetMasterInfo()\u00a0",
        "B": "SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "C": "GetVersion()\u00a0",
        "D": "GetMasterDetails()",
        "Answer(s)": "A"
    },
    {
        "No": 738,
        "Instruction": "Download data to the specified slave SDO.",
        "A": "SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)",
        "B": "SetUpdatePeriod(period)\u00a0",
        "C": "SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "D": "SdoUpload(slaveId, index, subindex, sdoDataSize, sdoData)",
        "Answer(s)": "A"
    },
    {
        "No": 739,
        "Instruction": "Upload data from the specified slave SDO.",
        "A": "SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "B": "GetMasterInfo()\u00a0",
        "C": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "D": "SdoUploadExtended(slaveId, index, subindex, sdoBuffSize)",
        "Answer(s)": "A"
    },
    {
        "No": 740,
        "Instruction": "Download data to the specified slave SDO.",
        "A": "SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "B": "HaltAxis(slaveId, axisIndex)\u00a0",
        "C": "SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)",
        "D": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "Answer(s)": "A"
    },
    {
        "No": 741,
        "Instruction": "Upload data from the specified slave SDO.",
        "A": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "B": "SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "C": "SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "D": "SdoUpload_SdoRequest(slaveId, index, subindex, sdoDataType, sdoDataSize)",
        "Answer(s)": "A"
    },
    {
        "No": 742,
        "Instruction": "Write data to the specified slave's Tx PDO.",
        "A": "TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)",
        "B": "HaltAxis(slaveId, axisIndex)\u00a0",
        "C": "PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "D": "TxPdoWriteRequest(slaveId, index, subindex, dataSize, data)",
        "Answer(s)": "A"
    },
    {
        "No": 743,
        "Instruction": "Clear the data which is being written to Tx PDO.",
        "A": "ClearTxPdoWrite(slaveId, index, subindex)\u00a0",
        "B": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "C": "PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "D": "ClearTxPdoWriteRequest(slaveId, pdoIndex, pdoSubindex)",
        "Answer(s)": "A"
    },
    {
        "No": 744,
        "Instruction": "Read data from the specified slave's Rx or Tx PDO.",
        "A": "PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)",
        "D": "PdoReadFromSlave(slaveNum, dataIndex, subIndex, buffSize)",
        "Answer(s)": "A"
    },
    {
        "No": 745,
        "Instruction": "Set the axis operation mode for a specified slave axis.",
        "A": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "B": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "C": "HaltAxis(slaveId, axisIndex)\u00a0",
        "D": "SetAxisModeByIdAndIndex(slaveId, axisIndex, mode)",
        "Answer(s)": "A"
    },
    {
        "No": 746,
        "Instruction": "Start the PP operation for a specified slave axis.",
        "A": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "B": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "C": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "D": "SetAxisPositionProfile(slaveId, axisIndex, targetPos, maxVelocity, acceleration, deceleration)",
        "Answer(s)": "A"
    },
    {
        "No": 747,
        "Instruction": "Start the HM operation for a specified slave axis.",
        "A": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "B": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "C": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "D": "InitializeAxisHM(slaveId, axisIndex, opMode, maxSpeed, minSpeed, hmAcc)",
        "Answer(s)": "A"
    },
    {
        "No": 748,
        "Instruction": "Halt the specified slave axis.",
        "A": "HaltAxis(slaveId, axisIndex)\u00a0",
        "B": "GetLibVersion()\u00a0",
        "C": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "D": "AdjustAxisHalt(slaveId, axisIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 749,
        "Instruction": "Release the halt state for a specified slave axis.",
        "A": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "B": "SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "C": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "D": "StopAxisRelease(slaveId, axisIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 750,
        "Instruction": "Set the master info update period.",
        "A": "SetUpdatePeriod(period)\u00a0",
        "B": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "C": "GetOutputModuleId()\u00a0",
        "D": "SetUpdateInterval(interval)",
        "Answer(s)": "A"
    },
    {
        "No": 751,
        "Instruction": "Get a string representation of the specified error code.",
        "A": "ErrorToString(errCode)\u00a0",
        "B": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "C": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "D": "StringifyError(errorCode)",
        "Answer(s)": "A"
    },
    {
        "No": 752,
        "Instruction": "Get the version of the module library.",
        "A": "GetLibVersion()\u00a0",
        "B": "ResetSyncStatisticsInfo()\u00a0",
        "C": "ApiLogToString(pLogData, logDataSize)\u00a0",
        "D": "GetLibraryVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 753,
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.",
        "A": "IsDeviceValid()\u00a0",
        "B": "GetMasterInfo()\u00a0",
        "C": "GetIMDllVersion()\u00a0",
        "D": "CheckIfDeviceIsValid()",
        "Answer(s)": "A"
    },
    {
        "No": 754,
        "Instruction": "Get the version of the module rtdll in CCLINK.",
        "A": "GetVersion()\u00a0",
        "B": "ResetSlaveError(slaveId)\u00a0",
        "C": "StopEngine()",
        "D": "FetchVersion()",
        "Answer(s)": "A"
    },
    {
        "No": 755,
        "Instruction": "Reset the salve's error in CCLINK.",
        "A": "ResetSlaveError(slaveId)\u00a0",
        "B": "StartHotconnect()\u00a0",
        "C": "SyncToJog(slaveAxis)\u00a0",
        "D": "ResetSlave(slaveId)",
        "Answer(s)": "A"
    },
    {
        "No": 756,
        "Instruction": "Set the master info update period in CCLINK.",
        "A": "SetUpdatePeriod(period)\u00a0",
        "B": "SlmpSendBySlaveId(slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "C": "GetOutputModuleId()\u00a0",
        "D": "SetPeriodicUpdate(interval)",
        "Answer(s)": "A"
    },
    {
        "No": 757,
        "Instruction": "Read the current master information from the engine in CCLINK.",
        "A": "GetMasterInfo()\u00a0",
        "B": "GetVersion()\u00a0",
        "C": "GetVersion()\u00a0",
        "D": "GetDetailedMasterInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 758,
        "Instruction": "Scan the network topology in CCLINK.",
        "A": "ScanNetwork()\u00a0",
        "B": "SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)",
        "C": "StartHotconnect()\u00a0",
        "D": "EnumerateNetworkDevices()",
        "Answer(s)": "A"
    },
    {
        "No": 759,
        "Instruction": "Start hot connect in CCLINK.",
        "A": "StartHotconnect()\u00a0",
        "B": "SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "C": "StartPT(pPTCommand)\u00a0",
        "D": "StartHotspotConnection()",
        "Answer(s)": "A"
    },
    {
        "No": 760,
        "Instruction": "Reset the synchronization statistics information in CCLINK.",
        "A": "ResetSyncStatisticsInfo()\u00a0",
        "B": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "C": "SetSyncMasterSlave(masterAxis, slaveAxis)",
        "D": "UpdateSyncStatisticsInfo()",
        "Answer(s)": "A"
    },
    {
        "No": 761,
        "Instruction": "Download data to the specified slave SDO in CCLINK.",
        "A": "SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "B": "SlmpSendByMacIpAddr(macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "C": "TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)",
        "D": "SdoUpload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "Answer(s)": "A"
    },
    {
        "No": 762,
        "Instruction": "Upload data from the specified slave SDO in CCLINK.",
        "A": "SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)",
        "B": "HaltAxis(slaveId, axisIndex)\u00a0",
        "C": "PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "D": "SdoUploadData(slaveId, dropNo, indexNo, subindexNo, sdoBuffSize)",
        "Answer(s)": "A"
    },
    {
        "No": 763,
        "Instruction": "Download data to the specified slave SDO in CCLINK.",
        "A": "SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)",
        "B": "StartHotconnect()\u00a0",
        "C": "SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "D": "SdoDownload_SdoType(slaveId, dropNo, index, subindex, objectType, dataSize, data)",
        "Answer(s)": "A"
    },
    {
        "No": 764,
        "Instruction": "Upload data from the specified slave SDO in CCLINK.",
        "A": "SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "B": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "C": "SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)",
        "D": "SdoUpload(sdoType, slaveId, dropNo, index, subindex, sdoBuffSize)",
        "Answer(s)": "A"
    },
    {
        "No": 765,
        "Instruction": "Set the axis operation mode for a specified slave axis in CCLINK.",
        "A": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "B": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "C": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "D": "SetAxisConfiguration(slaveId, axisIndex, configuration)",
        "Answer(s)": "A"
    },
    {
        "No": 766,
        "Instruction": "Start the PP operation for a specified slave axis in CCLINK.",
        "A": "StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "B": "StartHotconnect()\u00a0",
        "C": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "D": "StopAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "Answer(s)": "A"
    },
    {
        "No": 767,
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK.",
        "A": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "B": "SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "C": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "D": "InitiateAxisMovement(slaveId, axisIndex, moveType, maxVelocity, minVelocity, acceleration)",
        "Answer(s)": "A"
    },
    {
        "No": 768,
        "Instruction": "Halt the specified slave axis in CCLINK.",
        "A": "HaltAxis(slaveId, axisIndex)\u00a0",
        "B": "ResetSyncStatisticsInfo()\u00a0",
        "C": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "D": "StopAxis(slaveId, axisIndex)",
        "Answer(s)": "A"
    },
    {
        "No": 769,
        "Instruction": "Release the halt state for a specified slave axis in CCLINK.",
        "A": "HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "B": "StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "C": "SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "D": "HaltAxisReleaseCommand(slaveId, axisIndex)",
        "Answer(s)": "A"
    }
]