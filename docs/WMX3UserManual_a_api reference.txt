
 


API Reference 


wmx3Api 
simuApi 
ecApi 



 


wmx3Api Namespace Reference 

This namespace contains WMX3 Api related functions. More... 

Namespaces 

constants 

This namespace contains defined 
constants used by the library. Also see 
Constants. 

ecApi 

This namespace contains Ec Api related 
functions. 

simuApi 

This namespace contains Simu Api 
related functions. 

Classes 

class AdvancedMotion 
This class contains advanced motion 
functions. More... 

class AdvancedMotionErrorCode 
This enumerator class enumerates the 
WMX3 advanced motion library error 
codes. More... 

class AdvMotion 
This class contains advanced position 
command functions. More... 

class AdvSync 
This class contains advanced sync 
functions. More... 

class AdvVelocity 

This class contains advanced velocity 


command functions. More... 

class AIOFormat 
This class describes one or more bytes 
of the I/O or user memory representing 
an analog signal. More... 

class AllEventID 
This class contains the event ID numbers 
of all defined events. More... 

class ApiBuffer 
This class contains API buffer 
functions. More... 

class ApiBufferChannelSelection 
This class contains a selection of API 
buffer channels. More... 

class ApiBufferCondition 
This class contains a condition that is 
used to control the execution of an API 
buffer channel. More... 

class ApiBufferConditionType 
This enumerator class enumerates the 
condition types for flow conditions in the 
API buffer channel. Flow conditions can 
control the execution sequence of the 
API buffer. More... 

class ApiBufferErrorCode 
This enumerator class enumerates the 
WMX3 API buffer library error codes. 
More... 

class ApiBufferErrorLog 
This class contains the log of an error 
encountered during the execution of an 
API buffer channel. More... 

class ApiBufferEventOutput 


This class defines event output functions 
that can be processed by the ApiBuffer 
module. Also see API Buffer Outputs. 
More... 

class ApiBufferOptions 
This class contains options for an API 
buffer channel. Also see API Buffer 
Options. More... 

class ApiBufferState 
This enumerator class enumerates the 
states of an API buffer channel. More... 

class ApiBufferStatus 
This class contains the current status of 
an API buffer channnel. Also see API 
Buffer Statuses. More... 

class ApiBufferWatch 
This class contains watch options for an 
API buffer channel. More... 

class ApiLogInfo 
This class contains API log information 
for the command or response of one API 
function call. More... 

class ApiLogOptions 

This class contains API log options. 

More... 

class ApiLogState 
This enumerator class enumerates the 
states of the API log. More... 

class ApiLogStatus 
This class contains the status of the API 
log. More... 

class ApiLogType 

This enumerator contains the type of API 


log. More... 

class AxisCommandMode 
This enumerator class enumerates the 
cyclic command modes of axes. More... 

class AxisCompensation 
This class describes the compensation 
values that are applied to an axis. 
More... 

class AxisControl 
This class contains axis control 
functions. More... 

class AxisSelection 

This class describes a selection of axes. 

More... 

class AxisSupportedFunction 
This class describes the functions that 
are supported by an axis. More... 

class AxisSyncMode 
This enumerator class enumerates the 
sync control modes of an axis. More... 

class BacklashCompensationData 
This class contains data for backlash 
compensation for an axis. Also see 
Parameters. More... 

class Compensation 
This class contains compensation 
functions. More... 

class CompensationErrorCode 
This enumerator class enumerates the 
WMX3 compensation library error codes. 
More... 

class Config 
This class contains configuration 
functions. More... 


class CoreMotion 
This class contains core motion 
functions. More... 
class CoreMotionAxisLogInput 
This class contains the types of log data 
that may be collected for each axis by 
the CoreMotion module. More... 
class CoreMotionAxisLogOutput 
This class contains data of the 
CoreMotion module that has been 
logged using the memory log operation. 
This class contains data for one cycle. 
More... 
class CoreMotionAxisStatus 
This class contains axis status data. See 
Axis Status for a description of each 
status. More... 
class CoreMotionErrorCode 
This enumerator class enumerates the 
WMX3 core motion library error codes. 
More... 
class CoreMotionEventInput 
This class defines event input functions 
that can be processed by the 
CoreMotion module. Also see Core 
Motion Inputs. More... 
class CoreMotionEventOutput 
This class defines event output functions 
that can be processed by the 
CoreMotion module. Also see Core 
Motion Outputs. More... 
class CoreMotionLogInput 
This class specifies the log data to be 
collected by the CoreMotion module. 


More... 

class 
class 
CoreMotionLogOutput 
This class contains data of the 
CoreMotion module that has been 
logged using the memory log operation. 
This class contains data over multiple 
cycles. More... 
CoreMotionStatus 
This class contains system status data. 
See System Status for a description of 
each status. More... 
class CustomEventOption 
Reserved. More... 
class CyclicBuffer 
This class contains cyclic buffer 
functions. More... 
class 
class 
CyclicBufferCommandType 
This enumerator class enumerates the 
command types of commands in the 
cyclic buffer. More... 
CyclicBufferErrorCode 
This enumerator class enumerates the 
WMX3 cyclic buffer library error codes. 
More... 
class 
class 
class 
CyclicBufferMultiAxisCommands 
This class contains the command data 
over one cycle for the cyclic buffer for 
multiple axes. More... 
CyclicBufferMultiAxisOption 
This class contains option data for the 
cyclic buffer for multiple axes. More... 
CyclicBufferMultiAxisStatus 
This class contains the current status of 
the cyclic buffer for multiple axes. More... 


class CyclicBufferSingleAxisCommand 
This class contains the command data 
for one cycle for the cyclic buffer for a 
single axis. More... 
class CyclicBufferSingleAxisOption 
This class contains option data for the 
cyclic buffer for a single axis. More... 
class CyclicBufferSingleAxisStatus 
This class contains the current status of 
the cyclic buffer for a single axis. More... 
class CyclicBufferState 
This enumerator class enumerates the 
states of cyclic buffer channels. More... 
class DetailLogBufferStatus 
This class contains the status of a log 
buffer. More... 
class DetailLogMemoryStatus 
Reserved. More... 
class DetailLogState 
This enumerator class enumerates the 
states of data logging channels. There 
are several more states compared to 
LogState. Also see Log Statuses. 
More... 
class DetailLogStatus 
This class contains the status of a data 
logging operation. Compared to 
LogStatus, there are several additional 
statuses. Also see Log Statuses. 
More... 
class DetailOperationState 
This enumerator class enumerates the 
detailed operation states of axes. More... 
class DeviceInfoA 


This class contains the information of a 
device. Each device represents a 
channel through which a user application 
process may send commands to the 
engine. More... 

class DeviceInfoW 
This class contains the information of a 
device. Each device represents a 
channel through which a user application 
process may send commands to the 
engine. More... 

class DevicesInfoA 
This class contains the information of all 
existing devices. More... 

class DevicesInfoW 
This class contains the information of all 
existing devices. More... 

class DeviceStatistics 

This class contains device statistics data. 

More... 

class DeviceType 
This enumerator class enumerates the 
device types. The device type 
determines the method by which the 
device executes API functions. More... 

class EngineInfo 
This class contains the information of the 
engine. More... 

class EngineState 
This enumerator class enumerates the 
states of the platform engine. More... 

class EngineStatus 
This class contains the current status of 
the engine. More... 


class ErrorCode 
This enumerator class enumerates the 
WMX3 error codes. More... 

class EStopLevel 
This enumerator class enumerates the 
emergency stop levels. More... 

class EventApiEventInput 
This class defines event input functions 
that can be processed by the Event 
module. Also see Event Inputs. More... 

class EventApiEventOutput 
This class defines event output functions 
that can be processed by the Event 
module. Also see Event Outputs. 
More... 

class EventControl 
This class contains event control 
functions. More... 

class EventErrorCode 
This enumerator class enumerates the 
WMX3 event library error codes. More... 

class EventInput 
This virtual class defines the interface to 
specify event inputs (conditions to trigger 
the event). Each module that defines 
event inputs defines a class that inherits 
this class. More... 

class EventOption 
This class contains the options of an 
event. More... 

class EventOutput 
This virtual class defines the interface to 
specify event outputs (action to execute 


when the event is triggered). Each 
module that defines event outputs 
defines a class that inherits this class. 

More... 

class FormatType 
This enumerator class enumerates the 
formats of data samples. More... 

class Home 

This class contains homing functions. 

More... 

class HomeError 
This enumerator class enumerates the 
home errors encountered during homing. 
Also see Home Error. More... 

class HomeState 
This enumerator class enumerates the 
homing states of axes executing homing. 
More... 

class InterruptData 
This class contains interrupt data. More... 

class Io 

This class contains I/O functions. 

More... 

class IOAddress 

This class describes an I/O address. 

More... 

class IOErrorCode 
This enumerator class enumerates the 
WMX3 I/O library error codes. More... 

class IoEventInput 
This class defines event input functions 
that can be processed by the Io module. 
Also see I/O Inputs. More... 


class 
class 
class 
class 
class 
class 
class 
IoEventOutput 
This class defines event output functions 
that can be processed by the Io module. 
Also see I/O Outputs. More... 
IOLogFormat 
This class contains options that specify a 
region of I/O to log during a data logging 
operation. More... 
IoLogInput 
This class specifies the log data to be 
collected by the Io module. More... 
IoLogOutput 
This class contains data of the IO 
module that has been logged using the 
memory log operation. This class 
contains data over multiple cycles. 
More... 
class 
class 
IOSourceType 
This enumerator class enumerates the 
I/O source types. More... 
Log 
This class contains log functions. 
More... 
class 
class 
LogApiLogInput 
This class specifies the log data to be 
collected by the Log module. More... 
LogApiLogOutput 
This class contains data of the Log 
module that has been logged using the 
memory log operation. This class 
contains data over multiple cycles. 
More... 

class LogChannelOptions 
This class contains options for a log 
operation channel. More... 


class LogErrorCode 
This enumerator class enumerates the 
WMX3 log library error codes. More... 

class LogFilePathA 
This class contains the file path for a log 
operation. The file path is specified as a 
char string. More... 

class LogFilePathW 
This class contains the file path for a log 
operation. The file path is specified as a 
wchar_t string. More... 

class LogInput 
This virtual class defines the interface to 
specify the log data to collect. Each 
module that supports the collection of log 
data will define a class that inherits this 
class. More... 

class LogOptions 
This class contains options that specify 
the data to collect during a data logging 
operation. More... 

class LogOutput 
This virtual class defines the interface of 
the log data to collect. Each module that 
supports the collection of log data will 
define a class that inherits this class. 
More... 

class LogState 
This enumerator class enumerates the 
states of data logging channels. Also see 
Log Statuses. More... 

class LogStatus 
This class contains the status of a data 
logging operation. Also see Log 


Statuses. More... 

class LogType 
This enumerator contains the type of log. 
More... 
class MAddress 
This class describes a user memory 
address. More... 
class MemoryLogAxisData 
This class contains axis data that has 
been recorded by a memory log 
operation. More... 
class MemoryLogData 
This class contains data that has been 
logged using the memory log operation. 
This class contains data over multiple 
cycles. More... 
class MemoryLogDatas 
This class contains data that has been 
logged using the memory log operation. 
This class contains data for one cycle. 
More... 
class MemoryLogIOData 
This class contains I/O data that has 
been recorded by a memory log 
operation. More... 
class MemoryLogMData 
This class contains user memory data 
that has been recorded by a memory log 
operation. More... 
class MemoryLogOptions 
This class contains additional options for 
a memory log operation. More... 
class MemoryLogStatus 
This class contains the status of a 


memory log operation. More... 

class MLogFormat 
This class contains options that specify a 
region of user memory to log during a 
data logging operation. More... 

class ModuleId 
This enumerator class enumerates the 
ID numbers of modules. More... 

class ModuleInfoA 
This class contains the information of a 
module. More... 

class ModuleInfoW 
This class contains the information of a 
module. More... 

class ModulesInfoA 
This class contains the information of the 
engine and all loaded modules. More... 

class ModulesInfoW 
This class contains the information of the 
engine and all loaded modules. More... 

class ModuleSuspend 
This class contains the suspend state of 
each module. More... 

class ModuleType 
This enumerator class enumerates the 
types of modules. More... 

class Motion 
This class contains position 
command functions. More... 

class OperationState 
This enumerator class enumerates the 
operation states of axes. More... 

class PitchErrorCompensationAlignmentTyp 


e 

This enumerator class enumerates the 
types of alignments for the pitch error 
compensation points. More... 

class PitchErrorCompensationData 
This class contains data for pitch error 
compensation for an axis. Also see 
Parameters. More... 

class PitchErrorCompensationFreePositionD 
ata 
This class contains data for free position 
mode pitch error compensation for an 
axis. Also see Free Position Mode 
Parameters. More... 

class PitchErrorCompensationOptions 
This class contains options for pitch error 
compensation. More... 

class PitchErrorCompensationOriginPosition 
Type 

This enumerator class enumerates the 
types of origin positions that are 
specified for pitch error compensation. 

More... 

class PMAxisControl 
This class contains axis control 
functions for PM motion. More... 

class PMAxisHome 
This class contains HM mode homing 
functions for PM motion. More... 

class PMAxisMotion 
This class contains PP mode position 
command functions for PM motion. 
More... 


class PMAxisTorque 
This class contains TQ mode torque 
command functions for PM motion. 
More... 
class PMAxisVelocity 
This class contains PV mode velocity 
command functions for PM motion. 
More... 
class PMMotion 
This class contains PM motion 
functions. More... 
class PMMotionAxisStatus 
This class contains status data of a PM 
motion axis. More... 
class PMMotionErrorCode 
This enumerator class enumerates the 
WMX3 PM motion library error codes. 
More... 
class PMMotionOperationMode 
This enumerator class enumerates the 
PM motion operation modes. More... 
class PMMotionStatus 
This class contains PM motion system 
status data. More... 
class Profile 
This class describes a motion profile. 
More... 
class ProfileType 
This enumerator class enumerates the 
profile types. The profile type determines 
the velocity curve of a motion command. 
More... 
class SizeUnit 
This enumerator class enumerates the 


size units. More... 

class Sync 

This class contains sync functions. 

More... 

class Torque 
This class contains torque command 
functions. More... 

class Trigger 
This class describes a basic trigger 
condition used for trigger motion. More... 

class TriggerEvent 
This class describes an event used in 
trigger motion. More... 

class TriggerEventInputFunction 
This enumerator class enumerates the 
input functions (conditions) of trigger 
events. Also see Input Functions. 
More... 

class TriggerEventOutputFunction 
This enumerator class enumerates the 
output functions (actions) of trigger 
events. Also see Output Functions. 
More... 

class TriggerEvents 
This class contains a trigger consisting of 
multiple events that is used in trigger 
motion. More... 

class TriggerType 
This enumerator class enumerates the 
trigger types for triggered motion. More... 

class TwoDPitchErrorCompensationData 
This class contains data for two-
dimensional pitch error compensation. 


Also see Parameters. More... 

class TwoDPitchErrorCompensationFreePosi 
tionData 
This class contains data for free position 
mode two-dimensional pitch error 
compensation. Also see Free Position 
Mode Parameters. More... 
class UserMemory 
This class contains user memory 
functions. More... 
class UserMemoryErrorCode 
This enumerator class enumerates the 
WMX3 user memory library error codes. 
More... 
class UserMemoryEventInput 
This class defines event input functions 
that can be processed by the 
UserMemory module. Also see User 
Memory Inputs. More... 
class UserMemoryEventOutput 
This class defines event output functions 
that can be processed by the 
UserMemory module. Also see User 
Memory Outputs. More... 
class UserMemoryLogInput 
This class specifies the log data to be 
collected by the UserMemory module. 
More... 
class UserMemoryLogOutput 
This class contains data of the 
UserMemory module that has been 
logged using the memory log operation. 
This class contains data over multiple 
cycles. More... 

class Velocity 


This class contains velocity command 
functions. More... 

Detailed Description 

The namespace of the WMX3 library. 

class WMX3Api 

This class contains core functions. 

More... 

 


wmx3Api::constants Namespace Reference 

This namespace contains defined constants used by the library. Also see Constants. 

Variables 

static const int maxSplineDimensions = 8 
The maximum number of axes in a spline 
interpolation (also see Advanced 
Motion Constants). 

static const int maxSplineChannel = 128 
The maximum number of spline 
execution channels (also see Advanced 
Motion Constants). 

static const int maxPathInterpolateAppendPoints = 
512 
The maximum number of path 
interpolation points that may be 
appended to a path interpolation 
sequence with a single command (also 
see Advanced Motion Constants). 

static const int maxPathInterpolateOutputs = 512 
The maximum number of outputs that 
may be defined in a path interpolation 
sequence (also see Advanced Motion 
Constants). 

static const int maxPathInterpolateDimensions = 2 
The maximum number of axes that may 
be controlled by a path interpolation 
sequence (also see Advanced Motion 
Constants). 

static const int max3DPathInterpolateDimensions = 3 

The maximum number of axes that may 


be controlled by a 3D path interpolation 
sequence (also see Advanced Motion 
Constants). 

static const int maxPathIntplWithRotationAppendPoint 
s = 1024 
The maximum number of path 
interpolation points that may be 
appended to a path interpolation with 
rotation sequence by a single function 
call (also see Advanced Motion 
Constants). 

static const int maxPathIntplWithRotationChannel = 
128 

The maximum number of path 
interpolation with rotation channels (also 
see Advanced Motion Constants). 

static const int maxPathIntplLookaheadDimensions = 
6 
The maximum number of axes that may 
be controlled by a path interpolation with 
look ahead sequence (also see 
Advanced Motion Constants). 

static const int maxPathIntplLookaheadAppendPoints 
= 1500 

The maximum number of path 
interpolation points that may be 
appended to a path interpolation with 
look ahead sequence by a single 
function call (also see Advanced Motion 
Constants). 

static const int maxPathIntplLookaheadChannel = 128 
The maximum number of path 
interpolation with look ahead channels 
(also see Advanced Motion 
Constants). 


static const int maxPathIntplLookaheadOutputPerSeg 
ment = 128 
The maximum number of outputs that 
may be defined per segment in a path 
interpolation with look ahead sequence 
(also see Advanced Motion 
Constants). 

static const int maxPathIntplLookaheadSmoothingCyc 
les = 2000 

The maximum number of cycles of 
smoothing that can be applied to path 
interpolation with look ahead. 

static const int maxPathIntplLookaheadAuxiliaryAxes 
= 3 

The maximum number of auxiliary axes 
per segment in a path interpolation with 
look ahead sequence. 

static const int maxEcamPoints = 4096 
The maximum number of E-CAM points 
that may be defined per E-CAM channel 
(also see Advanced Motion 
Constants). 

static const int maxEcamChannel = 8 

The maximum number of E-CAM 
channels (also see Advanced Motion 
Constants). 

static const int maxApiBufferChannel = 255 
The maximum number of API buffer 
channels (also see API Buffer 
Constants). 

static const int maxApiBufferErrorLog = 10 

The maximum number of errors logged 
in the API buffer log (also see API Buffer 
Constants). 


static const int maxDefaultApiBufferSize = 524288 
The maximum default size of an API 
buffer channel (also see API Buffer 
Constants). 

static const int maxPitchErrorCompPoints = 1024 
The maximum number of pitch error 
compensation points per axis (also see 
Compensation Constants). 

static const int maxPitchErrorCompFreePositionRange 
Multiplier = 40000 
The maximum range in free position 
mode of pitch error compensation as a 
multiple of the two closest pitch positions 
(also see Compensation Constants). 

static const int max2dPitchErrorCompPoints = 512 
The maximum number of two-
dimensional pitch error compensation 
points per axis (also see Compensation 
Constants). 

static const int max2dPitchErrorCompChannel = 32 
The maximum number of two-
dimensional pitch error compensation 
channels (also see Compensation 
Constants). 

static const int max2dPitchErrorCompFreePositionRan 
geMultiplier = 40000 
The maximum range in free position 
mode of two-dimensional pitch error 
compensation as a multiple of the two 
closest pitch positions (also see 
Compensation Constants). 

static const int maxSizeSet2dPitchErrorCompValue = 
62 

Reserved (also see Compensation 
Constants). 


static const int maxFlightRecorderBufferSize = 5000 
The maximum number of cycles of data 
in the flight recorder (also see Core 
Motion Constants). 

static const int maxInPosChannel = 5 
The maximum number of in position 
signals for each axis (also see Core 
Motion Constants). 

static const int maxSyncGroup = 64 
The maximum number of sync groups 
(also see Core Motion Constants). 

static const int maxTriggerEvents = 8 
The maximum number of events per 
trigger motion that use trigger data (also 
see Core Motion Constants). 

static const unsigned long long int maxProfileUnsignedInput = 
274877906943ULL 
The maximum input value for profile 
parameters such as velocity and 
acceleration (also see Core Motion 
Constants). 

static const int maxPvtAppendPoints = 4096 
The maximum number of PVT points that 
may be appended to a PVT sequence 
with a single command (also see Core 
Motion Constants). 
static const int maxPvtInterpolateAppendPoints = 2048 
The maximum number of PVT points that 
may be appended to a PVT interpolation 
sequence with a single command (also 
see Core Motion Constants). 

static const int maxPvtInterpolateAxes = 8 

The maximum number of axes that may 


be controlled by a PVT sequence (also 
see Core Motion Constants). 

static const int maxEvents = 512 
The maximum number of events that 
may be defined (also see Event 
Constants). 
static const int maxBitArray = 1024 
The maximum byte size of the bit array 
used for event execution (also see Event 
Constants). 
static const int maxHardwareTouchProbeLatchedValue 
s = 256 
The maximum number of latched values 
per hardware touch probe (also see 
Event Constants). 
static const int maxTouchprobeChannel = 64 
The maximum number of software touch 
probe channels (also see Event 
Constants). 
static const int maxPsoChannel = 64 
The maximum number of position 
synchronous output channels (also see 
Event Constants). 
static const int maxPsoData = 128 
The maximum number of position 
synchronous output data points per 
channel (also see Event Constants). 
static const int maxPsoIoEncSize = 4 
The maximum number of bytes in the I/O 
encoder for positional synchronous 
output (also see Event Constants). 

static const int maxPveloChannel = 64 
The maximum number of planned 
velocity override channels (also see 


Event Constants). 

static const int maxPveloData = 20 

The maximum number of planned 
velocity override data points per channel 
(also see Event Constants). 

static const int maxPveloIoEncSize = 4 
The maximum number of bytes in the I/O 
encoder for planned velocity override 
(also see Event Constants). 

static const int maxEventInputDataSize = 8192 
The maximum size of the input data for 
an event in bytes (also see Event 
Constants). 

static const int maxEventOutputDataSize = 8192 
The maximum size of the output data for 
an event in bytes (also see Event 
Constants). 

static const int maxEventConfigureOfModuleDataSize 
= 8192 

Reserved (also see Event Constants). 

static const int maxIoLogAddressSize = 256 
The maximum number of contiguous 
segments of the I/O space for which log 
data can be collected at one time (also 
see I/O Constants). 

static const int maxIoLogFormatSize = 100 
The maximum number of contiguous 
segments of the I/O space for which 
formatted log data can be collected at 
one time (also see I/O Constants). 

static const int maxLogOutputIoInputByteSize = 128 
The maximum number of I/O input bytes 
that can be retrieved at one time using a 
derived class of LogOutput class. A byte 


is fully counted toward this limit even if 
only one bit of the byte is logged (also 
see I/O Constants). 

static const int maxLogOutputIoOutputByteSize = 128 
The maximum number of I/O output 
bytes that can be retrieved at one time 
using a derived class of LogOutput 
class. A byte is fully counted toward this 
limit even if only one bit of the byte is 
logged (also see I/O Constants). 

static const unsigned int maxLogBufferSize = ((unsigned int)2048 
* 1024) 
The buffer size of a log channel. Up to 
this many samples can be stored in the 
log buffer without being written to file 
before samples get overwritten (also see 
Log Constants). 

static const int maxLogBufferSampleSize = 80 
The maximum number of samples that 
can be stored in the log buffer before a 
buffer overflow occurs (also see Log 
Constants). 

static const int maxLogChannel = 16 
The number of log channels (also see 
Log Constants). 

static const int maxLogHeaderBytes = 4096 
The maximum number of bytes in the log 
header string (also see Log Constants). 

static const int maxLogHeaderLines = 2048 
The maximum number of lines in the log 
header string (also see Log Constants). 

static const int maxLogDirSize = 260 
The maximum number of characters in 
the log file directory (also see Log 


Constants). 

static const int 
static const int 
static const int 
static const int 
static const int 
maxLogFileNameSize = 260 
The maximum number of characters in 
the log file name (also see Log 
Constants). 
maxLogDataSize = (32 * 1024) 
The maximum amount of data in bytes 
that can be collected per communication 
cycle per channel (also see Log 
Constants). 
maxLogDelimiterSize = 8 
The maximum number of characters in 
the log delimiter (also see Log 
Constants). 
maxLogPrecision = 20 
The maximum value that can be 
specified for the precision parameter (the 
maximum number of subdecimal digits in 
the log output)(also see Log 
Constants). 
maxMemLogBufferSize = 1024 
The buffer size of a memory log channel. 
Up to this many samples can be stored 
in the memory log buffer without being 
read before samples get overwritten 
(also see Log Constants). 
static const int 
static const int 
maxMemLogChannel = 16 
The number of memory log channels 
(also see Log Constants). 
maxMemLogAxesSize = 8 
The maximum number of axes that can 
be logged at once by the memory log 
(also see Log Constants). 

static const int maxMemLogDataSize = 100 


The maximum number of samples that 
may be read from the memory log at 
once (also see Log Constants). 

static const int maxMemLogIoInputByteSize = 128 
The maximum number of I/O input bytes 
that can be logged at once by the 
memory log. A byte is fully counted 
toward this limit even if only one bit of 
the byte is logged (also see Log 
Constants). 

static const int maxMemLogIoOutputByteSize = 128 
The maximum number of I/O output 
bytes that can be logged at once by the 
memory log. A byte is fully counted 
toward this limit even if only one bit of 
the byte is logged (also see Log 
Constants). 

static const int maxMemLogMDataByteSize = 128 
The maximum number of user memory 
bytes that can be logged at once by the 
memory log. A byte is fully counted 
toward this limit even if only one bit of 
the byte is logged (also see Log 
Constants). 

static const int maxMemLogTriggerEventSize = 32 
The maximum number of events that can 
be configured to trigger the memory data 
log (also see Log Constants). 

static const int maxPMAxes = 256 
The maximum number of PM motion 
axes (also see PM Motion Constants). 

static const int maxUserMemoryBytes = 1024*2480 
The maximum number of bytes in the 
user memory space (also see User 
Memory Constants). 


static const int maxUserMemoryReadWriteBytes = 
1024*248 
The maximum number of bytes that can 
be written to or read from the user 
memory from one function call (also see 
User Memory Constants). 

static const int maxUserMemoryLogAddressSize = 
1500 
The maximum number of contiguous 
segments of the user memory space for 
which log data can be collected at one 
time, and also the maximum number of 
byte addresses that can be occupied by 
these contiguous segments (byte 
addresses that overlap among two or 
more sections are counted separately for 
each section) (also see User Memory 
Constants). 

static const int maxUserMemoryLogFormatSize = 100 
The maximum number of contiguous 
segments of the user memory space for 
which formatted log data can be 
collected at one time (also see User 
Memory Constants). 

static const int maxLogOutputMDataByteSize = 128 
The maximum number of user memory 
bytes that can be retrieved at one time 
using a derived class of LogOutput 
class. A byte is fully counted toward this 
limit even if only one bit of the byte is 
logged (also see User Memory 
Constants). 

static const int maxAxes = 128 
The maximum number of axes that can 
be controlled (also see Base 


Constants). 

static const int maxIoInSize = 8000 
The maximum number of I/O input bytes 
(also see Base Constants). 
static const int 
static const int 
static const int 
static const int 
static const int 
static const int 
static const int 
maxIoOutSize = 8000 
The maximum number of I/O output 
bytes (also see Base Constants). 
moduleFileNameLen = 32 
The maximum number of characters in 
the file name of a module (also see Base 
Constants). 
moduleNameLen = 16 
The maximum number of characters in 
the name of a module (also see Base 
Constants). 
moduleDescLen = 512 
The maximum number of characters in 
the description of a module (also see 
Base Constants). 
moduleLen = 64 
The maximum number of modules (also 
see Base Constants). 
maxDeviceName = 64 
The maximum number of characters in 
the device name (also see Base 
Constants). 
maxDevices = 256 
The maximum number of devices that 
can run concurrently (also see Base 
Constants). 

static const int maxInterrupts = 2 

The maximum number of interrupts 
(cyclic handlers) that can run on the 


engine (also see Base Constants). 

static const int maxEventInterpolationAxes = 8 
The maximum number of axes that may 
be commanded by certain events that 
execute interpolation commands (also 
see Base Constants). 
static const int maxLogOutputDataSize = 100 
The maximum number of log data that 
can be retrieved at one time using a 
derived class of LogOutput class (also 
see Base Constants). 

 

ApiBuffer Class Reference 

This class contains API buffer functions. 

Public Member Functions 

ApiBuffer (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

ApiBuffer (const ApiBuffer &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

ApiBuffer & operator= (const ApiBuffer &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

ApiBuffer () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~ApiBuffer () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC CreateApiBuffer (unsigned int channel, 
unsigned int size) 
Create a memory space for use with the 
API buffer. This function must be called 
before the API buffer functions can be 
used. More... 

WMX3APIFUNC CreateApiBuffer (unsigned int channel) 
Create a memory space for use with the 
API buffer using the default memory size. 
More... 

WMX3APIFUNC CreateApiBuffer (unsigned int channel, 
unsigned int size, SizeUnit::T sizeUnit) 
Create a memory space for use with the 
API buffer. The size of the memory 
space can be specified in one of several 
units. More... 

WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More... 

WMX3APIFUNC HaltMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Halt multiple API buffer channels. More... 

WMX3APIFUNC ClearMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Clear multiple API buffer channels. 
More... 

WMX3APIFUNC RewindMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Rewind multiple API buffer channels. 
More... 

WMX3APIFUNC GetStatus (unsigned int channel, 

ApiBufferStatus *pStatus) 

Get the current status of an API buffer. 


More... 

WMX3APIFUNC SetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 
Set options for an API buffer. More... 

WMX3APIFUNC GetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 

Get the currently applied options for an 
API buffer. More... 

WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC GetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Get watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC Sleep (unsigned int milliseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC USleep (unsigned int microseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC Wait (int axis) 
Add a wait command to an API buffer. 
More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Add a wait command to an API buffer. 
More... 

WMX3APIFUNC Wait (ApiBufferCondition *condition) 

Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More... 

WMX3APIFUNC FlowElseIf (ApiBufferCondition 
*condition) 

Add an "Else If" command to an API 
buffer. More... 

WMX3APIFUNC FlowElse () 
Add an "Else" command to an API buffer. 
More... 
WMX3APIFUNC FlowEndIf () 
Add an "End If" command to an API 
buffer. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 

Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 
Parameters 
[in] 
[in] 
[in] 
errCode 
pString 
size 
The error code to get the 
string representation of. 
A char array that will 
contain the string 
representation of the 
error. 
The size of the char 
array in number of 
characters. 
Remarks 


This function returns a string representation of the specified error code. The error 
code must be defined in the ApiBufferErrorCode enum or the ErrorCode enum in 
the WMX3Api.h header. All errors returned by functions in class ApiBuffer will be 
defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
ApiBuffer class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ 
ApiLogToString() [2/2] 



◆ 
ApiLogToString() [2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆CreateApiBuffer() [1/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size 
) 
Create a memory space for use with the API buffer. This function must be called 
before the API buffer functions can be used. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 


between 0 and 
maxApiBufferChannel1. 


[in] 
size The size of the API 
buffer channel memory 
space in bytes. 

Remarks 

This function creates a memory space for use with the API buffer. The API buffer 
stores data such as the API type and API arguments in this space. An API with 
large function arguments will require more space in the API buffer to store. The 
CommandQueueIsFull error will be returned when attempting to add an API to the 
buffer when there is not enough space. As API functions in the API buffer are 
executed, the memory space they occupied will be freed. 

A larger memory space will allow more APIs to be stored in the API buffer. 

The minimum size of the memory space is 262216 bytes. Specifying a smaller size 
will cause this function to return the RequestedBufferTooSmall error. 

The maximum size of the memory space is 2GB-1Byte (2147483647 bytes). 
Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

The created memory space can be closed using FreeApiBuffer. It is not necessary 
to call the FreeApiBuffer function when closing the engine, as any open API buffer 
memory spaces are automatically closed when the engine closes. 

See also 

API Buffer 

◆ 
CreateApiBuffer() [2/3] 



WMX3APIFU 
NC 
CreateApiBuf 
WMX3APIFU 
NC 
CreateApiBuf 
fer ( 
unsigned int channel ) 
Create a memory space for use with the API buffer using the default memory size. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

This function creates a memory space for use with the API buffer. See 
CreateApiBuffer for more information regarding the memory space of an API buffer 
channel. 

Compared to CreateApiBuffer, this function creates a memory space with size 
equal to maxDefaultApiBufferSize. 

◆CreateApiBuffer() [3/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size, 
SizeUnit::T sizeUnit 
) 
Create a memory space for use with the API buffer. The size of the memory space 
can be specified in one of several units. 

Parameters 


[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 
[in] 
size The size of the API 
buffer channel memory 
space. The units of the 
size is specified by the 
sizeUnit argument. 
[in] 
sizeUnit The units of the size 
argument. The available 
options are Byte, 
Kilobyte, and 
Megabyte. 

Remarks 

This function creates a memory space for use with the API buffer. See 
CreateApiBuffer for more information regarding the memory space of an API buffer 
channel. 

Compared to CreateApiBuffer, the size of the memory space can be specified in 
one of several units. The units of the memory space has no effect on the API buffer 
operation. The minimum size of the memory space is 262144 bytes (or the 
equivalent in kilobytes or megabytes). 

◆FreeApiBuffer() 

WMX3APIFU 
NC 
FreeApiBuffe 
WMX3APIFU 
NC 
FreeApiBuffe 
r ( 
unsigned int channel ) 
Close an API buffer memory space. 

Remarks 

This function closes an API buffer memory space created by CreateApiBuffer. API 
buffer memory spaces that remain open when the engine is closed will automatically 
be closed. An error will be returned if this function is called while the API buffer is 
executing. 

◆StartRecordBufferChannel() 
WMX3APIFU 
NC 
StartRecordB 
ufferChannel ( unsigned int channel ) 
Start recording APIs to the API buffer channel. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will cause the API to be stored in the API buffer 
instead of being executed immediately. The recorded API sequence can be 
executed using the Execute function. 


WMX3 APIs related to API buffer control will not be stored in the API buffer. These 

APIs include: 


CreateApiBuffer 
FreeApiBuffer 
StartRecordBufferChannel 
EndRecordBufferChannel 
GetRecordingBufferChannel 
Execute 
Halt 
Clear 
Rewind 
ApiBuffer::GetStatus 


Certain WMX3 APIs related to engine control or using a different data flow channel 
will not be stored in the API buffer while recording. These APIs include: 


StartEngine 
RestartEngine 
StopEngine 
CreateDevice 
CloseDevice 
GetDeviceID 
AutoQuitWithoutActiveDev 
SetWatchdog 
GetWatchdog 
ResetWatchdogTimer 
SetStatistic 
GetStatistic 
GetAllDevices 
SetDeviceName 
GetDeviceName 
Io::SetOutBitEx 
Io::SetOutByteEx 
Io::SetOutBytesEx 
Io::SetOutBitsEx 
Io::GetInBitEx 
Io::GetInByteEx 



Io::GetInBytesEx 
Io::GetOutBitEx 
Io::GetOutByteEx 
Io::GetOutBytesEx 
Log::GetMemoryLogData 
CyclicBuffer::AddCommand 
CyclicBuffer::Execute 
CyclicBuffer::Abort 
CyclicBuffer::GetStatus 
Config::Export 
Config::Import 
Config::GetAndExportAll 
Config::ImportAndSetAll 
ErrorToString (of each module) 

Some WMX3 APIs in the ApiBuffer class can only be added to the API buffer and 
cannot be executed directly. These APIs include: 


ApiBuffer::Sleep 
ApiBuffer::Wait 
ApiBuffer::FlowIf 
ApiBuffer::FlowElseIf 
ApiBuffer::FlowElse 
ApiBuffer::FlowEndIf 


Function arguments that return a value are ignored during API buffer execution. The 
API buffer is not suitable for functions with a main purpose of returning a value. 

The buffer channel must have been allocated a memory space using the 
CreateApiBuffer beforehand. 

The device information is stored in the WMX3Api class and not the ApiBuffer 
class. If multiple ApiBuffer objects are created passing in the same WMX3Api 
object, they will share the same device (and the same API buffer recording state). 

If other threads are using the same device, API functions called by the other threads 
will also be appended to the API buffer instead of being executed. To prevent this, 
create a separate device that will be used to append API functions to the API buffer. 
A new device can be created using the CreateDevice function. 


To stop recording APIs to the API buffer channel for this device, call the 
EndRecordBufferChannel function. 

If this function is called while already recording API functions to the specified API 
buffer channel, this function will return the 
AlreadyRecordingForSpecifiedChannel error. If this function is called while 
recording API functions to a different API buffer channel, this function will change 
the recording channel to the specified channel. 

See also 

API Buffer 

◆EndRecordBufferChannel() 
WMX3APIFUNC 
EndRecordBuffe 
rChannel ( ) 
End recording APIs to the API buffer channel. 

Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will be executed normally. 

To resume recording APIs to the API buffer channel for this device, call the 
StartRecordBufferChannel function. 

If this function is called while not recording API functions to an API buffer channel, 
this function will return the NotRecording error. 

◆GetRecordingBufferChannel() 

WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
channel, 
unsigned char * enable 
) 
Get the currently recording API buffer channel, if any. 

Parameters 
[out] 
channel A pointer to an int that 
will contain the API 
buffer channel that is 
currently recording APIs 
through the device 
calling this function. This 
will contain -1 if this 
device is not recording 
APIs to an API buffer 
channel. 
[out] 
enable A pointer to an unsigned 
char that will contain 1 if 
the device calling this 
function is currently 
recording APIs to an API 
buffer channel and 0 if 
not. 

Remarks 

This function can be used to obtain whether a device is currently recording APIs to 
the API buffer or executing them normally. 

◆Execute() 

WMX3APIFU WMX3APIFU 
NC Execute ( 
unsigned int channel ) 
Execute an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to execute. 

Remarks 

This function starts the execution an API buffer channel. APIs in the API buffer 
channel will be executed in the order that they were added to the buffer. Functions 
such as Wait can delay the execution of APIs, which may be useful if the API buffer 
contains several motions that must be executed one after the other after each 
motion completes. 

It is possible to dynamically add more APIs to the API buffer as it executes. As long 
as there is a steady flow of new APIs, the API buffer can continue executing 
indefinitely. As the memory used to store APIs in the API buffer is limited, 
dynamically adding API functions to the API buffer can cause older APIs that have 
already executed to be overwritten. If this occurs, the API buffer cannot be rewound 
with Rewind. 

This function will block until the API buffer channel starts (typically for 1ms). At the 
time that this function returns without any errors, any other function in this class can 
be called assuming that the API buffer channel has started executing APIs. 

See also 

API Buffer 

◆Halt() 

WMX3APIFU 
NC Halt ( unsigned int channel ) 
WMX3APIFU 
NC Halt ( unsigned int channel ) 
Halt an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to halt. 

Remarks 

Stops the execution of an API buffer. This function will stop the API buffer from 
further calling API functions from the buffer, but it will not stop the effects of APIs 
that have already been executed. For example, if this function is called after a 
motion API is executed from the API buffer, the motion will run to completion and will 
not stop. 

After stopping an API buffer using this function, execution can be resumed from the 
next API function in the API buffer by calling the Execute API function again. 

This function will block until the API buffer channel stops (typically for 1ms). At the 
time that this function returns without any errors, any other function in this class can 
be called assuming that the API buffer channel has stopped executing APIs. 

If this function is called for an API buffer that is executing the Motion::Wait function, 
the API buffer will be stopped after the wait completes. For more information, see 
Halting Execution. 

◆Clear() 

WMX3APIFU WMX3APIFU 
NC Clear ( 
unsigned int channel ) 
Clear an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to clear. 
Remarks 

This function clears all APIs in the API buffer. 

This function will block until the API buffer channel is cleared (typically for 1ms). At 
the time that this function returns without any errors, any other function in this class 
can be called assuming that the API buffer channel has been cleared. 

◆Rewind() 

WMX3APIFU 
NC Rewind ( unsigned int channel ) 
WMX3APIFU 
NC Rewind ( unsigned int channel ) 
Rewind an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to rewind. 

Remarks 

If ApiBufferState is Active, this function rewinds the API buffer to the beginning 
and executes it as if Execute had been called. 

If ApiBufferState is Stop, this function rewinds the API buffer to the beginning so 
that it may be executed again using Execute. 

Also see API Buffer Statuses section for state transitions. 

If APIs are dynamically added to the buffer as the buffer executes, it is possible for 
older API commands to become overwritten by new commands if the old command 
has already executed and the buffer has run out of space to add the new command. 
If this occurs, the buffer cannot be rewound to the first command and the 
RewindFailedFirstCommandOverwritten error will be returned. The API buffer 
cannot be rewound until the buffer is cleared and a new API sequence recorded. 

This function will block until the API buffer channel is rewound (typically for 1ms). At 
the time that this function returns without any errors, any other function in this class 
can be called assuming that the API buffer channel has been rewound. 

◆ExecuteMultipleChannel() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
ExecuteMulti 
pleChannel ( 
ApiBufferCha pChannelSele ) 
Execute multiple API buffer channels. 

Parameters 
[in] 
pChannelSelection A pointer to a 
ApiBufferChannelSelec 
tion object that specifies 
the API buffer channels 
to execute. 

Remarks 

This function is similar to Execute, except it executes multiple API buffer channels 
at once. 

When multiple API buffer channels should be started at the same time, this function 
should be used instead of calling Execute for each channel, as Execute is blocking 
and there will be an approximately 1ms delay between when subsequent API buffer 
channels start. When this function is used, all the specified API buffer channels will 
start typically within one cycle of each other. However, this function does not 
guarantee that all the specified API buffer channels start in the same cycle. 

This function will block until all the specified API buffer channels start (typically for 
1ms). At the time that this function returns without any errors, any other function in 
this class can be called assuming that all the specified API buffer channels have 
started executing APIs. 

◆HaltMultipleChannel() 

WMX3APIFU 
NC 
HaltMultipleC 
WMX3APIFU 
NC 
HaltMultipleC 
hannel ( 
ApiBufferCha pChannelSele ) 
Halt multiple API buffer channels. 

Parameters 
[in] 
pChannelSelection A pointer to a 
ApiBufferChannelSelec 
tion object that specifies 
the API buffer channels 
to halt. 

Remarks 

This function is similar to Halt, except it halts multiple API buffer channels at once. 

When multiple API buffer channels should be stopped at the same time, this 
function should be used instead of calling Halt for each channel, as Halt is blocking 
and there will be an approximately 1ms delay between when subsequent API buffer 
channels stop. When this function is used, all the specified API buffer channels will 
stop typically within one cycle of each other. However, this function does not 
guarantee that all the specified API buffer channels stop in the same cycle. 

This function will block until all the specified API buffer channels stop (typically for 
1ms). At the time that this function returns without any errors, any other function in 
this class can be called assuming that all the specified API buffer channels have 
stopped executing APIs. 

◆ClearMultipleChannel() 

WMX3APIFU 
NC 
ClearMultiple 
WMX3APIFU 
NC 
ClearMultiple 
Channel ( 
ApiBufferCha pChannelSele ) 
Clear multiple API buffer channels. 
Parameters 
[in] 
pChannelSelection A pointer to a 
ApiBufferChannelSelec 
tion object that specifies 
the API buffer channels 
to clear. 

Remarks 

This function is similar to Clear, except it clears multiple API buffer channels at 
once. 

When multiple API buffer channels should be cleared at the same time, this function 
should be used instead of calling Clear for each channel, as Clear is blocking and 
there will be an approximately 1ms delay between when subsequent API buffer 
channels are cleared. When this function is used, all the specified API buffer 
channels will be cleared typically within one cycle of each other. However, this 
function does not guarantee that all the specified API buffer channels are cleared in 
the same cycle. 

This function will block until all the specified API buffer channels are cleared 
(typically for 1ms). At the time that this function returns without any errors, any other 
function in this class can be called assuming that all the specified API buffer 
channels have been cleared. 

◆RewindMultipleChannel() 

WMX3APIFU 
NC 
RewindMultip 
WMX3APIFU 
NC 
RewindMultip 
leChannel ( 
ApiBufferCha pChannelSele ) 
Rewind multiple API buffer channels. 

Parameters 
[in] 
pChannelSelection A pointer to a 
ApiBufferChannelSelec 
tion object that specifies 
the API buffer channels 
to rewind. 

Remarks 

This function is similar to Rewind, except it rewinds multiple API buffer channels at 
once. 

When multiple API buffer channels should be rewound at the same time, this 
function should be used instead of calling Rewind for each channel, as Rewind is 
blocking and there will be an approximately 1ms delay between when subsequent 
API buffer channels are rewound. When this function is used, all the specified API 
buffer channels will be rewound typically within one cycle of each other. However, 
this function does not guarantee that all the specified API buffer channels are 
rewound in the same cycle. 

This function will block until all the specified API buffer channels are rewound 
(typically for 1ms). At the time that this function returns without any errors, any other 
function in this class can be called assuming that all the specified API buffer 
channels have been rewound. 

◆GetStatus() 

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
unsigned int channel, 
ApiBufferStatus * pStatus 
Get the current status of an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the status. 
[out] 
pStatus A pointer to a 
ApiBufferStatus that 
will contain the current 
status of the API buffer. 

Remarks 

This function will obtain the current status of an API buffer channel. This function 
should be called cyclically to continuously check the operation of the API buffer 
channel. 

◆SetOptions() 

WMX3APIFUNC 
SetOptions ( 
) 
WMX3APIFUNC 
SetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Set options for an API buffer. 
Parameters 
[in] 
channel The API buffer channel 
to set the options. 
[in] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that contains 
execution options for the 
API buffer. 

Remarks 

This function will set the execution options of an API buffer channel. The execution 
options affect how the API buffer will be executed. See ApiBufferOptions for 
additional information regarding each available option. 

If this function is not called, the default execution options will be used. 

◆ 
GetOptions() 

WMX3APIFUNC 
GetOptions ( 
) 
WMX3APIFUNC 
GetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Get the currently applied options for an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the options. 
[out] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that will contain the 
execution options for the 
API buffer. 

Remarks 

This function will get the currently applied execution options of an API buffer 
channel. The execution options are set using the SetOptions function. 

If this function is called before calling the SetOptions function, the default execution 
options will be returned. 

◆SetWatch() 
WMX3APIFUNC 
SetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Set watch options for an API buffer. The watch function will stop the buffer execution 
when an error is detected. 

Parameters 


[in] 
channel The API buffer channel 
to set the watch options. 

[in] 
pWatch A pointer to an object of 
the ApiBufferWatch that 
contains the watch 
options for the API 
buffer. 

Remarks 

This function will set the watch options of an API buffer channel. When the watch 
function is enabled, the API buffer will stop execution of API functions in the buffer 
when one of the watched axes are in the servo off, offline, amp alarm, or limit switch 
triggered states. The watched axes are checked for these states every 
communication cycle. 

When an watch error occurs, the API buffer will stop executing additional API 
functions, but the motion from API functions that have already been executed will 
not stop. 

The watch options can be configured to execute another API buffer channel when 
an watch error occurs. The API buffer channel that is executed this way typically 
contains an error handling routine, such as stopping all axes or generating an 
emergency stop. 

Watch function statuses, such as whether the watch error has occurred, the error 
code of the watch error, and the axis that triggered the watch error, can be obtained 
using the GetStatus function. 

The watch function is disabled by default. 

◆GetWatch() 

WMX3APIFUNC 
GetWatch ( 
) 
WMX3APIFUNC 
GetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Get watch options for an API buffer. The watch function will stop the buffer 
execution when an error is detected. 

Parameters 
[in] 
channel The API buffer channel 
to get the watch options. 
[out] 
pWatch A pointer to an object of 
the ApiBufferWatch that 
will contain the watch 
options for the API 
buffer. 

Remarks 

This function will get the currently applied watch options of an API buffer channel. 
The watch options are set using the SetWatch function. 

If this function is called before calling the SetWatch function, the default watch 
options will be returned. 

◆Sleep() 

WMX3APIFU WMX3APIFU 
NC Sleep ( 
unsigned int milliseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
milliseconds The length of the sleep 
command in 
milliseconds. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time. 

This function can add delays in between API functions in the API buffer. 

◆USleep() 
WMX3APIFU 
NC USleep ( 
unsigned int microseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
microseconds The length of the sleep 
command in 
microseconds. 

Remarks 

This function is similar to the Sleep function, except the sleep time is specified in 
units of microseconds. 


◆ 
Wait() [1/3] 


WMX3APIFU 
NC Wait ( int axis ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
axis The axis to wait to for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state. 

This function can delay the execution of the next API in the API buffer until the 
motion command of an axis completes. 

This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified axis. 

If the specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, 
AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be 
generated and logged in the ApiBufferStatus. If the stopOnError option was set to 
1 when calling the Execute function, the API buffer execution will stop when this 
occurs. 

◆Wait() [2/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
AxisSelection pAxisSelection ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
pAxisSelection A set of axes to wait for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until all the axes in the specified set of axes are in the Idle operation state. 

This function can delay the execution of the next API in the API buffer until the 
motion commands of multiple axes complete. 

This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified set of 
axes. 

If any specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, 
AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be 
generated and logged in the ApiBufferStatus. If the stopOnError option was set to 
1 when calling the Execute function, the API buffer execution will stop when this 
occurs. 

◆Wait() [3/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( ApiBufferCon condition ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the wait 
condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified condition is satisfied. 

This function can add variable length delays in between API functions in the API 
buffer. For example, the API buffer can be programmed to execute the next API in 
the buffer when the motion command of an axis completes. 

For ApiBufferCondition types with one or more axis parameters, this function will 
monitor the specified axes for errors. If any specified axis goes offline, generates an 
amp alarm, triggers a limit switch, or changes to servo off state, an ServoOffline, 
AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code will be generated and logged in the 
ApiBufferStatus. If the stopOnError option is set to 1 and passed to the Execute 
function, the API buffer execution will stop when this occurs. 

◆FlowIf() 
WMX3APIFUNC 
FlowIf ( ApiBufferCondition condition, 
ApiBufferCondition wait = NULL

) ) 
Add an "If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "If" 
condition. 
[in] 
wait An optional parameter 
that specifies the 
condition at which the 
"If" condition is 
evaluated. If not 
specified, or if set to the 
default value of NULL, 
the condition will be 
evaluated immediately 
when the "If" command 
is encountered during 
the execution of the API 
buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else", "Else If", or "End If" command will be skipped. If the 
condition evaluates to TRUE, all APIs in the API buffer sequence until the next 
"Else", "Else If", or "End If" command will be executed normally. 

"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf 



An additional "wait" condition may be specified. If a "wait" condition is specified, the 
condition for the "If" command is only evaluated when the "wait" condition becomes 
TRUE. While the "wait" condition is FALSE, the execution of the API buffer 
sequence will stop and the evaluation of the "If" condition will be deferred. 

◆FlowElseIf() 
WMX3APIFU 
NC 
FlowElseIf ( ApiBufferCon condition ) 
Add an "Else If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "Else 
If" condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else" or "End If" command will be skipped. If the condition 
evaluates to TRUE, all APIs in the API buffer sequence until the next "Else" or "End 
If" command will be executed normally. 

◆FlowElse() 

WMX3APIFUNC WMX3APIFUNC 
FlowElse ( 
) 
Add an "Else" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command. 

When this function is executed from inside an API buffer, all APIs between this 
command and the next "End If" command will be executed only if the preceding "If" 
or "Else If" command evaluates to FALSE. If the preceding "If" or "Else If" command 
evaluates to TRUE, then all APIs between this command and the next "End If" 
command will be skipped. 

◆FlowEndIf() 
WMX3APIFUNC 
lowEndIf 
F 

( 
) 
Add an "End If" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command designates the end of an "If"..."Else If"..."Else"..."End If" sequence. 
APIs in the API buffer after this command will be executed normally. 

 

Compensation Class Reference 

This class contains compensation functions. 

Public Member Functions 

Compensation (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

Compensation (const Compensation 
&src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

Compensation & operator= (const Compensation &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

Compensation () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~Compensation () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 


can be created by calling the 
CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More... 

WMX3APIFUNC SetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Set backlash compensation parameters. 

More... 

WMX3APIFUNC GetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Get backlash compensation parameters. 

More... 

WMX3APIFUNC EnableBacklashCompensation (int axis) 
Enable backlash compensation. More... 
WMX3APIFUNC DisableBacklashCompensation (int 
axis) 
Disable backlash compensation. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 

[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the CompensationErrorCode enum or the ErrorCode 
enum in the WMX3Api.h header. All errors returned by functions in class 
Compensation will be defined in one of these enums. Errors returned by functions 
in other classes may not be defined in one of these enums, and when such errors 
are passed to this function, an ErrorCodeNotDefined error will be returned and 
pString will contain the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
Compensation class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
wchar_t * pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetPitchErrorCompensation() [1/2]
WMX3APIFUNC 
SetPitchErrorCompe 
nsation ( int axis, 
PitchErrorCompens pitchErrCompData 
) 
Set pitch error compensation parameters. 
Parameters 
[in]axis The axis to set the pitch 
error compensation 

parameters. 
[in] 
pitchErrCompData A pointer to a 
PitchErrorCompensati 
onData object that 
contains the pitch error 
compensation 
parameters. 
Remarks 

In pitch error compensation, offsets are defined at regularly spaced points along the 
axis. When the axis command position is at one of these points, the corresponding 
offset is added to the command position. 

If this function is called with the enable parameter set to 1, pitch error compensation 
is immediately enabled. Otherwise, if this parameter is set to 0, pitch error 
compensation can be started by calling the EnablePitchErrorCompensation 
function. 

If pitch error compensation is currently enabled, it must be disabled with the 
DisablePitchErrorCompensation function before the pitch error compensation 
parameters can be changed with this function. 

The current offset applied by pitch error compensation is stored in compensation in 
the CoreMotionStatus structure obtained by the GetStatus function. 

Pitch error compensation is automatically disabled after starting any homing 
operation, as the pitch error is invalid if the home position is not known. 

See also 

Pitch Error Compensation 

◆SetPitchErrorCompensation() [2/2]
WMX3APIFUNC 
SetPitchErrorCompe 
nsation ( int axis, 
PitchErrorCompens pitchErrCompData 

) ) 
Set free position mode pitch error compensation parameters. 

Parameters 
[in] 
axis The axis to set the pitch 
error compensation 
parameters. 
[in] 
pitchErrCompData A pointer to a 
PitchErrorCompensati 
onFreePositionData 
object that contains the 
pitch error compensation 
parameters. 
Remarks 

This function is an overloaded version of the SetPitchErrorCompensation(int 
axis, PitchErrorCompensationData *pitchErrCompData) function that allows 
pitch error compensation to be started in free position mode. 

In free position mode, the position of each pitch point is specified instead of the 
pitch interval. This allows the spacing between pitch points to be variable. 

The difference between the largest pitch position and the smallest pitch position 
must be less than or equal to maxPitchErrorCompFreePositionRangeMultiplier 
times the distance between the two closest pitch positions. For example, 1000, 
1039, 1040, and 41000 is a valid sequence of pitch positions because the difference 
between the largest pitch position and the smallest pitch position (41000 -1000 = 
40000) is less than or equal to the 
maxPitchErrorCompFreePositionRangeMultiplier (40000) times the distance 
between the two closest pitch positions (1040 -1039 = 1). If the difference between 
the largest pitch position and the smallest pitch position is too large, the 
PitchPositionRangeTooLarge error will be returned. 

Other than the way in which the pitch point positions are specified, the specifications 
are the same as normal (pitch interval mode) pitch error compensation. 

If this function is called with the enable parameter set to 1, pitch error compensation 


is immediately enabled. Otherwise, if this parameter is set to 0, pitch error 
compensation can be started by calling the EnablePitchErrorCompensation 
function. 

If pitch error compensation is currently enabled, it must be disabled with the 
DisablePitchErrorCompensation function before the pitch error compensation 
parameters can be changed with this function. 

The current offset applied by pitch error compensation is stored in compensation in 
the CoreMotionStatus structure obtained by the GetStatus function. 

Pitch error compensation is automatically disabled after starting any homing 
operation, as the pitch error is invalid if the home position is not known. 

See also 
Pitch Error Compensation, Free Position Mode 

◆ 
GetPitchErrorCompensation() [1/2] 



WMX3APIFUNC 
GetPitchErrorCompe 
nsation ( 
WMX3APIFUNC 
GetPitchErrorCompe 
nsation ( 
int 
axis, 
PitchErrorCompens pitchErrCompData 
) 
Get pitch error compensation parameters. 

Parameters 
[in] 
axis The axis to get the pitch 
error compensation 
parameters. 
[out] 
pitchErrCompData A pointer to a 
PitchErrorCompensati 
onData object that will 
contain the pitch error 
compensation 
parameters. 
Remarks 

This function obtains the pitch error compensation parameters and whether or not 
pitch error compensation is enabled for an axis. 

If the pitch error compensation parameters were specified in free position mode 
(with the SetPitchErrorCompensation(int axis, 
PitchErrorCompensationFreePositionData *pitchErrCompData) function), this 
function cannot be used to read the pitch error compensation parameters. The 
overloaded GetPitchErrorCompensation(int axis, 
PitchErrorCompensationFreePositionData *pitchErrCompData) function must 
be used instead. 

◆GetPitchErrorCompensation() [2/2]

WMX3APIFUNC 
GetPitchErrorCompe 
nsation ( 
WMX3APIFUNC 
GetPitchErrorCompe 
nsation ( 
int 
axis, 
PitchErrorCompens pitchErrCompData 
) 
Get free position mode pitch error compensation parameters. 

Parameters 
[in] 
axis The axis to get the pitch 
error compensation 
parameters. 
[out] 
pitchErrCompData A pointer to a 
PitchErrorCompensati 
onFreePositionData 
object that will contain 
the pitch error 
compensation 
parameters. 
Remarks 

This function obtains the free position mode pitch error compensation parameters 
and whether or not pitch error compensation is enabled for an axis. 

If the pitch error compensation parameters were specified in pitch interval mode 
(with the SetPitchErrorCompensation(int axis, PitchErrorCompensationData 
*pitchErrCompData) function), this function cannot be used to read the pitch error 
compensation parameters. The overloaded GetPitchErrorCompensation(int axis, 
PitchErrorCompensationData *pitchErrCompData) function must be used 
instead. 

◆EnablePitchErrorCompensation() 

WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
Enable pitch error compensation. 
Parameters 
[in] 
axis The axis to enable pitch 
error compensation. 
Remarks 

This function enables pitch error compensation for an axis. Pitch error 
compensation parameters must be set beforehand using the 
SetPitchErrorCompensation function. 

◆DisablePitchErrorCompensation() 

WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
Disable pitch error compensation. 
Parameters 
[in] 
axis The axis to disable pitch 
error compensation. 
Remarks 

This function disables pitch error compensation for an axis. Pitch error 
compensation can be enabled again using the EnablePitchErrorCompensation 
function. 

◆GetPitchErrorCompensationAtPosition() 

WMX3APIFUNC 
GetPitchErrorCompe 
nsationAtPosition ( 
) 
WMX3APIFUNC 
GetPitchErrorCompe 
nsationAtPosition ( 
) 
int 
double 
axis, 
pos, 
double * pCompensation 
Obtain the pitch error compensation amount at the specified position. 

Parameters 
[in] 
axis The axis to get the pitch 
error compensation 
amount. 
[in] 
pos The position to get the 
pitch error compensation 
amount at. 
[out] 
pCompensation A pointer to a double 
type variable that returns 
the pitch error 
compensation amount at 
the specified position. 
Remarks 

This function returns the pitch error compensation amount that would be applied if 
the axis is at the specified position. 

Even if pitch error compensation is disabled, this function returns the pitch error 
compensation amount based on the last set pitch error compensation data. 

◆Set2DPitchErrorCompensation() [1/2]
WMX3APIFUNC 
Set2DPitchErrorCom 
pensation ( unsigned int channel, 

TwoDPitchErrorCom pitchErrCompData2D 
) 
Set two-dimensional (2D) pitch error compensation parameters. 

Parameters 
[in] 
channel The channel to set the 
two-dimensional pitch 
error compensation 
parameters. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[in] 
pitchErrCompData2D A pointer to a 
TwoDPitchErrorCompe 
nsationData object that 
contains the two-
dimensional pitch error 
compensation 
parameters. 
Remarks 

Two-Dimensional (2D) pitch error compensation is a more flexible and powerful 
version of pitch error compensation in which the offset amount is determined from 
the positions of two reference axes instead of just one axis. The offset is added to 
the position command of either of the two reference axes or to a third axis. 

If this function is called with the enable parameter set to 1, two-dimensional pitch 
error compensation is immediately enabled. Otherwise, if this parameter is set to 0, 
two-dimensional pitch error compensation can be started by calling the 
Enable2DPitchErrorCompensation function. 

If two-dimensional pitch error compensation is currently enabled, it must be disabled 
with the Disable2DPitchErrorCompensation function before the two-dimensional 
pitch error compensation parameters can be changed with this function. 

The current offset applied by two-dimensional pitch error compensation to an axis is 


stored in compensation in the CoreMotionStatus structure obtained by the 
GetStatus function. 

When two-dimensional pitch error compensation is disabled for an axis, all other 
two-dimensional pitch error compensation channels for which that axis is one of the 
reference axes are also disabled to prevent any axes from moving. 

Two-dimensional pitch error compensation is automatically disabled after 
starting any homing operation, as the pitch error is invalid if the home 
position is not known. 

See also 

Two-Dimensional (2D) Pitch Error Compensation 

◆Set2DPitchErrorCompensation() [2/2]
WMX3APIFUNC 
Set2DPitchErrorCom 
pensation ( unsigned int channel, 
TwoDPitchErrorCom pitchErrCompData2D 
) 
Set free position two-dimensional (2D) pitch error compensation parameters. 

Parameters 
[in] 
channel The channel to set the 
two-dimensional pitch 
error compensation 
parameters. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[in] 
pitchErrCompData2D A pointer to a 
TwoDPitchErrorCompe 
nsationFreePositionDa 
ta object that contains 


the two-dimensional 
pitch error compensation 
parameters. 

Remarks 

This function is an overloaded version of the 

Set2DPitchErrorCompensation(unsigned int channel, 
TwoDPitchErrorCompensationData *pitchErrCompData2D) function that allows 
two-dimensional pitch error compensation to be started in free position mode. 

In free position mode, the reference axis positions of each pitch point are specified 
instead of the pitch intervals. This allows the spacing between pitch points to be 
variable. 

The difference between the largest pitch position and the smallest pitch position of 
each reference axis must be less than or equal to 
max2dPitchErrorCompFreePositionRangeMultiplier times the distance between 
the two closest pitch positions of that reference axis. For example, 1000, 1039, 
1040, and 41000 is a valid sequence of pitch positions because the difference 
between the largest pitch position and the smallest pitch position (41000 -1000 = 
40000) is less than or equal to the 
max2dPitchErrorCompFreePositionRangeMultiplier (40000) times the distance 
between the two closest pitch positions (1040 -1039 = 1). If the difference between 
the largest pitch position and the smallest pitch position is too large for either 
reference axis, the PitchPositionRangeTooLarge error will be returned. 

Other than the way in which the pitch point positions are specified, the specifications 
are the same as normal (pitch interval mode) two-dimensional pitch error 
compensation. 

If this function is called with the enable parameter set to 1, two-dimensional pitch 
error compensation is immediately enabled. Otherwise, if this parameter is set to 0, 
two-dimensional pitch error compensation can be started by calling the 
Enable2DPitchErrorCompensation function. 

If two-dimensional pitch error compensation is currently enabled, it must be disabled 
with the Disable2DPitchErrorCompensation function before the two-dimensional 
pitch error compensation parameters can be changed with this function. 


The current offset applied by two-dimensional pitch error compensation to an axis is 
stored in compensation in the CoreMotionStatus structure obtained by the 
GetStatus function. 

When two-dimensional pitch error compensation is disabled for an axis, all other 
two-dimensional pitch error compensation channels for which that axis is one of the 
reference axes are also disabled to prevent any axes from moving. 

Two-dimensional pitch error compensation is automatically disabled after 
starting any homing operation, as the pitch error is invalid if the home 
position is not known. 

See also 
Two-Dimensional (2D) Pitch Error Compensation, Free Position Mode 

◆Get2DPitchErrorCompensation() [1/2]
WMX3APIFUNC 
Get2DPitchErrorCo 
mpensation ( unsigned int channel, 
TwoDPitchErrorCom pitchErrCompData2D 
) 
Get two-dimensional (2D) pitch error compensation parameters. 

Parameters 
[in] 
channel The channel to get the 
two-dimensional pitch 
error compensation 
parameters. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[out] 
pitchErrCompData2D A pointer to a 
TwoDPitchErrorCompe 
nsationData object that 


will contain the two-
dimensional pitch error 
compensation 
parameters. 

Remarks 

This function obtains the two-dimensional pitch error compensation parameters and 
whether or not two-dimensional pitch error compensation is currently enabled for a 
two-dimensional pitch error compensation channel. 

If the two-dimensional pitch error compensation parameters were specified in free 
position mode (with the Set2DPitchErrorCompensation(unsigned int channel, 
TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D) 

function), this function cannot be used to read the two-dimensional pitch error 
compensation parameters. The overloaded 

Get2DPitchErrorCompensation(unsigned int channel, 
TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D) 

function must be used instead. 

In the returned TwoDPitchErrorCompensationData object, the 
pitchCompensationValue at indices greater than or equal to the pitchCount of 
each respective axis will be set to 0. 

◆Get2DPitchErrorCompensation() [2/2]
WMX3APIFUNC 
Get2DPitchErrorCo 
mpensation ( unsigned int channel, 
TwoDPitchErrorCom pitchErrCompData2D 
) 
Get free position two-dimensional (2D) pitch error compensation parameters. 

Parameters 
[in] 
channel The channel to get the 
two-dimensional pitch 


error compensation 
parameters. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[out] 
pitchErrCompData2D A pointer to a 
TwoDPitchErrorCompe 
nsationFreePositionDa 
ta object that will contain 
the two-dimensional 
pitch error compensation 
parameters. 
Remarks 

This function obtains the two-dimensional pitch error compensation parameters and 
whether or not two-dimensional pitch error compensation is currently enabled for a 
two-dimensional pitch error compensation channel. 

If the two-dimensional pitch error compensation parameters were specified in pitch 
interval mode (with the Set2DPitchErrorCompensation(unsigned int channel, 
TwoDPitchErrorCompensationData *pitchErrCompData2D) function), this 
function cannot be used to read the two-dimensional pitch error compensation 
parameters. The overloaded Get2DPitchErrorCompensation(unsigned int 
channel, TwoDPitchErrorCompensationData *pitchErrCompData2D) function 
must be used instead. 

In the returned TwoDPitchErrorCompensationData object, the 
pitchCompensationValue at indices greater than or equal to the pitchCount of 
each respective axis will be set to 0. 

◆Enable2DPitchErrorCompensation() 

WMX3APIFU 
NC 
Enable2DPitc 
hErrorCompe 
WMX3APIFU 
NC 
Enable2DPitc 
hErrorCompe 
nsation ( 
unsigned int channel ) 
Enable two-dimensional (2D) pitch error compensation. 
Parameters 
[in] 
channel The channel to enable 
two-dimensional pitch 
error compensation. Up 
to 
max2dPitchErrorComp 
Channel channels may 
be defined. 

Remarks 

This function enables the specified two-dimensional pitch error compensation 
channel. Two-dimensional pitch error compensation parameters must be set 
beforehand using the SetPitchErrorCompensation function. 

◆Disable2DPitchErrorCompensation() 

WMX3APIFU 
NC 
Disable2DPit 
chErrorComp 
WMX3APIFU 
NC 
Disable2DPit 
chErrorComp 
ensation ( 
unsigned int channel ) 
Disable two-dimensional (2D) pitch error compensation. 
Parameters 
[in] 
channel The channel to disable 
two-dimensional pitch 
error compensation. Up 
to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
Remarks 

This function disables the specified two-dimensional pitch error compensation 
channel. Two-dimensional pitch error compensation can be enabled again using the 
Enable2DPitchErrorCompensation function. 

◆Get2DPitchErrorCompensationAtPosition() 
WMX3APIFUNC 
Get2DPitchErrorCo 
mpensationAtPositio 
n ( unsigned int channel, 
double refPos1, 
double refPos2, 
double * pCompensation 
) 
Obtain the two-dimensional (2D) pitch error compensation amount at the specified 

position. 
Parameters 
[in] 
channel The channel to get the 
two-dimensional pitch 
error compensation 
amount. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[in] 
refPos1 The position of the first 
reference axis to get the 
two-dimensional pitch 
error compensation 
amount at. 
[in] 
refPos2 The position of the 
second reference axis to 
get the two-dimensional 
pitch error compensation 
amount at. 
[out] 
pCompensation A pointer to a double 
type variable that returns 
the two-dimensional 
pitch error compensation 
amount at the specified 
reference axis positions. 
Remarks 

This function returns the two-dimensional pitch error compensation amount that 
would be applied if the reference axes are at the specified positions. 

Even if two-dimensional pitch error compensation is disabled, this function returns 
the two-dimensional pitch error compensation amount based on the last set two-
dimensional pitch error compensation data. 

◆ 
SetBacklashCompensation() 

◆SetBacklashCompensation() 
WMX3APIFUNC 
SetBacklashCompen 
sation ( int axis, 
BacklashCompensa pBacklashCompData 
) 
Set backlash compensation parameters. 

Parameters 
[in] 
axis The axis to set the 
backlash compensation 
parameters. 
[in] 
pBacklashCompData A pointer to a 

BacklashCompensatio 
nData object that 
contains the backlash 
compensation 
parameters. 

Remarks 

Backlash compensation will apply an offset based on the direction of motion. 
Parameters determine whether this offset is applied immediately upon changing 
direction, or if it is applied more gradually over a short distance after changing 
direction. 

If backlash compensation is currently enabled, it must be disabled with the 
DisableBacklashCompensation function before the backlash compensation 
parameters can be changed with this function. 

The current backlash compensation parameters and whether backlash 
compensation is enabled for an axis can be obtained using the 
GetBacklashCompensation function. The current offset applied by backlash 
compenation is stored in compensation in the CoreMotionStatus structure 
obtained by the GetStatus function. 

See also 



◆GetBacklashCompensation() 
Backlash Compensation 
WMX3APIFUNC 
GetBacklashCompe 
nsation ( int axis, 
BacklashCompensa pBacklashCompData 
) 
Get backlash compensation parameters. 
Parameters 
[in] 
[out] 
axis 
pBacklashCompData 
The axis to get the 
backlash compensation 
parameters. 
A pointer to a 
BacklashCompensatio 
nData object that will 
contain the backlash 
compensation 
parameters. 
Remarks 

This function obtains the backlash compensation parameters and whether or not 
backlash compensation is enabled for an axis. 

◆EnableBacklashCompensation() 

WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
Enable backlash compensation. 

Parameters 
[in] 
axis The axis to enable 
backlash compensation. 
Remarks 

This function enables backlash compensation for an axis. Backlash compensation 
parameters must be set beforehand using the SetBacklashCompensation 
function. 

◆DisableBacklashCompensation() 

WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
Disable backlash compensation. 
Parameters 
[in] 
axis The axis to disable 
backlash compensation. 
Remarks 

This function disables backlash compensation for an axis. Backlash compensation 
can be enabled again using the EnableBacklashCompensation function. 

 

CoreMotion Class Reference 

This class contains core motion functions. 

Public Member Functions 

CoreMotion (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

CoreMotion (const CoreMotion &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

CoreMotion & operator= (const CoreMotion &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

CoreMotion () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~CoreMotion () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC GetStatus (CoreMotionStatus *status) 
Read the current system status from the 
engine. More... 
WMX3APIFUNC ClearVibrationStatus (int axis) 
Clear the vibration measurement 
statuses of an axis. More... 

WMX3APIFUNC ClearVibrationStatus (AxisSelection 
*pAxisSelection) 

Clear the vibration measurement 
statuses of multiple axes. More... 

WMX3APIFUNC ExecEStop (EStopLevel::T level) 
Initiate an emergency stop to stop the 
motion of all axes. More... 
WMX3APIFUNC ReleaseEStop () 
Clear the emergency stop state to allow 
the axes to be controlled again. More... 
WMX3APIFUNC TriggerFlightRecorder () 
Trigger the flight recorder to write the 
flight recorder data to file. More... 
WMX3APIFUNC ResetFlightRecorder () 
Reset the flight recorder so that it may be 
triggered again. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 


Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Public Attributes 

Friends 

AxisControl * axisControl 
Motion * motion 
Home * home 
Velocity * 
Torque * 
Sync * 
Config * 
velocity 
torque 
sync 
config 

class AxisControl 

class Motion 


class Home 
class Velocity 
class Torque 
class Sync 
class Config 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 


code must be defined in the CoreMotionErrorCode enum or the ErrorCode enum 
in the WMX3Api.h header. All errors returned by functions in class CoreMotion will 
be defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
CoreMotion class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆GetStatus() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
GetStatus ( 
CoreMotionSstatus ) 
Read the current system status from the engine. 

Parameters 
[out] 
status A pointer to an object of 
the CoreMotionStatus 
class that will be filled in 
with the current system 
status. 

Remarks 

This function obtains the main status of the entire system and all axes. This function 
is typically called at regular intervals using a timer loop in order to monitor the status 
of the system and update the user interface. 

This function has a comparatively low execution overhead, as the statuses are read 
directly from memory without communicating with the engine. 

See also 

Status -Overview 

◆ClearVibrationStatus() [1/2]

WMX3APIFU 
NC 
ClearVibratio 
nStatus ( int axis ) 
WMX3APIFU 
NC 
ClearVibratio 
nStatus ( int axis ) 
Clear the vibration measurement statuses of an axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

This function clears the Vibration Pos Min, Vibration Pos Max, Vibration Pos 
Average, Vibration Vel Min, Vibration Vel Max, Vibration Vel Average, Vibration 
Trq Min, Vibration Trq Max, and Vibration Trq Average statuses to 0. 

The statuses are cleared during the next communication cycle. 

◆ClearVibrationStatus() [2/2]

WMX3APIFU 
NC 
ClearVibratio 
WMX3APIFU 
NC 
ClearVibratio 
nStatus ( 
AxisSelection pAxisSelection ) 
Clear the vibration measurement statuses of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to clear. 
Remarks 

This function is an overloaded function of ClearVibrationStatus that clears the 
vibration measurement statuses of multiple axes. 

◆ExecEStop() 

) ) 
WMX3APIFU 
NC 
ExecEStop ( 
EStopLevel::T level 
Initiate an emergency stop to stop the motion of all axes. 

Parameters 
[in] 
level The level of the 
emergency stop. 

Remarks 

This function is used to stop all axes in emergency situations. 

The exact effect of the emergency stop will depend on the specified emergency stop 
"level". It is possible to call this function while the system is already in emergency 
stop state to increase the "level" of the emergency stop to a higher level. However, 
this function cannot be used to reduce the "level" of the emergency stop to a lower 
level. 

After an emergency stop is triggered, the system enters an emergency stop state 
and axes will be unable to be commanded. The ReleaseEStop API function must 
be called to release the emergency stop state and allow axes to be commanded 
again. The current emergency stop state of the system can be read using the 
GetStatus function to obtain the emergencyStop and emergencyStopLevel 
statuses. 

This function executes a software emergency stop, which is not suitable for 
critical emergencies. A hardware-based emergency stop must also be 
integrated physically on the machine. 

◆ReleaseEStop() 

WMX3APIFUNC 
ReleaseEStop ( ) 
WMX3APIFUNC 
ReleaseEStop ( ) 
Clear the emergency stop state to allow the axes to be controlled again. 

Remarks 

This function clears the emergency stop state that is set by the ExecEStop function. 
See ExecEStop for additional information. 

◆TriggerFlightRecorder() 
WMX3APIFUNC 
TriggerFlightRec 
order ( ) 
Trigger the flight recorder to write the flight recorder data to file. 

Remarks 

This function will immediately trigger the flight recorder to write the flight recorder 
data to file, regardless of the flight recorder conditions specified in 
FlightRecorderParam. 

◆ResetFlightRecorder() 

WMX3APIFUNC 
ResetFlightReco 
rder ( 
WMX3APIFUNC 
ResetFlightReco 
rder ( 
) 
Reset the flight recorder so that it may be triggered again. 

Remarks 

Once the flight recorder is triggered, it can normally not be triggered again until the 
engine is restarted to prevent the flight recorder file from being overwritten. When 
this function is called after the flight recorder has been triggered, the flight recorder 
will be reset so that it may be triggered again. When the flight recorder is triggered 
again, the previous flight recorder file will be overwritten unless it has been moved 
to a different directory or the Flight Recorder Time Stamp parameter is set to 
enabled. 

 

AxisControl Class Reference 

This class contains axis control functions. 

Public Member Functions 

AxisControl (CoreMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC SetServoOn (int axis, int newStatus) 
Turn a servo drive in the servo network 
on or off. More... 

WMX3APIFUNC SetServoOn (AxisSelection 
*pAxisSelection, int newStatus) 

Turn multiple servo drives in the servo 
network on or off. More... 

WMX3APIFUNC ClearAmpAlarm (int axis) 
Clear the servo drive amp alarm on the 
specified axis. More... 
WMX3APIFUNC ClearAmpAlarm (AxisSelection 
*pAxisSelection) 
Clear the servo drive amp alarms on 
multiple axes. More... 
WMX3APIFUNC ClearAxisAlarm (int axis) 
Clear any axis alarms on the specified 
axis. More... 

WMX3APIFUNC ClearAxisAlarm (AxisSelection 

*pAxisSelection) 

Clear any axis alarms on multiple axes. 

More... 

WMX3APIFUNC SetAxisCommandMode (int axis, 
AxisCommandMode::T mode) 

Set the command mode of the axis. 

More... 


Public Attributes 

WMX3APIFUNC SetAxisCommandMode (AxisSelection 
*pAxisSelection, AxisCommandMode::T 
mode) 
Set the command mode of multiple axes. 
More... 

WMX3APIFUNC GetAxisCommandMode (int axis, 
AxisCommandMode::T *pMode) 

Get the command mode of the axis. 

More... 

WMX3APIFUNC GetPosCommand (int axis, double 
*pPosition) 

Get the current cycle position command 
of the axis. More... 

WMX3APIFUNC GetPosFeedback (int axis, double 
*pPosition) 

Get the current cycle position feedback 
of the axis. More... 

WMX3APIFUNC GetVelCommand (int axis, double 
*pVelocity) 

Get the current cycle velocity command 
of the axis. More... 

WMX3APIFUNC GetVelFeedback (int axis, double 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to turn 
on or off. Even after this function returns no error, the servo may take a few cycles 
to turn on or off, or may fail to turn on or off. The Servo On status (obtained with 
GetStatus) should be checked to verify that the axis servo has turned on or off 
before continuing with operations that require the servo to be on or off. 

◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * pAxisSelection, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to 
clear the amp alarm. Even after this function returns no error, the servo may take a 
few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp 
Alarm status (obtained with GetStatus) can be checked to verify whether the amp 
alarm has been cleared. 

◆ClearAmpAlarm() [2/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
AxisSelection pAxisSelection ) 
Clear the servo drive amp alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
int axis 
) 
Clear any axis alarms on the specified axis. 
Parameters 
[in] 
axis The axis to clear the axis 
alarm. 

Remarks 

This function clears the axis alarms for the specified axis. Axis alarms are software-
based alarms generated by WMX3 such as following error. These alarms are not 
generated by the hardware. 

To clear hardware-generated amp alarms, use the ClearAmpAlarm function. 

◆ClearAxisAlarm() [2/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
AxisSelection pAxisSelection ) 
Clear any axis alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the axis alarm. 

Remarks 

This function is a variation of the ClearAxisAlarm function that operates on multiple 
axes at the same time. 

◆SetAxisCommandMode() [1/2]

WMX3APIFUNC 
SetAxisCommandM 
ode ( 
WMX3APIFUNC 
SetAxisCommandM 
ode ( 
int 
axis, 
AxisCommandMode mode 
) 
Set the command mode of the axis. 

Parameters 
[in] 
axis The axis to set the 
command mode. 
[in] 
mode The command mode to 
set the axis to. 

Remarks 

The AxisCommandMode of an axis determines how the axis is commanded. An 
axis operating in Position mode will be controlled by position, an axis operating in 
Velocity mode will be controlled by velocity, and an axis operating in Torque mode 
will be controlled by torque. Most motion commands can only be executed by an 
axis in a particular mode. 

The axis command mode can only be changed while the axis is in the Idle operation 
state or when the engine is not communicating with the axes (the engine is not in 
Communicating state). Calling this function while the axis is not in Idle operation 
state will cause the NotIdleState error to be returned. 

See also 

Tutorial 3-7: Axis modes 

◆SetAxisCommandMode() [2/2]

WMX3APIFUNC 
SetAxisCommandM 
WMX3APIFUNC 
SetAxisCommandM 
ode ( 
) 
AxisSelection * pAxisSelection, 
AxisCommandMode mode 
Set the command mode of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
set the command mode. 
[in] 
mode The command mode to 
set the axis to. 

Remarks 

This function is a variation of the SetAxisCommandMode function that operates on 
multiple axes at the same time. 

This function will change the command mode of the specified axes in sequence, 
starting from the smallest axis number. If the command mode of an axis cannot be 
changed (for example, because the axis is not in Idle operation state), this function 
will return an error and abort changing the command mode of subsequent axes, but 
the command modes of earlier axes will remain changed. 

See also 

Tutorial 3-7: Axis modes 

◆GetAxisCommandMode() 

WMX3APIFUNC 
GetAxisCommandM 
ode ( 
WMX3APIFUNC 
GetAxisCommandM 
ode ( 
int 
axis, 
AxisCommandMode pMode 
) 
Get the command mode of the axis. 

Parameters 
[in] 
axis The axis to get the 
command mode. 
[out] 
pMode A pointer to a 
AxisCommandMode 
variable that will contain 
the command mode of 
the axis. 

Remarks 

This function obtains that current AxisCommandMode of an axis. This value is 
identical to the Axis Command Mode status obtained with the GetStatus function. 
See also 

Tutorial 3-7: Axis modes 

◆GetPosCommand() 

WMX3APIFUNC 
GetPosCommand ( 
WMX3APIFUNC 
GetPosCommand ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 
Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the Velocity Cmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks 

This function obtains the current cycle velocity feedback of an axis. This value is 
identical to the Actual Velocity status obtained with the GetStatus function. 

 

Config Class Reference 

This class contains configuration functions. 

Classes 

class AlarmParam 
This class contains alarm parameters of 
an axis. See Alarm Parameters for a 
description of each parameter. More... 

class AxisParam 
This class contains parameters specific 
to an axis. See Axis Parameters for a 
description of each parameter. More... 

class CircularIntplOverrideType 
This enumerator class enumerates the 
circular interpolation override types. The 
circular interpolation override type 
determines the method by which a 
circular interpolation overrides another 
linear or circular interpolation. More... 

class EmergencyStopParam 
This class contains emergency stop 
parameters. See Emergency Stop 
Parameters for a description of each 
parameter. More... 

class EStopLevel1Type 
This enumerator class enumerates the 
actions to take when a level 1 
emergency stop is triggered. More... 

class EStopSignalSource 
This enumerator class enumerates the 
sources of an emergency stop signal. 


More... 

class EStopStatusSignalDestination 
This enumerator class enumerates the 
destinations of an emergency stop status 
signal. More... 

class FeedbackParam 
This class contains feedback parameters 
of an axis. See Feedback Parameters 
for a description of each parameter. 
More... 

class FlightRecorderParam 
This class contains flight recorder 
parameters. See Flight Recorder 
Parameters for a description of each 
parameter. More... 

class FollowingErrorAlarmType 
This enumerator class enumerates the 
actions to take when a following error 
alarm occurs (when the difference 
between the position command and 
feedback exceeds a set value). More... 

class HomeDirection 
This enumerator class enumerates the 
directions of homing. More... 

class HomeParam 

This class contains home parameters of 
an axis. See Homing Parameters for a 
description of each parameter. More... 

class HomeType 
This enumerator class enumerates the 
home types. The home type determines 
the method by which the axis searches 
for the home position. Also see Homing 
for a more detailed description of each 
home type. More... 


class 
class class 
LimitParam 
This class contains limit parameters of 
an axis. See Limit Parameters for a 
description of each parameter. More... 
LimitSwitchDirection 
This enumerator class enumerates the 
limit switch directions. The limit switch 
direction indicates whether the limit 
switches are attached in the normal 
direction or the reverse direction. More... 
class 
class 
class 
class 
LimitSwitchType 
This enumerator class enumerates the 
limit switch types. The limit switch type 
determines the action to take when the 
limit switch of an axis is triggered. More... 
LinearIntplOverrideType 
This enumerator class enumerates the 
linear interpolation override types. The 
linear interpolation override type 
determines the method by which a linear 
interpolation overrides another linear or 
circular interpolation. More... 
LinearIntplProfileCalcMode 
This enumerator class enumerates the 
linear interpolation profile calculation 
modes. This parameter determines how 
the profile parameters (velocity, 
acceleration, etc.) for linear interpolation 
are calculated from the maxVelocity, 
maxAcc, maxDec, maxJerkAcc, and 
maxJerkDec specified for each 
interpolating axis. More... 
MasterDesyncType 
This enumerator class enumerates the 
actions to take for the master axis when 


one of the slave axes becomes desynchronized. 
More... 

class MotionParam 
This class contains motion parameters of 
an axis. See Motion Parameters for a 
description of each parameter. More... 

class ProhibitOvertravelType 
This enumerator class enumerates the 
prohibit overtravel types. Depending on 
this parameter, profile parameters (such 
as velocity, deceleration, etc.) may be 
changed from the specified values to 
prevent overtravel beyond the target 
position. More... 

class SlaveDesyncType 
This enumerator class enumerates the 
actions to take for the slave axis when 
the master axis becomes desynchronized. 
More... 

class SyncCompensationMode 
This enumerator class enumerates the 
sync compensation modes. The sync 
compensation mode determines any 
compensation to apply to improve the 
sync control between the master and 
slave axes. More... 

class SyncParam 
This class contains sync parameters of 
an axis. See Sync Parameters for a 
description of each parameter. More... 

class SystemParam 
This class contains system parameters 
for the entire system. See Parameters 
for a description of each parameter. 


More... 

class VelocityFollowingErrorAlarmType 

This enumerator class enumerates the 
actions to take when a velocity following 
error alarm occurs (when the difference 
between the velocity command and 
feedback exceeds a set value). More... 

class VelocityMonitorSource 
This enumerator class specifies the 
source for the actual velocity status. 
More... 

Public Member Functions 

Config (CoreMotion *f) 

bool IsDeviceValid () 

WMX3APIFUNC SetParam (SystemParam *pParam, 
SystemParam *pParamError=NULL) 

Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More... 

WMX3APIFUNC SetSingleTurn (int axis, bool enable, 
unsigned int encoderCount) 

Set the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC SetMovingAverageProfileTime (int axis, 
double milliseconds) 

Set the moving average profile time 
parameter for an axis. More... 

WMX3APIFUNC SetAxisUnit (int axis, double unit) 
Set the axis unit parameter for an axis. 
More... 
WMX3APIFUNC SetVelocityFeedforwardGain (int axis, 
double gain) 
Set the velocity feedforward gain 
parameter for an axis. More... 
WMX3APIFUNC SetAxisPolarity (int axis, char polarity) 
Set the axis polarity for an axis. More... 

WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More... 

WMX3APIFUNC GetVelocityFeedforwardGain (int axis, 
double *pGain) 

Get the velocity feedforward gain of an 
axis. More... 

WMX3APIFUNC GetAxisPolarity (int axis, char *pPolarity) 
Get the axis polarity of an axis. More... 

WMX3APIFUNC GetAbsoluteEncoderMode (int axis, bool 
*pEnable) 


Get the absolute encoder mode of an 
axis. More... 

WMX3APIFUNC GetAbsoluteEncoderHomeOffset (int 
axis, double *pOffset) 

Get the absolute encoder home offset of 
an axis. More... 

WMX3APIFUNC GetEncoderRange (int axis, bool 
*pEnable, int *pEncoderRangeLow, int 
*pEncoderRangeHigh) 
Get the encoder range mode and 
encoder range of an axis. More... 

WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL) 

Set flight recorder parameters. More... 

WMX3APIFUNC SetFlightRecorderPath (char *pPath) 
Set the file path to save the flight 
recorder data to. More... 
WMX3APIFUNC SetFlightRecorderPath (wchar_t *pPath) 
Set the file path to save the flight 
recorder data to. More... 

WMX3APIFUNC SetEmergencyStopParam 
(EmergencyStopParam *pParam, 
EmergencyStopParam 
*pParamError=NULL) 
Set emergency stop parameters. More... 

WMX3APIFUNC GetFeedbackParam (int axis, 
FeedbackParam *pParam) 

Get feedback parameter settings for an 
axis. More... 

WMX3APIFUNC GetHomeParam (int axis, HomeParam 

*pParam) 

Get home parameter settings for an axis. 

More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More... 

WMX3APIFUNC GetAndExportAll (char *pPath) 
Get the current parameters for all axes 
and export them to an xml file. More... 

WMX3APIFUNC GetAndExportAll (wchar_t *pPath) 


Get the current parameters for all axes 
and export them to an xml file. More... 

Public Attributes 

WMX3APIFUNC ImportAndSetAll (char *pPath, 
SystemParam *pParamError=NULL, 
AxisParam *pAxisParamError=NULL) 
Imports parameters from an xml file and 
set them as the current parameters for all 
axes. More... 

WMX3APIFUNC ImportAndSetAll (wchar_t *pPath, 
SystemParam *pParamError=NULL, 
AxisParam *pAxisParamError=NULL) 
Imports parameters from an xml file and 
set them as the current parameters for all 
axes. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆SetParam() [1/2]

pParam, pParam, 
WMX3APIFUNC 
SetParam ( 
) 
SystemParam * 
SystemParam * 
pParamError = NULL
Set system parameter settings for all axes. 

Parameters 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameter settings to 
set. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 

See also 

Parameters -Overview 

◆GetParam() [1/2]

pParam, pParam, 
WMX3APIFU 
NC 
GetParam ( 
SystemParam pParam ) 
Get system parameter settings for all axes. 
Parameters 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetParam() [2/2]
WMX3APIFUNC 
SetParam ( 
) 
pParamError = NULL
int 
axis, 
SystemParam * 
SystemParam * 
Set system parameter settings for a single axis. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 


settings for every axis, 
only the parameters of 
the specified axis will be 
applied. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. Only the 
parameter values 
corresponding to the 
specified axis will be 
modified this way. 
Remarks 

This function will not set parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will set axis-specific parameters 
in the FlightRecorderParam and EmergencyStopParam classes such as 
collectAxisFlightRecorderData and eStopDec. 

See also 

Parameters -Overview 

◆ 
GetParam() [2/2] 



WMX3APIFUNC 
GetParam ( int axis, 
WMX3APIFUNC 
GetParam ( int axis, 
SystemParam * pParam 
) 
Get system parameter settings for a single axis. 

Parameters 
[in] 
axis The axis to get the 
parameters. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
current parameter 
settings. Although this 
object contains 
parameter settings for 
every axis, only the 
parameter values 
corresponding to the 
specified axis will be 
modified by this function. 
Remarks 

This function will not get parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will get axis-specific parameters 
in the FlightRecorderParam and EmergencyStopParam classes such as 
collectAxisFlightRecorderData and eStopDec. 

See also 

Parameters -Overview 

◆SetAxisParam() [1/2]

pParam, pParam, 
WMX3APIFUNC 
SetAxisParam ( 
) 
AxisParam * 
AxisParam * 
pParamError = NULL
Set axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
pParam A pointer to an object of 
the AxisParam class 
that contains the 
parameter settings to 
set. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AxisParam object that is 
passed to this argument 
will contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 
See also 
Parameters -Overview 

◆GetAxisParam() [1/2]

pParam ) pParam ) 
WMX3APIFU 
NC 
GetAxisPara 
m ( 
AxisParam * 
Get axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetAxisParam() [2/2]
WMX3APIFUNC 
SetAxisParam ( int axis, 
AxisParam * pParam, 
AxisParam * pParamError = NULL) 
Set axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 


the AxisParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 
settings for every axis, 
only the parameters of 
the specified axis will be 
applied. 

[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AxisParam object that is 
passed to this argument 
will contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. Only the 
parameter values 
corresponding to the 
specified axis will be 
modified this way. 

See also 

Parameters -Overview 

◆ 
GetAxisParam() [2/2] 



WMX3APIFUNC 
GetAxisParam ( 
WMX3APIFUNC 
GetAxisParam ( 
int 
axis, 
AxisParam * pParam 
) 
Get axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to get the 
parameters. 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. Although this 
object contains 
parameter settings for 
every axis, only the 
parameter values 
corresponding to the 
specified axis will be 
modified by this function. 
See also 
Parameters -Overview 

◆SetGearRatio() 

WMX3APIFUNC 
SetGearRatio ( 
WMX3APIFUNC 
SetGearRatio ( 
int 
double 
axis, 
numerator, 
double denominator 
) 
Set the gear ratio of the axis. 
This function sets the Gear Ratio Numerator and Gear Ratio Denominator 

parameters. 
Parameters 
[in] 
axis The axis to set the gear 
ratio. 
[in] 
[in] 
numerator 
denominator 
The numerator of the 
gear ratio. 
The denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆SetSingleTurn() 

WMX3APIFUNC 
SetSingleTurn ( 
WMX3APIFUNC 
SetSingleTurn ( 
int 
bool 
axis, 
enable, 
unsigned int encoderCount 
) 
Set the single turn mode and single turn encoder count of an axis. 
This function sets the Single Turn Mode and Single Turn Encoder Count 

parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[in] 
enable If FALSE, single turn 
mode will be disabled for 
the axis. If TRUE, single 
turn mode will be 
enabled for the axis. 
[in] 
encoderCount If single turn mode is 
enabled, the number of 
encoder counts (pulses) 
in one turn. 

See also 

Tutorial 4-4: Single turn 

◆SetMovingAverageProfileTime() 

WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis. 

This function sets the Global Moving Average Profile Time Milliseconds 
parameter. This parameter will have no effect unless the Enable Global Moving 
Average Profile Time Milliseconds parameter is set to TRUE for the axis (using a 
function such as SetParam or SetMotionParam). This parameter affects motion 
using the TrapezoidalMAT profile type. 

Parameters 
[in] 
axis The axis to set the 
moving average profile 
time. 
[in] 
milliseconds The averaging time of 
the moving average filter 
in milliseconds. 

◆SetAxisUnit() 

WMX3APIFUNC 
SetAxisUnit ( 
) 
WMX3APIFUNC 
SetAxisUnit ( 
) 
int 
axis, 
double unit 
Set the axis unit parameter for an axis. 
This function sets the Axis Unit parameter. 
Parameters 
[in] 
axis The axis to set the axis 
unit. 
[in] 
unit The specified axis unit. 

◆SetVelocityFeedforwardGain() 
WMX3APIFUNC 
SetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double gain 
Set the velocity feedforward gain parameter for an axis. 
This function sets the Velocity Feedforward Gain parameter. 

Parameters 
[in] 
axis The axis to set velocity 
feedforward gain. 
[in] 
gain The specified velocity 
feedforward gain. 

◆SetAxisPolarity() 

WMX3APIFUNC 
SetAxisPolarity ( 
) 
WMX3APIFUNC 
SetAxisPolarity ( 
) 
int 
axis, 
char polarity 
Set the axis polarity for an axis. 
This function sets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to set the axis 
polarity. 
[in] 
polarity If set to 1, the polarity is 
normal; if set to -1, the 
axis polarity will be 
reversed (the physical 
axis will move in the 
opposite direction). 

◆SetAbsoluteEncoderMode() 

WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool enable 
Set the absolute encoder mode for an axis. 
This function sets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder mode. 
[in] 
enable If FALSE, absolute 
encoder mode will be 
disabled for the axis. If 
TRUE, absolute encoder 
mode will be enabled for 
the axis. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double offset 
Set the absolute encoder home offset for an axis. 
This function sets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder home 
offset. 
[in] 
offset The specified absolute 
encoder home offset. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetEncoderRange() 

WMX3APIFUNC 
SetEncoderRange ( 
WMX3APIFUNC 
SetEncoderRange ( 
) 
int 
bool 
int 
int 
axis, 
enable, 
encoderRangeLow, 
encoderRangeHigh 
Set the encoder range mode and encoder range for an axis. 
This function sets the Encoder Range Mode, Encoder Range Low, and Encoder 

Range High parameters. 
Parameters 
[in] 
axis The axis to set the 
encoder range mode 
and encoder range. 
[in] 
enable The specified encoder 
range mode. 
[in] 
encoderRangeLow The specified encoder 
range low. 
[in] 
encoderRangeHigh The specified encoder 
range high. 

◆GetGearRatio() 

WMX3APIFUNC 
GetGearRatio ( 
WMX3APIFUNC 
GetGearRatio ( 
int 
double * 
axis, 
pNumerator, 
double * pDenominator 
) 
Get the gear ratio of the axis. 
This function gets the Gear Ratio Numerator and Gear Ratio Denominator 

parameters. 
Parameters 
[in] 
axis The axis to get the gear 
ratio. 
[out] 
[out] 
pNumerator 
pDenominator 
A pointer to a double 
variable that will contain 
the numerator of the 
gear ratio. 
A pointer to a double 
variable that will contain 
the denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆GetSingleTurn() 

WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
Get the single turn mode and single turn encoder count of an axis. 
This function gets the Single Turn Mode and Single Turn Encoder Count 

parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[out] 
pEnable A pointer to an bool 
variable that will contain 
FALSE if single turn 
mode is disabled for the 
axis and TRUE if single 
turn mode is enabled for 
the axis. 
[out] 
pEncoderCount A pointer to an unsigned 
int variable that will 
contain the number of 
encoder counts that 
comprise one turn if 
single turn mode is 
enabled. 

See also 

Tutorial 4-4: Single turn 

◆ 
GetMovingAverageProfileTime() 

GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double * pMilliseconds 
Get the moving average profile time parameter of an axis. 

This function gets the Global Moving Average Profile Time Milliseconds 
parameter. 

Parameters 
[in] 
axis The axis to get the 
moving average profile 
time. 
[out] 
pMilliseconds A pointer to a double 
variable that will contain 
the moving average 
profile time. 

◆GetAxisUnit() 

WMX3APIFUNC 
GetAxisUnit ( 
) 
WMX3APIFUNC 
GetAxisUnit ( 
) 
int 
axis, 
double * pUnit 
Get the axis unit parameter of an axis. 

This function gets the Axis Unit parameter. 

Parameters 
[in] 
axis The axis to get the axis 
unit. 
[out] 
pUnit A pointer to a double that 
will contain the axis unit. 

◆GetVelocityFeedforwardGain() 

WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double * pGain 
Get the velocity feedforward gain of an axis. 
This function gets the Velocity Feedforward Gain parameter. 

Parameters 
[in] 
axis The axis to get the 
velocity feedforward 
gain. 
[out] 
pGain A pointer to a double 
variable that will contain 
the velocity feedforward 
gain. 

◆GetAxisPolarity() 

WMX3APIFUNC 
GetAxisPolarity ( 
) 
WMX3APIFUNC 
GetAxisPolarity ( 
) 
int 
axis, 
char * pPolarity 
Get the axis polarity of an axis. 

This function gets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to get the axis 
polarity. 
[out] 
pPolarity A pointer to a char 
variable that will contain 
the axis polarity. 

◆ 
GetAbsoluteEncoderMode() 

WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool * pEnable 
Get the absolute encoder mode of an axis. 
This function gets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder mode. 
[out] 
pEnable A pointer to a bool 
variable that will contain 
the absolute encoder 
mode. 
See also 

Tutorial 4-5: Absolute encoders 

◆GetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double * pOffset 
Get the absolute encoder home offset of an axis. 
This function gets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder home 
offset. 
[out] 
pOffset A pointer to a double 
variable that will contain 
the absolute encoder 
home offset. 

See also 

Tutorial 4-5: Absolute encoders 

◆GetEncoderRange() 

WMX3APIFUNC 
GetEncoderRange ( 
WMX3APIFUNC 
GetEncoderRange ( 
) 
int 
bool * 
int * 
int * 
axis, 
pEnable, 
pEncoderRangeLow, 
pEncoderRangeHigh 
Get the encoder range mode and encoder range of an axis. 
This function gets the Encoder Range Mode, Encoder Range Low, and Encoder 

Range High parameters. 
Parameters 
[in] 
axis The axis to get the 
encoder range mode 
and encoder range. 
[in] 
pEnable A pointer to a bool 
variable that will contain 
the encoder range 
mode. 
[in] 
pEncoderRangeLow A pointer to an int 
variable that will contain 
the encoder range low. 
[in] 
pEncoderRangeHigh A pointer to an int 
variable that will contain 
the encoder range high. 

◆SetFeedbackParam() 

WMX3APIFUNC 
SetFeedbackParam ( int axis, 
WMX3APIFUNC 
SetFeedbackParam ( int axis, 
FeedbackParam * pParam, 
FeedbackParam * pParamError = NULL) 
Set feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
feedback parameters. 
[in] 
pParam A pointer to an object of 
the FeedbackParam 
class that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
FeedbackParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetHomeParam() 

WMX3APIFUNC 
SetHomeParam ( int axis, 
WMX3APIFUNC 
SetHomeParam ( int axis, 
HomeParam * pParam, 
HomeParam * pParamError = NULL) 
Set home parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the home 
parameters. 
[in] 
pParam A pointer to an object of 
the HomeParam class 
that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
HomeParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetLimitParam() 

WMX3APIFUNC 
SetLimitParam ( int axis, 
WMX3APIFUNC 
SetLimitParam ( int axis, 
LimitParam * pParam, 
LimitParam * pParamError = NULL) 
Set limit parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the limit 
parameters. 
[in] 
pParam A pointer to an object of 
the LimitParam class 
that contains the limit 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
LimitParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetMotionParam() 

WMX3APIFUNC 
SetMotionParam 
( int axis, WMX3APIFUNC 
SetMotionParam 
( int axis, 
MotionParam * pParam, 
MotionParam * pParamError = NULL) 
Set motion parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
motion parameters. 
[in] 
pParam A pointer to an object of 
the MotionParam class 
that contains the motion 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
MotionParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetAlarmParam() 

WMX3APIFUNC 
SetAlarmParam ( int axis, 
WMX3APIFUNC 
SetAlarmParam ( int axis, 
AlarmParam * pParam, 
AlarmParam * pParamError = NULL) 
Set alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the alarm 
parameters. 
[in] 
pParam A pointer to an object of 
the AlarmParam class 
that contains the alarm 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AlarmParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetSyncParam() 

WMX3APIFUNC 
SetSyncParam ( int axis, 
WMX3APIFUNC 
SetSyncParam ( int axis, 
SyncParam * pParam, 
SyncParam * pParamError = NULL) 
Set sync parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the sync 
parameters. 
[in] 
pParam A pointer to an object of 
the SyncParam class 
that contains the sync 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SyncParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetFlightRecorderParam() 

WMX3APIFUNC 
SetFlightRecorderPa 
ram 
( 
WMX3APIFUNC 
SetFlightRecorderPa 
ram 
( FlightRecorderParam pParam, 
FlightRecorderParam pParamError = NULL) 
Set flight recorder parameters. 
Parameters 
[in] 
pParam A pointer to an object of 
the 
FlightRecorderParam 
class that contains the 
[out] 
pParamError 
flight recorder 
parameters to apply. 
An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
FlightRecorderParam 
object that is passed to 
this argument will 
contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 
See also 
Parameters -Overview 

◆SetFlightRecorderPath() [1/2]

WMX3APIFU 
NC 
SetFlightRec 
orderPath ( char * pPath ) 
WMX3APIFU 
NC 
SetFlightRec 
orderPath ( char * pPath ) 
Set the file path to save the flight recorder data to. 

Parameters 
[in] 
pPath A zero-terminated string 
that contains the 
absolute file path to save 
the flight recorder to. 
Remarks 

This function can be used to change the directory to save the flight recorder data to. 
By default, flight recorder data is saved to the root of the C drive ("C:\"). 

The directory specified must be an absolute file path. The string may or may not be 
terminated with a backslash. 

◆SetFlightRecorderPath() [2/2]

WMX3APIFU 
NC 
SetFlightRec 
orderPath ( wchar_t * pPath ) 
WMX3APIFU 
NC 
SetFlightRec 
orderPath ( wchar_t * pPath ) 
Set the file path to save the flight recorder data to. 

Parameters 
[in] 
pPath A zero-terminated string 
that contains the 
absolute file path to save 
the flight recorder to. 
Remarks 

This function is a variation of SetFlightRecorderPath that accepts a wchar_t array 
for the file path string. Use this function when using Unicode character sets. 

◆SetEmergencyStopParam() 

WMX3APIFUNC 
SetEmergencyStopP 
aram ( 
WMX3APIFUNC 
SetEmergencyStopP 
aram ( EmergencyStopPara pParam, 
EmergencyStopPara pParamError = NULL) 
Set emergency stop parameters. 

Parameters 
[in] 
pParam A pointer to an object of 
the 

EmergencyStopParam 

class that contains the 
emergency stop 
parameters to apply. 

[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 

EmergencyStopParam 

object that is passed to 
this argument will 
contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 

See also 

Parameters -Overview 

◆GetFeedbackParam() 

WMX3APIFUNC WMX3APIFUNC 
GetFeedbackParam ( int axis, 
FeedbackParam * pParam 
) 
Get feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the 
feedback parameters 
[out] 
pParam A pointer to an object of 
the FeedbackParam 
class that will contain the 
current feedback 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetHomeParam() 


WMX3APIFUNC 
GetHomeParam ( 
WMX3APIFUNC 
GetHomeParam ( 
int 
axis, 
HomeParam * pParam 
) 
Get home parameter settings for an axis. 

Parameters 
[in] 
axis The axis to get the home 
parameters 
[out] 
pParam A pointer to an object of 
the HomeParam class 
that will contain the 
current home 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam() 

WMX3APIFUNC 
GetAlarmParam ( 
WMX3APIFUNC 
GetAlarmParam ( 
int 
axis, 
AlarmParam * pParam 
) 
Get alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the alarm 
parameters 
[out] 
pParam A pointer to an object of 
the AlarmParam class 
that will contain the 
current alarm 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetSyncParam() 


WMX3APIFUNC 
GetSyncParam ( 
WMX3APIFUNC 
GetSyncParam ( 
int 
axis, 
SyncParam * pParam 
) 
Get the sync parameters of the axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the sync 
parameters 
A pointer to an object of 
the SyncParam class 
that will contain the 
current sync parameters 
of the axis. 
See also 
Parameters -Overview 

◆GetFlightRecorderParam() 

WMX3APIFU 
NC 
GetFlightRec 
WMX3APIFU 
NC 
GetFlightRec 
orderParam ( 
FlightRecorde pParam ) 
Get flight recorder parameters. 
Parameters 
[out] 
pParam A pointer to an object of 
the 
FlightRecorderParam 
class that will contain the 
current flight recorder 
parameters. 
See also 
Parameters -Overview 

◆GetEmergencyStopParam() 

EmergencySto pParam 
◆GetDefaultParam() 
WMX3APIFU 
NC 
GetDefaultPa 
ram ( SystemParam pParam ) 
Get the default system parameters. 
Parameters 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
default parameters. 

WMX3APIFU 
NC 
GetEmergen 
cyStopParam ( 
Get emergency stop parameters. 

Parameters 
[out] 
pParam 

See also 

Parameters -Overview 

) 
A pointer to an object of 
the 

EmergencyStopParam 

class that will contain the 
current emergency stop 
parameters. 

◆ 
GetDefaultAxisParam() 

pAxisParam ) pAxisParam ) 
WMX3APIFU 
NC 
GetDefaultAx 
isParam ( 
AxisParam * 
Get the default axis parameters. 
Parameters 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
default parameters. 
◆ 
Export() [1/12] 



WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam 
) 
Export system parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

See also 

Parameters -Overview 

◆Export() [2/12]

WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
wchar_t * 
pPath, 
SystemParam * pParam 
) 
Export system parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 

◆ 
Export() [3/12] 



WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
char * 
pPath, 
AxisParam * pAxisParam 
) 
Export axis parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

See also 

Parameters -Overview 

◆Export() [4/12]

WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
wchar_t * 
pPath, 
AxisParam * pAxisParam 
) 
Export axis parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 

◆Export() [5/12]

WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam 
) 
Export system and axis parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

See also 

Parameters -Overview 

◆Export() [6/12]

WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
wchar_t * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam 
) 
Export system and axis parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 

◆Export() [7/12]

WMX3APIFUNC 
Export ( char * pPath, 
WMX3APIFUNC 
Export ( char * pPath, 
SystemParam * pParam, 
int axis 
) 
Export system parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
axis The axis to export the 
parameter settings. 
Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

The parameter settings of only one axis is written to file. 

This function will not export parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will export axis-specific 
parameters in the FlightRecorderParam and EmergencyStopParam classes such 
as collectAxisFlightRecorderData and eStopDec. 

See also 



◆Export() [8/12]
Parameters -Overview 

WMX3APIFUNC 
Export ( 
) 
WMX3APIFUNC 
Export ( 
) 
wchar_t * 
pPath, 
SystemParam * pParam, 
int axis 
Export system parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
axis The axis to export the 
parameter settings. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 

◆Export() [9/12]

◆Export() [9/12]
WMX3APIFUNC 
Export ( 
) 
char * 
pPath, 
AxisParam * pAxisParam, 
int axis 
Export axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
axis The axis to export the 
parameter settings. 

Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

The parameter settings of only one axis is written to file. 

See also 

Parameters -Overview 


◆Export() [10/12]

WMX3APIFUNC 
Export ( 
) 
WMX3APIFUNC 
Export ( 
) 
wchar_t * 
pPath, 
AxisParam * pAxisParam, 
int axis 
Export axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
axis The axis to export the 
parameter settings. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 


◆Export() [11/12]
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis 
) 
Export system and axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 


[in] 
axis The axis to export the 
parameter settings. 

Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

The parameter settings of only one axis is written to file. 

This function will not export parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will export axis-specific 
parameters in the FlightRecorderParam and EmergencyStopParam classes such 
as collectAxisFlightRecorderData and eStopDec. 

See also 

Parameters -Overview 

◆Export() [12/12]
WMX3APIFUNC 
Export ( 
wchar_t * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis 
) 
Export system and axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 


parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
axis The axis to export the 
parameter settings. 
Remarks 

This function is a variation of Export that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as Export. Files created with 
either version of this function are identical. 

See also 

Parameters -Overview 

◆ 
Import() [1/12] 



WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
char * 
pPath, 
SystemParam * pParam 
) 
Import system parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

See also 

Parameters -Overview 

◆Import() [2/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
wchar_t * 
pPath, 
SystemParam * pParam 
) 
Import system parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [3/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
char * 
pPath, 
AxisParam * pAxisParam 
) 
Import parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

See also 

Parameters -Overview 

◆Import() [4/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
wchar_t * 
pPath, 
AxisParam * pAxisParam 
) 
Import parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [5/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
char * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam 
) 
Import parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

See also 

Parameters -Overview 

◆Import() [6/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
wchar_t * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam 
) 
Import parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [7/12]

pParam, 
axis, 
copyParamToAxes = 
pParam, 
axis, 
copyParamToAxes = 
WMX3APIFUNC 
Import ( 
char * 
pPath, 
SystemParam * 
int 
AxisSelection * 
) 
Import system parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 


be copied to the 
variables in pParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 

Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

The parameter settings of only one axis is read from file, even if the file contains 
parameter settings for other axes. 

This function will not import parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will import axis-specific 
parameters in the FlightRecorderParam and EmergencyStopParam classes such 
as collectAxisFlightRecorderData and eStopDec. 

See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 
variables in pParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 
Remarks 


This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [9/12]
WMX3APIFUNC 
Import ( char * pPath, 
AxisParam * pAxisParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import axis parameters of one axis from an xml file. 
Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 


function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 
variables in pAxisParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 
Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

The parameter settings of only one axis is read from file, even if the file contains 
parameter settings for other axes. 

See also 

Parameters -Overview 

◆ 
Import() [10/12] 


WMX3APIFUNC 
Import ( wchar_t * pPath, 

AxisParam * pAxisParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import axis parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 
variables in pAxisParam 
corresponding to the set 


of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 

Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [11/12]
WMX3APIFUNC 
Import ( char * pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system and axis parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 


parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 
variables in pParam and 
pAxisParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 


can be used to apply the 
same set of parameters 
to multiple axes. 

Remarks 

This function reads parameter settings from an xml file and copies them to the 
parameters class passed to this function. Parameter settings that are not in the file 
are not overwritten. 

The parameter settings of only one axis is read from file, even if the file contains 
parameter settings for other axes. 

This function will not import parameters that are common to all axes, such as 
enableFlightRecorder and enableEStopSignal. It will import axis-specific 
parameters in the FlightRecorderParam and EmergencyStopParam classes such 
as collectAxisFlightRecorderData and eStopDec. 

See also 

Parameters -Overview 

◆Import() [12/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system and axis parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 


from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 


variables in pParam and 
pAxisParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 

Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆ 
GetAndExportAll() [1/2] 



WMX3APIFU 
NC 
GetAndExpor 
tAll ( char * pPath ) 
WMX3APIFU 
NC 
GetAndExpor 
tAll ( char * pPath ) 
Get the current parameters for all axes and export them to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
Remarks 

This function gets the current system parameter settings and axis parameter 
settings for all axes, and then exports them to an xml file. 

See also 

Parameters -Overview 

◆GetAndExportAll() [2/2]

WMX3APIFU 
NC 
GetAndExpor 
tAll ( wchar_t * pPath ) 
WMX3APIFU 
NC 
GetAndExpor 
tAll ( wchar_t * pPath ) 
Get the current parameters for all axes and export them to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
Remarks 

This function is a variation of GetAndExportAll that accepts a wchar_t array for the 
file path string. Use this function when using Unicode character sets. 

The exported file itself uses the same character set as GetAndExportAll. Files 
created with either version of this function are identical. 

See also 

Parameters -Overview 

◆ImportAndSetAll() [1/2]
WMX3APIFUNC 
ImportAndSetAll ( char * pPath, 
SystemParam * pParamError = NULL, 
AxisParam * pAxisParamError = NULL) 
Imports parameters from an xml file and set them as the current parameters for all 
axes. 

Parameters 
[in] 
pPath The absolute file path to 


load the parameter file 
from. 
[in] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
[in] 
pAxisParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AxisParam object that is 
passed to this argument 
will contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 

Remarks 

This function imports parameter settings from the specified xml file, and then sets 
the imported parameters as the current parameter settings. If any parameter 
settings are not defined in the xml file, they will be set to 0, which often is an invalid 
setting and causes the API to return ParameterSettingsInvalid. 

See also 

Parameters -Overview 

◆ImportAndSetAll() [2/2]
WMX3APIFUNC 

ImportAndSetAll ImportAndSetAll 
( 
wchar_t * 
pPath, 
SystemParam * pParamError = NULL, 
AxisParam * pAxisParamError = NULL) 
Imports parameters from an xml file and set them as the current parameters for all 
axes. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[in] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
[in] 
pAxisParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AxisParam object that is 
passed to this argument 
will contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 

Remarks 
This function is a variation of ImportAndSetAll that accepts a wchar_t array for the 


file path string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as ImportAndSetAll. A 
file that is compatible with either version of this function is also compatible with the 
other. 

See also 

Parameters -Overview 

 


Home Class Reference 

This class contains homing functions. 

Classes 

class AxisHomeData 
This class contains homing related data 
for a single axis. More... 
class HomeData 
This class contains homing related data 
for all axes. More... 

Public Member Functions 

Home (CoreMotion *f) 

bool IsDeviceValid () 

WMX3APIFUNC StartHome (int axis) 
Start homing an axis. The axis will 
search for the home position. If found, 
the home position will become the zero 
position for that axis. More... 

WMX3APIFUNC StartHome (AxisSelection 
*pAxisSelection) 
Start homing multiple axes. The axes will 
search for the home positions. If found, 
the home position will become the zero 
position for that axis. More... 

WMX3APIFUNC Continue (int axis) 
Continue homing an axis that has been 
paused during the homing operation. 
More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 


Public Attributes 

Continue homing multiple axes that have 
been paused during the homing 
operation. More... 

WMX3APIFUNC Cancel (int axis) 
Cancel the homing operation for an axis 
that has been paused during homing 
operation. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 
Cancel the homing procedure for 
multiple axes that have been paused 
during homing operation. More... 

WMX3APIFUNC SetCommandPos (int axis, double 
position) 

Set the current command position of the 
axis to the specified value. More... 

WMX3APIFUNC SetFeedbackPos (int axis, double 
position) 

Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More... 

WMX3APIFUNC SetCommandPosToFeedbackPos (int 
axis, double posChangePerCycle=0) 

Set the current cyclic command position 
equal to the feedback position. More... 

WMX3APIFUNC GetHomeData (HomeData *pHomeData) 

Get the homing related data for all axes. 

More... 

CoreMotion * cmApi 


Member Function Documentation 

◆StartHome() [1/2]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start homing an axis. The axis will search for the home position. If found, the home 
position will become the zero position for that axis. 

Parameters 
[in] 
axis The axis to home. 

Remarks 

This function searches for the home position as described by the HomeParam 
parameters. 

The axis to home must not be a synchronous control slave axis; if it is, this function 
will return an error and the axis will not be homed. To home a synchronous control 
pair or group, call this function with the "axis" argument set to the master axis. 
Several parameters affect the homing procedure of synchronous control pairs. 

When this function is called, the specified axis will always search for the home 
position. To return to the zero position without searching for the home position, use 
a motion API function such as StartPos with the target position set to 0. 

The ZPulseDetectionUnsupported, TouchProbeDetectionUnsupported, 
HomeSwitchDetectionUnsupported, or LimitSwitchDetectionUnsupported if 
the appropriate signal required to complete homing is unavailable. 

See also 
Homing , Tutorial 4-1: Homing 

◆StartHome() [2/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
AxisSelection pAxisSelection ) 
Start homing multiple axes. The axes will search for the home positions. If found, 
the home position will become the zero position for that axis. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to home. 

Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

See also 
Homing , Tutorial 4-1: Homing 

◆Continue() [1/2]

int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Continue homing an axis that has been paused during the homing operation. 

Parameters 
[in] 
axis The axis to continue 
homing. 

Remarks 

This function continues the homing operation of an axis that has been paused 
during homing. An axis will pause during homing only if the Pause Mode parameter 
is set to TRUE for that axis. See Homing for information regarding the points at 
which pauses are inserted for each home type. 

Pause mode can be useful when experimenting with the homing routine. Pause 
mode is typically not used in deployed applications. 

This function will return an error if the specified axis is not paused while homing. 

◆Continue() [2/2]

WMX3APIFU 
NC Continue ( 
AxisSelection pAxisSelection ) 
Continue homing multiple axes that have been paused during the homing operation. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to continue 
homing. 
Remarks 

This function is an overloaded function of Continue that continues the paused 
homing procedure for multiple axes. 

This function will return an error if any of the specified axes are not paused while 
homing. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Cancel the homing operation for an axis that has been paused during homing 
operation. 

Parameters 
[in] 
axis The axis to cancel 
homing. 

Remarks 

This function cancels the homing operation of an axis that has been paused during 
homing. See Continue for additional information regarding pause mode in homing. 

This function will return an error if the specified axis is not paused while homing. 

◆Cancel() [2/2]

WMX3APIFU WMX3APIFU 
NC Cancel ( 
AxisSelection pAxisSelection ) 
Cancel the homing procedure for multiple axes that have been paused during 

homing operation. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to cancel 
homing. 
Remarks 

This function is an overloaded function of Cancel that cancels the paused homing 
procedure for multiple axes. 

This function will return an error if any of the specified axes are not paused while 
homing. 

◆SetCommandPos() 

WMX3APIFUNC 
SetCommandPos ( 
) 
WMX3APIFUNC 
SetCommandPos ( 
) 
int 
axis, 
double position 
Set the current command position of the axis to the specified value. 

Parameters 
[in] 
axis The axis to set the 
command position of. 
[in] 
position The value to set the axis 
command position to. 

Remarks 

This function will set the current command position of the specified axis to the 
specified value by shifting the home position. The axis will not move during this 
operation (the command sent to the servo will remain the same). 

The specified axis must be in Idle state before calling this function. This function 
can be called for sync master axes or sync slave axes (in which case the axis will 
be in Sync instead of Idle). 

If the API Wait Until Motion Start parameter is enabled, this function will not return 
until after the next cycle, when the home position has been updated. Motion 
functions can be called after this function returns, and the target positions will be 
calculated correctly based on the updated home position. If the API Wait Until 
Motion Start parameter is disabled, the user must wait until the next cycle and 
verify that the home position has been updated using the GetStatus function before 
calling motion functions. See Function Calls to blocking for additional information. 

See also 

Tutorial 4-2: Set coordinates 

◆SetFeedbackPos() 

WMX3APIFUNC 
SetFeedbackPos ( 
) 
WMX3APIFUNC 
SetFeedbackPos ( 
) 
int 
axis, 
double position 
Set the current feedback position of the axis to the specified value. 

Parameters 
[in] 
axis The axis to set the 
feedback position of. 
[in] 
position The value to set the axis 
feedback position to. 
Remarks 

This function will set the current feedback position of the specified axis to the 
specified value by shifting the home position. This axis will not move during this 
operation (the command sent to the servo will remain the same). 

The specified axis must be in Idle state before calling this function. This function 
can be called for sync master axes or sync slave axes (in which case the axis will 
be in Sync instead of Idle). 

If the API Wait Until Motion Start parameter is enabled, this function will not return 
until after the next cycle, when the home position has been updated. Motion 
functions can be called after this function returns, and the target positions will be 
calculated correctly based on the updated home position. If the API Wait Until 
Motion Start parameter is disabled, the user must wait until the next cycle and 
verify that the home position has been updated using the GetStatus function before 
calling motion functions. See Function Calls to blocking for additional information. 

See also 

Tutorial 4-2: Set coordinates 

◆SetHomeDone() 

WMX3APIFUNC 
SetHomeDone ( 
) 
WMX3APIFUNC 
SetHomeDone ( 
) 
int 
axis, 
unsigned char value 
Set the "home done" state. 

Parameters 
[in] 
axis The axis to set the 
"home done" state. 
[in] 
value Specify 0 to set the 
"home done" state to 
FALSE or 1 to set the 
"home done" state to 
TRUE. 
Remarks 

This function sets the Home Done state of each axis. This state can be obtained by 
reading the Home Done member of the CoreMotionAxisStatus structure returned 
by the GetStatus API function. 

The Home Done state of the axis is automatically set to TRUE after a successful 
homing operation. Depending on the Clear Home Done On Servo Off and Clear 
Home Done On Comm Stop parameters, the Home Done state may be set to 
FALSE when communication is stopped or the axis servo is turned off. 

This function can be used to manually override the Home Done state that is 
normally set or reset as described above. This may be useful if the user implements 
a custom homing routine. 

The Home Done state affects several operations. The software limit (set with Soft 
Limit Type parameter) only triggers while the Home Done state is TRUE. 

◆SetCommandPosToFeedbackPos() 

WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
Set the current cyclic command position equal to the feedback position. 

Parameters 
[in] 
axis The axis to set the 
command position to 
feedback position. 
[in] 
posChangePerCycle An optional argument 
that limits the rate at 
which this function 
causes the command 
position to change every 
cycle. If this value is set, 
the command position 
will cchange by at most 
this number of user units 
every cycle. 
Remarks 

This function changes the current command position to be equal to the current 
feedback position. Unlike the SetCommandPos and SetFeedbackPos functions, 
the commanded position itself is changed and the home position is not shifted. 
Because of this, the axis may move as a result of this function, although it typically 
will not because the command position is set to the feedback position. 

If the posChangePerCycle optional argument is set, the rate at which this function 
causes the command position to change will be limited to that many user units per 
cycle. Thus, it sets a "velocity" for the change in command position, in user units per 
cycle. 

This function can be used to set the command position to be exactly at a physical 
boundary. A motion command can be executed to push the axis against a physical 


boundary (taking care that the output torque is small enough as to not damage the 

machine). When the axis touches the physical boundary, the feedback position will 
stop changing even as the command position continues increasing (or decreasing) 
to positions beyond the boundary. After this point, this function can be called to 
return the command position back to the position where the feedback position 
stopped changing, which is exactly at the physical boundary. The 
posChangePerCycle argument might be set to a nonzero value if the servo 
generates an alarm from changing the position command too rapidly during this 
operation. 

◆GetHomeData() 
WMX3APIFU 
NC 
GetHomeDat 
a ( HomeData * pHomeData ) 
Get the homing related data for all axes. 
Parameters 
[out] 
pHomeData A pointer to a HomeData 
object that will contain 
the homing related data 
for all axes. 

 

Motion Class Reference 

This class contains position command functions. 

Classes 

class ATAdditionalCommand 
This class contains additional AT 
(Acceleration-Time) point data. More... 

class ATCommand 
This class contains data for a AT 
(Acceleration-Time) command. More... 

class ATPoint 
This class contains data for a AT 
(Acceleration-Time) point. More... 

class CenterAndEndCircularIntplCommand 
This class contains data for a circular 
interpolation motion command that is 
specified by the center and end 
positions. More... 

class CenterAndLengthCircularIntplComman 
d 
This class contains data for a circular 
interpolation motion command that is 
specified by the center position and arc 
length. More... 

class HelicalIntplCommand 
This class contains data for a helical 
interpolation motion command. A helical 
interpolation combines a circular 
interpolation with a linear interpolation so 
that the resulting motion is a three-
dimensional helix. The helix is defined by 
the center position and arc length of the 


circular interpolation and the end position 
of the linear interpolation. The linear 
interpolation must be along only one 
axis, and the circular interpolation must 
be along two other axes. More... 

class HelicalIntplProfileType 
This enumerator class enumerates the 
types of ways to specify the profile for a 
helical interpolation. More... 

class JogCommand 
This class contains data for a jog 
command. More... 

class LengthAndEndCircularIntplCommand 
This class contains data for a circular 
interpolation motion command that is 
specified by the end position and arc 
length. More... 

class LinearIntplCommand 
This class contains data for a linear 
interpolation motion command. More... 

class PosCommand 
This class contains data for a position 
command. More... 

class PosToJogCommand 
This class contains data for a position to 
jog command. More... 

class PTAdditionalCommand 
This class contains additional PT 
(Position-Time) point data. More... 

class PTCommand 
This class contains data for a PT 
(Position-Time) command. More... 

class PTPoint 

This class contains data for a PT 


(Position-Time) point. More... 

class PVTAdditionalCommand 
This class contains additional PVT 
(Position-Velocity-Time) point data. 
More... 

class PVTCommand 
This class contains data for a PVT 
(Position-Velocity-Time) command. 
More... 

class PVTIntplAdditionalCommand 
This class contains data for additional 
PVT (Position-Velocity-Time) 
interpolation point data for multiple axes. 
More... 

class PVTIntplCommand 
This class contains data for a PVT 
(Position-Velocity-Time) interpolation 
command for multiple axes. More... 

class PVTPoint 
This class contains data for a PVT 
(Position-Velocity-Time) point. More... 

class RadiusAndEndCircularIntplCommand 
This class contains data for a circular 
interpolation motion command that is 
specified by the end position and arc 
radius. More... 

class SimulateLinearIntplCommand 
This class contains data for simulating a 
linear interpolation motion command. 
More... 

class SimulatePosCommand 
This class contains data for simulating a 
single axis position command. More... 


class StopCommand 
This class contains data for a stop 
command. More... 
class 
class 
class 
ThroughAndEnd3DCircularIntplComma 
nd 
This class contains data for a three-
dimensional circular interpolation motion 
command that is specified by the through 
and end positions. More... 
ThroughAndEndCircularIntplCommand 
This class contains data for a circular 
interpolation motion command that is 
specified by the through and end 
positions. More... 
TimeCommand 
This class contains data for a time-based 
command. More... 
class TimedJogCommand 
This class contains data for a timed jog 
command. More... 
class 
class 
class 
class 
class 
TriggerJogCommand 
This class contains data for a triggered 
jog command. More... 
TriggerPosCommand 
This class contains data for a triggered 
position command. More... 
TriggerTimedJogCommand 
This class contains data for a triggered 
timed jog command. More... 
VTAdditionalCommand 
This class contains additional VT 
(Velocity-Time) point data. More... 
VTCommand 
This class contains data for a VT 


(Velocity-Time) command. More... 

class VTPoint 
This class contains data for a VT 
(Velocity-Time) point. More... 

class WaitCondition 

This class describes a wait condition. 

More... 

class WaitConditionType 
This enumerator class enumerates the 
types of wait conditions. More... 

Public Member Functions 

Motion (CoreMotion *f) 

bool IsDeviceValid () 

WMX3APIFUNC StartPos (PosCommand 

*pPosCommand) 

Start an absolute position command. 

More... 

WMX3APIFUNC StartMov (PosCommand 

*pPosCommand) 

Start a relative position command. 

More... 

WMX3APIFUNC StartPos (TriggerPosCommand 
*pPosCommand) 

Start an absolute triggered position 
command. More... 

WMX3APIFUNC StartMov (TriggerPosCommand 
*pPosCommand) 

Start a relative triggered position 
command. More... 

WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 
Start an absolute position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 

Start a relative position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 


*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More... 

WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand) 
Start a timed jog command. More... 
WMX3APIFUNC StartJog (TriggerJogCommand 
*pJogCommand) 
Start a triggered jog command. More... 

WMX3APIFUNC StartJog (TriggerTimedJogCommand 

*pTimedJogCommand) 

Start a triggered timed jog command. 

More... 

WMX3APIFUNC StartJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command with 
multiple trigger events. More... 
WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed jog command with 
multiple trigger events. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 

JogCommand *pJogCommand) 

Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of a paused 
position command or interpolation 
command for multiple axes. More... 

WMX3APIFUNC OverridePos (PosCommand 
*pPosCommand) 
Override the target position of an axis 
currently executing a position command. 
The target position is specified as an 
absolute position. More... 

WMX3APIFUNC OverrideMov (PosCommand 
*pPosCommand) 

Override the target position of an axis 
currently executing a position command. 
The target position is specified as a 
relative position. More... 

WMX3APIFUNC OverrideVel (PosCommand 
*pPosCommand) 

Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 


WMX3APIFUNC OverrideProfile (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the entire profiles of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC StopJogAtPos (PosCommand 
*pPosCommand) 

Stop an axis executing a jog command 
at a timing that will cause the axis to stop 
at exactly the specified position. More... 

WMX3APIFUNC StopJogAtPos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Stop multiple axes executing jog 
commands at timing that wil cause the 
axes to stop at exactly the specified 
positions. More... 

WMX3APIFUNC SuperimposeMov (PosCommand 
*pPosCommand) 
Start a relative position superimposed 
motion command. The superimposed 
motion command will execute on top of 
any other motion that the axis may 
already be executing. More... 

WMX3APIFUNC SuperimposeMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Start superimposed relative position 
commands for multiple axes. The 
superimposed motion commands will 
execute on top of any other motion that 
the axes may already be executing. 
More... 


WMX3APIFUNC StopSuperimpose (int axis) 
Stop a superimposed motion. More... 

WMX3APIFUNC 

WMX3APIFUNC 

WMX3APIFUNC 

StopSuperimpose (AxisSelection 
*pAxisSelection) 

Stop the superimposed motion of 
multiple axes. More... 

SimulatePos (SimulatePosCommand 
*pSimulatePosCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a position command without 
moving any axes. The peak velocity, 
acceleration time, cruise time (the time 
the axis velocity is constant), 
deceleration time, and total profile time 
of the position command are returned. 

More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
move time, remain time, and total time 
after the linear interpolation runs for a 
specified distance are returned. More... 

WMX3APIFUNC CreatePVTBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of PVT motion commands. 

More... 

WMX3APIFUNC FreePVTBuffer (int axis) 
Free PVT buffer memory for an axis. 
More... 
WMX3APIFUNC GetPVTBufferPoints (int axis, unsigned 
int *pPoints) 
Get the amount of PVT buffer memory 
currently allocated to an axis. More... 

WMX3APIFUNC GetPVTBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per 
point data in the PVT buffer memory. 

More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, unsigned int 
numAddlCommands=0, 
PVTAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a PVT motion command. 
More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, Trigger *pTrigger, 


unsigned int numAddlCommands=0, 

PVTAdditionalCommand 

*pPVTAddlCommand=NULL) 

Start executing a triggered PVT motion 
command. More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT motion 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a PVT interpolation 
motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 

Start executing a triggered PVT 
interpolation motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT 
interpolation motion command with 


multiple trigger events. More... 

WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
unsigned int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a PT motion command. 
More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command. More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
unsigned int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a VT motion command. 
More... 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 

Start executing a triggered VT motion 
command. More... 


Public Attributes 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a triggered VT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
unsigned int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a AT motion command. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command. More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command with multiple trigger events. 
More... 

CoreMotion * cmApi 


Member Function Documentation 

◆StartPos() [1/6]
WMX3APIFU 
NC StartPos ( PosCommand pPosComman ) 
Start an absolute position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
Remarks 

This function moves the specified axis to the specified absolute position using a 
motion profile that is calculated by the specified parameters. 

See also 

Tutorial 3: Basic Motion Functions 

◆StartMov() [1/6]

WMX3APIFU 
NC StartMov ( 
PosCommand pPosComman ) 
Start a relative position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
motion. 

Remarks 

This function moves the specified axis to the specified relative position using a 
motion profile that is calculated by the specified parameters. The target position is 
relative to the command position of the axis at the time that this function is 
executed. If this function overrides another position command, the target position 
will be relative to the target position of the position command that is overridden. 

See also 

Tutorial 3: Basic Motion Functions 

◆StartPos() [2/6]

WMX3APIFU 
NC StartPos ( 
WMX3APIFU 
NC StartPos ( TriggerPosCo pPosComman ) 
Start an absolute triggered position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the 
TriggerPosCommand 
class that contains the 
parameters of the motion 
command. 
Remarks 

This function moves the specified axis to the specified absolute position using a 
motion profile that is calculated by the specified parameters. The motion will only 
begin when the specified trigger condition is satisfied. 

See also 
Tutorial 3: Basic Motion Functions, Trigger Motion 

◆StartMov() [2/6]

WMX3APIFU 
NC StartMov ( 
WMX3APIFU 
NC StartMov ( TriggerPosCo pPosComman ) 
Start a relative triggered position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the 
TriggerPosCommand 
class that contains the 
parameters of the motion 
command. 

Remarks 

This function moves the specified axis to the specified relative position using a 
motion profile that is calculated by the specified parameters. The target position is 
relative to the command position of the axis at the time that this function is 
executed. If this function overrides another position command, the target position 
will be relative to the target position of the position command that is overridden. The 
motion will only begin when the specified trigger condition is satisfied. 

See also 
Tutorial 3: Basic Motion Functions, Trigger Motion 

◆ 
StartPos() [3/6] 



pPosCommand, pPosCommand, 
WMX3APIFUNC 
StartPos ( 
) 
PosCommand * 
TriggerEvents * 
pTriggerEvents 
Start an absolute triggered position command with multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves the specified axis to the specified absolute position using a 
motion profile that is calculated by the specified parameters. The motion will only 
begin when the specified multiple-event trigger condition is satisfied. 

See also 
Tutorial 3: Basic Motion Functions, Trigger Events 

◆StartMov() [3/6]

pPosCommand, pPosCommand, 
WMX3APIFUNC 
StartMov ( 
) 
PosCommand * 
TriggerEvents * 
pTriggerEvents 
Start a relative triggered position command with multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function moves the specified axis to the specified relative position using a 
motion profile that is calculated by the specified parameters. The target position is 
relative to the command position of the axis at the time that this function is 
executed. If this function overrides another position command, the target position 
will be relative to the target position of the position command that is overridden. The 
motion will only begin when the specified multiple-event trigger condition is satisfied. 

See also 
Tutorial 3: Basic Motion Functions, Trigger Events 

◆StartPos() [4/6]

WMX3APIFUNC 
StartPos ( 
WMX3APIFUNC 
StartPos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Start absolute position commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
Remarks 

This function executes the StartPos function for multiple axes. 

◆StartMov() [4/6]

WMX3APIFUNC 
StartMov ( 
WMX3APIFUNC 
StartMov ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Start relative position commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
Remarks 

This function executes the StartMov function for multiple axes. 

◆StartPos() [5/6]

WMX3APIFUNC 
StartPos ( 
WMX3APIFUNC 
StartPos ( 
unsigned int numCommands, 
TriggerPosComman pPosCommand 
) 
Start absolute triggered position commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
TriggerPosCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartPos function for multiple axes. 

◆ 
StartMov() [5/6] 



WMX3APIFUNC 
StartMov ( 
WMX3APIFUNC 
StartMov ( 
unsigned int numCommands, 
TriggerPosComman pPosCommand 
) 
Start relative triggered position commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
TriggerPosCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMov function for multiple axes. 

◆StartPos() [6/6]
WMX3APIFUNC 
StartPos ( unsigned int numCommands, 
PosCommand * pPosCommand, 
TriggerEvents * pTriggerEvents 
) 

Start absolute triggered position commands with multiple trigger events for multiple 
axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. All commanded 
axes share the same 
trigger events. This 
parameter should not 
be an array. 
Remarks 

This function executes the StartPos function for multiple axes. 

◆ 
StartMov() [6/6] 



pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartMov ( 
unsigned int numCommands, 
PosCommand * 
TriggerEvents * 
) 
Start relative triggered position commands with multiple trigger events for multiple 
axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. All commanded 
axes share the same 
trigger events. This 
parameter should not 
be an array. 
Remarks 

This function executes the StartMov function for multiple axes. 


◆StartLinearIntplPos() [1/3]
WMX3APIFU 
NC 
StartLinearInt 
plPos ( 
LinearIntplCo pLinearIntplCo ) 
Start an absolute position linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

Remarks 

This function moves any number of axes to the specified absolute target positions. 
The motion is interpolated so that the axes move together in a straight line. 

See also 

Linear Interpolation 

◆StartLinearIntplMov() [1/3]

WMX3APIFU 
NC 
StartLinearInt 
WMX3APIFU 
NC 
StartLinearInt 
plMov ( 
LinearIntplCo pLinearIntplCo ) 
Start a relative position linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 
LinearIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves any number of axes to the specified relative target positions 
(relative to the command positions of the axes at the time that this function is 
executed). The motion is interpolated so that the axes move together in a straight 
line. 

See also 

Linear Interpolation 

◆ 
StartLinearIntplPos() [2/3] 



WMX3APIFUNC 
StartLinearIntplPos ( 
) 
LinearIntplCommand 
Trigger * 
pLinearIntplCommand 
pTrigger 
Start an absolute position triggered linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves any number of axes to the specified absolute target positions. 
The motion will only begin when the specified trigger condition is satisfied. The 
motion is interpolated so that the axes move together in a straight line. 

See also 
Linear Interpolation, Trigger Motion 

◆StartLinearIntplMov() [2/3]

WMX3APIFUNC 
StartLinearIntplMov ( 
) 
LinearIntplCommand 
Trigger * 
pLinearIntplCommand 
pTrigger 
Start a relative position triggered linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves any number of axes to the specified relative target positions 
(relative to the command positions of the axes at the time that this function is 
executed). The motion will only begin when the specified trigger condition is 
satisfied. The motion is interpolated so that the axes move together in a straight 
line. 

See also 
Linear Interpolation, Trigger Motion 

◆StartLinearIntplPos() [3/3]

WMX3APIFUNC 
StartLinearIntplPos ( 
) 
LinearIntplCommand 
TriggerEvents * 
pLinearIntplCommand 
pTriggerEvents 
Start an absolute position triggered linear interpolation motion command with 
multiple trigger events. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function moves any number of axes to the specified absolute target positions. 
The motion will only begin when the specified multi-event trigger condition is 
satisfied. The motion is interpolated so that the axes move together in a straight 
line. 

See also 
Linear Interpolation, Trigger Events 

◆StartLinearIntplMov() [3/3]

WMX3APIFUNC 
StartLinearIntplMov ( 
) 
LinearIntplCommand 
TriggerEvents * 
pLinearIntplCommand 
pTriggerEvents 
Start a relative position triggered linear interpolation motion command with multiple 
trigger events. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function moves any number of axes to the specified relative target positions 
(relative to the command positions of the axes at the time that this function is 
executed). The motion will only begin when the specified multi-event trigger 
condition is satisfied. The motion is interpolated so that the axes move together in a 
straight line. 

See also 
Linear Interpolation, Trigger Events 

◆StartCircularIntplPos() [1/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
CenterAndLe pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the absolute 
center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the arc length are specified. 

See also 

Center and Length 

◆StartCircularIntplMov() [1/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
CenterAndLe pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the relative 
center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. 

See also 

Center and Length 

◆StartCircularIntplPos() [2/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
CenterAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the absolute 
center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the absolute end position of the arc are specified. 

See also 

Center and End 

◆StartCircularIntplMov() [2/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
CenterAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the relative 
center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the relative end position of the arc are specified. 

See also 

Center and End 

◆StartCircularIntplPos() [3/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
ThroughAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by an absolute 
through point on the arc that the axes pass through during the interpolation, and the 
absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. An absolute through position (a 
position on the arc that the axes pass through) and the absolute end position of the 
arc are specified. 

See also 

Through and End 

◆StartCircularIntplMov() [3/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
ThroughAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by a relative 
through point on the arc that the axes pass through during the interpolation, and the 

relative end position of the arc. 
Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. A relative through position (a position 
on the arc that the axes pass through, relative to the command positions of the axes 
at the time that this function is executed) and the relative end position of the arc are 
specified. 

See also 

Through and End 

◆StartCircularIntplPos() [4/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
LengthAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the arc length 
and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc length are specified. 

See also 

Length and End 

◆StartCircularIntplMov() [4/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
LengthAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the arc length 
and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. 

See also 

Length and End 

◆StartCircularIntplPos() [5/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
RadiusAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the arc radius 
and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc radius are specified. 

See also 

Radius and End 

◆StartCircularIntplMov() [5/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
RadiusAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the arc radius 
and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc radius are specified. 

See also 

Radius and End 

◆StartCircularIntplPos() [6/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
ThroughAndEn pCircularIntplC ) 
Start a three-dimensional circular interpolation motion command. The arc is 
specified by an absolute through point on the arc that the axes pass through during 
the interpolation, and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. An 
absolute through position (a position on the arc that the axes pass through) and the 
absolute end position of the arc are specified. 

See also 

3D Through and End 

◆StartCircularIntplMov() [6/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
ThroughAndEn pCircularIntplC ) 
Start a three-dimensional circular interpolation motion command. The arc is 
specified by a relative through point on the arc that the axes pass through during the 
interpolation, and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. A 
relative through position (a position on the arc that the axes pass through) and the 
relative end position of the arc are specified. 

See also 

3D Through and End 

◆StartCircularIntplPos() [7/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
CenterAndLengthCi pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
absolute center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the arc length are specified. The motion will only begin when the specified 
trigger condition is satisfied. 

See also 
Center and Length, Trigger Motion 

◆StartCircularIntplMov() [7/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
CenterAndLengthCi pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
relative center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. The motion will only begin when the 
specified trigger condition is satisfied. 

See also 
Center and Length, Trigger Motion 

◆StartCircularIntplPos() [8/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
CenterAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
absolute center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the absolute end position of the arc are specified. The motion will only begin 
when the specified trigger condition is satisfied. 

See also 
Center and End, Trigger Motion 

◆StartCircularIntplMov() [8/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
CenterAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
relative center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 

CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the relative end position of the arc are specified. The motion will only 
begin when the specified trigger condition is satisfied. 

See also 
Center and End, Trigger Motion 

◆StartCircularIntplPos() [9/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
ThroughAndEndCirc pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by an 
absolute through point on the arc that the axes pass through during the 
interpolation, and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 

ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves two axes in a circular arc. An absolute through position (a 
position on the arc that the axes pass through) and the absolute end position of the 
arc are specified. The motion will only begin when the specified trigger condition is 
satisfied. 

See also 
Through and End, Trigger Motion 

◆StartCircularIntplMov() [9/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
ThroughAndEndCirc pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by a 
relative through point on the arc that the axes pass through during the interpolation, 
and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. A relative through position (a position 
on the arc that the axes pass through, relative to the command positions of the axes 
at the time that this function is executed) and the relative end position of the arc are 
specified. The motion will only begin when the specified trigger condition is satisfied. 

See also 
Through and End, Trigger Motion 

◆StartCircularIntplPos() [10/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
LengthAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
arc length and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc length are specified. The motion will only begin when the specified 
trigger condition is satisfied. 

See also 
Length and End, Trigger Motion 

◆StartCircularIntplMov() [10/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
LengthAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
arc length and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. The motion will only begin when the 
specified trigger condition is satisfied. 

See also 
Length and End, Trigger Motion 

◆StartCircularIntplPos() [11/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
RadiusAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
arc radius and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc radius are specified. The motion will only begin when the specified 
trigger condition is satisfied. 

See also 
Radius and End, Trigger Motion 

◆StartCircularIntplMov() [11/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
RadiusAndEndCircu pCircularIntplComman 
Trigger * pTrigger 
Start a triggered circular interpolation motion command. The arc is specified by the 
arc radius and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc radius are specified. The motion will only begin when the 
specified trigger condition is satisfied. 

See also 
Radius and End, Trigger Motion 

◆StartCircularIntplPos() [12/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
ThroughAndEnd3DC pCircularIntplComman 
Trigger * pTrigger 
Start a triggered three-dimensional circular interpolation motion command. The arc 
is specified by an absolute through point on the arc that the axes pass through 
during the interpolation, and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. An 
absolute through position (a position on the arc that the axes pass through) and the 
absolute end position of the arc are specified. The motion will only begin when the 
specified trigger condition is satisfied. 

See also 
3D Through and End, Trigger Motion 

◆StartCircularIntplMov() [12/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
ThroughAndEnd3DC pCircularIntplComman 
Trigger * pTrigger 
Start a triggered three-dimensional circular interpolation motion command. The arc 
is specified by a relative through point on the arc that the axes pass through during 
the interpolation, and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. A 
relative through position (a position on the arc that the axes pass through) and the 
relative end position of the arc are specified. The motion will only begin when the 
specified trigger condition is satisfied. 

See also 
3D Through and End, Trigger Motion 

◆StartCircularIntplPos() [13/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
CenterAndLengthCi pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the absolute center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the arc length are specified. The motion will only begin when the specified 
multi-event trigger condition is satisfied. 

See also 
Center and Length, Trigger Events 

◆StartCircularIntplMov() [13/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
CenterAndLengthCi pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the relative center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. The motion will only begin when the 
specified multi-event trigger condition is satisfied. 

See also 
Center and Length, Trigger Events 

◆StartCircularIntplPos() [14/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
CenterAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the absolute center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the absolute end position of the arc are specified. The motion will only begin 
when the specified multi-event trigger condition is satisfied. 

See also 
Center and End, Trigger Events 

◆StartCircularIntplMov() [14/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
CenterAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the relative center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 

CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the relative end position of the arc are specified. The motion will only 
begin when the specified multi-event trigger condition is satisfied. 

See also 
Center and End, Trigger Events 

◆StartCircularIntplPos() [15/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
ThroughAndEndCirc pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by an absolute through point on the arc that the axes pass 
through during the interpolation, and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. An absolute through position (a 
position on the arc that the axes pass through) and the absolute end position of the 
arc are specified. The motion will only begin when the specified multi-event trigger 
condition is satisfied. 

See also 
Through and End, Trigger Events 

◆StartCircularIntplMov() [15/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
ThroughAndEndCirc pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by a relative through point on the arc that the axes pass through 
during the interpolation, and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEndCircul 
arIntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. A relative through position (a position 
on the arc that the axes pass through, relative to the command positions of the axes 
at the time that this function is executed) and the relative end position of the arc are 
specified. The motion will only begin when the specified multi-event trigger condition 
is satisfied. 

See also 
Through and End, Trigger Events 

◆StartCircularIntplPos() [16/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
LengthAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the arc length and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc length are specified. The motion will only begin when the specified 
multi-event trigger condition is satisfied. 

See also 
Length and End, Trigger Events 

◆StartCircularIntplMov() [16/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
LengthAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the arc length and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
LengthAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. The motion will only begin when the 
specified multi-event trigger condition is satisfied. 

See also 
Length and End, Trigger Events 

◆StartCircularIntplPos() [17/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
RadiusAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the arc radius and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The absolute end position of the arc 
and the arc radius are specified. The motion will only begin when the specified 
multi-event trigger condition is satisfied. 

See also 
Radius and End, Trigger Events 

◆StartCircularIntplMov() [17/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
RadiusAndEndCircu pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a triggered circular interpolation motion command with multiple trigger events. 
The arc is specified by the arc radius and the relative end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
RadiusAndEndCircular 
IntplCommand class 
that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves two axes in a circular arc. The relative end position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc radius are specified. The motion will only begin when the 
specified multi-event trigger condition is satisfied. 

See also 
Radius and End, Trigger Events 

◆StartCircularIntplPos() [18/18]

WMX3APIFUNC 
StartCircularIntplPos ( 
) 
WMX3APIFUNC 
StartCircularIntplPos ( 
) 
ThroughAndEnd3DC pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a three-dimensional triggered circular interpolation motion command with 
multiple trigger events. The arc is specified by an absolute through point on the arc 
that the axes pass through during the interpolation, and the absolute end position of 
the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. An 
absolute through position (a position on the arc that the axes pass through) and the 
absolute end position of the arc are specified. The motion will only begin when the 
specified multi-event trigger condition is satisfied. 

See also 
3D Through and End, Trigger Events 

◆StartCircularIntplMov() [18/18]

WMX3APIFUNC 
StartCircularIntplMov ( 
) 
WMX3APIFUNC 
StartCircularIntplMov ( 
) 
ThroughAndEnd3DC pCircularIntplComman 
TriggerEvents * pTriggerEvents 
Start a three-dimensional triggered circular interpolation motion command with 
multiple trigger events. The arc is specified by a relative through point on the arc 
that the axes pass through during the interpolation, and the relative end position of 
the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 

the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. A 
relative through position (a position on the arc that the axes pass through) and the 
relative end position of the arc are specified. The motion will only begin when the 
specified multi-event trigger condition is satisfied. 

See also 
3D Through and End, Trigger Events 

◆StartHelicalIntplPos() [1/3]

WMX3APIFU 
NC 
StartHelicalIn 
WMX3APIFU 
NC 
StartHelicalIn 
tplPos ( 
HelicalIntplCo pHelicalIntplCo ) 
Start a helical interpolation motion command. The helix is specified by the absolute 
center position of the helix, the rotation amount in degrees, and the end position of 
the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 
HelicalIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves three axes in a helical motion. The linear motion of the helix 
must be entirely along one axis, and the rotational motion of the helix must be 
entirely in the remaining two axes. The absolute center position of the rotational 
motion, the rotation amount in degrees, and the absolute end position of the linear 
motion are specified. 

The rotation amount can be greater than 360 degrees. 

See also 

Helical Interpolation 

◆ 
StartHelicalIntplMov() [1/3] 



WMX3APIFU 
NC 
StartHelicalIn 
WMX3APIFU 
NC 
StartHelicalIn 
tplMov ( 
HelicalIntplCo pHelicalIntplCo ) 
Start a helical interpolation motion command. The helix is specified by the relative 
center position of the helix, the rotation amount in degrees, and the relative end 

position of the linear axis. 
Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 
HelicalIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves three axes in a helical motion. The linear motion of the helix 
must be entirely along one axis, and the rotational motion of the helix must be 
entirely in the remaining two axes. The relative center position of the rotational 
motion, the rotation amount in degrees, and the relative end position of the linear 
motion are specified. 

The rotation amount can be greater than 360 degrees. 

See also 

Helical Interpolation 

◆StartHelicalIntplPos() [2/3]

WMX3APIFUNC 
StartHelicalIntplPos ( 
WMX3APIFUNC 
StartHelicalIntplPos ( HelicalIntplComman pHelicalIntplComman 
Trigger * pTrigger 
) 
Start a triggered helical interpolation motion command. The helix is specified by the 
absolute center position of the helix, the rotation amount in degrees, and the 
absolute end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function is the same as the StartHelicalIntplPos function, except a trigger 
condition is specified. The motion will only begin when the specified trigger condition 
is satisfied. 

See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplMov() [2/3]

WMX3APIFUNC 
StartHelicalIntplMov ( 
WMX3APIFUNC 
StartHelicalIntplMov ( HelicalIntplComman pHelicalIntplComman 
Trigger * pTrigger 
) 
Start a triggered helical interpolation motion command. The helix is specified by the 
relative center position of the helix, the rotation amount in degrees, and the relative 
end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function is the same as the StartHelicalIntplMov function, except a trigger 
condition is specified. The motion will only begin when the specified trigger condition 
is satisfied. 

See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplPos() [3/3]

WMX3APIFUNC 
StartHelicalIntplPos ( 
WMX3APIFUNC 
StartHelicalIntplPos ( HelicalIntplComman pHelicalIntplComman 
TriggerEvents * pTriggerEvents 
) 
Start a triggered helical interpolation motion command with multiple trigger events. 
The helix is specified by the absolute center position of the helix, the rotation 
amount in degrees, and the absolute end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is the same as the StartHelicalIntplPos function, except a multi-event 
trigger condition is specified. The motion will only begin when the specified multi-
event trigger condition is satisfied. 

See also 
Helical Interpolation, Trigger Events 

◆StartHelicalIntplMov() [3/3]

WMX3APIFUNC 
StartHelicalIntplMov ( 
WMX3APIFUNC 
StartHelicalIntplMov ( HelicalIntplComman pHelicalIntplComman 
TriggerEvents * pTriggerEvents 
) 
Start a triggered helical interpolation motion command with multiple trigger events. 
The helix is specified by the relative center position of the helix, the rotation amount 
in degrees, and the relative end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is the same as the StartHelicalIntplMov function, except a multi-event 
trigger condition is specified. The motion will only begin when the specified multi-
event trigger condition is satisfied. 

See also 
Helical Interpolation, Trigger Events 

◆StartVelToPos() [1/4]

WMX3APIFU 
NC 
StartVelToPo 
WMX3APIFU 
NC 
StartVelToPo 
s ( 
TriggerPosCo pTriggerPosCo ) 
Start an absolute triggered position command for an axis that is currently executing 

a velocity command. 
Parameters 
[in] 
pTriggerPosCommand A pointer to an object of 
the 
TriggerPosCommand 
class that contains the 
position command 
parameters. 
Remarks 

This function will override a velocity command with a position command to an 
absolute position when the trigger condition is satisfied. The axis command mode 
will automatically change from Velocity mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartVelToMov() [1/4]

WMX3APIFU 
NC 
StartVelToMo 
WMX3APIFU 
NC 
StartVelToMo 
v ( 
TriggerPosCo pTriggerPosCo ) 
Start a relative triggered position command for an axis that is currently executing a 

velocity command. 
Parameters 
[in] 
pTriggerPosCommand A pointer to an object of 
the 
TriggerPosCommand 
class that contains the 
position command 
parameters. 
Remarks 

This function will override a velocity command with a position command to a relative 
position when the trigger condition is satisfied. The target position is relative to the 
command position of the axis at the time that this function is executed. The axis 
command mode will automatically change from Velocity mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToMov API function for multiple axes. 

◆StartVelToPos() [3/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartVelToPos ( 
) 
PosCommand * 
TriggerEvents * 
Start an absolute triggered position command for an axis that is currently executing 
a velocity command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
position command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function will override a velocity command with a position command to an 
absolute position when the multiple event trigger condition is satisfied. The axis 
command mode will automatically change from Velocity mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartVelToMov() [3/4]

pPosCommand, pPosCommand, 
WMX3APIFUNC 
StartVelToMov ( 
) 
PosCommand * 
TriggerEvents * 
pTriggerEvents 
Start a relative triggered position command for an axis that is currently executing a 
velocity command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
position command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a velocity command with a position command to a relative 
position when the multiple event trigger condition is satisfied. The target position is 
relative to the command position of the axis at the time that this function is 
executed. The axis command mode will automatically change from Velocity mode 
to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartVelToPos() [4/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
oPos() [4/4]
WMX3APIFUNC 
StartVelToPos ( unsigned int numCommands, 
PosCommand * 
TriggerEvents * 
) 
Start absolute triggered position commands for multiple axes that are currently 
executing velocity commands. The trigger conditions can have multiple trigger 
events. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartVelToPos API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartVelToMov() [4/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartVelToMov ( 
unsigned int numCommands, 
PosCommand * 
TriggerEvents * 
) 
Start relative triggered position commands for multiple axes that are currently 
executing velocity commands. The trigger conditions can have multiple trigger 
events. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartVelToMov API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartTrqToPos() [1/4]
WMX3APIFU 
NC 
StartTrqToPo 
s ( TriggerPosCo pTriggerPosCo ) 
Start an absolute triggered position command for an axis that is currently executing 
a torque command. 

Parameters 
[in] 
pTriggerPosCommand A pointer to an object of 
the 

TriggerPosCommand 

class that contains the 
position command 
parameters. 

Remarks 

This function will override a torque command with a position command to an 
absolute position when the trigger condition is satisfied. The axis command mode 
will automatically change from Torque mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToMov() [1/4]

WMX3APIFU 
NC 
StartTrqToMo 
WMX3APIFU 
NC 
StartTrqToMo 
v ( 
TriggerPosCo pTriggerPosCo ) 
Start a relative triggered position command for an axis that is currently executing a 

torque command. 
Parameters 
[in] 
pTriggerPosCommand A pointer to an object of 
the 
TriggerPosCommand 
class that contains the 
position command 
parameters. 
Remarks 

This function will override a torque command with a position command to a relative 
position when the trigger condition is satisfied. The target position is relative to the 
command position of the axis at the time that this function is executed. The axis 
command mode will automatically change from Torque mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToPos() [2/4]

WMX3APIFUNC 
StartTrqToPos ( 
) 
WMX3APIFUNC 
StartTrqToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing torque commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartTrqToPos API function for multiple axes. 

◆StartTrqToMov() [2/4]

WMX3APIFUNC 
StartTrqToMov ( 
) 
WMX3APIFUNC 
StartTrqToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently 

executing torque commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartTrqToMov API function for multiple axes. 

◆StartTrqToPos() [3/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartTrqToPos ( 
) 
PosCommand * 
TriggerEvents * 
Start an absolute triggered position command for an axis that is currently executing 
a torque command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
position command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function will override a torque command with a position command to an 
absolute position when the multiple event trigger condition is satisfied. The axis 
command mode will automatically change from Torque mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToMov() [3/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartTrqToMov ( 
) 
PosCommand * 
TriggerEvents * 
Start a relative triggered position command for an axis that is currently executing a 
torque command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
position command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a torque command with a position command to a relative 
position when the multiple event trigger condition is satisfied. The target position is 
relative to the command position of the axis at the time that this function is 
executed. The axis command mode will automatically change from Torque mode to 
Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToPos() [4/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
qToPos() [4/4]
WMX3APIFUNC 
StartTrqToPos ( unsigned int numCommands, 
PosCommand * 
TriggerEvents * 
) 
Start absolute triggered position commands for multiple axes that are currently 
executing torque commands. The trigger conditions can have multiple trigger 
events. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartTrqToPos API function for multiple axes. All 
commanded axes share the same trigger events. 


◆ 
StartTrqToMov() [4/4] 



pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartTrqToMov ( 
unsigned int numCommands, 
PosCommand * 
TriggerEvents * 
) 
Start relative triggered position commands for multiple axes that are currently 
executing torque commands. The trigger conditions can have multiple trigger 
events. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartTrqToMov API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartJog() [1/12]
WMX3APIFU 
NC StartJog ( JogCommand pJogComman ) 
Start a jog command. 
Parameters 
[in] 
pJogCommand A pointer to an object of 
the JogCommand class 
that contains the jog 
command parameters. 
Remarks 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity until stopped. The specified 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

Position commands executed by StartPos (and equivalent events) can be 
overridden by jog commands. Jog commands can also be overridden by StartPos 
(and equivalent events). However, an axis that is executing trigger motion cannot be 
overridden by jog commands until after the trigger condition has been satisfied. 
Similarly, an axis that is paused with the Pause function cannot be overridden by jog 
commands until after it is resumed with the Resume function. 

◆StartJog() [2/12]
WMX3APIFU 
NC StartJog ( TimedJogCom pTimedJogComma ) 
Start a timed jog command. 
Parameters 

[in] 
pTimedJogCommand A pointer to an object of 
the 
TimedJogCommand 
class that contains the 
timed jog command 
parameters. 
Remarks 

This function will command the axis to accelerate to the profile velocity in the time 
specified in the profile accTimeMilliseconds, run for the runTimeMilliseconds 
amount of time, and then decelerate to rest in the time specified in the profile 
decTimeMilliseconds. The total time that the axis is in motion is the sum of 
accTimeMilliseconds, runTimeMilliseconds, and decTimeMilliseconds. 

While accelerating, or while jogging at the specified velocity, the axis will be in the 
Jog operation mode. While decelerating, the axis will be in the Stop operation 
mode. 

The timer used by this function is a real time timer and not a Windows-level timer. 
Because of this, the specified times are followed precisely, and the total distance 
traveled will be exactly the same each time this function is called if the parameters 
are kept identical. 

Like StartJog, the commanded axis can be stopped before the entire motion 
finishes using functions such as Stop. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 

TimeAccTrapezoidal 

TimeAccSCurve 

TimeAccJerkRatio 

TimeAccParabolic 

TimeAccSin 

TimeAccAdvancedS 

◆ 
StartJog() [3/12] 



WMX3APIFU 
NC StartJog ( 
WMX3APIFU 
NC StartJog ( TriggerJogCo pJogComman ) 
Start a triggered jog command. 
Parameters 
[in] 
pJogCommand A pointer to an object of 
the 
TriggerJogCommand 
class that contains the 
triggered jog command 
parameters. 
Remarks 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity until stopped. The specified 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

Position commands executed by StartPos (and equivalent events) can be 
overridden by jog commands. Jog commands can also be overridden by StartPos 
(and equivalent events). However, an axis that is executing trigger motion cannot be 
overridden by jog commands until after the trigger condition has been satisfied. 
Similarly, an axis that is paused with the Pause function cannot be overridden by jog 
commands until after it is resumed with the Resume function. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Trigger Motion 

◆StartJog() [4/12]
WMX3APIFU 
NC StartJog ( TriggerTimed pTimedJogComma ) 

Start a triggered timed jog command. 

Parameters 
[in] 
pTimedJogCommand A pointer to an object of 
the 
TriggerTimedJogCom 
mand class that 
contains the triggered 
timed jog command 
parameters. 
Remarks 

This function will command the axis to accelerate to the profile velocity in the time 
specified in the profile accTimeMilliseconds, run for the runTimeMilliseconds 
amount of time, and then decelerate to rest in the time specified in the profile 
decTimeMilliseconds. The total time that the axis is in motion is the sum of 
accTimeMilliseconds, runTimeMilliseconds, and decTimeMilliseconds. 

While accelerating, or while jogging at the specified velocity, the axis will be in the 
Jog operation mode. While decelerating, the axis will be in the Stop operation 
mode. 

The timer used by this function is a real time timer and not a Windows-level timer. 
Because of this, the specified times are followed precisely, and the total distance 
traveled will be exactly the same each time this function is called if the parameters 
are kept identical. 

Like StartJog, the commanded axis can be stopped before the entire motion 
finishes using functions such as Stop. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 

TimeAccTrapezoidal 

TimeAccSCurve 

TimeAccJerkRatio 

TimeAccParabolic 

TimeAccSin 


◆StartJog() [5/12]
TimeAccAdvancedS 
The motion will begin when the specified trigger condition is satisfied. 
See also 
Trigger Motion 

pJogCommand, pJogCommand, 
WMX3APIFUNC 
StartJog ( 
) 
JogCommand * 
TriggerEvents * 
pTriggerEvents 
Start a triggered jog command with multiple trigger events. 

Parameters 
[in] 
pJogCommand A pointer to an object of 
the JogCommand class 
that contains the jog 
command parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity until stopped. The specified 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

Position commands executed by StartPos (and equivalent events) can be 
overridden by jog commands. Jog commands can also be overridden by StartPos 
(and equivalent events). However, an axis that is executing trigger motion cannot be 
overridden by jog commands until after the trigger condition has been satisfied. 

Similarly, an axis that is paused with the Pause function cannot be overridden by jog 
commands until after it is resumed with the Resume function. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 

◆StartJog() [6/12]

◆StartJog() [6/12]
WMX3APIFUNC 
StartJog ( TimedJogCommand pTimedJogCommand 
TriggerEvents * pTriggerEvents 
) 
Start a triggered timed jog command with multiple trigger events. 

Parameters 
[in] 
pTimedJogCommand A pointer to an object of 
the 
TimedJogCommand 
class that contains the 
timed jog command 
parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will command the axis to accelerate to the profile velocity in the time 
specified in the profile accTimeMilliseconds, run for the runTimeMilliseconds 
amount of time, and then decelerate to rest in the time specified in the profile 
decTimeMilliseconds. The total time that the axis is in motion is the sum of 
accTimeMilliseconds, runTimeMilliseconds, and decTimeMilliseconds. 

While accelerating, or while jogging at the specified velocity, the axis will be in the 
Jog operation mode. While decelerating, the axis will be in the Stop operation 
mode. 

The timer used by this function is a real time timer and not a Windows-level timer. 
Because of this, the specified times are followed precisely, and the total distance 
traveled will be exactly the same each time this function is called if the parameters 
are kept identical. 

Like StartJog, the commanded axis can be stopped before the entire motion 


finishes using functions such as Stop. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 


TimeAccTrapezoidal 
TimeAccSCurve 
TimeAccJerkRatio 
TimeAccParabolic 
TimeAccSin 
TimeAccAdvancedS 


The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 

◆ 
StartJog() [7/12] 



WMX3APIFUNC 
StartJog ( 
WMX3APIFUNC 
StartJog ( 
unsigned int numCommands, 
JogCommand * pJogCommand 
) 
Start jog commands for multiple axes. 

Parameters 
[in] 
numCommands The number of jog 
commands. Each 
command controls a 
single axis. 
[in] 
pJogCommand A pointer to an array of 
objects of the 
JogCommand class 
that contain the 
parameters of the jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This command executes the StartJog function for multiple axes. 

◆StartJog() [8/12]

WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
TimedJogCommand pTimedJogCommand 
) 
Start timed jog commands for multiple axes. 

Parameters 
[in] 
numCommands The number of timed jog 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedJogCommand A pointer to an array of 
objects of the 

TimedJogCommand 

class that contain the 
parameters of the jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This command executes the StartJog function for multiple axes. 

◆StartJog() [9/12]

WMX3APIFUNC 
StartJog ( 
WMX3APIFUNC 
StartJog ( 
unsigned int numCommands, 
TriggerJogComman pJogCommand 
) 
Start triggered jog commands for multiple axes. 

Parameters 
[in] 
numCommands The number of triggered 
jog commands. Each 
command controls a 
single axis. 
[in] 
pJogCommand A pointer to an array of 
objects of the 
TriggerJogCommand 
class that contain the 
parameters of the 
triggered jog commands. 
The number of elements 
in the array must equal 
numCommands. 

Remarks 
This command executes the StartJog function for multiple axes. 
The motion will begin for each axis when the specified trigger condition for that axis 

is satisfied. 

See also 

Trigger Motion 

◆StartJog() [10/12]

WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
TriggerTimedJogCo pTimedJogCommand 
) 
Start triggered timed jog commands for multiple axes. 

Parameters 
[in] 
numCommands The number of triggered 
timed jog commands. 
Each command controls 
a single axis. 
[in] 
pTimedJogCommand A pointer to an array of 
objects of the 
TriggerTimedJogCom 
mand class that contain 
the parameters of the 
triggered jog commands. 
The number of elements 
in the array must equal 
numCommands. 

Remarks 
This command executes the StartJog function for multiple axes. 
The motion will begin for each axis when the specified trigger condition for that axis 

is satisfied. 

See also 

Trigger Motion 

◆StartJog() [11/12]
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 

pJogCommand, 
pTriggerEvents 
) 
pJogCommand, 
pTriggerEvents 
) 
JogCommand * 
TriggerEvents * 
Start triggered jog commands with multiple trigger events for multiple axes. 

Parameters 
[in] 
numCommands The number of jog 
commands. Each 
command controls a 
single axis. 
[in] 
pJogCommand A pointer to an array of 
objects of the 
JogCommand class 
that contain the 
parameters of the jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. All commanded 
axes share the same 
trigger events. This 
parameter should not 
be an array. 

Remarks 

This command executes the StartJog function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 



pTriggerEvents pTriggerEvents 
◆StartJog() [12/12]
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
imedJogCommand 
) 
TimedJogCommand pT
TriggerEvents * 
Start triggered timed jog commands with multiple trigger events for multiple axes. 

Parameters 
[in] 
numCommands The number of jog 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedJogCommand A pointer to an array of 
objects of the 
TimedJogCommand 
class that contain the 
parameters of the timed 
jog commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. All commanded 
axes share the same 
trigger events. This 
parameter should not 
be an array. 

Remarks 


This command executes the StartJog function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆ 
StartPosToJog() [1/6] 



WMX3APIFU 
NC 
StartPosToJo 
WMX3APIFU 
NC 
StartPosToJo 
g ( 
TriggerJogCo pTriggerJogCo ) 
Start a triggered jog command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerJogCommand A pointer to an object of 
the 
PosToJogCommand 
class that contains the 
position to jog command 
parameters. 
Remarks 

This function will override a position command with a jog command when the trigger 
condition is satisfied. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

If the axis is not executing a position command when this function is called, the axis 
will change to Pos operation state, but will not move until the trigger condition is 
satisfied. When the trigger condition is satisfied, the jog command is started. 

If the axis finishes the position command it is executing before the trigger condition 
is satisfied, the axis will remain in Pos operation state until the trigger condition is 
satisfied and the jog command is started. 

If the trigger axis of the trigger condition is set to the same axis as the commanded 
axis, and the trigger condition is not satisfied at the end of the position command, 
the jog command will start immediately after the position command completes (the 
trigger condition is considered to be satisfied at this time). 


◆StartPosToJog() [2/6]
WMX3APIFUNC 
StartPosToJog ( unsigned int numCommands, 
TriggerJogComman pTriggerJogCommand 
) 
Start triggered jog commands for multiple axes that are currently executing position 
commands. 

Parameters 
[in] 
numCommands The number of position 
to jog commands. Each 
command controls a 
single axis. 

[in] 
pTriggerJogCommand A pointer to an array of 
objects of the 

PosToJogCommand 

class that contain the 
parameters of the 
position to jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartPosToJog API function for multiple axes. 

◆StartPosToJog() [3/6]

pJogCommand, pJogCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartPosToJog ( 
) 
JogCommand * 
TriggerEvents * 
Start a triggered jog command for an axis that is currently executing a position 
command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pJogCommand A pointer to an object of 
the JogCommand class 
that contains the 
parameters of the jog 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function will override a position command with a jog command when the 
multiple event trigger condition is satisfied. 

Aside from specifying the trigger condition using the TriggerEvents class, the 
specifications for this function are the same as StartPosToJog. 

◆StartPosToJog() [4/6]

WMX3APIFUNC 
StartPosToJog ( unsigned int numCommands, 
WMX3APIFUNC 
StartPosToJog ( unsigned int numCommands, 
JogCommand * pJogCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered jog commands for multiple axes that are currently executing position 
commands. The trigger conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of jog 
commands. Each 
command controls a 
single axis. 
[in] 
pJogCommand A pointer to an array of 
objects of the 
JogCommand class 
that contain the 
parameters of the jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartPosToJog API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartPosToJog() [5/6]
WMX3APIFU 
NC 
StartPosToJo 
g ( PosToJogCom pPosToJogCo ) 
Start an absolute position command and a triggered jog command simultaneously. 
The position command will be overridden by the jog command when the trigger 
condition is satisfied. 

Parameters 
[in] 
pPosToJogCommand A pointer to an object of 
the 
PosToJogCommand 
class that contains the 
parameters of the 
position and jog 
commands. 

Remarks 

This function starts a position command and a triggered jog command 
simultaneously for an axis. The position command is executed immediately, and 
when the trigger condition is satisfied, the position command is overridden by the 
jog command. 

This function can be used to move the axis to a particular position, and then keep 
the axis moving at a constant velocity after reaching that position. To do so, set the 
trigger condition to be satisfied when the position command completes (such as 
TriggerType::RemainingTime with the trigger axis set to the commanded axis and 
the trigger value set to 0), and set the end velocity of the position command equal to 
the velocity of the jog command. 

If this function is executed for an axis that is executing a position command or a jog 
command, the command will be overridden by the position command specified for 

this function. For additional information regarding overrides between jog commands 



and position commands, see the discussion under StartJog. 

Aside from specifying the position command with the jog command, the 
specifications for this function are the same as StartPosToJog. 

◆StartPosToJog() [6/6]
WMX3APIFUNC 
StartPosToJog ( unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
) 
Start an absolute position command and a triggered jog command simulataneously 
for multiple axes. The position command will be overridden by the jog command 
when the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
command. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartPosToJog function for multiple axes. 


◆StartMovToJog() [1/2]
WMX3APIFU 
NC 
StartMovToJo 
g ( PosToJogCom pPosToJogCo ) 
Start a relative position command and a triggered jog command simultaneously. The 
position command will be overridden by the jog command when the trigger condition 
is satisfied. 

Parameters 
[in] 
pPosToJogCommand A pointer to an object of 
the 
PosToJogCommand 
class that contains the 
parameters of the 
position and jog 
commands. 
Remarks 

This function is similar to StartPosToJog, except the target position of the position 
command is specified as a relative position instead of an absolute position. 

This function can be used to move the axis by a particular distance, and then keep 
the axis moving at a constant velocity after moving that distance. To do so, set the 
trigger condition to be satisfied when the position command completes (such as 
TriggerType::RemainingTime with the trigger axis set to the commanded axis and 
the trigger value set to 0), and set the end velocity of the position command equal to 
the velocity of the jog command. 

◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis that is executing a position command, jog 
command, interpolation command, or home command. 

This function will only stop axes running in Position command mode. To stop axes 
running in Velocity command mode, use the Stop function. To stop axes running in 
Torque command mode, use the StopTrq function. 

If the axis was executing a position command or jog command, it will decelerate to 
rest using the profile, deceleration, and jerk deceleration parameters of the position 
or jog command. 

If the axis was executing a home command, it will decelerate to rest using the 
Homing Velocity Slow Dec parameter, using a trapezoidal motion profile. 

If the axis was executing an interpolation command, all interpolated axes will 
decelerate to rest along the composite vector of the interpolation. The profile, 
deceleration, and jerk deceleration parameters of the interpolation command are 
used to calculate the deceleration path. 

This function is unable to stop the slave axis of a synchronous control pair. To stop a 
slave axis, specify the master axis of the synchronous control pair (this will stop 
both the slave and master axes). 

If the commanded axis is in Idle state, this function will return no error. 

If the commanded axis is executing a command for which the deceleration cannot 
be obtained, the axis will be stopped using the Quick Stop Dec parameter as the 
deceleration, as if the ExecQuickStop function was called. This might occur if this 
function is called during the first cycle of processing a new position command or 
override position command. 

◆ 
Stop() [2/4] 



WMX3APIFU 
NC Stop ( 
WMX3APIFU 
NC Stop ( 
AxisSelection pAxisSelection ) 
Stop the motion of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

This function executes the Stop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆Stop() [3/4]

WMX3APIFUNC 
Stop ( 
) 
WMX3APIFUNC 
Stop ( 
) 
int 
axis, 
double dec 
Stop the motion of an axis using the specified deceleration and a trapezoidal profile. 

Parameters 
[in] 
[in] 
axis 
dec 
The axis to stop. 
The deceleration to stop 
at. 
Remarks 

This function stops the motion of an axis using the specified deceleration. The axis 
stops using a trapezoidal profile regardless of the motion the axis was previously 
executing. 

This function will only stop axes running in Position command mode. To stop axes 
running in Velocity command mode, use the Stop function. To stop axes running in 
Torque command mode, use the StopTrq function. 

If the commanded axis is in Idle state, this function will return no error. 

◆Stop() [4/4]

WMX3APIFUNC 
Stop ( 
) 
WMX3APIFUNC 
Stop ( 
) 
unsigned int numCommands, 
StopCommand * pStopCommand 
Stop the motion of multiple axes using the specified decelerations and trapezoidal 
profiles. 

Parameters 

[in] 
numCommands The number of stop 
motions. Each stop 
motion commands a 
single axis. 

[in] 
pStopCommand A pointer to an array of 
objects of the 
StopCommand class 
that contain the 
parameters of the 
motion. The number of 
objects in the array must 
be equal to 
numCommands. The 
dec values specify the 
deceleration at which to 
stop the axis in. 

Remarks 

This function executes the Stop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 


◆ExecQuickStop() [1/2]
WMX3APIFU 
NC 
ExecQuickSt 
op ( int axis ) 
Stop the motion of an axis using the Quick Stop Dec parameter. 
Parameters 

[in] 
axis The axis to stop. 
Remarks 
This function is identical to the Stop function, except the deceleration rate is set 

equal to the Quick Stop Dec parameter, and the motion profile is trapezoidal. 

A Stop command can be overridden by a ExecQuickStop command, but not the 
other way around. 
If the commanded axis is in Idle state, this function will return no error. 

◆ 
ExecQuickStop() [2/2] 



WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
AxisSelection pAxisSelection ) 
Stop the motion of multiple axes using the Quick Stop Dec parameter. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks 

This function is identical to the Stop function, except the deceleration rate is set so 
that the axis stops in the specified time, and the motion profile is trapezoidal. 
If the commanded axis is in Idle state, this function will return no error. 

◆ExecTimedStop() [2/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
AxisSelection * pAxisSelection, 
double timeMilliseconds 
Stop multiple axes that are currently in motion in the specified amount of time using 

a trapezoidal profile. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 
Remarks 

This function executes the ExecTimedStop function for multiple axes. One stop 
time is specified for all axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [3/3]
WMX3APIFUNC 
ExecTimedStop ( unsigned int numCommands, 
TimeCommand * pTimeCommand 
) 
Stop multiple axes that are currently in motion in the specified amounts of time 

using a trapezoidal profile. 
Parameters 
[in] 
numCommands The number of stop 
motions. Each stop 
motion commands a 
single axis. 
[in] 
pTimeCommand A pointer to an array of 
objects of the 
TimeCommand class 
that contain the 
parameters of the 
motion. The number of 
objects in the array must 
be equal to 
numCommands. The 
timeMilliseconds 
values specify the time 
in milliseconds to stop 
the axis in. 

Remarks 

This function executes the ExecTimedStop function for multiple axes. A separate 
stop time is specified for each axis. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ 
Wait() [1/6] 



WMX3APIFU 
NC Wait ( int axis ) 
WMX3APIFU 
NC Wait ( int axis ) 
Start a blocking wait command, returning only when the axis becomes idle. 

Parameters 
[in] 
axis The axis to wait for. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified axis enters the Idle operation state. 

If the specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, this function will stop blocking and return the 
ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code. 

Each Device can only process one Wait function at one time. If multiple 
threads call the Wait function, the timings at which execution is returned to 
the calling threads is undefined. As explained in CreateDevice, each thread 
should create its own device. 

◆Wait() [2/6]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
AxisSelection pAxisSelection ) 
Start a blocking wait command, returning only when the axes become idle. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to wait for. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified axes enter the Idle operation state. 

All specified axes must be Idle at the same time for this function to return execution 
to the calling thread. If one of the specified axes becomes Idle, but then receives a 
new position command before every other axis becomes Idle, this function will not 
return execution until the new position command is finished. 

If any specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, this function will stop blocking and return the 
ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code. 

Each Device can only process one Wait function at one time. If multiple 
threads call the Wait function, the timings at which execution is returned to 
the calling threads is undefined. As explained in CreateDevice, each thread 
should create its own device. 

◆ 
Wait() [3/6] 



WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
WaitCondition pWaitCondition ) 
Start a blocking wait command, returning only when the specified wait condition 
becomes true. 

Parameters 
[in] 
pWaitCondition A pointer to a 
WaitCondition that 
describes the wait 
condition. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified wait condition becomes true. See WaitCondition for information 
regarding the available wait conditions. 

If the specified WaitConditionType is AxisIdle, MotionStarted, or 
MotionStartedOverrideReady, this function will monitor the specified axes for 
errors. If any specified axis goes offline, generates an amp alarm, triggers a limit 
switch, or changes to servo off state, this function will stop blocking and return the 
ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code. 

Each Device can only process one Wait function at one time. If multiple 
threads call the Wait function, the timings at which execution is returned to 
the calling threads is undefined. As explained in CreateDevice, each thread 
should create its own device. 

◆ 
Wait() [4/6] 



WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
int 
unsigned int 
axis, 
waitTimeMilliseconds 
Start a blocking wait command, returning only when the axis becomes idle or the 

wait time elapses. 
Parameters 
[in] 
axis The axis to wait for. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axis 
becomes Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axis becomes idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified axis becomes Idle. If the specified 
axis is not Idle when this function returns, it will return the WaitTimeout error. 

◆Wait() [5/6]

WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
AxisSelection * pAxisSelection, 
unsigned int waitTimeMilliseconds 
Start a blocking wait command, returning only when the axes become idle. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to wait for. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axes 
become Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axes become idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified axis becomes Idle. If any of the 
specified axes is not Idle when this function returns, it will return the WaitTimeout 
error. 

◆Wait() [6/6]

WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
WaitCondition * pWaitCondition, 
unsigned int waitTimeMilliseconds 
Start a blocking wait command, returning only when the specified wait condition 
becomes true. 

Parameters 
[in] 
pWaitCondition A pointer to a 
WaitCondition that 
describes the wait 
condition. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axes 
become Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axes become idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified wait condition becomes true. If the 
specified wait condition is not true when this function returns, it will return the 
WaitTimeout error. 


◆Pause() [1/2]
WMX3APIFU 
NC Pause ( int axis ) 
Pause the execution of a position command or interpolation command. 

Parameters 
[in] 
axis The axis to pause. 

Remarks 

This function pauses the execution of a position command or interpolation 
command for one axis. The axis will decelerate to rest at the deceleration rate that 
was specified for the position command or interpolation command. 

For interpolation commands, all interpolating axes will decelerate to a stop. Only 
one of the interpolating axes needs to be specified to this function. 

Once at rest, the axis will remain in the Pos or Intpl operation state. 

The position command or interpolation command may be resumed after the axis is 
at rest, or while the axis is decelerating. To resume the axis, call the Resume 
function. 

A paused or pausing axis may also be stopped using Stop, or be overridden by 
another position command function. 

The Pause and Resume functions are compatible with the following motion 
functions: 


StartPos 
StartMov 
StartLinearIntplPos 
StartLinearIntplMov 
StartCircularIntplPos 
StartCircularIntplMov 
StartHelicalIntplPos 
StartHelicalIntplMov 



◆Pause() [2/2]
WMX3APIFU 
NC Pause ( 
StartPathIntplPos 
StartPathIntplMov 
StartPathIntpl3DPos 
StartPathIntpl3DMov 
StartPathIntplWithRotation 

AxisSelection pAxisSelection ) 
Pause the execution of a position command or interpolation command for multiple 
axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 

Remarks 

This function executes Pause for multiple axes. 

All specified axes must be executing a position command or interpolation command. 
If one or more specified axes are not executing a position command or interpolation 
command, then this function will return an error. 

◆Resume() [1/2]

WMX3APIFU 
NC Resume ( int axis ) 
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused position command or interpolation command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a position command or interpolation 
command that was paused by the Pause function. 

For interpolation commands, all interpolating axes will resume motion. Only one of 
the interpolating axes needs to be specified to this function. 

◆Resume() [2/2]
WMX3APIFU 
NC Resume ( AxisSelection pAxisSelection ) 
Resume the execution of a paused position command or interpolation command for 
multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to resume. 
Remarks 

This function executes Resume for multiple axes. 
All specified axes must be paused by the Pause function. If one or more specified 

axes are not paused, then the function will return an error. 


◆OverridePos() [1/2]
WMX3APIFU 
NC 
OverridePos ( 
PosCommand pPosComman ) 
Override the target position of an axis currently executing a position command. The 
target position is specified as an absolute position. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override position. 
Parameters other than 
axis and target are 
ignored. 

Remarks 

This function overrides the target position of an axis that is executing one of the 
following position commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 

The new target position is specified as an absolute position. 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideMov() [1/2]

WMX3APIFU 
NC 
OverrideMov ( 
PosCommand pPosComman ) 
Override the target position of an axis currently executing a position command. The 

target position is specified as a relative position. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override position. 
Parameters other than 
axis and target are 
ignored. 
Remarks 

This function overrides the target position of an axis that is executing one of the 
following position commands: 

StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

The new target position is specified as a relative position (relative to the target 
position of the position command that is overridden). 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideVel() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideVel ( 
PosCommand pPosComman ) 
Override the velocity of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override velocity. 
Parameters other than 
axis and velocity in 
profile are ignored. 
Remarks 

This function overrides the target velocity of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

For jog and velocity commands, the target velocity may be a negative value. 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideAcc() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideAcc ( 
PosCommand pPosComman ) 
Override the acceleration of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override acceleration. 
Parameters other than 
axis and acc in profile 
are ignored. 
Remarks 

This function overrides the acceleration of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideDec() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideDec ( 
PosCommand pPosComman ) 
Override the deceleration of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override deceleration. 
Parameters other than 
axis and dec in profile 
are ignored. 
Remarks 

This function overrides the deceleration of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideJerkAcc() [1/2]

WMX3APIFU 
NC 
OverrideJerk 
WMX3APIFU 
NC 
OverrideJerk 
Acc ( 
PosCommand pPosComman ) 
Override the acceleration jerk of an axis currently executing a position, jog, or 

velocity command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override acceleration 
jerk. Parameters other 
than axis and jerkAcc in 
profile are ignored. 
Remarks 

This function overrides the acceleration jerk of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideJerkDec() [1/2]

WMX3APIFU 
NC 
OverrideJerk 
WMX3APIFU 
NC 
OverrideJerk 
Dec ( 
PosCommand pPosComman ) 
Override the deceleration jerk of an axis currently executing a position, jog, or 

velocity command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override deceleration 
jerk. Parameters other 
than axis and jerkDec in 
profile are ignored. 
Remarks 

This function overrides the deceleration jerk of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideProfile() [1/2]

WMX3APIFU 
NC 
OverrideProfil 
WMX3APIFU 
NC 
OverrideProfil 
e ( 
PosCommand pPosComman ) 
Override the entire profile of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override profile. 
Remarks 

This function overrides the entire profile of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

StartJog 

StartVel 

Only the profile is overridden. The target position for axes executing position 
commands or the target velocity for axes executing jog or velocity commands are 
not changed. 

◆OverridePos() [2/2]

WMX3APIFUNC 
OverridePos ( 
WMX3APIFUNC 
OverridePos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the target positions of multiple axes currently executing position 
commands. The target positions are specified as absolute positions. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverridePos function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideMov() [2/2]

WMX3APIFUNC 
OverrideMov ( 
WMX3APIFUNC 
OverrideMov ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the target positions of multiple axes currently executing position 
commands. The target positions are specified as relative positions. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 

This command executes the OverrideMov function for multiple axes. 

This function returns an error if any of the commanded axes cannot execute the 
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideVel() [2/2]

pPosCommand pPosCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
PosCommand * 
Override the velocities of multiple axes currently executing position, jog, or velocity 
commands. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 

This command executes the OverrideVel function for multiple axes. 

This function returns an error if any of the commanded axes cannot execute the 
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideAcc() [2/2]

WMX3APIFUNC 
OverrideAcc ( 
WMX3APIFUNC 
OverrideAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the accelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideDec() [2/2]

WMX3APIFUNC 
OverrideDec ( 
WMX3APIFUNC 
OverrideDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the decelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]

WMX3APIFUNC 
OverrideJerkDec ( 
WMX3APIFUNC 
OverrideJerkDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the deceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideProfile() [2/2]

WMX3APIFUNC 
OverrideProfile ( 
WMX3APIFUNC 
OverrideProfile ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the entire profiles of multiple axes currently executing position, jog, or 
velocity commands. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 

This command executes the OverrideProfile function for multiple axes. 

This function returns an error if any of the commanded axes cannot execute the 
override. An error is returned if any of the commanded axes are in Idle state. 

◆StopJogAtPos() [1/2]

WMX3APIFU 
NC 
StopJogAtPo 
WMX3APIFU 
NC 
StopJogAtPo 
s ( 
PosCommand pPosComman ) 
Stop an axis executing a jog command at a timing that will cause the axis to stop at 

exactly the specified position. 
Parameters 
[in] 
pPosCommand A pointer to a 
PosCommand that 
contains the stop jog at 
pos motion command 
parameters. 
Remarks 

This function operates on an axis currently executing a jog command. The axis will 
smoothly transition from executing a jog command to executing a stop command. 
The final position of the axis after stopping will be at the specified target position. 

When this function commands a single turn axis and the target position is between 0 
and the single turn encoder count, then the axis will continue rotating in the current 
direction of rotation and start stopping at the position at which the axis would finish 
movement at the target position given the specified profile parameters. 

◆StopJogAtPos() [2/2]

WMX3APIFUNC 
StopJogAtPos ( 
WMX3APIFUNC 
StopJogAtPos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Stop multiple axes executing jog commands at timing that wil cause the axes to stop 
at exactly the specified positions. 

Parameters 
[in] 
numCommands The number of stop jog 
at pos motion 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
coordinated position 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This command executes the StopJogAtPos function for multiple axes. 

◆SuperimposeMov() [1/2]
WMX3APIFU 
NC 
Superimpose 
Mov ( PosCommand pPosComman ) 

Start a relative position superimposed motion command. The superimposed motion 
command will execute on top of any other motion that the axis may already be 

executing. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
superimposed motion 
command. 

Remarks 

This function moves the specified axis by the specified distance on top of any other 
motion that the axis may already be executing. During the superimposed motion, 
the velocity of the axis will equal the sum of the velocities of the two motions. The 
superimposed motion will have an acceleration segment and a deceleration 
segment, which may or may not coincide with the acceleration and deceleration 
segments of the motion the axis was executing. Depending on the profile 
parameters and the type of motion that the axis is already executing, the 
superimposed motion may complete before or after the motion that the axis is 
already executing. 

The motion caused by this command does not affect the axis OperationState. For 
example, if this function is called while the axis is Idle, the axis will move, but 
remain in the idle operation state. To check whether an axis is executing 
superimposed motion, see the Exec Superimposed Motion status. 

The motion caused by this command cannot be stopped using normal Stop 
functions. To stop superimposed motion, use the StopSuperimpose function. 

This function currently supports superimposing axes in Idle, Pos, or Jog 
operation states. If this function is called for axes in other operation states, an 
error will be returned. 

◆SuperimposeMov() [2/2]

WMX3APIFUNC 
SuperimposeMov ( 
WMX3APIFUNC 
SuperimposeMov ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Start superimposed relative position commands for multiple axes. The 
superimposed motion commands will execute on top of any other motion that the 
axes may already be executing. 

Parameters 
[in] 
numCommands The number of 
superimposed motion 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
superimposed motion 
commands. 

Remarks 

This command executes the SuperimposeMov function for multiple axes. 

This function currently supports superimposing axes in Idle, Pos, or Jog 
operation states. If this function is called for axes in other operation states, an 
error will be returned. 

◆StopSuperimpose() [1/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
int axis 
) 
Stop a superimposed motion. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the superimposed motion of an axis before it completes. The 
superimposed motion will decelerate to a stop using the deceleration specified for 
the profile of the superimposed motion. Any motion that the axis was already 
executing under the superimposed motion will remain unaffected. The axis will still 
travel an extra distance equal to the distance traveled due to the superimposed 
motion before the superimposed motion is stopped. 

◆StopSuperimpose() [2/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
AxisSelection pAxisSelection ) 
Stop the superimposed motion of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
Remarks 

This command executes the StopSuperimpose function for multiple axes. 

◆SimulatePos() 
WMX3APIFUNC 
SimulatePos ( SimulatePosComma pSimulatePosComma 
double * pPeakVelocity, 
double * pTotalTimeMillisecond 
double * pAccelerationTimeMil 
double * pCruiseTimeMilliseco 
double * pDecelerationTimeMil 
) 
Simulate a position command without moving any axes. The peak velocity, 
acceleration time, cruise time (the time the axis velocity is constant), deceleration 
time, and total profile time of the position command are returned. 

Parameters 
[in] 
pSimulatePosCommand A pointer to a 

SimulatePosCommand 


that contains the 
simulated position 
command parameters. 

[out] 
pPeakVelocity A pointer to a double 
type variable that will 
contain the highest 
absolute velocity that the 
axis moves at during the 
simulated motion 
command. This value is 
in user units per second. 

[out] 
pTotalTimeMilliseconds A pointer to a double 
type variable that will 
contain the total 
execution time of the 
motion command. This 
value is in units of 
milliseconds. 

[out] 
pAccelerationTimeMillis A pointer to a double 
variable that will contain 
the time that the axis 
spends accelerating 
during the motion 
command. This value is 
in units of milliseconds. 

[out] 
pCruiseTimeMillisecond A pointer to a double 
variable that will contain 
the time that the axis 
spends at the 
commanded velocity 
during the motion 
command. This value is 
in units of milliseconds. 

[out] 
pDecelerationTimeMillis A pointer to a double 
variable that will contain 


the time that the axis 
spends decelerating 
during the motion 
command. If the axis 
changes direction during 
the motion command, 
the deceleration time 
does not include the time 
spent decelerating 
before changing 
direction. This value is in 
units of milliseconds. 

◆SimulateLinearIntplPos() 
WMX3APIFUNC 
SimulateLinearIntplP 
os ( SimulateLinearIntplC pSimulateLinearIntplC 
double * pPeakVelocity, 
double * pTotalTimeMillisecond 
double * pAccelerationTimeMil 
double * pCruiseTimeMilliseco 
double * pDecelerationTimeMil 
) 
Simulate a linear interpolation motion command without moving any axes. The peak 
velocity, acceleration time, cruise time (the time the axis velocity is constant), 
deceleration time, and total profile time of the linear interpolation motion command 
are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 
SimulateLinearIntplCo 
mmand that contains 


the simulated linear 
interpolation motion 
command parameters. 

[out] 
pPeakVelocity A pointer to a double 
type variable that will 
contain the highest 
composite velocity of the 
interpolating axes during 
the simulated motion 
command. This value is 
in user units per second. 

[out] 
pTotalTimeMilliseconds A pointer to an int type 
variable that will contain 
the total execution time 
of the motion command. 
This value is in units of 
milliseconds. 

[out] 
pAccelerationTimeMillis A pointer to an int 
variable that will contain 
the time that the axis 
spends accelerating 
during the motion 
command. This value is 
in units of milliseconds. 

[out] 
pCruiseTimeMillisecond A pointer to an int 
variable that will contain 
the time that the axis 
spends at the 
commanded velocity 
during the motion 
command. This value is 
in units of milliseconds. 

[out] 
pDecelerationTimeMillis A pointer to an int 
variable that will contain 
the time that the axis 


spends decelerating 
during the motion 
command. If the axis 
changes direction during 
the motion command, 
the deceleration time 
does not include the time 
spent decelerating 
before changing 
direction. This value is in 
units of milliseconds. 

◆SimulatePosAtTime() [1/2]
WMX3APIFUNC 
SimulatePosAtTime ( SimulatePosComma pSimulatePosComma 
int returnType, 
double timeMilliseconds, 
double * pCalculatedPos, 
double * pCalculatedVel 
) 
Simulate a position command without moving any axes. The position and velocity of 
the axis after the motion command runs for the specified time are returned. 

Parameters 
[in] 
pSimulatePosCommand A pointer to a 

SimulatePosCommand 

that contains the 
simulated position 
command parameters. 

[in] 
returnType Determines whether the 
value specified for the 
"timeMilliseconds" 


argument represents the 
time elapsed or the time 
remaining. If 0, the 
"timeMilliseconds" 
specified is the time 
elapsed. If 1, the 
"timeMilliseconds" 
specified is the time 
remaining. 
[in] 
timeMilliseconds The amount of time 
elapsed or remaining, 
depending on the value 
specified for the 
"returnType" function 
argument. This value is 
in units of milliseconds. 
[out] 
pCalculatedPos A pointer to a double 
type variable that will 
contain the position that 
the axis is at after the 
specified amount of time 
elapses or remains. This 
value is in user units. 
[out] 
pCalculatedVel A pointer to a double 
type variable that will 
contain the velocity that 
the axis is at after the 
specified amount of time 
elapses or remains. This 
value is in user units per 
second. 

◆SimulatePosAtTime() [2/2]

WMX3APIFUNC 
SimulatePosAtTime ( 
WMX3APIFUNC 
SimulatePosAtTime ( SimulateLinearIntplC pSimulateLinearIntplC 
double timeMilliseconds, 
double * pPosArray, 
double * pMoveDistance, 
double * pRemainDistance, 
double * pTotalDistance 
) 
Simulate a linear interpolation motion command without moving any axes. The 
move distance, remain distance, and total distance after the linear interpolation runs 
for a specified amount of time are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 

SimulateLinearIntplCo 
mmand that contains 
the simulated linear 
interpolation motion 
command parameters. 
[in] 
timeMilliseconds The amount of time 
elapsed. This value is in 
units of milliseconds. 
[out] 
pPosArray A pointer to a double 
type array that will 
contains the positions of 
the interpolated axes 
after the specified 
amount of time elapses. 
The size of the array 
must be equal to or 
greater than the 
axisCount of 
pSimulateLinearIntplCo 
mmand>
linearIntplCommand. 


[out] 
pMoveDistance A pointer to a double 
type variable that will 
contain the total distance 
moved along the linear 
interpolation after the 
specified time elapses. 
[out] 
pRemainDistance A pointer to a double 
type variable that will 
contain the total distance 
remaining in the linear 
interpolation after the 
specified time elapses. 
[out] 
pTotalDistance A pointer to a double 
type variable that will 
contain the total distance 
along the entire linear 
interpolation. This value 
is always equal to the 
sum of the values 
returned by 
pMoveDistance and 
pRemainDistance. 

◆SimulateTimeAtPos() 
WMX3APIFUNC 
SimulateTimeAtPos ( SimulatePosComma pSimulatePosComma 
double specificPos, 
double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
) 
Simulate a position command without moving any axes. The elapsed time and 
remaining time after the axis reaches the specified position are returned. 


Parameters 
[in] 
pSimulatePosCommand A pointer to a 

SimulatePosCommand 

that contains the 
simulated position 
command parameters. 

[in] 
specificPos The position at which to 
calculate the "move 
time" and "remain time" 
of the profile. This value 
is in user units. 

[out] 
pMoveTimeMilliseconds A pointer to an double 
type variable that will 
contain the amount of 
time elapsed when the 
axis first reaches the 
"specific position." This 
value is in units of 
milliseconds. 

[out] 
pRemainTimeMillisecon A pointer to an double 
type variable that will 
contain the amount of 
time remaining in the 
motion command when 
the axis reaches the 
"specific position." This 
value is in units of 
milliseconds. 

◆SimulateTimeAtDist() 
WMX3APIFUNC 
SimulateTimeAtDist ( SimulateLinearIntplC pSimulateLinearIntplC 
double specificDistance, 

double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
Simulate a linear interpolation motion command without moving any axes. The 
move time, remain time, and total time after the linear interpolation runs for a 
specified distance are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 
SimulateLinearIntplCo 
mmand that contains 
the simulated linear 
interpolation motion 
command parameters. 

[in] 
specificDistance The distance along the 
linear interpolation at 
which to calculate the 
move time, remain time, 
and total time of the 
linear interpolation 
command. This is the 
distance in N 
dimensions, where N is 
the number of axes in 
the interpolation. 

[out] 
pMoveTimeMilliseconds A pointer to a double 
type variable that will 
contain the amount of 
time elapsed when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 


[out] 
pRemainTimeMillisecon A pointer to a double 
type variable that will 
contain the amount of 
time remaining when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 

[out] 
pTotalTimeMilliseconds A pointer to a double 
type variable that will 
contain the total time 
that the linear 
interpolation takes to 
complete. This value is 
always equal to the sum 
of the values returned by 
pMoveTime and 
pRemainTime. The units 
are milliseconds. 

◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands. 

Parameters 
[in] 
axis The axis to allocate the 
buffer memory. 
[in] 
points The number of points to 
allocate memory for. 
Each PVT, PT, VT, or AT 


point occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of PVT 
motion commands. This function allocates memory to execute the following PVT 
motion commands: 


StartPVT 
StartPVT (Interpolation) 


StartPT 


StartVT 


StartAT 

If any of the above commands are called before this function, a default buffer 
memory for maxPvtAppendPoints will be allocated. If the memory allocation fails, 
or if more than maxPvtAppendPoints points are specified, the PVT motion 
command will return an error. To execute a PVT motion command with more than 
maxPvtAppendPoints points, this function must be called beforehand, specifying 
the required number of points. 

For StartPVT (Interpolation), buffer memory must be separately allocated for all 
interpolating axes. 

Allocating buffer memory space is an operation that can fail due to lack of memory 
space or fragmentation of memory. For deterministic operation, this function should 
be called during initialization to allocate memory for all axes that will potentially 
execute a PVT motion command. 

The maximum size of the PVT buffer memory space of each axis is 2GB-1Byte 
(2147483647 bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

It is not necessary to call this function again after buffer memory has been allocated 
once. (When the WMX3 engine is restarted, this function must be called again to 
allocate buffer memory.) 

Buffer memory that has been allocated can be freed using the FreePVTBuffer 
function. After freeing the PVT buffer memory of an axis, this function can be called 


again to reallocate a different amount of buffer memory. 

It is not necessary to free allocated memory using FreePVTBuffer before exiting the 
program. Any allocated memory is automatically freed when the WMX3 engine is 
closed. 

The GetPVTBufferPoints function can be used to find the amount of PVT buffer 
memory currently allocated to an axis. 

The GetPVTBytesPerPoint function can be used to convert the buffer memory size 
from points to bytes. 

See also 

PVT Command 

◆ 
FreePVTBuffer() 

WMX3APIFU 
NC 
FreePVTBuff 
WMX3APIFU 
NC 
FreePVTBuff 
er ( 
int axis 
) 
Free PVT buffer memory for an axis. 

Parameters 
[in] 
axis The axis to free the 
buffer memory. 
Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePVTBuffer function. This allows CreatePVTBuffer to be called again to 
allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated 
memory is automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use 
for another purpose. 

◆ 
GetPVTBufferPoints() 

WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
int 
axis, 
unsigned int * pPoints 
Get the amount of PVT buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the 
buffer memory size. 
[out] 
pPoints A pointer to an unsigned 
int that will contain the 
number of points that 
can be stored in the 
buffer memory. 
Remarks 

This function obtains the amount of PVT buffer memory currently allocated to an 
axis, in units of points. 

To convert the buffer memory size from the number of points to bytes, use the 
GetPVTBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will 
return 0 in the pPoints parameter. 

◆GetPVTBytesPerPoint() 

WMX3APIFU 
NC 
GetPVTBytes 
WMX3APIFU 
NC 
GetPVTBytes 
PerPoint ( 
unsigned int * pBytes ) 
Get the number of bytes required per point data in the PVT buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned 
int that will contain the 
number of bytes of 
memory required per 
point data. 

Remarks 

This function obtains the number of bytes of memory required to store one point 
data in the PVT buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this 
function returns 48, the number of bytes required to store 100000 points is 
48*100000 = 4800000, or approximately 4.8MB. 

◆StartPVT() [1/6]
WMX3APIFUNC 
StartPVT ( PVTCommand * pPVTCommand, 
unsigned int numAddlCommands = 
PVTAdditionalComm pPVTAddlCommand = 
) 
Start executing a PVT motion command. 
Parameters 
[in]pPVTCommand A pointer to a 
PVTCommand that 

contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTAdditionalComman 
d objects. The size of 
the array should be 
equal to 
numAddlCommands. 

Remarks 

A PVT motion command consists of a sequence of position-velocity-time points. The 
axis will travel through each point position at the specified time and velocity. The 
acceleration is linear between two points, but may not be continuous at the interface 
of each point. 

The PVT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PVTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 
and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 


specified to append additional points to the PVT command after the points defined 
in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to 
an array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPVTCommand and 
pPVTAddlCommand. 

See also 

PVT Command 

◆StartPVT() [2/6]
WMX3APIFUNC 
StartPVT ( PVTCommand * pPVTCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
PVTAdditionalComm pPVTAddlCommand = 
) 
Start executing a triggered PVT motion command. 
Parameters 
[in] 
pPVTCommand A pointer to a 
PVTCommand that 
contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTAdditionalComman 


d objects. The size of 

the array should be 

equal to 

numAddlCommands. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

A PVT motion command consists of a sequence of position-velocity-time points. The 
axis will travel through each point position at the specified time and velocity. The 
acceleration is linear between two points, but may not be continuous at the interface 
of each point. 

The PVT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PVTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 
and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 
specified to append additional points to the PVT command after the points defined 
in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to 
an array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPVTCommand and 
pPVTAddlCommand. 



The motion will begin when the specified trigger condition is satisfied. 
See also 
◆StartPVT() [3/6]
The motion will begin when the specified trigger condition is satisfied. 
See also 
PVT Command, Trigger Motion 
WMX3APIFUNC 
StartPVT ( PVTCommand * pPVTCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
PVTAdditionalComm pPVTAddlCommand = 
) 
Start executing a triggered PVT motion command with multiple trigger events. 

Parameters 
[in] 
pPVTCommand A pointer to a 
PVTCommand that 
contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTAdditionalComman 
d objects. The size of 
the array should be 
equal to 
numAddlCommands. 


[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

A PVT motion command consists of a sequence of position-velocity-time points. The 
axis will travel through each point position at the specified time and velocity. The 
acceleration is linear between two points, but may not be continuous at the interface 
of each point. 

The PVT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PVTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 
and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 
specified to append additional points to the PVT command after the points defined 
in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to 
an array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPVTCommand and 
pPVTAddlCommand. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 


◆StartPVT() [4/6]
WMX3APIFUNC 
StartPVT ( PVTIntplCommand * pPVTCommand, 
unsigned int numAddlCommands = 
PVTIntplAdditionalC pPVTAddlCommand = 
) 
Start executing a PVT interpolation motion command. 
Parameters 
[in] 
pPVTCommand A pointer to a 
PVTIntplCommand that 
contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTIntplAdditionalCo 
mmand objects. The 
size of the array should 
be equal to 
numAddlCommands. 

Remarks 

This function is a variation of StartPVT that can command up to 
maxPvtInterpolateAxes axes at once. The commanded axes will all start motion 
during the same communication cycle, allowing coordination between the axes with 
the careful selection of points. 


This function allocates memory dynamically when called for the first time for each of 
the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 
specified to append additional points to the PVT interpolation command after the 
points defined in pPVTCommand. The pPVTAddlCommand argument is specified 
as a pointer to an array, and any number of additional commands may be specified 
as long as the PVT memory buffer for each commanded axis (created with 
CreatePVTBuffer) is large enough to hold all points that are defined for that axis in 
pPVTCommand and pPVTAddlCommand. 

See also 

PVT Command 

◆StartPVT() [5/6]
WMX3APIFUNC 
StartPVT ( PVTIntplCommand * pPVTCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
PVTIntplAdditionalC pPVTAddlCommand = 
) 
Start executing a triggered PVT interpolation motion command. 

Parameters 
[in] 
pPVTCommand A pointer to a 
PVTIntplCommand that 
contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 


commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTIntplAdditionalCo 
mmand objects. The 
size of the array should 
be equal to 
numAddlCommands. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function is a variation of StartPVT that can command up to 
maxPvtInterpolateAxes axes at once. The commanded axes will all start motion 
during the same communication cycle, allowing coordination between the axes with 
the careful selection of points. 

This function allocates memory dynamically when called for the first time for each of 
the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 
specified to append additional points to the PVT interpolation command after the 
points defined in pPVTCommand. The pPVTAddlCommand argument is specified 
as a pointer to an array, and any number of additional commands may be specified 
as long as the PVT memory buffer for each commanded axis (created with 
CreatePVTBuffer) is large enough to hold all points that are defined for that axis in 
pPVTCommand and pPVTAddlCommand. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
PVT Command, Trigger Motion 


◆StartPVT() [6/6]
WMX3APIFUNC 
StartPVT ( PVTIntplCommand * pPVTCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
PVTIntplAdditionalC pPVTAddlCommand = 
) 
Start executing a triggered PVT interpolation motion command with multiple trigger 
events. 

Parameters 
[in] 
pPVTCommand A pointer to a 
PVTIntplCommand that 
contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTIntplAdditionalCo 
mmand objects. The 
size of the array should 
be equal to 
numAddlCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 


Remarks 

This function is a variation of StartPVT that can command up to 
maxPvtInterpolateAxes axes at once. The commanded axes will all start motion 
during the same communication cycle, allowing coordination between the axes with 
the careful selection of points. 

This function allocates memory dynamically when called for the first time for each of 
the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPVTAddlCommand optional arguments can be 
specified to append additional points to the PVT interpolation command after the 
points defined in pPVTCommand. The pPVTAddlCommand argument is specified 
as a pointer to an array, and any number of additional commands may be specified 
as long as the PVT memory buffer for each commanded axis (created with 
CreatePVTBuffer) is large enough to hold all points that are defined for that axis in 
pPVTCommand and pPVTAddlCommand. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 

◆StartPT() [1/3]
WMX3APIFUNC 
StartPT ( PTCommand * pPTCommand, 
unsigned int numAddlCommands = 
PTAdditionalComma pPTAddlCommand = 
) 
Start executing a PT motion command. 
Parameters 


[in] 
pPTCommand A pointer to a 
PTCommand that 
contains the PT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPTAddlCommand An optional argument 
that is a pointer to an 
array of 
PTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
Remarks 

A PT motion command consists of a sequence of position-time points. The axis will 
travel through each point position at the specified time. The velocity between two 
points is constant, but may not be continuous at the interface of each point. 

The PT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 
another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 


additional information regarding dynamically allocated memory. 

The numAddlCommands and pPTAddlCommand optional arguments can be 
specified to append additional points to the PT command after the points defined in 
pPTCommand. The pPTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPTCommand and 
pPTAddlCommand. 

See also 

PVT Command 

◆StartPT() [2/3]
WMX3APIFUNC 
StartPT ( PTCommand * pPTCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
PTAdditionalComma pPTAddlCommand = 
) 
Start executing a triggered PT motion command. 
Parameters 
[in] 
pPTCommand A pointer to a 
PTCommand that 
contains the PT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPTAddlCommand An optional argument 


that is a pointer to an 
array of 
PTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

A PT motion command consists of a sequence of position-time points. The axis will 
travel through each point position at the specified time. The velocity between two 
points is constant, but may not be continuous at the interface of each point. 

The PT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 
another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPTAddlCommand optional arguments can be 
specified to append additional points to the PT command after the points defined in 
pPTCommand. The pPTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 


PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPTCommand and 
pPTAddlCommand. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
PVT Command, Trigger Motion 

◆StartPT() [3/3]
WMX3APIFUNC 
StartPT ( PTCommand * pPTCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
PTAdditionalComma pPTAddlCommand = 
) 
Start executing a triggered PT motion command with multiple trigger events. 

Parameters 
[in] 
pPTCommand A pointer to a 
PTCommand that 
contains the PT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPTAddlCommand An optional argument 
that is a pointer to an 
array of 
PTAdditionalCommand 
objects. The size of the 


array should be equal to 

numAddlCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

A PT motion command consists of a sequence of position-time points. The axis will 
travel through each point position at the specified time. The velocity between two 
points is constant, but may not be continuous at the interface of each point. 

The PT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of PTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 
another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pPTAddlCommand optional arguments can be 
specified to append additional points to the PT command after the points defined in 
pPTCommand. The pPTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pPTCommand and 
pPTAddlCommand. 

The motion will begin when the specified multi-event trigger condition is satisfied. 



◆StartVT() [1/3]
See also 
PVT Command, Trigger Events 
WMX3APIFUNC 
StartVT ( VTCommand * pVTCommand, 
unsigned int numAddlCommands = 
VTAdditionalComma pVTAddlCommand = 
) 
Start executing a VT motion command. 

Parameters 
[in] 
pVTCommand A pointer to a 
VTCommand that 
contains the VT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pVTAddlCommand An optional argument 
that is a pointer to an 
array of 
VTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
Remarks 

A VT motion command consists of a sequence of velocity-time points. The velocity 
between two points is constant, and is equal to the velocity of the latter point. 


The VT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of VTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 
and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 
another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pVTAddlCommand optional arguments can be 
specified to append additional points to the VT command after the points defined in 
pVTCommand. The pVTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pVTCommand and 
pVTAddlCommand. 

See also 

PVT Command 

◆StartVT() [2/3]
WMX3APIFUNC 
StartVT ( VTCommand * pVTCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
VTAdditionalComma pVTAddlCommand = 

) 
Start executing a triggered VT motion command. 

Parameters 
[in] 
pVTCommand A pointer to a 
VTCommand that 
contains the VT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pVTAddlCommand An optional argument 
that is a pointer to an 
array of 
VTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 
Remarks 

A VT motion command consists of a sequence of velocity-time points. The velocity 
between two points is constant, and is equal to the velocity of the latter point. 

The VT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of VTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 


and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 
another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pVTAddlCommand optional arguments can be 
specified to append additional points to the VT command after the points defined in 
pVTCommand. The pVTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pVTCommand and 
pVTAddlCommand. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
PVT Command, Trigger Motion 

◆StartVT() [3/3]
WMX3APIFUNC 
StartVT ( VTCommand * pVTCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
VTAdditionalComma pVTAddlCommand = 
) 
Start executing a triggered VT motion command with multiple trigger events. 
Parameters 

[in] 
pVTCommand A pointer to a 
VTCommand that 
contains the VT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pVTAddlCommand An optional argument 
that is a pointer to an 
array of 
VTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

A VT motion command consists of a sequence of velocity-time points. The velocity 
between two points is constant, and is equal to the velocity of the latter point. 

The VT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of VTCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The velocity is signed, and can accept positive 
and negative values. The minimum number of points is 1 (with a time greater than 
0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-velocity segments. The acceleration when switching from one velocity to 


another is infinite. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pVTAddlCommand optional arguments can be 
specified to append additional points to the VT command after the points defined in 
pVTCommand. The pVTAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pVTCommand and 
pVTAddlCommand. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 

◆StartAT() [1/3]
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a AT motion command. 
Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 


that specifies the 
number of additional 
commands to append 
after pPVTCommand. 

[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 

ATAdditionalCommand 

objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point. 

The AT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of ATCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-acceleration segments. If the accelerations and times are not chosen 
carefully, the profile will end at a non-zero velocity. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pATAddlCommand optional arguments can be 
specified to append additional points to the AT command after the points defined in 
pATCommand. The pATAddlCommand argument is specified as a pointer to an 


array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pATCommand and 
pATAddlCommand. 

See also 

PVT Command 

◆StartAT() [2/3]
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a triggered AT motion command. 
Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 
ATAdditionalCommand 
objects. The size of the 
array should be equal to 


numAddlCommands. 

[in] 
pTrigger A pointer to an object of 

the Trigger class that 

specifies the trigger 

condition. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point. 

The AT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of ATCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-acceleration segments. If the accelerations and times are not chosen 
carefully, the profile will end at a non-zero velocity. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pATAddlCommand optional arguments can be 
specified to append additional points to the AT command after the points defined in 
pATCommand. The pATAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pATCommand and 
pATAddlCommand. 

The motion will begin when the specified trigger condition is satisfied. 



◆StartAT() [3/3]
See also 
PVT Command, Trigger Motion 
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a triggered AT motion command with multiple trigger events. 

Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 
ATAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 


events. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point. 

The AT command will start with the initial position equal to the current command 
position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This 
initial point does not need to be specified (if the first point of ATCommand has a 
timeMilliseconds of 0, that point is ignored). 

The point times must be specified in ascending order. The point times do not need 
to be a multiple of the cycle time. The minimum number of points is 1 (with a time 
greater than 0). 

This function will construct a rudimentary profile consisting of sequences of 
constant-acceleration segments. If the accelerations and times are not chosen 
carefully, the profile will end at a non-zero velocity. 

This function allocates memory dynamically when called for the first time for the 
commanded axis after starting the WMX3 engine. See CreatePVTBuffer for 
additional information. See Function Calls related Memory Allocation for 
additional information regarding dynamically allocated memory. 

The numAddlCommands and pATAddlCommand optional arguments can be 
specified to append additional points to the AT command after the points defined in 
pATCommand. The pATAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the 
PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is 
large enough to hold all points that are defined in pATCommand and 
pATAddlCommand. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 


 


Sync Class Reference 

This class contains sync functions. 

Classes 

class SyncCombineOptions 
This class contains options for combine 
sync control. More... 

class SyncGroup 
This class contains settings for a sync 
group. More... 

class SyncGroupStartupType 
This enumerator class enumerates 
startup types for a sync group. More... 

class SyncGroupStatus 
This class contains the current status of 
a sync group channel. More... 

class SyncOptions 
This class contains options for sync 
control. More... 

Public Member Functions 

Sync (CoreMotion *f) 

bool IsDeviceValid () 

WMX3APIFUNC SetSyncMasterSlave (int masterAxis, int 
slaveAxis, SyncOptions 
*pSyncOptions=NULL) 
Establish synchronous control between a 
master axis and a slave axis. More... 

WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis. 

Parameters 
[in] 
masterAxis The master axis. 
[in] 
slaveAxis The slave axis. 
[in] 
pSyncOptions An optional argument 
that is used to specify 
additional options for the 
sync control. 

Remarks 

This function starts sync control between a master axis and a slave axis. The 
command position of the slave axis at the time that this function is executed 
becomes synchronized to the command position of the master axis at the time that 
this function is executed. Any subsequent changes to the master axis command 
position will also be added to the slave axis command position. 

A slave axis will follow the movements of the master axis. 

When this function returns, sync control is already established. The master axis can 
be moved immediately. 

The master and slave axes must not be in motion (must be in Idle operation state) 
when this function is called. To start synchronization with a master axis that is in 
motion, use the SetSyncGearRatio function (with a gear ratio of 1) instead. 


The slave axis servo must be in Servo On state when this function is executed. The 
master axis servo may be on or off. 

The slave axis must not be a sync master of any other axis. 

The Master Desync Type and Slave Desync Type parameters can be set to 
automatically stop or turn off the axis servo when synchronization is broken. 

The Single Turn Mode parameter must be set to the same value for the master and 
slave axes (this parameter must be enabled or disabled for both axes). If the Single 
Turn Mode parameter is set to enabled, then the master and slave axes must have 
the same Single Turn Encoder Count. 

When the slave servo turns off (Servo On becomes FALSE), synchronous control is 
resolved for that slave axis. This function must be called again to reestablish 
synchronous control for that axis. 

See also 

Synchronization 

◆SetSyncCombine() 
WMX3APIFUNC 
SetSyncCombine ( int masterAxis1, 
int masterAxis2, 
int slaveAxis, 
SyncCombineOption pSyncCombineOption 
) 
Combine the position commands of two master axes and set it as the position 
command of a slave axis. 

Parameters 
[in] 
masterAxis1 The first master axis. 
[in] 
masterAxis2 The second master axis. 
[in] 
slaveAxis The slave axis. 


[in] 
pSyncCombineOptions An optional argument 
that is used to specify 
additional options for the 
sync control. 

Remarks 

Combine sync is a special type of sync control in which two master axes control a 
slave axis. The cyclic position command of the slave axis will be set equal to the 
sum of the cyclic position commands of the two master axes. 

Upon initiating combine sync control, a single offset to the slave axis will be 
calculated so that the current position command of the slave axis equals the sum of 
the position commands of the two master axes. 

When this function returns, sync control is already established. The master axes 
can be moved immediately. 

Both master axes and the slave axis must not be in motion (must be in Idle 
operation state) when this function is called. 

The slave axis servo must be in Servo On state when this function is executed. The 
master axis servos may be on or off. 

The slave axis must not be a sync master of any other axis. 

The Master Desync Type and Slave Desync Type parameters can be set to 
automatically stop or turn off the axis servo when synchronization is broken. 

Single turn mode is not supported in combine sync control. An error will be returned 
when attempting to start combine sync control for axes in single turn mode. 

The VelocityOffset and SymmetricVelocityOffset sync offset compensation 
modes are not supported when operating combine sync control. 

Homing is not supported in combine sync control. Attempting to start homing for 
combine sync axes will cause the homing function to return an error. 

The ResolveSync function can be used resolve combine sync control and regular 
sync control. 

Slave axes which are controlled with combine sync will have an operation state of 


Sync in the Op State status returned by the GetStatus function. The axis numbers 
of the two master axes can be found in the Master Axis and Second Master Axis 
statuses returned by the GetStatus function. 

When the slave servo turns off (Servo On becomes FALSE), synchronous control is 
resolved for that slave axis. This function must be called again to reestablish 
synchronous control for that axis. 

See also 

Combine Sync 

◆SetAbsoluteSyncPhase() 
WMX3APIFUNC 
SetAbsoluteSyncPh 
ase ( int slaveAxis, 
double phase, 
Profile * pProfile 
) 
Set the absolute sync phase of a slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync phase. 
[in] 
phase The absolute sync phase 
to apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
phase. 

Remarks 

This function sets the absolute sync phase of a slave axis. The sync phase is an 


additional offset that is applied to the sync slave axis but not the master axis. 

The sync phase is 0 when sync control is started. 

The slave will shift from the master axis by the sync phase amount using the 
specified profile. The time taken for the slave to completely shift by the sync phase 
amount will depend on the specified profile type, velocity, acceleration, etc. 

The sync phase may be changed while the master and slave axes are in motion. 

The sync phase may not be changed while the axis has still only partially applied a 
previous sync phase shift or a sync gear shift. Whether a sync axis is currently in 
the middle of applying a sync phase shift or sync gear shift can be checked with the 
Detail Op State status. An axis executing phase shift will be in the 
Sync_PhaseShift state and an axis executing gear shift will be in the 
Sync_GearShift state. 

The currently applied sync phase can be obtained by checking the Sync Phase 
Offset status. An absolute phase that is greater than the currently applied sync 
phase will cause the slave to shift in the positive direction. An absolute phase that is 
less than the currently applied sync phase will cause the slave to shift in the 
negative direction. 

See also 

Sync Phase Offset 

◆AddRelativeSyncPhase() 
WMX3APIFUNC 
AddRelativeSyncPh 
ase ( int slaveAxis, 
double phase, 
Profile * pProfile 
) 
Add a relative sync phase to a slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync phase. 
[in] 
phase The relative sync phase 
to apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
phase. 
Remarks 

This function adds a relative sync phase to a slave axis. The sync phase is an 
additional offset that is applied to the sync slave axis but not the master axis. 

The sync phase is 0 when sync control is started. 

The slave will shift from the master axis by the sync phase amount using the 
specified profile. The time taken for the slave to completely shift by the sync phase 
amount will depend on the specified profile type, velocity, acceleration, etc. 

The sync phase may be changed while the master and slave axes are in motion. 

The sync phase may not be changed while the axis has still only partially applied a 
previous sync phase shift or a sync gear shift. Whether a sync axis is currently in 
the middle of applying a sync phase shift or sync gear shift can be checked with the 
Detail Op State status. An axis executing phase shift will be in the 
Sync_PhaseShift state and an axis executing gear shift will be in the 
Sync_GearShift state. 

The currently applied sync phase can be obtained by checking the Sync Phase 
Offset status. A positive relative sync phase will cause the slave to shift in the 
positive direction. A negative relative sync phase will cause the slave to shift in the 
negative direction. 

See also 

Sync Phase Offset 


◆SetSyncGearRatio() [1/2]
WMX3APIFUNC 
SetSyncGearRatio ( int slaveAxis, 
double gearRatio, 
Profile * pProfile 
) 
Set the sync gear ratio between a sync slave axis and the master axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync gear ratio. 
[in] 
gearRatio The sync gear ratio to 
apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
sync gear ratio. 

Remarks 

The sync gear ratio is the ratio between the slave axis position command and the 
master axis position command. The amount that the master axis moves during one 
cycle is multiplied by the sync gear ratio to calculate the amount that the slave axis 
moves during that cycle. 

The sync gear ratio can be any value between 0.000001 and 2147483647, or any 
value between -0.000001 and -2147483647. A negative sync gear ratio will cause 
the slave axis to move in the opposite direction as the master axis. 

A sync gear ratio with magnitude greater than 1 causes the slave axis to move at a 
greater velocity (in terms of user units of the slave axis) than the master axis. A sync 
gear ratio with magnitude less than 1 causes the slave axis to move at a smaller 
velocity (in terms of user units of the slave axis) than the master axis. 


The sync gear ratio may be changed while the master and slave axes are in motion. 

If the sync gear ratio is changed while the master and slave axes are in motion, the 
new sync gear ratio is not applied immediately to prevent the slave axis velocity 
from suddenly changing. The slave axis will shift from the current velocity to the 
velocity that would be commanded by the new gear ratio using the specified profile 
parameters (profile type, velocity, acceleration, etc.). The slave axis will follow any 
changes to the master axis velocity during the catch up motion, but the total time 
taken for the catch up motion to complete will not be affected by changes in the 
master axis velocity. 

The sync gear ratio may not be changed while the axis has still only partially applied 
a previous sync phase shift or a sync gear shift. Whether a sync axis is currently in 
the middle of applying a sync phase shift or sync gear shift can be checked with the 
Detail Op State status. An axis executing phase shift will be in the 
Sync_PhaseShift state and an axis executing gear shift will be in the 
Sync_GearShift state. 

This function causes the sync offset between the slave and master positions to 
change based on the gear ratio and the position and velocity of the master axis at 
the time that this function is called. A phase shift operation such as 
SetAbsoluteSyncPhase may be necessary after this operation completes. 

Example: 

The master and slave axes are moving at a rate of 10000 pulses per second when 
this function is called with a sync gear ratio of 2. The new slave axis velocity is 
20000 pulses per second, but the slave axis does not instantly change to this 
velocity. Instead, the slave axis gradually ramps to to this velocity using the profile 
parameters passed to this function. If the master axis velocity changes to 30000 
pulses per second while the slave axis is shifting to the new gear ratio, the slave 
axis will ramp up to 60000 pulses per second, but the total time taken to shift the 
gear ratio remains the same. 

If the master and slave axes are not in motion when this function is executed, the 
slave will instantly shift to the new gear ratio. 

The currently applied sync gear ratio can be obtained by checking the Sync Gear 
Ratio status. 



The sync gear ratio operates independently from the Gear Ratio Numerator and 

Gear Ratio Denominator parameters. 
See also 

Sync Gear Ratio 

◆SetSyncGearRatio() [2/2]
WMX3APIFUNC 
SetSyncGearRatio ( int masterAxis, 
int slaveAxis, 
double gearRatio, 
Profile * pProfile 
) 
Establish sync control between two axes, and set the sync gear ratio between a 
sync slave axis and the master axis. 

Parameters 
[in] 
masterAxis The master axis. 
[in] 
slaveAxis The slave axis to apply 
the sync gear ratio. 
[in] 
gearRatio The sync gear ratio to 
apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
sync gear ratio. 
Remarks 

This function is similar to SetSyncGearRatio, but this function will also establish 
sync control between the specified master and slave axes if they are not 
synchornized already. 


When this function establishes sync control, the command position of the slave axis 
at the time that this function is called becomes synchronized to the command 
position of the master axis at the time that this function is called. 

When this function establishes sync control, the master axis can be moved 
immediately after this function returns. 

Unlike many other sync functions, this function is also able to establish sync control 
while the master and slave axes are not in Idle state. The slave axis will catch up to 
the master axis velocity using the profile parameters passed to this function. Sync 
control is established at the position that the slave axis velocity catches up the 
master axis velocity. 

If the specified slave axis has already established sync control with the specified 
master axis, this function behaves the same as SetSyncGearRatio. If the specified 
slave axis is synchronized to a different master axis, an error will be returned. 

See also 

Sync Gear Ratio 

◆ 
SyncToJog() [1/2] 



WMX3APIFUNC 
SyncToJog ( 
WMX3APIFUNC 
SyncToJog ( 
int 
slaveAxis, 
Profile * pProfile 
) 
Resolve sync control for a slave axis, and immediately start a jog command for the 
slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile 
parameters for the jog 
command. 

Remarks 

This function resolves sync control for a slave axis, and immediately starts a jog 
command for the slave axis. If the slave axis was in motion when this function is 
called, the initial velocity of the jog command will be the velocity of the slave axis 
when this function is called (unless a non-zero startingVelocity is specified in the 
profile argument of this function, in which case that starting velocity will take 
precedence). 

◆SyncToJog() [2/2]

WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
Resolve sync control for a slave axis, and immediately start a jog command for the 
slave axis with the velocity equal to the velocity that the slave axis was moving at. 

Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 

Remarks 

This function resolves sync control for a slave axis, and immediately starts a jog 
command for the slave axis. The velocity of the jog command will equal the velocity 
of the slave axis when this function is called. 

Because the deceleration is not specified for the jog command, attempting to stop 
the jog command using the Stop function will cause the default deceleration (10000 
user units per second) to be used. For most applications, the default deceleration is 
not suitable, so the Stop function with a deceleration argument should be used 
instead. 

◆ResolveSync() 
WMX3APIFU 
NC 
ResolveSync ( int slaveAxis ) 
Release the specified slave axis from synchronous control. 

Parameters 
[in] 
slaveAxis The slave axis to release 
synchronous control. 


◆SetSyncGroup() 
WMX3APIFUNC 
SetSyncGroup ( int groupId, 
SyncGroup syncGroup 
) 
Set the axes and parameters of a synchronization group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
syncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function sets the settings of a sync group. The maximum number of sync 
groups that can be defined at once is equal to maxSyncGroup. 

A sync group consists of one sync master axis and any number of slave axes. The 
sync group tracks the home done status of the sync group and any errors 
encountered during the sync operation. These statuses can be checked using the 
GetSyncGroupStatus function. 

A sync group must first be enabled using the EnableSyncGroup function before it 
has any effect. Once enabled, a sync group will automatically start sync control for 
the defined slave axes while they are in servo on (Servo On is TRUE) state. 

If this function is called to redefine a sync group that is currently enabled, the sync 
group will return to disabled state and must be enabled again using the 
EnableSyncGroup function. 

There are several sync group functions that cannot be replicated with normal sync 


control. For example, sync groups can be configured to turn all sync axis servos on 
or off together with the servoOnOffSynchronization option. Using the CatchUp 
startup type, sync groups are able to execute catch up motion to restore the 
previous sync offset after sync is broken. 

See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pSyncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function gets the settings of a particular sync group. To get for the statuses of 
the sync group, including whether the sync group is enabled, use the 
GetSyncGroupStatus function. 

◆AddAxisToSyncGroup() 

WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
int 
int 
groupId, 
axis, 
unsigned char isMaster 
Add another axis to an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to add to the 
sync group. 
[in] 
isMaster 0: The axis is a slave 
axis; 1: The axis is a 
master axis. 

Remarks 

This function adds an axis to a sync group. A slave axis or a master axis can be 
added, depending on the value of the isMaster argument. 

Adding a master axis will remove any existing master axis from the sync group. A 
sync group may only have one master axis at any time. 

If a master axis is added, but the axis is already one of the slave axes in the sync 
group, the axis will become the master axis and no longer be a slave axis. 

If a slave axis is added, but the axis is already the master axis of the sync group, 
the axis will become a slave axis and the sync group will have no master axis (until 
a new master axis is added). 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 


◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus() 

WMX3APIFUNC 
GetSyncGroupStatu 
s ( 
) 
WMX3APIFUNC 
GetSyncGroupStatu 
s ( 
) 
int 
groupId, 
SyncGroupStatus * pStatus 
Read the current status of the specified sync group. 
Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pStatus A pointer to an object of 
the class 
SyncGroupStatus that 
contains the sync group 
status. 
Remarks 
This function gets the current status of a sync group. 

◆ClearSyncGroupError() 

WMX3APIFU 
NC 
ClearSyncGr 
oupError ( int groupId ) 
WMX3APIFU 
NC 
ClearSyncGr 
oupError ( int groupId ) 
Clear all sync group errors of the specified sync group. 
Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
Remarks 

This function clears the catchUpError, syncError, axisError, and interruptError 
errors of the specified sync group to 0. 

 

Velocity Class Reference 

This class contains velocity command functions. 

Classes 

class TimeCommand 
This class contains data for a time-based 
command. More... 

class TimedVelCommand 
This class contains data for a timed 
velocity command. More... 

class TriggerTimedVelCommand 
This class contains data for a triggered 
timed velocity command. More... 

class TriggerVelCommand 
This class contains data for a triggered 
velocity command. More... 

class VelCommand 
This class contains data for a velocity 
command. More... 

Public Member Functions 

Velocity (CoreMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC StartVel (VelCommand *pVelCommand) 
Start a velocity command. More... 
WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand) 
Start a timed velocity command. More... 

WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand) 

Start a triggered velocity command. 


More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand) 

Start a triggered timed velocity 
command. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
double maxTrqLimit) 

Start a velocity command and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a timed velocity command and set 
the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit) 

Start a triggered velocity command and 
set the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a triggered timed velocity command 
and set the maximum torque limit. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 


double maxTrqLimit, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand) 

Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand) 

Start timed velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand) 

Start triggered velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand) 

Start triggered timed velocity commands 
for multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered velocity commands with 


multiple trigger events for multiple axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
with multiple trigger events for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, double 
*pMaxTrqLimit) 
Start velocity commands for multiple 
axes and set the maximum torque limits 
of the commanded axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit) 
Start timed velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand, 
double *pMaxTrqLimit) 
Start triggered velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand, double 
*pMaxTrqLimit) 

Start triggered timed velocity commands 


for multiple axes and set the maximum 
torque limits of the commanded axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered velocity commands for 
multiple axes with multiple trigger events 
and set the maximum torque limits of the 
commanded axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More... 

WMX3APIFUNC GetMaxMotorSpeed (int axis, double 
*pSpeed) 
Get the maximum motor speed of an 
axis. More... 
WMX3APIFUNC OverrideVel (VelCommand 
*pVelCommand) 
Set an override velocity for a single axis 
that is currently executing a velocity 
command. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, VelCommand 
*pVelCommand) 
Set override velocities for multiple axes 


that are currently executing velocity 
commands. More... 

WMX3APIFUNC StartPosToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More... 

WMX3APIFUNC StartTrqToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. The trigger conditions 
can have multiple trigger events. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆StartVel() [1/24]
WMX3APIFU 
NC StartVel ( VelCommand pVelCommand ) 
Start a velocity command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 

This function will command the specified axis to accelerate or decelerate to the 
specified velocity, and then continue moving at the specified velocity. The target 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration (or acceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, 
TimeAccAdvancedS, or ParabolicVelocity profile types) is set to 0, the axis will 
change to the target velocity in one cycle, ignoring the specified acceleration or 
deceleration. This special method of specifying the acceleration is only available for 
this function, and not for other functions that take an acceleration argument. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. If the axis is stopped using the 
Stop API function, it will stop using the deceleration that was specified when calling 
this function. This value must be positive or 0. 

If the deceleration (or deceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, or 
TimeAccAdvancedS profile types) is set to 0, the axis will stop in one cycle when 
the Stop API function is called. This special method of specifying the deceleration is 
only available for this function, and not for other functions that take a deceleration 
argument. 

An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 



◆StartVel() [2/24]
WMX3APIFU 
NC StartVe( TimedVelCom pTimedVelComma )
l 

Start a timed velocity command. 

Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the TimedVelCommand 
class that contains the 
timed velocity command 
parameters. 

Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity for the specified amount of time, 
and then decelerate to a stop. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration time is set to 0, the axis will change to the target velocity in one 
cycle, ignoring the specified acceleration or deceleration. This special method of 
specifying the acceleration is only available for this function, and not for other 
functions that take an acceleration argument. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. This includes the deceleration 
rate of the axis when the axis stops after the run time elapses. Also, if the axis is 
stopped using the Stop API function, it will stop using the deceleration that was 
specified when calling this function. This value must be positive or 0. 


If the deceleration time is set to 0, the axis will stop in one cycle when the run time 

elapses, or when the Stop API function is called. This special method of specifying 
the deceleration is only available for this function, and not for other functions that 
take a deceleration argument. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 


TimeAccTrapezoidal 
TimeAccSCurve 
TimeAccJerkRatio 
TimeAccParabolic 
TimeAccSin 
TimeAccAdvancedS 


An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

◆StartVel() [3/24]
WMX3APIFU 
NC StartVel ( TriggerVelCom pVelCommand ) 
Start a triggered velocity command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
triggered velocity 
command parameters. 
Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 


This function will command the specified axis to accelerate or decelerate to the 
specified velocity, and then continue moving at the specified velocity. The target 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration (or acceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, 
TimeAccAdvancedS, or ParabolicVelocity profile types) is set to 0, the axis will 
change to the target velocity in one cycle, ignoring the specified acceleration or 
deceleration. This special method of specifying the acceleration is only available for 
this function, and not for other functions that take an acceleration argument. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. If the axis is stopped using the 
Stop API function, it will stop using the deceleration that was specified when calling 
this function. This value must be positive or 0. 

If the deceleration (or deceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, or 
TimeAccAdvancedS profile types) is set to 0, the axis will stop in one cycle when 
the Stop API function is called. This special method of specifying the deceleration is 
only available for this function, and not for other functions that take a deceleration 
argument. 

An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Trigger Motion 

◆StartVel() [4/24]
WMX3APIFU 

NC StartVeNC StartVe
l 

( 
TriggerTimed pTimedVelComma ) 
Start a triggered timed velocity command. 

Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the 
TriggerTimedVelComm 
and class that contains 
the triggered timed 
velocity command 
parameters. 
Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity for the specified amount of time, 
and then decelerate to a stop. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration time is set to 0, the axis will change to the target velocity in one 
cycle, ignoring the specified acceleration or deceleration. This special method of 
specifying the acceleration is only available for this function, and not for other 
functions that take an acceleration argument. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. This includes the deceleration 
rate of the axis when the axis stops after the run time elapses. Also, if the axis is 
stopped using the Stop API function, it will stop using the deceleration that was 
specified when calling this function. This value must be positive or 0. 

If the deceleration time is set to 0, the axis will stop in one cycle when the run time 
elapses, or when the Stop API function is called. This special method of specifying 
the deceleration is only available for this function, and not for other functions that 


take a deceleration argument. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 


TimeAccTrapezoidal 
TimeAccSCurve 
TimeAccJerkRatio 
TimeAccParabolic 
TimeAccSin 
TimeAccAdvancedS 


An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Trigger Motion 

◆StartVel() [5/24]
WMX3APIFUNC 
StartVel ( VelCommand * pVelCommand, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered velocity command with multiple trigger events. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 


events. 

Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 

This function will command the specified axis to accelerate or decelerate to the 
specified velocity, and then continue moving at the specified velocity. The target 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration (or acceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, 
TimeAccAdvancedS, or ParabolicVelocity profile types) is set to 0, the axis will 
change to the target velocity in one cycle, ignoring the specified acceleration or 
deceleration. This special method of specifying the acceleration is only available for 
this function, and not for other functions that take an acceleration argument. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. If the axis is stopped using the 
Stop API function, it will stop using the deceleration that was specified when calling 
this function. This value must be positive or 0. 

If the deceleration (or deceleration time for the TimeAccTrapezoidal, 
TimeAccSCurve, TimeAccJerkRatio, TimeAccParabolic, TimeAccSin, or 
TimeAccAdvancedS profile types) is set to 0, the axis will stop in one cycle when 
the Stop API function is called. This special method of specifying the deceleration is 
only available for this function, and not for other functions that take a deceleration 
argument. 

An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 



pTriggerEvents pTriggerEvents 
◆StartVel() [6/24]
WMX3APIFUNC 
StartVel ( 
) 
imedVelCommand,
TimedVelCommand pT
TriggerEvents * 
Start a triggered timed velocity command with multiple trigger events. 

Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the TimedVelCommand 
class that contains the 
timed velocity command 
parameters. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function can only command axes in the Velocity command mode. For 
additional information, see SetAxisCommandMode. 

This function will command the specified axis to accelerate to the specified velocity, 
and then continue moving at the specified velocity for the specified amount of time, 
and then decelerate to a stop. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of the motion command. This value must be positive or 0. 

If the acceleration time is set to 0, the axis will change to the target velocity in one 
cycle, ignoring the specified acceleration or deceleration. This special method of 
specifying the acceleration is only available for this function, and not for other 
functions that take an acceleration argument. 


The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of the motion command. This includes the deceleration 
rate of the axis when the axis stops after the run time elapses. Also, if the axis is 
stopped using the Stop API function, it will stop using the deceleration that was 
specified when calling this function. This value must be positive or 0. 

If the deceleration time is set to 0, the axis will stop in one cycle when the run time 
elapses, or when the Stop API function is called. This special method of specifying 
the deceleration is only available for this function, and not for other functions that 
take a deceleration argument. 

Only the following ProfileTypes are supported by this function. Specifying any other 
ProfileType will cause this function to return an error. 


TimeAccTrapezoidal 
TimeAccSCurve 
TimeAccJerkRatio 
TimeAccParabolic 
TimeAccSin 
TimeAccAdvancedS 


An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 

◆ 
StartVel() [7/24] 



WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
VelCommand * pVelCommand, 
double maxTrqLimit 
Start a velocity command and set the maximum torque limit. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆StartVel() [8/24]

WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
TimedVelCommand pTimedVelCommand, 
double maxTrqLimit 
Start a timed velocity command and set the maximum torque limit. 

Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the TimedVelCommand 
class that contains the 
timed velocity command 
parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆StartVel() [9/24]

WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
TriggerVelCommand pVelCommand, 
double maxTrqLimit 
Start a triggered velocity command and set the maximum torque limit. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
triggered velocity 
command parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆StartVel() [10/24]

WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
TriggerTimedVelCom pTimedVelCommand, 
double maxTrqLimit 
Start a triggered timed velocity command and set the maximum torque limit. 

Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the 
TriggerTimedVelComm 
and class that contains 
the triggered timed 
velocity command 
parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆StartVel() [11/24]

pTriggerEvents pTriggerEvents 
WMX3APIFUNC 
StartVel ( 
) 
VelCommand * pVelCommand, 
double maxTrqLimit, 
TriggerEvents * 
Start a triggered velocity command with multiple trigger events and set the 

maximum torque limit. 
Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆StartVel() [12/24]

WMX3APIFUNC WMX3APIFUNC 
TimedVelCommand pTimedVelCommand, 
double maxTrqLimit, 
TriggerEvents * pTriggerEvents 
StartVel ( 
) 
Start a triggered timed velocity command with multiple trigger events and set the 

maximum torque limit. 
Parameters 
[in] 
pTimedVelCommand A pointer to an object of 
the TimedVelCommand 
class that contains the 
timed velocity command 
parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is an overloaded function of StartVel that also sets the Max Trq Limit 
parameter. The Max Trq Limit will be fixed to the specified value while this velocity 
command executes. After the velocity command is stopped or overridden, the Max 
Trq Limit will remain at the specified value until modified by another function. 

◆ 
StartVel() [13/24] 



WMX3APIFUNC 
StartVel ( 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
VelCommand * pVelCommand 
) 
Start velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 

◆StartVel() [14/24]

imedVelCommand imedVelCommand 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
TimedVelCommand pT) 
Start timed velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedVelCommand A pointer to an array of 
objects of the 
TimedVelCommand 
class that contain the 
parameters of the timed 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 

◆StartVel() [15/24]

WMX3APIFUNC 
StartVel ( 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
TriggerVelCommand pVelCommand 
) 
Start triggered velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
TriggerVelCommand 
class that contain the 
parameters of the 
triggered velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartVel() [16/24]

WMX3APIFUNC 
StartVel ( 
WMX3APIFUNC 
StartVel ( 
unsigned int 
numCommands, 
TriggerTimedVelCom pTimedVelCommand 
) 
Start triggered timed velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedVelCommand A pointer to an array of 
objects of the 
TriggerTimedVelComm 
and class that contain 
the parameters of the 
triggered timed velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartVel() [17/24]

◆StartVel() [17/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
VelCommand * pVelCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered velocity commands with multiple trigger events for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for all axes when the specified multi-event trigger condition is 



pTriggerEvents 
imedVelCommand, 
satisfied. 
See also 
Trigger Events 
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
◆ 
StartVel() [18/24] 


TimedVelCommand pT
TriggerEvents * 
) 
pTriggerEvents 
Start triggered timed velocity commands with multiple trigger events for multiple 
axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedVelCommand A pointer to an array of 
objects of the 
TimedVelCommand 
class that contain the 
parameters of the timed 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 


Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆StartVel() [19/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
VelCommand * pVelCommand, 
double * pMaxTrqLimit 
) 
Start velocity commands for multiple axes and set the maximum torque limits of the 
commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 


must equal 
numCommands. 

[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 
same index. 

Remarks 

This function executes the StartVel API function for multiple axes. 

If the specified arguments are invalid for any of the commanded axes, the motion 
will be canceled for all axes and the API function will return an error. 

◆StartVel() [20/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
TimedVelCommand pTimedVelCommand, 
double * pMaxTrqLimit 
) 
Start timed velocity commands for multiple axes and set the maximum torque limits 
of the commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedVelCommand A pointer to an array of 
objects of the 
TimedVelCommand 


class that contain the 
parameters of the timed 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 

[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 
same index. 

Remarks 

This function executes the StartVel API function for multiple axes. 

If the specified arguments are invalid for any of the commanded axes, the motion 
will be canceled for all axes and the API function will return an error. 

◆StartVel() [21/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
TriggerVelCommand pVelCommand, 
double * pMaxTrqLimit 
) 
Start triggered velocity commands for multiple axes and set the maximum torque 
limits of the commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 


single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
TriggerVelCommand 
class that contain the 
parameters of the 
triggered velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 
same index. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartVel() [22/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
TriggerTimedVelCom pTimedVelCommand, 

double * pMaxTrqLimit 
) 
double * pMaxTrqLimit 
) 
Start triggered timed velocity commands for multiple axes and set the maximum 
torque limits of the commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedVelCommand A pointer to an array of 
objects of the 
TriggerTimedVelComm 
and class that contain 
the parameters of the 
triggered timed velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 
same index. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 
The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 



◆StartVel() [23/24]
See also 
Trigger Motion 
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
VelCommand * pVelCommand, 
double * pMaxTrqLimit, 
TriggerEvents * pTriggerEvents 
) 
Start triggered velocity commands for multiple axes with multiple trigger events and 
set the maximum torque limits of the commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 


same index. 
[in[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartVel API function for multiple axes. 

If the specified arguments are invalid for any of the commanded axes, the motion 
will be canceled for all axes and the API function will return an error. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆StartVel() [24/24]
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
TimedVelCommand pTimedVelCommand, 
double * pMaxTrqLimit, 
TriggerEvents * pTriggerEvents 
) 
Start triggered timed velocity commands for multiple axes with multiple trigger 
events and set the maximum torque limits of the commanded axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 


single axis. 
[in[in] 
pTimedVelCommand A pointer to an array of 
objects of the 

TimedVelCommand 

class that contain the 
parameters of the timed 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 

[in] 
pMaxTrqLimit A pointer to an array of 
maximum torque limits to 
apply. Each maximum 
torque limit will be 
applied to the axis of the 
velocity command of the 
same index. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartVel API function for multiple axes. 

If the specified arguments are invalid for any of the commanded axes, the motion 
will be canceled for all axes and the API function will return an error. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆Stop() [1/2]

WMX3APIFU 
NC Stop ( 
WMX3APIFU 
NC Stop ( 
int axis 
) 
Stop the motion of an axis executing a velocity command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis executing a velocity command. 

This function will only stop axes running in Velocity command mode. To stop axes 
running in Position command mode, use the Stop function. To stop axes running in 
Torque command mode, use the StopTrq function. 

If the commanded axis is in Idle state, this function will return no error. 

If the commanded axis is executing a velocity command but the deceleration cannot 
be obtained, the axis will be stopped using the Quick Stop Dec parameter as the 
deceleration, as if the ExecQuickStop function was called. This might occur if this 
function is called during the first cycle of processing a new velocity command or 
override velocity command. 

◆Stop() [2/2]

WMX3APIFU WMX3APIFU 
NC Stop ( 
AxisSelection pAxisSelection ) 
Stop the motion of multiple axes executing velocity commands. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the Stop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecQuickStop() [1/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
int axis 
) 
Stop the motion of an axis executing a velocity command using the quick stop 
deceleration system parameter. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis executing a velocity command. 
This function will only stop axes running in Velocity command mode. To stop axes 

running in Position command mode, use the ExecQuickStop function. To stop 
axes running in Torque command mode, use the StopTrq function. 
If the commanded axis is in Idle state, this function will return no error. 
This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecQuickStop() [2/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
AxisSelection pAxisSelection ) 
Stop the motion of multiple axes executing velocity commands using the quick stop 
deceleration system parameter. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks 

This function is identical to the Stop function, except the deceleration rate is set so 
that the axis stops in the specified time, and the motion profile is trapezoidal. 
If the commanded axis is in Idle state, this function will return no error. 

◆ExecTimedStop() [2/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
AxisSelection * pAxisSelection, 
double timeMilliseconds 
Stop multiple axes that are currently in motion in the specified amount of time using 

a trapezoidal profile. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 
Remarks 

This function executes the ExecTimedStop function for multiple axes. One stop 
time is specified for all axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [3/3]
WMX3APIFUNC 
ExecTimedStop ( unsigned int numCommands, 
TimeCommand * pTimeCommand 
) 
Stop multiple axes that are currently in motion in the specified amounts of time 

using a trapezoidal profile. 
Parameters 
[in] 
numCommands The number of stop 
motions. Each stop 
motion commands a 
single axis. 
[in] 
pTimeCommand A pointer to an array of 
objects of the 
TimeCommand class 
that contain the 
parameters of the 
motion. The number of 
objects in the array must 
be equal to 
numCommands. The 
timeMilliseconds 
values specify the time 
in milliseconds to stop 
the axis in. 

Remarks 

This function executes the ExecTimedStop function for multiple axes. A separate 
stop time is specified for each axis. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ 
SetMaxMotorSpeed() 

WMX3APIFUNC 
SetMaxMotorSpeed ( int 
WMX3APIFUNC 
SetMaxMotorSpeed ( int 
axis, 
double speed 
) 
Set the maximum motor speed of an axis. 

Parameters 
[in] 
axis The axis to set the 
maximum motor speed 
of. 
[in] 
speed The maximum motor 
speed. 
Remarks 

This function sets the maximum motor speed of an axis. The speed of the axis in 
either direction during all motions will be limited to this value. 

See the discussion under Max Motor Speed for additional information regarding the 
parameter set by this function. 

◆GetMaxMotorSpeed() 

WMX3APIFUNC 
GetMaxMotorSpeed ( int 
WMX3APIFUNC 
GetMaxMotorSpeed ( int 
axis, 
double * pSpeed 
) 
Get the maximum motor speed of an axis. 

Parameters 
[in] 
axis The axis to get the 
maximum motor speed 
of. 
[out] 
pSpeed A pointer to a double that 
will contain the 
maximum motor speed. 
Remarks 

This function gets the maximum motor speed of an axis. 

See the discussion under Max Motor Speed for additional information regarding the 
parameter set by this function. 

◆OverrideVel() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideVel ( 
VelCommand pVelCommand ) 
Set an override velocity for a single axis that is currently executing a velocity 
command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
Remarks 

This function will override just the velocity of the axis. The axis will retain the profile 
type, acceleration, deceleration, jerk acceleration, jerk deceleration, and all other 
motion parameters. 

◆OverrideVel() [2/2]

pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the OverrideVel API function for multiple axes. 

◆StartPosToVel() [1/4]

WMX3APIFU 
NC 
StartPosToVe 
l ( 
WMX3APIFU 
NC 
StartPosToVe 
l ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 
Remarks 

This function will override a position command with a velocity command when the 
trigger condition is satisfied. The axis command mode will automatically change 
from Position mode to Velocity mode. 

Like the StartVel function, the acceleration and deceleration (or acceleration time 
and deceleration time for certain profile types) can be set to 0 for infinite 
acceleration and deceleration. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartPosToVel() [2/4]

WMX3APIFUNC 
StartPosToVel ( 
) 
WMX3APIFUNC 
StartPosToVel ( 
) 
unsigned int numCommands, 
TriggerVelCommand pTriggerVelCommand 
Start triggered velocity commands for multiple axes that are currently executing 

position commands. 
Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTriggerVelCommand A pointer to an array of 
objects of the 
TriggerVelCommand 
class that contain the 
parameters of the 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 
This function executes the StartPosToVel API function for multiple axes. 

◆StartPosToVel() [3/4]

pVelCommand, pVelCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartPosToVel ( 
) 
VelCommand * 
TriggerEvents * 
Start a triggered velocity command for an axis that is currently executing a position 
command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the 
parameters of the 
velocity command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a position command with a velocity command when the 
multiple event trigger condition is satisfied. The axis command mode will 
automatically change from Position mode to Velocity mode. 

Like the StartVel function, the acceleration and deceleration (or acceleration time 
and deceleration time for certain profile types) can be set to 0 for infinite 
acceleration and deceleration. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 


◆StartPosToVel() [4/4]
WMX3APIFUNC 
StartPosToVel ( unsigned int numCommands, 
VelCommand * pVelCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered velocity commands for multiple axes that are currently executing 
position commands. The trigger conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartPosToVel API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartTrqToVel() [1/4]
WMX3APIFU 
NC 
StartTrqToVel ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a torque 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 

Remarks 

This function will override a torque command with a velocity command when the 
trigger condition is satisfied. The axis command mode will automatically change 
from Torque mode to Velocity mode. 

Like the StartVel function, the acceleration and deceleration (or acceleration time 
and deceleration time for certain profile types) can be set to 0 for infinite 
acceleration and deceleration. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToVel() [2/4]

WMX3APIFUNC 
StartTrqToVel ( 
) 
WMX3APIFUNC 
StartTrqToVel ( 
) 
unsigned int numCommands, 
TriggerVelCommand pTriggerVelCommand 
Start triggered velocity commands for multiple axes that are currently executing 

torque commands. 
Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pTriggerVelCommand A pointer to an array of 
objects of the 
TriggerVelCommand 
class that contain the 
parameters of the 
velocity commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 
This function executes the StartTrqToVel API function for multiple axes. 

◆ 
StartTrqToVel() [3/4] 



pVelCommand, pVelCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartTrqToVel ( 
) 
VelCommand * 
TriggerEvents * 
Start a triggered velocity command for an axis that is currently executing a torque 
command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the 
parameters of the 
velocity command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a torque command with a velocity command when the 
multiple event trigger condition is satisfied. The axis command mode will 
automatically change from Torque mode to Velocity mode. 

Like the StartVel function, the acceleration and deceleration (or acceleration time 
and deceleration time for certain profile types) can be set to 0 for infinite 
acceleration and deceleration. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 


◆ 
StartTrqToVel() [4/4] 


WMX3APIFUNC 
StartTrqToVel ( 
) 
unsigned int numCommands, 
VelCommand * pVelCommand, 
TriggerEvents * pTriggerEvents 
Start triggered velocity commands for multiple axes that are currently executing 
torque commands. The trigger conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartTrqToVel API function for multiple axes. All 
commanded axes share the same trigger events. 


 


Torque Class Reference 

This class contains torque command functions. 

Classes 

class RampRateTrqCommand 
This class contains data for a ramp rate 
torque command. More... 

class RampTimeTrqCommand 
This class contains data for a ramp time 
torque command. More... 

class TriggerRampRateTrqCommand 
This class contains data for a triggered 
ramp rate torque command. More... 

class TriggerRampTimeTrqCommand 
This class contains data for a triggered 
ramp time torque command. More... 

class TriggerTrqCommand 
This class contains data for a triggered 
torque command. More... 

class TrqCommand 
This class contains data for a torque 
command. More... 

Public Member Functions 

Torque (CoreMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC SetMaxTrqLimit (int axis, double torque) 
Set the maximum torque limit of an axis. 
More... 

WMX3APIFUNC GetMaxTrqLimit (int axis, double 
*pTorque) 


Get the maximum torque limit of an axis. 

More... 

WMX3APIFUNC SetPositiveTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC GetPositiveTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC SetNegativeTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC GetNegativeTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a torque command. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 

*pTrqCommand) 

Start a triggered torque command. 

More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered torque command with 
multiple trigger events. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 

TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand) 


Start triggered torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed) 

Start a torque command and set the 
maximum motor speed. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events and set the 
maximum motor speed. More... 
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, double 
*pMaxMotorSpeed) 
Start torque commands for multiple axes 
and set the maximum motor speeds of 
the commanded axes. More... 
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand, 
double *pMaxMotorSpeed) 
Start triggered torque commands for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 


WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes 
and set the maximum motor speeds of 
the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime) 
Start a torque command in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime) 
Start a triggered torque command in 
which the torque is changed over time. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 

RampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start torque commands in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 


TriggerRampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start triggered torque commands in 
which the torque is changed over time 
for multiple axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed) 
Start a torque command in which the 
torque is changed over time and set the 
maximum motor speed. More... 

WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed over time 
and set the maximum motor speed. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time and set the 


maximum motor speed. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 

Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand) 

Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 


torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed) 
Start a torque command in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate and set the maximum 
motor speed. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 
RampRateTrqCommand 
*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 
Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 


numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes and set 
the maximum motor speeds of the 
commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 
RampRateTrqCommand 
*pRampRateTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed at a specified rate for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StopTrq (int axis) 
Stop a torque command. More... 

WMX3APIFUNC StopTrq (AxisSelection *pAxisSelection) 

Stop torque commands for multiple axes. 

More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartPosToRampTimeTrq 
(TrqCommand *pTrqCommand, unsigned 
int rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
position command. More... 

WMX3APIFUNC StartPosToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing position commands. More... 

WMX3APIFUNC StartPosToRampTimeTrq 
(TrqCommand *pTrqCommand, unsigned 


int rampCycleTime, TriggerEvents 
*pTriggerEvents) 

Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
position command. More... 

WMX3APIFUNC StartPosToRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing position commands. The 
trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartPosToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a position command. More... 

WMX3APIFUNC StartPosToRampRateTrq (unsigned int 
numCommands, 
TriggerRampRateTrqCommand 
*pTriggerRampRateTrqCommand) 
Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing position commands. 
More... 

WMX3APIFUNC StartPosToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 


TriggerEvents *pTriggerEvents) 

Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a position command. More... 

WMX3APIFUNC StartPosToRampRateTrq (unsigned int 
numCommands, 
RampRateTrqCommand 
*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing position commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More... 


WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. The trigger 
conditions can have multiple trigger 
events. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. More... 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, 


TriggerEvents *pTriggerEvents) 

Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. The 
trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToRampRateTrq (unsigned int 
numCommands, 
TriggerRampRateTrqCommand 
*pTriggerRampRateTrqCommand) 
Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 


Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

Public Attributes 

CoreMotion * cmApi 

Member Function Documentation 

◆SetMaxTrqLimit() 

WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit() 

WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the positive direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the positive direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit() 

WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the positive 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the negative direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the negative direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the negative direction. 

See the discussion under Negative Trq Limit for additional information regarding 
the parameter set by this function. 

◆GetNegativeTrqLimit() 

WMX3APIFUNC 
GetNegativeTrqLimit ( int 
WMX3APIFUNC 
GetNegativeTrqLimit ( int 
axis, 
double * pTorque 
) 
Get the maximum torque limit in the negative direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the negative 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the negative direction. 

See the discussion under Negative Trq Limit for additional information regarding 
the parameter obtained by this function. 

◆StartTrq() [1/12]

WMX3APIFU 
NC StartTrq ( 
WMX3APIFU 
NC StartTrq ( TrqCommand pTrqCommand ) 
Start a torque command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 

Remarks 

This function will start a torque command. The OperationState of the axis will 
become Trq. 

While executing a torque command, the axis will apply a constant torque in the 
specified direction. Depending on the load on the axis, the axis position may move 
during a torque command. 

This function can only command axes in the Torque command mode. For additional 
information, see SetAxisCommandMode. 

In order to use this function, the axis must be configured to receive cyclic torque 
commands. The trqCommandSupport status returned by GetStatus will contain 
TRUE if the axis is configured to receive cyclic torque commands. Even if the axis is 
configured to receive cyclic torque commands, this function will not work if the axis 
servo does not support torque commands. 

The torque argument has units of %. 

◆StartTrq() [2/12]
WMX3APIFU 
NC StartTrq ( TriggerTrqCo pTrqCommand ) 

Start a triggered torque command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 

Remarks 

This function will start a torque command. The OperationState of the axis will 
become Trq. 

While executing a torque command, the axis will apply a constant torque in the 
specified direction. Depending on the load on the axis, the axis position may move 
during a torque command. 

This function can only command axes in the Torque command mode. For additional 
information, see SetAxisCommandMode. 

In order to use this function, the axis must be configured to receive cyclic torque 
commands. The trqCommandSupport status returned by GetStatus will contain 
TRUE if the axis is configured to receive cyclic torque commands. Even if the axis is 
configured to receive cyclic torque commands, this function will not work if the axis 
servo does not support torque commands. 

The torque argument has units of %. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Trigger Motion 

◆ 
StartTrq() [3/12] 




WMX3APIFUNC 
StartTrq ( pTrqCommand, 
pTriggerEvents 
) 
WMX3APIFUNC 
StartTrq ( pTrqCommand, 
pTriggerEvents 
) 
TrqCommand * 
TriggerEvents * 
Start a triggered torque command with multiple trigger events. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will start a torque command. The OperationState of the axis will 
become Trq. 

While executing a torque command, the axis will apply a constant torque in the 
specified direction. Depending on the load on the axis, the axis position may move 
during a torque command. 

This function can only command axes in the Torque command mode. For additional 
information, see SetAxisCommandMode. 

In order to use this function, the axis must be configured to receive cyclic torque 
commands. The trqCommandSupport status returned by GetStatus will contain 
TRUE if the axis is configured to receive cyclic torque commands. Even if the axis is 
configured to receive cyclic torque commands, this function will not work if the axis 
servo does not support torque commands. 

The torque argument has units of %. 

The motion will begin when the specified multi-event trigger condition is satisfied. 



◆StartTrq() [4/12]
See also 
Trigger Events 
WMX3APIFUNC 
StartTrq ( unsigned int numCommands, 
TrqCommand * pTrqCommand 
) 
Start torque commands for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
Remarks 

This function executes the StartTrq API function for multiple axes. 

◆StartTrq() [5/12]

WMX3APIFUNC 
StartTrq ( 
WMX3APIFUNC 
StartTrq ( 
unsigned int numCommands, 
TriggerTrqCommand pTrqCommand 
) 
Start triggered torque commands for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TriggerTrqCommand 
class that contain the 
parameters of the 
triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartTrq API function for multiple axes. 
The motion will begin for each axis when the specified trigger condition for that axis 

is satisfied. 

See also 

Trigger Motion 

◆StartTrq() [6/12]

WMX3APIFUNC 
StartTrq ( 
WMX3APIFUNC 
StartTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands with multiple trigger events for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 


◆StartTrq() [7/12]
WMX3APIFUNC 
StartTrq ( TrqCommand * pTrqCommand, 
double maxMotorSpeed 
) 
Start a torque command and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 

Remarks 

This function is an overloaded function of StartTrq that also sets the Max Motor 
Speed parameter. The Max Motor Speed will be fixed to the specified value while 
this torque command executes. After the torque command is stopped or overridden, 
the Max Motor Speed will remain at the specified value until modified by another 
function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartTrq() [8/12]

WMX3APIFUNC 
StartTrq ( 
) 
WMX3APIFUNC 
StartTrq ( 
) 
TriggerTrqCommand pTrqCommand, 
double maxMotorSpeed 
Start a triggered torque command and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 
Remarks 

This function is an overloaded function of StartTrq that also sets the Max Motor 
Speed parameter. The Max Motor Speed will be fixed to the specified value while 
this torque command executes. After the torque command is stopped or overridden, 
the Max Motor Speed will remain at the specified value until modified by another 
function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartTrq() [9/12]

WMX3APIFUNC 
StartTrq ( 
) 
TrqCommand * 
double 
TriggerEvents * 
pTrqCommand, 
maxMotorSpeed, 
pTriggerEvents 
Start a triggered torque command with multiple trigger events and set the maximum 

motor speed. 
Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is an overloaded function of StartTrq that also sets the Max Motor 
Speed parameter. The Max Motor Speed will be fixed to the specified value while 
this torque command executes. After the torque command is stopped or overridden, 
the Max Motor Speed will remain at the specified value until modified by another 
function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartTrq() [10/12]

WMX3APIFUNC 
StartTrq ( 
) 
WMX3APIFUNC 
StartTrq ( 
) 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
double * pMaxMotorSpeed 
Start torque commands for multiple axes and set the maximum motor speeds of the 
commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 
Remarks 

This function executes the StartTrq API function for multiple axes. 

◆StartTrq() [11/12]

WMX3APIFUNC 
StartTrq ( 
) 
WMX3APIFUNC 
StartTrq ( 
) 
unsigned int numCommands, 
TriggerTrqCommand pTrqCommand, 
double * pMaxMotorSpeed 
Start triggered torque commands for multiple axes and set the maximum motor 
speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TriggerTrqCommand 
class that contain the 
parameters of the 
triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 
Remarks 

This function executes the StartTrq API function for multiple axes. 



The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartTrq() [12/12]
WMX3APIFUNC 
StartTrq ( unsigned int numCommands, 
TrqCommand * pTrqCommand, 
double * pMaxMotorSpeed, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands with multiple trigger events for multiple axes and 
set the maximum motor speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 


applied to the axis of the 
torque command of the 
same index. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆ 
StartRampTimeTrq() [1/12] 



WMX3APIFUNC 
StartRampTimeTrq ( 
) 
WMX3APIFUNC 
StartRampTimeTrq ( 
) 
TrqCommand * pTrqCommand, 
unsigned int rampCycleTime 
Start a torque command in which the torque is changed over time. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

The torque will change at a constant rate over the specified time. This rate is 
dependent on the target torque and the current torque command of the axis. This 
function can command an axis that is already executing a torque command. Other 
torque commands can override this torque command, even while the torque is still 
changing. 

◆StartRampTimeTrq() [2/12]

WMX3APIFUNC 
StartRampTimeTrq ( 
WMX3APIFUNC 
StartRampTimeTrq ( TriggerTrqCommand pTrqCommand, 
unsigned int rampCycleTime 
) 
Start a triggered torque command in which the torque is changed over time. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

The torque will change at a constant rate over the specified time. This rate is 
dependent on the target torque and the current torque command of the axis. This 
function can command an axis that is already executing a torque command. Other 
torque commands can override this torque command, even while the torque is still 
changing. 

The motion will begin when the specified trigger condition is satisfied. 



◆StartRampTimeTrq() [3/12]
See also 
Trigger Motion 
WMX3APIFUNC 
StartRampTimeTrq ( TrqCommand * pTrqCommand, 
unsigned int rampCycleTime, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command with multiple trigger events in which the torque is 
changed over time. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will be changed over a number of communication cycles. 


The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

The torque will change at a constant rate over the specified time. This rate is 
dependent on the target torque and the current torque command of the axis. This 
function can command an axis that is already executing a torque command. Other 
torque commands can override this torque command, even while the torque is still 
changing. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 

◆ 
StartRampTimeTrq() [4/12] 



WMX3APIFUNC 
StartRampTimeTrq ( 
) 
WMX3APIFUNC 
StartRampTimeTrq ( 
) 
unsigned int numCommands, 
RampTimeTrqCommpRampTimeTrqComma 
Start torque commands in which the torque is changed over time for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 

objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartRampTimeTrq API function for multiple axes. 

◆StartRampTimeTrq() [5/12]

WMX3APIFUNC 
StartRampTimeTrq ( 
) 
WMX3APIFUNC 
StartRampTimeTrq ( 
) 
unsigned int numCommands, 
TriggerRampTimeTr pRampTimeTrqComma 
Start triggered torque commands in which the torque is changed over time for 

multiple axes. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 

objects of the 

TriggerRampTimeTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartRampTimeTrq API function for multiple axes. 

The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartRampTimeTrq() [6/12]
WMX3APIFUNC 

StartRampTimeTrq StartRampTimeTrq 
( 
numCommands, 
TriggerEvents * pTriggerEvents 
) 
unsigned int 
RampTimeTrqCommpRampTimeTrqComma 
Start triggered torque commands with multiple trigger events in which the torque is 
changed over time for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 
objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartRampTimeTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 


◆StartRampTimeTrq() [7/12]
WMX3APIFUNC 
StartRampTimeTrq ( TrqCommand * pTrqCommand, 
unsigned int rampCycleTime, 
double maxMotorSpeed 
) 
Start a torque command in which the torque is changed over time and set the 
maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 

Remarks 

This function is an overloaded function of StartRampTimeTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 
overridden, the Max Motor Speed will remain at the specified value until modified 
by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampTimeTrq() [8/12]

◆StartRampTimeTrq() [8/12]
WMX3APIFUNC 
StartRampTimeTrq ( TriggerTrqCommand pTrqCommand, 
unsigned int rampCycleTime, 
double maxMotorSpeed 
) 
Start a triggered torque command in which the torque is changed over time and set 
the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 

Remarks 

This function is an overloaded function of StartRampTimeTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 
overridden, the Max Motor Speed will remain at the specified value until modified 
by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampTimeTrq() 

◆StartRampTimeTrq() [9/12]
WMX3APIFUNC 
StartRampTimeTrq ( TrqCommand * pTrqCommand, 
unsigned int rampCycleTime, 
double 
maxMotorSpeed, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command with multiple trigger events in which the torque is 
changed over time and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is an overloaded function of StartRampTimeTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 

overridden, the Max Motor Speed will remain at the specified value until modified 



by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampTimeTrq() [10/12]

WMX3APIFUNC 
StartRampTimeTrq ( 
) 
WMX3APIFUNC 
StartRampTimeTrq ( 
) 
unsigned int numCommands, 
RampTimeTrqCommpRampTimeTrqComma 
double * pMaxMotorSpeed 
Start torque commands in which the torque is changed over time for multiple axes 
and set the maximum motor speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 
objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 

Remarks 

This function executes the StartRampTimeTrq API function for multiple axes. 


◆ 
StartRampTimeTrq() [11/12] 


WMX3APIFUNC 
StartRampTimeTrq ( unsigned int numCommands, 
TriggerRampTimeTr pRampTimeTrqComma 
double * pMaxMotorSpeed 
) 
Start triggered torque commands in which the torque is changed over time for 
multiple axes and set the maximum motor speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 
objects of the 

TriggerRampTimeTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 

Remarks 


This function executes the StartRampTimeTrq API function for multiple axes. 

The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartRampTimeTrq() [12/12]
WMX3APIFUNC 
StartRampTimeTrq ( unsigned int numCommands, 
RampTimeTrqCommpRampTimeTrqComma 
double * pMaxMotorSpeed, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands with multiple trigger events in which the torque is 
changed over time for multiple axes and set the maximum motor speeds of the 
commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 

objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 


[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 
Remarks 

This function executes the StartRampTimeTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆ 
StartRampRateTrq() [1/12] 



WMX3APIFUNC 
StartRampRateTrq ( 
) 
WMX3APIFUNC 
StartRampRateTrq ( 
) 
TrqCommand * pTrqCommand, 
double rampRate 
Start a torque command in which the torque is changed at a specified rate. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will change at the specified rate until the target torque is reached. 

This function can command an axis that is already executing a torque command. 
Other torque commands can override this torque command, even while the torque is 
still changing. 

◆StartRampRateTrq() [2/12]

WMX3APIFUNC 
StartRampRateTrq ( 
) 
WMX3APIFUNC 
StartRampRateTrq ( 
) 
TriggerTrqCommand pTrqCommand, 
double rampRate 
Start a triggered torque command in which the torque is changed at a specified rate. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will change at the specified rate until the target torque is reached. 

This function can command an axis that is already executing a torque command. 
Other torque commands can override this torque command, even while the torque is 
still changing. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Trigger Motion 

◆ 
StartRampRateTrq() [3/12] 



WMX3APIFUNC WMX3APIFUNC 
StartRampRateTrq ( TrqCommand * pTrqCommand, 
double rampRate, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command with multiple trigger events in which the torque is 

changed at a specified rate. 
Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will start a torque command. Compared to the StartTrq function, the 
torque will change at the specified rate until the target torque is reached. 

This function can command an axis that is already executing a torque command. 
Other torque commands can override this torque command, even while the torque is 
still changing. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Trigger Events 


◆StartRampRateTrq() [4/12]
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
) 
Start torque commands in which the torque is changed at a specified rate for 

multiple axes. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 

objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartRampRateTrq API function for multiple axes. 

◆StartRampRateTrq() [5/12]

WMX3APIFUNC 
StartRampRateTrq ( 
) 
WMX3APIFUNC 
StartRampRateTrq ( 
) 
unsigned int numCommands, 
TriggerRampRateTrq pRampRateTrqComma 
Start triggered torque commands in which the torque is changed at a specified rate 

for multiple axes. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 

objects of the 

TriggerRampRateTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartRampRateTrq API function for multiple axes. 

The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartRampRateTrq() [6/12]

WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands with multiple trigger events in which the torque is 
changed at a specified rate for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 
objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartRampRateTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 



◆StartRampRateTrq() [7/12]
Trigger Events 
WMX3APIFUNC 
StartRampRateTrq ( TrqCommand * pTrqCommand, 
double rampRate, 
double maxMotorSpeed 
) 
Start a torque command in which the torque is changed at a specified rate and set 
the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 

Remarks 

This function is an overloaded function of StartRampRateTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 
overridden, the Max Motor Speed will remain at the specified value until modified 
by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampRateTrq() [8/12]

WMX3APIFUNC 
StartRampRateTrq ( 
) 
WMX3APIFUNC 
StartRampRateTrq ( 
) 
TriggerTrqCommand pTrqCommand, 
double 
rampRate, 
double maxMotorSpeed 
Start a triggered torque command in which the torque is changed at a specified rate 
and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
parameters of the 
triggered torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 
Remarks 

This function is an overloaded function of StartRampRateTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 
overridden, the Max Motor Speed will remain at the specified value until modified 
by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampRateTrq() [9/12]

WMX3APIFUNC 
StartRampRateTrq ( 
WMX3APIFUNC 
StartRampRateTrq ( 
TrqCommand * pTrqCommand, 
double 
double 
rampRate, 
maxMotorSpeed, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command with multiple trigger events in which the torque is 
changed at a specified rate and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function is an overloaded function of StartRampRateTrq that also sets the 
Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified 
value while this torque command executes. After the torque command is stopped or 
overridden, the Max Motor Speed will remain at the specified value until modified 
by another function. The Max Motor Speed parameter is specified in units of rpm. 

◆StartRampRateTrq() [10/12]

tRampRateT q() [10/12]
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
tRampRateT q() [10/12]
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
double * pMaxMotorSpeed 
) 
Start torque commands in which the torque is changed at a specified rate for 
multiple axes and set the maximum motor speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 
objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 

Remarks 

This function executes the StartRampRateTrq API function for multiple axes. 


◆StartRampRateTrq() [11/12]
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
TriggerRampRateTrq pRampRateTrqComma 
double * pMaxMotorSpeed 
) 
Start triggered torque commands in which the torque is changed at a specified rate 
for multiple axes and set the maximum motor speeds of the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 
objects of the 

TriggerRampRateTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 

Remarks 


This function executes the StartRampRateTrq API function for multiple axes. 

The motion will begin for each axis when the specified trigger condition for that axis 
is satisfied. 

See also 

Trigger Motion 

◆StartRampRateTrq() [12/12]
WMX3APIFUNC 
StartRampRateTrq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
double * pMaxMotorSpeed, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands with multiple trigger events in which the torque is 
changed at a specified rate for multiple axes and set the maximum motor speeds of 
the commanded axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 

objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 


[in] 
pMaxMotorSpeed A pointer to an array of 
maximum motor speeds 
to apply. Each maximum 
motor speed will be 
applied to the axis of the 
torque command of the 
same index. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartRampRateTrq API function for multiple axes. 

The motion will begin for all axes when the specified multi-event trigger condition is 
satisfied. 

See also 

Trigger Events 

◆ 
StopTrq() [1/2] 



WMX3APIFU 
NC StopTrq ( int axis ) 
WMX3APIFU 
NC StopTrq ( int axis ) 
Stop a torque command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a torque 
command. 

This function will only stop axes running in Torque command mode. To stop axes 
running in Position command mode, use the Stop function. To stop axes running in 
Velocity command mode, use the Stop function. 

If the commanded axis is in Idle state, this function will return no error. 

◆StopTrq() [2/2]

WMX3APIFU 
NC StopTrq ( 
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 

Remarks 

This function is an overloaded function of StopTrq API function that stops torque 
commands for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Torque, or if 
the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆StartPosToTrq() [1/4]
WMX3APIFU 
NC 
StartPosToTr 
q ( 
TriggerTrqCo pTriggerTrqCo ) 
Start a triggered torque command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 


class that contains the 
torque command 
parameters. 

Remarks 

This function will override a position command with a torque command when the 
trigger condition is satisfied. The axis command mode will automatically change 
from Position mode to Torque mode. 

The axis commanded by this function must be in the Position command mode 
when this function is called. When the trigger condition is satisfied, the axis will 
change to Torque mode. The axis will remain in Torque mode even after the torque 
command is stopped with the StopTrq function. To return the axis to Position 
mode, use a function to set the axis command mode (such as 
SetAxisCommandMode). 

The axis commanded by this function must either be in Idle state or be executing a 
position command in the Pos state. If the axis started in Idle state or the position 
command finishes before the trigger condition is satisfied, the axis will continue to 
wait for the trigger condition to become satisfied. When the trigger condition is 
satisfied, the axis will change to Torque mode and start executing the torque 
command. 

To stop this command before the trigger condition is satisfied, use the Stop function. 
To stop this command after the trigger condition has been satisfied and the torque 
command has been executed, use the StopTrq function. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartPosToTrq() [2/4]

WMX3APIFUNC 
StartPosToTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartPosToTrq ( unsigned int numCommands, 
TriggerTrqCommand pTriggerTrqCommand 
) 
Start triggered torque commands for multiple axes that are currently executing 

position commands. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTriggerTrqCommand A pointer to an array of 
objects of the 
TriggerTrqCommand 
class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the StartPosToTrq API function for multiple axes. 

◆StartPosToTrq() [3/4]
WMX3APIFUNC 
StartPosToTrq ( TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command for an axis that is currently executing a position 

command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a position command with a torque command when the 
multiple event trigger condition is satisfied. The axis command mode will 
automatically change from Position mode to Torque mode. 

The axis commanded by this function must be in the Position command mode 
when this function is called. When the trigger condition is satisfied, the axis will 
change to Torque mode. The axis will remain in Torque mode even after the torque 
command is stopped with the StopTrq function. To return the axis to Position 
mode, use a function to set the axis command mode (such as 
SetAxisCommandMode). 

The axis commanded by this function must either be in Idle state or be executing a 
position command in the Pos state. If the axis started in Idle state or the position 
command finishes before the trigger condition is satisfied, the axis will continue to 
wait for the trigger condition to become satisfied. When the trigger condition is 
satisfied, the axis will change to Torque mode and start executing the torque 
command. 

To stop this command before the trigger condition is satisfied, use the Stop function. 
To stop this command after the trigger condition has been satisfied and the torque 
command has been executed, use the StopTrq function. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 



Specifying these trigger types will cause the 
◆StartPosToTrq() [4/4]
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 
See also 
Command Mode 

WMX3APIFUNC 
StartPosToTrq ( 
WMX3APIFUNC 
StartPosToTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands for multiple axes that are currently executing 
position commands. The trigger conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartPosToTrq API function for multiple axes. All 
commanded axes share the same trigger events. 

◆StartPosToRampTimeTrq() [1/4]

WMX3APIFUNC 
StartPosToRampTim 
eTrq ( pTrqCommand, 
rampCycleTime, 
pTrigger 
) 
TrqCommand * 
unsigned int 
Trigger * 
Start a triggered torque command in which the torque is changed over time for an 
axis that is currently executing a position command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function will override a position command with a torque command when the 
trigger condition is satisfied. Compared to the StartPosToTrq function, the torque 
will be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

When the trigger condition is satisfied, the torque command will equal the Actual 



Torque. The commanded torque will change at a constant rate over the specified 
time. This rate is dependent on the target torque and the Actual Torque at the time 
that the trigger condition is satisfied. Other torque commands can override this 
torque command, even while the torque is still changing. 

◆ 
StartPosToRampTimeTrq() [2/4] 



WMX3APIFUNC 
StartPosToRampTim 
eTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartPosToRampTim 
eTrq ( unsigned int numCommands, 
TriggerRampTimeTr pTriggerRampTimeTrq 
) 
Start triggered torque commands in which the torque is changed over time for 
multiple axes that are currently executing position commands. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerRampTimeTrqCommand A pointer to an array of 

objects of the 

TriggerRampTimeTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartPosToRampTimeTrq API function for multiple 
axes. 

◆StartPosToRampTimeTrq() [3/4]
WMX3APIFUNC 
StartPosToRampTim 
eTrq 
( TrqCommand * pTrqCommand, 

unsigned int unsigned int 
rampCycleTime, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command in which the torque is changed over time for an 
axis that is currently executing a position command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a position command with a torque command when the 
multiple event trigger condition is satisfied. Compared to the StartPosToTrq 
function, the torque will be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at a constant rate over the specified 
time. This rate is dependent on the target torque and the Actual Torque at the time 
that the trigger condition is satisfied. Other torque commands can override this 
torque command, even while the torque is still changing. 



◆StartPosToRampTimeTrq() [4/4]

WMX3APIFUNC 
StartPosToRampTim 
eTrq ( 
) 
WMX3APIFUNC 
StartPosToRampTim 
eTrq ( 
) 
unsigned int numCommands, 
RampTimeTrqCommpRampTimeTrqComma 
TriggerEvents * pTriggerEvents 
Start triggered torque commands in which the torque is changed over time for 
multiple axes that are currently executing position commands. The trigger conditions 
can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 
objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 
This function executes the StartPosToRampTimeTrq API function for multiple 
axes. All commanded axes share the same trigger events. 


◆StartPosToRampRateTrq() [1/4]

WMX3APIFUNC 
StartPosToRampRat 
eTrq ( 
) 
TrqCommand * 
double 
Trigger * 
pTrqCommand, 
rampRate, 
pTrigger 
Start a triggered torque command in which the torque is changed at a specified rate 
for an axis that is currently executing a position command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function will override a position command with a torque command when the 
trigger condition is satisfied. Compared to the StartPosToTrq function, the torque 
will change at the specified rate until the target torque is reached. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at the specified rate until the target 
torque is reached. Other torque commands can override this torque command, even 
while the torque is still changing. 

◆StartPosToRampRateTrq() [2/4]

◆StartPosToRampRateTrq() [2/4]
WMX3APIFUNC 
StartPosToRampRat 
eTrq ( unsigned int numCommands, 
TriggerRampRateTrq pTriggerRampRateTrq 
) 
Start triggered torque commands in which the torque is changed at a specified rate 
for multiple axes that are currently executing position commands. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerRampRateTrqC A pointer to an array of 

objects of the 

TriggerRampRateTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartPosToRampRateTrq API function for multiple axes. 

◆StartPosToRampRateTrq() [3/4]

WMX3APIFUNC 
StartPosToRampRat 
eTrq 
( 
TrqCommand * 
double 
pTrqCommand, 
rampRate, 
pTriggerEvents 
TriggerEvents * 
) 
Start a triggered torque command in which the torque is changed at a specified rate 
for an axis that is currently executing a position command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a position command with a torque command when the 
multiple event trigger condition is satisfied. Compared to the StartPosToTrq 
function, the torque will change at the specified rate until the target torque is 
reached. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at the specified rate until the target 
torque is reached. Other torque commands can override this torque command, even 
while the torque is still changing. 


◆StartPosToRampRateTrq() [4/4]
WMX3APIFUNC 
StartPosToRampRat 
eTrq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands in which the torque is changed at a specified rate 
for multiple axes that are currently executing position commands. The trigger 
conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 
objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 



This function executes the StartPosToRampRateTrq API function for multiple axes. 
All commanded axes share the same trigger events. 

◆StartVelToTrq() [1/4]
WMX3APIFU 
NC 
StartVelToTrq ( TriggerTrqCo pTriggerTrqCo ) 
Start a triggered torque command for an axis that is currently executing a velocity 
command. 

Parameters 
[in] 
pTriggerTrqCommand A pointer to an object of 
the 
TriggerTrqCommand 
class that contains the 
torque command 
parameters. 
Remarks 

This function will override a velocity command with a torque command when the 
trigger condition is satisfied. The axis command mode will automatically change 
from Velocity mode to Torque mode. 

The axis commanded by this function must be in the Velocity command mode when 
this function is called. When the trigger condition is satisfied, the axis will change to 
Torque mode. The axis will remain in Torque mode even after the torque command 
is stopped with the StopTrq function. To return the axis to Velocity mode, use a 
function to set the axis command mode (such as SetAxisCommandMode). 

The axis commanded by this function must either be in Idle state or be executing a 
velocity command in the Velocity state. If the axis started in Idle state or the 
velocity command finishes before the trigger condition is satisfied, the axis will 
continue to wait for the trigger condition to become satisfied. When the trigger 
condition is satisfied, the axis will change to Torque mode and start executing the 


torque command. 

To stop this command before the trigger condition is satisfied, use the Stop function. 
To stop this command after the trigger condition has been satisfied and the torque 
command has been executed, use the StopTrq function. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆ 
StartVelToTrq() [2/4] 



WMX3APIFUNC 
StartVelToTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartVelToTrq ( unsigned int numCommands, 
TriggerTrqCommand pTriggerTrqCommand 
) 
Start triggered torque commands for multiple axes that are currently executing 

velocity commands. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTriggerTrqCommand A pointer to an array of 
objects of the 
TriggerTrqCommand 
class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the StartVelToTrq API function for multiple axes. 

◆StartVelToTrq() [3/4]
WMX3APIFUNC 
StartVelToTrq ( TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command for an axis that is currently executing a velocity 

command. The trigger condition can have multiple trigger events. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 
Remarks 

This function will override a velocity command with a torque command when the 
multiple event trigger condition is satisfied. The axis command mode will 
automatically change from Velocity mode to Torque mode. 

The axis commanded by this function must be in the Velocity command mode when 
this function is called. When the trigger condition is satisfied, the axis will change to 
Torque mode. The axis will remain in Torque mode even after the torque command 
is stopped with the StopTrq function. To return the axis to Velocity mode, use a 
function to set the axis command mode (such as SetAxisCommandMode). 

The axis commanded by this function must either be in Idle state or be executing a 
velocity command in the Velocity state. If the axis started in Idle state or the 
velocity command finishes before the trigger condition is satisfied, the axis will 
continue to wait for the trigger condition to become satisfied. When the trigger 
condition is satisfied, the axis will change to Torque mode and start executing the 
torque command. 

To stop this command before the trigger condition is satisfied, use the Stop function. 
To stop this command after the trigger condition has been satisfied and the torque 
command has been executed, use the StopTrq function. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 



◆StartVelToTrq() [4/4]
returned. 
See also 
Command Mode 

WMX3APIFUNC 
StartVelToTrq ( 
WMX3APIFUNC 
StartVelToTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands for multiple axes that are currently executing 
velocity commands. The trigger conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartVelToTrq API function for multiple axes. All 
commanded axes share the same trigger events. 

◆StartVelToRampTimeTrq() [1/4]

pTrigger pTrigger 
WMX3APIFUNC 
StartVelToRampTim 
eTrq ( 
) 
TrqCommand * pTrqCommand, 
unsigned int rampCycleTime, 
Trigger * 
Start a triggered torque command in which the torque is changed over time for an 
axis that is currently executing a velocity command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function will override a velocity command with a torque command when the 
trigger condition is satisfied. Compared to the StartVelToTrq function, the torque will 
be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 
the number of milliseconds per communication cycle. 

When the trigger condition is satisfied, the torque command will equal the Actual 



Torque. The commanded torque will change at a constant rate over the specified 
time. This rate is dependent on the target torque and the Actual Torque at the time 
that the trigger condition is satisfied. Other torque commands can override this 
torque command, even while the torque is still changing. 

◆StartVelToRampTimeTrq() [2/4]
WMX3APIFUNC 
StartVelToRampTim 
eTrq ( unsigned int numCommands, 
TriggerRampTimeTr pTriggerRampTimeTrq 
) 
Start triggered torque commands in which the torque is changed over time for 
multiple axes that are currently executing velocity commands. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerRampTimeTrqCommand A pointer to an array of 

objects of the 

TriggerRampTimeTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartVelToRampTimeTrq API function for multiple axes. 


◆StartVelToRampTimeTrq() [3/4]
WMX3APIFUNC 
StartVelToRampTim 
eTrq ( TrqCommand * pTrqCommand, 
unsigned int rampCycleTime, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command in which the torque is changed over time for an 
axis that is currently executing a velocity command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampCycleTime The number of 
communication cycles 
that the torque will be 
changed over. If 0 or 1 is 
specified, the torque will 
be changed over 1 cycle. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a velocity command with a torque command when the 
multiple event trigger condition is satisfied. Compared to the StartVelToTrq function, 
the torque will be changed over a number of communication cycles. 

The Cycle Time Milliseconds status obtained with GetStatus can be used to find 


the number of milliseconds per communication cycle. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at a constant rate over the specified 
time. This rate is dependent on the target torque and the Actual Torque at the time 
that the trigger condition is satisfied. Other torque commands can override this 
torque command, even while the torque is still changing. 

◆ 
StartVelToRampTimeTrq() [4/4] 



WMX3APIFUNC 
StartVelToRampTim 
eTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartVelToRampTim 
eTrq ( unsigned int numCommands, 
RampTimeTrqCommpRampTimeTrqComma 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands in which the torque is changed over time for 
multiple axes that are currently executing velocity commands. The trigger conditions 
can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampTimeTrqCommand A pointer to an array of 
objects of the 

RampTimeTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 

This function executes the StartVelToRampTimeTrq API function for multiple axes. 
All commanded axes share the same trigger events. 


◆StartVelToRampRateTrq() [1/4]

WMX3APIFUNC 
StartVelToRampRate 
Trq ( 
) 
TrqCommand * 
double 
Trigger * 
pTrqCommand, 
rampRate, 
pTrigger 
Start a triggered torque command in which the torque is changed at a specified rate 
for an axis that is currently executing a velocity command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function will override a velocity command with a torque command when the 
trigger condition is satisfied. Compared to the StartVelToTrq function, the torque will 
change at the specified rate until the target torque is reached. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at the specified rate until the target 
torque is reached. Other torque commands can override this torque command, even 
while the torque is still changing. 

◆StartVelToRampRateTrq() [2/4]

◆StartVelToRampRateTrq() [2/4]
WMX3APIFUNC 
StartVelToRampRate 
Trq ( unsigned int numCommands, 
TriggerRampRateTrq pTriggerRampRateTrq 
) 
Start triggered torque commands in which the torque is changed at a specified rate 
for multiple axes that are currently executing velocity commands. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerRampRateTrqC A pointer to an array of 

objects of the 

TriggerRampRateTrqC 
ommand class that 
contain the parameters 
of the triggered torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartVelToRampRateTrq API function for multiple axes. 

◆StartVelToRampRateTrq() [3/4]

WMX3APIFUNC 
StartVelToRampRate 
Trq 
( 
TrqCommand * 
double 
pTrqCommand, 
rampRate, 
pTriggerEvents 
TriggerEvents * 
) 
Start a triggered torque command in which the torque is changed at a specified rate 
for an axis that is currently executing a velocity command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
rampRate The rate at which the 
torque is changed, in 
units of % per second. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks 

This function will override a velocity command with a torque command when the 
multiple event trigger condition is satisfied. Compared to the StartVelToTrq function, 
the torque will change at the specified rate until the target torque is reached. 

When the trigger condition is satisfied, the torque command will equal the Actual 
Torque. The commanded torque will change at the specified rate until the target 
torque is reached. Other torque commands can override this torque command, even 
while the torque is still changing. 


◆StartVelToRampRateTrq() [4/4]
WMX3APIFUNC 
StartVelToRampRate 
Trq ( unsigned int numCommands, 
RampRateTrqComm pRampRateTrqComma 
TriggerEvents * pTriggerEvents 
) 
Start triggered torque commands in which the torque is changed at a specified rate 
for multiple axes that are currently executing velocity commands. The trigger 
conditions can have multiple trigger events. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 

[in] 
pRampRateTrqComman A pointer to an array of 
objects of the 

RampRateTrqComman 
d class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 

[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. This parameter 
should not be an array. 

Remarks 



This function executes the StartVelToRampRateTrq API function for multiple axes. 
All commanded axes share the same trigger events. 

 


AdvancedMotion Class Reference 

This class contains advanced motion functions. 

Public Member Functions 

AdvancedMotion (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

AdvancedMotion (const 
AdvancedMotion &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

AdvancedMotion & operator= (const AdvancedMotion &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

AdvancedMotion () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~AdvancedMotion () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 


can be created by calling the 
CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 


Public Attributes 

Friends 

AdvMotion * advMotion 

AdvVelocity * advVelocity 

AdvSync * advSync 

class AdvMotion 

class AdvVelocity 

class AdvSync 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode 
enum in the WMX3Api.h header. All errors returned by functions in class 
AdvancedMotion will be defined in one of these enums. Errors returned by 
functions in other classes may not be defined in one of these enums, and when 
such errors are passed to this function, an ErrorCodeNotDefined error will be 
returned and pString will contain the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
AdvancedMotion class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
wchar_t * pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes 

class CoordinatedJerkRatioPosCommand 
This class contains data for a coordinated 
position command with two or more axes. 
More... 
class CoordinatedPosCommand 
This class contains data for a coordinated 
position command. More... 
class PathIntpl3DAdditionalCommand 
This class contains data for additional 
interpolation segment data for 3D path 
interpolation. More... 
class PathIntpl3DCommand 
This class contains data for a 3D path 
interpolation motion command. More... 
class PathIntplAdditionalCommand 
This class contains data for additional 
interpolation segment data for path interpolation. 
More... 
class PathIntplCommand 
This class contains data for a path interpolation 
motion command. More... 
class PathIntplCoordinateType 
This enumerator class enumerates the 
coordinate types of path interpolations. The 
coordinate type determines how the coordinates 
are specified when defining positions in a path 
interpolation. More... 
class PathIntplLookaheadCommand 
This class contains data for path interpolation 
with look ahead. More... 
class PathIntplLookaheadCommandPoint 
This class contains data for one point in the path 
interpolation with look ahead motion command. 
More... 


class PathIntplLookaheadConfiguration 
This class contains the configuration data for a 
path interpolation with look ahead channel. 
More... 
class PathIntplLookaheadCoordinateType 
This enumerator class enumerates the 
coordinate types of path interpolations with look 
ahead. The coordinate type determines how the 
coordinates are specified when defining 
positions in a path interpolation with look ahead. 
More... 
class PathIntplLookaheadSegmentType 
This enumerator class enumerates the segment 
types of motion segments in a path interpolation 
with look ahead. More... 
class PathIntplLookaheadState 
This enumerator class enumerates the states of 
a path interpolation with look ahead channel. 
More... 
class PathIntplLookaheadStatus 
This class contains status data for a path 
interpolation with look ahead channel. More... 
class PathIntplOutputSource 
This enumerator class enumerates the output 
sources of outputs in a path interpolation. More... 
class PathIntplOutputType 
This enumerator class enumerates the output 
types of outputs in a path interpolation. More... 
class PathIntplSegmentType 
This enumerator class enumerates the segment 
types of motion segments in a path interpolation. 
More... 

class PathIntplWithRotationCommand 
This class contains data for a path interpolation 
with rotation command. More... 

class PathIntplWithRotationCommandPoint 
This class contains data for one point in the path 
interpolation with rotation motion command. 
More... 


class 
class 
class 
class 
class 
class 
class 
class 
class 
PathIntplWithRotationConfiguration 
This class contains the configuration data for a 
path interpolation with rotation channel. More... 
PathIntplWithRotationState 
This enumerator class enumerates the path 
interpolation with rotation states. More... 
PathIntplWithRotationStatus 
This class contains status data for a path 
interpolation with rotation channel. More... 
PointTimeSplineCommand 
This class contains data for a spline command in 
which the time at each point is specified. More... 
PosCommand 
This class contains data for a position command. 
More... 
class 
class 
class 
class 
ProfileSplineCommand 
This class contains data for a spline command in 
which the spline is traversed using a motion 
profile. More... 
SimulatePathIntpl3DCommand 
This class contains data for simulating a 3D path 
interpolation motion. More... 
SimulatePathIntplCommand 
This class contains data for simulating a path 
interpolation motion command. More... 
SplinePoint 
This class contains data for a spline point. 
More... 
class TotalTimeSplineCommand 
This class contains data for a spline command in 
which the total time is specified. More... 
class TwoLinkLinearCommand 
This class contains data for a two link motion 
command for a linear axis. More... 
class 
class 
TwoLinkRotaryCommand 
This class contains data for a two link motion 
command for a rotary axis. More... 
VelAccLimitedSplineCommand 
This class contains data for a spline command in 


Public Member Functions 

which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. More... 

AdvMotion (AdvancedMotion *f) 

bool IsDeviceValid () 

WMX3APIFUNC CreateSplineBuffer (int channel, unsigned int 
points) 

Allocate buffer memory for a spline execution 
channel. More... 

WMX3APIFUNC FreeSplineBuffer (int channel) 
Free buffer memory for a spline execution 
channel. More... 

WMX3APIFUNC GetSplineBufferPoints (int channel, unsigned int 
*pPoints) 

Get the amount of buffer memory currently 
allocated to a spline execution channel. More... 

WMX3APIFUNC GetSplineBytesPerPoint (unsigned int *pBytes) 
Get the number of bytes required per point data 
in the spline execution buffer memory. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 
More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 


The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 

Start a triggered cubic spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 
Start a triggered cubic spline motion command in 


which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the time at 
each point is specified. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command 


with multiple trigger events in which the total 
time to complete the spline is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed using a motion profile. The point 
positions are specified as absolute positions. 
More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed while staying within the specified 
velocity and acceleration limits for each axis. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the time at 
each point is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the total 
time to complete the spline is specified. The 
point positions are specified as relative positions. 
More... 


WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 

Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed using a motion profile. The point 
positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed while staying within the specified 
velocity and acceleration limits for each axis. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More... 


WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 
Start a triggered cubic basis spline motion 
command in which the time at each point is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 

Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 

Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 


TriggerEvents *pTriggerEvents) 

Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the total time to complete the spline is specified. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed using a motion profile. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 


the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple 


trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with rotation buffer 
memory. More... 

WMX3APIFUNC SetPathIntplWithRotationConfiguration (int 
channel, PathIntplWithRotationConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC AddPathIntplWithRotationCommand (int 
channel, PathIntplWithRotationCommand 
*pCommand) 
Add interpolation commands to a path 
interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel) 
Execute motion for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, Trigger 
*pTrigger) 

Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when 
the trigger condition is satisfied. More... 
WMX3APIFUNC ClearPathIntplWithRotation (int channel) 
Clear all data for a path interpolation with 
rotation channel. More... 
WMX3APIFUNC GetPathIntplWithRotationStatus (int channel, 
PathIntplWithRotationStatus *pStatus) 
Get the current status for a path inteprolation 
with rotation channel. More... 
WMX3APIFUNC CreatePathIntplLookaheadBuffer (int channel, 
unsigned int points) 
Allocate buffer memory for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More... 


WMX3APIFUNC StartCoordinatedPos (unsigned int 
numCommands, CoordinatedPosCommand 
*pPosCommand) 
Start multiple interpolations, each between pairs 
of two axes, where one axis executes a normal 
position command and the second axis travels a 
specified distance in the same amount of time. 
More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedJerkRatioPosCommand 
*pPosCommand) 
Start an interpolation between two or more axes, 
where one axis executes a normal position 
command and the remaining axes travel the 
specified distances in the same amount of time. 
More... 

WMX3APIFUNC StartTwoLinkLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 

Start a two link motion in which the profile is 
generated by simulating a linear axis connected 


to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntplCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double 
*pMoveDistance, double *pRemainDistance, 
double *pTotalDistance) 
Simulate a path interpolation command without 
moving any axes. The move distance, remain 
distance, and total distance after the path 
interpolation runs for a specified amount of time 
are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, unsigned int 
minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a path interpolation command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a path interpolation command without 
moving any axes. The move time, remain time, 
and total time after the path interpolation runs for 
the specified distance are returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a 3D path interpolation command 
without moving any axes. The move time, 
remain time, and total time after the 3D path 
interpolation runs for the specified distance are 
returned. More... 

AdvancedMotion * amApi 

Member Function Documentation 

◆CreateSplineBuffer() 
WMX3APIFUNC 
CreateSplineBuffer ( int channel, 

unsigned int points 
) 
unsigned int points 
) 
Allocate buffer memory for a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 
[in] 
points The number of points to 
allocate memory for. Each 
spline point occupies one 
point in the memory. Setting 
the sampleMultiplier 
parameter of a 
VelAccLimitedSplineComm 
and to a value greater than 1 
will multiply the number of 
points occupied by one spline 
point. For example, if 
sampleMultiplier is set to 10, 
each point in the spline will 
require 10 points worth of 
buffer memory to store. 

Remarks 

When the WMX3 engine is started, no memory is allocated for execution of spline motion 
commands. This function must be called before a spline motion command can be executed. 

Each channel has a separate buffer memory space. This function must be called for each channel 
before that channel can execute spline motion commands. Each channel can execute one spline 
motion command at one time. To execute two spline motion commands at the same time, buffer 
memory space must be allocated for two channels. However, if two spline motion commands are 
executed sequentially with no overlap, only one channel is required, even if the spline motion 
commands control different axes. 

Allocating buffer memory space is an operation that can fail due to lack of memory space or 
fragmentation of memory. For deterministic operation, this function should be called during 
initialization to allocate memory for all spline execution channels that will potentially be used by the 
program. 

The maximum size of the buffer memory space of a spline execution channel is 2GB-1Byte 
(2147483647 bytes). Specifying a larger size will cause this function to return the 


RequestedBufferTooLarge error. 

It is not necessary to call this function again after buffer memory has been allocated once. (When 
the WMX3 engine is restarted, this function must be called again to allocate buffer memory.) 

Buffer memory that has been allocated can be freed using the FreeSplineBuffer function. After 
freeing the buffer memory of a spline execution channel, this function can be called again to 
reallocate a different amount of buffer memory. 

It is not necessary to free allocated memory using FreeSplineBuffer before exiting the program. 
Any allocated memory is automatically freed when the WMX3 engine is closed. 

The GetSplineBufferPoints function can be used to find the amount of buffer memory currently 
allocated to a spline execution channel. 

The GetSplineBytesPerPoint function can be used to convert the buffer memory size from points 
to bytes. 

See also 

Spline 

◆ 
FreeSplineBuffer() 

WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
Free buffer memory for a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 

Remarks 

This function frees the buffer memory that has been allocated with the CreateSplineBuffer 
function. This allows CreateSplineBuffer to be called again to allocate a different amount of 
memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetSplineBufferPoints() 

WMX3APIFUNC WMX3APIFUNC 
int
GetSplineBufferPoints ( 
) 
channel, 
unsigned int * pPoints 
Get the amount of buffer memory currently allocated to a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 
[out] 
pPoints A pointer to an unsigned int 
that will contain the number of 
points that can be stored in 
the buffer memory. 

Remarks 

This function obtains the amount of buffer memory currently allocated to a spline execution channel, 
in units of points. 

To convert the buffer memory size from the number of points to bytes, use the 
GetSplineBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will return 0 in the 
pPoints parameter. 

◆GetSplineBytesPerPoint() 

WMX3APIFUN 
C 
GetSplineBytes 
PerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetSplineBytes 
PerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the spline execution buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the spline 
execution buffer memory. This can be used to calculate the number of bytes of buffer memory 
required to store a particular number of points. For example, if this function returns 192, the number 
of bytes required to store 100000 points is 192*100000 = 19200000, or approximately 18.3MB. 

◆StartCSplinePos() [1/12]
WMX3APIFUNC 
StartCSplinePos ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds 
) 
Start a cubic spline motion command in which the time at each point is specified. The point 
positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 


pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 

Remarks 

During a cubic spline motion, the commanded axes will traverse each point in order at the specified 
times. The velocities and accelerations of the commanded axes will be continuous throughout the 
entire motion, so the resulting path will be smooth. However, if the points and times are not 
specified carefully, the commanded axes may reach a very high velocity or acceleration during the 
motion (although the velocity and acceleration will still be continuous). 

This type of spline is suitable if the time at which each point is traversed must be specified. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

The time at each point must be specified in ascending order, or else an error will be returned. The 
first time will automatically be set to 0, and does not need to be passed to this function. If the first 
time passed to this function is equal to 0, that time will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 





Spline 


◆StartCSplinePos() [2/12]
WMX3APIFUNC 
StartCSplinePos ( 
int 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint 
) 
Start a cubic spline motion command in which the total time to complete the spline is specified. The 
point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

During a cubic spline motion, the commanded axes will traverse each point, completing the spline 
using the specified total time. The velocities and accelerations of the commanded axes will be 
continuous throughout the entire motion, so the resulting path will be smooth. The velocity along the 
spline will be relatively constant, so one or more commanded axes may undergo high acceleration if 
there is a sharp corner in the given point data. 

The time at which each point is traversed is calculated taking into account the distance between the 
points, the acceleration at the beginning, and the deceleration at the end. 


This type of spline is suitable for motion where the total time to complete the spline is important, 
and there is no sharp corner in the given point data. If there is a sharp corner in the point data, one 
or more commanded axes may undergo high acceleration, even if the velocity along the spline is 
relatively constant. At these sharp corners, the velocity may also suddenly and momentarily 
increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

See also 

Spline 

◆StartCSplinePos() [3/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic spline motion command in which the spline is traversed using a motion profile. The 
point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 


[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline using the specified motion profile. The velocities and accelerations of the commanded axes 
will be continuous throughout the entire motion, so the resulting path will be smooth. The velocity 
along the spline will be relatively constant, so one or more commanded axes may have high 
acceleration if there is a sharp corner in the given point data. 

Compared to StartCSplinePos, this function has the following differences: 

The velocity, acceleration, jerk, etc. that is used is directly specified instead of being 
calculated from the specified time. 
All available profile shapes in ProfileType can be used. 
Acceleration and deceleration along the spline path can stretch over several points or a 
fraction of a point. With StartCSplinePos, acceleration along the spline path occurs only 
between the first point and second point, and deceleration along the spline path occurs only 
between the last point and second to last point. 
This type of spline is suitable for motion where the velocity, acceleration, and profile shape along 
the spline path needs to be specified, and there is no sharp corner in the given point data. If there is 
a sharp corner in the point data, one or more commanded axes may undergo high acceleration, 
even if the velocity along the spline is relatively constant. At these sharp corners, the velocity may 
also suddenly and momentarily increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will gradually stop 
along the spline path using the deceleration parameters specified in the profile argument. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 


than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 

See also 

Spline 

◆StartCSplinePos() [4/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic spline motion command in which the spline is traversed while staying within the 
specified velocity and acceleration limits for each axis. The point positions are specified as absolute 
positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 


Remarks 

During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline at the specified velocity and acceleration, while staying within the velocity and acceleration 
limits of each individual axis. 

This type of spline is suitable for point data containing sharp corners. Each axis will decelerate at 
corners to stay within the velocity and acceleration limits of that axis. The entire spline is considered 
when calculating the deceleration, so the axes may start to decelerate from several points before 
the sharp corner. The deceleration is optimized so that the spline will be traversed in approximately 
the shortest amount of time possible with the given velocity and acceleration constraints. 

Because the velocities and accelerations along the spline are sampled at certain non-constant 
intervals (that are typically greater than one cycle), there will be some approximation and the 
velocities and accelerations during some cycles may exceed the specified composite values or the 
limits by a small percentage. Increasing the sample count can improve the accuracy of the velocity 
and acceleration limits. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 

See also 

Spline 

◆StartCSplineMov() [1/12]
WMX3APIFUNC 
StartCSplineMov ( int channel, 

PointTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
double * pPointTimeMilliseconds 
) 
Start a cubic spline motion command in which the time at each point is specified. The point 
positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

See also 

Spline 


◆StartCSplineMov() [2/12]
WMX3APIFUNC 
StartCSplineMov ( 
int 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint 
) 
Start a cubic spline motion command in which the total time to complete the spline is specified. The 
point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

See also 

Spline 

◆StartCSplineMov() [3/12]

WMX3APIFUNC 
StartCSplineMov ( int channel, 
WMX3APIFUNC 
StartCSplineMov ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic spline motion command in which the spline is traversed using a motion profile. The 
point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

See also 

Spline 

◆StartCSplineMov() [4/12]

WMX3APIFUNC 
StartCSplineMov ( int channel, 
WMX3APIFUNC 
StartCSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic spline motion command in which the spline is traversed while staying within the 
specified velocity and acceleration limits for each axis. The point positions are specified as relative 

positions. 
Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

See also 

Spline 

◆StartCSplinePos() [5/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 

PointTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
double * pPointTimeMilliseconds, 
Trigger * pTrigger 
) 
Start a triggered cubic spline motion command in which the time at each point is specified. The 
point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 

PointTimeSplineCommand 

that contains the spline 
parameters. 

[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 

[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 

[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

During a cubic spline motion, the commanded axes will traverse each point in order at the specified 


times. The velocities and accelerations of the commanded axes will be continuous throughout the 
entire motion, so the resulting path will be smooth. However, if the points and times are not 
specified carefully, the commanded axes may reach a very high velocity or acceleration during the 
motion (although the velocity and acceleration will still be continuous). 

This type of spline is suitable if the time at which each point is traversed must be specified. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

The time at each point must be specified in ascending order, or else an error will be returned. The 
first time will automatically be set to 0, and does not need to be passed to this function. If the first 
time passed to this function is equal to 0, that time will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆StartCSplinePos() [6/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
Trigger * pTrigger 
) 
Start a triggered cubic spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as absolute positions. 


Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
Remarks 

During a cubic spline motion, the commanded axes will traverse each point, completing the spline 
using the specified total time. The velocities and accelerations of the commanded axes will be 
continuous throughout the entire motion, so the resulting path will be smooth. The velocity along the 
spline will be relatively constant, so one or more commanded axes may undergo high acceleration if 
there is a sharp corner in the given point data. 

The time at which each point is traversed is calculated taking into account the distance between the 
points, the acceleration at the beginning, and the deceleration at the end. 

This type of spline is suitable for motion where the total time to complete the spline is important, 
and there is no sharp corner in the given point data. If there is a sharp corner in the point data, one 
or more commanded axes may undergo high acceleration, even if the velocity along the spline is 
relatively constant. At these sharp corners, the velocity may also suddenly and momentarily 
increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 


The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆StartCSplinePos() [7/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
Trigger * pTrigger 
) 
Start a triggered cubic spline motion command in which the spline is traversed using a motion 
profile. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 


[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
Remarks 

During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline using the specified motion profile. The velocities and accelerations of the commanded axes 
will be continuous throughout the entire motion, so the resulting path will be smooth. The velocity 
along the spline will be relatively constant, so one or more commanded axes may have high 
acceleration if there is a sharp corner in the given point data. 

Compared to StartCSplinePos, this function has the following differences: 

The velocity, acceleration, jerk, etc. that is used is directly specified instead of being 

calculated from the specified time. 

All available profile shapes in ProfileType can be used. 

Acceleration and deceleration along the spline path can stretch over several points or a 

fraction of a point. With StartCSplinePos, acceleration along the spline path occurs only 

between the first point and second point, and deceleration along the spline path occurs only 

between the last point and second to last point. 

This type of spline is suitable for motion where the velocity, acceleration, and profile shape along 
the spline path needs to be specified, and there is no sharp corner in the given point data. If there is 
a sharp corner in the point data, one or more commanded axes may undergo high acceleration, 
even if the velocity along the spline is relatively constant. At these sharp corners, the velocity may 
also suddenly and momentarily increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will gradually stop 
along the spline path using the deceleration parameters specified in the profile argument. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 



The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆StartCSplinePos() [8/12]
WMX3APIFUNC 
StartCSplinePos ( 
int 
channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int 
SplinePoint * 
Trigger * 
numPoints, 
pPoint, 
pTrigger 
) 
Start a triggered cubic spline motion command in which the spline is traversed while staying within 
the specified velocity and acceleration limits for each axis. The point positions are specified as 
absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 


During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline at the specified velocity and acceleration, while staying within the velocity and acceleration 
limits of each individual axis. 

This type of spline is suitable for point data containing sharp corners. Each axis will decelerate at 
corners to stay within the velocity and acceleration limits of that axis. The entire spline is considered 
when calculating the deceleration, so the axes may start to decelerate from several points before 
the sharp corner. The deceleration is optimized so that the spline will be traversed in approximately 
the shortest amount of time possible with the given velocity and acceleration constraints. 

Because the velocities and accelerations along the spline are sampled at certain non-constant 
intervals (that are typically greater than one cycle), there will be some approximation and the 
velocities and accelerations during some cycles may exceed the specified composite values or the 
limits by a small percentage. Increasing the sample count can improve the accuracy of the velocity 
and acceleration limits. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆StartCSplineMov() [5/12]
WMX3APIFUNC 
StartCSplineMov ( int channel, 

PointTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
double * pPointTimeMilliseconds, 
Trigger * pTrigger 
) 
Start a triggered cubic spline motion command in which the time at each point is specified. The 
point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 

PointTimeSplineCommand 

that contains the spline 
parameters. 

[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 

[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 

[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 


This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆ 
StartCSplineMov() [6/12] 



int int 
WMX3APIFUNC 
StartCSplineMov ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 


◆◆StartCSplineMov() [7/12]

int int 
WMX3APIFUNC 
StartCSplineMov ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic spline motion command in which the spline is traversed using a motion 
profile. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 


◆StartCSplineMov() [8/12]
WMX3APIFUNC 
StartCSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
Trigger * pTrigger 
) 
Start a triggered cubic spline motion command in which the spline is traversed while staying within 
the specified velocity and acceleration limits for each axis. The point positions are specified as 
relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified trigger condition is satisfied. 



◆StartCSplinePos() [9/12]
See also 
Spline, Trigger Motion 
WMX3APIFUNC 
StartCSplinePos ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the time at each 
point is specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 


times are specified in units of 
milliseconds. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

During a cubic spline motion, the commanded axes will traverse each point in order at the specified 
times. The velocities and accelerations of the commanded axes will be continuous throughout the 
entire motion, so the resulting path will be smooth. However, if the points and times are not 
specified carefully, the commanded axes may reach a very high velocity or acceleration during the 
motion (although the velocity and acceleration will still be continuous). 

This type of spline is suitable if the time at which each point is traversed must be specified. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

The time at each point must be specified in ascending order, or else an error will be returned. The 
first time will automatically be set to 0, and does not need to be passed to this function. If the first 
time passed to this function is equal to 0, that time will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆ 
StartCSplinePos() [10/12] 


WMX3APIFUNC 
StartCSplinePos ( int channel, 
TotalTimeSplineComma pSplineCommand, 

unsigned int numPoints, 
pPoint, 
) 
unsigned int numPoints, 
pPoint, 
) 
SplinePoint * 
TriggerEvents * 
pTriggerEvents 
Start a triggered cubic spline motion command with multiple trigger events in which the total time to 
complete the spline is specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

During a cubic spline motion, the commanded axes will traverse each point, completing the spline 
using the specified total time. The velocities and accelerations of the commanded axes will be 
continuous throughout the entire motion, so the resulting path will be smooth. The velocity along the 
spline will be relatively constant, so one or more commanded axes may undergo high acceleration if 
there is a sharp corner in the given point data. 

The time at which each point is traversed is calculated taking into account the distance between the 
points, the acceleration at the beginning, and the deceleration at the end. 

This type of spline is suitable for motion where the total time to complete the spline is important, 
and there is no sharp corner in the given point data. If there is a sharp corner in the point data, one 
or more commanded axes may undergo high acceleration, even if the velocity along the spline is 
relatively constant. At these sharp corners, the velocity may also suddenly and momentarily 


increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆StartCSplinePos() [11/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the spline is 
traversed using a motion profile. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 


pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline using the specified motion profile. The velocities and accelerations of the commanded axes 
will be continuous throughout the entire motion, so the resulting path will be smooth. The velocity 
along the spline will be relatively constant, so one or more commanded axes may have high 
acceleration if there is a sharp corner in the given point data. 

Compared to StartCSplinePos, this function has the following differences: 

The velocity, acceleration, jerk, etc. that is used is directly specified instead of being 
calculated from the specified time. 
All available profile shapes in ProfileType can be used. 
Acceleration and deceleration along the spline path can stretch over several points or a 
fraction of a point. With StartCSplinePos, acceleration along the spline path occurs only 
between the first point and second point, and deceleration along the spline path occurs only 
between the last point and second to last point. 
This type of spline is suitable for motion where the velocity, acceleration, and profile shape along 
the spline path needs to be specified, and there is no sharp corner in the given point data. If there is 
a sharp corner in the point data, one or more commanded axes may undergo high acceleration, 
even if the velocity along the spline is relatively constant. At these sharp corners, the velocity may 
also suddenly and momentarily increase or decrease. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will gradually stop 
along the spline path using the deceleration parameters specified in the profile argument. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 


The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆StartCSplinePos() [12/12]
WMX3APIFUNC 
StartCSplinePos ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the spline is 
traversed while staying within the specified velocity and acceleration limits for each axis. The point 
positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 


array must be equal to 

numPoints. 

[in] 
pTriggerEvents A pointer to an object of the 

TriggerEvents class that 

contains the trigger events. 

Remarks 

During a cubic spline motion, the commanded axes will traverse each point, traveling along the 
spline at the specified velocity and acceleration, while staying within the velocity and acceleration 
limits of each individual axis. 

This type of spline is suitable for point data containing sharp corners. Each axis will decelerate at 
corners to stay within the velocity and acceleration limits of that axis. The entire spline is considered 
when calculating the deceleration, so the axes may start to decelerate from several points before 
the sharp corner. The deceleration is optimized so that the spline will be traversed in approximately 
the shortest amount of time possible with the given velocity and acceleration constraints. 

Because the velocities and accelerations along the spline are sampled at certain non-constant 
intervals (that are typically greater than one cycle), there will be some approximation and the 
velocities and accelerations during some cycles may exceed the specified composite values or the 
limits by a small percentage. Increasing the sample count can improve the accuracy of the velocity 
and acceleration limits. 

The first point will automatically be set to the current position of the commanded axes, and does not 
need to be passed to this function. If the first point passed to this function is equal to the current 
position of the commanded axes, that point will be ignored. 

When stopping the spline motion using the Stop function, the interpolating axes will decelerate to a 
stop along the spline path using the approximate maximum composite acceleration that would be 
applied to the axes when executing the spline command. 

The minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will 
cause the TimeBetweenPointsTooClose error to be returned. 

The minimum distance between points is 1e-6 user units. If there are consecutive points with less 
than this distance, the latter point will be ignored. If this causes the number of points to be less than 
2 (excluding the first point), the PointCountBelowMinimum error will be returned. 

If a large value is specified for the sampleMultiplier parameter, the time and distance between 
points will become smaller from the added sample points, and may cause the 
TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this 
occurs, reduce the sampleMultiplier. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 



◆StartCSplineMov() [9/12]
Spline, Trigger Events 
WMX3APIFUNC 
StartCSplineMov ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the time at each 
point is specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 


milliseconds. 

[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆ 
StartCSplineMov() [10/12] 



int int 
WMX3APIFUNC 
StartCSplineMov ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the total time to 
complete the spline is specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 


◆◆StartCSplineMov() [11/12]

int int 
WMX3APIFUNC 
StartCSplineMov ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the spline is 
traversed using a motion profile. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 


◆◆StartCSplineMov() [12/12]
WMX3APIFUNC 
StartCSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic spline motion command with multiple trigger events in which the spline is 
traversed while staying within the specified velocity and acceleration limits for each axis. The point 
positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This is a relative position version of the StartCSplinePos function, where all point positions are 
specified relative to the command positions of the commanded axes at the time that this function is 
executed. 

The motion will begin when the specified multi-event trigger condition is satisfied. 



◆StartCBSplinePos() [1/12]
See also 
Spline, Trigger Events 
WMX3APIFUNC 
StartCBSplinePos ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds 
) 
Start a cubic basis spline motion command in which the time at each point is specified. The point 
positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 


milliseconds. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆ 
StartCBSplinePos() [2/12] 



WMX3APIFUNC 
StartCBSplinePos ( int channel, 
WMX3APIFUNC 
StartCBSplinePos ( int channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic basis spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplinePos() [3/12]

WMX3APIFUNC 
StartCBSplinePos ( int channel, 
WMX3APIFUNC 
StartCBSplinePos ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic basis spline motion command in which the spline is traversed using a motion profile. 
The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplinePos() [4/12]

WMX3APIFUNC 
StartCBSplinePos ( int channel, 
WMX3APIFUNC 
StartCBSplinePos ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic basis spline motion command in which the spline is traversed while staying within the 
specified velocity and acceleration limits for each axis. The point positions are specified as absolute 

positions. 
Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplineMov() [1/12]
WMX3APIFUNC 
StartCBSplineMov ( int channel, 

PointTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
double * pPointTimeMilliseconds 
) 
Start a cubic basis spline motion command in which the time at each point is specified. The point 
positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 


◆StartCBSplineMov() [2/12]
WMX3APIFUNC 
StartCBSplineMov ( 
int 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint 
) 
Start a cubic basis spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplineMov() [3/12]

WMX3APIFUNC 
StartCBSplineMov ( int channel, 
WMX3APIFUNC 
StartCBSplineMov ( int channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic basis spline motion command in which the spline is traversed using a motion profile. 
The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplineMov() [4/12]

WMX3APIFUNC 
StartCBSplineMov ( int channel, 
WMX3APIFUNC 
StartCBSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint 
) 
Start a cubic basis spline motion command in which the spline is traversed while staying within the 
specified velocity and acceleration limits for each axis. The point positions are specified as relative 

positions. 
Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

See also 

Spline 

◆StartCBSplinePos() [5/12]
WMX3APIFUNC 
StartCBSplinePos ( int channel, 

PointTimeSplineComma pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
double * pPointTimeMilliseconds, 
Trigger * pTrigger 
) 
Start a triggered cubic basis spline motion command in which the time at each point is specified. 
The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 
times are specified in units of 
milliseconds. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 
This function is similar to the StartCSplinePos function, except the specified points are not 


necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆ 
StartCBSplinePos() [6/12] 



int int 
WMX3APIFUNC 
StartCBSplinePos ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic basis spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
TotalTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 


◆ 
StartCBSplinePos() [7/12] 



int int 
WMX3APIFUNC 
StartCBSplinePos ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic basis spline motion command in which the spline is traversed using a motion 
profile. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Spline, Trigger Motion 


◆StartCBSplinePos() [8/12]
WMX3APIFUNC 
StartCBSplinePos ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
Trigger * pTrigger 
) 
Start a triggered cubic basis spline motion command in which the spline is traversed while staying 
within the specified velocity and acceleration limits for each axis. The point positions are specified 
as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 



◆StartCBSplineMov() [5/12]
See also 
Spline, Trigger Motion 
WMX3APIFUNC 
StartCBSplineMov ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds, 
Trigger * 
pTrigger 
) 
Start a triggered cubic basis spline motion command in which the time at each point is specified. 
The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 


times are specified in units of 
milliseconds. 

[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 

◆ 
StartCBSplineMov() [6/12] 



int int 
WMX3APIFUNC 
StartCBSplineMov ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic basis spline motion command in which the total time to complete the spline is 
specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 

TotalTimeSplineCommand 

that contains the spline 
parameters. 

[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 

[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 
Spline, Trigger Motion 


◆StartCBSplineMov() [7/12]

int int 
WMX3APIFUNC 
StartCBSplineMov ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * 
Trigger * 
pPoint, 
pTrigger 
) 
Start a triggered cubic basis spline motion command in which the spline is traversed using a motion 
profile. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 

See also 

Spline, Trigger Motion 


◆StartCBSplineMov() [8/12]
WMX3APIFUNC 
StartCBSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
Trigger * pTrigger 
) 
Start a triggered cubic basis spline motion command in which the spline is traversed while staying 
within the specified velocity and acceleration limits for each axis. The point positions are specified 
as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified trigger condition is satisfied. 



Spline, Trigger Motion 


◆StartCBSplinePos() [9/12]
WMX3APIFUNC 
StartCBSplinePos ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the time 
at each point is specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 


times are specified in units of 
milliseconds. 

[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆ 
StartCBSplinePos() [10/12] 



int int 
WMX3APIFUNC 
StartCBSplinePos ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the total 
time to complete the spline is specified. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 

TotalTimeSplineCommand 

that contains the spline 
parameters. 

[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 

[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 

[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 


◆StartCBSplinePos() [11/12]

int int 
WMX3APIFUNC 
StartCBSplinePos ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the spline 
is traversed using a motion profile. The point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Spline, Trigger Events 


◆StartCBSplinePos() [12/12]
WMX3APIFUNC 
StartCBSplinePos ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the spline 
is traversed while staying within the specified velocity and acceleration limits for each axis. The 
point positions are specified as absolute positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplinePos function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 



◆StartCBSplineMov() [9/12]
See also 
Spline, Trigger Events 
WMX3APIFUNC 
StartCBSplineMov ( 
int 
channel, 
PointTimeSplineComma pSplineCommand, 
unsigned int 
SplinePoint * 
numPoints, 
pPoint, 
double * pPointTimeMilliseconds, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the time 
at each point is specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
PointTimeSplineCommand 
that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pPointTimeMilliseconds An array of doubles that 
contain the spline time data. 
The N-th index of the array 
specifies the time data of the 
N-th index of the pPoint array. 
The length of the array must 
be equal to numPoints. The 


times are specified in units of 
milliseconds. 

[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 

◆ 
StartCBSplineMov() [10/12] 



int int 
WMX3APIFUNC 
StartCBSplineMov ( 
channel, 
TotalTimeSplineComma pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the total 
time to complete the spline is specified. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 

TotalTimeSplineCommand 

that contains the spline 
parameters. 

[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 

[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
Spline, Trigger Events 


◆StartCBSplineMov() [11/12]

int int 
WMX3APIFUNC 
StartCBSplineMov ( 
channel, 
ProfileSplineCommand pSplineCommand, 
unsigned int 
numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the spline 
is traversed using a motion profile. The point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
ProfileSplineCommand that 
contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 

Spline, Trigger Events 


◆StartCBSplineMov() [12/12]
WMX3APIFUNC 
StartCBSplineMov ( int channel, 
VelAccLimitedSplineCo pSplineCommand, 
unsigned int numPoints, 
SplinePoint * pPoint, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered cubic basis spline motion command with multiple trigger events in which the spline 
is traversed while staying within the specified velocity and acceleration limits for each axis. The 
point positions are specified as relative positions. 

Parameters 
[in] 
channel The spline channel to execute 
the spline motion command. 
[in] 
pSplineCommand A pointer to a 
VelAccLimitedSplineComm 
and that contains the spline 
parameters. 
[in] 
numPoints The number of points in the 
pPoint array that is passed to 
this function. This value must 
be at least 2. 
[in] 
pPoint An array of SplinePoint 
objects that contain the spline 
point data. The length of the 
array must be equal to 
numPoints. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 

Remarks 

This function is similar to the StartCSplineMov function, except the specified points are not 
necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled 
toward each point so that it travels close to that point. 

The motion will begin when the specified multi-event trigger condition is satisfied. 



◆CreatePathIntplBuffer() 
See also 
Spline, Trigger Events 
WMX3APIFUNC 
CreatePathIntplBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of path interpolation commands. 

Parameters 
[in] 
axis The axis to allocate the buffer 
memory. 
[in] 
points The number of points to 
allocate memory for. Each 
path interpolation segment 
and each circular interpolation 
segment inserted by auto 
smoothing occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of path interpolation 
commands. This function allocates memory to execute the following path interpolation commands: 

StartPathIntplPos 
StartPathIntplMov 
StartPathIntpl3DPos 
StartPathIntpl3DMov 

If any of the above commands are called before this function, a default buffer memory for 
maxPathInterpolateAppendPoints will be allocated. If the memory allocation fails, or if more than 
maxPathInterpolateAppendPoints points are specified, the path interpolation command will return 
an error. To execute a path interpolation command with more than 
maxPathInterpolateAppendPoints points, this function must be called beforehand, specifying the 
required number of points. 

The buffer memory allocated to the axis assigned to axis[0] of the path interpolation command will 
be used to execute the path interpolation. The buffer memory of the remaining interpolation axes 
are not used. 


Allocating buffer memory space is an operation that can fail due to lack of memory space or 
fragmentation of memory. For deterministic operation, this function should be called during 
initialization to allocate memory for all axes that will potentially be the first axis of a path 
interpolation motion command. 

The maximum size of the path interpolation buffer memory space of each axis is 2GB-1Byte 
(2147483647 bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

It is not necessary to call this function again after buffer memory has been allocated once. (When 
the WMX3 engine is restarted, this function must be called again to allocate buffer memory.) 

Buffer memory that has been allocated can be freed using the FreePathIntplBuffer function. After 
freeing the path interpolation buffer memory of an axis, this function can be called again to 
reallocate a different amount of buffer memory. 

It is not necessary to free allocated memory using FreePathIntplBuffer before exiting the program. 
Any allocated memory is automatically freed when the WMX3 engine is closed. 

The GetPathIntplBufferPoints function can be used to find the amount of path interpolation buffer 
memory currently allocated to an axis. 

The GetPathIntplBytesPerPoint function can be used to convert the buffer memory size from 
points to bytes. 

See also 

Path Interpolation 

◆ 
FreePathIntplBuffer() 

WMX3APIFUN 
C 
WMX3APIFUN 
C 
FreePathIntplBu 
ffer ( 
int axis 
) 
Free path interpolation buffer memory for an axis. 
Parameters 
[in] 
axis The axis to free the buffer 
memory. 
Remarks 

This function frees the buffer memory that has been allocated with the CreatePathIntplBuffer 
function. This allows CreatePathIntplBuffer to be called again to allocate a different amount of 
memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplBufferPoints() 

WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
Get the amount of path interpolation buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the buffer 
memory size. 
[out] 
pPoints A pointer to an unsigned int 
that will contain the number of 
points that can be stored in 
the buffer memory. 
Remarks 

This function obtains the amount of path interpolation buffer memory currently allocated to an axis, 
in units of points (interpolation segments). 

To convert the buffer memory size from the number of points to bytes, use the 
GetPathIntplBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will return 0 in the 
pPoints parameter. 

◆GetPathIntplBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation buffer memory. This can be used to calculate the number of bytes of buffer memory 
required to store a particular number of points. For example, if this function returns 440, the number 
of bytes required to store 100000 points is 440*100000 = 44000000, or approximately 44MB. 

◆StartPathIntplPos() [1/3]
WMX3APIFUNC 
StartPathIntplPos ( PathIntplCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
) 
Start an absolute position path interpolation motion command. This motion combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as absolute 
positions. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 


append after 
pPathIntplCommand. 
[in[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 

PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 

Path Interpolation 

◆StartPathIntplMov() [1/3]
WMX3APIFUNC 
StartPathIntplMov ( PathIntplCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
) 
Start a relative position path interpolation motion command. This motion combines line interpolation 

and circular interpolation in one path. 
Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as relative positions 


(relative to the command 
pPathIntplCommand, 
Trigger * pTrigger, 
numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
(relative to the command 
positions at the time that this 
function is executed). 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 

Path Interpolation 

◆ 
StartPathIntplPos() [2/3] 


WMX3APIFUNC 
StartPathIntplPos 
( 
PathIntplCommand * 
unsigned int 
) 
Start an absolute position triggered path interpolation motion command. This motion combines line 


interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a trigger condition. The motion will only begin 
when the specified trigger condition is satisfied. All positions are specified as absolute positions. 

The StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this 
trigger type will cause the function to return an error. 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Motion 


◆StartPathIntplMov() [2/3]
WMX3APIFUNC 
StartPathIntplMov ( 
PathIntplCommand * pPathIntplCommand, 
Trigger * 
pTrigger, 
unsigned int numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
) 
Start a relative position triggered path interpolation motion command. This motion combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a trigger condition. The motion will only begin 
when the specified trigger condition is satisfied. All positions are specified as relative positions 
(relative to the command positions at the time that this function is executed). 

The StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this 
trigger type will cause the function to return an error. 

This function allocates memory dynamically when called for the first time for the first interpolating 


axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Motion 

◆StartPathIntplPos() [3/3]
WMX3APIFUNC 
StartPathIntplPos ( 
PathIntplCommand * pPathIntplCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
) 
Start an absolute position triggered path interpolation motion command with multiple trigger events. 
This motion combines line interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 


PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a multi-event trigger condition. The motion will 
only begin when the specified multi-event trigger condition is satisfied. All positions are specified as 
absolute positions. 

The StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this 
trigger type will cause the function to return an error. 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Events 

◆StartPathIntplMov() [3/3]
WMX3APIFUNC 
StartPathIntplMov ( 
PathIntplCommand * pPathIntplCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 0, 
PathIntplAdditionalCom pPathIntplAddlCommand 
) 
Start a relative position triggered path interpolation motion command with multiple trigger events. 
This motion combines line interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 


PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntplAdditionalComma 
nd objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a multi-event trigger condition. The motion will 
only begin when the specified multi-event trigger condition is satisfied. All positions are specified as 
relative positions (relative to the command positions at the time that this function is executed). 

The StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this 
trigger type will cause the function to return an error. 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Events 

◆OverridePathIntplVelocityMultiplier() 

WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
Override a path interpolation motion using a velocity multiplier. 

Parameters 
[in] 
axis The axis executing the path 
interpolation. 
[in] 
multiplier The velocity multiplier to 
apply. 
Remarks 

This function can be called while executing a path interpolation to change the profile velocity by the 
specified factor. The interpolating axes will accelerate or decelerate to the new velocity using the 
acceleration or deceleration of the path interpolation command. 

This function may be called multiple times. Each time this function is called, the new velocity is 
calculated as the original profile velocity of the path interpolation multiplied by the specified velocity 
multiplier. 

All other profile parameters, including the starting velocity and end velocity, are not changed by this 
function (except as noted below). The target positions of the path interpolation are not changed. 

If a different profile is specified for each segment of the path, the velocities of all profiles are 
multiplied by the specified multiplier. The end velocities of all profiles are also multiplied by the 
specified multiplier, except for the end velocity of the final segment of the path. 

The velocity multiplier must be between 0 and 2 inclusive. For example, to set the velocity to 50% of 
the original profile velocity, pass 0.5 to the multiplier argument. If 1 is passed to the multiplier 
argument, the velocity will be set equal to the original profile velocity of the path interpolation. 

If 0 is passed to the multiplier argument, the path interpolation will be paused as if the Pause 
function is called. The path interpolation can be resumed by calling this function again with a 
nonzero multiplier (the path interpolation can also be resumed by calling the Resume function, in 
which case the motion will be resumed using the multiplier immediately before it was paused). 

This function can also be used in place of the Resume function to resume a path interpolation that 
has been paused with the Pause function. 

If the velocity after applying the multiplier is below 1 user unit per second, the new velocity will be 
set to 1 user unit per second. 


Either of the two axes executing path interpolation can be passed to the axis argument. This 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the path interpolation will be recalculated. The standard 
behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a path interpolation command started with StartPathIntplPos 
or StartPathIntplMov, this function will return an error. 

◆StartPathIntpl3DPos() [1/3]
WMX3APIFUNC 
StartPathIntpl3DPos ( PathIntpl3DCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start an absolute position 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as absolute 
positions. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 
mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function allocates memory dynamically when called for the first time for the first interpolating 


axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 

3D Path Interpolation 

◆StartPathIntpl3DMov() [1/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as relative positions 
(relative to the command 
positions at the time that this 
function is executed). 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 


mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 

3D Path Interpolation 

◆StartPathIntpl3DPos() [2/3]
WMX3APIFUNC 
StartPathIntpl3DPos ( PathIntpl3DCommand * pPathIntplCommand, 
Trigger * 
pTrigger, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start an absolute position triggered 3D path interpolation motion. This motion command combines 
line interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
[in] 
numAddlCommands An optional argument that 


specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 

[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 

PathIntpl3DAdditionalCom 
mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a trigger condition. The motion will only begin 
when the specified trigger condition is satisfied. All positions are specified as absolute positions. 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
3D Path Interpolation, Trigger Motion 

◆StartPathIntpl3DMov() [2/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position triggered 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 


Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTrigger A pointer to an object of the 
Trigger class that specifies 
the trigger condition. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 
mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a trigger condition. The motion will only begin 
when the specified trigger condition is satisfied. All positions are specified as relative positions 
(relative to the command positions at the time that this function is executed). 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
3D Path Interpolation, Trigger Motion 

◆StartPathIntpl3DPos() [3/3]

WMX3APIFUNC 
StartPathIntpl3DPos 
( 
PathIntpl3DCommand * pPathIntplCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start an absolute position triggered 3D path interpolation motion command with multiple trigger 
events. This motion combines line interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 
mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

This function starts a path interpolation motion with a multi-event trigger condition. The motion will 
only begin when the specified multi-event trigger condition is satisfied. All positions are specified as 
absolute positions. 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 


pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
3D Path Interpolation, Trigger Events 

◆StartPathIntpl3DMov() [3/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position triggered 3D path interpolation motion command with multiple trigger 
events. This motion combines line interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. 
[in] 
pTriggerEvents A pointer to an object of the 
TriggerEvents class that 
contains the trigger events. 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 
mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 


This function starts a path interpolation motion with a multi-event trigger condition. The motion will 
only begin when the specified multi-event trigger condition is satisfied. All positions are specified as 
relative positions (relative to the command positions at the time that this function is executed). 

This function allocates memory dynamically when called for the first time for the first interpolating 
axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. 
See Function Calls related Memory Allocation for additional information regarding dynamically 
allocated memory. 

The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
3D Path Interpolation, Trigger Events 

◆OverridePathIntpl3DVelocityMultiplier() 
WMX3APIFUNC 
OverridePathIntpl3DVelo 
cityMultiplier ( int axis, 
double multiplier 
) 
Override a 3D path interpolation motion using a velocity multiplier. 

Parameters 
[in] 
axis The axis executing the 3D 
path interpolation. 
[in] 
multiplier The velocity multiplier to 
apply. 

Remarks 

This function can be called while executing a 3D path interpolation to change the profile velocity by 
the specified factor. The interpolating axes will accelerate or decelerate to the new velocity using 
the acceleration or deceleration of the 3D path interpolation command. 

This function may be called multiple times. Each time this function is called, the new velocity is 
calculated as the original profile velocity of the 3D path interpolation multiplied by the specified 
velocity multiplier. 


All other profile parameters, including the starting velocity and end velocity, are not changed by this 
function (except as noted below). The target positions of the 3D path interpolation are not changed. 

If a different profile is specified for each segment of the path, the velocities of all profiles are 
multiplied by the specified multiplier. The end velocities of all profiles are also multiplied by the 
specified multiplier, except for the end velocity of the final segment of the path. 

The velocity multiplier must be between 0 and 2 inclusive. For example, to set the velocity to 50% of 
the original profile velocity, pass 0.5 to the multiplier argument. If 1 is passed to the multiplier 
argument, the velocity will be set equal to the original profile velocity of the 3D path interpolation. 

If 0 is passed to the multiplier argument, the path interpolation will be paused as if the Pause 
function is called. The path interpolation can be resumed by calling this function again with a 
nonzero multiplier (the path interpolation can also be resumed by calling the Resume function, in 
which case the motion will be resumed using the multiplier immediately before it was paused). 

This function can also be used in place of the Resume function to resume a path interpolation that 
has been paused with the Pause function. 

If the velocity after applying the multiplier is below 1 user unit per second, the new velocity will be 
set to 1 user unit per second. 

Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel. 

[in] 
points The number of points to 
allocate memory for. Each 
linear or circular interpolation 
segment in the path occupies 
one point in the memory, and 
an additional point if an auto 
smoothing segment is 
inserted. 

Remarks 

When the WMX3 engine is started, no memory is allocated for execution of path interpolation with 
rotation. This function must be called before a path interpolation with rotation channel can execute 
motion commands. 

Each channel has a separate buffer memory space. This function must be called for each path 
interpolation channel before that channel can execute motion commands. 

Allocating buffer memory space is an operation that can fail due to lack of memory space or 
fragmentation of memory. For deterministic operation, this function should be called during 
initialization to allocate memory for all path interpolation channels that will potentially be used by the 
program. 

The maximum size of the buffer memory space of a path interpolation with rotation channel is 2GB1Byte 
(2147483647 bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

It is not necessary to call this function again after buffer memory has been allocated once. The 
ClearPathIntplWithRotation function will clear the contents of the buffer memory, but will not free 
the buffer memory itself. (When the WMX3 engine is restarted, this function must be called again to 
allocate buffer memory.) 

Buffer memory that has been allocated can be freed using the FreePathIntplWithRotationBuffer 
function. After freeing the buffer memory of a path interpolation with rotation channel, this function 
can be called again to reallocate a different amount of buffer memory. 

It is not necessary to free allocated memory using FreePathIntplWithRotationBuffer before exiting 
the program. Any allocated memory is automatically freed when the WMX3 engine is closed. 

The GetPathIntplWithRotationBytesPerPoint function can be used to convert the buffer memory 
size from points to bytes. 

See also 

Path Interpolation with Rotation 


◆FreePathIntplWithRotationBuffer() 
WMX3APIFUN 
C 
FreePathIntplWi 
thRotationBuffer ( 
int channel ) 
Free buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePathIntplWithRotationBuffer function. This allows CreatePathIntplWithRotationBuffer to 
be called again to allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplWithRotationBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with rotation buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
448, the number of bytes required to store 10000 points is 448*10000 = 4480000, or about 4MB. 

◆SetPathIntplWithRotationConfiguration() 

WMX3APIFUNC 
SetPathIntplWithRotatio 
nConfiguration ( int channel, 
WMX3APIFUNC 
SetPathIntplWithRotatio 
nConfiguration ( int channel, 
PathIntplWithRotationC pConfig 
) 
Set the configuration data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pConfig A pointer to an 
PathIntplWithRotationConfi 
guration object that contains 
the path interpolation with 
rotation configuration data. 
Remarks 

This function configures a path interpolation with rotation channel with data required for operation, 
such as the commanded axes. 

This function must be called before interpolation commands can be added to the path interpolation 
with rotation channel with the AddPathIntplWithRotationCommand function. 

Before configuring a path interpolation with rotation channel, buffer memory for path interpolation 
with rotation must be allocated using the CreatePathIntplWithRotationBuffer function. 

◆AddPathIntplWithRotationCommand() 

WMX3APIFUNC 
AddPathIntplWithRotatio 
nCommand ( int channel, 
WMX3APIFUNC 
AddPathIntplWithRotatio 
nCommand ( int channel, 
PathIntplWithRotationC pCommand 
) 
Add interpolation commands to a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pCommand A pointer to a 
PathIntplWithRotationCom 
mand object that contains the 
path interpolation with rotation 
command data. 

Remarks 

This function adds interpolation commands to a path interpolation with rotation channel. The added 
commands are not executed until the StartPathIntplWithRotation function is called. 

Before adding point segment commands, buffer memory for path interpolation with rotation must be 
allocated using the CreatePathIntplWithRotationBuffer function. 

Before adding point segment commands, the path interpolation channel must be configured using 
the SetPathIntplWithRotationConfiguration function. 

Calling this function for the first time after clearing a path interpolation with rotation channel fixes the 
starting position of the X axis, Y axis, rotational axis, and if enabled, the Z axis on the path. Moving 
the X axis, Y axis, rotational axis, or Z axis after calling this function will move the axis off the path 
and cause the StartPathIntplWithRotation function to return the 
PathInterpolationAxesHaveBeenMoved error. If this occurs, the path interpolation with rotation 
channel must be cleared and the path must be defined again. 

See also 

Path Interpolation with Rotation 

◆StartPathIntplWithRotation() [1/9]

tPathIntplWithRotation() [1/9] 


WMX3APIFUN 
C 
StartPathIntplWi 
thRotation ( int channel ) 
Execute motion for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function moves the axes of a path interpolation with rotation channel to the end of the path, 
using the configuration parameters set for the path interpolation with rotation channel. 

It is possible to execute the path interpolation with rotation only partway along the path using the 
StartPathIntplWithRotation(int channel, double pos) or StartPathIntplWithRotation(int 
channel, unsigned int point) functions or by stopping execution with the Stop function. If this 
function is called afterthe path has been executed partway, the execution will continue from the 
current position. 

If a path interpolation with rotation is executed partway, and then a commanded axis is moved using 
a different function, this function will return an error. If the path interpolation with rotation is stopped 
with another function such as ExecQuickStop, this function will return an error. In this case, the 
path must be reset by calling ClearPathIntplWithRotation and then the path must be defined 
again. 

Point segment commands must be added to the path interpolation with rotation channel using the 
AddPathIntplWithRotationCommand function before this function is called. This function can be 
executed as long as the path contains at least one point segment. 

See also 

Path Interpolation with Rotation 

◆StartPathIntplWithRotation() [2/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
Trigger * pTrigger 
) 
Execute triggered motion for a path interpolation with rotation channel. The motion starts when the 

trigger condition is satisfied. 
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation 
will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [3/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation 
will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆StartPathIntplWithRotation() [4/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos 
) 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos 
) 
Execute motion to the specified position for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
Remarks 

This function moves the axes of a path interpolation with rotation channel along the path to the 
specified position, using the configuration parameters set for the path interpolation with rotation 
channel. The position is specified as the distance along the path starting from the beginning of the 
path. If the specified position is greater than the length of the path, the path interpolation will be 
executed to the end of the path. 

If the path interpolation with rotation has been executed partway along the path using this function, 
the StartPathIntplWithRotation(int channel, unsigned int point) function, or by stopping 
execution with the Stop function, this function can be used to backtrack along the path by 
specifying a smaller position than the current position. If the specified position is less than zero, the 
path interpolation will backtrack to the beginning of the path. The motion of the rotational axis during 
backtracking will be identical as during the forward motion. 

This function is able to move the axes to any position along the path, even positions that are 
partway along segments. 

It is not trivial to convert a specific X and Y position along the path to a distance that can be passed 
to this function. This function should mostly be used to move relative distances from the current 
position along the path (this position can be obtained from the PathIntplWithRotationStatus.pos 
status). To move to a specific point, use the StartPathIntplWithRotation(int channel, unsigned 
int point) function instead. 

See also 

Path Interpolation with Rotation 


◆StartPathIntplWithRotation() [5/9]
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( 
int 
double 
Trigger * 
channel, 
pos, 
pTrigger 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel. The 
motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [6/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆StartPathIntplWithRotation() [7/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
Execute motion to the specified point for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 

maxPathIntplWithRotationC 
hannel. 
[in] 
point The target point to move to. 

Remarks 

This function moves the axes of a path interpolation with rotation along the path to the specified 
point, using the configuration parameters set for the path interpolation with rotation channel. The 
points are defined as the indices of the command segment added with the 
AddPathIntplWithRotationCommand function. Auto smoothing segments inserted between linear 
interpolations do not increment this index. The axes will move to the position at the beginning of this 
command segment. 

If the path interpolation with rotation has been executed partway along the path using this function, 
the StartPathIntplWithRotation(int channel, double pos) function, or by stopping execution with 
the Stop function, this function can be used to backtrack along the path by specifying a point from 
earlier in the path. The motion of the rotational axis during backtracking will be identical as during 
the forward motion. 

It is possible to specify a point equal to the total number of command segments in the path. In this 
case, the axis will move to the end of the path. If the specified point is greater than the total number 
of command segments in the path, the axis will also move to the end of the path. 

See also 

Path Interpolation with Rotation 

◆StartPathIntplWithRotation() [8/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
Trigger * pTrigger 
) 
Execute triggered motion to the specified point for a path interpolation with rotation channel. The 
motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
point The target point to move to. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except 
the path interpolation will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [9/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion to the specified point for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
point The target point to move to. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except 
the path interpolation will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆ClearPathIntplWithRotation() 

WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
Clear all data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function clears all data for a path interpolation with rotation channel, including any existing 
point segment commands and configuration settings. Use this function if a path interpolation with 
rotation channel must be reset. 

◆GetPathIntplWithRotationStatus() 

WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
PathIntplWithRotationSpStatus 
) 
Get the current status for a path inteprolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[out] 
pStatus A pointer to a 
PathIntplWithRotationStatu 
s class object that will contain 
the status of the path 
interpolation with rotation 
channel. 

Remarks 

Use this function to get the status of a path interpolation with rotation channel. 

◆CreatePathIntplLookaheadBuffer() 
WMX3APIFUNC 
CreatePathIntplLookahe 
adBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 


maxPathIntplLookaheadCh 
annel. 
[in] 
points The number of points to 
allocate memory for. Each 
linear or circular interpolation 
segment in the path occupies 
at least two points, and more 
if the segment distance is 
greater than the sample 
distance. For example, a 
linear interpolation with a 
length of 500 user units and a 
sample distance of 10 user 
units will occupy 500 / 10 = 50 
points. 
Remarks 

When the WMX3 engine is started, no memory is allocated for execution of path interpolation with 
look ahead. This function must be called before a path interpolation with look ahead channel can 
execute motion commands. 

Each channel has a separate buffer memory space. This function must be called for each path 
interpolation channel before that channel can execute motion commands. 

Allocating buffer memory space is an operation that can fail due to lack of memory space or 
fragmentation of memory. For deterministic operation, this function should be called during 
initialization to allocate memory for all path interpolation channels that will potentially be used by the 
program. 

The maximum size of the buffer memory space of a path interpolation with look ahead channel is 
2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

It is not necessary to call this function again after buffer memory has been allocated once. The 
ClearPathIntplLookahead function will clear the contents of the buffer memory, but will not free the 
buffer memory itself. (When the WMX3 engine is restarted, this function must be called again to 
allocate buffer memory.) 

Buffer memory that has been allocated can be freed using the FreePathIntplLookaheadBuffer 
function. After freeing the buffer memory of a path interpolation with look ahead channel, this 
function can be called again to reallocate a different amount of buffer memory. 

It is not necessary to free allocated memory using FreePathIntplLookaheadBuffer before exiting 
the program. Any allocated memory is automatically freed when the WMX3 engine is closed. 



The GetPathIntplLookaheadBytesPerPoint function can be used to convert the buffer memory 
size from points to bytes. 

See also 

Path Interpolation with Look Ahead 

◆FreePathIntplLookaheadBuffer() 
WMX3APIFUN 
C 
FreePathIntplLo 
okaheadBuffer ( int channel ) 
Free buffer memory for a path interpolation with lookahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePathIntplLookaheadBuffer function. This allows CreatePathIntplLookaheadBuffer to be 
called again to allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplLookaheadBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with look ahead buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
288, the number of bytes required to store 10000 points is 288*10000 = 2880000, or about 3MB. 

◆SetPathIntplLookaheadConfiguration() 

WMX3APIFUNC 
SetPathIntplLookahead 
Configuration ( int channel, 
WMX3APIFUNC 
SetPathIntplLookahead 
Configuration ( int channel, 
PathIntplLookaheadCon pConfig 
) 
Set the configuration data for a path interpolation with lookahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
pConfig A pointer to an 
PathIntplLookaheadConfigu 
ration object that contains the 
path interpolation with look 
ahead configuration data. 

Remarks 

This function configures a path interpolation with look ahead channel with data required for 
operation, such as the commanded axes and the axis velocity and acceleration limits. 

This function must be called before interpolation commands can be added to the path interpolation 
with look ahead channel with the AddPathIntplLookaheadCommand function. 

After points are added to the path interpolation with look ahead channel, the configuration cannot 
be changed with this function until the channel is cleared with the ClearPathIntplLookahead 
function or the channel buffer is freed and then reallocated with the 
FreePathIntplLookaheadBuffer and CreatePathIntplLookaheadBuffer functions. 

Before configuring a path interpolation with look ahead channel, buffer memory for path 
interpolation with look ahead must be allocated using the CreatePathIntplLookaheadBuffer 
function. 

See also 

Path Interpolation with Look Ahead 

◆AddPathIntplLookaheadCommand() [1/2]

WMX3APIFUNC 
AddPathIntplLookahead 
Command ( channel, 
) 
WMX3APIFUNC 
AddPathIntplLookahead 
Command ( channel, 
) 
int 
PathIntplLookaheadCom pCommand 
Add interpolation commands to a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
pCommand A pointer to a 
PathIntplLookaheadComma 
nd object that contains the 
path interpolation with look 
ahead command data. 

Remarks 

This function adds interpolation commands to a path interpolation with look ahead channel. The 
added commands are not executed until the StartPathIntplLookahead function is called. 

Commands may be added while a path interpolation with look ahead channel is executing. Doing so 
can modify the velocity and acceleration profiles of the path interpolation, including the velocity and 
acceleration profiles of point segments that were already in the buffer. For example, adding point 
segments before an executing path interpolation finishes will cause the path interpolation to 
continue executing at the commanded velocity without decelerating until the newly added point 
segments have been traversed. 

Before adding point segment commands, buffer memory for path interpolation with look ahead must 
be allocated using the CreatePathIntplLookaheadBuffer function. 

Before adding point segment commands, the path interpolation channel must be configured using 
the SetPathIntplLookaheadConfiguration function. 

When adding more commands than maxPathIntplLookaheadAppendPoints commands to the 
path interpolation with look ahead channel, use the overloaded 
AddPathIntplLookaheadCommand function with the numCommands argument and specify 
all commands with one function call. Calling the AddPathIntplLookaheadCommand function 
multiple times instead could cause the velocity along the path to not be ideal. 



◆AddPathIntplLookaheadCommand() [2/2]
See also 
Path Interpolation with Look Ahead 

WMX3APIFUNC 
AddPathIntplLookahead 
Command ( int channel, 
unsigned int numCommands, 
WMX3APIFUNC 
AddPathIntplLookahead 
Command ( int channel, 
unsigned int numCommands, 
PathIntplLookaheadCom pCommand 
) 
Add multiple interpolation commands to a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
numCommands The number of commands 
that will be specified. This is 
the size of the 
PathIntplLookaheadComma 
nd array passed to the 
pCommand argument. This 
must be greater than or equal 
to 1. 
[in] 
pCommand A pointer to an array of 
PathIntplLookaheadComma 
nd objects that contains the 
path interpolation with look 
ahead command data. 

Remarks 

This function is an overloaded version of the AddPathIntplLookaheadCommand function that 
allows multiple PathIntplLookaheadCommand commands to be specified with one function call. 

Each PathIntplLookaheadCommand can contain at most 
maxPathIntplLookaheadAppendPoints points. When a larger number of points needs to be 

added, this function should be used instead of calling AddPathIntplLookaheadCommand multiple 
times. The execution time is much faster when specifying all points at once with this function. 

See also 

Path Interpolation with Look Ahead 


◆StartPathIntplLookahead() 
WMX3APIFUN 
C 
StartPathIntplLo 
okahead ( int channel ) 
Start the motion for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

Point segment commands must be added to the path interpolation with look ahead channel using 
the AddPathIntplLookaheadCommand function before this function is called. This function can be 
executed as long as the path contains at least one point segment. 

See also 

Path Interpolation with Look Ahead 

◆StopPathIntplLookahead() 

WMX3APIFUN 
C 
StopPathIntplLo 
okahead ( int channel ) 
WMX3APIFUN 
C 
StopPathIntplLo 
okahead ( int channel ) 
Stop the motion for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function stops the motion for a path interpolation with look ahead channel. The axes will 
decelerate along the commanded path using the compositeAcc specified for the path interpolation. 

After the axes stop, the path interpolation can be resumed by calling the StartPathIntplLookahead 
function again. The velocity and acceleration profiles along the path will be recalculated. 

◆ClearPathIntplLookahead() 

WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
Clear all data for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function clears all data for a path interpolation with look ahead channel, including any existing 
point segment commands and statuses. Use this function if a path interpolation with look ahead 
channel must be reset. 

◆GetPathIntplLookaheadStatus() 

WMX3APIFUNC 
GetPathIntplLookahead 
Status ( int channel, 
WMX3APIFUNC 
GetPathIntplLookahead 
Status ( int channel, 
PathIntplLookaheadStatu pStatus 
) 
Get the current status for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[out] 
pStatus A pointer to a 
PathIntplLookaheadStatus 
class object that will contain 
the status of the path 
interpolation with look ahead 
channel. 

Remarks 

Use this function to get the status of a path interpolation with look ahead channel. 

◆StartCoordinatedPos() [1/3]
WMX3APIFUN 
C 
StartCoordinate 
dPos ( CoordinatedPos pPosCommand ) 
Start an interpolation between two axes, where one axis executes a normal position command and 
the second axis travels a specified distance in the same amount of time. 

Parameters 
[in] 
pPosCommand A pointer to a 
CoordinatedPosCommand 
that contains the coordinated 
position command 
parameters. 


Remarks 

This function executes coordinated motion for two axes. The first axis executes a regular position 
command with the specified profile, and the second axis travels the specified distance in the same 
time as the first axis position command. The velocity of the second axis increases at a constant rate 
until the midpoint, and then decreases at a constant rate until the axis reaches the target position. 
The axis2SmoothRatio can be specified to convert that amount of the second axis velocity profile 
into a parabolic profile. 

The following plot shows the second axis velocity profile when the axis2SmoothRatio is 0. 


The following plot shows the second axis velocity profile when the axis2SmoothRatio is 0.5. 


The following plot shows the second axis velocity profile when the axis2SmoothRatio is 1. 


◆StartCoordinatedPos() [2/3]
WMX3APIFUNC 
StartCoordinatedPos ( 
) 
unsigned int 
numCommands, 
CoordinatedPosComma pPosCommand 
Start multiple interpolations, each between pairs of two axes, where one axis executes a normal 
position command and the second axis travels a specified distance in the same amount of time. 

Parameters 
[in] 
numCommands The number of coordinated 
position commands. Each 
command controls a pair of 
two axes. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
CoordinatedPosCommand 
class that contain the 
parameters of the coordinated 
position commands. The 
number of objects in the array 
must be equal to 
numCommands. 
Remarks 

This command executes the StartCoordinatedPos function for multiple axes. 


◆StartCoordinatedPos() [3/3]
WMX3APIFUN 
C 
StartCoordinate 
dPos ( CoordinatedJer pPosCommand ) 
Start an interpolation between two or more axes, where one axis executes a normal position 
command and the remaining axes travel the specified distances in the same amount of time. 

Parameters 
[in] 
pPosCommand A pointer to a 
CoordinatedJerkRatioPosC 
ommand that contains the 
coordinated position 
command parameters. 

Remarks 

This function executes coordinated motion for two or more axes. The first axis executes a regular 
position command with the specified profile, and the remaining axes travel the specified distances 
in the same time as the first axis position command. Each remaining axis accelerates at the 
specified acceleration, stops accelerating at a velocity calculated from the movement distance and 
acceleration, and decelerates at the same magnitude at the specified acceleration to finish the 
motion in the same time as the first axis. If it is impossible to finish the motion in the same time as 
the first axis with the specified acceleration, the acceleration is increased. The acceleration and 
deceleration segments will have velocity profile that is partway between trapezoidal and S-curve 
depending on the specified jerk ratio (the jerk ratio is the ratio between 0 and 1 for which the 
acceleration changes during the acceleration and deceleration segments). 

The following plot shows how the velocity profile of one of the remaining axes changes as the 
movement distance is increased while keeping the acceleration fixed. The jerk ratio is set to 0 
(same as the trapezoidal profile) so that the shape of the profile can be easily seen. 


Compared to the StartCoordinatedPos(CoordinatedPosCommand *pPosCommand) function, it 
is possible to specify multiple follower axes, and the velocity profiles of the follower axes are 
calculated differently. 

◆StartTwoLinkLinearPos() 
WMX3APIFUN 
C 
StartTwoLinkLin 
earPos ( 
TwoLinkLinearC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a rotary axis connected to a 
linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows 
the simulated motion of the rotary axis. The target position is specified in absolute coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkLinearCommand 
that contains the two link 
motion parameters. 
Remarks 


This function simulates a rotary axis connected to the commanded linear axis with two links. A 
profile is generated for the rotary axis and the linear axis follows the simulated motion of the rotary 
axis as if it is pulled by the two links. 

The following figure shows the arrangment of the axes: 


When R = 0 degrees, the two links will be fully outstretched and L will be equal to Lmax. 
When R = 180 degrees (or Rspan / 2), the two links will be folded and L will be equal to Lmin. 
The length of the links, L1 and L2, are specified as positive values. L1 must be less than or equal to 

L2, as otherwise, the rotary axis is unable to turn 360 degrees. 

Lzero is the location of the rotary axis along the linear axis. Lzero can be positive, negative, or 0. 
Lmin and Lmax are calculated from L1, L2, and Lzero, as follows: 
Lmin = Lzero + L2 -L1 

Lmax = Lzero + L1 + L2 

Lpolarity can be set to -1 to flip the two link arrangement horizontally about Lzero. If Lpolarity is -1, 
Lmin and Lmax are instead calculated as follows: 
Lmin = Lzero -L2 + 1 

Lmax = Lzero -L1 -L2. 
Rspan determines the number of units in one rotation of the rotary axis. The profile parameters used 

by the rotary axis are specified using the same units. For example, if Rspan is 1000 [units], a 
velocity of 10000 [units/second] will move the rotary axis at a velocity of 10 rotations per second. 
Rzero determines the position of the rotary axis when the two links are fully outstretched and L 

equals Lmax. 
Rspan and Rzero are shown in the following diagram: 


The target position is specified for the linear axis (unless specifyTargetInRotaryCoordinates is set). 
The starting and target positions of the simulated rotary axis is calculated based on the current and 
target positions of the commanded linear axis. A motion profile is generated for the simulated rotary 
axis and the linear axis will follow the motion of the rotary axis. 

If the target position is between Lmin and Lmax, the commanded linear axis will move to that 
position. If the target position is outside this range, the linear axis will move in the direction of the 
target position, but will change directions whenever it reaches Lmin or Lmax. The linear axis will 
move a total distance equal to the target position minus the initial position. It is possible for the linear 
axis to move back and forth betwen Lmin and Lmax multiple times if the target position is far 
enough. The motion profile generated for the rotary axis will decelerate to zero velocity whenever 
the linear axis moves to Lmin or Lmax. 

◆ 
StartTwoLinkLinearMov() 
WMX3APIFUN 
C 
StartTwoLinkLin 
earMov ( TwoLinkLinearC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a rotary axis connected to a 
linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows 
the simulated motion of the rotary axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkLinearCommand 
that contains the two link 
motion parameters. 

Remarks 

This function is similar to StartTwoLinkLinearPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 


◆StartTwoLinkRotaryPos() 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryPos ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in absolute coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 

Remarks 

This function is similar to StartTwoLinkLinearPos, except the commanded axis is the rotary axis 
and the simulated axis is the linear axis. 

The axis commanded by this function must be a rotary axis (the Single Turn Mode parameter must 
be set to true). 

Rspan is set equal to the Single Turn Encoder Count parameter (after being adjusted by the Gear 
Ratio Numerator and Gear Ratio Denominator parameters). 

If the target position is between 0 and Rspan, the direction of motion will be adjusted so that the 
total distance moved is at most Rspan / 2. 

The direction of rotation will be the same for the entire motion, and will be in the direction of the 
target position compared to the current position. The axis may rotate multiple times if the target 
position is outside the range from 0 to Rspan. 

The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos() 

WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredLinearP 
os ( 
WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredLinearP 
os ( TwoLinkLinearC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a rotary axis connected to a 
linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows 
the simulated motion of the rotary axis. The target position is specified in absolute coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 

TwoLinkLinearCommand 

that contains the two link 
motion parameters. 

Remarks 

This function is similar to StartTwoLinkLinearPos, except L2 is not tethered to the linear axis, and 
may move up and down freely. L2 is always oriented parallel to the linear axis. The following image 
shows this arrangement: 

◆StartTwoLinkUntetheredLinearMov() 

WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredLinearM 
ov ( 
WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredLinearM 
ov ( TwoLinkLinearC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a rotary axis connected to a 
linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows 
the simulated motion of the rotary axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkLinearCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkUntetheredLinearPos, except the target position is 
specified in relative coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredRotaryPos() 

WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredRotaryP 
os ( 
WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredRotaryP 
os ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in absolute coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except L2 is not tethered to the linear axis, and 
may move up and down freely. L2 is always oriented parallel to the linear axis. Also see the image 
in the discussion of StartTwoLinkUntetheredLinearPos. 

◆StartTwoLinkUntetheredRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredRotary 
Mov ( 
WMX3APIFUN 
C 
StartTwoLinkUn 
tetheredRotary 
Mov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 

Remarks 

This function is similar to StartTwoLinkUntetheredRotaryPos, except the target position is 
specified in relative coordinates (relative to the current position of the commanded axis). 

◆SimulatePosAtTime() [1/2]
WMX3APIFUNC 
SimulatePosAtTime ( SimulatePathIntplComm pPathIntplCommand, 
double timeMilliseconds, 
double * pPos1, 
double * pPos2, 
double * pMoveDistance, 
double * pRemainDistance, 
double * pTotalDistance 
) 
Simulate a path interpolation command without moving any axes. The move distance, remain 
distance, and total distance after the path interpolation runs for a specified amount of time are 
returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 
SimulatePathIntplCommand 
class that contains the 


parameters for the path 
interpolation. 
[in] 
timeMilliseconds The amount of time elapsed. 
This value is in units of 
milliseconds. 
[out] 
pPos1 A pointer to a double type 
variable that will contain the 
position that the first axis is at 
after the specified amount of 
time elapses. 
[out] 
pPos2 A pointer to a double type 
variable that will contain the 
position that the second axis 
is at after the specified 
amount of time elapses. 
[out] 
pMoveDistance A pointer to a double type 
variable that will contain the 
total distance moved along 
the path in the two 
dimensional plane formed by 
the first and second axes. 
[out] 
pRemainDistance A pointer to a double type 
variable that will contain the 
total distance remaining in the 
path in the two dimensional 
plane formed by the first and 
second axes. 
[out] 
pTotalDistance A pointer to a double type 
variable that will contain the 
total distance along the entire 
path in the two dimensional 
plane formed by the first and 
second axes. This value is 
always equal to the sum of 
the values returned by 
pMoveDistance and 
pRemainDistance. 

◆SimulateTimeAtPos() [1/2]
WMX3APIFUNC 

SimulateTimeAtPos ( SimulateTimeAtPos ( SimulatePathIntplComm pPathIntplCommand, 
double specificPos1, 
double specificPos2, 
unsigned int minimumSearchIndex, 
double * 
double * 
double * pTotalTimeMilliseconds 
) 
pMoveTimeMilliseconds, 
pRemainTimeMilliseconds 
Simulate a path interpolation command without moving any axes. The elapsed time and remaining 
time after the axis reaches the specified position are returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 
SimulatePathIntplCommand 
class that contains the 
parameters for the path 
interpolation. 
[in] 
specificPos1 The position of the first axis at 
which to calculate the move 
time, remain time, and total 
time of the path interpolation 
command. 
[in] 
specificPos2 The position of the second 
axis at which to calculate the 
move time, remain time, and 
total time of the path 
interpolation command. 
[in] 
minimumSearchIndex The minimum index of the 
interpolation segments 
defined in 
pPathIntplCommand at which 
to search for the specified 
positions. 
[out] 
pMoveTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time elapsed when 
the axes reach the position of 
specificPos1 and 
specificPos2. The units are 
milliseconds. 


[out] 
pRemainTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time remaining in 
the path interpolation when 
the axes reach the position of 
specificPos1 and 
specificPos2. The units are 
milliseconds. 
[out] 
pTotalTimeMilliseconds A pointer to a double type 
variable that will contain the 
total time of the path 
interpolation. This value is 
always equal to the sum of 
the values returned by 
pMoveTime and 
pRemainTime. The units are 
milliseconds. 

Remarks 

This function simulates a path interpolation command, and calculates the time at which the axes 
reach a particular position during the path interpolation. If the axes do not pass the specified 
position during the entire path interpolation, this function will return an error. The specified position 
must be within 1 user unit of the path for this function to consider the interpolating axes to have 
crossed the position. 

By setting the minimumSearchIndex value appropriately, simulations can be performed for path 
interpolations in which the path crosses the specified position multiple times. 

For example, if the path crosses the specified position during the interpolation segments at indices 
0, 2, and 4: 

minimumSearchIndex = 0 will cause the simulation to calculate the move time, remain time, and 
total time for the first time that the path crosses the specified position. 

minimumSearchIndex = 1 or 2 will cause the simulation to calculate the move time, remain time, 
and total time for the second time that the path crosses the specified position. 

minimumSearchIndex = 3 or 4 will cause the simulation to calculate the move time, remain time, 
and total time for the third time that the path crosses the specified position. 

◆SimulateTimeAtDist() [1/2]
WMX3APIFUNC 

SimulateTimeAtDist ( SimulateTimeAtDist ( SimulatePathIntplComm pPathIntplCommand, 
double specificDistance, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 
Simulate a path interpolation command without moving any axes. The move time, remain time, and 
total time after the path interpolation runs for the specified distance are returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 
SimulatePathIntplCommand 
class that contains the 
parameters for the path 
interpolation. 
[in] 
specificDistance The distance along the path 
at which to calculate the move 
time, remain time, and total 
time of the path interpolation 
command. 
[out] 
pMoveTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time elapsed when 
the axes travel along the path 
a distance equal to 
specificDistance. The units 
are milliseconds. 
[out] 
pRemainTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time remaining in 
the path interpolation when 
the axes travel along the path 
a distance equal to 
specificDistance. The units 
are milliseconds. 
[out] 
pTotalTimeMilliseconds A pointer to a double type 
variable that will contain the 
total time of the path 
interpolation. This value is 
always equal to the sum of 
the values returned by 



◆SimulatePosAtTime() [2/2]
pMoveTime and 
pRemainTime. The units are 
milliseconds. 
WMX3APIFUNC 
SimulatePosAtTime ( 
SimulatePathIntpl3DCom pPathIntplCommand, 
double 
double * 
double * 
double * 
double * 
double * 
timeMilliseconds, 
pPos1, 
pPos2, 
pPos3, 
pMoveDistance, 
pRemainDistance, 
double * pTotalDistance 
) 
Simulate a 3D path interpolation command without moving any axes. The move distance, remain 
distance, and total distance after the 3D path interpolation runs for a specified amount of time are 
returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 
SimulatePathIntpl3DComma 
nd class that contains the 
parameters for the 3D path 
interpolation. 
[in] 
timeMilliseconds The amount of time elapsed. 
This value is in units of 
milliseconds. 
[out] 
pPos1 A pointer to a double type 
variable that will contain the 
position that the first axis is at 
after the specified amount of 
time elapses. 
[out] 
pPos2 A pointer to a double type 
variable that will contain the 
position that the second axis 
is at after the specified 
amount of time elapses. 


[out] 
pPos3 A pointer to a double type 
variable that will contain the 
position that the third axis is 
at after the specified amount 
of time elapses. 
[out] 
pMoveDistance A pointer to a double type 
variable that will contain the 
total distance moved along 
the three dimensional path. 
[out] 
pRemainDistance A pointer to a double type 
variable that will contain the 
total distance remaining in the 
three dimensional path. 
[out] 
pTotalDistance A pointer to a double type 
variable that will contain the 
total distance along the entire 
three dimensional path. This 
value is always equal to the 
sum of the values returned by 
pMoveDistance and 
pRemainDistance. 

◆SimulateTimeAtPos() [2/2]
WMX3APIFUNC 
SimulateTimeAtPos ( SimulatePathIntpl3DCom pPathIntplCommand, 
double 
double 
double 
specificPos1, 
specificPos2, 
specificPos3, 
unsigned int minimumSearchIndex, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 
Simulate a 3D path interpolation command without moving any axes. The elapsed time and 
remaining time after the axis reaches the specified position are returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 


SimulatePathIntpl3DComma 
nd class that contains the 
parameters for the 3D path 
interpolation. 
[in] 
specificPos1 The position of the first axis at 
which to calculate the move 
time, remain time, and total 
time of the 3D path 
interpolation command. 
[in] 
specificPos2 The position of the second 
axis at which to calculate the 
move time, remain time, and 
total time of the 3D path 
interpolation command. 
[in] 
specificPos3 The position of the third axis 
at which to calculate the move 
time, remain time, and total 
time of the 3D path 
interpolation command. 
[in] 
minimumSearchIndex The minimum index of the 
interpolation segments 
defined in 
pPathIntplCommand at which 
to search for the specified 
positions. 
[out] 
pMoveTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time elapsed when 
the axes reach the position in 
three dimensions specified by 
specificPos1, specificPos2, 
and specificPos3. The units 
are milliseconds. 
[out] 
pRemainTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time remaining in 
the 3D path interpolation 
when the axes reach the 
position in three dimensions 
specified by specificPos1, 
specificPos2, and 
specificPos3. The units are 


milliseconds. 
[out[out] 
pTotalTimeMilliseconds A pointer to a double type 
variable that will contain the 
total time of the 3D path 
interpolation. This value is 
always equal to the sum of 
the values returned by 
pMoveTime and 
pRemainTime. The units are 
milliseconds. 

Remarks 

This function simulates a 3D path interpolation command, and calculates the time at which the axes 
reach a particular position during the 3D path interpolation. If the axes do not pass the specified 
position during the entire 3D path interpolation, this function will return an error. The specified 
position must be within 1 user unit of the path for this function to consider the interpolating axes to 
have crossed the position. 

By setting the minimumSearchIndex value appropriately, simulations can be performed for path 
interpolations in which the path crosses the specified position multiple times. 

For example, if the path crosses the specified position during the interpolation segments at indices 
0, 2, and 4: 

minimumSearchIndex = 0 will cause the simulation to calculate the move time, remain time, and 
total time for the first time that the path crosses the specified position. 

minimumSearchIndex = 1 or 2 will cause the simulation to calculate the move time, remain time, 
and total time for the second time that the path crosses the specified position. 

minimumSearchIndex = 3 or 4 will cause the simulation to calculate the move time, remain time, 
and total time for the third time that the path crosses the specified position. 

◆SimulateTimeAtDist() [2/2]
WMX3APIFUNC 
SimulateTimeAtDist ( SimulatePathIntpl3DCom pPathIntplCommand, 
double specificDistance, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 

Simulate a 3D path interpolation command without moving any axes. The move time, remain time, 
and total time after the 3D path interpolation runs for the specified distance are returned. 

Parameters 
[in] 
pPathIntplCommand A pointer to an object of the 
SimulatePathIntpl3DComma 
nd class that contains the 
parameters for the 3D path 
interpolation. 
[in] 
specificDistance The distance along the path 
at which to calculate the move 
time, remain time, and total 
time of the 3D path 
interpolation command. 
[out] 
pMoveTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time elapsed when 
the axes travel along the path 
a distance equal to 
specificDistance. The units 
are milliseconds. 
[out] 
pRemainTimeMilliseconds A pointer to a double type 
variable that will contain the 
amount of time remaining in 
the 3D path interpolation 
when the axes travel along 
the path a distance equal to 
specificDistance. The units 
are milliseconds. 
[out] 
pTotalTimeMilliseconds A pointer to a double type 
variable that will contain the 
total time of the 3D path 
interpolation. This value is 
always equal to the sum of 
the values returned by 
pMoveTime and 
pRemainTime. The units are 
milliseconds. 

 

AdvSync Class Reference 

This class contains advanced sync functions. 

Classes 

class DancerControlOptions 
This class contains options for dancer 
control. More... 

class DancerControlStatus 
This class contains the status for dancer 
control. More... 

class ECAMClutchOptions 
This class contains E-CAM clutch 
options. The E-CAM clutch determines 
how the slave axis synchronizes with the 
master axis when E-CAM is started. 
More... 

class ECAMClutchType 
This enumerator class enumerates the 
E-CAM clutch types. More... 

class ECAMData 
This class contains all settings for ECAM 
control, including E-CAM table 
data. More... 

class ECAMOptions 
This class contains E-CAM options, 
including the E-CAM clutch options. 
More... 

class ECAMSourceOptions 
This class contains E-CAM source 
options. This determines the source of 
the master input that is used to calculate 
the slave command position from the E



CAM table. More... 

class ECAMSourceType 
This enumerator class enumerates the 
sources of the E-CAM master input. 
More... 

class ECAMType 
This enumerator class enumerates the 
types of E-CAM, which determine certain 
characteristics of E-CAM. Also see ECAM. 
More... 

Public Member Functions 

bool 
WMX3APIFUNC 
AdvSync (AdvancedMotion *f) 
IsDeviceValid () 
StartECAM (int channel, ECAMData 
*pECAMData) 
Start E-CAM control. More... 
WMX3APIFUNC GetECAM (int channel, ECAMData 
*pECAMData) 
Get E-CAM control parameters. More... 
WMX3APIFUNC StopECAM (int channel) 
Stop E-CAM control. More... 

WMX3APIFUNC StartDancerControl (int axis, 
DancerControlOptions 

*pDancerControlOptions) 

Start dancer control. More... 

WMX3APIFUNC StopDancerControl (int axis) 
Stop dancer control. More... 

WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆StartECAM()
WMX3APIFUNC 
StartECAM ( 
) 
int 
channel, 
ECAMData * pECAMData 
Start E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[in] 
pECAMData A pointer to an 
ECAMData class object 
that specifies the E-CAM 
control parameters. 

Remarks 

E-CAM control is a type of master-slave control in which the position command of a 
slave axis is controlled by the position of a master axis in a non-linear manner. The 
correlation between the position of the master axis and the position command of the 
slave axis is defined using an E-CAM table. 


The master axis, slave axis, E-CAM table, and additional options are passed to this 
function using the pECAMData argument. 

The E-CAM table may contain at least 2 and up to maxEcamPoints points of data. 

The master axis positions must be specified in ascending order. If they are not 
specified in ascending order, an error will be returned. 

This function both sets the E-CAM data and starts E-CAM control. If the 
ECAMClutchType is set to None, the slave axis may suddenly move if it is not 
already at the position initially commanded by E-CAM control. To avoid this, use the 
SimpleCatchUp clutch type or verify that this function is called while the slave axis 
is at the correct position. 

E-CAM control is immediately started when this function is called. The slave and 
master axes must be in appropriate positions when this function is called to 
avoid sudden motion in the slave axis. 

The slave axis must be in Idle operation state when starting E-CAM control. The 
master axis may be in any state. 

Each E-CAM channel supports one slave axis. Multiple E-CAM channels may have 
the same master axis. 

Each E-CAM channel can only control one slave axis at any time. To start a different 
E-CAM control, the channel must first be stopped with the StopECAM function. 

See also 

E-CAM 

◆ 
GetECAM() 

WMX3APIFUNC 
GetECAM ( 
WMX3APIFUNC 
GetECAM ( 
int 
channel, 
ECAMData * pECAMData 
) 
Get E-CAM control parameters. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[out] 
pECAMData A pointer to an 
ECAMData class object 
that will contain the ECAM 
control parameters. 
Remarks 

This function obtains the currently set E-CAM control parameters for an E-CAM 
channel that was started with the StartECAM API function. This function will return 
an error if the specified E-CAM channel is not currently controlling a slave axis. 

◆StopECAM()

WMX3APIFU 
NC 
StopECAM ( int channel ) 
WMX3APIFU 
NC 
StopECAM ( int channel ) 
Stop E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 

Remarks 

This function stops E-CAM control for a channel. The E-CAM channel is specified, 
and not the slave axis number. If the E-CAM channel is not enabled and controlling 
an axis, an error will be returned. 

This function is used to stop E-CAM control that was started with either the 
StartECAM API function. 

◆StartDancerControl()
WMX3APIFUNC 
StartDancerControl ( int axis, 
DancerControlOptio pDancerControlOption 
) 
Start dancer control. 
Parameters 
[in]axis The axis to execute 
dancer control. 

[in] 
pDancerControlOptions A pointer to a 

DancerControlOptions 

object that contains the 
options for dancer 
control. 

Remarks 

Dancer control is a function to control a velocity mode axis using a PID loop with the 
input taken from a segment of the I/O. The velocity command of the axis is set 
according to the following equation: 

Velocity Command = P(t) * P_Gain + I(t) * I_Gain + D(t) * D_Gain 

P(t) = (input -input_zero) / (input_max -input_min) 

I(t) = sum of P(T) from T = t-nto T = t 

D(t) = (1/m) * sum of P(T) -P(T-1) from T = t to T = t-m 

= (1/m) * (P(t) -P(t-m)) 

P_Gain, I_Gain, and D_Gain are specified by the dancer control option settings. 
These should be adjusted to tune the dancer control to achieve the desired 
response for the machine. 

input is the current input, taken from a segment of the I/O. The address and size of 
the I/O segment are specified by the dancer control option settings. 

input_zero is the input at which P(t) equals zero. This is the input that the dancer 
control should settle to. 

input_min and input_max specify the expected range of inputs. If set correctly, the 
range of P(t) will have a span of 1. Depending on the value of input_zero, the range 
may be from 0 to 1, from -1 to 0, from -0.5 to 0.5, etc. If the input falls below 
input_min or exceeds input_max, P(t) will exceed this range. 

m is the derivative sample size specified by the dancer control settings. If set to 0, 
the derivative sample size will be 1. 

n is the number of time cycles to take the integral over, as specified by the dancer 
control settings. If set to 0, the integral will be taken over the entire time that the 


dancer control is in operation, after starting dancer control. 

If the above options are configured correctly, the dancer control will settle to the 
state where the input is equal to input_zero, with the desired response 
characteristics. 

Dancer control may only be executed while the axis is in Velocity mode. 

Dancer control may only be executed while the axis is in Idle or DancerControl 
operation state. 

◆StopDancerControl()
WMX3APIFU 
NC 
StopDancerC 
ontrol ( int axis ) 
Stop dancer control. 

Parameters 
[in] 
axis The axis to stop dancer 
control. 
Remarks 

This function stops an axis executing dancer control. The axis will decelerate to a 
stop using the quick stop deceleration specified with Quick Stop Dec. 

◆GetDancerControlStatus()

WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
int axis, 
DancerControlStatu pDancerControlStatus 
Get the dancer control status. 

Parameters 
[in] 
axis The axis to get the 
dancer control status of. 
[out] 
pDancerControlStatus A pointer to a 

DancerControlStatus 

object that will contain 
the dancer control status 
for the specified axis. 

Remarks 

This function obtains the dancer control status of an axis executing dancer control. 
See DancerControlStatus for additional information regarding each status. 

 

AdvVelocity Class Reference 

This class contains advanced velocity command functions. 

Public Member Functions 

AdvVelocity (AdvancedMotion *f) 

bool IsDeviceValid () 
WMX3APIFUNC SetConstantLinearVel (int masterAxis, int 
slaveAxis, double centerPos, double 
minR, double positiveMaxR, double 
negativeMaxR, double constLinVel, 
double initVelVariance) 

Start constant linear velocity control for 
an axis. More... 

WMX3APIFUNC ResolveConstantLinearVel (int axis) 
Resolve constant linear velocity control 
for an axis. More... 

Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆SetConstantLinearVel()
WMX3APIFUNC 
SetConstantLinearV 
el ( int masterAxis, 
int slaveAxis, 
double centerPos, 
double minR, 

double 
double 
double 
double 
double 
double 
positiveMaxR, 
negativeMaxR, 
constLinVel, 
double initVelVariance 
) 
Start constant linear velocity control for an axis. 

Parameters 
[in] 
masterAxis The axis controlling the 
arm. 
[in] 
slaveAxis The axis controlling the 
disc rotation. 
[in] 
centerPos The position of the 
master axis at the center 
of the disc. 
[in] 
minR The minimum radius 
below which the slave 
axis angular velocity will 
be constant and equal to 
constLinVel / minR. This 
value must be greater 
than or equal to 1. 
[in] 
positiveMaxR The maximum radius in 
the positive direction of 
the master axis at which 
the slave axis angular 
velocity should be kept 
constant. If the radius 
exceeds this value, the 
slave axis angular 
velocity will be constant 
and equal to constLinVel 
/ positiveMaxR. This 
value must be greater 


than or equal to minR. 
[in] 
negativeMaxR The maximum radius in 
the negative direction of 
the master axis at which 
the slave axis angular 
velocity should be kept 
constant. If the radius 
exceeds this value, the 
slave axis angular 
velocity will be constant 
and equal to constLinVel 
/ negativeMaxR. This 
value must be greater 
than or equal to minR. 
[in] 
constLinVel The constant surface 
linear velocity under the 
arm. 
[in] 
initVelVariance If the difference between 
the slave axis velocity 
when this API is called 
and the slave axis 
velocity immediately 
after this API is called 
exceeds this value, the 
API will return an error. 

Remarks 

Constant linear velocity synchronizes the motion of a velocity mode axis with the 
motion of a position mode axis in such a way that if the velocity mode axis controls 
the rotation of a wafer or disc and the position mode axis controls the motion of an 
arm in a radial direction from the center of the wafer or disc, the velocity of the disc 
surface immediately below the arm is constant. 

Because the slave axis is a rotary axis, it should be set to single turn mode using 
the SetSingleTurn function. Not doing so will cause the axis feedback position to 
continue to increase as the axis rotates. 


The motion of the position mode axis is unrestricted. The velocity mode axis follows 
the motion of the position mode axis according to the following formula: 

r = distance from the center of the disc of the position mode axis [user units] 
θ' = angular velocity of disc [radians per second] 
vc = constant surface linear velocity [user units per second] 

θ' = vc / r 

velocity of velocity mode axis in units of user units per second = [Single Turn 
Encoder Count] * θ' / (2π) 

The following diagram illustrates the parameters described: 


In addition, there are several special areas where the velocity of the velocity axis is 
different. These areas represent the boundaries of the disc and the center of the 
disc. 

Rmax_positive = the radius of the disc in the positive direction 
Rmax_negative = the radius of the disc in the negative direction; typically, this is equal 
to R max_positive but can be set to rmin if no constant linear velocity control should be 
performed while the axis moves in the negative direction from the center of the disc. 

rmin = the radius from the center of the disc below which the velocity of the velocity 
axis is constant and the disc has an angular velocity of θ 
= vc / r min 

if r > Rmax_positive then θ' = vc / Rmax_positive 


if r < Rmax_negative then θ' = vc / Rmax_negative 
if r <= Rmax_negative and |r| < rmin then θ' = vc / rmin 

The following diagram illustrates the parameters described: 


The following plot shows the angular velocity of the disc, θ', as a function of r: 


When calling this function, the master axis must bein the Position command mode, 
the slave axis must be in the Velocity command mode. To set the command mode 
of an axis, use the API function SetAxisCommandMode. In addition, rmin must be 

greater than or equal to 1, Rmax_positive must be greater or equal to rmin, and 
Rmax_negative must be greater or equal to rmin. 

To prevent a sudden acceleration of the slave axis, set the initVelVariance 


parameter to a small value. Then, calculate the initial the initial slave axis velocity 
required using the following formula. Finally, use functions such as StartVel to 
accelerate the slave axis to the initial velocity before calling this API. 

The slave velocity calculations are as follows: 
If the master axis position is greater than centerPos + Rmax_positive: 
slave velocity = (constLinVel / Rmax_positive) * (SingleTurnEncoderCount) / (2π) 
If the master axis position is less than centerPos -Rmax_negative: 
slave velocity = (constLinVel / Rmax_negative) * (SingleTurnEncoderCount) / (2π) 
If the master axis position is between centerPos -rmin and centerPos + rmin 

slave velocity = (constLinVel / rmin) * (SingleTurnEncoderCount) / (2π) 
If none of the above: 
slave velocity = (constLinVel / | master axis position -centerPos |) * 

(SingleTurnEncoderCount) / (2π) 

◆ 
ResolveConstantLinearVel() 

int int 
WMX3APIFU 
NC 
ResolveCons 
tantLinearVel ( 
axis ) 
Resolve constant linear velocity control for an axis. 

Parameters 
[in] 
axis The axis controlling the 
disc rotation (the slave 
axis specified for 
SetConstantLinearVel). 
Remarks 

Resolves constant linear velocity control for an axis that was started with 
SetConstantLinearVel. 

Upon resolving constant linear velocity control, the axis will continue to move at the 
velocity that the axis was moving at when this API function was called. To stop the 
axis, call the StartVel API function with a velocity of 0. Calling the Stop API function 
instead will immediately change the command velocity of the axis to 0, as no 
deceleration is specified by SetConstantLinearVel. 

 

CyclicBuffer Class Reference 

This class contains cyclic buffer functions. 

Public Member Functions 

CyclicBuffer (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

CyclicBuffer (const CyclicBuffer &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

CyclicBuffer & operator= (const CyclicBuffer &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

CyclicBuffer () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~CyclicBuffer () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC OpenCyclicBuffer (int axis, unsigned int 
numOfCycles) 

Create a new cyclic buffer memory 
space for an axis. More... 

WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 


static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
static 
WMX3APIFUNC 
ErrorToString ( 
int 
char * 
errCode, 
pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the CyclicBufferErrorCode enum or the ErrorCode enum 
in the WMX3Api.h header. All errors returned by functions in class CyclicBuffer will 
be defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
CyclicBuffer class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
wchar_t * pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
◆ 
OpenCyclicBuffer() [1/2] 


WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
int 
axis, 
unsigned int numOfCycles 
Create a new cyclic buffer memory space for an axis. 
Parameters 
[in] 
axis The axis to create the 
cyclic buffer memory 
space for. 


[in] 
numOfCycles The number of cycles of 
data that can fit in the 
cyclic buffer memory 
space. Each cycle of 
data is represented by 
the 

CyclicBufferSingleAxis 
Command class. 

Remarks 

The cyclic buffer memory space stores the queued cyclic commands. 

One command is consumed each communication cycle while the cyclic buffer is 
running. 

A larger cyclic buffer memory space can store more cyclic buffer commands in 
advance. Each cyclic command takes the size of 
CyclicBufferSingleAxisCommand to store. 

The maximum size of the cyclic buffer memory space is 2GB-1Byte (2147483647 
bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

Opened cyclic buffer memory spaces can be closed using CloseCyclicBuffer. Any 
cyclic buffer memory spaces that remain opened when the engine closes will be 
automatically closed. 

◆ 
OpenCyclicBuffer() [2/2] 



WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
AxisSelection * pAxisSelection, 
unsigned int numOfCycles 
Create a new cyclic buffer memory space for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
create the cyclic buffer 
memory space for. 
[in] 
numOfCycles The number of cycles of 
data that can fit in the 
cyclic buffer memory 
space. Each cycle of 
data is represented by 
the 
CyclicBufferSingleAxis 
Command class. This 
memory space is 
allocated to each axis 
specified by the 
pAxisSelection 
argument. 
Remarks 

This function is an overload of OpenCyclicBuffer that opens the cyclic buffer 
memory space for multiple axes. 

◆CloseCyclicBuffer() [1/2]

WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
Close the cyclic buffer memory space of an axis. 
Parameters 
[in] 
axis The axis to close the 
cyclic buffer memory 
space of. 
Remarks 

Cyclic buffer memory space that is opened with the OpenCyclicBuffer function can 
be closed with this function. Any cyclic buffer memory spaces that remain opened 
when the engine closes will be automatically closed. 

◆CloseCyclicBuffer() [2/2]

WMX3APIFU 
NC 
CloseCyclicB 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( 
AxisSelection pAxisSelection ) 
Close the cyclic buffer memory space of multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
close the cyclic buffer 
memory space of. 
Remarks 

This function is an overload of CloseCyclicBuffer that closes the cyclic buffer 
memory space for multiple axes. 

◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis. 

Parameters 
[in] 
axis The axis to append the 
cyclic position command 
data to. 
[in] 
pCmd A pointer to a 
CyclicBufferSingleAxis 
Command class that 
contains the cyclic 
position command data. 
Remarks 

If the cyclic position command buffer does not have enough space remaining to 
append a point, a BufferSizeIsNotEnough error is returned and no data is 
appended to the buffer. 

◆AddCommand() [2/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd, 
int count 
) 
Add any number of position command data to the cyclic position command buffer of 
one axis. 

Parameters 
[in] 
axis The axis to append the 
cyclic position command 
data to. 
[in] 
pCmd An array of objects of the 
CyclicBufferSingleAxis 
Command class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmd array. 
Remarks 

If the cyclic position command buffer does not have enough space remaining to 
append the specified number of points, a BufferSizeIsNotEnough error is returned 
and no data is appended to the buffer. 

◆AddCommand() [3/4]

WMX3APIFUNC WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds 
Add one position command data each to the cyclic position command buffer of 

multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds A pointer to a 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data 
of multiple axes. 
Remarks 

This function is a variation of the AddCommand function that appends one position 
command data each to multiple axes. 

◆AddCommand() [4/4]

WMX3APIFUNC 
AddCommand ( 
) 
WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds, 
int count 
Add any number of position command data to the cyclic position command buffer of 

multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds An array of objects of the 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmds array. 
Remarks 

This function is a variation of the AddCommand function that appends any number 
of position command data to multiple axes. 

◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis. 

Parameters 
[in] 
axis The axis to start 
execution of cyclic 
position commands. 
[in] 
pOption A pointer to a 
CyclicBufferSingleAxis 
Option class that 
contains execution 
options. If no value is 
specified for this optional 
argument, the default 
options will be applied. 
Remarks 

An axis that is currently executing cyclic position commands will have an 
OperationState of DirectControl. 

If the cyclic position command buffer is empty or becomes empty, execution will 
resume automatically the next time that cyclic position command data is appended 
to the buffer as long as the axis is still in DirectControl. 

◆Execute() [2/2]

WMX3APIFUNC WMX3APIFUNC 
Execute ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pOption = NULL
Start the execution of the cyclic position command buffer for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
start the execution of 
cyclic position 
commands. 
[in] 
pOption A pointer to a 
CyclicBufferMultiAxisO 
ption class that contains 
execution options. If no 
value is specified for this 
optional argument, the 
default options will be 
applied. 
Remarks 

This function is an overloaded function of Execute that starts the execution of the 
cyclic position command buffer for multiple axes. 

◆Abort() [1/2]

WMX3APIFU 
NC Abort ( int axis ) 
WMX3APIFU 
NC Abort ( int axis ) 
Stop execution of the cyclic position command buffer of an axis and clear the buffer. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
int axis 
) 
Stop execution of the cyclic position command buffer of an axis and decelerate the 
axis to a stop using the quick stop deceleration. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 
Remarks 

The specified axis will stop executing the cyclic position command and decelerate 
from its current velocity using the Quick Stop Dec parameter. After the quick stop 
finishes, the axis will be in the Idle state. 

Any remaining position commands in the buffer will be cleared. 

◆ExecQuickStop() [2/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and 
decelerate the axes to a stop using the quick stop deceleration. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of ExecQuickStop that stops the execution 
of the cyclic position command buffer for multiple axes. 

◆GetStatus() [1/2]

WMX3APIFUNC 
GetStatus ( 
WMX3APIFUNC 
GetStatus ( 
int 
axis, 
CyclicBufferSingleA pStatus 
) 
Get the cyclic position command buffer status of the specified axis. 

Parameters 
[in] 
axis The axis to get the 
status of. 
[out] 
pStatus A pointer to a 
CyclicBufferSingleAxis 
Status class which will 
return the cyclic position 
command buffer status 
of the specified axis. 
Remarks 

This function retrieves the cyclic position command buffer status of one axis. 

◆GetStatus() [2/2]

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pStatus 
Get the cyclic position command buffer status of the specified axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to get 
the statuses of. 
[out] 
pStatus A pointer to a 
CyclicBufferMultiAxisS 
tatus class which will 
return the cyclic position 
command buffer 
statuses of the specified 
axes. 

Remarks 

This function is an overloaded function of the GetStatus function that obtains the 
cyclic position command buffer status of multiple axes. 

The axes to retrieve the statuses are specified using the pAxisSelection argument. 
The returned pStatus structure will contain the statuses in the same layout as the 
pAxisSelection argument, and not in the indices of the axis numbers. For example, if 
pAxisSelection.axisCount = 2, pAxisSelection.axis[0] = 10, and 
pAxisSelection.axis[1] = 20, then pStatus.status[0] will contain the status of axis 10 
and pStatus.status[1] will contain the status of axis 20. 

 

EventControl Class Reference 

This class contains event control functions. 

Classes 

class ComparatorSource 
This class contains data to perform a 
comparison. More... 

class ComparatorSourceType 
This enumerator class enumerates the 
sources for comparisons. More... 

class ComparisonType 
This enumerator class enumerates types 
of comparisons. Comparisons are used 
to define conditions for certain functions. 
More... 

class Event 
This class defines an event. This class 
is deprecated and will be removed in a 
future version. Use the EventInput 
and EventOutput classes and their 
inherited classes instead. More... 

class EventInputFunction 
This enumerator class enumerates the 
input functions of events. The input 
function determines the condition at 
which the event is triggered. This class 
is deprecated and will be removed in a 
future version. Use the EventInput 
class and its inherited classes 
instead. More... 

class EventOutputFunction 


This enumerator class enumerates the 
output functions of events. The output 
function determines the action that is 
executed when the event is triggered. 

This class is deprecated and will be 
removed in a future version. Use the 
EventOutput class and its inherited 
classes instead. More... 

class HardwareTouchProbeStatus 
This class contains the status of a 
hardware touch probe channel. More... 

class PlannedVelocityData 
This class contains a planned velocity 
override data point. More... 

class PlannedVelocityStatus 
This class contains the current status of 
a planned velocity override channel. 
More... 

class PSOOption 
This class contains options for a position 
synchronous output channel. More... 

class PSOOutput 
This class describes the output for 
position synchronous output. More... 

class PSOOutputType 

This enumerator class contains the type 
of output for position synchronous 
output. More... 

class PSOStatus 
This class contains the current status of 
a position synchronous output channel. 
More... 

class TouchProbeMode 

This enumerator class contains the 


operation mode of a touch probe. More... 

class TouchProbeSource 
This enumerator class contains the 
source for a touch probe. More... 

Public Member Functions 

EventControl (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

EventControl (const EventControl &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

EventControl & operator= (const EventControl &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

EventControl () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~EventControl () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC SetEvent (int *pId, EventInput 
*pEventInput, EventOutput 
*pEventOutput, EventOption 
*pOption=NULL) 
Set an event. More... 

WMX3APIFUNC SetEvent (int *pId, EventInput 
*pEventInput, EventOutput 
*pEventOutput, int id, EventOption 
*pOption=NULL) 
Set an event. More... 

WMX3APIFUNC GetEventModuleId (int id, int 
*pInputModuleId, int *pOutputModuleId) 

Get the input function module ID and 
output function module ID of an existing 
event. More... 

WMX3APIFUNC GetEvent (int id, EventInput 
*pEventInput, EventOutput 
*pEventOutput, EventOption 
*pOption=NULL) 
Get the parameters of an event. More... 

WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent () 

Clear all existing events. More... 

WMX3APIFUNC SetCustomEvent (int *pId, int 
inputModuleId, void *pInputData, int 
inputDataSize, int outputModuleId, void 
*pOutputData, int outputDataSize, int id, 
CustomEventOption *pOption=NULL) 
Reserved. More... 

WMX3APIFUNC SetCustomEventInput (int id, int 
moduleId, void *pInputData, int 


inputDataSize) 

Reserved. More... 

WMX3APIFUNC SetCustomEventOutput (int id, int 
moduleId, void *pOutputData, int 
outputDataSize) 
Reserved. More... 

WMX3APIFUNC GetCustomEventInput (int id, void 
*pInputDataBuff, int inputDataBuffSize, int 
*pInputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC GetCustomEventOutput (int id, void 
*pOutputDataBuff, int outputDataBuffSize, 
int *pOutputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC SetCustomEventConfigureOfModule 
(int moduleId, void *pSetEventData, int 
setEventDataSize) 
Reserved. More... 

WMX3APIFUNC SetEvent (int *pId, Event *pEventData) 
Set an event. This function is 
deprecated and is replaced by the 
SetEvent function. This function will 
be removed in a future version. More... 
WMX3APIFUNC SetEvent (int *pId, Event *pEventData, int 
id) 
Set an event. This function is 
deprecated and is replaced by the 
SetEvent function. This function will 
be removed in a future version. More... 

WMX3APIFUNC GetEvent (int id, Event *pEventData) 

Get the parameters of an existing event. 

This function is deprecated and is 
replaced by the GetEvent function. 
This function will be removed in a 
future version. More... 


WMX3APIFUNC SetSoftwareTouchProbe (unsigned int 
channel, unsigned char enable, int axis, 
int byteAddrs, int bitOffset, unsigned char 
logic, TouchProbeMode::T mode) 
Set parameters for a software touch 
probe channel. A software touch probe 
channel is able to latch onto the encoder 
data of an axis when a particular input 
signal is detected. More... 

WMX3APIFUNC EnableSoftwareTouchProbe (unsigned 
int channel, unsigned char enable) 
Enable a software touch probe channel. 
A software touch probe channel will only 
latch encoder data when enabled. 
More... 

WMX3APIFUNC GetSoftwareTouchProbe (unsigned int 
channel, unsigned char *pEnabled, int 
*pAxis, int *pByteAddrs, int *pBitOffset, 
unsigned char *pLogic, 
TouchProbeMode::T *pMode) 

Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More... 

WMX3APIFUNC SetPlannedVelOverrideConfig (unsigned 
int channel, ComparisonType::T type, 
ComparatorSource *pSource, int axis) 
Set parameters for a planned velocity 
override channel. A planned velocity 
override channel is able to override the 
velocity of an axis when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPlannedVelOverrideConfig 
(unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, int *pAxis) 

Get parameters for a planned velocity 
override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More... 

WMX3APIFUNC StopPlannedVelOverride (unsigned int 
channel) 
Stop a planned velocity override 
channel. A stopped planned velocity 
override channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPlannedVelOverrideStatus (unsigned 
int channel, PlannedVelocityStatus 
*pStatus) 
Get the state of a planned velocity 
override channel. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 

unsigned int size) 

Get a string representation of the 


specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the EventErrorCode enum or the ErrorCode enum in the 
WMX3Api.h header. All errors returned by functions in class EventControl will be 
defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
EventControl class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks 

Events consist of two parts: an input function (the condition) and the output function 
(the action). When the condition is satisfied, the action will be executed. 


The event input function is defined by a class that inherits the EventInput class. 
Each module defines up to one such class. For example, the CoreMotion module 
defines the CoreMotionEventInput class, which can be used to specify one of 
several event inputs. 

Similarly, the event output function is defined by a class that inherits the 
EventOutput class. Each module defines up to one such class. For example, the 
CoreMotion module defines the CoreMotionEventOutput class, which can be used 
to specify one of several event outputs. 

Once the output function is triggered, it cannot be triggered again until the input 
function becomes FALSE and then TRUE again. When the EnableEvent function is 
called for an event, the state of the event will be reset so that it may be triggered 
again. 

Events are evaluated every communication cycle in the order of the identification 
numbers by the module that defines the event. 

This function returns the ID number of the event. Each event has a unique ID 
number. However, once an event is deleted, the ID number of that event may be 
reused by a subsequently defined event. The event ID number is required to obtain 
the event status with the GetEvent function. 

See also 

Events 

◆SetEvent() [2/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
int id, 
EventOption * pOption = NULL 
) 

Set an event. 
Parameters 
[out] 
pId A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 
[in] 
pEventInput A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 
[in] 
pEventOutput A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 
[in] 
id The identification 
number that is requested 
by the new event. If this 
identification number is 
in use by another event, 
the IDInUse error will be 
returned. If this function 
succeeds, the pId 
argument will return this 


value. This value must 
be at least 0 and less 
than maxEvents. 

[in] 
pOption An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks 

This function is an overloaded function of SetEvent that allows the event 
identification number of the new event to be specified. If the event identification 
number is in use by another event or is out of range, this function will return an 
error. 

This function is useful when the value returned by pId is difficult to read, such as 
when executing this function with the ApiBuffer class. 

◆ 
GetEventModuleId() 

WMX3APIFUNC 
GetEventModuleId ( 
WMX3APIFUNC 
GetEventModuleId ( 
int 
int * 
id, 
pInputModuleId, 
int * pOutputModuleId 
) 
Get the input function module ID and output function module ID of an existing event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pInputModuleId A pointer to an int that 
will contain the module 
ID of the input function. 
[out] 
pOutputModuleId A pointer to an int that 
will contain the module 
ID of the output function. 
Remarks 

This function reads the input function module ID and output function module ID of 
an event. The event is specified by the identification number. 

◆GetEvent() [1/2]
WMX3APIFUNC 
GetEvent ( int id, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Get the parameters of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an object of 
a class that extends the 
EventInput class that 
will contain the event 
input function. The class 
must match the class 
that was used to set the 
event input function. 
[out] 
pEventOutput A pointer to an object of 
a class that extends the 
EventOutput class that 
will contain the event 
output function. The 
class must match the 
class that was used to 
set the event output 
function. 
[out] 
pOption An optional pointer to an 
object of the 
EventOption class that 
will contain the option 
settings of the event. 
Remarks 

This function gets the parameters of an event that was defined by SetEvent and 
other functions. 

The objects passed to the pEventInput and pEventOutput arguments must match 
the classes that were used to define the input function and output function. If the 
classes are not matched, the EventInputModuleIdNotMatched or 
EventOutputModuleIdNotMatched error is returned. 

◆GetEventOption() 

◆GetEventOption() 
WMX3APIFUNC 
GetEventOption ( 
) 
int 
id, 
EventOption * pOption 
Get the option settings of an existing event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pOption A pointer to an object of 
the EventOption class 
that will contain the 
option settings of the 
event. 
Remarks 

This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks 

This function sets the output function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventInput() 

WMX3APIFUNC 
GetEventInput ( 
WMX3APIFUNC 
GetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function gets the input function of an event. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an 
EventInput class object 
that will contain the 
event input function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventOutput A pointer to an 
EventOutput class 
object that will contain 
the event output 
function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetAllEventID() 

WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events. 

Parameters 
[out] 
pEventIdData A pointer to an 
AllEventID class object 
that will contain the id of 
all existing events. 
[in] 
filterInputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with input 
functions defined by the 
specified ModuleId. 
[in] 
filterOutputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with output 
functions defined by the 
specified ModuleId. 
Remarks 

This function obtains the IDs of all events that are currently defined. The IDs may be 
passed to other functions that reference event IDs. For example, an event ID may 
be passed to the GetEvent API function to obtain further information about that 
event. 

◆EnableEvent() 

WMX3APIFUNC 
EnableEvent ( 
) 
WMX3APIFUNC 
EnableEvent ( 
) 
int 
id, 
unsigned char enable 
Enable or disable an existing event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
enable If 0, the event will be 
disabled. If 1, the event 
will be enabled. 

Remarks 

This function enables or disables an existing event. The event is specified by the 
identification number. The event must first be created using the SetEvent API 
function. 

A disabled event will not be evaluated. A disabled event can later be enabled by 
another call to this API function. 

The initial enabled or disabled state of an event created by a call to SetEvent will 
depend on the enabled parameter of the Event object passed to SetEvent. 

◆RemoveEvent() 

WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
Remove an existing event. 
Parameters 
[in] 
id The event identification 
number of the event. 
Remarks 

This function removes an existing event. The event is specified by the identification 
number. 

This function will permanently remove an event. The event identification number of 
the event will be freed, and may be assigned to events defined later. 

This function blocks execution and will return at the end of the next cyclic interrupt. 
If communication is stopped (and events are not being processed), this function is 
non-blocking and will remove the event immediately. 

◆ClearAllEvent() 

WMX3APIFUNC 
ClearAllEvent ( ) 
WMX3APIFUNC 
ClearAllEvent ( ) 
Clear all existing events. 

Remarks 

This function permanently clears all existing events. All event identification numbers 
will be freed, and may be assigned to events defined later. 

This function blocks execution and will return at the end of the next cyclic interrupt. 
If communication is stopped (and events are not being processed), this function is 
non-blocking and will clear all events immediately. 

◆SetCustomEvent() 
WMX3APIFUNC 
SetCustomEvent ( int * pId, 
int inputModuleId, 
void * pInputData, 
int inputDataSize, 
int outputModuleId, 
void * pOutputData, 
int outputDataSize, 
int id, 
CustomEventOption pOption = NULL 
) 
Reserved. 
Parameters 
[out]pId A pointer to an int 
variable that will contain 
the event identification 

number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 
[in] 
inputModuleId The ID of the module 
that defines the class 
inheriting EventInput 
passed to pInputData. 
[in] 
pInputData A pointer to an object of 
a class that inherits the 
EventInput class. 
[in] 
inputDataSize The size of the object 
passed to pInputData, in 
bytes. 
[in] 
outputModuleId The ID of the module 
that defines the class 
inheriting EventOutput 
passed to pOutputData. 
[in] 
pOutputData A pointer to an object of 
a class that inherits the 
EventOutput class. 
[in] 
outputDataSize The size of the object 
passed to pOutputData, 
in bytes. 
[in] 
id The identification 
number that is requested 
by the new event. If this 
identification number is 
in use by another event, 


the IDInUse error will be 
returned. If this function 
succeeds, the pId 
argument will return this 
value. This value must 
be at least 0 and less 
than maxEvents. 

[in] 
pOption An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

◆ 
SetCustomEventInput() 

WMX3APIFUNC 
SetCustomEventInp 
ut ( 
WMX3APIFUNC 
SetCustomEventInp 
ut ( 
int 
int 
id, 
moduleId, 
void * 
pInputData, 
int inputDataSize 
) 
Reserved. 
Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
moduleId The ID of the module 
that defines the class 
inheriting EventInput 
passed to pInputData. 
[in] 
pInputData A pointer to an object of 
a class that inherits the 
EventInput class. 
[in] 
inputDataSize The size of the object 
passed to pInputData, in 
bytes. 

◆SetCustomEventOutput() 

WMX3APIFUNC 
SetCustomEventOut 
put ( 
WMX3APIFUNC 
SetCustomEventOut 
put ( 
int 
int 
id, 
moduleId, 
void * 
pOutputData, 
int outputDataSize 
) 
Reserved. 
Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
moduleId The ID of the module 
that defines the class 
inheriting EventOutput 
passed to pOutputData. 
[in] 
pOutputData A pointer to an object of 
a class that inherits the 
EventOutput class. 
[in] 
outputDataSize The size of the object 
passed to pOutputData, 
in bytes. 

◆GetCustomEventInput() 

WMX3APIFUNC 
GetCustomEventInp 
ut ( 
WMX3APIFUNC 
GetCustomEventInp 
ut ( 
) 
int 
void * 
int 
int * 
int * 
id, 
pInputDataBuff, 
inputDataBuffSize, 
pInputDataSize, 
pModuleId 
Reserved. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pInputDataBuff A pointer to a buffer that 
will contain an object of 
a class that inherits the 
EventInput class. 
[in] 
inputDataBuffSize The size of the buffer 
passed to 
pInputDataBuff, in bytes. 
[out] 
pInputDataSize A pointer to an int that 
will contain the size of 
the input data object, in 
bytes. 
[out] 
pModuleId A pointer to an int that 
will contain the module 
ID of the module that 
defines the input data 
object. 

◆GetCustomEventOutput() 

WMX3APIFUNC 
GetCustomEventOut 
put ( 
WMX3APIFUNC 
GetCustomEventOut 
put ( 
) 
int 
void * 
int 
int * 
int * 
id, 
pOutputDataBuff, 
outputDataBuffSize, 
pOutputDataSize, 
pModuleId 
Reserved. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pOutputDataBuff A pointer to a buffer that 
will contain an object of 
a class that inherits the 
EventOutput class. 
[in] 
outputDataBuffSize The size of the buffer 
passed to 
pOutputDataBuff, in 
bytes. 
[out] 
pOutputDataSize A pointer to an int that 
will contain the size of 
the output data object, in 
bytes. 
[out] 
pModuleId A pointer to an int that 
will contain the module 
ID of the module that 
defines the output data 
object. 

◆SetCustomEventConfigureOfModule() 

◆SetCustomEventConfigureOfModule() 
WMX3APIFUNC 
SetCustomEventCon 
figureOfModule ( 
int 
void * 
moduleId, 
pSetEventData, 
int setEventDataSize 
) 
Reserved. 
Parameters 
[in] 
moduleId The ID of module to 
configure. 
[in] 
pSetEventData A pointer to the data to 
use to configure the 
module. 
[in] 
setEventDataSize The size of the data 
passed to 
pSetEventData, in bytes. 

◆SetEvent() [3/4]
WMX3APIFUNC 
SetEvent ( 
) 
int * 
Event * 
pId, 
pEventData 
Set an event. This function is deprecated and is replaced by the SetEvent 
function. This function will be removed in a future version. 

Parameters 
[out] 
pId A pointer to an int 
variable that will contain 
the event identification 


number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

[in] 
pEventData A pointer to an Event 
class object that defines 
the event. 

Remarks 

Events consist of two parts: an input function (the condition) and the output function 
(the action). When the condition is satisfied, the action will be executed. 

Once the output function is triggered, it cannot be triggered again until the input 
function becomes FALSE and then TRUE again. When the EnableEvent function is 
called for an event, the state of the event will be reset so that it may be triggered 
again immediately. 

Events are evaluated in the order of the identification numbers once every 
communication cycle. 

This function returns the ID number of the event. Each event has a unique ID 
number. However, once an event is deleted, the ID number of that event may be 
reused by a subsequently defined event. The event ID number is required to obtain 
the event status with the GetEvent function. 

See Event for additional information regarding the types of events that may be 
defined. 

◆SetEvent() [4/4]

WMX3APIFUNC 
SetEvent ( int * pId, 
WMX3APIFUNC 
SetEvent ( int * pId, 
Event * pEventData, 
int id 
) 
Set an event. This function is deprecated and is replaced by the SetEvent 
function. This function will be removed in a future version. 

Parameters 
[out] 
pId A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 
[in] 
pEventData A pointer to an Event 
class object that defines 
the event. 
[in] 
id The identification 
number that is requested 
by the new event. If this 
identification number is 
in use by another event, 
the IDInUse error will be 
returned. If this function 
succeeds, the pId 
argument will return this 


value. This value must 
be at least 0 and less 
than maxEvents. 

Remarks 

This function is an overloaded function of SetEvent that allows the event 
identification number of the new event to be specified. If the event identification 
number is in use by another event or is out of range, this function will return an 
error. 

This function is useful when the value returned by pId is difficult to read, such as 
when executing this function with the ApiBuffer class. 

◆ 
GetEvent() [2/2] 



WMX3APIFUNC 
GetEvent ( 
WMX3APIFUNC 
GetEvent ( 
int 
id, 
Event * pEventData 
) 
Get the parameters of an existing event. This function is deprecated and is 
replaced by the GetEvent function. This function will be removed in a future 
version. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventData A pointer to an Event 
class object that will 
contain the parameters 
of the event. 

Remarks 

This function reads the parameters of an existing event. The event is specified by 
the identification number. 

The structs in the input and output unions of the returned Event class that contain 
the event parameters are determined by the values of inputFunction and 
outputFunction of Event. 

◆SetSoftwareTouchProbe() 
WMX3APIFUNC 
SetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char enable, 
int axis, 
int byteAddrs, 
int bitOffset, 

unsigned char logic, unsigned char logic, 
TouchProbeMode::T mode 
) 
Set parameters for a software touch probe channel. A software touch probe channel 
is able to latch onto the encoder data of an axis when a particular input signal is 

detected. 

Parameters 
[in] 
channel 

[in] 
enable 

[in] 
axis 
[in] 
byteAddrs 

The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 

maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel. 

Whether the software 
touch probe is enabled 
or not. The API function 

EnableSoftwareTouchP 
robe can be used to 
enable or disable a 
software touch probe 
without modifying the 
touch probe parameters. 

The axis to latch the 

encoder data. 
The byte address of the 
input signal that triggers 
latching the encoder 
data. 

[in] 
bitOffset The bit address of the 
input signal that triggers 


latching the encoder 
data. 
[in] 
logic The polarity of the input 
signal. If set to 0, the 
encoder data is latched 
when the input signal 
changes from 1 to 0. If 
set to 1, the encoder 
data is latched when the 
input signal changes 
from 0 to 1. 
[in] 
mode The mode of the 
software touch probe. If 
set to LatchFirst, the 
latched encoder data will 
not be overwritten when 
there are subsequent 
input signal triggers. 
When the latched data is 
read using the 
GetSoftwareTouchProb 
eCounterValue API 
function, the software 
touch probe is 
considered to have no 
latched data any more, 
and the software touch 
probe will be able to 
latch encoder data 
again. If set to 
LatchLast, the latched 
encoder data will be 
overwritten when there 
are subsequent input 
signal triggers. 
See also 



◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel. 

[out] 
pEnabled A pointer to an unsigned 
char that will contain 
whether the software 
touch probe is enabled 
or not. The API function 

EnableSoftwareTouchP 
robe can be used to 
enable or disable a 
software touch probe 
without modifying the 
touch probe parameters. 

[out] 
pAxis A pointer to an int that 
will contain the axis to 
latch the encoder data. 

[out] 
pByteAddrs A pointer to an int that 
will contain the byte 
address of the input 
signal that triggers 
latching the encoder 
data. 

[out] 
pBitOffset A pointer to an int that 
will contain the bit 


address of the input 
signal that triggers 
latching the encoder 
data. 
[out] 
pLogic A pointer to an unsigned 
char that will contain the 
polarity of the input 
signal. If set to 0, the 
encoder data is latched 
when the input signal 
changes from 1 to 0. If 
set to 1, the encoder 
data is latched when the 
input signal changes 
from 0 to 1. 
[out] 
pMode A pointer to a 
TouchProbeMode 
variable that will contain 
the mode of the software 
touch probe. If set to 
LatchFirst, any latched 
encoder data will not be 
overwritten when there 
are subsequent input 
signal triggers. When the 
latched data is read 
using the 
GetSoftwareTouchProb 
eCounterValue API 
function, the software 
touch probe is 
considered to have no 
latched data any more, 
and the software touch 
probe will be able to 
latch encoder data 
again. If set to 


◆IsSoftwareTouchProbeLatched() 
LatchLast, latched 
encoder data will be 
overwritten when there 
are subsequent input 
signal triggers. 
WMX3APIFUNC 
IsSoftwareTouchPro 
beLatched ( unsigned int channel, 
unsigned char * pLatched 
) 
Check whether a software touch probe channel has latched data. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

◆GetSoftwareTouchProbeCounterValue() 

WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
) 
unsigned int channel, 
unsigned char * pLatched, 
double * pCounterValue 
Get latched data of software touch probe. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

[out] 
pCounterValue The encoder data 
latched by the software 
touch probe. 

◆SetHardwareTouchProbe() 
WMX3APIFUNC 
SetHardwareTouchP 
robe ( int axis, 
unsigned char enable, 

TouchProbeMode::T mode, 
TouchProbeSource:triggerSource, 
unsigned int channel 
) 
Set parameters for the hardware touch probe of an axis. A hardware touch probe 
latches the encoder data of the axis when the touch probe input signal is detected. 

Parameters 
[in] 
axis 

[in] 
enable 

[in] 
mode 

The axis of the hardware 

touch probe. 
This value determines 
the initial state of the 
hardware touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

The mode of the touch 
probe. If set to 
LatchFirst, the 
hardware touch probe 
will latch the encoder 
data when the next 
touch probe input signal 
is detected, but will not 
latch the encoder data 
for any subsequent 
touch probe input 
signals. If set to 
LatchLast, the hardware 
touch probe will latch the 
encoder data each time 
the touch probe input 
signal is detected. 


[in] 
[in] 
triggerSource 
channel 
The trigger source of the 
touch probe. If set to 
ZPulse, the Z-pulse 
(index pulse) signal will 
trigger the touch probe. 
If set to TouchProbe, 
the touch probe signal 
will trigger the touch 
probe. The touch probe 
signal specifications will 
be dependent on the 
servo drive, and can 
often be configured to 
one of several inputs. 
The channel of the touch 
probe. The allowed 
values are 0 or 1. 
See also 
Hardware Touch Probe 
◆ 
GetHardwareTouchProbeStatus() 


WMX3APIFUNC 
GetHardwareTouchP 
robeStatus ( 
WMX3APIFUNC 
GetHardwareTouchP 
robeStatus ( 
int 
axis, 
HardwareTouchProb pStatus 
) 
Get parameters and current state of the hardware touch probe of an axis. 

Parameters 
[in] 
axis The axis of the hardware 
touch probe. 
[out] 
pStatus A pointer to a 
HardwareTouchProbeS 
tatus class object that 
contains the parameters 
and current state of the 
hardware touch probe. 

◆EnableHardwareTouchProbe() 

pOption = NULL 
WMX3APIFUNC 
EnableHardwareTou 
chProbe ( 
) 
int 
axis, 
unsigned char enable 
Enable or disable the hardware touch probe of an axis. 
Parameters 
[in] 
[in] 
axis 
enable 
The axis of the hardware 
touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

◆SetPSOConfig() 
WMX3APIFUNC 
SetPSOConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double minDurationMillisecon 
PSOOption * 
) 
Set parameters for a position synchronous output channel. A position synchronous 
output channel is able to output an output signal when certain conditions, such as 
an axis reaching a certain position, are met. 

Parameters 
[in] 
channel The channel of the 


position synchronous 
output. The number of 
available channels is 
contained in the 

maxPsoChannel 

constant. 

[in] 
type The type of comparison 
to perform. 

[in] 
pSource The source to use for the 
comparison. 

[in] 
pOutput A pointer to an 
PSOOutput class object 
that specifies the type 
and address of the 
output to set based on 
the result of the 
comparison. 

[in] 
minDurationMillisecond The duration to keep the 
output set after the 
comparison changes 
from true to false. The 
output will be set while 
the comparison yields 
true, and for the period 
specified in this 
argument after the 
comparison changes 
from true to false. This 
value has units of 
milliseconds. 

[in] 
pOption An optional argument 
that is a pointer to a 
class containing 
additional position 
synchronous output 
options. 



◆GetPSOConfig() 
See also 
Position Synchronous Output (PSO) 
WMX3APIFUNC 
GetPSOConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double * pMinDurationMilliseco 
PSOOption * pOption = NULL 
) 
Get parameters for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 


[out] 
pOutput A pointer to an 
PSOOutput class object 
that specifies the type 
and address of the 
output to set based on 
the result of the 
comparison. 

[out] 
pMinDurationMillisecon A pointer to a double that 
will contain the duration 
to keep the output set 
when the comparison 
changes from true to 
false, in units of 
milliseconds. 

[out] 
pOption An optional argument 
that is a pointer to a 
class that will return 
additional position 
synchronous output 
options. 

◆SetPSOSingleData() 

WMX3APIFUNC 
SetPSOSingleData ( 
) 
WMX3APIFUNC 
SetPSOSingleData ( 
) 
unsigned int channel, 
double sData 
Set a single data point for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
sData The data point. 

Remarks 

This function sets a single data point for a position synchronous output channel. Any 
data points that have been previously set by the SetPSOSingleData, 
SetPSOMultipleData, or SetPSOIntervalData functions are cleared. 

See also 

Position Synchronous Output (PSO) 

◆SetPSOMultipleData() 

WMX3APIFUNC 
SetPSOMultipleData ( unsigned int channel, 
WMX3APIFUNC 
SetPSOMultipleData ( unsigned int channel, 
int 
count, 
double * pMData 
) 
Set multiple data points for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
count The number of data 
points at the memory 
location pointed by 
mData. The maximum 
number of data points is 
contained in the 
maxPsoData constant. 
[in] 
pMData A pointer to memory 
location containing a 
sequence of data points. 
Remarks 

This function sets multiple data points for a position synchronous output channel. 
Any data points that have been previously set by the SetPSOSingleData, 
SetPSOMultipleData, or SetPSOIntervalData functions are cleared. 

See also 

Position Synchronous Output (PSO) 


◆SetPSOIntervalData() 
WMX3APIFUNC 
SetPSOIntervalData ( unsigned int channel, 
double 
double 
rangeStart, 
rangeEnd, 
double interval 
) 
Set data points over a range for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
rangeStart The starting position of 
the range. The first data 
point will be set to 
rangeStart + interval. 
[in] 
rangeEnd The end position of the 
range. This is the 
greatest position where 
the data point may be 
set. 
[in] 
interval The interval between 
each data point. 

Remarks 

This function sets data points over a range for a position synchronous output 
channel. Any data points that have been previously set by the SetPSOSingleData, 


SetPSOMultipleData, or SetPSOIntervalData functions are cleared. 

All points p that satisfy [p = rangeStart + n*interval] and [rangeStart 
< p <= rangeEnd] for integer n will trigger the output. For example, if rangeStart 
= 0, rangeEnd = 5000, and interval = 1000, then the output will be triggered at 
positions 1000, 2000, 3000, 4000, and 5000. 

The activeDataIndex status will return n when the output is set by the nth point. For 
example, in the above example, activeDataIndex will be set to 1 when the output is 
set by position 1000, 2 when the output is set by position 2000, 3 when the output is 
set by position 3000, 4 when the output is set by position 4000, and 5 when the 
output is set by position 5000. 

The number of points p that are generated by this function is unlimited, and may 
exceed maxPsoData. 

See also 

Position Synchronous Output (PSO) 

◆GetPSOData() 
WMX3APIFUNC 
GetPSOData ( 
unsigned int channel, 
int * 
double * 
pCount, 
pMData, 
int maxCount 
) 
Get all data points that are currently set for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 


maxPsoChannel 

constant. 

[out] 
pCount A pointer to an int that 
will contain the number 
of data points at the 
memory location pointed 
by mData. The 
maximum number of 
data points is contained 
in the maxPsoData 
constant. 

[out] 
pMData A pointer to a memory 
location that will contain 
the sequence of data 
points that are currently 
set for the position 
synchronous output 
channel. Enough space 
for the maximum number 
of data points 
(maxPsoData) must be 
reserved. 

[in] 
maxCount The maximum count of 
data to copy into 
pMData. 

Remarks 

This function obtains the data points that have been set for a position synchronous 
output channel using the SetPSOSingleData or SetPSOMultipleData functions. 

The GetFunctionDoesNotMatchSetFunction error is returned if the data for the 
position synchronous output channel has been set by the SetPSOIntervalData 
function. 

◆ 
GetPSODataCount() 

WMX3APIFUNC 
GetPSODataCount ( 
) 
WMX3APIFUNC 
GetPSODataCount ( 
) 
unsigned int 
channel, 
int * pCount 
Get the number of data points that are currently set for a position synchronous 

output channel. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[out] 
pCount A pointer to an int that 
will contain the number 
of data points that are 
set for the position 
synchronous output 
channel. The maximum 
number of data points is 
contained in the 
maxPsoData constant. 

Remarks 

This function obtains the number of data points that have been set for a position 
synchronous output channel using the SetPSOSingleData or SetPSOMultipleData 
functions. 

The GetFunctionDoesNotMatchSetFunction error is returned if the data for the 
position synchronous output channel has been set by the SetPSOIntervalData 
function. 


◆GetPSOIntervalData() 
WMX3APIFUNC 
GetPSOIntervalData ( unsigned int channel, 
double * 
double * 
pRangeStart, 
pRangeEnd, 
double * pInterval 
) 
Get the range and interval of a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[out] 
pRangeStart A pointer to a double that 
will contain the starting 
position of the range. 
[out] 
pRangeEnd A pointer to a double that 
will contain the end 
position of the range. 
[out] 
pInterval A pointer to a double that 
will contain the interval 
between each data 
point. 

Remarks 

This function obtains the range and interval that have been set for a position 
synchronous output channel using the SetPSOIntervalData function. 

The GetFunctionDoesNotMatchSetFunction error is returned if the data for the 



◆StartPSO() 
position synchronous output channel has been set by the SetPSOSingleData or 
SetPSOMultipleData functions. 
WMX3APIFU 
NC StartPSO ( unsigned int channel ) 
Start a position synchronous output channel. A position synchronous output channel 
must be started before it controls the output. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
See also 

Position Synchronous Output (PSO) 

◆StopPSO() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC StopPSO ( 
Stop a position synchronous output channel. A stopped position synchronous output 

channel will stop controlling any outputs. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

◆GetPSOStatus() 

WMX3APIFUNC 
GetPSOStatus ( 
WMX3APIFUNC 
GetPSOStatus ( 
unsigned int channel, 
PSOStatus * pStatus 
) 
Get the state of a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

[out] 
pStatus A pointer to a 
PSOStatus class object 
that contains the state of 
the position synchronous 
output channel. 

◆SetPlannedVelOverrideConfig() 

WMX3APIFUNC 
SetPlannedVelOverri 
deConfig ( 
WMX3APIFUNC 
SetPlannedVelOverri 
deConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
int axis 
) 
Set parameters for a planned velocity override channel. A planned velocity override 
channel is able to override the velocity of an axis when certain conditions, such as 

an axis reaching a certain position, are met. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
type The type of comparison 
to perform. 
[in] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[in] 
axis The axis to override the 
velocity of when the 
condition yields true. 
See also 

Planned Velocity Override 


◆GetPlannedVelOverrideConfig() 
WMX3APIFUNC 
GetPlannedVelOverr 
ideConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
int * pAxis 
) 
Get parameters for a planned velocity override channel. 
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[out] 
pAxis A pointer to an int that 
will contain the axis to 
override the velocity of 
when the condition 
yields true. 


◆SetPlannedVelOverrideSingleData() 
WMX3APIFUNC 
SetPlannedVelOverri 
deSingleData ( unsigned int channel, 
PlannedVelocityData sData 
) 
Set a single data point for a planned velocity override channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
sData The data point as 
represented by a 
PlannedVelocityData 
class object. 

Remarks 

This function sets a single data point for a planned velocity override channel. Any 
data points that have been previously set by the 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 

See also 

Planned Velocity Override 

◆SetPlannedVelOverrideMultipleData() 

WMX3APIFUNC WMX3APIFUNC 
SetPlannedVelOverri 
channel, 
count, 
PlannedVelocityData pMData 
) 
deMultipleData 
( 
unsigned int 
int 
Set multiple data points for a planned velocity override channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
count The number of data 
points at the memory 
location pointed by 
mData. The maximum 
number of data points is 
contained in the 
maxPveloData 
constant. 
[in] 
pMData A pointer to a memory 
location containing a 
sequence of data points. 
Data points are 
represented by 
PlannedVelocityData 
class objects. 
Remarks 

This function sets multiple data points for a position synchronous output channel. 
Any data points that have been previously set by the 



◆GetPlannedVelOverrideData() 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 
See also 
Planned Velocity Override 
WMX3APIFUNC 
GetPlannedVelOverr 
ideData ( unsigned int channel, 
int * pCount, 
PlannedVelocityData pMData, 
int maxCount 
) 
Get all data points that are currently set for a planned velocity override channel. 

Parameters 
[in] 
channel 

[out] 
pCount 

The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 
A pointer to an int that 
will contain the number 
of data points at the 
memory location pointed 
by mData. The 
maximum number of 
data points is contained 
in the maxPveloData 
constant. 


[out] 
pMData A pointer to a memory 
location that will contain 
the sequence of data 
points that are currently 
set for the planned 
velocity override 
channel. Enough space 
to store the maximum 
number of data points 
(maxPveloData) must 
be reserved. Data points 
are represented 

PlannedVelocityData 

class objects. 

[in] 
maxCount The maximum count of 
data to copy into 
pMData. 

◆ 
GetPlannedVelOverrideDataCount() 

WMX3APIFUNC 
GetPlannedVelOverr 
ideDataCount ( 
) 
WMX3APIFUNC 
GetPlannedVelOverr 
ideDataCount ( 
) 
unsigned int 
channel, 
int * pCount 
Get the number of data points that are currently set for a planned velocity override 
channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pCount A pointer to an int that 
will contain the number 
of data points that are 
set for the planned 
velocity override 
channel. The maximum 
number of data points is 
contained in the 
constants::maxPveloD 
ata. 

◆StartPlannedVelOverride() 

WMX3APIFU 
NC 
StartPlanned 
WMX3APIFU 
NC 
StartPlanned 
VelOverride ( 
unsigned int channel ) 
Start a planned velocity override channel. A planned velocity override channel must 
be started before it controls the output. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
See also 

Planned Velocity Override 

◆StopPlannedVelOverride() 

WMX3APIFU 
NC 
StopPlanned 
WMX3APIFU 
NC 
StopPlanned 
VelOverride ( 
unsigned int channel ) 
Stop a planned velocity override channel. A stopped planned velocity override 
channel will stop controlling any outputs. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 

◆GetPlannedVelOverrideStatus() 

WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
unsigned int 
channel, 
PlannedVelocityStatpStatus 
) 
Get the state of a planned velocity override channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 
[out] 
pStatus A pointer to a 

PlannedVelocityStatus 

class object that 
contains the state of the 
planned velocity override 
channel. 

 

Io Class Reference 

This class contains I/O functions. 

Public Member Functions 

Io (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

Io (const Io &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

Io & operator= (const Io &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

Io () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~Io () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC SetOutBit (int addr, int bit, unsigned char 
data) 
Set the value of an output bit. More... 
WMX3APIFUNC SetOutByte (int addr, unsigned char data) 
Set the value of an output byte. More... 

WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUInt (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutBitMaskMode (bool enable) 
Set the bitmask mode of output. More... 
WMX3APIFUNC SetOutBitMaskBit (int addr, int bit, 
unsigned char data) 
Set the bitmask of output bit. More... 

WMX3APIFUNC SetOutBitMaskByte (int addr, unsigned 

char data) 

Set the bitmask of an output byte. 

More... 

WMX3APIFUNC SetOutBitMaskBytes (int addr, int size, 

unsigned char *pData) 

Set the bitmask of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitMaskBits (int *pAddr, int *pBit, 

unsigned char *pData, int count) 

Set the bitmask of multiple output bits. 

More... 

WMX3APIFUNC GetInBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an input bit. More... 

WMX3APIFUNC GetInByte (int addr, unsigned char 
*pData) 


Get the value of an input byte. More... 

WMX3APIFUNC GetInBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUInt (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitMaskMode (bool *pEnable) 
Get the bitmask mode of output. More... 

WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More... 


WMX3APIFUNC GetOutBitMaskByte (int addr, unsigned 

char *pData) 

Get the bitmask of an output byte. 

More... 

WMX3APIFUNC GetOutBitMaskBytes (int addr, int size, 
unsigned char *pData) 

Get the bitmask of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitEx (int addr, int bit, unsigned 
char data) 
Set the value of an output bit. More... 
WMX3APIFUNC SetOutByteEx (int addr, unsigned char 
data) 
Set the value of an output byte. More... 

WMX3APIFUNC SetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitsEx (int *pAddr, int *pBit, 

unsigned char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId) 

Get the ID of the interrupt (cyclic handler) 
that will set the initial value of the 
specified output byte. More... 

WMX3APIFUNC GetInitialOutBytesInterruptId (int addr, 
int size, unsigned char *pInterruptId) 

Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 


More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the IOErrorCode enum or the ErrorCode enum in the 
WMX3Api.h header. All errors returned by functions in class Io will be defined in one 
of these enums. Errors returned by functions in other classes may not be defined in 
one of these enums, and when such errors are passed to this function, an 
ErrorCodeNotDefined error will be returned and pString will contain the string 


representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the Io 
class or creating a device. 

◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 


◆ApiLogToString() [1/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 


◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function does not set the specified data atomically. If the data is read by 
another thread at the same time, partially updated data may be read. 

◆SetOutBits() 
WMX3APIFUNC 
SetOutBits ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 
) 

Set the value of multiple output bits. 

Parameters 
[in] 
pAddr A pointer to an int array 
that contains the byte 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 
[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar() 

WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

◆SetOutAnalogDataShort() 

WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified short type 
analog data value. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetOutAnalogDataUShort() 

WMX3APIFUNC 
SetOutAnalogDataU 
Short ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
Short ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified unsigned 
short type analog data value. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetOutAnalogDataInt() 

WMX3APIFUNC 
SetOutAnalogDataIn 
t ( 
) 
WMX3APIFUNC 
SetOutAnalogDataIn 
t ( 
) 
int 
addr, 
int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified int type 
analog data value. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆SetOutAnalogDataUInt() 

WMX3APIFUNC 
SetOutAnalogDataUI 
nt ( 
) 
WMX3APIFUNC 
SetOutAnalogDataUI 
nt ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified unsigned 
int type analog data value. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆SetOutBitMaskMode() 

WMX3APIFU 
NC 
SetOutBitMa 
skMode ( bool enable ) 
WMX3APIFU 
NC 
SetOutBitMa 
skMode ( bool enable ) 
Set the bitmask mode of output. 

Parameters 
[in] 
enable If FALSE, bitmask mode 
is disabled. If TRUE, 
bitmask mode is 
enabled. 

Remarks 

When the bitmask function is enabled, output operations using IoApi are only valid 
for bits for which the bitmask is enabled(1). 

The default value for all bitmasks is enabled(1). 

◆SetOutBitMaskBit() 

WMX3APIFUNC 
SetOutBitMaskBit ( 
WMX3APIFUNC 
SetOutBitMaskBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the bitmask of output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutBitMaskByte() 
WMX3APIFUNC 
SetOutBitMaskByte ( 
) 
int 
addr, 
unsigned char data 
Set the bitmask of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 

◆SetOutBitMaskBytes() 

WMX3APIFUNC 
SetOutBitMaskBytes ( int 
int 
WMX3APIFUNC 
SetOutBitMaskBytes ( int 
int 
addr, 
size, 
unsigned char * pData 
) 
Set the bitmask of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function does not set the specified data atomically. If the data is read by 
another thread at the same time, partially updated data may be read. 

◆SetOutBitMaskBits() 
WMX3APIFUNC 
SetOutBitMaskBits ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the bitmask of multiple output bits. 

Parameters 
[in] 
pAddr A pointer to an int array 
that contains the byte 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 
[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetOutBitMaskBits function multiple times, 
but can be faster due to the reduced overhead. There is no limit to the number of 
bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first 
output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, 
and so on. The bits can be specified in any order. 

◆GetInBit() 

WMX3APIFUNC 
GetInBit ( 
) 
WMX3APIFUNC 
GetInBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInByte() 

WMX3APIFUNC 
GetInByte ( 
) 
WMX3APIFUNC 
GetInByte ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an input byte. 
Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInBytes() 

WMX3APIFUNC 
GetInBytes ( 
) 
WMX3APIFUNC 
GetInBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple input bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time (for example, if a communication interrupt 
occurs), partially updated data may be read. 

◆GetInAnalogDataChar() 

WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUChar() 

WMX3APIFUNC 
GetInAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetInAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an unsigned 
char that will receive the 
data. 

Remarks 

This function reads one byte of the input address space and returns the data as an 
unsigned char type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataShort() 

WMX3APIFUNC 
GetInAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetInAnalogDataSh 
ort ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a short that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as a 
short type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time (for example, if a 
communication interrupt occurs), partially updated data may be read. 

◆GetInAnalogDataUShort() 

WMX3APIFUNC 
GetInAnalogDataUS 
hort ( 
) 
WMX3APIFUNC 
GetInAnalogDataUS 
hort ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an unsigned 
short that will receive the 
data. 

Remarks 

This function reads two bytes of the input address space and returns the data as an 
unsigned short type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time (for example, if a 
communication interrupt occurs), partially updated data may be read. 

◆GetInAnalogDataInt() 

WMX3APIFUNC 
GetInAnalogDataInt ( int 
WMX3APIFUNC 
GetInAnalogDataInt ( int 
addr, 
int * pAnalogData 
) 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an int that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time (for 
example, if a communication interrupt occurs), partially updated data may be read. 

◆GetInAnalogDataUInt() 

WMX3APIFUNC 
GetInAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
GetInAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an unsigned 
int that will receive the 
data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
unsigned int type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time (for 
example, if a communication interrupt occurs), partially updated data may be read. 

◆GetOutBit() 

WMX3APIFUNC 
GetOutBit ( 
) 
WMX3APIFUNC 
GetOutBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an output bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
◆ 
GetOutByte() 

WMX3APIFUNC 
GetOutByte ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetOutBytes() 
WMX3APIFUNC 
GetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as an 
unsigned char type analog data value. 

◆GetOutAnalogDataShort() 

WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the output address space and returns the data as a 
short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetOutAnalogDataUShort() 

WMX3APIFUNC 
GetOutAnalogDataU 
Short ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Short ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetOutAnalogDataInt() 

WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆GetOutAnalogDataUInt() 

WMX3APIFUNC 
GetOutAnalogDataU 
Int ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Int ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads four bytes of the output address space and returns the data as 
an unsigned int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆GetOutBitMaskMode() 

WMX3APIFU 
NC 
GetOutBitMa 
skMode ( bool * pEnable ) 
WMX3APIFU 
NC 
GetOutBitMa 
skMode ( bool * pEnable ) 
Get the bitmask mode of output. 

Parameters 
[out] 
pEnable If FALSE, bitmask mode 
is disabled. If TRUE, 
bitmask mode is 
enabled. 

Remarks 

When the bitmask function is enabled, output operations using IoApi are only valid 
for bits for which the bitmask is enabled(1). 

The default value for all bitmasks is enabled(1). 

◆GetOutBitMaskBit() 

WMX3APIFUNC 
GetOutBitMaskBit ( 
) 
WMX3APIFUNC 
GetOutBitMaskBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the bitmask of an output bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 

◆GetOutBitMaskByte() 
WMX3APIFUNC 
GetOutBitMaskByte ( int 
addr, 
unsigned char * pData 
) 
Get the bitmask of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetOutBitMaskBytes() 
WMX3APIFUNC 
GetOutBitMaskBytes ( int 
int 
addr, 
size, 
unsigned char * pData 
) 
Get the bitmask of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆SetOutBitEx() 

WMX3APIFUNC 
SetOutBitEx ( 
WMX3APIFUNC 
SetOutBitEx ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 
Remarks 

This function has a faster response time compared to SetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutByteEx() 

WMX3APIFUNC 
SetOutByteEx ( 
) 
WMX3APIFUNC 
SetOutByteEx ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBitsEx() 
WMX3APIFUNC 
SetOutBitsEx ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the value of multiple output bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks 

A pointer to an int array 
that contains the byte 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 

A pointer to an int array 
that contains the bit 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 

A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 

The number of bits to 
set. 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified short type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUShortEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified unsigned 
short type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataIntEx() 

WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified int type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUIntEx() 

WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified unsigned 
int type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetInBitEx() 

WMX3APIFUNC 
GetInBitEx ( 
) 
WMX3APIFUNC 
GetInBitEx ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetInBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInByteEx() 

WMX3APIFUNC 
GetInByteEx ( 
) 
WMX3APIFUNC 
GetInByteEx ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an input byte. 
Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetInByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInBytesEx() 

WMX3APIFUNC 
GetInBytesEx ( 
) 
WMX3APIFUNC 
GetInBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple input bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetInBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx() 

WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetInAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUCharEx() 

WMX3APIFUNC 
GetInAnalogDataUC 
harEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as an 
unsigned char type analog data value. 

This function has a faster response time compared to GetInAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataShortEx() 

WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as a 
short type analog data value. 

This function has a faster response time compared to GetInAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUShortEx() 

WMX3APIFUNC 
GetInAnalogDataUS 
hortEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataUS 
hortEx ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as an 
unsigned short type analog data value. 

This function has a faster response time compared to GetInAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataIntEx() 

WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function has a faster response time compared to GetInAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataUIntEx() 

WMX3APIFUNC 
GetInAnalogDataUIn 
tEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataUIn 
tEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
unsigned int type analog data value. 

This function has a faster response time compared to GetInAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetOutBitEx() 

WMX3APIFUNC 
GetOutBitEx ( 
) 
WMX3APIFUNC 
GetOutBitEx ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an output bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutByteEx() 

WMX3APIFUNC 
GetOutByteEx ( 
) 
WMX3APIFUNC 
GetOutByteEx ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an output byte. 

Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆ 
GetOutBytesEx() 

WMX3APIFUNC 
GetOutBytesEx ( 
) 
WMX3APIFUNC 
GetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx() 

WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUCharEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as an 
unsigned char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataShortEx() 

WMX3APIFUNC 
GetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the output address space and returns the data as a 
short type analog data value. 

This function has a faster response time compared to GetOutAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUShortEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataIntEx() 

WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUIntEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads four bytes of the output address space and returns the data as 
an unsigned int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetInitialOutByte() 

WMX3APIFUNC 
SetInitialOutByte ( 
WMX3APIFUNC 
SetInitialOutByte ( 
int 
addr, 
unsigned char data, 
unsigned char enable 
) 
Set the initial value of an output byte that is applied when communication is started. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
[in] 
enable Set to 1 to enable the 
initial value of this output 
byte, and set to 0 to 
disable it. If the initial 
value is disabled, the 
output byte will not be 
changed when 
communication is 
started. 

Remarks 

This function sets the initial value of an output byte. The initial value is the value that 
the output byte is set to whenever communication with the servo network is started 
using the StartCommunication API function. 

◆SetInitialOutBytes() 
WMX3APIFUNC 
SetInitialOutBytes ( int addr, 
int size, 

unsigned char * pData, 
unsigned char * pEnable 
) 
unsigned char * pData, 
unsigned char * pEnable 
) 
Set the initial values of multiple output bytes that are applied when communication 
is started. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
[in] 
pEnable A pointer to an unsigned 
char array that is used to 
enable or disable the 
initial value of each 
output byte. Set to 1 to 
enable the initial value of 
the corresponding output 
byte, and set to 0 to 
disable it. If the initial 
value is disabled, the 
output byte will not be 
changed when 
communication is 
started. The size of the 
array must be greater 
than or equal to the size 
parameter. 


Remarks 

This function sets the initial values of multiple output bytes. The initial values are the 
values that the output bytes are set to whenever communication with the servo 
network is started using the StartCommunication API function. 

◆GetInitialOutByte() 
WMX3APIFUNC 
GetInitialOutByte ( 
int 
addr, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial value of an output byte that is applied when communication is started. 

Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 
[out] 
pEnable A pointer to a unsigned 
char that will contain 1 if 
the initial value is set for 
the specified output byte, 
and 0 otherwise. 

Remarks 

This function gets the initial value of an output byte. The initial value is the value that 
the output byte is set to whenever communication with the servo network is started 
using the StartCommunication API function. 


◆GetInitialOutBytes() 
WMX3APIFUNC 
GetInitialOutBytes ( 
int 
int 
addr, 
size, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial values of multiple output bytes that are applied when communication 

is started. 
Parameters 
[in] 
addr 
[in] 
size 
[out] 
pData 
[out] 
pEnable 

The byte address of the 

head byte. 
The number of bytes to 
get. 

A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 

A pointer to a unsigned 
char array. Each index 
will contain 1 if the initial 
value is set for the 
output byte 
corresponding to that 
index, and 0 otherwise. 
The size of the array 
must be greater than or 
equal to the size 
parameter. 



Remarks 

This function gets the initial values of multiple output bytes. The initial values are the 
values that the output bytes are set to whenever communication with the servo 
network is started using the StartCommunication API function. 

◆GetInitialOutByteInterruptId() 
WMX3APIFUNC 
GetInitialOutByteInte 
rruptId ( 
) 
int 
addr, 
unsigned char * pInterruptId 
Get the ID of the interrupt (cyclic handler) that will set the initial value of the 
specified output byte. 

Parameters 
[in] 
addr The address of the 
output byte to check. 
[out] 
pInterruptId A pointer to an unsigned 
char that will contain the 
ID of the interrupt that 
will set the initial value of 
the specified output byte. 

Remarks 

This function gets the ID of the interrupt (cyclic handler) that will set the initial value 
of the specified output byte. The specified output byte will be set to the configured 
value (if any) when communication is started for this interrupt. 

◆GetInitialOutBytesInterruptId() 

WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
int 
int 
addr, 
size, 
unsigned char * pInterruptId 
) 
Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the 

specified output bytes. 
Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
check. 
[out] 
pInterruptId A pointer to an unsigned 
char array. Each index 
will contain the ID of the 
interrupt that will set the 
initial value of the 
specified output byte. 
Remarks 

This function gets the IDs of the interrupts (cyclic handlers) that will set the initial 
values of the specified output bytes. Each specified output byte will be set to the 
configured value (if any) when communication is started for the associated interrupt. 

 

Log Class Reference 

This class contains log functions. 

Public Member Functions 

Log (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

Log (const Log &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

Log & operator= (const Log &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

Log () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~Log () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC StartLog (unsigned int channel) 
Start logging data. More... 
WMX3APIFUNC StopLog (unsigned int channel) 
Stop logging data. More... 

WMX3APIFUNC ResetLog (unsigned int channel) 
Reset the log settings, options, and 
statuses for the specified log channel. 
More... 

WMX3APIFUNC SetLogHeader (unsigned int channel, 
char **ppLine, unsigned int numLines) 

Set the log header string that is copied to 
the beginning of the log file. More... 

WMX3APIFUNC SetLog (unsigned int channel, LogInput 
*input) 

Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More... 

WMX3APIFUNC SetLog (unsigned int channel, wchar_t 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 
unsigned int scale=9) 
Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More... 

WMX3APIFUNC SetIOLog (unsigned int channel, 
IOAddress *pInputIOAddress, unsigned 
int inputSize, IOAddress 
*pOutputIOAddress, unsigned int 
outputSize) 

Set data logging settings for logging I/O 
data. This function is deprecated and 
is replaced by the SetLog function. 
This function will be removed in a 
future version. More... 

WMX3APIFUNC SetIOLogFormat (unsigned int channel, 
IOLogFormat *pInputIOLogFormat, 
unsigned int inputIOFormatCount, 
IOLogFormat *pOutputIOLogFormat, 
unsigned int outputIOFormatCount) 
Set data logging settings for logging I/O 
data in a custom format. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More... 


WMX3APIFUNC SetMLog (unsigned int channel, 
MAddress *pMAddress, unsigned int 
size) 
Set data logging settings for logging user 
memory data. This function is 
deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More... 

WMX3APIFUNC SetMLogFormat (unsigned int channel, 
MLogFormat *pMLogFormat, unsigned 
int mFormatCount) 
Set data logging settings for logging user 
memory data in a custom format. This 
function is deprecated and is replaced 
by the SetLog function. This function 
will be removed in a future version. 
More... 

WMX3APIFUNC OpenMemoryLogBuffer (unsigned int 
channel) 
Open the memory log buffer. More... 
WMX3APIFUNC CloseMemoryLogBuffer (unsigned int 
channel) 
Close the memory log buffer. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
LogInput *input) 

Specify data to be collected by the 
memory log operation. More... 

WMX3APIFUNC SetMemoryLogOption (unsigned int 
channel, MemoryLogOptions *pOption) 

Set the memory log options for a 
memory log channel. More... 

WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More... 

WMX3APIFUNC StartMemoryLog (unsigned int channel) 
Start the memory log operation. More... 
WMX3APIFUNC StopMemoryLog (unsigned int channel) 
Stop the memory log operation. More... 

WMX3APIFUNC ResetMemoryLog (unsigned int channel) 
Reset the memory log settings, options, 
and statuses for the specified memory 
log channel. More... 

WMX3APIFUNC GetMemoryLogStatus (unsigned int 
channel, MemoryLogStatus *pStatus) 

Get the current status of the memory log 
operation. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput *pOutput) 

Retrieve data from memory log of a 
single module. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
AxisSelection *pAxisSelection, 
MemoryLogOptions *pOption) 
Set memory log settings. This function 
is deprecated and is replaced by the 
SetMemoryLog function and 
SetMemoryLogOption function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryIOLog (unsigned int channel, 
IOAddress *pInputIOAddress, unsigned 
int inputSize, IOAddress 
*pOutputIOAddress, unsigned int 


outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryMLog (unsigned int channel, 
MAddress *pMAddress, unsigned int 
size) 
Set user memory memory log settings. 
This function is deprecated and is 
replaced by the SetMemoryLog 
function. This function will be 
removed in a future version. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, MemoryLogData *pData) 
Retrieve data from memory log. This 
function is deprecated and is replaced 
by the GetMemoryLogData function. 
This function will be removed in a 
future version. More... 

WMX3APIFUNC SetApiLog (char *pPath, ApiLogOptions 
*pOptions=NULL, unsigned int 
buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC StartApiLog () 
Start logging data to the API log. More... 

WMX3APIFUNC StopApiLog () 


Stop logging data to the API log. More... 

WMX3APIFUNC GetApiLogStatus (ApiLogStatus 
*pStatus) 

Get the current status of the API log. 

More... 

WMX3APIFUNC OpenApiLogFile (char *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC OpenApiLogFile (wchar_t *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC GetApiLogData (FILE *pFile, unsigned 
char *pDataBuff, unsigned int buffSize, 
ApiLogInfo *pApiLogInfo=NULL) 
Extract the information of one API 
function call from the API log file. More... 

WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the LogErrorCode enum or the ErrorCode enum in the 
WMX3Api.h header. All errors returned by functions in class Log will be defined in 
one of these enums. Errors returned by functions in other classes may not be 
defined in one of these enums, and when such errors are passed to this function, an 
ErrorCodeNotDefined error will be returned and pString will contain the string 
representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the Log 
class or creating a device. 


◆ 
ErrorToString() [2/2] 


static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆TimestampToString() [1/2]

static 
WMX3APIFUNC 
TimestampToString ( 
) 
static 
WMX3APIFUNC 
TimestampToString ( 
) 
long long 
char * 
timestamp, 
pString, 
unsigned int size 
Get a string representation of a timestamp. 

Parameters 
[in] 
timestamp The timestamp to 
convert to a string. 
[out] 
pString A char array that will 
contain the string 
representation of the 
timestamp. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

The timestamp is the number 100-ns ticks since 1 January 1601 00:00:00 UTC. 
The timestamp member of the ApiLogInfo class can be passed to this function. 
The returned string will be in the format "YYYY-MM-DD HH:mm:SS.sss" (sss is the 

number of milliseconds) in the local system time. 

◆TimestampToString() [2/2]

static 
WMX3APIFUNC 
TimestampToString ( 
) 
static 
WMX3APIFUNC 
TimestampToString ( 
) 
long long 
wchar_t * 
timestamp, 
pString, 
unsigned int size 
Get a string representation of a timestamp. 

Parameters 
[in] 
timestamp The timestamp to 
convert to a string. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the 
timestamp. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of TimestampToString that accepts a wchar_t array. 
Use this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆StartLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC StartLog ( 
Start logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Before starting to log data, data logging settings must first be set using the SetLog 
API function. 
When this function is called, a file will be immediately created at the file path 

specified by the SetLog API function. Data will be collected and written to this file 
until the specified sample time elapses or an error is encountered. 
Call the GetLogStatus API function to obtain the status of the logging operation. 
See also 

Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

When this function is called, all log settings, options, and statuses are cleared for 
the specified channel. 

This function cannot be called while a logging operation is active. The state of the 
log channel obtained with the GetDetailLogStatus function must be Finished, 
WriteFail, or BufferOverflow. 

◆SetLogHeader() 
WMX3APIFUNC 
SetLogHeader ( unsigned int channel, 
char ** ppLine, 
unsigned int numLines 
) 
Set the log header string that is copied to the beginning of the log file. 
Parameters 

[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
ppLine An array of pointers to 
null-terminated char 
arrays. Each null-
terminated char array 
contains one line of the 
header. 
[in] 
numLines The number of elements 
(pointers to null-
terminated char arrays) 
in the value passed to 
the "ppLine" parameter. 
Each pointer (to a null-
terminated char array) 
contains one line of the 
header string, so the 
"numLines" value 
effectively specifies the 
number of lines in the 
header. 

Remarks 

This function sets the header string that is printed at the beginning of the log file. 
This function is optional, and it is not necessary to call this function when collecting 
log data. If this function is not called, no header will be printed at the beginning of 
the log file. 

The maximum number of lines that may constitute the header is defined by the 
maxLogHeaderLines constant. The maximum number of characters total in the 



header (including the new line character at the end of each line) is defined by the 
maxLogHeaderBytes constant. 

The log header can be removed by calling the ResetLog function. All other log 
settings and options will also be cleared, and will need to be set again. 

◆SetLog() [1/3]
WMX3APIFUNC 
SetLog ( unsigned int channel, 
LogInput * input 
) 
Specify data to be collected by the logging operation. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
input A pointer to an object of 
a class that inherits the 
LogInput class. 

Remarks 

This function specifies which data to be collected by the logging operation. 

Each module that contains data that can be logged defines a class that inherits the 
LogInput class. For example, the CoreMotion module defines the 
CoreMotionLogInput class, which can be used to collect axis data such as position 


commands. The IO module defines the IoLogInput, which can be used to collect 
I/O data. 

Data from multiple modules may be logged simultaneously. To do so, call this 
function multiple times, passing in a different LogInput object each time. For 
example, to collect the position command data of an axis and I/O data in a single 
log file, call this function passing an CoreMotionLogInput object, and then call this 
function again passing an IoLogInput object. 

If the data to collect from a module has been specified already, calling this function 
again for the same module will overwrite the set of data to collect. 

This function allocates memory each time it is called. If there is not enough 
contiguous memory in the real time operating system space, an error will be 
returned. 

The memory allocated by this function is released when the log operation finishes. 
To start another log operation, this function must be called again. 

See also 

Data Log 

◆ 
SetLogOption() 

WMX3APIFUNC 
SetLogOption ( 
WMX3APIFUNC 
SetLogOption ( 
unsigned int channel, 
LogChannelOptions pOption 
) 
Set the log options for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class that contains the 
log options. 
Remarks 

This function sets the log options for a log channel. These options are applied each 
time a log operation is started by the specified channel. 

Before this function is called for a log channel, the default log options are applied 
(these default log options can be obtained by calling GetLogOption before calling 
this function). 

See also 

Data Log 

◆GetLogOption() 

◆GetLogOption() 
WMX3APIFUNC 
GetLogOption ( 
) 
unsigned int channel, 
LogChannelOptions pOption 
Get the log options for a log channel. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class will contain the log 
options. 
Remarks 
This function gets the log options for a log channel. 

◆SetLogFilePath() [1/2]

WMX3APIFUNC 
SetLogFilePath ( unsigned int channel, 
WMX3APIFUNC 
SetLogFilePath ( unsigned int channel, 
LogFilePathA * pPath 
) 
Set the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pPath A pointer to an object of 
the LogFilePathA class 
that contains the file 
path. 

Remarks 

This function sets the file path for a log channel. Log operations started by the 
specified channel will save the log file to this file path. 

The directory specified in dirPath must exist. Otherwise, the log operation will 
generate a WriteFail error. 

The file path is specified as a char string. To specify the file path as a wchar_t string, 
use the SetLogFilePath function. 

If a log operation is started for a log channel before calling this function, the log file 
is saved to the default file path of "C:\wmx3_logfile.txt". 


◆GetLogFilePath() [1/2]
WMX3APIFUNC 
GetLogFilePath ( unsigned int channel, 
LogFilePathA * pPath 
) 
Get the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pPath A pointer to an object of 
the LogFilePathA class 
that will contain the file 
path. 

Remarks 

This function gets the file path of a log channel. This is the file path that the log file 
will be saved to when a log operation is started by the log channel. 

The file path is obtained as a char string. To obtain the file path as a wchar_t string, 
use the GetLogFilePath function. 

◆SetLogFilePath() [2/2]

WMX3APIFUNC 
SetLogFilePath ( 
WMX3APIFUNC 
SetLogFilePath ( 
unsigned int channel, 
LogFilePathW * pPath 
) 
Set the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pPath A pointer to an object of 
the LogFilePathW class 
that contains the file 
path. 

Remarks 

This function sets the file path for a log channel. Log operations started by the 
specified channel will save the log file to this file path. 

The directory specified in dirPath must exist. Otherwise, the log operation will 
generate a WriteFail error. 

The file path is specified as a wchar_t string. To specify the file path as a char string, 
use the SetLogFilePath function. 

If a log operation is started for a log channel before calling this function, the log file 
is saved to the default file path of "C:\wmx3_logfile.txt". 


◆GetLogFilePath() [2/2]
WMX3APIFUNC 
GetLogFilePath ( unsigned int channel, 
LogFilePathW * pPath 
) 
Get the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pPath A pointer to an object of 
the LogFilePathW class 
that will contain the file 
path. 

Remarks 

This function gets the file path of a log channel. This is the file path that the log file 
will be saved to when a log operation is started by the log channel. 

The file path is obtained as a wchar_t string. To obtain the file path as a char string, 
use the GetLogFilePath function. 

◆GetLogStatus() 
WMX3APIFUNC 

GetLogStatus GetLogStatus 
( 
unsigned int 
channel, 
LogStatus * pStatus 
) 
Get the current status of the data logging operation. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pStatus A pointer to a LogStatus 
that will contain the 
current status of the 
logging operation. 
Remarks 

This function obtains the status of the current logging operation. This function may 
be called after starting a logging operation using StartLog to observe the progress 
of the logging operation. 

The samplesToCollect, samplesCollected, and samplesWritten values contain 
the same information as the millisecondsToCollect, millisecondsCollected, and 
millisecondsWritten values. The difference between these two groups of values is 
the unit. 

If logging is stopped because of write failure, verify that the application calling the 
log function has permission to write to the specified file path of the log file. 

If logging is stopped because of buffer overflow, reduce the number of axes to log 
data, reduce the number of types of data to log, increase the sampling period 
(reduce the sampling frequency), or improve the file write speed of the PC. 


◆GetDetailLogStatus() 
WMX3APIFUNC 
GetDetailLogStatus ( unsigned int channel, 
DetailLogStatus * pStatus 
) 
Get the current status of the data logging operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pStatus A pointer to a 
DetailLogStatus that 
will contain the current 
status of the logging 
operation. 

Remarks 

This function obtains the detailed status of the current logging operation. 

◆SetCustomLog() 

WMX3APIFUNC 
SetCustomLog 
( unsigned int channel, 
unsigned int moduleId, 
WMX3APIFUNC 
SetCustomLog 
( unsigned int channel, 
unsigned int moduleId, 
void * 
data, 
unsigned int dataSize, 
LogType::T type 
) 
Reserved. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
moduleId The module ID of the 
module that defines the 
class inheriting 
LogInput passed to 
data. 
[in] 
data A pointer to an object of 
a class that inherits the 
LogInput class. 
[in] 
dataSize The size of the object 
passed to data, in bytes. 
[in] 
type The type of log to set. 

◆SetLog() [2/3]

WMX3APIFUNC 
SetLog ( unsigned int channel, 
char * pPath, 
unsigned int milliseconds, 
unsigned int samplePeriodInCycle 
WMX3APIFUNC 
SetLog ( unsigned int channel, 
char * pPath, 
unsigned int milliseconds, 
unsigned int samplePeriodInCycle 
AxisSelection * pAxisSelection, 
LogOptions * pOptions, 
unsigned int mode, 
unsigned int burstWriteLines = 4, 
unsigned int scale = 9) 
Set data logging settings. This function is deprecated and is replaced by the 
SetLog function. This function will be removed in a future version. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pPath The absolute file path to 
save the log file to. 
[in] 
milliseconds The number of 
milliseconds to collect 
data samples to write to 

the log. 

[in] 
samplePeriodInCycles The sampling period in 
units of communication 
cycles. This value 


determines the 
frequency at which data 
samples are taken. 
When set to 1, samples 
will be collected every 
cycle. 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to collect the data 
of. 
[in] 
pOptions A pointer to a 
LogOptions class object 
that specifies what data 
to collect. 
[in] 
mode Reserved. This value is 
ignored. 
[in] 
burstWriteLines The number of lines to 
write at once. This value 
must be between 4 and 
1020. A value that is too 
small can increase the 
load on the engine due 
to frequent file writing, 
and a value that is too 
large can put a large 
instantaneous load on 
the engine (although 
these loads should not 
affect the cyclic 
operation of the engine). 
In most cases, the 
default value of 4 is 
suitable. 
[in] 
scale The number of decimal 


places to write for 
floating point data. 

Remarks 

This function sets the data log settings, but will not start logging data. Use the 
StartLog API function to start collecting log data using the specified settings. 

The log function can collect the command and feedback data for every 
communication cycle during the logging period. This information can be used to 
obtain an accurate picture of the operation of the machine. 

The logged data is saved to a text file. If a file with the same name already exists 
in the specified file path, it will be overwritten by this function. 

Each row of the data log contains data for a particular communication cycle. Data 
values are separated by tab characters. The first row of the data log contains a text 
representation of the data stored in that column. The first column of the data log 
always stores the communication cycle number. 

A sample data log is as follows: 

�T�C�N 
�� 
CMDPOS 0 FBPOS 0 CMDPOS 1 FBPOS 1 
10000 
150000.0000 
00 
150000.0000 
00 
320000.0000 
00 
320000.0000 
00 
10001 
150000.0000 
00 
150000.0000 
00 
320000.0000 
00 
320000.0000 
00 
10002 
150000.0000 
00 
150000.0000 
00 
320000.0000 
00 
320000.0000 
00 
10003 
150000.0000 
00 
150000.0000 
00 
320000.0000 
00 
320000.0000 
00 
10004 
150000.0000 
00 
150000.0000 
00 
320000.0000 
00 
320000.0000 
00 

In this example, the first column contains the cycle time, the second column 
contains the position command for axis 0, the third column contains the position 
feedback for axis 0, the fourth column contains the position command for axis 1, 



◆SetLog() [3/3]
and the fifth column contains the position feedback for axis 1. 
WMX3APIFUNC 
SetLog ( unsigned int channel, 
wchar_t * pPath, 
unsigned int milliseconds, 
unsigned int samplePeriodInCycle 
AxisSelection * pAxisSelection, 
LogOptions * pOptions, 
unsigned int mode, 
unsigned int burstWriteLines = 4, 
unsigned int scale = 9) 
Set data logging settings. This function is deprecated and is replaced by the 
SetLog function. This function will be removed in a future version. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pPath The absolute file path to 
save the log file to. 
[in] 
milliseconds The number of 
milliseconds to collect 


data samples to write to 
the log. 

[in] 
samplePeriodInCycles The sampling period in 
units of communication 
cycles. This value 
determines the 
frequency at which data 
samples are taken. 
When set to 1, samples 
will be collected every 
cycle. 

[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to collect the data 
of. 

[in] 
pOptions A pointer to a 
LogOptions class object 
that specifies what data 
to collect. 

[in] 
mode Reserved. This value is 
ignored. 

[in] 
burstWriteLines The number of lines to 
write at once. This value 
should be between 4 
and 1020 to prevent 
write buffer overflow 
errors. Increasing this 
value may reduce the 
load on the CPU. 

[in] 
scale The number of decimal 
places to write for 
floating point data. 

Remarks 



This function is a variation of SetLog that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

◆SetIOLog() 
WMX3APIFUNC 
SetIOLog ( unsigned int channel, 
IOAddress * pInputIOAddress, 
unsigned int inputSize, 
IOAddress * pOutputIOAddress, 
unsigned int outputSize 
) 
Set data logging settings for logging I/O data. This function is deprecated and is 
replaced by the SetLog function. This function will be removed in a future 
version. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pInputIOAddress An array of I/O input 
addresses. The size 
parameter must be 
specified. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 


[in] 
inputSize The number elements in 
the pInputIOAddress 
array. 
[in] 
pOutputIOAddress An array of I/O output 
addresses. The size 
parameter must be 
specified. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 
[in] 
outputSize The number of elements 
in the pOutputIOAddress 
array. 
Remarks 

This function can be called to specify the data log function to log I/O data when 
StartLog is called. I/O data can be logged alongside position/velocity data by calling 
both SetLog and SetIOLog. 

◆SetIOLogFormat() 
WMX3APIFUNC 
SetIOLogFormat ( unsigned int channel, 
IOLogFormat * pInputIOLogFormat, 
unsigned int inputIOFormatCount, 
IOLogFormat * pOutputIOLogFormat 
unsigned int outputIOFormatCount 
) 
Set data logging settings for logging I/O data in a custom format. This function is 
deprecated and is replaced by the SetLog function. This function will be 
removed in a future version. 

Parameters 


[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pInputIOLogFormat A pointer to an array of 
IOLogFormat objects. 
Each IOLogFormat 
object defines a 
contiguous region of I/O 
input addresses to log 
using a particular format. 
The byte member 
specifies the starting 
byte address of the 
region of I/O inputs to 
log. The bit member 
specifies the starting bit 
address of the region of 
I/O inputs to log. The 
ioFormatType member 
specifies the format of 
the logged data. 
[in] 
inputIOFormatCount The number of elements 
in the inputIOLogFormat 
array. 
[in] 
pOutputIOLogFormat A pointer to an array of 
IOLogFormat objects. 
Each IOLogFormat 
object defines a 
contiguous region of I/O 
output addresses to log 
using a particular format. 


The byte member 
specifies the starting 
byte address of the 
region of I/O outputs to 
log. The bit member 
specifies the starting bit 
address of the region of 
I/O outputs to log. The 
ioFormatType member 
specifies the format of 
the logged data. 
[in] 
outputIOFormatCount The number of elements 
in the 
outputIOLogFormat 
array. 
Remarks 

This function is an alternate way to log I/O data. This function allows contiguous 
sequences of I/O to be logged under a single column, whereas the SetIOLog 
function logs each individual I/O bit under a separate column. This function is useful 
when logging I/O data for systems which contain entities that are represented by 
multiple I/O bits, such as analog I/O modules. 

◆ 
SetMLog() 

WMX3APIFUNC 
SetMLog ( 
) 
WMX3APIFUNC 
SetMLog ( 
) 
unsigned int channel, 
MAddress * pMAddress, 
unsigned int size 
Set data logging settings for logging user memory data. This function is 
deprecated and is replaced by the SetLog function. This function will be 
removed in a future version. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pMAddress An array of user memory 
addresses. The size 
parameter must be 
specified. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 
[in] 
size The number elements in 
the pMAddress array. 
Remarks 

This function can be called to specify the data log function to log user memory data 
when StartLog is called. User memory data can be logged alongside 
position/velocity data by calling both SetLog and SetMLog. 


◆SetMLogFormat() 
WMX3APIFUNC 
SetMLogFormat ( unsigned int channel, 
MLogFormat * pMLogFormat, 
unsigned int mFormatCount 
) 
Set data logging settings for logging user memory data in a custom format. This 
function is deprecated and is replaced by the SetLog function. This function 
will be removed in a future version. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pMLogFormat A pointer to an array of 
MLogFormat objects. 
Each MLogFormat 
object defines a 
contiguous region of 
user memory addresses 
to log using a particular 
format. The byte 
member specifies the 
starting byte address of 
the region of user 
memory to log. The bit 
member specifies the 


starting bit address of 
the region of user 
memory to log. The 
mFormatType member 
specifies the format of 
the logged data. 
[in] 
mFormatCount The number of elements 
in the pMLogFormat 
array. 
Remarks 

This function is an alternate way to log user memory data. This function allows 
contiguous sequences of user memory to be logged under a single column, 
whereas the SetMLog function logs each individual user memory bit under a 
separate column. This function is useful for logging a contiguous segment of user 
memory that represents a single entity. 

◆ 
OpenMemoryLogBuffer() 

WMX3APIFU 
NC 
OpenMemory 
LogBuffer ( unsigned int channel ) 
WMX3APIFU 
NC 
OpenMemory 
LogBuffer ( unsigned int channel ) 
Open the memory log buffer. 
Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

This function opens the memory log buffer. The memory log buffer must be opened 
before memory log operations can be performed. 

The memory log buffer should be opened as early as possible if memory log 
operations will be used by the application, as this function can fail if the system does 
not have enough memory to open the log buffer. 

If a function that requires the memory log buffer (SetMemoryIOLog, 
SetMemoryMLog, StartMemoryLog, StopMemoryLog, GetMemoryLogStatus) is 
called before the memory log buffer is opened, the function will attempt to open the 
memory log buffer automatically. 

Once the memory log buffer has been opened, it does not need to be opened again 
unless the log buffer is closed with the CloseMemoryLogBuffer function or the 
engine is restarted. 


◆CloseMemoryLogBuffer() 

WMX3APIFU 
NC 
CloseMemor 
WMX3APIFU 
NC 
CloseMemor 
yLogBuffer ( 
unsigned int channel ) 
Close the memory log buffer. 
Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks 

This function closes the memory log buffer that has been opened by the 
OpenMemoryLogBuffer function. This frees the memory that has been used for 
the memory log buffer. Once the memory log buffer is closed, memory log functions 
will be unavailable until the memory log buffer is reopened using the 
OpenMemoryLogBuffer function. 

It is not neccessary to close the memory log buffer once it is opened. For most 
cases, the memory log buffer should be opened during initialization and kept open 
for the entire session. 

It is not necessary to call this function before closing the WMX3 engine. All buffers 
that were open at the time that the WMX3 engine closes will be closed 
automatically. 

◆SetMemoryLog() [1/2]

yLog() [1/2]
WMX3APIFUNC 
SetMemoryLog ( 
) 
[1/2] 


WMX3APIFUNC 
SetMemoryLog ( 
unsigned int channel, 
LogInput * 
input 
) 
Specify data to be collected by the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
input A pointer to an object of 
a class that inherits the 
LogInput class. 
Remarks 

This function specifies which data to be collected by the memory log operation. 

Each module that contains data that can be logged defines a class that inherits the 
LogInput class. For example, the CoreMotion module defines the 
CoreMotionLogInput class, which can be used to collect axis data such as position 
commands. The IO module defines the IoLogInput, which can be used to collect 
I/O data. 

Data from multiple modules may be logged simultaneously. To do so, call this 
function multiple times, passing in a different LogInput object each time. For 
example, to collect the position command data of an axis and I/O data in a single 
log file, call this function passing an CoreMotionLogInput object, and then call this 


function again passing an IoLogInput object. 

If the data to collect from a module has been specified already, calling this function 
again for the same module will overwrite the set of data to collect. 

The collected data can be read out with GetMemoryLogData function. 

This function allocates memory each time it is called. If there is not enough 
contiguous memory in the real time operating system space, an error will be 
returned. 

The memory allocated by this function is not released until 
CloseMemoryLogBuffer function or ResetMemoryLog function is called or the 
WMX3 engine is closed. As an exception, the memory allocated by specifying 
LogApiLogInput as an argument to this function will not be freed by 
ResetMemoryLog function. 

See also 

Memory Log 

◆ 
SetMemoryLogOption() 

WMX3APIFUNC 
SetMemoryLogOptio 
n ( 
WMX3APIFUNC 
SetMemoryLogOptio 
n ( 
unsigned int channel, 
MemoryLogOptions pOption 
) 
Set the memory log options for a memory log channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
pOption A pointer to an object of 
the MemoryLogOptions 
class that contains the 
memory log options. 
Remarks 

This function sets the memory log options for a log channel. These options are 
applied each time a memory log operation is started by the specified channel. 

Before this function is called for a memory log channel, the default memory log 
options are applied (these default memory log options can be obtained by calling 
GetMemoryLogOption before calling this function). 

◆GetMemoryLogOption() 

WMX3APIFUNC 
GetMemoryLogOptio 
WMX3APIFUNC 
GetMemoryLogOptio 
n ( 
) 
unsigned int channel, 
MemoryLogOptions pOption 
Get the memory log options for a memory log channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the MemoryLogOptions 
class will contain the 
memory log options. 

Remarks 

This function gets the memory log options for a memory log channel. 

◆StartMemoryLog() 

WMX3APIFU 
NC 
StartMemory 
WMX3APIFU 
NC 
StartMemory 
Log ( 
unsigned int channel ) 
Start the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

Memory log settings must first be set using the SetMemoryLog API function. 

When this function is called, the data specified by functions such as 
SetMemoryLog will be recorded to a preallocated buffer every cycle. The recording 
continues until the StopMemoryLog function is called or an error is encountered. 

Call the GetMemoryLogStatus API function to obtain the status of the logging 
operation. 

◆StopMemoryLog() 

WMX3APIFU 
NC 
StopMemory 
WMX3APIFU 
NC 
StopMemory 
Log ( 
unsigned int channel ) 
Stop the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

When this function is called, the engine will stop recording data to the memory log. 

◆ResetMemoryLog() 

WMX3APIFU 
NC 
ResetMemor 
WMX3APIFU 
NC 
ResetMemor 
yLog ( 
unsigned int channel ) 
Reset the memory log settings, options, and statuses for the specified memory log 
channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks 

When this function is called, all memory log settings, options, and statuses are 
cleared for the specified channel. 

This function cannot be called while a memory log operation is active. The logState 
of the memory log channel obtained with the GetMemoryLogStatus function must 
be Idle. 

◆GetMemoryLogStatus() 

WMX3APIFUNC 
GetMemoryLogStatu 
s ( 
WMX3APIFUNC 
GetMemoryLogStatu 
s ( 
unsigned int channel, 
MemoryLogStatus * pStatus 
) 
Get the current status of the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

[out] 
pStatus A pointer to a 
MemoryLogStatus that 
will contain the current 
status of the logging 
operation. 

Remarks 

This function obtains the status of the memory log. 

◆GetMemoryLogData() [1/3]
WMX3APIFUNC 
GetMemoryLogData 
( unsigned int channel, 
LogOutput * pOutput 

) ) 
Retrieve data from memory log of a single module. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 

maxMemLogChannel 

constant. 
[out] 
pOutput A pointer to an object of 
a class that inherits the 
LogOutput class object 
that will contain the 
logged data. 

Remarks 

This function retrieves a maximum of maxLogOutputDataSize cycles of log data 
from memory log buffer each time it is called. 

Only the data of the module specified in pOutput is retrieved. If SetMemoryLog is 
called multiple times to set multiple modules to the memory log, this function will 
discard the log data of the same cycle for modules other than the one specified in 
the argument pOutput. To retrieve log data of multiple modules at the same time, 
use the GetMemoryLogData function. 

The memory log buffer stores up to maxMemLogBufferSize cycles of data at one 
time. If the logged data is not read using GetMemoryLogData fast enough, log data 
will be overwritten starting from the oldest data (this can be observed by checking 
for skipped cycles in the cycleCounter or the overflowFlag value of the log data. 

Calling this function and retrieving data from the buffer will clear the overflowFlag 



◆GetMemoryLogData() [2/3]
until the buffer overflows again. 
WMX3APIFUNC 
GetMemoryLogData ( unsigned int channel, 
LogOutput ** ppOutput, 
unsigned int size 
) 
Retrieve data from memory log of multiple modules. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[out] 
ppOutput An array of pointers to 
objects of a class that 
inherits the LogOutput 
class object that will 
contain the logged data. 
[in] 
size The number of elements 
in the ppOutput array. 

Remarks 
This function retrieves a maximum of maxLogOutputDataSize cycles of log data 


from memory log buffer each time it is called. 

Datas of the all module specified in ppOutput are retrieved. If SetMemoryLog is 
called multiple times to set multiple modules to the memory log, this function will 
discard the log data of the same cycle for modules other than the one specified in 
the argument ppOutput. 

The log data of multiple modules retrieved at the same time will be the data logged 
in the same cycle. 

The memory log buffer stores up to maxMemLogBufferSize cycles of data at one 
time. If the logged data is not read using GetMemoryLogData fast enough, log data 
will be overwritten starting from the oldest data (this can be observed by checking 
for skipped cycles in the cycleCounter or the overflowFlag value of the log data. 

Calling this function and retrieving data from the buffer will clear the overflowFlag 
until the buffer overflows again. 

◆SetMemoryLog() [2/2]
WMX3APIFUNC 
SetMemoryLog ( unsigned int channel, 
AxisSelection * pAxisSelection, 
MemoryLogOptions pOption 
) 
Set memory log settings. This function is deprecated and is replaced by the 
SetMemoryLog function and SetMemoryLogOption function. This function will 
be removed in a future version. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 


number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to collect the data 
of. 
[in] 
pOption A pointer to a 
MemoryLogOptions 
class object that 
specifies the logging 
options. 
Remarks 

The memory log function is used to collect command and feedback data at a high 
frequency, and instead of the logged data being saved to a text file, the logged data 
is recorded within memory. The logged memory is read by periodically calling the 
GetMemoryLogData function. 

I/O and user memory data can also be recorded by the memory log function. 

After calling this function, the StartMemoryLog function can be called to start 
collecting memory log data. Collection of memory log data can be stopped with the 
StopMemoryLog function. 

The GetMemoryLogData function should be called periodically to read the log data 
that is stored in memory. This function will check the buffer for any log data that has 
been stored but not yet read, and returns them. The number of cycles of data 
returned can be found in the count value of the returned data. The first count 
indices of the logData array will contain valid log data. 

The buffer for the log data can store maxMemLogBufferSize communication cycles 
worth of data. If data is not retrived fast enough, data will be erased from the buffer 
starting with the oldest data. Each call of the GetMemoryLogData function retrives 
maxMemLogDataSize cycles worth of data. 


◆SetMemoryIOLog() 
WMX3APIFUNC 
SetMemoryIOLog ( unsigned int channel, 
IOAddress * pInputIOAddress, 
unsigned int inputSize, 
IOAddress * pOutputIOAddress, 
unsigned int outputSize 
) 
Set I/O memory log settings. This function is deprecated and is replaced by the 
SetMemoryLog function. This function will be removed in a future version. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
pInputIOAddress An array of I/O input 
addresses. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 
[in] 
inputSize The number elements in 
the pInputIOAddress 
array. 


[in] 
pOutputIOAddress An array of I/O output 
addresses. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 
[in] 
outputSize The number of elements 
in the pOutputIOAddress 
array. 

Remarks 

This function should be called before calling StartMemoryLog to specify regions of 
the I/O to log with the memory log function. 

The total amount of I/O that will be logged cannot be greater than 
maxMemLogIoInputByteSize for inputs and maxMemLogIoOutputByteSize for 
outputs. Bytes count against this limit even if only one bit of the byte is actually 
logged. 

The memory log buffer stores up to maxMemLogBufferSize cycles of data at one 
time. If the logged data is not read using GetMemoryLogData fast enough, log data 
will be overwritten starting from the oldest data (this can be observed by checking 
for skipped cycles in the cycleCounter or the overflowFlag value of the log data. 

◆SetMemoryMLog() 
WMX3APIFUNC 
SetMemoryMLog ( unsigned int channel, 
MAddress * pMAddress, 
unsigned int size 
) 
Set user memory memory log settings. This function is deprecated and is 
replaced by the SetMemoryLog function. This function will be removed in a 
future version. 


Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 

maxMemLogChannel 

constant. 
[in] 
pMAddress An array of user memory 
addresses. Multiple 
contiguous bits can be 
specified by setting size 
to the number of bits. 
[in] 
size The number elements in 
the pMAddress array. 

Remarks 

This function should be called before calling StartMemoryLog to specify regions of 
the user memory to log with the memory log function. 

The total amount of user memory that will be logged cannot be greater than 
maxMemLogMDataByteSize. Bytes count against this limit even if only one bit of 
the byte is actually logged. 

The memory log buffer stores up to maxMemLogBufferSize cycles of data at one 
time. If the logged data is not read using GetMemoryLogData fast enough, log data 
will be overwritten starting from the oldest data (this can be observed by checking 
for skipped cycles in the cycleCounter or the overflowFlag value of the log data. 

◆ 
GetMemoryLogData() [3/3] 


WMX3APIFUNC 

GetMemoryLogData ( 
channel, 
pData 
) 
unsigned int 
MemoryLogData * 
Retrieve data from memory log.This function is deprecated and is replaced by 
the GetMemoryLogData function. This function will be removed in a future 
version. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[out] 
pData A pointer to a 
MemoryLogData class 
object that will contain 
the logged data. 
Remarks 

This function retrieves a maximum of maxMemLogDataSize cycles of log data 
each time it is called. 

The memory log buffer stores up to maxMemLogBufferSize cycles of data at one 
time. If the logged data is not read using GetMemoryLogData fast enough, log data 
will be overwritten starting from the oldest data (this can be observed by checking 
for skipped cycles in the cycleCounter or the overflowFlag value of the log data. 

Calling this function and retrieving data from the buffer will clear the overflowFlag 
until the buffer overflows again. 


◆SetApiLog() [1/2]
WMX3APIFUNC 
SetApiLog ( char * pPath, 
ApiLogOptions * pOptions = NULL, 
unsigned int buffSize = 16777216) 
Set the parameters for the API log. 

Parameters 
[in] 
pPath The absolute file path to 
save the API log file to. 
[in] 
pOptions An optional argument 
that specifies options for 
the API log. 
[in] 
buffSize An optional argument 
that specifies the size of 
the buffer memory to 
allocate for the API log, 
in units of bytes. If not 
specified, a buffer 
memory of the default 
size will be allocated. 

Remarks 

This function sets the parameters for the API log. This function must be called 
before calling the StartApiLog function. 

The API log records API function call data to file. Information is extracted from the 
API log file with the GetApiLogData function. For additional information, see the 
link under "See also" below. 

This function allocates memory each time it is called. If there is not enough 
contiguous memory in the real time operating system space, an error will be 



◆SetApiLog() [2/2]
returned. 
See also 
Configuring the API Log 
WMX3APIFUNC 
SetApiLog ( wchar_t * pPath, 
ApiLogOptions * pOptions = NULL, 
unsigned int buffSize = 16777216) 
Set the parameters for the API log. 

Parameters 
[in] 
pPath The absolute file path to 
save the log file to. 
[in] 
pOptions An optional argument 
that specifies options for 
the API log. 
[in] 
buffSize The size of the buffer 
memory to allocate for 
the API log, in units of 
bytes. 
Remarks 

This function is a variation of SetApiLog that accepts a wchar_t array for the file 
path string. Use this function when using Unicode character sets. 

◆StartApiLog() 

WMX3APIFUNC 
StartApiLog ( ) 
WMX3APIFUNC 
StartApiLog ( ) 
Start logging data to the API log. 

Remarks 

This function starts logging data to the API log file. 

The SetApiLog function must be called before calling this function to set the API log 
parameters and allocate the buffer memory. 

See also 

Saving the API Log File 

◆StopApiLog() 
WMX3APIFUNC 
StopApiLog ( ) 
Stop logging data to the API log. 

Remarks 

This function stops logging data to the API log file. 
Logging of data must first be started with the StartApiLog function. 

◆GetApiLogStatus() 

WMX3APIFU 
NC 
GetApiLogSt 
WMX3APIFU 
NC 
GetApiLogSt 
atus ( 
ApiLogStatus pStatus ) 
Get the current status of the API log. 

Parameters 
[out] 
pStatus A pointer to an 
ApiLogStatus class 
object that will contain 
the current status of the 
API log. 
Remarks 

This function gets the current status of the API log. This function can be called 
periodically to monitor the API log state. 

◆OpenApiLogFile() [1/2]

WMX3APIFUNC 
OpenApiLogFile ( 
) 
WMX3APIFUNC 
OpenApiLogFile ( 
) 
char * 
pPath, 
FILE ** ppFile 
Open an API log file to extract information from the contents. 

Parameters 
[in] 
pPath The absolute or relative 
file path of the API log 
file to open. 
[out] 
ppFile A pointer to a FILE 
pointer that will return a 
pointer to a FILE object 
representing the opened 
file. 
Remarks 

This function opens an API log file that is created with the StartApiLog function. 
The StopApiLog function must first be called to close the file. 

See also 

Extracting the API Log Information 

◆OpenApiLogFile() [2/2]

WMX3APIFUNC 
OpenApiLogFile ( 
) 
WMX3APIFUNC 
OpenApiLogFile ( 
) 
wchar_t * 
pPath, 
FILE ** ppFile 
Open an API log file to extract information from the contents. 

Parameters 
[in] 
pPath The absolute or relative 
file path of the API log 
file to open. 
[out] 
ppFile A pointer to a FILE 
pointer that will return a 
pointer to a FILE object 
representing the opened 
file. 
Remarks 

This function is a variation of OpenApiLogFile that accepts a wchar_t array for the 
file path string. Use this function when using Unicode character sets. 

◆GetApiLogData() 
WMX3APIFUNC 
GetApiLogData ( FILE * pFile, 
unsigned char * pDataBuff, 
unsigned int buffSize, 
ApiLogInfo * pApiLogInfo = NULL) 
Extract the information of one API function call from the API log file. 
Parameters 

[in] 
pFile A pointer to a FILE 
object that represents 
the opened API log file. 
[in] 
pDataBuff A pointer to a char buffer 
that contains the 
extracted raw data. 
[in] 
buffSize The size of the buffer 
pointed by pDataBuff in 
units of bytes. 
[out] 
pApiLogInfo An optional argument 
that is a pointer to an 
ApiLogInfo class object 
that returns additional 
information regarding the 
API function call data. 

Remarks 

This function extracts the information of one API function call from the API log file 
opened with the OpenApiLogFile function. The raw data can be converted to a 
string message with the ApiLogToString function that is defined in the module 
that defines the called API function. 

For additional information, see the link under "See also" below. 

See also 

Extracting the API Log Information 

◆ 
CloseApiLogFile() 

WMX3APIFU 
NC 
CloseApiLog 
File ( FILE * pFile ) 
WMX3APIFU 
NC 
CloseApiLog 
File ( FILE * pFile ) 
Close an API log file. 
Parameters 
[in] 
pFile A pointer to a FILE 
object that represents 
the opened API log file. 
Remarks 

This function closes an API log file that has been opened with the OpenApiLogFile 
function. 

 

UserMemory Class Reference 

This class contains user memory functions. 

Public Member Functions 

UserMemory (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

UserMemory (const UserMemory &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

UserMemory & operator= (const UserMemory &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

UserMemory () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~UserMemory () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC SetMBit (unsigned int addr, unsigned int 

bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByte (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBits (unsigned int *pAddr, unsigned 
int *pBit, unsigned char *pData, unsigned 
int count) 
Set the value of multiple user memory 
bits. More... 

WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 

unsigned int size) 

Get a string representation of the 


specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the UserMemoryErrorCode enum or the ErrorCode enum 
in the WMX3Api.h header. All errors returned by functions in class UserMemory will 
be defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
UserMemory class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetMBit() 

WMX3APIFUNC 
SetMBit ( 
WMX3APIFUNC 
SetMBit ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 

◆SetMByte() 
WMX3APIFUNC 
SetMByte ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 

◆SetMBytes() 

WMX3APIFUNC 
SetMBytes ( 
) 
WMX3APIFUNC 
SetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 

Remarks 

The maximum number of bytes that this function can write per function call is 
maxUserMemoryReadWriteBytes. If this size is exceeded, an error will be 
returned. To write a greater range of the user memory space, call this function 
multiple times. 

This function does not set the specified data atomically. If the data is read by 
another thread at the same time, partially updated data may be read. 

◆SetMBits() 
WMX3APIFUNC 
SetMBits ( unsigned int * pAddr, 

unsigned int * pBit, 
unsigned char * pData, 
unsigned int count 
) 
unsigned int * pBit, 
unsigned char * pData, 
unsigned int count 
) 
Set the value of multiple user memory bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks 

A pointer to an int array 
that contains the byte 
addresses of the user 
memory bits. The size of 
the array must be equal 
to the count parameter. 

A pointer to an int array 
that contains the bit 
addresses of the user 
memory bits. The size of 
the array must be equal 
to the count parameter. 

A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 

The number of bits to 
set. 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first memory bit to 
set, pAddr[1], pBit[1], and pData[1] specify the second memory bit to set, and so on. 
The bits can be specified in any order. 



The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. of the user memory. 

◆SetMAnalogDataShort() 

WMX3APIFUNC 
SetMAnalogDataSho 
rt ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rt ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataUShort() 

WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
unsigned short type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataInt() 

WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆ 
SetMAnalogDataUInt() 

WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified 
unsigned int type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆GetMBit() 

WMX3APIFUNC 
GetMBit ( 
) 
WMX3APIFUNC 
GetMBit ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 

◆GetMByte() 
WMX3APIFUNC 
GetMByte ( 
) 
unsigned int addr, 
unsigned char * pData 
Get the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetMBytes() 
WMX3APIFUNC 
GetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Get the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 

Remarks 

The maximum number of bytes that this function can read per function call is 
maxUserMemoryReadWriteBytes. If this size is exceeded, an error will be 
returned. To read a greater range of the user memory space, call this function 
multiple times. 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetMAnalogDataChar() 

WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
unsigned int addr, 
char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads one byte of the user memory address space and returns the 
data as a char type analog data value. 

◆GetMAnalogDataUChar() 

WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the user memory address space and returns the 
data as an unsigned char type analog data value. 

◆GetMAnalogDataShort() 

WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
unsigned int addr, 
short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as a short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetMAnalogDataUShort() 

WMX3APIFUNC 
GetMAnalogDataUS 
hort ( 
) 
WMX3APIFUNC 
GetMAnalogDataUS 
hort ( 
) 
unsigned int addr, 
unsigned short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as an unsigned short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetMAnalogDataInt() 

WMX3APIFUNC 
GetMAnalogDataInt ( unsigned int addr, 
int * pAnalogData 
) 
WMX3APIFUNC 
GetMAnalogDataInt ( unsigned int addr, 
int * pAnalogData 
) 
Get the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆GetMAnalogDataUInt() 

WMX3APIFUNC 
GetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
GetMAnalogDataUIn 
t ( 
) 
unsigned int addr, 
unsigned int * pAnalogData 
Get the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an unsigned int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆SetMBitEx() 

WMX3APIFUNC 
SetMBitEx ( 
WMX3APIFUNC 
SetMBitEx ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 

Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 
Remarks 

This function has a faster response time compared to SetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMByteEx() 

WMX3APIFUNC 
SetMByteEx ( 
) 
WMX3APIFUNC 
SetMByteEx ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetMByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBytesEx() 

WMX3APIFUNC 
SetMBytesEx ( 
) 
WMX3APIFUNC 
SetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetMBytes. 

Unlike the SetMBytes function, the size of the written data can be greater than 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBitsEx() 
WMX3APIFUNC 
SetMBitsEx ( unsigned int * pAddr, 

unsigned int * pBit, 
unsigned char * pData, 
unsigned int count 
) 
unsigned int * pBit, 
unsigned char * pData, 
unsigned int count 
) 
Set the value of multiple user memory bits. 

Parameters 
[in] 
pAddr A pointer to an int array 
that contains the byte 
addresses of the user 
memory bits. The size of 
the array must be equal 
to the count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the user 
memory bits. The size of 
the array must be equal 
to the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 
[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory 
bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, 
and so on. The bits can be specified in any order. 


This function has a faster response time compared to SetMBits. 

Unlike the SetMBits function, the difference between the largest byte address and 
the smallest byte address can be equal to or larger than half of 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. 

This function has a faster response time compared to SetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataShortEx() 

WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value. 

This function has a faster response time compared to SetMAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataUShortEx() 

WMX3APIFUNC 
SetMAnalogDataUS 
hortEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataUS 
hortEx ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
unsigned short type analog data value. 

This function has a faster response time compared to SetMAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataIntEx() 

WMX3APIFUNC 
SetMAnalogDataIntE 
WMX3APIFUNC 
SetMAnalogDataIntE 
x ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataUIntEx() 

WMX3APIFUNC 
SetMAnalogDataUIn 
tEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
tEx ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified 
unsigned int type analog data value. 

This function has a faster response time compared to SetMAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMBitEx() 

WMX3APIFUNC 
GetMBitEx ( 
) 
WMX3APIFUNC 
GetMBitEx ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 

Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMByteEx() 

WMX3APIFUNC 
GetMByteEx ( 
) 
WMX3APIFUNC 
GetMByteEx ( 
) 
unsigned int addr, 
unsigned char * pData 
Get the value of a user memory byte. 

Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMBytesEx() 

WMX3APIFUNC 
GetMBytesEx ( 
) 
WMX3APIFUNC 
GetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Get the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetMBytes. 

Unlike the GetMBytes function, the size of the read data can be greater than 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataCharEx() 

WMX3APIFUNC 
GetMAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataCh 
arEx ( 
) 
unsigned int addr, 
char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads one byte of the user memory address space and returns the 
data as a char type analog data value. 

This function has a faster response time compared to GetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataUCharEx() 

WMX3APIFUNC 
GetMAnalogDataUC 
harEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
harEx ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the user memory address space and returns the 
data as an unsigned char type analog data value. 

This function has a faster response time compared to GetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataShortEx() 

WMX3APIFUNC 
GetMAnalogDataSh 
ortEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataSh 
ortEx ( 
) 
unsigned int addr, 
short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as a short type analog data value. 

This function has a faster response time compared to GetMAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataUShortEx() 

WMX3APIFUNC 
GetMAnalogDataUS 
hortEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataUS 
hortEx ( 
) 
unsigned int addr, 
unsigned short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as an unsigned short type analog data value. 

This function has a faster response time compared to GetMAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataIntEx() 

WMX3APIFUNC 
GetMAnalogDataInt 
Ex ( 
) 
WMX3APIFUNC 
GetMAnalogDataInt 
Ex ( 
) 
unsigned int addr, 
int * pAnalogData 
Get the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an int type analog data value. 

This function has a faster response time compared to GetMAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆ 
GetMAnalogDataUIntEx() 

WMX3APIFUNC 
GetMAnalogDataUIn 
tEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataUIn 
tEx ( 
) 
unsigned int addr, 
unsigned int * pAnalogData 
Get the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an unsigned int type analog data value. 

This function has a faster response time compared to GetMAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆ 
GetUserMemoryAddress() 

WMX3APIFU 
NC 
GetUserMem 
WMX3APIFU 
NC 
GetUserMem 
oryAddress ( 
void ** pptr 
) 
Get a pointer to the memory address of the user memory address space. 

Parameters 
[out] 
pptr A pointer to a pointer 
that will be return the 
memory address of the 
user memory address 
space. 

Remarks 

This function returns a pointer to the user memory address space. This allows direct 
access of the user memory. 

This function will return an error if a valid pointer to the user memory address space 
cannot be obtained. 

The pointer to the user memory address space will become invalid after the 
UserMemory object that calls this function is destroyed. Using the pointer 
after this function is destroyed could cause a system error. 

This function is not supported in the .NET CLR library. 

 

PMMotion Class Reference 

This class contains PM motion functions. 

Public Member Functions 

PMMotion (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

PMMotion (const PMMotion &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

PMMotion & operator= (const PMMotion &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

PMMotion () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

~PMMotion () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 


CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC GetStatus (PMMotionStatus *status) 
Read the system status of PM motion 
from the engine. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 


Get the version of the module library. 

More... 

Public Attributes 

PMAxisControl * axisControl 
PMAxisMotion * motion 
PMAxisHome * home 
PMAxisVelocity * velocity 
PMAxisTorque * torque 
PMAxisControl::HomeProfiles * homeProfiles 
PMAxisControl::VelocityProfiles * velProfiles 
PMAxisControl::TorqueProfiles * trqProfiles 

Friends 

class PMAxisControl 
class PMAxisMotion 
class PMAxisHome 
class PMAxisVelocity 
class PMAxisTorque 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the PMMotionErrorCode enum or the ErrorCode enum in 
the WMX3Api.h header. All errors returned by functions in class PMMotion will be 
defined in one of these enums. Errors returned by functions in other classes may 
not be defined in one of these enums, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
PMMotion class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ 
ApiLogToString() [2/2] 



◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆GetStatus() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
GetStatus ( 
PMMotionSta status ) 
Read the system status of PM motion from the engine. 

Parameters 
[out] 
status A pointer to an object of 
the PMMotionStatus 
class that will be filled in 
with the current PM 
motion system status. 
Remarks 

This function obtains the system status of PM motion. This function is typically 
called at regular intervals using a timer loop in order to monitor the status of the 
system and update the user interface. 

Statuses will be taken from a snapshot from the last communication cycle. This 
ensures that the statuses are not taken from two different communication cycles, 

e.g. the position data of axis 0 is from one cycle and the position data of axis 1 is 
from the next cycle. 
This function has a comparatively low execution overhead, as the statuses are read 
directly from memory without communicating with the engine. 

 

PMAxisControl Class Reference 

This class contains axis control functions for PM motion. 

Classes 

class HomeProfile 
This class contains profile data for a 
home command. More... 

class HomeProfiles 
This class contains profile data for 
multiple home commands. More... 

class TorqueProfile 
This class contains profile data for a 
torque command. More... 

class TorqueProfiles 
This class contains profile data for 
multiple torque commands. More... 

class VelocityProfile 
This class contains profile data for a 
velocity command. More... 

class VelocityProfiles 
This class contains profile data for 
multiple velocity commands. More... 

Public Member Functions 

bool 
WMX3APIFUNC 
PMAxisControl (PMMotion *f) 
IsDeviceValid () 
SetServoOn (int axis, int newStatus) 
Turn a servo drive in the servo network 
on or off. More... 
WMX3APIFUNC SetServoOn (AxisSelection *axisSel, int 
newStatus) 


Turn multiple servo drives in the servo 
network on or off. More... 

WMX3APIFUNC ClearAmpAlarm (int axis) 
Clear the servo drive amp alarm on the 
specified axis. More... 
WMX3APIFUNC ClearAmpAlarm (AxisSelection 
*axisSel) 
Clear the servo drive amp alarms on 
multiple axes. More... 
WMX3APIFUNC SetHomeProfile (HomeProfile 
*pHomeProfile) 
Set the home profile. More... 

WMX3APIFUNC SetHomeProfiles (HomeProfiles 

*pHomeProfiles) 

Set the home profile for multiple axes. 

More... 

WMX3APIFUNC SetVelProfile (VelocityProfile 
*pVelProfile) 

Set the velocity profile. More... 

WMX3APIFUNC SetVelProfiles (VelocityProfiles 
*pVelProfiles) 

Set the velocity profile for multiple axes. 

More... 

WMX3APIFUNC SetTrqProfile (TorqueProfile 

*pTrqProfile) 

Set the torque profile. More... 

WMX3APIFUNC SetTrqProfiles (TorqueProfiles 

*pTrqProfiles) 

Set the torque profile for multiple axes. 

More... 

WMX3APIFUNC GetPosCommand (int axis, long 
*pPosition) 

Get the current cycle position command 
of the axis. More... 


Public Attributes 

WMX3APIFUNC GetPosFeedback (int axis, long 
*pPosition) 

Get the current cycle position feedback 
of the axis. More... 

WMX3APIFUNC GetVelCommand (int axis, long 
*pVelocity) 

Get the current cycle velocity command 
of the axis. More... 

WMX3APIFUNC GetVelFeedback (int axis, long 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

PMMotion * pmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

The servoOn status (obtained with GetStatus) should be checked to verify that the 
axis servo has turned on or off before continuing with operations that require the 
servo to be on or off. 

◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * axisSel, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
axisSel A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 

Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

The ampAlarm status (obtained with GetStatus) can be checked to verify whether 
the amp alarm has been cleared. 

◆ClearAmpAlarm() [2/2]
WMX3APIFU 
NC 
ClearAmpAla 
rm ( AxisSelection axisSel ) 
Clear the servo drive amp alarms on multiple axes. 

Parameters 
[in] 
axisSel A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 


◆SetHomeProfile() 
WMX3APIFU 
NC 
SetHomeProf 
ile ( HomeProfile * pHomeProfile ) 
Set the home profile. 

Parameters 
[in] 
pHomeProfile A pointer to the home 
profile. 
Remarks 

The home profile set by this function is used for home commands executed by the 
axis. 

◆SetHomeProfiles() 
WMX3APIFU 
NC 
SetHomeProf 
iles ( 
HomeProfiles pHomeProfiles ) 
Set the home profile for multiple axes. 

Parameters 
[in] 
pHomeProfiles A pointer to the home 
profiles. 

Remarks 

The home profile set by this function is used for home commands executed by the 
axis. 


◆SetVelProfile() 
WMX3APIFU 
NC 
SetVelProfile ( VelocityProfil pVelProfile ) 
Set the velocity profile. 

Parameters 
[in] 
pVelProfile A pointer to the velocity 
profile. 
Remarks 

The velocity profile set by this function is used for position commands and velocity 
commands executed by the axis. 

◆SetVelProfiles() 
WMX3APIFU 
NC 
SetVelProfile 
s ( VelocityProfil pVelProfiles ) 
Set the velocity profile for multiple axes. 

Parameters 
[in] 
pVelProfiles A pointer to the velocity 
profiles. 
Remarks 

The velocity profile set by this function is used for position commands and velocity 
commands executed by the axis. 


◆SetTrqProfile() 
WMX3APIFU 
NC 
SetTrqProfile ( TorqueProfile pTrqProfile ) 
Set the torque profile. 

Parameters 
[in] 
pTrqProfile A pointer to the torque 
profile. 
Remarks 

The torque profile set by this function is used for torque commands executed by the 
axis. 

◆SetTrqProfiles() 
WMX3APIFU 
NC 
SetTrqProfile 
s ( TorqueProfile pTrqProfiles ) 
Set the torque profile for multiple axes. 

Parameters 
[in] 
pTrqProfiles A pointer to the torque 
profiles. 
Remarks 

The torque profile set by this function is used for torque commands executed by the 
axis. 


◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the velocityCmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks 

This function obtains the current cycle velocity feedback of an axis. This value is 
identical to the actualVelocity status obtained with the GetStatus function. 

 

PMAxisHome Class Reference 

This class contains HM mode homing functions for PM motion. 

Classes 

class HomeCommand 
This class contains data for a home 
command. More... 

Public Member Functions 

bool 
WMX3APIFUNC 
PMAxisHome (PMMotion *f) 
IsDeviceValid () 
StartHome (int axis) 
Start HM mode homing. More... 
WMX3APIFUNC StartHome (HomeCommand 
*pHomeCommand) 
Start HM mode homing. More... 
WMX3APIFUNC StartHome (unsigned int numCommands, 
HomeCommand *pHomeCommand) 
Start HM mode homing for multiple axes. 
More... 
WMX3APIFUNC Continue (int axis) 
Resume HM mode homing for an axis 
that has been stopped. More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 

Resume HM mode homing for multiple 
axes that have been stopped. More... 

WMX3APIFUNC Cancel (int axis) 
Stop HM mode homing. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 


Stop HM mode homing for multiple axes. 

More... 

Public Attributes 

PMMotion * pmApi 

Member Function Documentation 

◆StartHome() [1/3]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start HM mode homing. 

Parameters 
[in] 
axis The axis to start homing. 

Remarks 

This function searches for the home position of the axis. 
The home profile must be first set with the SetHomeProfile function. 

◆StartHome() [2/3]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
HomeCommapHomeComma ) 
Start HM mode homing. 
Parameters 
[in] 
pHomeCommand A pointer to an object of 
the HomeCommand 
class that contains the 
parameters of the home 
command. 

Remarks 

This function searches for the home position of the axis. The home command 
parameters are specified as a function argument. 

For EtherCAT 

When using EtherCAT, specify the homing method in HomeCommand::method. 
Object 0x6098 will be set to this value. Refer to the documentation of the servo 
drive for more information regarding the homing methods. 

◆StartHome() [3/3]

WMX3APIFUNC 
StartHome ( 
WMX3APIFUNC 
StartHome ( 
unsigned int numCommands, 
HomeCommand * pHomeCommand 
) 
Start HM mode homing for multiple axes. 

Parameters 
[in] 
numCommands The number of home 
commands. Each 
command controls a 
single axis. 
[in] 
pHomeCommand A pointer to an array of 
objects of the 
HomeCommand class 
that contain the 
parameters of the home 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

◆ 
Continue() [1/2] 



int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Resume HM mode homing for an axis that has been stopped. 

Parameters 
[in] 
axis The axis to resume 
homing. 

Remarks 

This function resumes the HM mode homing operation of an axis that has been 
stopped with the Cancel function. 

◆Continue() [2/2]
WMX3APIFU 
NC Continue ( AxisSelection pAxisSelection ) 
Resume HM mode homing for multiple axes that have been stopped. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to resume 
homing. 
Remarks 

This function is an overloaded function of Continue that resumes the stopped HM 
mode homing procedure for multiple axes. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks 

This function stops the HM mode homing operation that has been started with the 
StartHome function. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆Cancel() [2/2]
WMX3APIFU 
NC Cancel ( AxisSelection pAxisSelection ) 
Stop HM mode homing for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to stop 
homing. 

Remarks 

This function is an overloaded function of Cancel that stops the HM mode homing 
procedure for multiple axes. 


 


PMAxisMotion Class Reference 

This class contains PP mode position command functions for PM motion. 

Classes 

class PosCommand 
This class contains data for a position 
command. More... 

Public Member Functions 

PMAxisMotion (PMMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC StartPos (int axis, long target, bool 
immediately=true) 
Start an absolute position PP mode 
motion command. More... 

WMX3APIFUNC StartMov (int axis, long target, bool 
immediately=true) 

Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (int axis, long target, long 
maxTrqLimit, bool immediately=true) 

Start an absolute position PP mode 
motion command. More... 

WMX3APIFUNC StartMov (int axis, long target, long 
maxTrqLimit, bool immediately=true) 

Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 

*pPosCommand, bool immediately=true) 

Start an absolute position PP mode 

motion command. More... 


WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, bool immediately=true) 

Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start an absolute position PP mode 
motion command. More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, bool 
immediately=true) 
Start absolute position PP mode motion 
commands for multiple axes. More... 
StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, bool 
immediately=true) 
Start relative position PP mode motion 
commands for multiple axes. More... 
StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, long 
*maxTrqLimits, bool immediately=true) 
WMX3APIFUNC 
Start absolute position PP mode motion 
commands for multiple axes. More... 
StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, long 
*maxTrqLimits, bool immediately=true) 
Start relative position PP mode motion 
commands for multiple axes. More... 


Public Attributes 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis executing a 
PP mode position command. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing PP mode position commands. 
More... 
WMX3APIFUNC Pause (int axis) 
Pause the execution of a PP mode 
position command. More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of PP mode position 
commands for multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused PP 
mode position command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of paused PP 
mode position commands for multiple 
axes. More... 

PMMotion * pmApi 

Member Function Documentation 

◆StartPos() [1/6]
WMX3APIFUNC 
StartPos ( int axis, 
long target, 
bool immediately = true

) ) 
Start an absolute position PP mode motion command. 

Parameters 
[in] 
axis The axis to command. 
[in] 
target The target position. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function moves the specified axis to the specified absolute position. 
The velocity profile must be first set with the SetVelProfile function. 


◆StartMov() [1/6]
WMX3APIFUNC 
StartMov ( 
) 
int 
long 
bool 
axis, 
target, 
immediately = true
Start a relative position PP mode motion command. 
Parameters 
[in] 
axis The axis to command. 
[in] 
target The target position. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 


finishes. 

Remarks 

This function moves the specified axis to the specified relative position. 
The velocity profile must be first set with the SetVelProfile function. 

◆StartPos() [2/6]
WMX3APIFUNC 
StartPos ( 
) 
int 
long 
long 
bool 
axis, 
target, 
maxTrqLimit, 
immediately = true
Start an absolute position PP mode motion command. 
Parameters 
[in] 
axis The axis to command. 
[in] 
target The target position. 
[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 


executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartPos that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

The velocity profile must be first set with the SetVelProfile function. 

◆StartMov() [2/6]
WMX3APIFUNC 
StartMov ( 
) 
int 
long 
long 
bool 
axis, 
target, 
maxTrqLimit, 
immediately = true
Start a relative position PP mode motion command. 
Parameters 
[in] 
[in] 
axis 
target 
The axis to command. 
The target position. 


[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartMov that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

The velocity profile must be first set with the SetVelProfile function. 

◆StartPos() [3/6]

WMX3APIFUNC 
StartPos ( 
WMX3APIFUNC 
StartPos ( PosCommand * pPosCommand, 
bool immediately = true) 
Start an absolute position PP mode motion command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 



Remarks 

This function moves the specified axis to the specified absolute position using a 
motion profile that is calculated by the specified parameters. 

◆StartMov() [3/6]
WMX3APIFUNC 
StartMov ( 
) 
PosCommand * pPosCommand, 
bool immediately = true
Start a relative position PP mode motion command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
motion. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 


be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function moves the specified axis to the specified relative position using a 
motion profile that is calculated by the specified parameters. 

For EtherCAT 

When using EtherCAT, the relative position may be considered to be relative to the 
current command position or to the current target position. Which it is will depend on 
the servo drive and the value set for object 0x60F2. Refer to the documentation of 
the servo drive for more information. 

◆StartPos() [4/6]
WMX3APIFUNC 
StartPos ( 
PosCommand * pPosCommand, 
long maxTrqLimit, 
bool immediately = true
) 
Start an absolute position PP mode motion command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 


command. 
[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartPos that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

◆StartMov() [4/6]

WMX3APIFUNC 
StartMov ( 
WMX3APIFUNC 
StartMov ( PosCommand * pPosCommand, 
long maxTrqLimit, 
bool immediately = true) 
Start a relative position PP mode motion command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 


executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartMov that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

◆StartPos() [5/6]
WMX3APIFUNC 
StartPos ( unsigned int numCommands, 
PosCommand * pPosCommand, 
bool immediately = true) 
Start absolute position PP mode motion commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 


[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function executes the StartPos function for multiple axes. 

◆StartMov() [5/6]
WMX3APIFUNC 
StartMov ( unsigned int numCommands, 
PosCommand * pPosCommand, 
bool immediately = true
) 

Start relative position PP mode motion commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 


pPosCommand, 
maxTrqLimits, 
pPosCommand, 
maxTrqLimits, 
◆StartPos() [6/6]
position command 
finishes. 
Remarks 
This function executes the StartMov function for multiple axes. 
WMX3APIFUNC 
StartPos ( unsigned int numCommands, 
) 
PosCommand * 
long * 
bool 
immediately = true
Start absolute position PP mode motion commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
[in] 
maxTrqLimits The maximum torque 
limits to apply, in units of 
0.1%. 


[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 
function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartPos that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

◆StartMov() [6/6]
WMX3APIFUNC 
StartMov ( unsigned int numCommands, 
PosCommand * pPosCommand, 
long * maxTrqLimits, 

immediately = true
bool 
) 
Start relative position PP mode motion commands for multiple axes. 

Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 
[in] 
maxTrqLimits The maximum torque 
limits to apply, in units of 
0.1%. 
[in] 
immediately An optional parameter 
that determines whether 
the position command 
should be executed 
immediately. If this 
parameter is not 
specified or this 
parameter is set to 
TRUE, the position 
command will be 
executed immediately. If 
the axis is executing 
another position 
command when this 


function is called, it will 
be overridden. If this 
parameter is set to 
FALSE, the position 
command will be 
executed after any 
currently executing 
position command 
finishes. 

Remarks 

This function is an overloaded function of StartMov that also sets the max torque 
limit. After the position command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

◆Stop() [1/2]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis executing a PP mode position command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis that is executing a PP mode position 
command. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆Stop() [2/2]

◆Stop() [2/2]
WMX3APIFU 
NC Stop ( AxisSelection pAxisSelection ) 
Stop the motion of multiple axes executing PP mode position commands. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

This function executes the Stop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error and none of the commanded axes will be stopped. An axis is in an invalid state 
if the axis servo is not on, the axis is offline, or if the axis does not support PP mode. 

◆Pause() [1/2]
WMX3APIFU 
NC Pause ( int axis ) 
Pause the execution of a PP mode position command. 

Parameters 
[in] 
axis The axis to pause. 

Remarks 

This function pauses the execution of a PP mode position command for one axis. 
The axis will decelerate to rest. 

To resume the axis, call the Resume function. 

◆Pause() [2/2]

◆ 
Pause() [2/2] 


WMX3APIFU 
NC Pause ( AxisSelection pAxisSelection ) 
Pause the execution of PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 
Remarks 

This function executes Pause for multiple axes. 

◆Resume() [1/2]
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused PP mode position command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a PP mode position command that was 
paused by the Pause function. 

◆Resume() [2/2]

WMX3APIFU WMX3APIFU 
NC Resume ( 
AxisSelection pAxisSelection ) 
Resume the execution of paused PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to resume. 

Remarks 
This function executes Resume for multiple axes. 

 

PMAxisVelocity Class Reference 

This class contains PV mode velocity command functions for PM motion. 

Classes 

class VelCommand 
This class contains data for a velocity 
command. More... 

Public Member Functions 

bool 
WMX3APIFUNC 
PMAxisVelocity (PMMotion *f) 
IsDeviceValid () 
StartVel (int axis) 
Start a PV mode velocity command. 
More... 
WMX3APIFUNC StartVel (int axis, long maxTrqLimit) 
Start a PV mode velocity command. 
More... 
WMX3APIFUNC StartVel (VelCommand *pVelCommand) 
Start a PV mode velocity command. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
long maxTrqLimit) 

Start a PV mode velocity command and 
set the maximum torque limit. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand) 

Start PV mode velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, long 


Public Attributes 

*maxTrqLimits) 

Start PV mode velocity commands for 
multiple axes. More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis executing a 
PV mode velocity command. More... 
WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing PV mode velocity commands. 
More... 

PMMotion * pmApi 

Member Function Documentation 

◆StartVel() [1/6]

WMX3APIFU WMX3APIFU 
NC StartVel ( 
int axis 
) 
Start a PV mode velocity command. 

Parameters 
[in] 
axis The axis to command. 

Remarks 

This function will command the specified axis to accelerate or decelerate to the 
target velocity, and then continue moving at that velocity. The target velocity may be 
positive or negative. The axis will move in the reverse direction if the velocity is 
negative. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of motion command. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of motion command. 

An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

The velocity profile must be first set with the SetVelProfile function. 

◆StartVel() [2/6]

WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
int 
axis, 
long maxTrqLimit 
Start a PV mode velocity command. 

Parameters 
[in] 
axis The axis to command. 
[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
Remarks 

This function is an overloaded function of StartVel that also sets the max torque 
limit. After the velocity command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

The velocity profile must be first set with the SetVelProfile function. 

◆ 
StartVel() [3/6] 



WMX3APIFU WMX3APIFU 
NC StartVel ( 
VelCommand pVelCommand ) 
Start a PV mode velocity command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
Remarks 

This function will command the specified axis to accelerate or decelerate to the 
specified velocity, and then continue moving at the specified velocity. The target 
velocity may be positive or negative. The axis will move in the reverse direction if 
the velocity is negative. 

The acceleration determines the rate at which the speed of the axis will increase, 
regardless of the direction of motion command. 

The deceleration determines the rate at which the speed of the axis will decrease, 
regardless of the direction of motion command. 

An axis that is already executing a velocity command can be given a new override 
velocity command using this function. 

◆ 
StartVel() [4/6] 



WMX3APIFUNC 
StartVel ( 
) 
WMX3APIFUNC 
StartVel ( 
) 
VelCommand * pVelCommand, 
long maxTrqLimit 
Start a PV mode velocity command and set the maximum torque limit. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
[in] 
maxTrqLimit The maximum torque 
limit to apply, in units of 
0.1%. 
Remarks 

This function is an overloaded function of StartVel that also sets the max torque 
limit. After the velocity command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

For EtherCAT 

When using EtherCAT, this function sets the value of object 0x6072 (Max Torque 
Limit). To change the max torque limit, overwrite this object. 

◆StartVel() [5/6]

WMX3APIFUNC 
StartVel ( 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
VelCommand * pVelCommand 
) 
Start PV mode velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 

◆StartVel() [6/6]

WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
WMX3APIFUNC 
StartVel ( unsigned int numCommands, 
VelCommand * pVelCommand, 
long * maxTrqLimits 
) 
Start PV mode velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
[in] 
maxTrqLimits The maximum torque 
limits to apply, in units of 
0.1%. 
Remarks 

This function is an overloaded function of StartVel that also sets the max torque 
limit. After the velocity command is stopped or overridden, the max torque limit will 
remain at the specified value until modified by another function. 

◆Stop() [1/2]

WMX3APIFU 
NC Stop ( int axis ) 
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis executing a PV mode velocity command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis executing a PV mode velocity command. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆Stop() [2/2]
WMX3APIFU 
NC Stop ( AxisSelection pAxisSelection ) 
Stop the motion of multiple axes executing PV mode velocity commands. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 
Remarks 

This function executes the Stop function for multiple axes. 

 

PMAxisTorque Class Reference 

This class contains TQ mode torque command functions for PM motion. 

Classes 

class TrqCommand 
This class contains data for a torque 
command. More... 

Public Member Functions 

bool 
WMX3APIFUNC 
PMAxisTorque (PMMotion *f) 
IsDeviceValid () 
StartTrq (int axis) 
Start a TQ mode torque command. 
More... 
WMX3APIFUNC StartTrq (int axis, long maxMotorSpeed) 
Start a TQ mode torque command. 
More... 
WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a TQ mode torque command. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
long maxMotorSpeed) 

Start a TQ mode torque command and 
set the maximum motor speed. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand) 

Start TQ mode torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, long 


Public Attributes 

*maxMotorSpeeds) 

Start TQ mode torque commands for 
multiple axes. More... 

WMX3APIFUNC StopTrq (int axis) 
Stop a TQ mode torque command. 
More... 
WMX3APIFUNC StopTrq (AxisSelection *pAxisSelection) 
Stop TQ mode torque commands for 
multiple axes. More... 

PMMotion * pmApi 

Member Function Documentation 

◆StartTrq() [1/6]
WMX3APIFU 
NC StartTrq ( int axis ) 
Start a TQ mode torque command. 

Parameters 
[in] 
axis The axis to command. 

Remarks 

This function will start a torque command. The axis will apply a constant torque in 
the direction of the torque. Depending on the load on the axis, the axis may move 
during a torque command. 

The torque profile must be first set with the SetTrqProfile function. 


◆StartTrq() [2/6]
WMX3APIFUNC 
StartTrq ( 
) 
int 
axis, 
long maxMotorSpeed 
Start a TQ mode torque command. 

Parameters 
[in] 
axis The axis to command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

The torque profile must be first set with the SetTrqProfile function. 

◆StartTrq() [3/6]

WMX3APIFU WMX3APIFU 
NC StartTrq ( 
TrqCommand pTrqCommand ) 
Start a TQ mode torque command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 

Remarks 

This function will start a torque command. The axis will apply a constant torque in 
the specified direction. Depending on the load on the axis, the axis may move 
during a torque command. 

◆StartTrq() [4/6]

WMX3APIFUNC 
StartTrq ( 
) 
WMX3APIFUNC 
StartTrq ( 
) 
TrqCommand * pTrqCommand, 
long maxMotorSpeed 
Start a TQ mode torque command and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

For EtherCAT 

When using EtherCAT, this function sets the value of object 0x6080 (Max Motor 
Speed). To change the max motor speed, overwrite this object. 

◆StartTrq() [5/6]

WMX3APIFUNC 
StartTrq ( 
WMX3APIFUNC 
StartTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand 
) 
Start TQ mode torque commands for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
Remarks 

This function executes the StartTrq API function for multiple axes. 

◆StartTrq() [6/6]

WMX3APIFUNC 
StartTrq ( 
WMX3APIFUNC 
StartTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
long * maxMotorSpeeds 
) 
Start TQ mode torque commands for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
maxMotorSpeeds The maximum motor 
speeds to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

◆StopTrq() [1/2]

WMX3APIFU 
NC StopTrq ( int axis ) 
WMX3APIFU 
NC StopTrq ( int axis ) 
Stop a TQ mode torque command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a TQ mode torque 
command. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆StopTrq() [2/2]
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop TQ mode torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 
Remarks 

This function is an overloaded function of StopTrq API function that stops TQ mode 
torque commands for multiple axes. 


 


WMX3Api Class Reference 

This class contains core functions. 

Public Member Functions 

WMX3Api () 

Default constructor for this class. 

~WMX3Api () 

Destructor for this class. 

bool IsDeviceValid () 
Return TRUE if this class object has 
access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 
CreateDevice function. More... 

WMX3APIFUNC StartEngine (const char *path, unsigned 
int waitTimeMilliseconds=0, int core=-1, 
DWORD_PTR affinityMask=0) 
Start the WMX3 engine without creating 
a device. More... 

WMX3APIFUNC StartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Start the WMX3 engine without creating 
a device. More... 

WMX3APIFUNC RestartEngine (const char *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 


More... 

WMX3APIFUNC RestartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 
More... 

WMX3APIFUNC StopEngine (unsigned int 
waitTimeMilliseconds=0) 

Stop the currently running WMX3 
engine. More... 

WMX3APIFUNC CreateDevice (const char *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CreateDevice (const wchar_t *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CloseDevice (bool exitNoDev=true) 
Close a device. More... 
WMX3APIFUNC GetDeviceID (int *id) 
Get the device ID number of the device. 
More... 

WMX3APIFUNC AutoQuitWithoutActiveDev (bool quit) 
Configure the engine to automatically 
quit or not automatically quit when the 
last device is closed by a watchdog time 
out. More... 


WMX3APIFUNC SetWatchdog (unsigned int watchdog) 
Set the watchdog time out period for the 
device that called this function. More... 

WMX3APIFUNC SetWatchdog (int deviceId, unsigned int 
watchdog) 

Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL) 

Get the watchdog time out period and 
the current watchdog count. More... 

WMX3APIFUNC 
WMX3APIFUNC 
ResetWatchdogTimer () 
Reset the watchdog count of a device. 
More... 
SetStatistic (bool enable) 
WMX3APIFUNC 
Configure a device to collect API 
execution statistics data. More... 
GetStatistic (DeviceStatistics *statistics) 
Read the currently collected API 
execution statistics data. More... 

WMX3APIFUNC SetInterruptId (unsigned int interruptId) 
Set the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC GetInterruptId (unsigned int *interruptId) 
Get the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More... 

WMX3APIFUNC StopCommunication (unsigned int 


waitTimeMilliseconds=0) 

Stop communication with the servo 
network. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoA 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoW 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
GetModuleInfo (int moduleId, 
ModuleInfoA *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetModuleInfo (int moduleId, 
ModuleInfoW *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetEngineStatus (EngineStatus *status) 
Obtain the status of the engine. More... 
GetAllDevices (DevicesInfoA *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC GetAllDevices (DevicesInfoW *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC SetDeviceName (const char *name) 
Set the name of this device. More... 
WMX3APIFUNC SetDeviceName (const wchar_t *name) 
Set the name of this device. More... 

WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize) 


Get the name of this device. More... 

WMX3APIFUNC GetDeviceName (wchar_t *nameBuf, 
unsigned int bufSize) 
Get the name of this device. More... 
WMX3APIFUNC SetDeviceWaitEvent (int errCode) 
Reserved. More... 
WMX3APIFUNC ResetDeviceWaitEvent () 
Reserved. More... 
WMX3APIFUNC WaitForDeviceWaitEvent (unsigned int 
waitTime, int *errCode) 
Reserved. More... 

WMX3APIFUNC SetModuleSuspend (ModuleSuspend 
*suspend) 

Set whether to suspend loading specific 
platform modules when starting 
communication. More... 

WMX3APIFUNC GetModuleSuspend (ModuleSuspend 
*suspend) 

Get the settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC AbortModuleSuspend () 
Clear all settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond) 

Pauses execution of the current thread 
until the specified timeout interval 
elapses. More... 

WMX3APIFUNC PrintToServerConsole (const char 
*format,...) 

Print a message to the Console Screen. 
More... 


WMX3APIFUNC PrintToServerConsole (const wchar_t 
*format,...) 

Print a message to the Console Screen. 
More... 

WMX3APIFUNC RecordWindowsUpdates (unsigned int 
waitTimeMilliseconds=0) 
Record a list of installed Windows 
Updates to file. More... 
WMX3APIFUNC CompareWindowsUpdates (unsigned int 
waitTimeMilliseconds=0) 
Compare the list of currently installed 
Windows Updates to the list recorded to 
file. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t 

*filePath, const wchar_t *format,...) 

Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const char *filePath, 
int charsToPrint, const char *buff) 
Append a string to a file. More... 
static WMX3APIFUNC PrintToFileIfExist (const wchar_t 
*filePath, int charsToPrint, const wchar_t 
*buff) 
Append a string to a file. More... 

static WMX3APIFUNC GetStdOutStr (char *buff, int buffSize, 


unsigned char *isWideChar, int *strlen) 

Get the character string stored in the 
WMX3 engine message output buffer. 

More... 

static WMX3APIFUNC GetStdOutDataSize () 
Get the size of the string stored in the 
WMX3 engine message output buffer. 
More... 

static WMX3APIFUNC ClearStdOut () 
Clear the string stored in the WMX3 
engine message output buffer. More... 

static WMX3APIFUNC ReleaseStdOut () 
Release resources related to the WMX3 
engine message output buffer. More... 

Public Attributes 

HANDLE dev 

Reserved. 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
static 
WMX3APIFUNC 
ErrorToString ( 
int 
char * 
errCode, 
pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the ErrorCode enum. All errors returned by functions in 
class WMX3Api will be defined in this enum. Errors returned by functions in other 
classes may not be defined in this enum, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
WMX3Api class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
WMX3APIFUNC 
ApiLogToString ( 
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetIMDllVersion() 

static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
int * 
pVersion, 
int * pRevision 
Get the version of the IMDll. 

Parameters 
[out] 
pVersion The version number. 
[out] 
pRevision The revision number. 

Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [1/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const char * filePath, 
const char * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The char string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks 

This function appends a formatted string to a file. If the file does not exist, a new file 
is created. 

The char string after formatting must be 1024 characters or less. If the char string 
after formatting exceeds 1024 characters, the BufferTooSmall error is returned. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [2/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const wchar_t * filePath, 
const wchar_t * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A wchar_t array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The wchar_t string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks 

This function is a variation of PrintToFile that accepts a wchar_t string. Use this 
function when using Unicode character sets. 

The wchar_t string after formatting must be 1024 characters or less. If the wchar_t 
string after formatting exceeds 1024 characters, the BufferTooSmall error is 
returned. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [3/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const char * filePath, 
int 
charsToPrint, 
const char * buff 
) 
Append a string to a file. 
Parameters 
[in] 
filePath A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
[in] 
charsToPrint The number of 
characters to print from 
the string specified to 
buff. 
[in] 
buff The null-terminated char 
string to print to file. 
Remarks 

This function appends a string to file. If the file does not exist, a new file is created. 

Characters are printed to file until charsToPrint characters are printed or the end of 
the string (the null terminator) is reached, whichever comes first. 

There is no limit to the number of characters that can be printed with each function 
call. However, format specifiers cannot be specified. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [4/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const wchar_t * filePath, 
int 
charsToPrint, 
const wchar_t * buff 
) 
Append a string to a file. 
Parameters 
[in] 
filePath A wchar_t array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
[in] 
charsToPrint The number of wchar_t 
characters to print from 
the string specified to 
buff. 
[in] 
buff The null-terminated 
wchar_t string to print to 
file. 

Remarks 

This function is a variation of PrintToFile(const char* filePath, int charsToPrint, 
const char* buff) that accepts a wchar_t string. Use this function when using 
Unicode character sets. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFileIfExist() [1/4]

static 
WMX3APIFUNC 
PrintToFileIfExist ( 
static 
WMX3APIFUNC 
PrintToFileIfExist ( 
const char * filePath, 
const char * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The char string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks 

This function appends a formatted string to a file. If the file does not exist, an error is 
returned. 

The char string after formatting must be 1024 characters or less. If the char string 
after formatting exceeds 1024 characters, the BufferTooSmall error is returned. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFileIfExist() [2/4]

static 
WMX3APIFUNC 
PrintToFileIfExist ( 
static 
WMX3APIFUNC 
PrintToFileIfExist ( 
const wchar_t * filePath, 
const wchar_t * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A wchar_t array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The wchar_t string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks 

This function is a variation of PrintToFileIfExist that accepts a wchar_t string. Use 
this function whne using Unicode character sets. 

The wchar_t string after formatting must be 1024 characters or less. If the wchar_t 
string after formatting exceeds 1024 characters, the BufferTooSmall error is 
returned. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFileIfExist() [3/4]

static 
WMX3APIFUNC 
PrintToFileIfExist ( 
) 
static 
WMX3APIFUNC 
PrintToFileIfExist ( 
) 
const char * filePath, 
int 
charsToPrint, 
const char * buff 
Append a string to a file. 

Parameters 
[in] 
filePath A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
[in] 
charsToPrint The number of 
characters to print from 
the string specified to 
buff. 
[in] 
buff The null-terminated char 
string to print to file. 

Remarks 

This function appends a string to file. If the file does not exist, an error is returned. 

Characters are printed to file until charsToPrint characters are printed or the end of 
the string (the null terminator) is reached, whichever comes first. 

There is no limit to the number of characters that can be printed with each function 
call. However, format specifiers cannot be specified. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFileIfExist() [4/4]

static 
WMX3APIFUNC 
PrintToFileIfExist ( 
static 
WMX3APIFUNC 
PrintToFileIfExist ( 
const wchar_t * filePath, 
int 
charsToPrint, 
const wchar_t * buff 
) 
Append a string to a file. 
Parameters 
[in] 
filePath A wchar_t array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
[in] 
charsToPrint The number of wchar_t 
characters to print from 
the string specified to 
buff. 
[in] 
buff The null-terminated 
wchar_t string to print to 
file. 

Remarks 

This function is a variation of PrintToFileIfExist(const char* filePath, int 
charsToPrint, const char* buff) that accepts a wchar_t string. Use this function 
whne using Unicode character sets. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetStdOutStr() 
static 
WMX3APIFUNC 

GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
Get the character string stored in the WMX3 engine message output buffer. 

Parameters 
[out] 
buff A buffer that outputs the 
character string stored in 
the message output 
buffer. 
[in] 
buffSize The size of the buffer 
that outputs the 
character string stored in 
the message output 
buffer. 
[out] 
isWideChar If 1, wide characters are 
stored in message 
output buffer. If 0, 
multibyte characters are 
stored in the message 
output buffer. 
[out] 
strlen Number of characters in 
the string that was 
obtained from the 
message output buffer. 

Remarks 

This function gets the string stored in the WMX3 engine message output buffer. By 
setting "2" to the StdOut key in Module.ini, the WMX3 engine message will be 
output to the message output buffer. If a value other than "2" is set in the StdOut key 
of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be 
acquired with this function. (For details, see the description of Module.ini in 


GeneralHelp.) 

When a string is obtained from the message output buffer using this function, the 
obtained string is deleted from the message output buffer. If the size of the specified 
output buffer is smaller than the size of the string stored in the message output 
buffer, the substring that can fit in the specified output buffer size is obtained. 

If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆GetStdOutDataSize() 
static 
WMX3APIFUNC 
GetStdOutData 
Size ( ) 
Get the size of the string stored in the WMX3 engine message output buffer. 

Remarks 

This function gets the size of the string stored in the WMX3 engine message output 
buffer. If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks 

This function clears the string stored in the WMX3 engine message output buffer. If 
this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ReleaseStdOut() 
static 
WMX3APIFUNC 
ReleaseStdOut ( 
) 
Release resources related to the WMX3 engine message output buffer. 

Remarks 

This function releases resources opened by the WMX3 engine when any of the 
following functions is called. 


GetStdOutStr 
GetStdOutDataSize 
ClearStdOut 


If any of the above functions is called, this function must be called before the 
program ends to release resources. 

◆IsDeviceValid() 

bool 
IsDeviceValibool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function. 

◆StartEngine() [1/2]
WMX3APIFUNC 
StartEngine ( const char * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Start the WMX3 engine without creating a device. 

Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 
(WMX3Engine.rtss). 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to start before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until the engine 
process starts, but will 
return before the engine 
fully initializes. If another 


function is called before 
the engine is fully 
initialized, an error will 
be returned. The Engine 
State status obtained by 
GetStatus can be 
checked to see the 
engine has been 
initialized (this status will 
contain Idle while the 
engine has not fully 
initialized). If a nonzero 
value is specified, this 
function will wait until the 
engine starts or the 
specified amount of time 
elapses. If the engine 
has not started after 
waiting for the specified 
amount of time, the 

EngineNotStartedInSp 
ecifiedTime error is 
returned. 

[in] 
core An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 


this function is called. 

[in] 
affinityMask An optional argument 
that can be used to 
specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 

1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 
Remarks 

This function can starts the WMX3 engine without creating a device. Typically, this 
function does not need to be called, as the engine is automatically started when the 
first device is created with the CreateDevice function. 

Scenarios in which the user might use this function include the following: 


The architecture of the user application requires the engine to be started 
independently before creating any devices. 
The user has closed the engine using the StopEngine function while some 
devices remain open. In this case, calling this function will start the engine 
and cause the link to existing devices to be restored so that they may call API 
functions again. 

Unlike most API functions, this function can be called successfully without creating a 
device with CreateDevice. 

This function is blocking, and may take several seconds or more before it returns a 
value. 

◆StartEngine() [2/2]
WMX3APIFUNC 
StartEngine ( const wchar_t * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Start the WMX3 engine without creating a device. 

Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 
(WMX3Engine.rtss). 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to start before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until the engine 
process starts, but will 
return before the engine 
fully initializes. If another 
function is called before 
the engine is fully 


initialized, an error will 
be returned. The Engine 
State status obtained by 
GetStatus can be 
checked to see the 
engine has been 
initialized (this status will 
contain Idle while the 
engine has not fully 
initialized). If a nonzero 
value is specified, this 
function will wait until the 
engine starts or the 
specified amount of time 
elapses. If the engine 
has not started after 
waiting for the specified 
amount of time, the 

EngineNotStartedInSp 
ecifiedTime error is 
returned. 

[in] 
core An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 
this function is called. 


[in] 
affinityMask An optional argument 
that can be used to 
specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 

1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 
Remarks 

This function is a variation of StartEngine that accepts a wchar_t string for the file 
path. Use this function when using Unicode character sets. 

◆RestartEngine() [1/2]
WMX3APIFUNC 
RestartEngine ( const char * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0

) ) 
Stop the currently running WMX3 engine and then restart the WMX3 engine. 

Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 
(WMX3Engine.rtss). 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to start before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until the engine 
process starts, but will 
return before the engine 
fully initializes. If another 
function is called before 
the engine is fully 
initialized, an error will 
be returned. The Engine 
State status obtained by 
GetStatus can be 
checked to see the 
engine has been 
initialized (this status will 
contain Idle while the 
engine has not fully 
initialized). If a nonzero 
value is specified, this 
function will wait until the 
engine starts or the 
specified amount of time 
elapses. If the engine 


has not started after 
waiting for the specified 
amount of time, the 
EngineNotStartedInSp 
ecifiedTime error is 
returned. 
[in] 
core An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 
this function is called. 
[in] 
affinityMask An optional argument 
that can be used to 
specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 
1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 


specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 

Remarks 

This function stops the currently running WMX3 engine and then restarts the WMX3 
engine. 

This function is equivalent to calling the StopEngine function, waiting until the 
engine has closed, and then calling the StartEngine function. 

When the engine is restarted, all data will be initialized as if the engine is started for 
the first time. This includes all parameter data, which will be reset to their default 
values, and all I/O and user memory data, which will be cleared. All dynamically 
allocated buffer memory will be released (see Function Calls related Memory 
Allocation). 

Scenarios in which the user might use this function include the following: 


The user wants to change the loaded modules or other engine options 
without closing all devices. By calling this function, the engine can be 
restarted with different loaded modules or other engine options. Any existing 
devices will automatically reconnect with the engine after it is restarted. If a 
different version of the engine is started, the existing devices may not 
be able to reconnect with the engine, and unpredictable behavior may 
occur. 
Unlike most API functions, this function can be called successfully without creating a 
device with CreateDevice. 

This function is blocking, and may take several seconds or more before it returns a 
value. 

◆RestartEngine() [2/2]

WMX3APIFUNC 
RestartEngine ( const wchar_t * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
WMX3APIFUNC 
RestartEngine ( const wchar_t * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Stop the currently running WMX3 engine and then restart the WMX3 engine. 

Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 
(WMX3Engine.rtss). 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to start before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until the engine 
process starts, but will 
return before the engine 
fully initializes. If another 
function is called before 
the engine is fully 
initialized, an error will 
be returned. The Engine 
State status obtained by 
GetStatus can be 
checked to see the 
engine has been 
initialized (this status will 
contain Idle while the 
engine has not fully 


initialized). If a nonzero 
value is specified, this 
function will wait until the 
engine starts or the 
specified amount of time 
elapses. If the engine 
has not started after 
waiting for the specified 
amount of time, the 
EngineNotStartedInSp 
ecifiedTime error is 
returned. 
[in] 
core An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 
this function is called. 
[in] 
affinityMask An optional argument 
that can be used to 
specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 


1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 
Remarks 

This function is a variation of RestartEngine that accepts a wchar_t string for the 
file path. Use this function when using Unicode character sets. 

◆StopEngine() 
WMX3APIFU 
NC 
StopEngine ( 
waitTimeMil 

Stop the currently running WMX3 engine. 

Parameters 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to stop before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until a stop 

unsigned int 
lise ) 

signal is sent to the 
engine process, but will 
return without checking if 
the engine process has 
stopped. If a nonzero 
value is specified, this 
function will wait until the 
engine process has 
stopped before 
returning. 

Remarks 

This function stops the WMX3 engine, regardless of whether there were any open 
devices left. Typically, this function does not need to be called, as the engine is 
automatically stopped when the last device is closed with the CloseDevice function. 

When the engine is restarted with the StartEngine function, all data will be 
initialized as if the engine is started for the first time. This includes all parameter 
data, which will be reset to their default values, and all I/O and user memory data, 
which will be cleared. When the engine is stopped, all dynamically allocated buffer 
memory will be released (see Function Calls related Memory Allocation). 

Scenarios in which the user might use this function include the following: 


The user wants to change the loaded modules or other engine options 
without closing all devices. By calling this function, waiting until the engine 
stops, and then starting the engine again with the StartEngine function, the 
loaded modules or other engine options can be changed. Any existing 
devices will automatically reconnect with the engine after it is restarted. If a 
different version of the engine is started, the existing devices may not 
be able to reconnect with the engine, and unpredictable behavior may 
occur. 
Unlike most API functions, this function can be called successfully without creating a 
device with CreateDevice. 

This function is blocking, and may take several seconds or more before it returns a 
value. 


◆CreateDevice() [1/2]
WMX3APIFUNC 
CreateDevice ( const char * path, 
DeviceType::T type = DeviceType::T::DeviceTypeNormalunsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Create a device to interface with the WMX3 engine. 
Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 
(WMX3Engine.rtss). 
[in] 
type An optional argument 
that specifies the type of 
device to create. This 
determines the method 
by which the device 
executes API functions. 
Also see Device Types. 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait after the 
device is created to 
verify that the engine is 
in a normal state. If no 
value is specified or 0 is 
specified, this function 
will not verify whether 
the engine is a normal 
state. If a value greater 


than 0 is specified, this 
function will continue to 
block after the device is 
created to communicate 
with the engine and 
verify that the engine is 
in a normal state. This 
function returns when 
the engine is confirmed 
to be in a normal state or 
when the specified time 
elapses. If this function 
cannot verify that the 
engine is in a normal 
state after waiting for the 
specified time, it will 
return the 
SystemInitializationNot 
Done error. 
[in] 
core An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 
this function is called. 
[in] 
affinityMask An optional argument 
that can be used to 


specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 

1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 
Remarks 

Each WMX3Api object must call this function first to establish an interface with the 
WMX3 engine before calling any API function (with a few exceptions). After this 
function succeeds and returns None, other API functions can be called. 

A pointer to a WMX3Api object must be passed to the constructor of classes that 
contain the API functions of each module. Before calling any API functions 
contained in that class, the CreateDevice function must be called from the passed 
WMX3Api object. The CreateDevice function can be called before or after passing 
the WMX3Api object to the constructor. 

If this function is not called, or if this function fails, all other API functions (with a few 
exceptions) will return the DeviceIsNull error. 

Once a device is succesfully created for a WMX3Api object, it will not need to call 
this function again unless the device is closed with the CloseDevice function). 


Each thread in the user application must instantiate a separate WMX3Api object 
and call CreateDevice. If multiple threads call API functions using the same device, 
there may be a delay when calling API functions, and some API functions such as 
Wait will not operate correctly due to shared resources. 

If the WMX3 engine process is not running when this function is called, the WMX3 
engine process will be started. 

Up to maxDevices devices may exist at the same time, and may independently 
communicate with the WMX3 engine. Therefore, the user application may call 
WMX3 library API functions from up to maxDevices threads. Attempting to create 
more than maxDevices devices will cause this API function to return the 
ReachMaxChannelNumber error. 

This function is blocking, and may take several seconds or more before it returns a 
value. 

See also 

Devices 

◆CreateDevice() [2/2]
WMX3APIFUNC 
CreateDevice ( const wchar_t * path, 
DeviceType::T type = DeviceType::T::DeviceTypeNormalunsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Create a device to interface with the WMX3 engine. 

Parameters 
[in] 
path The full path of the 
directory that contains 
the WMX3 engine 


(WMX3Engine.rtss). 
[in] 
type An optional argument 
that specifies the type of 
device to create. This 
determines the method 
by which the device 
executes API functions. 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait after the 
device is created to 
verify that the engine is 
in a normal state. If no 
value is specified or 0 is 
specified, this function 
will not verify whether 
the engine is a normal 
state. If a value greater 
than 0 is specified, this 
function will continue to 
block after the device is 
created to communicate 
with the engine and 
verify that the engine is 
in a normal state. This 
function returns when 
the engine is confirmed 
to be in a normal state or 
when the specified time 
elapses. If this function 
cannot verify that the 
engine is in a normal 
state after waiting for the 
specified time, it will 
return the 
SystemInitializationNot 
Done error. 


[in] 
core 

[in] 
affinityMask 

An optional argument 
that sets the CPU core 
to run the engine on. 
The specified core must 
be assigned to the RTX 
operating system. If the 
specified core does not 
exist or is not assigned 
to the RTX operating 
system, the default core 
will be used instead. 
This argument will have 
no effect if the engine is 
already running when 
this function is called. 

An optional argument 
that can be used to 
specify more than one 
CPU core to run the 
engine on. For example, 
to run the engine on 
CPU cores 0, 1, and 2, 
the affinity mask should 
be set to (1 << 0) | (1 << 

1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 

this function is called. 

Remarks 

This function is a variation of CreateDevice that accepts a wchar_t array for the file 
path string. Use this function when using Unicode character sets. 

See also 

Devices 

◆ 
CloseDevice() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
CloseDevice ( 
bool 
exitNoDev = true) 
Close a device. 

Parameters 
[in] 
exitNoDev If set to true, the engine 
will exit if the closed 
device is the last open 
device (excluding 
DeviceTypeExitWOCnt 
devices). If set to false, 
the engine will not exit 
even if the closed device 
is the last open device. 
This parameter will be 
set to true if not 
specified. 
Remarks 

This function closes the device used to interface with the WMX3 engine that has 
been created with the CreateDevice function. Each object of the WMX3Api class 
that has successfully created a device must call the CloseDevice function before 

the user application exits or the object is deleted. 

The WMX3 engine automatically exits when all devices have been closed with this 
function. If any devices are not closed when the user application exits, the WMX3 
engine will remain running. (The engine will close if the Watchdog timer runs out.) 

This function is blocking. When this function is called, execution will return to the 
calling thread only after the device is closed, or when the time out period elapses. 

See also 

Devices 


◆GetDeviceID() 
WMX3APIFU 
NC 
GetDeviceID ( int * id ) 
Get the device ID number of the device. 

Parameters 
[out] 
id A pointer to an int that 
will contain the ID 
number of the device. 
Remarks 

This function returns the device ID number of the device. 
All running devices will have unique device ID numbers. 
Device ID numbers of devices that have been closed with CloseDevice are freed, 

and may be assigned to devices later created by CreateDevice. 

◆AutoQuitWithoutActiveDev() 

bool quit bool quit 
WMX3APIFU 
NC 
AutoQuitWith 
outActiveDev ( 
) 
Configure the engine to automatically quit or not automatically quit when the last 
device is closed by a watchdog time out. 

Parameters 
[in] 
quit A flag signifying whether 
to automatically stop the 
engine when the last 
device is closed. If set to 
TRUE, the engine will 
automatically stop. If set 
to FALSE, the engine will 
not automatically stop. 
Remarks 

This function configures the engine to automatically quit or not automatically quit 
when the last device is closed by a watchdog time out. 

By default, the engine is configured to automatically quit when the last device is 
closed by a watchdog time out. 

See also 

SetWatchdog 

◆SetWatchdog() [1/2]

unsigned int watchdog ) unsigned int watchdog ) 
WMX3APIFU 
NC 
SetWatchdog ( 
Set the watchdog time out period for the device that called this function. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
Remarks 

This function sets the watchdog time out period for the device that called this 
function. Even if this function is not called, a watchdog timer is enabled for each 
device using the default time out period. If the process that created the device is 
closed without closing the device, the device will be automatically closed after the 
watchdog time out period elapses. 

See also 

Overview 

◆SetWatchdog() [2/2]

WMX3APIFUNC 
SetWatchdog ( 
) 
WMX3APIFUNC 
SetWatchdog ( 
) 
int 
deviceId, 
unsigned int watchdog 
Set the watchdog time out period for a specific device. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
[in] 
deviceId The device ID of the 
device. 
Remarks 

This function sets the watchdog time out period for the device with the specified ID. 

See also 

Overview 

◆GetWatchdog() 

WMX3APIFUNC 
GetWatchdog ( 
WMX3APIFUNC 
GetWatchdog ( 
unsigned int * watchdog, 
unsigned int * watchdogCount = NULL
) 
Get the watchdog time out period and the current watchdog count. 

Parameters 
[out] 
watchdog The watchdog time out 
period set for this device, 
in milliseconds. If this 
value is 0, the device 
has no watchdog. 
[out] 
watchdogCount An optional argument 
that will retrieve the 
current watchdog count 
for this device. This is 
the number of 
milliseconds that have 
elapsed since the 
watchdog thread last 
reported that the device 
is operating normally. 
Remarks 

This function obtains the current watchdog time out period and watchdog count of 
the device that called this function. 

◆ResetWatchdogTimer() 

WMX3APIFUNC 
ResetWatchdog 
Timer ( 
WMX3APIFUNC 
ResetWatchdog 
Timer ( 
) 
Reset the watchdog count of a device. 

Remarks 

This function resets the watchdog count value of the device that called this function 
so that it is considered to be alive until the watchdog time out period elapses again. 
Normally, this function does not need to be called, as the watchdog thread that is 
automatically started when a device is created will periodically reset the watchdog 
count. 

◆SetStatistic() 
WMX3APIFU 
NC 
SetStatistic ( bool enable ) 
Configure a device to collect API execution statistics data. 

Parameters 
[in] 
enable Whether to enable 
device statistics 
collection. 
Remarks 

This function configures a device to collect or not collect API execution statistics 
data. 

See also 

GetStatistic 

◆GetStatistic() 

◆GetStatistic() 
WMX3APIFU 
NC 
GetStatistic ( DeviceStatiststatistics ) 
Read the currently collected API execution statistics data. 

Parameters 
[out] 
statistics A pointer to a 
DeviceStatistics object 
that will contain the 
collected statistics data. 

Remarks 

This function obtains the currently collected API execution statistics data for a 
device. The device must be first configured to collect this data using the 
SetStatistic function. 

This data is collected as API functions are executed through this device. The 
GetStatistic function can be used to read the collected data. See the 
DeviceStatistics class for additional information regarding the data that is 
collected. 

This data is not collected for API functions that are not executed by API process 
threads. See Function Calls for Special Processing for a list of these functions. 

This data is collected for API functions when they are appended to the API buffer 
but not when they are executed from the API buffer (see API Buffer). 

See also 

SetStatistic 

◆SetInterruptId() 

unsigned int interruptId ) unsigned int interruptId ) 
WMX3APIFU 
NC 
SetInterruptId ( 
Set the interrupt (cyclic handler) associated with the calling device. 

Parameters 
[in] 
interruptId The interrupt to 
associate with the calling 
device. 

Remarks 

This function sets the interrupt (cyclic handler) to associate with the calling device. 

After calling the CreateDevice function to create a device, that device can be 
associated to a particular interrupt by calling this function. A few functions are 
affected by the interrupt associated with the calling device. Other than these 
functions, the interrupt associated with the calling device has no effect on the 
operation of the device. See Functions Calls affected by Interrupts for additional 
information. 

A newly created device is by default associated with interrupt 0. 

The interrupt ID must be at least 0 and less than maxInterrupts. 

◆ 
GetInterruptId() 

WMX3APIFU 
NC 
GetInterruptI 
WMX3APIFU 
NC 
GetInterruptI 
d ( 
unsigned int * interruptId ) 
Get the interrupt (cyclic handler) associated with the calling device. 

Parameters 
[out] 
interruptId A pointer to an unsigned 
int that will contain the 
interrupt associated with 
the calling device. 
Remarks 

This function obtains the ID of the interrupt (cyclic handler) associated with the 
calling device. This interrupt is set using the SetInterruptId function. 

◆StartCommunication() 
WMX3APIFU 
NC 
StartCommu 
nication ( 
waitTimeMil 

Start communication with the servo network. 

Parameters 
waitTimeMilliseconds The amount of time to wait for 
communication to be established 
before returning. If this argument is 
set to 0, or it is not specified, this 
function will send a signal to start 
communication but may return before 
communication is completely 
established. If this argument is set to 

unsigned int 
lise ) 

a nonzero value, the function will 
block and not return until 
communication is established or the 
waitTimeMilliseconds time elapses. In 
this case, an error will be returned if 
waitTimeMilliseconds elapses before 
communication is established. If an 
error is returned this way, the signal 
to start communication will remain set 
and communication may still become 
established a few moments later. 

Remarks 

This function must be called before performing any other functions that require 
communication with the servo network. 

To check if communication with the servo network can be started, call the 
GetStatus API function and check the Engine State variable. If this value is equal 
to Idle, communication cannot be started yet and calling this function will have no 
effect. If this value is equal to Running, communication can be started with this 
function. 

Even if Engine State is equal to Running, some additional time is required to 
establish a link with the network. Calling this function at this time will cause it to 
return the StartCommunicationError. If this occurs, call this function after waiting 
for a few seconds. 

To check if communication with the servo network has been successfully 
established, again call the GetStatus API function and check the Engine State 
variable. If Engine State is equal to Communicating, communication is working. 

This function is blocking. When this function is called, execution will return only 
when a network communication request is initiated, or when the initiation of the 
network communication request times out. Note that the engine status will not 
immediately change to Communicating after the network communication request is 
initiated. Even after this function returns, it may be necessary to wait for several 
seconds before GetStatus returns the Communicating status. If a value is 
specified for the waitTimeMilliseconds parameter, this function will wait until the 



engine status changes to Communicating or the specified time out period elapses 
before returning. 

Functions that require communication with the servo network will return errors 
unless they are executed after the Engine State becomes Communicating. 

◆StopCommunication() 
WMX3APIFU 
NC 
StopCommun 
ication ( 
waitTimeMi 

Stop communication with the servo network. 

Parameters 

waitTimeMilliseconds 

unsigned int 
llise ) 
The amount of time to wait for 
communication to be stopped before 
returning. If this argument is set to 0, 
or it is not specified, this function will 
send a signal to stop communication 
but may return before communication 
is completely stopped. If this 
argument is set to a nonzero value, 
the function will block and not return 
until communication is stopped or the 
waitTimeMilliseconds time elapses. In 
this case, an error will be returned if 
waitTimeMilliseconds elapses before 
communication is stopped. If an error 
is returned this way, the signal to stop 
communication will remain set and 
communication may still become 
established a few moments later. 

Remarks 


This function can be called after establishing communication with the servo network 
using the StartCommunication function. This function will end communication with 
the servo network. To check if communication with the servo network has been 
successfully stopped, call the GetStatus API function and check the Engine State 
variable. If the Engine State is no longer Communicating, communication has 
been stopped (the Engine State will normally be Running at this point). 

Note that the Engine State will not immediately change to Running immediately 
after this function is called. Even after this function returns, it may be necessary to 
wait for several seconds before GetStatus returns the Running engine status. If a 
value is specified for the waitTimeMilliseconds parameter, this function will wait until 
the engine status changes to Running or the specified time out period elapses 
before returning. 

No function that requires communication with the servo network may be executed 
after communication is stopped. StartCommunication may be called again to 
reestablish communication with the servo network. 

◆ 
GetModulesInfo() [1/2] 



WMX3APIFU 
NC 
GetModulesI 
WMX3APIFU 
NC 
GetModulesI 
nfo ( 
ModulesInfoA modules ) 
Obtain information of the modules that are loaded by the engine. 

Parameters 
[out] 
modules A pointer to a 
ModulesInfoA object 
that will contain the 
information of the 
modules that are loaded 
by the engine. 
Remarks 

This function obtains the information of the modules that are loaded by the engine. 
The engine can execute API functions in a module library only if the corresponding 
module has been loaded. See ModulesInfoA for additional information regarding 
the module data that can be obtained. 

◆GetModulesInfo() [2/2]

WMX3APIFU 
NC 
GetModulesI 
WMX3APIFU 
NC 
GetModulesI 
nfo ( 
ModulesInfoW modules ) 
Obtain information of the modules that are loaded by the engine. 

Parameters 
[out] 
modules A pointer to a 
ModulesInfoW object 
that will contain the 
information of the 
modules that are loaded 
by the engine. 
Remarks 

This function is a variation of GetModulesInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆GetModuleInfo() [1/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoA * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoA object that 
will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks 

This function obtains the information of a single module that is loaded by the engine. 

If the module with the specified moduleId is not loaded, a ModuleIsNotLoaded 
error is returned. 

◆GetModuleInfo() [2/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoW * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoW object 
that will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks 

This function is a variation of GetModuleInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆ 
GetEngineStatus() 

WMX3APIFU 
NC 
GetEngineSt 
WMX3APIFU 
NC 
GetEngineSt 
atus ( 
EngineStatus status ) 
Obtain the status of the engine. 
Parameters 
[out] 
status A pointer to a 
EngineStatus object 
that will contain the 
engine status. 
Remarks 
This funtion obtains the status of the engine. 

◆GetAllDevices() [1/2]

WMX3APIFU 
NC 
GetAllDevice 
WMX3APIFU 
NC 
GetAllDevice 
s ( 
DevicesInfoA devices ) 
Obtain information of all existing devices. 

Parameters 
[out] 
devices A pointer to a 
DevicesInfoA object 
that will contain the 
information of all existing 
devices. 
Remarks 

This function obtains the information of all existing devices. This includes the 
number of currently existing devices and the ID and name of each device. 

This function can be used to verify that all other devices have closed. 

◆GetAllDevices() [2/2]

WMX3APIFU 
NC 
GetAllDevice 
WMX3APIFU 
NC 
GetAllDevice 
s ( 
DevicesInfoW devices ) 
Obtain information of all existing devices. 

Parameters 
[out] 
devices A pointer to a 
DevicesInfoW object 
that will contain the 
information of all existing 
devices. 
Remarks 

This function is a variation of GetAllDevices that obtains certain device information 
as wchar_t strings instead of char strings. Use this function when using Unicode 
character sets. 

◆SetDeviceName() [1/2]

WMX3APIFU 
NC 
SetDeviceNa 
WMX3APIFU 
NC 
SetDeviceNa 
me ( 
const char * name ) 
Set the name of this device. 

Parameters 
[in] 
name A char array that 
contains the name of the 
device as a null-
terminated string. The 
array must not be longer 
than maxDeviceName 
characters, or else the 
name will be truncated. 

Remarks 

This function sets the name of the device calling this function. The device name has 
no effect on the operation of the device, except that it makes the device easier to 
identify when using functions such as GetAllDevices. 

◆ 
SetDeviceName() [2/2] 



WMX3APIFU 
NC 
SetDeviceNa 
WMX3APIFU 
NC 
SetDeviceNa 
me ( 
const wchar_t name ) 
Set the name of this device. 

Parameters 
[in] 
name A wchar_t array that 
contains the name of the 
device as a null-
terminated string. The 
array must not be longer 
than maxDeviceName 
characters, or else the 
name will be truncated. 

Remarks 

This function is a variation of SetDeviceName that sets the device name as a 
wchar_t string instead of a char string. Use this function when using Unicode 
character sets. 

◆GetDeviceName() [1/2]

WMX3APIFUNC 
GetDeviceName ( 
) 
WMX3APIFUNC 
GetDeviceName ( 
) 
char * 
nameBuf, 
unsigned int bufSize 
Get the name of this device. 

Parameters 
[out] 
nameBuf A char array that will 
contain the name of the 
device as a null-
terminated string. The 
array must have space 
to store at least 
maxDeviceName 
characters. 
[in] 
bufSize The size of the char 
array passed to the 
nameBuf argument. 
Remarks 

This function gets the name of the device calling this function. The name of the 
device can be set using the SetDeviceName function. 

The default name of a device before calling the SetDeviceName function is blank. 

◆GetDeviceName() [2/2]

WMX3APIFUNC 
GetDeviceName ( 
) 
WMX3APIFUNC 
GetDeviceName ( 
) 
wchar_t * 
nameBuf, 
unsigned int bufSize 
Get the name of this device. 

Parameters 
[out] 
nameBuf A wchar_t array that will 
contain the name of the 
device as a null-
terminated string. The 
array must have space 
to store at least 
maxDeviceName 
characters. 
[in] 
bufSize The size of the wchar_t 
array passed to the 
nameBuf argument. 
Remarks 

This function is a variation of GetDeviceName that gets the device name as a 
wchar_t string instead of a char string. Use this function when using Unicode 
character sets. 

◆SetDeviceWaitEvent() 
WMX3APIFU 
NC 
SetDeviceWa 
itEvent ( int errCode ) 
Reserved. 

i 

◆ResetDeviceWaitEvent() 
◆WaitForDeviceWaitEvent() 
◆SetModuleSuspend() 
WMX3APIFUNC 
ResetDeviceWatEvent ( ) 
Reserved. 
WMX3APIFUNC 
WaitForDeviceWaitE 
vent ( unsigned int waitTime, 
int * errCode 
) 
Reserved. 
WMX3APIFU 
NC 
SetModuleSu 
spend ( ModuleSuspe suspend ) 
Set whether to suspend loading specific platform modules when starting 
communication. 

Parameters 
[in] 
suspend A pointer to a 
ModuleSuspend object 
that contains the 


suspend setting for each 
platform module. 

Remarks 

This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded. 

Platform modules for which the suspend setting is set to 0 are loaded. 
One use of this function is to dynamically switch between loading the simulator 
module and non-simulator platform modules without stopping the engine or 
modifying configuration files. 

The following modules may be suspended by this function: 


SimuPlatform 
EcPlatform 
RtexPlatform 
MIIIPlatform 


Platform modules that are disabled in the configuration file will not be loaded, 
regardless of its suspend setting. 

The applied suspend settings take effect the next time communication is started. 

◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when 

starting communication. 
Parameters 
[out] 
suspend A pointer to a 
ModuleSuspend object 
that will contain the 
suspend setting for each 
platform module. 
Remarks 

This function reads the suspend setting of each platform module. 

Suspend settings are checked by the engine whenever communication is started. 
Platform modules for which the suspend setting is 1 will not be loaded. 

◆ 
AbortModuleSuspend() 

WMX3APIFUNC 
AbortModuleSus 
pend ( 
WMX3APIFUNC 
AbortModuleSus 
pend ( 
) 
Clear all settings of whether to suspend loading specific platform modules when 
starting communication. 

Remarks 

This function clears all suspend settings that have been set by 
SetModuleSuspend. 

All platform modules that are enabled in the configuration file will be loaded by the 
engine the next time communication is started. 

◆SleepAtEngine() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
SleepAtEngin 
e ( 
unsigned long microSecond ) 
Pauses execution of the current thread until the specified timeout interval elapses. 

Parameters 
[in] 
microSecond The timeout interval (in 
microseconds) for which 
execution is paused. Up 
to (2^32-1) 
microseconds can be 
specified. 
Remarks 

This function suspends execution of the current thread until the specified timeout 
interval elapses. 

The timeout interval must be set to a value greater than or equal to the minimum 
timer period of the system on which the engine is running. 

If the specified timeout interval is below the minimum timer period, no error is 
returned and the thread pauses execution for at least the minimum timer period. 

Even if the timeout interval is greater than or equal to the minimum timer period, the 
thread may pause for a minimum of several tens of microseconds. 

◆PrintToServerConsole() [1/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const char * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The char string to print. 
This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function signals the engine to print a formatted string to the Rtx Server 
Console. The Rtx Server Console is a component of the RTX operating system that 
displays messages to the user in Windows space. 

◆PrintToServerConsole() [2/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const wchar_t * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The wchar_t string to 
print. This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function is a variation of PrintToServerConsole that accepts a wchar_t string 
for the formatted string. Use this function whne using Unicode character sets. 

◆ 
RecordWindowsUpdates() 

WMX3APIFU 
NC 
RecordWindo 
WMX3APIFU 
NC 
RecordWindo 
wsUpdates ( 
unsigned int waitTimeMillise ) 
Record a list of installed Windows Updates to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 

time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function records to file a list of Windows Updates that are currently installed to 
the system. 

This function can be used in conjunction with the CompareWindowsUpdates 
function to detect changes to the Windows Updates that are installed to the system. 

The file that is created by this function is stored in the 
C:\ProgramData\SoftServo\WMX3 
directory with the file name 
InstalledWindowsUpdates.dat. 

This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


◆CompareWindowsUpdates() 
WMX3APIFU 
NC 
CompareWin 
dowsUpdates ( unsigned int waitTimeMillise ) 
Compare the list of currently installed Windows Updates to the list recorded to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 
time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function compares the file generated by the RecordWindowsUpdates function 
against the Windows Updates that are currently installed to the system. 

This function returns the UpdatesListUninitialized error code if the file is not found. 

This function returns the UpdatesListDoesNotMatchInstalledUpdates error code 
if the file is found, but its contents do not match the Windows Updates that are 
currently installed to the system. This can occur if a new Windows Update has been 
installed or an existing Windows Update has been uninstalled since the time that the 
RecordWindowsUpdates function was last called. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


One way to use this function is as follows: 

1. Call this function immediately before calling CreateDevice. Calling this 
function will not start the real time operating system. 
2. If this function returns the UpdatesListDoesNotMatchInstalledUpdates 
error, display a warning message to the user. 
3. If the user confirms that the installed Windows Updates are compatible with 
the real time operating system, call CreateDevice as usual to start the WMX3 
engine. 
4. After the WMX3 engine starts, RecordWindowsUpdates should be called to 
update the file containing the list of installed Windows Updates. This way, the 
warning message will be displayed again only if there is another change in 
the installed Windows Updates. 
See also 

RTX Configuration 4 -Management of Windows Updates 

 

wmx3Api::simuApi Namespace Reference 

This namespace contains Simu Api related functions. 

Classes 

class Simu 
This class contains Simu API 
functions. More... 

class SimuAxisData 
This class describes the simulator axis 
data. More... 

class SimuAxisSignal 
This class describes the simulator axis 
signal. More... 

class SimuAxisState 
This enumerator class enumerates the 
simulator axis states. More... 

class SimuErrorCode 
This enumerator class enumerates the 
Simu library error codes. More... 

class SimuIoData 
This class describes the simulator IO 
data. More... 

class SimuMasterInfo 
This class describes the simulator 
master information. More... 

 

Simu Class Reference 

This class contains Simu API functions. 

Public Member Functions 

Simu (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

Simu (const Simu &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

Simu & operator= (const Simu &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

Simu () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

Simu (DeviceType::T type) 

Constructor to initialize an object of this 
class with a self device of the specified 
device type. Also see Self Devices. 

~Simu () 

Destructor for this class. 

bool IsDeviceValid () 

Return TRUE if this class object has 


access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 
CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

SIMUAPIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

SIMUAPIFUNC SetInBit (int byte, int bit, unsigned char 

data) 

Set the value of a simulator input bit. 

More... 

SIMUAPIFUNC SetInByte (int byte, unsigned char data) 

Set the value of a simulator input byte. 

More... 

SIMUAPIFUNC SetInBytes (int byte, int size, unsigned 
char *pData) 

Set the value of multiple simulator input 
bytes. More... 

SIMUAPIFUNC SetInBits (int *pByte, int *pBit, unsigned 
char *pData, int count) 

Set the value of multiple simulator input 
bits. More... 

SIMUAPIFUNC ClearInBit (int byte, int bit) 

Clear the set value of a simulator input 
bit. More... 

SIMUAPIFUNC ClearInByte (int byte) 
Clear the set value of a simulator input 
byte. More... 


SIMUAPIFUNC ClearInBytes (int byte, int size) 
Clear the set value of multiple simulator 
input bytes. More... 

SIMUAPIFUNC ClearInBits (int *pByte, int *pBit, int count) 
Clear the set value of multiple simulator 
input bits. More... 

SIMUAPIFUNC SetServoOnFeedback (int axis, int 
newStatus) 

Set the value of the "servo on feedback" 
signal of a simulator axis. More... 

SIMUAPIFUNC SetAlarm (int axis, int alarmCode) 
Set the alarm state of a simulator axis. 
More... 
SIMUAPIFUNC SetWarning (int axis, int warningCode) 
Set the warning state of a simulator axis. 
More... 
SIMUAPIFUNC SetHomeSwitch (int axis, int newStatus) 
Set the home switch state of a simulator 
axis. More... 
SIMUAPIFUNC SetLimitSwitchNegative (int axis, int 
newStatus) 
Set the negative limit switch state of a 
simulator axis. More... 

SIMUAPIFUNC SetLimitSwitchPositive (int axis, int 
newStatus) 

Set the positive limit switch state of a 
simulator axis. More... 

SIMUAPIFUNC SetZPulse0Detected (int axis, int 
latchedZPulseFeedback) 

Set the "ZPulse 0 detected" signal and 
the latched ZPulse position feedback of 
a simulator axis. More... 

SIMUAPIFUNC SetZPulse1Detected (int axis, int 


latchedZPulseFeedback) 

Set the "ZPulse 1 detected" signal and 
the latched ZPulse position feedback of 
a simulator axis. More... 

SIMUAPIFUNC 
SIMUAPIFUNC 
SIMUAPIFUNC 
SIMUAPIFUNC 
SetTouchProbe0Detected (int axis, int 
touchProbeDetectedFeedback) 
Set the "touch probe 0 detected" signal 
and the latched touch probe 0 position 
feedback of a simulator axis. More... 
SetTouchProbe1Detected (int axis, int 
touchProbeDetectedFeedback) 
Set the "touch probe 1 detected" signal 
and the latched touch probe 1 position 
feedback of a simulator axis. More... 
ClearServoOnFeedback (int axis) 
Clear the set "servo on feedback" signal 
for a simulator axis. More... 
ClearAlarm (int axis) 
Clear the set alarm state for a simulator 
axis. More... 
SIMUAPIFUNC 
SIMUAPIFUNC 
SIMUAPIFUNC 
SIMUAPIFUNC 
ClearWarning (int axis) 
Clear the set warning state for a 
simulator axis. More... 
ClearHomeSwitch (int axis) 
Clear the set home switch state for a 
simulator axis. More... 
ClearLimitSwitchNegative (int axis) 
Clear the set negative limit switch state 
for a simulator axis. More... 
ClearLimitSwitchPositive (int axis) 
Clear the set positive limit switch state 
for a simulator axis. More... 

SIMUAPIFUNC ClearZPulse0Detected (int axis) 

Clear the set "ZPulse 0 detected" signal 


for a simulator axis. More... 

SIMUAPIFUNC ClearZPulse1Detected (int axis) 
Clear the set "ZPulse 1 detected" signal 
for a simulator axis. More... 
SIMUAPIFUNC ClearTouchProbe0Detected (int axis) 
Clear the set "touch probe 0 detected 
signal" for a simulator axis. More... 

SIMUAPIFUNC ClearTouchProbe1Detected (int axis) 
Clear the set "touch probe 1 detected 
signal" for a simulator axis. More... 

SIMUAPIFUNC SetUpdatePeriod (unsigned int period) 

Set the master info update period. 

More... 

SIMUAPIFUNC GetMasterInfo (SimuMasterInfo 
*masterInfo) 

Read the current master information from 
the engine. More... 

Static Public Member Functions 

static SIMUAPIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static SIMUAPIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static SIMUAPIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 


static SIMUAPIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static SIMUAPIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the library version information of 
current using SimuApi.lib. More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
SIMUAPIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 


characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the SimuErrorCode enum or the ErrorCode enum in the 
WMX3Api.h header. All errors returned by functions in class Simu will be defined in 
one of these enums. Errors returned by functions in other classes may not be 
defined in one of these enums, and when such errors are passed to this function, an 
ErrorCodeNotDefined error will be returned and pString will contain the string 
representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the Simu 
class or creating a device. 

◆ 
ErrorToString() [2/2] 



static 
SIMUAPIFUNC 
ErrorToString ( 
) 
static 
SIMUAPIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static 
SIMUAPIFUNC 
ApiLogToString ( 
static 
SIMUAPIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
char * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

static 
SIMUAPIFUNC 
ApiLogToString ( 
static 
SIMUAPIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
SIMUAPIFUNC 
GetLibVersion ( 
static 
SIMUAPIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the library version information of current using SimuApi.lib. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without 
declaring an instance of the Simu class or creating a device. The function 
GetVersion is used to retrieve the version information of the loaded 
SimuPlatform.rtdll, which could be different from the library. The version of the 
SimuPlatform.rtdll is determined by the rtdll file that is loaded by 
WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 

◆GetVersion() 
SIMUAPIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetInBit() 

SIMUAPIFUNC 
SetInBit ( 
SIMUAPIFUNC 
SetInBit ( 
int 
int 
byte, 
bit, 
unsigned char data 
) 
Set the value of a simulator input bit. 

Parameters 
[in] 
byte The byte address of the 
bit to set. 
[in] 
bit The bit offset of the bit to 
set. 
[in] 
data The value to set the bit 
to. 
Remarks 

The input bit will be updated during the next communication cycle. 

◆SetInByte() 

SIMUAPIFUNC 
SetInByte ( 
) 
SIMUAPIFUNC 
SetInByte ( 
) 
int 
byte, 
unsigned char data 
Set the value of a simulator input byte. 

Parameters 
[in] 
byte The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

The input byte will be updated during the next communication cycle. 

◆SetInBytes() 

SIMUAPIFUNC 
SetInBytes ( 
) 
SIMUAPIFUNC 
SetInBytes ( 
) 
int 
int 
byte, 
size, 
unsigned char * pData 
Set the value of multiple simulator input bytes. 

Parameters 
[in] 
byte The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a char array 
that contains the values 
to set the bytes to. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

The input bytes will be updated during the next communication cycle. 

◆SetInBits() 
SIMUAPIFUNC 
SetInBits ( int * pByte, 
int * pBit, 
unsigned char * pData, 
int count 
) 
Set the value of multiple simulator input bits. 

Parameters 

[in] 
pByte A pointer to an int array 
that contains the byte 
addresses of the input 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the input 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 
[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetInBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pByte[0], pBit[0], and pData[0] specify the first input bit to set, 
pByte[1], pBit[1], and pData[1] specify the second input bit to set, and so on. The 
bits can be specified in any order. 

The input bits will be updated during the next communication cycle. 

◆ 
ClearInBit() 

SIMUAPIFUNC 
ClearInBit ( 
) 
SIMUAPIFUNC 
ClearInBit ( 
) 
int 
byte, 
int bit 
Clear the set value of a simulator input bit. 

Parameters 
[in] 
[in] 
byte 
bit 
The byte address of the 
bit to clear. 
The bit offset of the bit to 
clear. 
Remarks 

The input bit will be updated during the next communication cycle. 

◆ClearInByte() 
SIMUAPIFU 
NC 
ClearInByte ( int byte ) 
Clear the set value of a simulator input byte. 

Parameters 
[in] 
byte The address of the byte 
to clear. 
Remarks 

The input byte will be updated during the next communication cycle. 

◆ClearInBytes() 

SIMUAPIFUNC 
ClearInBytes ( 
) 
SIMUAPIFUNC 
ClearInBytes ( 
) 
int 
byte, 
int size 
Clear the set value of multiple simulator input bytes. 

Parameters 
[in] 
[in] 
byte 
size 
The byte address of the 
head byte. 
The number of bytes to 
clear. 
Remarks 

The input bytes will be updated during the next communication cycle. 

◆ClearInBits() 

SIMUAPIFUNC 
ClearInBits ( 
SIMUAPIFUNC 
ClearInBits ( 
int * 
int * 
pByte, 
pBit, 
int count 
) 
Clear the set value of multiple simulator input bits. 

Parameters 
[in] 
pByte A pointer to an int array 
that contains the byte 
addresses of the input 
bits. The size of the 
array must be equal to 
the count parameter. 

[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the input 
bits. The size of the 
array must be equal to 
the count parameter. 

[in] 
count The number of bits to 
clear. 

Remarks 

This function is equivalent to calling the ClearInBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pByte[0], pBit[0], and pData[0] specify the first input bit to 
clear, pByte[1], pBit[1], and pData[1] specify the second input bit to clear, and so on. 
The bits can be specified in any order. 

The input bits will be updated during the next communication cycle. 

◆SetServoOnFeedback() 

◆SetServoOnFeedback() 
SIMUAPIFUNC 
SetServoOnFeedbac 
k ( 
) 
int 
axis, 
int newStatus 
Set the value of the "servo on feedback" signal of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
newStatus The new servo on status 
to set. 0: servo off, 1: 
servo on. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetAlarm() 

SIMUAPIFUNC 
SetAlarm ( 
) 
SIMUAPIFUNC 
SetAlarm ( 
) 
int 
axis, 
int alarmCode 
Set the alarm state of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
alarmCode The value of alarm code. 
0: no alarm, others: 
alarm with set alarm 
code. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetWarning() 

SIMUAPIFUNC 
SetWarning ( 
) 
SIMUAPIFUNC 
SetWarning ( 
) 
int 
axis, 
int warningCode 
Set the warning state of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
warningCode The value of warning 
code. 0: no warning, 
others: warning with set 
warning code. 
Remarks 

The signal will be updated during the next communication cycle. 

◆SetHomeSwitch() 

SIMUAPIFUNC 
SetHomeSwitch ( 
) 
SIMUAPIFUNC 
SetHomeSwitch ( 
) 
int 
axis, 
int newStatus 
Set the home switch state of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
newStatus The new home switch 
status to set. 0: home 
switch off, 1: home 
switch on. 
Remarks 

The signal will be updated during the next communication cycle. 

◆SetLimitSwitchNegative() 

SIMUAPIFUNC 
SetLimitSwitchNegat 
SIMUAPIFUNC 
SetLimitSwitchNegat 
ive ( 
) 
int 
axis, 
int newStatus 
Set the negative limit switch state of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
newStatus The new negative limit 
switch status to set. 0: 
negative limit switch off, 
1: negative limit switch 
on. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetLimitSwitchPositive() 

SIMUAPIFUNC 
SetLimitSwitchPositi 
ve ( 
) 
SIMUAPIFUNC 
SetLimitSwitchPositi 
ve ( 
) 
int 
axis, 
int newStatus 
Set the positive limit switch state of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
newStatus The new positive limit 
switch status to set. 0: 
positive limit switch off, 
1: positive limit switch 
on. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ 
SetZPulse0Detected() 


SIMUAPIFUNC 
SetZPulse0Detected ( 
) 
SIMUAPIFUNC 
SetZPulse0Detected ( 
) 
int 
int 
axis, 
latchedZPulseFeedba 
Set the "ZPulse 0 detected" signal and the latched ZPulse position feedback of a 
simulator axis. 

Parameters 
[in] 
[in] 
axis 
latchedZPulseFeedback 
The axis to set. 
The latched ZPulse 0 
position feedback to set. 
Remarks 

The signal will be updated during the next communication cycle. 

◆ 
SetZPulse1Detected() 


SIMUAPIFUNC 
SetZPulse1Detected ( 
) 
SIMUAPIFUNC 
SetZPulse1Detected ( 
) 
int 
int 
axis, 
latchedZPulseFeedba 
Set the "ZPulse 1 detected" signal and the latched ZPulse position feedback of a 
simulator axis. 

Parameters 
[in] 
[in] 
axis 
latchedZPulseFeedback 
The axis to set. 
The latched ZPulse 1 
position feedback to set. 
Remarks 

The signal will be updated during the next communication cycle. 

◆SetTouchProbe0Detected() 

SIMUAPIFUNC 
SetTouchProbe0Det 
ected ( 
) 
SIMUAPIFUNC 
SetTouchProbe0Det 
ected ( 
) 
int 
int 
axis, 
touchProbeDetectedF 
Set the "touch probe 0 detected" signal and the latched touch probe 0 position 
feedback of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
touchProbeDetectedFee The latched touch probe 
0 position feedback to 
set. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetTouchProbe1Detected() 

SIMUAPIFUNC 
SetTouchProbe1Det 
ected ( 
) 
SIMUAPIFUNC 
SetTouchProbe1Det 
ected ( 
) 
int 
int 
axis, 
touchProbeDetectedF 
Set the "touch probe 1 detected" signal and the latched touch probe 1 position 
feedback of a simulator axis. 

Parameters 
[in] 
axis The axis to set. 
[in] 
touchProbeDetectedFee The latched touch probe 
1 position feedback to 
set. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearServoOnFeedback() 
SIMUAPIFU 
NC 
ClearServoO 
nFeedback ( int axis ) 
Clear the set "servo on feedback" signal for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 


◆ClearAlarm() 
SIMUAPIFU 
NC 
ClearAlarm ( int axis ) 
Clear the set alarm state for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearWarning() 
SIMUAPIFU 
NC 
ClearWarning ( int axis ) 
Clear the set warning state for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearHomeSwitch() 

SIMUAPIFU 
NC 
ClearHomeS 
witch ( int axis ) 
SIMUAPIFU 
NC 
ClearHomeS 
witch ( int axis ) 
Clear the set home switch state for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearLimitSwitchNegative() 
SIMUAPIFU 
NC 
ClearLimitSwi 
tchNegative ( int axis ) 
Clear the set negative limit switch state for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearLimitSwitchPositive() 

SIMUAPIFU 
NC 
SIMUAPIFU 
NC 
ClearLimitSwi 
tchPositive ( 
int axis 
) 
Clear the set positive limit switch state for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearZPulse0Detected() 
SIMUAPIFU 
NC 
ClearZPulse0 
Detected ( int axis ) 
Clear the set "ZPulse 0 detected" signal for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearZPulse1Detected() 

SIMUAPIFU 
NC 
ClearZPulse1 
Detected ( int axis ) 
SIMUAPIFU 
NC 
ClearZPulse1 
Detected ( int axis ) 
Clear the set "ZPulse 1 detected" signal for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearTouchProbe0Detected() 
SIMUAPIFU 
NC 
ClearTouchPr 
obe0Detecte 
d ( int axis ) 
Clear the set "touch probe 0 detected signal" for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearTouchProbe1Detected() 

SIMUAPIFU 
NC 
ClearTouchPr 
obe1Detecte 
d ( int axis ) 
SIMUAPIFU 
NC 
ClearTouchPr 
obe1Detecte 
d ( int axis ) 
Clear the set "touch probe 1 detected signal" for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetUpdatePeriod() 
SIMUAPIFU 
NC 
SetUpdatePe 
riod ( unsigned int period ) 
Set the master info update period. 

Parameters 
[in] 
period New master info update 
period in unit ms. 
Remarks 

The default update period is 1ms. If the master info does not need to be updated so 
often, system resource use can be reduced by specifying a larger period to reduce 
the update frequency. 

◆GetMasterInfo() 

SIMUAPIFU 
NC 
GetMasterInf 
SIMUAPIFU 
NC 
GetMasterInf 
o ( 
SimuMasterIn masterInfo ) 
Read the current master information from the engine. 
Parameters 
[out] 
masterInfo A pointer to a 
SimuMasterInfo class 
that will be filled in with 
the current master 
information. 

 

wmx3Api::ecApi Namespace Reference 

This namespace contains Ec Api related functions. 

Namespaces 

constants 

This namespace contains defined 
constants used by the library. 

Classes 

class EcAoESender 
This class describes the data for AoE 
sender. More... 

class Ecat 

This class contains Ec API functions. 

More... 

class EcErrorCode 
This enumerator class enumerates the 
Ec library error codes. More... 

class EcHotconnectAbortCode 
This enumerator class enumerates the 
error codes of when hot connect has 
been aborted. More... 

class EcHotconnectState 
This enumerator class enumerates the 
hot connect states. More... 

class EcLogInput 
This class specifies the pdo to be 
collected by the EcPlatform module. 
More... 

class EcLogInputPdo 


This class specifies the info of pdo 
whose data to be collected. More... 

class EcLogOutput 
This class specifies the output datas 
collected by the EcPlatform module. 
More... 

class EcLogOutputData 
This class defines the output datas in 
one cycle. More... 

class EcLogOutputPdo 

This class defines log output of one pdo. 

More... 

class EcMasterInfo 
This class describes the Master 
information. More... 

class EcMasterInfoList 
This class describes the Master 
information list. More... 

class EcMasterMode 
This enumerator class enumerates the 
master operation modes. More... 

class EcMasterStatisticsInfo 
This class describes the Master statistics 
information. More... 

class EcObjectDescriptionListType 
This enumerator class enumerates the 
OD (Object Description) list types. 
More... 

class EcOperationMode 
This enumerator class enumerates the 
servo slave operation modes. More... 

class EcSdoType 
This enumerator class enumerates the 
SDO types. More... 


class EcSlaveAxisInfo 
This class describes the axis information 
in Slave. More... 
class EcSlaveInfo 
This class describes the Slave 
information. More... 
class EcSlavePdo 
This class describes the Slave PDO 
data. More... 
class EcSlavePdoInfo 
This class describes the various PDO 
information in Slave. More... 
class EcSlaveSdoInfoEntryDescription 
This class describes the Entry 
Description in ED list. More... 
class EcSlaveSdoInfoEntryDescriptionList 
This class describes the Entry 
Description List. More... 
class EcSlaveSdoInfoObjectDescription 
This class describes the Object 
Description in OD list. More... 
class EcSlaveSdoInfoObjectDescriptionList 
This class describes the Object 
Description List. More... 
class EcStateMachine 
EcSlaveAxisInfo 
This class describes the axis information 
in Slave. More... 
class EcSlaveInfo 
This class describes the Slave 
information. More... 
class EcSlavePdo 
This class describes the Slave PDO 
data. More... 
class EcSlavePdoInfo 
This class describes the various PDO 
information in Slave. More... 
class EcSlaveSdoInfoEntryDescription 
This class describes the Entry 
Description in ED list. More... 
class EcSlaveSdoInfoEntryDescriptionList 
This class describes the Entry 
Description List. More... 
class EcSlaveSdoInfoObjectDescription 
This class describes the Object 
Description in OD list. More... 
class EcSlaveSdoInfoObjectDescriptionList 
This class describes the Object 
Description List. More... 
class EcStateMachine 
This enumerator class enumerates the 
Master or Slave states. More... 
Typedefs 
typedef int(* EcSdoDownloadCallBack) (int result, int 
masterid, int slaveid, int index, int 
subindex, EcSdoType::T sdoType, int len, 
unsigned char *data, unsigned int 


errorCode) 

Callback function for the SdoDownload 
function. More... 

typedef int(* EcSdoUploadCallBack) (int result, int 
masterid, int slaveid, int index, int 
subindex, EcSdoType::T sdoType, int len, 
unsigned char *data, unsigned int 
errorCode) 
Callback function for the SdoUpload 
function. More... 

typedef int(* EcRegisterWriteCallBack) (int result, int 
masterid, int slaveid, int off, int len, 
unsigned char *data) 
Callback function for the RegisterWrite 
function. More... 

typedef int(* EcRegisterReadCallBack) (int result, int 
masterid, int slaveid, int off, int len, 
unsigned char *data) 
Callback function for the RegisterRead 
function. More... 

typedef int(* EcRegisterBroadcastWriteCallBack) (int 
result, int masterid, int off, int len, 
unsigned char *data, int wkc) 
Callback function for the 
RegisterBroadcastWrite function. 
More... 

typedef int(* EcRegisterBroadcastReadCallBack) (int 
result, int masterid, int off, int len, 
unsigned char *data, int wkc) 
Callback function for the 
RegisterBroadcastRead function. 
More... 

typedef int(* EcSdoInfoGetODListCallBack) (int 
result, int masterid, int slaveid, 
EcObjectDescriptionListType::T type, 


EcSlaveSdoInfoObjectDescriptionList 

*list) 

Callback function for the 
GetSdoInfoODList function. More... 

typedef int(* EcSdoInfoGetEDListCallBack) (int 
result, int masterid, int slaveid, int index, 
EcSlaveSdoInfoEntryDescriptionList 
*list) 
Callback function for the 
GetSdoInfoEDList function. More... 
typedef int(* EcFoEReadCallBack) (int result, int 
masterid, int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
unsigned int errorCode) 
Callback function for the FoERead 
function. More... 
typedef int(* EcFoEWriteCallBack) (int result, int 
masterid, int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
unsigned int errorCode) 
Callback function for the FoEWrite 
function. More... 

typedef int(* EcSIIWriteCallBack) (int result, int 
masterid, int slaveid, int addr, int len, 
unsigned char *data) 
Callback function for the SIIWrite 
function. More... 

typedef int(* EcSIIReadCallBack) (int result, int 
masterid, int slaveid, int addr, int len, 
unsigned char *data) 
Callback function for the SIIRead 
function. More... 

typedef int(* EcAoEReadCallBack) (int result, int 
masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 


typedef int(* 

typedef int(* 

typedef int(* 

unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int 
indexGroup, unsigned int indexOffset, 
unsigned int readLength, unsigned char 
*aoeBuff, unsigned int errorCode) 

Callback function for the AoERead 

function. More... 
EcAoEWriteCallBack) (int result, int 
masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int 
indexGroup, unsigned int indexOffset, 
unsigned int writeLength, unsigned char 
*aoeData, unsigned int errorCode) 

Callback function for the AoEWrite 

function. More... 
EcAoEWriteControlCallBack) (int result, 
int masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned char senderNetId[6], unsigned 
short senderPort, unsigned short 
aoeState, unsigned short deviceState, 
unsigned int writeLength, unsigned char 
*aoeData, unsigned int errorCode) 

Callback function for the 

AoEWriteControl function. More... 
EcSoEReadCallBack) (int result, int 
masterid, int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, unsigned int buffSize, 
unsigned char *readSoEBuffer, unsigned 
int errorCode) 

Callback function for the SoERead 
function. More... 


typedef int(* EcSoEWriteCallBack) (int result, int 
masterid, int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, unsigned int dataSize, 
unsigned char *writeSoEData, unsigned 
int errorCode) 
Callback function for the SoEWrite 
function. More... 

typedef int(* EcVoEReadCallBack) (int result, int 
masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, 
unsigned int readDataSize, unsigned char 
*readVoEBuffer) 
Callback function for the VoERead 
function. More... 

typedef int(* EcVoEWriteCallBack) (int result, int 
masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, 
unsigned int writeDataSize, unsigned char 
*writeAoEData) 
Callback function for the VoEWrite 
function. More... 

Typedef Documentation 

◆EcSdoDownloadCallBack

int subierrorCode) 
int subierrorCode) 
len, unsigned char *data, unsigned int 
typedef int(* EcSdoDownloadCallBack) (int result, int masterid, int slaveid, int index, 
ndex, EcSdoType::T sdoType, int 
Callback function for the SdoDownload function. 
Parameters 
[in] 
result Error code of the 
executed SdoDownload 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO Type. 
[in] 
len SDO length. 
[in] 
data Downloaded SDO data. 
[in] 
errorCode SDO error code. 

◆EcSdoUploadCallBack

errorCode) errorCode) 
typedef int(* EcSdoUploadCallBack) (int result, int masterid, int slaveid, int index, int 
subindex, EcSdoType::T int len, unsigned char *data, unsigned int sdoType, 


Callback function for the SdoUpload function. 
Parameters 
[in] 
result Error code of the 
executed SdoUpload 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO Type. 
[in] 
len SDO length. 
[in] 
data Uploaded SDO data. 
[in] 
errorCode SDO error code. 
◆ 
EcRegisterWriteCallBack 



typedef int(* EcRegisterWriteCallBack) (int result, int masterid, int slaveid, int off, int 
len, unsigned char *data) 
typedef int(* EcRegisterWriteCallBack) (int result, int masterid, int slaveid, int off, int 
len, unsigned char *data) 
Callback function for the RegisterWrite function. 

Parameters 
[in] 
result Error code of the 
executed RegisterWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
off Register offset. 
[in] 
len Register length. 
[in] 
data Register data. 

◆EcRegisterReadCallBacktypedef int(* EcRegisterReadCallBack) (int result, int masterid, int slaveid, int off, int 
len, unsigned char *data) 
Callback function for the RegisterRead function. 

Parameters 
[in] 
result Error code of the 
executed RegisterRead 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
off Register offset. 
[in] 
len Register length. 
[in] 
data Register data. 


◆EcRegisterBroadcastWriteCallBacktypedef int(* EcRegisterBroadcastWriteCallBack) (int result, int masterid, int off, int len, 
unsigned char *data, int wkc) 
Callback function for the RegisterBroadcastWrite function. 

Parameters 
[in] 
result Error code of the 
executed 
RegisterBroadcastWrit 
e function. 
[in] 
masterid Master ID. 
[in] 
off Register offset. 
[in] 
len Register length. 
[in] 
data Register data. 
[in] 
wkc Broadcast working 
count. 

◆EcRegisterBroadcastReadCallBack

typedef int(* EcRegisterBroadcastReadCallBack) (int result, int masterid, int off, int len, 
unsigned char *data, int wkc) 
typedef int(* EcRegisterBroadcastReadCallBack) (int result, int masterid, int off, int len, 
unsigned char *data, int wkc) 
Callback function for the RegisterBroadcastRead function. 

Parameters 
[in] 
result Error code of the 
executed 
RegisterBroadcastRea 
d function. 
[in] 
masterid Master ID. 
[in] 
off Register offset. 
[in] 
len Register length. 
[in] 
data Register data. 
[in] 
wkc Broadcast working 
count. 

◆EcSdoInfoGetODListCallBack

typedef int(* EcSdoInfoGetODListCallBack) (int result, int masterid, int slaveid, typedef int(* EcSdoInfoGetODListCallBack) (int result, int masterid, int slaveid, 
EcObjectDescriptionListType::T type, EcSlaveSdoInfoObjectDescriptionList *list) 
Callback function for the GetSdoInfoODList function. 

Parameters 
[in] 
result Error code of the 
executed 
GetSdoInfoODList 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
type OD list type. 
[in] 
list Obtained OD list. 

◆EcSdoInfoGetEDListCallBacktypedef int(* EcSdoInfoGetEDListCallBack) (int result, int masterid, int slaveid, int 
index, EcSlaveSdoInfoEntryDescriptionList *list) 
Callback function for the GetSdoInfoEDList function. 

Parameters 
[in] 
result Error code of the 
executed 
GetSdoInfoEDList 
function. 
[in] 
masterid Master ID. 
[in] 
slaveid Slave ID. 
[in] 
index OD index from which ED 
list was got. 
[in] 
list Obtained ED list. 


◆EcFoEReadCallBacktypedef int(* EcFoEReadCallBack) (int result, int masterid, int slaveId, wchar_t 
*filePath, char *fileName, unsigned int password, unsigned int errorCode) 
Callback function for the FoERead function. 
Parameters 
[in] 
result Error code of the 
executed FoERead 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
errorCode FoE error code. 
◆ 
EcFoEWriteCallBack 



typedef int(* EcFoEWriteCallBack) (int result, int masterid, int slaveId, wchar_t 
*filePath, char *fileName, unsigned int password, unsigned int errorCode) 
typedef int(* EcFoEWriteCallBack) (int result, int masterid, int slaveId, wchar_t 
*filePath, char *fileName, unsigned int password, unsigned int errorCode) 
Callback function for the FoEWrite function. 

Parameters 
[in] 
result Error code of the 
executed FoEWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
errorCode FoE error code. 

◆EcSIIWriteCallBack

typedef int(* EcSIIWriteCallBack) (int result, int masterid, int slaveid, int addr, int len, 
unsigned char *data) 
typedef int(* EcSIIWriteCallBack) (int result, int masterid, int slaveid, int addr, int len, 
unsigned char *data) 
Callback function for the SIIWrite function. 
Parameters 
[in] 
result Error code of the 
executed SIIWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
addr SII EEPROM written 
address. 
[in] 
len SII EEPROM written 
length. 
[in] 
data SII EEPROM written 
data. 

◆EcSIIReadCallBack

nt len, 

typedef int(* EcSIIReadCallBack) (int result, int masterid, 
unsigned char *data) 
int slaveid, int addr, i 

Callback function for the SIIRead function. 

Parameters 
[in] 
result Error code of the 
executed SIIRead 

function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
addr SII EEPROM read 

address. 
[in] 
len SII EEPROM read 
length. 
[in] 
data SII EEPROM read data. 


◆EcAoEReadCallBack

typedef int(* EcAoEReadCallBack) (int result, int masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int 
typedef int(* EcAoEReadCallBack) (int result, int masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int 
readLength, unsigned char *aoeBuff, unsigned int errorCode) 
Callback function for the AoERead function. 
Parameters 
[in] 
result Error code of the 
executed AoERead 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
senderNetId Sender NetId. 
[in] 
senderPort Sender port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
readLength Length of read AoE data. 
[in] 
aoeBuff Read AoE data. 
[in] 
errorCode AoE error code. 

◆EcAoEWriteCallBack

typedef int(* EcAoEWriteCallBack) (int result, int masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int 
typedef int(* EcAoEWriteCallBack) (int result, int masterid, int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], unsigned 
short senderPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int 
writeLength, unsigned char *aoeData, unsigned int errorCode) 
Callback function for the AoEWrite function. 
Parameters 
[in] 
result Error code of the 
executed AoEWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
senderNetId Sender NetId. 
[in] 
senderPort Sender port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
writeLength Length of written AoE 
data. 
[in] 
aoeData Written AoE data. 
[in] 
errorCode AoE error code. 

◆EcAoEWriteControlCallBack

typedef int(* EcAoEWriteControlCallBack) (int result, int masterid, int slaveId, unsigned 
char targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], 
unsigned short senderPort, unsigned short aoeState, unsigned short deviceState, 
typedef int(* EcAoEWriteControlCallBack) (int result, int masterid, int slaveId, unsigned 
char targetNetId[6], unsigned short targetPort, unsigned char senderNetId[6], 
unsigned short senderPort, unsigned short aoeState, unsigned short deviceState, 
unsigned int writeLength, unsigned char *aoeData, unsigned int errorCode) 
Callback function for the AoEWriteControl function. 
Parameters 
[in] 
result Error code of the 
executed 
AoEWriteControl 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
senderNetId Sender NetId. 
[in] 
senderPort Sender port. 
[in] 
aoeState AoE state. 
[in] 
deviceState Device state. 
[in] 
writeLength Length of written AoE 
control data. 
[in] 
aoeData Written AoE control data. 
[in] 
errorCode AoE error code. 

◆EcSoEReadCallBack

typedef int(* EcSoEReadCallBack) (int result, int masterid, int slaveId, unsigned char typedef int(* EcSoEReadCallBack) (int result, int masterid, int slaveId, unsigned char 
driveNo, unsigned char elementFlags, unsigned short idn, unsigned int buffSize, 
unsigned char *readSoEBuffer, unsigned int errorCode) 
Callback function for the SoERead function. 
Parameters 
[in] 
result Error code of the 
executed SoERead 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
buffSize Length of read SoE data. 
[in] 
readSoEBuffer Read SoE data. 
[in] 
errorCode SoE error code. 

◆EcSoEWriteCallBack

typedef int(* EcSoEWriteCallBack) (int result, int masterid, int slaveId, unsigned char typedef int(* EcSoEWriteCallBack) (int result, int masterid, int slaveId, unsigned char 
driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, 
unsigned char *writeSoEData, unsigned int errorCode) 
Callback function for the SoEWrite function. 
Parameters 
[in] 
result Error code of the 
executed SoEWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
dataSize Length of written SoE 
data. 
[in] 
writeSoEData Written SoE data. 
[in] 
errorCode SoE error code. 

◆EcVoEReadCallBack

typedef int(* EcVoEReadCallBack) (int result, int masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, unsigned int readDataSize, unsigned char 
*readVoEBuffer) 
typedef int(* EcVoEReadCallBack) (int result, int masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, unsigned int readDataSize, unsigned char 
*readVoEBuffer) 
Callback function for the VoERead function. 
Parameters 
[in] 
result Error code of the 
executed VoERead 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
vendorId Vendor ID. 
[in] 
vendorType Vendor type. 
[in] 
readDataSize Length of read VoE data. 
[in] 
readVoEBuffer Read VoE data. 
◆ 
EcVoEWriteCallBack 



typedef int(* EcVoEWriteCallBack) (int result, int masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, unsigned int writeDataSize, unsigned char 
*writeAoEData) 
typedef int(* EcVoEWriteCallBack) (int result, int masterid, int slaveId, unsigned int 
vendorId, unsigned short vendorType, unsigned int writeDataSize, unsigned char 
*writeAoEData) 
Callback function for the VoEWrite function. 
Parameters 
[in] 
result Error code of the 
executed VoEWrite 
function. 
[in] 
masterid Master ID. 
[in] 
slaveId Slave ID. 
[in] 
vendorId Vendor ID. 
[in] 
vendorType Vendor type. 
[in] 
writeDataSize Length of written VoE 
data. 
[in] 
writeAoEData Written VoE data. 

 

wmx3Api::ecApi::constants Namespace Reference 

This namespace contains defined constants used by the library. 

Variables 

static const int maxMasters = 2 
The maximum number of masters that 
are held by EcMasterInfoList. 
static const int maxSlaves = 256 
The maximum number of slaves that are 
held by MasterInfo. 
static const int maxSlaveAxes = 16 
The maximum number of axes that are 
held by SlaveInfo. 
static const int maxEniFilePathLen = 256 
The maximum number of characters that 
are used to specify the ENI file path. 
static const int maxFoEFilePathLen = 256 
The maximum number of characters that 
are used to specify the FoE file path. 
static const int maxFoEFileNameLen = 64 
The maximum number of characters that 
are used to specify the FoE name. 
static const int maxSdoInfoNameLen = 64 
The maximum number of characters that 
are used to specify the OD (Object 
Description) name in SDO info. 
static const int maxSdoInfoODListSize = 450 
The maximum size of the OD (Object 
Description) list. 
static const int maxSdoInfoEDListSize = 256 


The maximum size of the ED (Entry 
Description) list. 

static const int 
static const int 
static const int 
maxLogPdoSize = 256 
The maximum size of the pdo size which 
could be logged. 
maxLogPdoDataSize = 8 
The maximum size of the pdo data size 
which could be logged. 
maxMappedRxPdo = 128 
TODO: 
static const int maxMappedTxPdo = 128 
TODO: 

 

Ecat Class Reference 

This class contains Ec API functions. 

Public Member Functions 

Ecat (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

Ecat (const Ecat &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators. 

Ecat & operator= (const Ecat &src) 
Copy assignment operator to initialize an 
object of this class based on an existing 
object of this class. Also see Copy 
Operators. 

Ecat () 

Constructor to initialize an object of this 
class with a self device. Also see Self 
Devices. 

Ecat (DeviceType::T type) 

Constructor to initialize an object of this 
class with a self device of the specified 
device type. Also see Self Devices. 

~Ecat () 

Destructor for this class. 

bool IsDeviceValid () 

Return TRUE if this class object has 


access to a device, and FALSE 
otherwise. A device is required to 
execute most functions in this class. If 
this function returns FALSE, a device 
can be created by calling the 
CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

ECAPIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

ECAPIFUNC ScanNetwork () 
Scan the network topology. More... 
ECAPIFUNC ScanNetwork (int masterId) 
Scan the network topology. More... 
ECAPIFUNC ChangeSlaveState (int slaveId, 
EcStateMachine::T state, int *errorCode) 
Change the specified slave state. More... 

ECAPIFUNC ChangeSlaveState (int masterId, int 
slaveId, EcStateMachine::T state, int 
*errorCode) 
Change the specified slave state. More... 

ECAPIFUNC StartHotconnect () 
ECAPIFUNC 
ECAPIFUNC 
ECAPIFUNC 
Start hot connect. More... 
StartHotconnect (int masterId) 
Start hot connect. More... 
ResetRefClockInfo () 
Reset the reference clock information. 
More... 
ResetRefClockInfo (int masterId) 
Reset the reference clock information. 


More... 

ECAPIFUNC ResetTransmitStatisticsInfo () 
Reset the transmission statistics 
information. More... 

ECAPIFUNC ResetTransmitStatisticsInfo (int 
masterId) 

Reset the transmission statistics 
information. More... 

ECAPIFUNC SetUpdatePeriod (unsigned int period) 
Set the master info update period. 
More... 
ECAPIFUNC GetMasterInfo (EcMasterInfo *master) 
Read the current master information from 
the engine. More... 
ECAPIFUNC GetMasterInfo (int masterId, 
EcMasterInfo *master) 
Read the specified master information 
from the engine. More... 

ECAPIFUNC GetMasterInfoList (EcMasterInfoList 
*masters) 

Read the master list information from the 
engine. More... 

ECAPIFUNC GetEniFilePath (int slaveId, char *path, 

int len) 

Get the ENI file path for specified slave. 

More... 

ECAPIFUNC GetEniFilePath (int slaveId, wchar_t 

*path, int len) 

Get the ENI file path for specified slave. 

More... 

ECAPIFUNC GetEniFilePath (int masterId, int slaveId, 

char *path, int len) 

Get the ENI file path for specified slave. 

More... 


ECAPIFUNC GetEniFilePath (int masterId, int slaveId, 

wchar_t *path, int len) 

Get the ENI file path for specified slave. 

More... 

ECAPIFUNC SetEniFilePath (int slaveId, char *path, 

unsigned char oneshot=1) 

Set the ENI file path for specified slave. 

More... 

ECAPIFUNC SetEniFilePath (int slaveId, wchar_t 

*path, unsigned char oneshot=1) 

Set the ENI file path for specified slave. 

More... 

ECAPIFUNC SetEniFilePath (int masterId, int slaveId, 

char *path, unsigned char oneshot=1) 

Set the ENI file path for specified slave. 

More... 

ECAPIFUNC SetEniFilePath (int masterId, int slaveId, 

wchar_t *path, unsigned char oneshot=1) 

Set the ENI file path for specified slave. 

More... 

ECAPIFUNC RegisterWrite (int slaveId, int regAddr, int 
len, unsigned char *data) 

Write data to the specified slave register 
address. More... 

ECAPIFUNC RegisterWrite (int masterId, int slaveId, 
int regAddr, int len, unsigned char *data) 

Write data to the specified slave register 
address. More... 

ECAPIFUNC RegisterRead (int slaveId, int regAddr, int 
len, unsigned char *buff) 

Read data from the specified slave 
register address. More... 

ECAPIFUNC RegisterRead (int masterId, int slaveId, 


int regAddr, int len, unsigned char *buff) 

Read data from the specified slave 
register address. More... 

ECAPIFUNC RegisterWrite (int slaveId, int regAddr, int 
len, unsigned char *data, 
EcRegisterWriteCallBack callbackFunc, 
unsigned int waitTime) 
Write data to the specified slave register 
address. More... 

ECAPIFUNC RegisterWrite (int masterId, int slaveId, 
int regAddr, int len, unsigned char *data, 
EcRegisterWriteCallBack callbackFunc, 
unsigned int waitTime) 
Write data to the specified slave register 
address. More... 

ECAPIFUNC RegisterRead (int slaveId, int regAddr, int 
len, EcRegisterReadCallBack 
callbackFunc, unsigned int waitTime) 

Read data from the specified slave 
register address. More... 

ECAPIFUNC RegisterRead (int masterId, int slaveId, 
int regAddr, int len, 
EcRegisterReadCallBack callbackFunc, 
unsigned int waitTime) 
Read data from the specified slave 
register address. More... 

ECAPIFUNC RegisterBroadcastWrite (int regAddr, int 
len, unsigned char *data, unsigned short 
*wkc) 
Broadcast write data to all slaves' 
register addresses. More... 

ECAPIFUNC RegisterBroadcastWrite (int masterId, int 
regAddr, int len, unsigned char *data, 
unsigned short *wkc) 
Broadcast write data to all slaves' 


register addresses. More... 

ECAPIFUNC RegisterBroadcastRead (int regAddr, int 
len, unsigned char *buff, unsigned short 
*wkc) 
Broadcast read data from all slaves' 
register addresses. More... 

ECAPIFUNC RegisterBroadcastRead (int masterId, int 
regAddr, int len, unsigned char *buff, 
unsigned short *wkc) 
Broadcast read data from all slaves' 
register addresses. More... 

ECAPIFUNC RegisterBroadcastWrite (int regAddr, int 
len, unsigned char *data, 
EcRegisterBroadcastWriteCallBack 
callbackFunc, unsigned int waitTime) 
Broadcast write data to all slaves' 
register addresses. More... 
ECAPIFUNC RegisterBroadcastWrite (int masterId, int 
regAddr, int len, unsigned char *data, 
EcRegisterBroadcastWriteCallBack 
callbackFunc, unsigned int waitTime) 
Broadcast write data to all slaves' 
register addresses. More... 
ECAPIFUNC RegisterBroadcastRead (int regAddr, int 
len, EcRegisterBroadcastReadCallBack 
callbackFunc, unsigned int waitTime) 
Broadcast read data from all slaves' 
register addresses. More... 
ECAPIFUNC RegisterBroadcastRead (int masterId, int 
regAddr, int len, 
EcRegisterBroadcastReadCallBack 
callbackFunc, unsigned int waitTime) 
Broadcast read data from all slaves' 
register addresses. More... 


ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, 


EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 
sdoType, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 


sdoType, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 

Upload data from the specified slave 
SDO. More... 

ECAPIFUNC GetSdoInfoODList (int slaveId, 
EcObjectDescriptionListType::T type, 
EcSlaveSdoInfoObjectDescriptionList 
*list) 
Get the OD list from the specified slave. 
More... 

ECAPIFUNC GetSdoInfoODList (int masterId, int 
slaveId, 
EcObjectDescriptionListType::T type, 
EcSlaveSdoInfoObjectDescriptionList 
*list) 
Get the OD list from the specified slave. 
More... 

ECAPIFUNC GetSdoInfoEDList (int slaveId, int index, 
EcSlaveSdoInfoEntryDescriptionList 

*list) 

Get the ED list from the specified slave's 
OD index. More... 

ECAPIFUNC GetSdoInfoEDList (int masterId, int 
slaveId, int index, 

EcSlaveSdoInfoEntryDescriptionList 

*list) 

Get the ED list from the specified slave's 
OD index. More... 

ECAPIFUNC GetSdoInfoODList (int slaveId, 
EcObjectDescriptionListType::T type, 
EcSdoInfoGetODListCallBack 
callbackFunc, unsigned int waitTime) 
Get the OD list from the specified slave. 
More... 


ECAPIFUNC GetSdoInfoODList (int masterId, int 
slaveId, 
EcObjectDescriptionListType::T type, 
EcSdoInfoGetODListCallBack 
callbackFunc, unsigned int waitTime) 
Get the OD list from the specified slave. 
More... 

ECAPIFUNC GetSdoInfoEDList (int slaveId, int index, 
EcSdoInfoGetEDListCallBack 

callbackFunc, unsigned int waitTime) 

Get the ED list from the specified slave's 
OD index. More... 

ECAPIFUNC GetSdoInfoEDList (int masterId, int 
slaveId, int index, 

EcSdoInfoGetEDListCallBack 

callbackFunc, unsigned int waitTime) 

Get the ED list from the specified slave's 
OD index. More... 

ECAPIFUNC TxPdoWrite (int slaveId, int index, int 
subindex, int pdoDataSize, unsigned char 
*pdoData, unsigned int mask=0) 
Write data to the specified slave's Tx 
PDO. More... 

ECAPIFUNC TxPdoWrite (int masterId, int slaveId, int 
index, int subindex, int pdoDataSize, 
unsigned char *pdoData, unsigned int 
mask=0) 

Write data to the specified slave's Tx 
PDO. More... 

ECAPIFUNC ClearTxPdoWrite (int slaveId, int index, 
int subindex) 

Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC ClearTxPdoWrite (int masterId, int 


slaveId, int index, int subindex) 

Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC PdoRead (int slaveId, int index, int 
subindex, int pdoBuffSize, unsigned char 
*pdoBuff, unsigned int *actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 
ECAPIFUNC PdoRead (int masterId, int slaveId, int 
index, int subindex, int pdoBuffSize, 
unsigned char *pdoBuff, unsigned int 
*actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 

ECAPIFUNC SetOutputBit (int slaveId, int byte, int bit, 

unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputBit (int masterId, int slaveId, int 

byte, int bit, unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputByte (int slaveId, int byte, 
unsigned char data) 

Set the value of an output byte for a 
slave. More... 

ECAPIFUNC SetOutputByte (int masterId, int slaveId, 
int byte, unsigned char data) 

Set the value of an output byte for a 
slave. More... 

ECAPIFUNC SetOutputBytes (int slaveId, int byte, int 
size, unsigned char *pData) 

Set the value of multiple output bytes for 
a slave. More... 

ECAPIFUNC SetOutputBytes (int masterId, int slaveId, 


int byte, int size, unsigned char *pData) 

Set the value of multiple output bytes for 
a slave. More... 

ECAPIFUNC SetOutputBits (int slaveId, int *pByte, int 
*pBit, unsigned char *pData, int count) 

Set the value of multiple output bits for a 
slave. More... 

ECAPIFUNC SetOutputBits (int masterId, int slaveId, 
int *pByte, int *pBit, unsigned char *pData, 
int count) 
Set the value of multiple output bits for a 
slave. More... 

ECAPIFUNC GetInputBit (int slaveId, int byte, int bit, 

unsigned char *pData) 

Get the value of an input bit from a slave. 

More... 

ECAPIFUNC GetInputBit (int masterId, int slaveId, int 

byte, int bit, unsigned char *pData) 

Get the value of an input bit from a slave. 

More... 

ECAPIFUNC GetInputByte (int slaveId, int byte, 
unsigned char *pData) 

Get the value of an input byte from a 
slave. More... 

ECAPIFUNC GetInputByte (int masterId, int slaveId, int 
byte, unsigned char *pData) 

Get the value of an input byte from a 
slave. More... 

ECAPIFUNC GetInputBytes (int slaveId, int byte, int 
size, unsigned char *pData) 

Get the value of multiple input bytes from 
a slave. More... 

ECAPIFUNC GetInputBytes (int masterId, int slaveId, 
int byte, int size, unsigned char *pData) 


Get the value of multiple input bytes from 
a slave. More... 

ECAPIFUNC GetOutputBit (int slaveId, int byte, int bit, 
unsigned char *pData) 

Get the value of an output bit from a 
slave. More... 

ECAPIFUNC GetOutputBit (int masterId, int slaveId, int 
byte, int bit, unsigned char *pData) 

Get the value of an output bit from a 
slave. More... 

ECAPIFUNC GetOutputByte (int slaveId, int byte, 
unsigned char *pData) 

Get the value of an output byte from a 
slave. More... 

ECAPIFUNC GetOutputByte (int masterId, int slaveId, 
int byte, unsigned char *pData) 

Get the value of an output byte from a 
slave. More... 

ECAPIFUNC GetOutputBytes (int slaveId, int byte, int 
size, unsigned char *pData) 

Get the value of multiple output bytes 
from a slave. More... 

ECAPIFUNC GetOutputBytes (int masterId, int slaveId, 
int byte, int size, unsigned char *pData) 

Get the value of multiple output bytes 
from a slave. More... 

ECAPIFUNC FoERead (int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
unsigned int *errCode) 
Read FoE data from the specified slave. 
More... 

ECAPIFUNC FoERead (int masterId, int slaveId, 
wchar_t *filePath, char *fileName, 
unsigned int password, unsigned int 


*errCode) 

Read FoE data from the specified slave. 

More... 

ECAPIFUNC FoEWrite (int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
unsigned int *errCode) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC FoEWrite (int masterId, int slaveId, 
wchar_t *filePath, char *fileName, 
unsigned int password, unsigned int 
*errCode) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC FoERead (int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime) 
Read FoE data from the specified slave. 
More... 

ECAPIFUNC FoERead (int masterId, int slaveId, 
wchar_t *filePath, char *fileName, 
unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime) 

Read FoE data from the specified slave. 

More... 

ECAPIFUNC FoEWrite (int slaveId, wchar_t *filePath, 
char *fileName, unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC FoEWrite (int masterId, int slaveId, 
wchar_t *filePath, char *fileName, 


unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime) 

Write FoE data to the specified slave. 

More... 

ECAPIFUNC FoERead (int slaveId, char *filePath, char 
*fileName, unsigned int password, 
unsigned int *errCode) 

Read FoE data from the specified slave. 

More... 

ECAPIFUNC FoERead (int masterId, int slaveId, char 
*filePath, char *fileName, unsigned int 
password, unsigned int *errCode) 
Read FoE data from the specified slave. 
More... 

ECAPIFUNC FoEWrite (int slaveId, char *filePath, char 
*fileName, unsigned int password, 
unsigned int *errCode) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC FoEWrite (int masterId, int slaveId, char 
*filePath, char *fileName, unsigned int 
password, unsigned int *errCode) 
Write FoE data to the specified slave. 
More... 
ECAPIFUNC FoERead (int slaveId, char *filePath, char 
*fileName, unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime) 
Read FoE data from the specified slave. 
More... 
ECAPIFUNC FoERead (int masterId, int slaveId, char 
*filePath, char *fileName, unsigned int 
password, EcFoEReadCallBack 
callbackFunc, unsigned int waitTime) 


Read FoE data from the specified slave. 

More... 

ECAPIFUNC FoEWrite (int slaveId, char *filePath, char 
*fileName, unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC FoEWrite (int masterId, int slaveId, char 
*filePath, char *fileName, unsigned int 
password, EcFoEWriteCallBack 
callbackFunc, unsigned int waitTime) 
Write FoE data to the specified slave. 
More... 

ECAPIFUNC SIIWrite (int slaveId, int siiAddr, int len, 
unsigned char *data, bool 
checkSum=false) 
Write data to the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIWrite (int masterId, int slaveId, int 
siiAddr, int len, unsigned char *data, bool 
checkSum=false) 
Write data to the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIRead (int slaveId, int siiAddr, int len, 
unsigned char *buff) 

Read data from the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIRead (int masterId, int slaveId, int 
siiAddr, int len, unsigned char *buff) 

Read data from the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIWrite (int slaveId, int siiAddr, int len, 
unsigned char *data, EcSIIWriteCallBack 
callbackFunc, unsigned int waitTime, bool 


checkSum=false) 

Write data to the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIWrite (int masterId, int slaveId, int 
siiAddr, int len, unsigned char *data, 
EcSIIWriteCallBack callbackFunc, 
unsigned int waitTime, bool 
checkSum=false) 
Write data to the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIRead (int slaveId, int siiAddr, int len, 
EcSIIReadCallBack callbackFunc, 
unsigned int waitTime) 
Read data from the specified slave's SII 
EEPROM. More... 

ECAPIFUNC SIIRead (int masterId, int slaveId, int 
siiAddr, int len, EcSIIReadCallBack 
callbackFunc, unsigned int waitTime) 
Read data from the specified slave's SII 
EEPROM. More... 

ECAPIFUNC AoERead (int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned int indexGroup, unsigned int 
indexOffset, unsigned int readLength, 
unsigned char *readAoEBuff, unsigned int 
*errCode, unsigned int waitTime=0, 
EcAoESender *sender=NULL) 

Read AoE data from the specified slave. 

More... 

ECAPIFUNC AoERead (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, unsigned char *readAoEBuff, 
unsigned int *errCode, unsigned int 


waitTime=0, EcAoESender 
*sender=NULL) 

Read AoE data from the specified slave. 

More... 

ECAPIFUNC AoEWrite (int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned int indexGroup, unsigned int 
indexOffset, unsigned int writeLength, 
unsigned char *writeAoEData, unsigned 
int *errCode, unsigned int waitTime=0, 
EcAoESender *sender=NULL) 

Write AoE data to the specified slave. 

More... 

ECAPIFUNC AoEWrite (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
writeLength, unsigned char 
*writeAoEData, unsigned int *errCode, 
unsigned int waitTime=0, EcAoESender 
*sender=NULL) 

Write AoE data to the specified slave. 

More... 

ECAPIFUNC AoEWriteControl (int slaveId, unsigned 
char targetNetId[6], unsigned short 
targetPort, unsigned short aoeState, 
unsigned short deviceState, unsigned int 
writeLength, unsigned char 
*writeAoEData, unsigned int *errCode, 
unsigned int waitTime=0, EcAoESender 
*sender=NULL) 

Write AoE control data to the specified 
slave. More... 

ECAPIFUNC AoEWriteControl (int masterId, int 
slaveId, unsigned char targetNetId[6], 


ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

unsigned short targetPort, unsigned short 
aoeState, unsigned short deviceState, 
unsigned int writeLength, unsigned char 
*writeAoEData, unsigned int *errCode, 
unsigned int waitTime=0, EcAoESender 
*sender=NULL) 

Write AoE control data to the specified 

slave. More... 
AoEReadWrite (int slaveId, unsigned 
char targetNetId[6], unsigned short 
targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, unsigned char *readAoEBuff, 
unsigned int writeLength, unsigned char 
*writeAoEData, unsigned int *errCode, 
unsigned int waitTime=0, EcAoESender 
*sender=NULL) 

Read and write AoE data from and to the 

specified slave. More... 
AoEReadWrite (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, unsigned char *readAoEBuff, 
unsigned int writeLength, unsigned char 
*writeAoEData, unsigned int *errCode, 
unsigned int waitTime=0, EcAoESender 
*sender=NULL) 

Read and write AoE data from and to the 

specified slave. More... 
AoERead (int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned int indexGroup, unsigned int 
indexOffset, unsigned int readLength, 
EcAoEReadCallBack callbackFunc, 
unsigned int waitTime, EcAoESender 


ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

*sender=NULL) 

Read AoE data from the specified slave. 

More... 

AoERead (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, EcAoEReadCallBack 
callbackFunc, unsigned int waitTime, 
EcAoESender *sender=NULL) 

Read AoE data from the specified slave. 

More... 
AoEWrite (int slaveId, unsigned char 
targetNetId[6], unsigned short targetPort, 
unsigned int indexGroup, unsigned int 
indexOffset, unsigned int writeLength, 
unsigned char *writeAoEData, 
EcAoEWriteCallBack callbackFunc, 
unsigned int waitTime, EcAoESender 
*sender=NULL) 

Write AoE data to the specified slave. 

More... 
AoEWrite (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
writeLength, unsigned char 
*writeAoEData, EcAoEWriteCallBack 
callbackFunc, unsigned int waitTime, 
EcAoESender *sender=NULL) 

Write AoE data to the specified slave. 

More... 
AoEWriteControl (int slaveId, unsigned 
char targetNetId[6], unsigned short 
targetPort, unsigned short aoeState, 
unsigned short deviceState, unsigned int 


ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

writeLength, unsigned char 
*writeAoEData, 

EcAoEWriteControlCallBack 

callbackFunc, unsigned int waitTime, 
EcAoESender *sender=NULL) 

Write AoE control data to the specified 

slave. More... 
AoEWriteControl (int masterId, int 
slaveId, unsigned char targetNetId[6], 
unsigned short targetPort, unsigned short 
aoeState, unsigned short deviceState, 
unsigned int writeLength, unsigned char 
*writeAoEData, 

EcAoEWriteControlCallBack 

callbackFunc, unsigned int waitTime, 
EcAoESender *sender=NULL) 

Write AoE control data to the specified 

slave. More... 
AoEReadWrite (int slaveId, unsigned 
char targetNetId[6], unsigned short 
targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, unsigned int writeLength, 
unsigned char *writeAoEData, 
EcAoEReadCallBack callbackFunc, 
unsigned int waitTime, EcAoESender 
*sender=NULL) 

Read and write AoE data from and to the 

specified slave. More... 
AoEReadWrite (int masterId, int slaveId, 
unsigned char targetNetId[6], unsigned 
short targetPort, unsigned int indexGroup, 
unsigned int indexOffset, unsigned int 
readLength, unsigned int writeLength, 
unsigned char *writeAoEData, 
EcAoEReadCallBack callbackFunc, 


ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

unsigned int waitTime, EcAoESender 
*sender=NULL) 

Read and write AoE data from and to the 

specified slave. More... 
SoERead (int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, unsigned int buffSize, 
unsigned char *readSoEBuffer, unsigned 
int *actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 

Read SoE data from the specified slave. 

More... 

SoERead (int masterId, int slaveId, 
unsigned char driveNo, unsigned char 
elementFlags, unsigned short idn, 
unsigned int buffSize, unsigned char 
*readSoEBuffer, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 

Read SoE data from the specified slave. 

More... 
SoEWrite (int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, unsigned int dataSize, 
unsigned char *writeSoEData, unsigned 
int *errCode, unsigned int waitTime=0) 

Write SoE data to the specified slave. 

More... 
SoEWrite (int masterId, int slaveId, 
unsigned char driveNo, unsigned char 
elementFlags, unsigned short idn, 
unsigned int dataSize, unsigned char 
*writeSoEData, unsigned int *errCode, 
unsigned int waitTime=0) 

Write SoE data to the specified slave. 


ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

ECAPIFUNC 

More... 
SoERead (int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, EcSoEReadCallBack 
callbackFunc, unsigned int waitTime) 

Read SoE data from the specified slave. 

More... 

SoERead (int masterId, int slaveId, 
unsigned char driveNo, unsigned char 
elementFlags, unsigned short idn, 
EcSoEReadCallBack callbackFunc, 
unsigned int waitTime) 

Read SoE data from the specified slave. 

More... 
SoEWrite (int slaveId, unsigned char 
driveNo, unsigned char elementFlags, 
unsigned short idn, unsigned int dataSize, 
unsigned char *writeSoEData, 
EcSoEWriteCallBack callbackFunc, 
unsigned int waitTime) 

Write SoE data to the specified slave. 

More... 
SoEWrite (int masterId, int slaveId, 
unsigned char driveNo, unsigned char 
elementFlags, unsigned short idn, 
unsigned int dataSize, unsigned char 
*writeSoEData, EcSoEWriteCallBack 
callbackFunc, unsigned int waitTime) 

Write SoE data to the specified slave. 

More... 
VoERead (int slaveId, unsigned int 
*vendorId, unsigned short *vendorType, 
unsigned int buffSize, unsigned char 
*readVoEBuffer, unsigned int *actualSize, 
unsigned int waitTime=0) 


Read VoE data from the specified slave. 

More... 

ECAPIFUNC VoERead (int masterId, int slaveId, 
unsigned int *vendorId, unsigned short 
*vendorType, unsigned int buffSize, 
unsigned char *readVoEBuffer, unsigned 
int *actualSize, unsigned int waitTime=0) 

Read VoE data from the specified slave. 

More... 

ECAPIFUNC VoEWrite (int slaveId, unsigned int 
vendorId, unsigned short vendorType, 
unsigned int dataSize, unsigned char 
*writeVoEData, unsigned int waitTime=0) 

Write VoE data to the specified slave. 

More... 

ECAPIFUNC VoEWrite (int masterId, int slaveId, 
unsigned int vendorId, unsigned short 
vendorType, unsigned int dataSize, 
unsigned char *writeVoEData, unsigned 
int waitTime=0) 

Write VoE data to the specified slave. 

More... 

ECAPIFUNC VoERead (int slaveId, 
EcVoEReadCallBack callbackFunc, 
unsigned int waitTime) 
Read VoE data from the specified slave. 
More... 

ECAPIFUNC VoERead (int masterId, int slaveId, 
EcVoEReadCallBack callbackFunc, 
unsigned int waitTime) 

Read VoE data from the specified slave. 

More... 

ECAPIFUNC VoEWrite (int slaveId, unsigned int 
vendorId, unsigned short vendorType, 


unsigned int dataSize, unsigned char 
*writeVoEData, EcVoEWriteCallBack 
callbackFunc, unsigned int waitTime) 

Write VoE data to the specified slave. 

More... 

ECAPIFUNC VoEWrite (int masterId, int slaveId, 
unsigned int vendorId, unsigned short 
vendorType, unsigned int dataSize, 
unsigned char *writeVoEData, 
EcVoEWriteCallBack callbackFunc, 
unsigned int waitTime) 

Write VoE data to the specified slave. 

More... 

ECAPIFUNC SetAxisMode (int slaveId, int axisId, 
EcOperationMode::T mode) 

Set the axis operation mode for a 
specified slave axis. More... 

ECAPIFUNC SetAxisMode (int masterId, int slaveId, int 
axisId, EcOperationMode::T mode) 
Set the axis operation mode for a 
specified slave axis. More... 

ECAPIFUNC StartAxisPP (int slaveId, int axisIndex, int 
targetPos, unsigned int profileVel, 
unsigned int profileAcc, unsigned int 
profileDec, char immediately=-1, char 
relative=-1) 

Start the PP operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPP (int masterId, int slaveId, int 
axisIndex, int targetPos, unsigned int 
profileVel, unsigned int profileAcc, 
unsigned int profileDec, char 
immediately=-1, char relative=-1) 
Start the PP operation for a specified 
slave axis. More... 


ECAPIFUNC StartAxisPV (int slaveId, int axisIndex, int 
targetVel, unsigned int profileAcc, 
unsigned int profileDec) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int masterId, int slaveId, int 
axisIndex, int targetVel, unsigned int 
profileAcc, unsigned int profileDec) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int slaveId, int axisIndex, int 
targetVel, unsigned int profileAcc, 
unsigned int profileDec, unsigned short 
maxTorque) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int masterId, int slaveId, int 
axisIndex, int targetVel, unsigned int 
profileAcc, unsigned int profileDec, 
unsigned short maxTorque) 

Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisTQ (int slaveId, int axisIndex, 
short targetTrq) 

Start the TQ operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisTQ (int masterId, int slaveId, int 
axisIndex, short targetTrq) 

Start the TQ operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisTQ (int slaveId, int axisIndex, 
short targetTrq, unsigned int 
maxMotorSpeed) 
Start the TQ operation for a specified 


slave axis. More... 

ECAPIFUNC StartAxisTQ (int masterId, int slaveId, int 
axisIndex, short targetTrq, unsigned int 
maxMotorSpeed) 
Start the TQ operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int slaveId, int axisIndex, int 
method, unsigned int switchSpeed, 
unsigned int zeroSpeed, unsigned int 
hmAcc) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int slaveId, int axisIndex, int 
method, unsigned int switchSpeed, 
unsigned int zeroSpeed, unsigned int 
hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More... 

ECAPIFUNC HaltAxis (int masterId, int slaveId, int 
axisIndex) 


Halt the specified slave axis. More... 

ECAPIFUNC HaltAxisRelease (int slaveId, int 
axisIndex) 

Release the halt state for a specified 
slave axis. More... 

ECAPIFUNC HaltAxisRelease (int masterId, int 
slaveId, int axisIndex) 

Release the halt state for a specified 
slave axis. More... 

ECAPIFUNC OpenSerialChannel (int slaveId, int 
chnlId, wchar_t *comName, DCB *dcb, 
COMMTIMEOUTS *timeout, unsigned int 
*error=NULL) 

Open a serial channel to the specified 
slave. More... 

ECAPIFUNC OpenSerialChannel (int masterId, int 
slaveId, int chnlId, wchar_t *comName, 
DCB *dcb, COMMTIMEOUTS *timeout, 
unsigned int *error=NULL) 
Open a serial channel to the specified 
slave. More... 

ECAPIFUNC OpenSerialChannel (int slaveId, int 
chnlId, char *comName, DCB *dcb, 
COMMTIMEOUTS *timeout, unsigned int 
*error=NULL) 
Open a serial channel to the specified 
slave. More... 

ECAPIFUNC OpenSerialChannel (int masterId, int 
slaveId, int chnlId, char *comName, DCB 
*dcb, COMMTIMEOUTS *timeout, 
unsigned int *error=NULL) 
Open a serial channel to the specified 
slave. More... 

ECAPIFUNC CloseSerialChannel (int slaveId, int 


chnlId) 

Close an opened serial channel for the 
specified slave. More... 

ECAPIFUNC CloseSerialChannel (int masterId, int 
slaveId, int chnlId) 

Close an opened serial channel for the 
specified slave. More... 

Static Public Member Functions 

static ECAPIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static ECAPIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static ECAPIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static ECAPIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static ECAPIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the library version information of 
EcApi.lib. More... 


Member Function Documentation 

◆ErrorToString() [1/2]

static ECAPIFUNC 
ErrorToString ( 
static ECAPIFUNC 
ErrorToString ( 
int 
char * 
errCode, 
pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the EcErrorCode enum or the ErrorCode enum in the 
WMX3Api.h header. All errors returned by functions in class Ecat will be defined in 
one of these enums. Errors returned by functions in other classes may not be 
defined in one of these enums, and when such errors are passed to this function, an 
ErrorCodeNotDefined error will be returned and pString will contain the string 
representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 
This function is static, and may be called without declaring an instance of the Ecat 
class or creating a device. 

◆ 
ErrorToString() [2/2] 



◆ErrorToString() [2/2]
static ECAPIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A wchar_t array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the wchar_t 
array in number of 
characters. 

Remarks 

This function is a variation of ErrorToString that accepts a wchar_t array. Use this 
function when using Unicode character sets. 

◆ApiLogToString() [1/2]

static ECAPIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
char * pString, 
unsigned int size 
) 
static ECAPIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
char * pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static ECAPIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static ECAPIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static ECAPIFUNC 
GetLibVersion ( 
static ECAPIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the library version information of EcApi.lib. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 

◆GetVersion() 
ECAPIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆ScanNetwork() [1/2]

◆ScanNetwork() [2/2]
ECAPIFUNC 
ScanNetwork ( ) 
Scan the network topology. 
Remarks 
The scan result updates the master information obtained by function 
GetMasterInfo. 
ECAPIFUNC 
ScanNetwork ( int masterId ) 
Scan the network topology. 

Parameters 
[in] 
masterId ID of the master whose 
network will be scanned. 
Remarks 

The scan result updates the master information obtained by function 
GetMasterInfo. 

◆ChangeSlaveState() [1/2]

ECAPIFUNC 
ChangeSlaveState ( 
ECAPIFUNC 
ChangeSlaveState ( 
int 
slaveId, 
EcStateMachine::T state, 
int * errorCode 
) 
Change the specified slave state. 
Parameters 
[in] 
slaveId ID of the slave whose 
state will be changed. 
[in] 
state The state to change the 
specified slave to. 
[out] 
errorCode AL status code when 
slave state change 
failed. 

◆ChangeSlaveState() [2/2]

ECAPIFUNC 
ChangeSlaveState ( 
int 
int 
masterId, 
slaveId, 
EcStateMachine::T state, 
int * errorCode 
) 
Change the specified slave state. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
state will be changed. 
[in] 
state The state to change the 
specified slave to. 
[out] 
errorCode AL status code when 
slave state change 
failed. 

◆StartHotconnect() [2/2]
ECAPIFUNC 
StartHotconnect ( ) 
Start hot connect. 
◆StartHotconnect() [1/2]

◆ResetRefClockInfo() [1/2]
ECAPIFUNC 
StartHotconn 
ect ( int masterId ) 
Start hot connect. 
Parameters 
[in]masterId ID of the master to 
execute hot connect. 
ECAPIFUNC 
ResetRefClockI 
nfo ( ) 
◆ResetRefClockInfo() [2/2]

ECAPIFUNC 
ResetRefClo 
ckInfo ( int masterId ) 
ECAPIFUNC 
ResetRefClo 
ckInfo ( int masterId ) 
Reset the reference clock information. 

Parameters 
[in] 
masterId ID of the master whose 
clock information will be 
reset. 

Remarks 

After this function is called, the statistics information of minRefClockInterval, 
maxRefClockInterval, avgRefClockInterval, diffFromNextDcClock, 
minDiffFromNextDcClock, and maxDiffFromNextDcClock in 
EcMasterStatisticsInfo will be reset. 

◆ResetTransmitStatisticsInfo() [1/2]
ECAPIFUNC 
ResetTransmitSt 
atisticsInfo ( ) 
Reset the transmission statistics information. 

Remarks 

After this function is called, the statistics information of txDelay, minTxDelay, 
maxTxDelay, packetLoss, and packetTimeout in EcMasterStatisticsInfo will be 
reset. 

◆ResetTransmitStatisticsInfo() [2/2]

ECAPIFUNC 
ResetTransm 
itStatisticsInf 
ECAPIFUNC 
ResetTransm 
itStatisticsInf 
o ( 
int masterId ) 
Reset the transmission statistics information. 

Parameters 
[in] 
masterId ID of the master whose 
transmission statistics 
information will be reset. 

Remarks 

After this function is called, the statistics information of txDelay, minTxDelay, 
maxTxDelay, packetLoss, and packetTimeout in EcMasterStatisticsInfo will be 
reset. 

◆SetUpdatePeriod() 

ECAPIFUNC 
SetUpdatePe 
ECAPIFUNC 
SetUpdatePe 
riod ( 
unsigned int period ) 
Set the master info update period. 

Parameters 
[in] 
period New master info update 
period in unit ms. 
Remarks 

The default update period of master info is 10ms. Specifying a small period by this 
API can update master info faster but cost more system resource. If the master info 
does not need to be updated so often, system resource use can be reduced by 
specifying a larger period to reduce the update frequency. 

◆GetMasterInfo() [1/2]
ECAPIFUNC 
GetMasterInf 
o ( EcMasterInfo master ) 
Read the current master information from the engine. 
Parameters 
[out] 
master A pointer to a 
EcMasterInfo class that 
will be filled in with the 
current master 
information. 

◆GetMasterInfo() [2/2]

ECAPIFUNC 
GetMasterInfo ( 
ECAPIFUNC 
GetMasterInfo ( 
int 
masterId, 
EcMasterInfo * master 
) 
Read the specified master information from the engine. 

Parameters 
[in] 
masterId ID of the master whose 
information will be 
obtained. 
[out] 
master A pointer to a 
EcMasterInfo class that 
will be filled in with the 
specified master 
information. 

◆GetMasterInfoList() 
ECAPIFUNC 
GetMasterInf 
oList ( EcMasterInfo masters ) 
Read the master list information from the engine. 
Parameters 
[out] 
masters A pointer to a 
EcMasterInfoList class 
that will be filled in with 
the master list 
information. 

◆GetEniFilePath() [1/4]

ECAPIFUNC 
GetEniFilePath ( 
) 
ECAPIFUNC 
GetEniFilePath ( 
) 
int 
char * 
slaveId, 
path, 
int len 
Get the ENI file path for specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
ENI file path will be get. 
[out] 
path Buffer used to retrieve 
the eni file path in char 
type string. 
[in] 
len Length of the buffer. 
Remarks 

Retriver the eni file path of specified slave. Eni file path can be retrieved after 
scanning network or starting communication. 

◆GetEniFilePath() [2/4]

ECAPIFUNC 
GetEniFilePath ( 
) 
ECAPIFUNC 
GetEniFilePath ( 
) 
int 
wchar_t * 
slaveId, 
path, 
int len 
Get the ENI file path for specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
ENI file path will be get. 
[out] 
path Buffer used to retrieve 
the eni file path in 
unicode type string. 
[in] 
len Length of the buffer. 
Remarks 

This function is a variation of GetEniFilePath(int slaveId, char* path, int len) that 
retrieve a wchar_t file path. Use this function when using Unicode character sets. 

◆ 
GetEniFilePath() [3/4] 



ECAPIFUNC 
GetEniFilePath ( 
ECAPIFUNC 
GetEniFilePath ( 
int 
int 
char * 
masterId, 
slaveId, 
path, 
int len 
) 
Get the ENI file path for specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
ENI file path will be get. 
[out] 
path Buffer used to retrieve 
the eni file path in char 
type string. 
[in] 
len Length of the buffer. 
Remarks 

Retriver the eni file path of specified slave of specified master. Eni file path can be 
retrieved after scanning network or starting communication. 

◆GetEniFilePath() [4/4]

ECAPIFUNC 
GetEniFilePath ( 
ECAPIFUNC 
GetEniFilePath ( 
int 
int 
wchar_t * 
masterId, 
slaveId, 
path, 
int len 
) 
Get the ENI file path for specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
ENI file path will be get. 
[out] 
path Buffer used to retrieve 
the eni file path in 
unicode type string. 
[in] 
len Length of the buffer. 
Remarks 

This function is a variation of GetEniFilePath(int masterId, int slaveId, char* path, 
int len) that retrieve a wchar_t file path. Use this function when using Unicode 
character sets. 

◆SetEniFilePath() [1/4]

ECAPIFUNC 
SetEniFilePath ( 
ECAPIFUNC 
SetEniFilePath ( 
int 
char * 
slaveId, 
path, 
unsigned char oneshot = 1
) 
Set the ENI file path for specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
ENI file path will be set. 
[in] 
path File path specified as a 
null-terminated char type 
string. 
[in] 
oneshot Whether the specified 
file path should be used 
as a one-shot or 
permanently. 
Remarks 

The default ENI file search path is the folder "C:\\eni". Using the "UseDef" or 
"EniFile[]" setting in ec_network.def can also change the ENI file search path. If ENI 
file path should be changed dynamically by API, this function can be used. If 1 is 
specified to the "oneshot" parameter, the specified ENI file is used only once, 
regardless of whether communication is started successfully or not. If 0 is specified, 
the specified ENI file is used until the engine is restarted. 

◆SetEniFilePath() [2/4]

ECAPIFUNC 
SetEniFilePath ( 
ECAPIFUNC 
SetEniFilePath ( 
int 
wchar_t * 
slaveId, 
path, 
unsigned char oneshot = 1
) 
Set the ENI file path for specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
ENI file path will be set. 
[in] 
path File path specified as a 
null-terminated wchar_t 
type string. 
[in] 
oneshot Whether the specified 
file path should be used 
as a one-shot or 
permanently. 
Remarks 

This function is a variation of SetEniFilePath(int slaveId, char* path, unsigned char 
oneshot = 1) that accepts a wchar_t file path. Use this function when using Unicode 
character sets. 

◆SetEniFilePath() [3/4]

ECAPIFUNC 
SetEniFilePath ( int masterId, 
int slaveId, 
char * path, 
unsigned char oneshot = 1) 
ECAPIFUNC 
SetEniFilePath ( int masterId, 
int slaveId, 
char * path, 
unsigned char oneshot = 1) 
Set the ENI file path for specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
ENI file path will be set. 
[in] 
path File path specified as a 
null-terminated char type 
string. 
[in] 
oneshot Whether the specified 
file path should be used 
as a one-shot or 
permanently. 
Remarks 

The default ENI file search path is the folder "C:\\eni". Using the "UseDef" or 
"EniFile[]" setting in ec_network.def can also change the ENI file search path. If ENI 
file path should be changed dynamically by API, this function can be used. If 1 is 
specified to the "oneshot" parameter, the specified ENI file is used only once, 
regardless of whether communication is started successfully or not. If 0 is specified, 
the specified ENI file is used until the engine is restarted. 

◆SetEniFilePath() [4/4]

ECAPIFUNC 
SetEniFilePath ( 
ECAPIFUNC 
SetEniFilePath ( 
int 
int 
wchar_t * 
masterId, 
slaveId, 
path, 
unsigned char oneshot = 1
) 
Set the ENI file path for specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
ENI file path will be set. 
[in] 
path File path specified as a 
null-terminated wchar_t 
type string. 
[in] 
oneshot Whether the specified 
file path should be used 
as a one-shot or 
permanently. 
Remarks 

This function is a variation of SetEniFilePath(int masterId, int slaveId, char* path, 
unsigned char oneshot = 1) that accepts a wchar_t file path. Use this function when 
using Unicode character sets. 

◆RegisterWrite() [1/4]

ECAPIFUNC 
RegisterWrite ( 
ECAPIFUNC 
RegisterWrite ( 
int 
int 
int 
slaveId, 
regAddr, 
len, 
unsigned char * data 
) 
Write data to the specified slave register address. 

Parameters 
[in] 
slaveId ID of the slave whose 
register data will be 

written. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 

the data to be written. 

◆ 
RegisterWrite() [2/4] 



ECAPIFUNC 
RegisterWrite ( 
ECAPIFUNC 
RegisterWrite ( 
int 
int 
int 
int 
masterId, 
slaveId, 
regAddr, 
len, 
unsigned char * data 
) 
Write data to the specified slave register address. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
register data will be 
written. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 
the data to be written. 

◆RegisterRead() [1/4]

ECAPIFUNC 
RegisterRead ( 
ECAPIFUNC 
RegisterRead ( 
int 
int 
int 
slaveId, 
regAddr, 
len, 
unsigned char * buff 
) 
Read data from the specified slave register address. 

Parameters 
[in] 
slaveId ID of the slave whose 
register data will be 
read. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[out] 
buff A pointer to an array to 
which read data will be 
filled in. 

◆RegisterRead() [2/4]

ECAPIFUNC 
RegisterRead ( 
ECAPIFUNC 
RegisterRead ( 
int 
int 
int 
int 
masterId, 
slaveId, 
regAddr, 
len, 
unsigned char * buff 
) 
Read data from the specified slave register address. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
register data will be 

read. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[out] 
buff A pointer to an array to 

which read data will be 
filled in. 

◆RegisterWrite() [3/4]

ECAPIFUNC 
RegisterWrite ( 
ECAPIFUNC 
RegisterWrite ( 
int 
int 
int 
slaveId, 
regAddr, 
len, 
unsigned char * data, 
EcRegisterWriteCall callbackFunc, 
unsigned int waitTime 
) 
Write data to the specified slave register address. 

Parameters 
[in] 
slaveId ID of the slave whose 
register data will be 

written. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 

the data to be written. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
write process is done. 
[in] 
waitTime An error will be returned 
if the register write 
process is not finished 
within the specified wait 
time. 

◆RegisterWrite() [4/4]

ECAPIFUNC 
RegisterWrite ( 
ECAPIFUNC 
RegisterWrite ( 
int 
int 
int 
int 
masterId, 
slaveId, 
regAddr, 
len, 
unsigned char * data, 
EcRegisterWriteCall callbackFunc, 
unsigned int waitTime 
) 
Write data to the specified slave register address. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
register data will be 

written. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 

the data to be written. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
write process is done. 
[in] 
waitTime An error will be returned 
if the register write 
process is not finished 
within the specified wait 
time. 

◆ 
RegisterRead() [3/4] 



◆RegisterRead() [3/4]
ECAPIFUNC 
RegisterRead ( int 
int 
int 
slaveId, 
regAddr, 
len, 
EcRegisterReadCall callbackFunc, 
unsigned int waitTime 
) 
Read data from the specified slave register address. 
Parameters 
[in] 
slaveId ID of the slave whose 
register data will be 
read. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
read process is done. 
[in] 
waitTime An error will be returned 
if the register read 
process is not finished 
within the specified wait 
time. 

◆RegisterRead() [4/4]

ECAPIFUNC 
RegisterRead ( 
ECAPIFUNC 
RegisterRead ( 
int 
int 
int 
int 
masterId, 
slaveId, 
regAddr, 
len, 
EcRegisterReadCall callbackFunc, 
unsigned int waitTime 
) 
Read data from the specified slave register address. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
register data will be 

read. 

[in] 
regAddr Register address. 

[in] 
len Data length. 

[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the register 
read process is done. 

[in] 
waitTime An error will be returned 
if the register read 
process is not finished 
within the specified wait 
time. 

◆RegisterBroadcastWrite() [1/4]

ECAPIFUNC 
RegisterBroadcastW 
rite ( 
ECAPIFUNC 
RegisterBroadcastW 
rite ( 
int 
int 
regAddr, 
len, 
unsigned char * data, 
unsigned short * wkc 
) 
Broadcast write data to all slaves' register addresses. 

Parameters 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 
the data to be 
broadcasted. 

[out] 
wkc A pointer to an unsigned 
short type to which the 
broadcast working count 
will be filled in. 

◆RegisterBroadcastWrite() [2/4]

ECAPIFUNC 
RegisterBroadcastW 
rite ( 
ECAPIFUNC 
RegisterBroadcastW 
rite ( 
int 
int 
int 
masterId, 
regAddr, 
len, 
unsigned char * data, 
unsigned short * wkc 
) 
Broadcast write data to all slaves' register addresses. 

Parameters 
[in] 
masterId ID of the master whose 
slaves will be broadcast 

written. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 

the data to be 
broadcasted. 

[out] 
wkc A pointer to an unsigned 
short type to which the 
broadcast working count 
will be filled in. 

◆RegisterBroadcastRead() [1/4]

ECAPIFUNC 
RegisterBroadcastR 
ead ( 
ECAPIFUNC 
RegisterBroadcastR 
ead ( 
int 
int 
regAddr, 
len, 
unsigned char * buff, 
unsigned short * wkc 
) 
Broadcast read data from all slaves' register addresses. 

Parameters 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[out] 
buff A pointer to an array 
which read data will be 
filled in. 
[out] 
wkc A pointer to an unsigned 
short type to which the 
broadcast working count 
will be filled in. 

◆RegisterBroadcastRead() [2/4]

ECAPIFUNC 
RegisterBroadcastR 
ead ( 
ECAPIFUNC 
RegisterBroadcastR 
ead ( 
int 
int 
int 
masterId, 
regAddr, 
len, 
unsigned char * buff, 
unsigned short * wkc 
) 
Broadcast read data from all slaves' register addresses. 

Parameters 
[in] 
masterId ID of the master whose 
slaves will be broadcast 

read. 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[out] 
buff A pointer to an array 

which read data will be 
filled in. 

[out] 
wkc A pointer to an unsigned 
short type to which the 
broadcast working count 
will be filled in. 

◆RegisterBroadcastWrite() [3/4]

ECAPIFUNC 
RegisterBroadcastW 
rite ( 
ECAPIFUNC 
RegisterBroadcastW 
rite ( 
int 
int 
regAddr, 
len, 
unsigned char * data, 
EcRegisterBroadcas callbackFunc, 
unsigned int waitTime 
) 
Broadcast write data to all slaves' register addresses. 

Parameters 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
data Data array containing 
the data to be 
broadcasted. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
broadcast write process 
is done. 

[in] 
waitTime An error will be returned 
if the register broadcast 
write process is not 
finished within the 
specified wait time. 

◆RegisterBroadcastWrite() [4/4]

ECAPIFUNC 
RegisterBroadcastW 
rite ( 
ECAPIFUNC 
RegisterBroadcastW 
rite ( 
int 
int 
int 
masterId, 
regAddr, 
len, 
unsigned char * data, 
EcRegisterBroadcas callbackFunc, 
unsigned int waitTime 
) 
Broadcast write data to all slaves' register addresses. 

Parameters 
[in] 
masterId ID of the master whose 
slaves will be broadcast 

written. 

[in] 
regAddr Register address. 

[in] 
len Data length. 

[in] 
data Data array containing 

the data to be 
broadcasted. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
broadcast write process 
is done. 

[in] 
waitTime An error will be returned 
if the register broadcast 
write process is not 
finished within the 
specified wait time. 

◆RegisterBroadcastRead() [3/4]

◆RegisterBroadcastRead() [3/4]
ECAPIFUNC 
RegisterBroadcastR 
ead ( 
int 
int 
regAddr, 
len, 
EcRegisterBroadcas callbackFunc, 
unsigned int waitTime 
) 
Broadcast read data from all slaves' register addresses. 
Parameters 
[in] 
regAddr Register address. 
[in] 
len Data length. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the register 
broadcast read process 
is done. 
[in] 
waitTime An error will be returned 
if the register broadcast 
read process is not 
finished within the 
specified wait time. 

◆RegisterBroadcastRead() [4/4]

ECAPIFUNC 
RegisterBroadcastR 
ead ( 
ECAPIFUNC 
RegisterBroadcastR 
ead ( 
int 
int 
int 
masterId, 
regAddr, 
len, 
EcRegisterBroadcas callbackFunc, 
unsigned int waitTime 
) 
Broadcast read data from all slaves' register addresses. 
Parameters 
[in] 
masterId ID of the master whose 
slaves will be broadcast 
read. 
[in] 
[in] 
[in] 
regAddr 
len 
callbackFunc 
Register address. 
Data length. 
A pointer to a callback 
function which will be 
called when the register 
broadcast read process 
is done. 
[in] 
waitTime An error will be returned 
if the register broadcast 
read process is not 
finished within the 
specified wait time. 

◆SdoDownload() [1/8]
ECAPIFUNC 
SdoDownload ( int slaveId, 
int index, 

int int 
subindex, 
sdoDataSize, 
sdoData, 
errCode, 
unsigned int waitTime = 0) 
int 
unsigned char * 
unsigned int * 
Download data to the specified slave SDO. 

Parameters 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 
[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will download SDO by expedited type in which SDO size just can be 1, 
2 and 4 byte. 

◆SdoDownload() [2/8]

ECAPIFUNC 
SdoDownload ( int masterId, 
int slaveId, 
int index, 
int subindex, 
int sdoDataSize, 
unsigned char * sdoData, 
unsigned int * errCode, 
unsigned int 
) 
waitTime = 0
Download data to the specified slave SDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SDO data will be 

downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 
[out] 
errCode A pointer to an int type to 

which an SDO abort 
code from the slave will 
be filled in if there is any. 

[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 

Remarks 



◆SdoUpload() [1/8]
This function will download SDO by expedited type in which SDO size just can be 1, 
2 and 4 byte. 
ECAPIFUNC 
SdoUpload ( int slaveId, 
int index, 
int subindex, 
int sdoBuffSize, 
unsigned char * sdoBuff, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int 
) 
waitTime = 0
Upload data from the specified slave SDO. 
Parameters 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoBuffSize Size of sdoBuff which is 
used to obtain the 
uploaded SDO data. 
[out] 
sdoBuff A pointer to an array to 
which the uploaded SDO 
data will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actual uploaded SDO 


data size will be filled in. 

[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will upload SDO by expedited type in which SDO size just can be 1, 2 
and 4 byte. 

◆SdoUpload() [2/8]
ECAPIFUNC 
SdoUpload ( int masterId, 
int slaveId, 
int index, 
int subindex, 
int sdoBuffSize, 
unsigned char * sdoBuff, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int waitTime = 0) 
Upload data from the specified slave SDO. 
Parameters 
[in]masterId ID of the master whose 

slave will be operated. 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoBuffSize Size of sdoBuff which is 
used to obtain the 
uploaded SDO data. 
[out] 
sdoBuff A pointer to an array to 
which the uploaded SDO 
data will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actual uploaded SDO 
data size will be filled in. 
[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will upload SDO by expedited type in which SDO size just can be 1, 2 
and 4 byte. 

◆SdoDownload() [3/8]
ECAPIFUNC 
SdoDownload ( int slaveId, 

int int 
index, 
subindex, 
sdoDataSize, 
sdoData, 
EcSdoDownloadCal callbackFunc, 
unsigned int waitTime 
) 
int 
int 
unsigned char * 
Download data to the specified slave SDO. 

Parameters 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the SDO 
download process is 
done. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will download SDO by expedited type in which SDO size just can be 1, 
2 and 4 byte. 

◆SdoDownload() [4/8]

◆SdoDownload() [4/8]
ECAPIFUNC 
SdoDownload ( int 
int 
int 
int 
int 
masterId, 
slaveId, 
index, 
subindex, 
sdoDataSize, 
unsigned char * sdoData, 
EcSdoDownloadCal callbackFunc, 
unsigned int waitTime 
) 
Download data to the specified slave SDO. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the SDO 
download process is 
done. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 



◆SdoUpload() [3/8]
Remarks 
This function will download SDO by expedited type in which SDO size just can be 1, 
2 and 4 byte. 

ECAPIFUNC 
SdoUpload ( 
ECAPIFUNC 
SdoUpload ( 
int 
int 
int 
slaveId, 
index, 
subindex, 
EcSdoUploadCallBa callbackFunc, 
unsigned int waitTime 
) 
Upload data from the specified slave SDO. 

Parameters 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the SDO 
upload process is done. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will upload SDO by expedited type in which SDO size just can be 1, 2 
and 4 byte. 

◆SdoUpload() [4/8]

ECAPIFUNC 
SdoUpload ( 
ECAPIFUNC 
SdoUpload ( 
int 
int 
int 
int 
masterId, 
slaveId, 
index, 
subindex, 
EcSdoUploadCallBa callbackFunc, 
unsigned int waitTime 
) 
Upload data from the specified slave SDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the SDO 
upload process is done. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will upload SDO by expedited type in which SDO size just can be 1, 2 
and 4 byte. 


◆SdoDownload() [5/8]
ECAPIFUNC 
SdoDownload ( int 
int 
int 
slaveId, 
index, 
subindex, 
EcSdoType::T sdoType, 
int 
sdoDataSize, 
unsigned char * sdoData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
BOOL complete = FALSE
) 
Download data to the specified slave SDO. 
Parameters 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO download type. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 
[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 



◆SdoDownload() [6/8]
time. 
[in]complete Enable the complete 
access. 
ECAPIFUNC 
SdoDownload ( int masterId, 
int slaveId, 
int index, 
int subindex, 
) 
EcSdoType::T sdoType, 
int 
sdoDataSize, 
unsigned char * sdoData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
BOOL complete = FALSE
Download data to the specified slave SDO. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO download type. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 


[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 
[in] 
complete Enable the complete 
access. 

◆SdoUpload() [5/8]
ECAPIFUNC 
SdoUpload ( 
int 
int 
int 
slaveId, 
index, 
subindex, 
EcSdoType::T sdoType, 
int 
sdoBuffSize, 
unsigned char * sdoBuff, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
BOOL complete = FALSE
) 
Upload data from the specified slave SDO. 
Parameters 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 


[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO upload type. 
[in] 
sdoBuffSize Size of sdoBuff which is 
used to obtain the 
uploaded SDO data. 
[out] 
sdoBuff A pointer to an array to 
which the uploaded SDO 
data will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actual uploaded SDO 
data size will be filled in. 
[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 
[in] 
complete Enable the complete 
access. 

◆SdoUpload() [6/8]
ECAPIFUNC 
SdoUpload ( int masterId, 
int slaveId, 
int index, 
int subindex, 
EcSdoType::T sdoType, 

int int 
sdoBuffSize, 
unsigned char * sdoBuff, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
BOOL complete = FALSE
) 
Upload data from the specified slave SDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SDO data will be 

uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO upload type. 
[in] 
sdoBuffSize Size of sdoBuff which is 

used to obtain the 
uploaded SDO data. 

[out] 
sdoBuff A pointer to an array to 
which the uploaded SDO 
data will be filled in. 

[out] 
actualSize A pointer to an unsigned 
int type to which the 
actual uploaded SDO 
data size will be filled in. 

[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 

[in] 
waitTime An error will be returned 


if the SDO upload 
process is not finished 
within the specified wait 
time. 

[in] 
complete Enable the complete 
access. 

◆SdoDownload() [7/8]
ECAPIFUNC 
SdoDownload ( int 
int 
int 
slaveId, 
index, 
subindex, 
EcSdoType::T sdoType, 
int 
sdoDataSize, 
unsigned char * sdoData, 
EcSdoDownloadCal callbackFunc, 
unsigned int waitTime, 
BOOL complete = FALSE
) 
Download data to the specified slave SDO. 

Parameters 
[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO download type. 
[in] 
sdoDataSize SDO data size. 
[in] 
sdoData SDO data. 


[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the SDO 
download process is 
done. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 
[in] 
complete Enable the complete 
access. 

◆SdoDownload() [8/8]
ECAPIFUNC 
SdoDownload ( int masterId, 
int slaveId, 
int index, 
int subindex, 
EcSdoType::T sdoType, 
int sdoDataSize, 
unsigned char * sdoData, 
EcSdoDownloadCal callbackFunc, 
unsigned int waitTime, 
BOOL complete = FALSE) 
Download data to the specified slave SDO. 
Parameters 
[in]masterId ID of the master whose 
slave will be operated. 

[in] 
slaveId ID of the slave to which 
SDO data will be 
downloaded. 
[in] 
[in] 
[in] 
[in] 
[in] 
[in] 
index 
subindex 
sdoType 
sdoDataSize 
sdoData 
callbackFunc 
SDO index. 
SDO subindex. 
SDO download type. 
SDO data size. 
SDO data. 
A pointer to a callback 
function which will be 
called when the SDO 
download process is 
done. 
[in] 
waitTime An error will be returned 
if the SDO download 
process is not finished 
within the specified wait 
time. 
[in] 
complete Enable the complete 
access. 

◆SdoUpload() [7/8]

ECAPIFUNC 
SdoUpload ( int slaveId, 
int index, 
int subindex, 
ECAPIFUNC 
SdoUpload ( int slaveId, 
int index, 
int subindex, 
EcSdoType::T sdoType, 
EcSdoUploadCallBa callbackFunc, 
unsigned int waitTime, 
BOOL complete = FALSE) 
Upload data from the specified slave SDO. 

Parameters 
[in] 
slaveId ID of the slave from 
which SDO data will be 

uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO upload type. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the SDO 
upload process is done. 

[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

[in] 
complete Enable the complete 
access. 

◆SdoUpload() [8/8]

ECAPIFUNC 
SdoUpload ( 
ECAPIFUNC 
SdoUpload ( 
int 
int 
int 
int 
masterId, 
slaveId, 
index, 
subindex, 
EcSdoType::T sdoType, 
EcSdoUploadCallBa callbackFunc, 
unsigned int waitTime, 
BOOL complete = FALSE
) 
Upload data from the specified slave SDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SDO data will be 

uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoType SDO upload type. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the SDO 
upload process is done. 

[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

[in] 
complete Enable the complete 
access. 


◆GetSdoInfoODList() [1/4]
ECAPIFUNC 
GetSdoInfoODList ( int slaveId, 
EcObjectDescription type, 
EcSlaveSdoInfoObje list 
) 
Get the OD list from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which the OD list will be 
obtained. 
[in] 
type OD list type. 
[out] 
list A pointer to 
EcSlaveSdoInfoObject 
DescriptionList to 
which the obtained OD 
List will be filled in. 

◆GetSdoInfoODList() [2/4]

ECAPIFUNC 
GetSdoInfoODList ( 
ECAPIFUNC 
GetSdoInfoODList ( 
int 
int 
masterId, 
slaveId, 
EcObjectDescription type, 
EcSlaveSdoInfoObje list 
) 
Get the OD list from the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which the OD list will be 

obtained. 

[in] 
type OD list type. 

[out] 
list A pointer to 

EcSlaveSdoInfoObject 
DescriptionList to 
which the obtained OD 
List will be filled in. 

◆GetSdoInfoEDList() [1/4]

slaveId, 
index, 
slaveId, 
index, 
ECAPIFUNC 
GetSdoInfoEDList ( 
int 
int 
EcSlaveSdoInfoEntr list 
) 
Get the ED list from the specified slave's OD index. 
Parameters 
[in] 
slaveId ID of the slave from 
which the ED list will be 
obtained. 
[in] 
index OD index from which the 
ED list will be obtained. 
[out] 
list A pointer to 
EcSlaveSdoInfoEntryD 
escriptionList to which 
the obtained ED List will 
be filled in. 

◆GetSdoInfoEDList() [2/4]

ECAPIFUNC 
GetSdoInfoEDList ( 
ECAPIFUNC 
GetSdoInfoEDList ( 
int 
int 
int 
masterId, 
slaveId, 
index, 
EcSlaveSdoInfoEntr list 
) 
Get the ED list from the specified slave's OD index. 
Parameters 
[in] 
[in] 
masterId 
slaveId 
ID of the master whose 
slave will be operated. 
ID of the slave from 
which the ED list will be 
obtained. 
[in] 
index OD index from which the 
ED list will be obtained. 
[out] 
list A pointer to 
EcSlaveSdoInfoEntryD 
escriptionList to which 
the obtained ED List will 
be filled in. 

◆GetSdoInfoODList() [3/4]

ECAPIFUNC 
GetSdoInfoODList ( 
ECAPIFUNC 
GetSdoInfoODList ( 
int 
slaveId, 
EcObjectDescription type, 
EcSdoInfoGetODLis callbackFunc, 
unsigned int waitTime 
) 
Get the OD list from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which the OD list will be 

obtained. 

[in] 
type OD list type. 

[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of getting the OD list is 
done. 

[in] 
waitTime An error will be returned 
if the OD list getting 
process is not finished 
within the specified wait 
time. 

◆GetSdoInfoODList() [4/4]

ECAPIFUNC 
GetSdoInfoODList ( 
ECAPIFUNC 
GetSdoInfoODList ( 
int 
int 
masterId, 
slaveId, 
EcObjectDescription type, 
EcSdoInfoGetODLis callbackFunc, 
unsigned int waitTime 
) 
Get the OD list from the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which the OD list will be 

obtained. 

[in] 
type OD list type. 

[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of getting the OD list is 
done. 

[in] 
waitTime An error will be returned 
if the OD list getting 
process is not finished 
within the specified wait 
time. 

◆GetSdoInfoEDList() [3/4]

ECAPIFUNC ECAPIFUNC 
GetSdoInfoEDList ( 
int 
int 
slaveId, 
index, 
EcSdoInfoGetEDLis callbackFunc, 
unsigned int waitTime 
) 
Get the ED list from the specified slave's OD index. 

Parameters 
[in] 
slaveId ID of the slave from 
which the ED list will be 
obtained. 
[in] 
index OD index from which the 
ED list will be obtained. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of getting the ED list is 
done. 
[in] 
waitTime An error will be returned 
if the ED list getting 
process is not finished 
within the specified wait 
time. 

◆GetSdoInfoEDList() [4/4]

ECAPIFUNC 
GetSdoInfoEDList ( 
ECAPIFUNC 
GetSdoInfoEDList ( 
int 
int 
int 
masterId, 
slaveId, 
index, 
EcSdoInfoGetEDLis callbackFunc, 
unsigned int waitTime 
) 
Get the ED list from the specified slave's OD index. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which the ED list will be 
obtained. 
[in] 
index OD index from which the 
ED list will be obtained. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of getting the ED list is 
done. 
[in] 
waitTime An error will be returned 
if the ED list getting 
process is not finished 
within the specified wait 
time. 

◆TxPdoWrite() [1/2]

ECAPIFUNC 
TxPdoWrite ( 
ECAPIFUNC 
TxPdoWrite ( 
int 
int 
int 
int 
slaveId, 
index, 
subindex, 
pdoDataSize, 
unsigned char * pdoData, 
unsigned int mask = 0
) 
Write data to the specified slave's Tx PDO. 

Parameters 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 

written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoDataSize PDO size. 
[in] 
pdoData A pointer to the PDO 

data array. 
[in] 
mask Mask to decide which 
bits of pdoData will be 
written. All bits will be 
written if zero. 

◆TxPdoWrite() [2/2]
ECAPIFUNC 
TxPdoWrite ( int masterId, 
int slaveId, 
int index, 
int subindex, 

int int 
pdoDataSize, 
unsigned char * pdoData, 
unsigned int mask = 0) 
Write data to the specified slave's Tx PDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoDataSize PDO size. 
[in] 
pdoData A pointer to the PDO 
data array. 
[in] 
mask Mask to decide which 
bits of pdoData will be 
written. All bits will be 
written if zero. 

Remarks 

If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an 
error. 
The value to be written is the logical conjunction of pdoData and mask. 
However, the masks 0x00000000 and 0xFFFFFFFFFF have the same 
meaning. 
This function returns an error if a specific PDO Index is given in the argument 
index, if AllowPdoReadWrite:1 is defined in the eni file but the mask is 
0x00000000. This is a safety mechanism to prevent overwriting of variables 
used in motion control. 
To enable PDO write in all cases, in addition to defining AllowPdoReadWrite:1 
in the eni file, provide 0xFFFFFFFFFF for the argument mask. 
The specific PDO Indexes are as follows: 


PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 

◆ClearTxPdoWrite() [1/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 


[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

Remarks 

If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an 
error. 
The value to be written is the logical conjunction of pdoData and mask. 
However, the masks 0x00000000 and 0xFFFFFFFFFF have the same 
meaning. 
This function returns an error if a specific PDO Index is given in the argument 
index, if AllowPdoReadWrite:1 is defined in the eni file but the mask is 
0x00000000. This is a safety mechanism to prevent overwriting of variables 
used in motion control. 
To enable PDO write in all cases, in addition to defining AllowPdoReadWrite:1 
in the eni file, provide 0xFFFFFFFFFF for the argument mask. 
The specific PDO Indexes are as follows: 

PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 


◆ClearTxPdoWrite() [2/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
int 
masterId, 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

◆PdoRead() [1/2]

ECAPIFUNC 
PdoRead ( 
ECAPIFUNC 
PdoRead ( 
int 
int 
int 
int 
slaveId, 
index, 
subindex, 
pdoBuffSize, 
unsigned char * pdoBuff, 
unsigned int * actualSize 
) 
Read data from the specified slave's Rx or Tx PDO. 

Parameters 
[in] 
slaveId ID of the slave from 
which Rx or Tx PDO 

data will be read. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoBuffSize Size of pdoBuff. 
[out] 
pdoBuff A pointer to an array to 

which the read PDO 
data will be filled in. 

[out] 
actualSize A pointer to an unsigned 
int type to which the 
actually read PDO size 
will be filled in. 

◆PdoRead() [2/2]

ECAPIFUNC 
PdoRead ( 
ECAPIFUNC 
PdoRead ( 
int 
int 
int 
int 
int 
masterId, 
slaveId, 
index, 
subindex, 
pdoBuffSize, 
unsigned char * pdoBuff, 
unsigned int * actualSize 
) 
Read data from the specified slave's Rx or Tx PDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which Rx or Tx PDO 
data will be read. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoBuffSize Size of pdoBuff. 
[out] 
pdoBuff A pointer to an array to 
which the read PDO 
data will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actually read PDO size 
will be filled in. 

Remarks 

If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an 
error. 


◆SetOutputBit() [1/2]
ECAPIFUNC 
SetOutputBit ( 
int 
int 
int 
slaveId, 
byte, 
bit, 
unsigned char data 
) 
Set the value of an output bit for a slave. 

Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
set. 
[in] 
bit The bit offset of the bit to 
set. 
[in] 
data The value to set the bit 
to. 

Remarks 

If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an 
error. 

◆ 
SetOutputBit() [2/2] 



ECAPIFUNC 
SetOutputBit ( 
ECAPIFUNC 
SetOutputBit ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
bit, 
unsigned char data 
) 
Set the value of an output bit for a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
set. 
[in] 
bit The bit offset of the bit to 
set. 
[in] 
data The value to set the bit 
to. 

◆SetOutputByte() [1/2]

ECAPIFUNC 
SetOutputByte ( 
) 
ECAPIFUNC 
SetOutputByte ( 
) 
int 
int 
slaveId, 
byte, 
unsigned char data 
Set the value of an output byte for a slave. 
Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
set. 
[in] 
data The value to set the byte 
to. 

◆SetOutputByte() [2/2]

ECAPIFUNC 
SetOutputByte ( 
ECAPIFUNC 
SetOutputByte ( 
int 
int 
int 
masterId, 
slaveId, 
byte, 
unsigned char data 
) 
Set the value of an output byte for a slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
set. 
[in] 
data The value to set the byte 
to. 

◆SetOutputBytes() [1/2]

ECAPIFUNC 
SetOutputBytes ( 
ECAPIFUNC 
SetOutputBytes ( 
int 
int 
int 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Set the value of multiple output bytes for a slave. 
Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the head 
byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a char array 
that contains the values 
to set the bytes to. The 
size of the array must be 
greater than or equal to 
the size parameter. 

◆SetOutputBytes() [2/2]

ECAPIFUNC 
SetOutputBytes ( 
ECAPIFUNC 
SetOutputBytes ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Set the value of multiple output bytes for a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the head 
byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a char array 
that contains the values 
to set the bytes to. The 
size of the array must be 
greater than or equal to 
the size parameter. 

◆SetOutputBits() [1/2]
ECAPIFUNC 
SetOutputBits ( int slaveId, 
int * pByte, 
int * pBit, 
unsigned char * pData, 

int count 
) 
int count 
) 
Set the value of multiple output bits for a slave. 

Parameters 
[in] 
slaveId ID of the slave. 
[in] 
pByte A pointer to an int array 
that contains the byte 
addresses (within the 
slaves) of the output bits. 
The size of the array 
must be equal to the 
count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 
must be equal to the 
count parameter. 
[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetOutputBit function multiple times, but 
can be faster due to the reduced overhead. There is no limit to the number of bits 
that may be specified at once. pByte[0], pBit[0], and pData[0] specify the first output 
bit to set, pByte[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 


◆SetOutputBits() [2/2]
ECAPIFUNC 
SetOutputBits ( int masterId, 
int slaveId, 
int * pByte, 
int * pBit, 
unsigned char * pData, 
int count 
) 
Set the value of multiple output bits for a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
pByte A pointer to an int array 
that contains the byte 
addresses (within the 
slaves) of the output bits. 
The size of the array 
must be equal to the 
count parameter. 
[in] 
pBit A pointer to an int array 
that contains the bit 
addresses of the output 
bits. The size of the 
array must be equal to 
the count parameter. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the bits 
to. The size of the array 


must be equal to the 
count parameter. 
[in[in] 
count The number of bits to 
set. 

Remarks 

This function is equivalent to calling the SetOutputBit function multiple times, but 
can be faster due to the reduced overhead. There is no limit to the number of bits 
that may be specified at once. pByte[0], pBit[0], and pData[0] specify the first output 
bit to set, pByte[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆GetInputBit() [1/2]
ECAPIFUNC 
GetInputBit ( 
int 
int 
int 
slaveId, 
byte, 
bit, 
unsigned char * pData 
) 
Get the value of an input bit from a slave. 

Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
get. 
[in] 
bit The bit offset of the bit to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 


◆ 
GetInputBit() [2/2] 


ECAPIFUNC 
GetInputBit ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
bit, 
unsigned char * pData 
) 
Get the value of an input bit from a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
get. 
[in] 
bit The bit offset of the bit to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetInputByte() [1/2]

ECAPIFUNC 
GetInputByte ( 
) 
ECAPIFUNC 
GetInputByte ( 
) 
int 
int 
slaveId, 
byte, 
unsigned char * pData 
Get the value of an input byte from a slave. 
Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetInputByte() [2/2]

ECAPIFUNC 
GetInputByte ( 
ECAPIFUNC 
GetInputByte ( 
int 
int 
int 
masterId, 
slaveId, 
byte, 
unsigned char * pData 
) 
Get the value of an input byte from a slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetInputBytes() [1/2]

ECAPIFUNC 
GetInputBytes ( 
ECAPIFUNC 
GetInputBytes ( 
int 
int 
int 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Get the value of multiple input bytes from a slave. 
Parameters 
[in] 
[in] 
[in] 
[out] 
slaveId 
byte 
size 
pData 
ID of the slave. 
The byte address (within 
the slave) of the head 
byte. 
The number of bytes to 
get. 
A pointer to a char array 
that will receive the data. 
The size of the array 
must be greater than or 
equal to the size 
parameter. 
◆ 
GetInputBytes() [2/2] 



ECAPIFUNC 
GetInputBytes ( 
ECAPIFUNC 
GetInputBytes ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Get the value of multiple input bytes from a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the head 
byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a char array 
that will receive the data. 
The size of the array 
must be greater than or 
equal to the size 
parameter. 

◆GetOutputBit() [1/2]

ECAPIFUNC 
GetOutputBit ( 
ECAPIFUNC 
GetOutputBit ( 
int 
int 
int 
slaveId, 
byte, 
bit, 
unsigned char * pData 
) 
Get the value of an output bit from a slave. 

Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
get. 
[in] 
bit The bit offset of the bit to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetOutputBit() [2/2]

ECAPIFUNC 
GetOutputBit ( 
ECAPIFUNC 
GetOutputBit ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
bit, 
unsigned char * pData 
) 
Get the value of an output bit from a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the bit to 
get. 
[in] 
bit The bit offset of the bit to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetOutputByte() [1/2]

ECAPIFUNC 
GetOutputByte ( 
) 
ECAPIFUNC 
GetOutputByte ( 
) 
int 
int 
slaveId, 
byte, 
unsigned char * pData 
Get the value of an output byte from a slave. 
Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetOutputByte() [2/2]

ECAPIFUNC 
GetOutputByte ( 
ECAPIFUNC 
GetOutputByte ( 
int 
int 
int 
masterId, 
slaveId, 
byte, 
unsigned char * pData 
) 
Get the value of an output byte from a slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the byte to 
get. 
[out] 
pData A pointer to a char that 
will receive the data. 

◆GetOutputBytes() [1/2]

ECAPIFUNC 
GetOutputBytes ( 
ECAPIFUNC 
GetOutputBytes ( 
int 
int 
int 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Get the value of multiple output bytes from a slave. 
Parameters 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the head 
byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a char array 
that will receive the data. 
The size of the array 
must be greater than or 
equal to the size 
parameter. 

◆GetOutputBytes() [2/2]

ECAPIFUNC 
GetOutputBytes ( 
ECAPIFUNC 
GetOutputBytes ( 
int 
int 
int 
int 
masterId, 
slaveId, 
byte, 
size, 
unsigned char * pData 
) 
Get the value of multiple output bytes from a slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave. 
[in] 
byte The byte address (within 
the slave) of the head 
byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a char array 
that will receive the data. 
The size of the array 
must be greater than or 
equal to the size 
parameter. 

◆FoERead() [1/8]

ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
wchar_t * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Read FoE data from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 
Remarks 

This function is a variation of FoERead(int slaveId, char* filePath, char* fileName, 
unsigned int password, unsigned int* errCode) that accepts a wchar_t file path. 
Use this function when using Unicode character sets. 

◆FoERead() [2/8]

ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
int 
wchar_t * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Read FoE data from the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 
Remarks 

This function is a variation of FoERead(int masterId, int slaveId, char* filePath, 
char* fileName, unsigned int password, unsigned int* errCode) that accepts a 
wchar_t file path. Use this function when using Unicode character sets. 

◆FoEWrite() [1/8]

ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
wchar_t * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 
FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 
Remarks 

This function is a variation of FoEWrite(int slaveId, char* filePath, char* fileName, 
unsigned int password, unsigned int* errCode) that accepts a wchar_t file path. 
Use this function when using Unicode character sets. 

◆FoEWrite() [2/8]

ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
int 
wchar_t * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 
Remarks 

This function is a variation of FoEWrite(int masterId, int slaveId, char* filePath, 
char* fileName, unsigned int password, unsigned int* errCode) that accepts a 
wchar_t file path. Use this function when using Unicode character sets. 

◆FoERead() [3/8]

ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
wchar_t * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read FoE data from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE read is done. 
[in] 
waitTime An error will be returned 
if the FoE read process 
is not finished within the 
specified wait time. 
Remarks 

This function is a variation of FoERead(int slaveId, char* filePath, char* fileName, 
unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int 
waitTime) that accepts a wchar_t file path. Use this function when using Unicode 
character sets. 


◆ 
FoERead() [4/8] 


ECAPIFUNC 
FoERead ( 
int 
int 
wchar_t * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read FoE data from the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE read is done. 
[in] 
waitTime An error will be returned 
if the FoE read process 
is not finished within the 
specified wait time. 
Remarks 



This function is a variation of FoERead(int masterId, int slaveId, char* filePath, 
char* fileName, unsigned int password, EcFoEReadCallBack callbackFunc, 
unsigned int waitTime) that accepts a wchar_t file path. Use this function when 
using Unicode character sets. 

◆ 
FoEWrite() [3/8] 



ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
wchar_t * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 
FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE write is done. 
[in] 
waitTime An error will be returned 
if the FoE write process 
is not finished within the 
specified wait time. 
Remarks 

This function is a variation of FoEWrite(int slaveId, char* filePath, char* fileName, 
unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int 
waitTime) that accepts a wchar_t file path. Use this function when using Unicode 
character sets. 

◆FoEWrite() [4/8]

ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
int 
wchar_t * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE write is done. 
[in] 
waitTime An error will be returned 
if the FoE write process 
is not finished within the 
specified wait time. 
Remarks 

This function is a variation of FoEWrite(int masterId, int slaveId, char* filePath, 
char* fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime) that accepts a wchar_t file path. Use this function when 
using Unicode character sets. 


◆FoERead() [5/8]
ECAPIFUNC 
FoERead ( int slaveId, 
char * filePath, 
char * fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Read FoE data from the specified slave. 
Parameters 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 

◆FoERead() [6/8]

ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
int 
char * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Read FoE data from the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 
int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 

◆FoEWrite() [5/8]

ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
char * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 

FoE data will be written. 

[in] 
filePath FoE file path. 

[in] 
fileName FoE file name. 

[in] 
password FoE password. 

[out] 
errCode A pointer to an unsigned 

int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 

◆ 
FoEWrite() [6/8] 



ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
int 
char * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
unsigned int * errCode 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 

FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[out] 
errCode A pointer to an unsigned 

int type to which the FoE 
error code from the slave 
will be filled in if there is 
any. 

◆ 
FoERead() [7/8] 



ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
char * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read FoE data from the specified slave. 
Parameters 
[in] 
slaveId ID of the slave from 
which FoE data will be 
read. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE read is done. 
[in] 
waitTime An error will be returned 
if the FoE read process 
is not finished within the 
specified wait time. 

◆FoERead() [8/8]

ECAPIFUNC 
FoERead ( 
ECAPIFUNC 
FoERead ( 
int 
int 
char * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read FoE data from the specified slave. 

Parameters 
[in] 
masterId 
[in] 
slaveId 

[in] 
filePath 
[in] 
fileName 
[in] 
password 
[in] 
callbackFunc 

[in] 
waitTime 

◆ 
FoEWrite() [7/8] 


ID of the master whose 

slave will be operated. 
ID of the slave from 
which FoE data will be 
read. 

FoE file path. 
FoE file name. 
FoE password. 
A pointer to a callback 

function which will be 
called when the process 
of FoE read is done. 

An error will be returned 
if the FoE read process 
is not finished within the 
specified wait time. 


ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
char * 
char * 
slaveId, 
filePath, 
fileName, 
unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write FoE data to the specified slave. 
Parameters 
[in] 
slaveId ID of the slave to which 
FoE data will be written. 
[in] 
filePath FoE file path. 
[in] 
fileName FoE file name. 
[in] 
password FoE password. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of FoE write is done. 
[in] 
waitTime An error will be returned 
if the FoE write process 
is not finished within the 
specified wait time. 

◆FoEWrite() [8/8]

ECAPIFUNC 
FoEWrite ( 
ECAPIFUNC 
FoEWrite ( 
int 
int 
char * 
char * 
masterId, 
slaveId, 
filePath, 
fileName, 
) 
Write FoE data to the specified slave. 

Parameters 
[in] 
masterId 

[in] 
slaveId 

[in] 
filePath 
[in] 
fileName 
[in] 
password 
[in] 
callbackFunc 

[in] 
waitTime 

unsigned int password, 
EcFoEWriteCallBack callbackFunc, 
unsigned int waitTime 
ID of the master whose 
slave will be operated. 
ID of the slave to which 
FoE data will be written. 

FoE file path. 
FoE file name. 
FoE password. 
A pointer to a callback 

function which will be 
called when the process 
of FoE write is done. 

An error will be returned 
if the FoE write process 
is not finished within the 
specified wait time. 

◆SIIWrite() [1/4]

ECAPIFUNC 
SIIWrite ( 
ECAPIFUNC 
SIIWrite ( 
int 
int 
int 
slaveId, 
siiAddr, 
len, 
unsigned char * data, 
bool checkSum = false
) 
Write data to the specified slave's SII EEPROM. 

Parameters 
[in] 
slaveId ID of the slave to which 
SII EEPROM data will be 

written. 
[in] 
siiAddr SII address. 
[in] 
len SII data length. 
[in] 
data A pointer to the data 

array containing the data 
to be written to SII 
EEPROM. 

[in] 
checkSum Also write check sum 
after SII data write. 

◆SIIWrite() [2/4]

ECAPIFUNC 
SIIWrite ( 
ECAPIFUNC 
SIIWrite ( 
int 
int 
int 
int 
masterId, 
slaveId, 
siiAddr, 
len, 
unsigned char * data, 
bool checkSum = false
) 
Write data to the specified slave's SII EEPROM. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SII EEPROM data will be 

written. 

[in] 
siiAddr SII address. 

[in] 
len SII data length. 

[in] 
data A pointer to the data 

array containing the data 
to be written to SII 
EEPROM. 

[in] 
checkSum Also write check sum 
after SII data write. 

◆SIIRead() [1/4]

ECAPIFUNC 
SIIRead ( 
ECAPIFUNC 
SIIRead ( 
int 
int 
int 
slaveId, 
siiAddr, 
len, 
unsigned char * buff 
) 
Read data from the specified slave's SII EEPROM. 

Parameters 
[in] 
slaveId ID of the slave from 
which SII EEPROM data 
will be read. 
[in] 
siiAddr SII address. 
[in] 
len SII data length. 
[out] 
buff A pointer to the buffer to 
which the read SII 
EEPROM data will be 
filled in. 

◆SIIRead() [2/4]

ECAPIFUNC 
SIIRead ( 
ECAPIFUNC 
SIIRead ( 
int 
int 
int 
int 
masterId, 
slaveId, 
siiAddr, 
len, 
unsigned char * buff 
) 
Read data from the specified slave's SII EEPROM. 
Parameters 
[in] 
[in] 
masterId 
slaveId 
ID of the master whose 
slave will be operated. 
ID of the slave from 
which SII EEPROM data 
will be read. 
[in] 
[in] 
[out] 
siiAddr 
len 
buff 
SII address. 
SII data length. 
A pointer to the buffer to 
which the read SII 
EEPROM data will be 
filled in. 

◆SIIWrite() [3/4]
ECAPIFUNC 
SIIWrite ( int slaveId, 
int siiAddr, 
int len, 
unsigned char * data, 
EcSIIWriteCallBack callbackFunc, 
unsigned int waitTime, 

bool checkSum = falsebool checkSum = false
) 
Write data to the specified slave's SII EEPROM. 

Parameters 
[in] 
slaveId ID of the slave to which 
SII EEPROM data will be 

written. 

[in] 
siiAddr SII address. 

[in] 
len SII data length. 

[in] 
data A pointer to the data 

array containing the data 
to be written to SII 
EEPROM. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of SII EEPROM write is 
done. 

[in] 
waitTime An error will be returned 
if the SII EEPROM write 
process is not finished 
within the specified wait 
time. 

[in] 
checkSum Also write check sum 
after SII data write. 

◆SIIWrite() [4/4]
ECAPIFUNC 
SIIWrite ( int masterId, 
int slaveId, 
int siiAddr, 

int int 
len, 
data, 
EcSIIWriteCallBack callbackFunc, 
unsigned int waitTime, 
bool checkSum = false) 
unsigned char * 
Write data to the specified slave's SII EEPROM. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SII EEPROM data will be 

written. 

[in] 
siiAddr SII address. 

[in] 
len SII data length. 

[in] 
data A pointer to the data 

array containing the data 
to be written to SII 
EEPROM. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of SII EEPROM write is 
done. 

[in] 
waitTime An error will be returned 
if the SII EEPROM write 
process is not finished 
within the specified wait 
time. 

[in] 
checkSum Also write check sum 
after SII data write. 


◆SIIRead() [3/4]
ECAPIFUNC 
SIIRead ( 
int 
int 
int 
slaveId, 
siiAddr, 
len, 
EcSIIReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read data from the specified slave's SII EEPROM. 
Parameters 
[in] 
slaveId ID of the slave from 
which SII EEPROM data 
will be read. 
[in] 
siiAddr SII address. 
[in] 
len SII data length. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of SII EEPROM read is 
done. 
[in] 
waitTime An error will be returned 
if the SII EEPROM read 
process is not finished 
within the specified wait 
time. 
◆ 
SIIRead() [4/4] 



ECAPIFUNC 
SIIRead ( 
ECAPIFUNC 
SIIRead ( 
int 
int 
int 
int 
masterId, 
slaveId, 
siiAddr, 
len, 
EcSIIReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read data from the specified slave's SII EEPROM. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SII EEPROM data 

will be read. 
[in] 
siiAddr SII address. 
[in] 
len SII data length. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of SII EEPROM read is 
done. 

[in] 
waitTime An error will be returned 
if the SII EEPROM read 
process is not finished 
within the specified wait 
time. 

◆AoERead() [1/4]
ECAPIFUNC 

AoERead ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned char * readAoEBuff, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
AoERead ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned char * readAoEBuff, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * 
) 
sender = NULL
Read AoE data from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which AoE data will be 

read. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
readLength AoE data length to read. 
[out] 
readAoEBuff A pointer to the buffer to 

which the read AoE data 
will be filled in. 

[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 

[in] 
waitTime An error will be returned 
if the AoERead process 
is not finished within the 



◆AoERead() [2/4]
specified wait time. 
[in]sender Use the specified sender 
info for AoERead. 
ECAPIFUNC 
AoERead ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned char * readAoEBuff, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * sender = NULL) 
Read AoE data from the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which AoE data will be 

read. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 


[in] 
readLength AoE data length to read. 
[out] 
readAoEBuff A pointer to the buffer to 
which the read AoE data 
will be filled in. 
[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 
[in] 
waitTime An error will be returned 
if the AoERead process 
is not finished within the 
specified wait time. 
[in] 
sender Use the specified sender 
info for AoERead. 

◆AoEWrite() [1/4]
ECAPIFUNC 
AoEWrite ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * sender = NULL) 
Write AoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 
AoE data will be written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
writeLength AoE data length to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 
[in] 
waitTime An error will be returned 
if the AoEWrite process 
is not finished within the 
specified wait time. 
[in] 
sender Use the specified sender 
info for AoEWrite. 

◆AoEWrite() [2/4]
ECAPIFUNC 
AoEWrite ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int writeLength, 

unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * sender = NULL) 
Write AoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 

AoE data will be written. 

[in] 
targetNetId Target NetId. 

[in] 
targetPort Target port. 

[in] 
indexGroup Index group. 

[in] 
indexOffset Index offset. 

[in] 
writeLength AoE data length to write. 

[in] 
writeAoEData A pointer to the data 

which will be written to 
AoE. 

[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 

[in] 
waitTime An error will be returned 
if the AoEWrite process 
is not finished within the 
specified wait time. 

[in] 
sender Use the specified sender 
info for AoEWrite. 

◆AoEWriteControl() 

◆AoEWriteControl() [1/4]
ECAPIFUNC 
AoEWriteControl ( int 
slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned short aoeState, 
unsigned short deviceState, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * 
sender = NULL
) 
Write AoE control data to the specified slave. 
Parameters 
[in] 
slaveId ID of the slave to which 
AoE control data will be 
written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
aoeState AoE state. 
[in] 
deviceState Device state. 
[in] 
writeLength AoE control data length 
to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 


any. 

[in] 
waitTime An error will be returned 
if the AoEWriteControl 
process is not finished 
within the specified wait 
time. 

[in] 
sender Use the specified sender 
info for AoEWriteControl. 

ECAPIFUNC 
AoEWriteControl ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned short aoeState, 
unsigned short deviceState, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * sender = NULL) 
◆ 
AoEWriteControl() [2/4] 


Write AoE control data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
AoE control data will be 
written. 


[in] 
targetNetId 
[in] 
targetPort 
[in] 
aoeState 
[in] 
deviceState 
[in] 
writeLength 

[in] 
writeAoEData 

[out] 
errCode 

[in] 
waitTime 

[in] 
sender 

Target NetId. 
Target port. 
AoE state. 
Device state. 
AoE control data length 

to write. 
A pointer to the data 

which will be written to 
AoE. 
A pointer to an unsigned 

int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 

An error will be returned 
if the AoEWriteControl 
process is not finished 
within the specified wait 
time. 

Use the specified sender 
info for AoEWriteControl. 

◆AoEReadWrite() [1/4]
ECAPIFUNC 
AoEReadWrite ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned char * readAoEBuff, 
unsigned int writeLength, 

unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * 
sender = NULL
) 
Read and write AoE data from and to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 
AoE control data will be 

written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
readLength AoE data length to read. 
[out] 
readAoEBuff A pointer to the buffer to 

which the read AoE data 
will be filled in. 
[in] 
writeLength AoE control data length 
to write. 

[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 

[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 

[in] 
waitTime An error will be returned 
if the AoEReadWrite 
process is not finished 
within the specified wait 



◆AoEReadWrite() [2/4]
time. 
[in]sender Use the specified sender 
info for AoEReadWrite. 
ECAPIFUNC 
AoEReadWrite ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned char * readAoEBuff, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
unsigned int * errCode, 
unsigned int waitTime = 0, 
EcAoESender * sender = NULL) 
Read and write AoE data from and to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
AoE control data will be 

written. 

[in] 
targetNetId Target NetId. 

[in] 
targetPort Target port. 


[in] 
[in] 
[in] 
[out] 
indexGroup 
indexOffset 
readLength 
readAoEBuff 
Index group. 
Index offset. 
AoE data length to read. 
A pointer to the buffer to 
which the read AoE data 
will be filled in. 
[in] 
writeLength AoE control data length 
to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[out] 
errCode A pointer to an unsigned 
int type to which the AoE 
error code from the slave 
will be filled in if there is 
any. 
[in] 
waitTime An error will be returned 
if the AoEReadWrite 
process is not finished 
within the specified wait 
time. 
[in] 
sender Use the specified sender 
info for AoEReadWrite. 

◆AoERead() [3/4]
ECAPIFUNC 
AoERead ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 

EcAoEReadCallBack callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL) 
Read AoE data from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which AoE data will be 

read. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
readLength AoE data length to read. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of AoE read is done. 

[in] 
waitTime An error will be returned 
if the AoE read process 
is not finished within the 
specified wait time. 

[in] 
sender Use the specified sender 
info for AoERead. 

◆AoERead() [4/4]
ECAPIFUNC 
AoERead ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 

unsigned short unsigned short 
targetPort, 
indexGroup, 
indexOffset, 
readLength, 
EcAoEReadCallBack callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL) 
unsigned int 
unsigned int 
unsigned int 
Read AoE data from the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which AoE data will be 

read. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
readLength AoE data length to read. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of AoE read is done. 

[in] 
waitTime An error will be returned 
if the AoE read process 
is not finished within the 
specified wait time. 

[in] 
sender Use the specified sender 
info for AoERead. 


◆AoEWrite() [3/4]
ECAPIFUNC 
AoEWrite ( 
int 
slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
EcAoEWriteCallBack callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL
) 
Write AoE data to the specified slave. 
Parameters 
[in] 
slaveId ID of the slave to which 
AoE data will be written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
writeLength AoE data length to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of AoE write is done. 


[in] 
waitTime An error will be returned 
if the AoE write process 
is not finished within the 
specified wait time. 

[in] 
sender Use the specified sender 
info for AoEWrite. 

ECAPIFUNC 
AoEWrite ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
EcAoEWriteCallBack callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL) 
◆ 
AoEWrite() [4/4] 


Write AoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 

AoE data will be written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 


[in] 
indexGroup Index group. 
[in] 
indexOffset Index offset. 
[in] 
writeLength AoE data length to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of AoE write is done. 
[in] 
waitTime An error will be returned 
if the AoE write process 
is not finished within the 
specified wait time. 
[in] 
sender Use the specified sender 
info for AoEWrite. 

◆AoEWriteControl() [3/4]
ECAPIFUNC 
AoEWriteControl ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned short aoeState, 
unsigned short deviceState, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
EcAoEWriteControlC callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL) 

Write AoE control data to the specified slave. 

Parameters 
[in] 
slaveId 

[in] 
targetNetId 
[in] 
targetPort 
[in] 
aoeState 
[in] 
deviceState 
[in] 
writeLength 

[in] 
writeAoEData 

[in] 
callbackFunc 

[in] 
waitTime 

[in] 
sender 

ID of the slave to which 
AoE control data will be 
written. 

Target NetId. 
Target port. 
AoE state. 
Device state. 
AoE control data length 

to write. 
A pointer to the data 

which will be written to 
AoE. 
A pointer to a callback 

function which will be 
called when the process 
of AoE control data write 
is done. 

An error will be returned 
if the AoE control data 
write process is not 
finished within the 
specified wait time. 

Use the specified sender 
info for AoEWriteControl. 

◆AoEWriteControl() [4/4]
ECAPIFUNC 
AoEWriteControl ( int masterId, 
int slaveId, 

unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned short aoeState, 
unsigned short deviceState, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
callbackFunc, 
waitTime, 
) 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned short aoeState, 
unsigned short deviceState, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
callbackFunc, 
waitTime, 
) 
EcAoEWriteControlC 
unsigned int 
EcAoESender * 
sender = NULL
Write AoE control data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
AoE control data will be 

written. 
[in] 
targetNetId Target NetId. 
[in] 
targetPort Target port. 
[in] 
aoeState AoE state. 
[in] 
deviceState Device state. 
[in] 
writeLength AoE control data length 

to write. 
[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of AoE control data write 
is done. 


[in] 
waitTime An error will be returned 
if the AoE control data 
write process is not 
finished within the 
specified wait time. 

[in] 
sender Use the specified sender 
info for AoEWriteControl. 

ECAPIFUNC 
AoEReadWrite ( int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
EcAoEReadCallBack callbackFunc, 
unsigned int waitTime, 
EcAoESender * sender = NULL) 
◆ 
AoEReadWrite() [3/4] 


Read and write AoE data from and to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 
AoE control data will be 

written. 

[in] 
targetNetId Target NetId. 

[in] 
targetPort Target port. 

[in] 
indexGroup Index group. 


[in] 
indexOffset Index offset. 
[in] 
readLength AoE data length to read. 
[in] 
writeLength AoE control data length 

to write. 

[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of AoE read and write is 
done. 

[in] 
waitTime An error will be returned 
if the AoE read and write 
process is not finished 
within the specified wait 
time. 

[in] 
sender Use the specified sender 
info for AoEReadWrite. 

ECAPIFUNC 
AoEReadWrite ( int masterId, 
int slaveId, 
unsigned char targetNetId[6], 
unsigned short targetPort, 
unsigned int indexGroup, 
unsigned int indexOffset, 
unsigned int readLength, 
unsigned int writeLength, 
unsigned char * writeAoEData, 
EcAoEReadCallBack callbackFunc, 
◆ 
AoEReadWrite() [4/4] 



unsigned int waitTime, 
EcAoESender * 
sender = NULL
) 
Read and write AoE data from and to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
AoE control data will be 

written. 

[in] 
targetNetId Target NetId. 

[in] 
targetPort Target port. 

[in] 
indexGroup Index group. 

[in] 
indexOffset Index offset. 

[in] 
readLength AoE data length to read. 

[in] 
writeLength AoE control data length 

to write. 

[in] 
writeAoEData A pointer to the data 
which will be written to 
AoE. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of AoE read and write is 
done. 

[in] 
waitTime An error will be returned 
if the AoE read and write 
process is not finished 
within the specified wait 
time. 

[in] 
sender Use the specified sender 
info for AoEReadWrite. 


◆SoERead() [1/4]
ECAPIFUNC 
SoERead ( int slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int buffSize, 
unsigned char * readSoEBuffer, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int 
) 
waitTime = 0
Read SoE data from the specified slave. 
Parameters 
[in] 
slaveId ID of the slave from 
which SoE data will be 
read. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
buffSize Size of the buffer that is 
filled in with the read 
SoE data. 
[out] 
readSoEBuffer A pointer to the buffer to 
which the read SoE data 
will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actually read SoE data 
size will be filled in. 


[out] 
errCode A pointer to an unsigned 
int type to which the SoE 
error code from the slave 
will be filled in if there is 
any. 
[in] 
waitTime An error will be returned 
if the SoE read process 
is not finished within the 
specified wait time. 

◆SoERead() [2/4]
ECAPIFUNC 
SoERead ( 
int 
int 
masterId, 
slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int buffSize, 
unsigned char * readSoEBuffer, 
unsigned int * actualSize, 
unsigned int * errCode, 
unsigned int 
) 
waitTime = 0
Read SoE data from the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SoE data will be 
read. 


ECAPIFUNC 
SoEWrite ( 
int 
slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int dataSize, 
unsigned char * writeSoEData, 
unsigned int * errCode, 
unsigned int 
) 
waitTime = 0
Write SoE data to the specified slave. 
Parameters 
[in] 
slaveId ID of the slave to which 
SoE data will be written. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
dataSize Size of the SoE data to 
be written. 
[in] 
writeSoEData A pointer to the data 
which will be written to 
SoE. 
[out] 
errCode A pointer to an unsigned 
int type to which the SoE 
error code from the slave 
will be filled in if there is 
any. 
[in] 
waitTime An error will be returned 
if the SoE write process 
is not finished within the 
specified wait time. 


ECAPIFUNC 
SoEWrite ( 
◆ 
SoEWrite() [2/4] 


masterId, 
slaveId, 
waitTime = 0
ID of the master whose 
slave will be operated. 
ID of the slave to which 
SoE data will be written. 

Drive No. 
Element flags. 
IDN. 
Size of the SoE data to 

be written. 
A pointer to the data 

which will be written to 
SoE. 
A pointer to an unsigned 

int type to which the SoE 
error code from the slave 
will be filled in if there is 

int 
int 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int dataSize, 
unsigned char * writeSoEData, 
unsigned int * errCode, 
Write SoE data to the specified slave. 

Parameters 
[in] 
masterId 

[in] 
slaveId 

[in] 
driveNo 
[in] 
elementFlags 
[in] 
idn 
[in] 
dataSize 

[in] 
writeSoEData 

[out] 
errCode 

unsigned int 
) 

[in] 
waitTime 
any. 
An error will be returned 
if the SoE write process 
is not finished within the 
specified wait time. 
◆ 
SoERead() [3/4] 



ECAPIFUNC 
SoERead ( 
ECAPIFUNC 
SoERead ( 
int 
slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
EcSoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read SoE data from the specified slave. 

Parameters 
[in] 
slaveId ID of the slave from 
which SoE data will be 

read. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
callbackFunc A pointer to a callback 

function which will be 
called when the process 
of SoE read is done. 

[in] 
waitTime An error will be returned 
if the SoE read process 
is not finished within the 
specified wait time. 

◆ 
SoERead() [4/4] 



ECAPIFUNC 
SoERead ( 
ECAPIFUNC 
SoERead ( 
int 
int 
masterId, 
slaveId, 
) 
Read SoE data from the specified slave. 

Parameters 
[in] 
masterId 
[in] 
slaveId 

[in] 
driveNo 
[in] 
elementFlags 
[in] 
idn 
[in] 
callbackFunc 

[in] 
waitTime 

unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
EcSoEReadCallBack callbackFunc, 
unsigned int waitTime 
ID of the master whose 

slave will be operated. 
ID of the slave from 
which SoE data will be 
read. 

Drive No. 
Element flags. 
IDN. 
A pointer to a callback 

function which will be 
called when the process 
of SoE read is done. 

An error will be returned 
if the SoE read process 
is not finished within the 
specified wait time. 

◆SoEWrite() [3/4]

ECAPIFUNC 
SoEWrite ( 
ECAPIFUNC 
SoEWrite ( 
int 
slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int dataSize, 
unsigned char * writeSoEData, 
EcSoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write SoE data to the specified slave. 
Parameters 
[in] 
slaveId ID of the slave to which 
SoE data will be written. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
dataSize Size of the SoE data to 
be written. 
[in] 
writeSoEData A pointer to the data 
which will be written to 
SoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of SoE read is done. 
[in] 
waitTime An error will be returned 
if the SoE read process 
is not finished within the 
specified wait time. 


◆SoEWrite() [4/4]
ECAPIFUNC 
SoEWrite ( 
int 
int 
masterId, 
slaveId, 
unsigned char driveNo, 
unsigned char elementFlags, 
unsigned short idn, 
unsigned int dataSize, 
unsigned char * writeSoEData, 
EcSoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write SoE data to the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
SoE data will be written. 
[in] 
driveNo Drive No. 
[in] 
elementFlags Element flags. 
[in] 
idn IDN. 
[in] 
dataSize Size of the SoE data to 
be written. 
[in] 
writeSoEData A pointer to the data 
which will be written to 
SoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of SoE read is done. 



◆VoERead() [1/4]
[in]waitTime An error will be returned 
if the SoE read process 
is not finished within the 
specified wait time. 

ECAPIFUNC 
VoERead ( 
int 
slaveId, 
unsigned int * vendorId, 
unsigned short * vendorType, 
unsigned int buffSize, 
unsigned char * readVoEBuffer, 
unsigned int * actualSize, 
unsigned int 
) 
waitTime = 0
Read VoE data from the specified slave. 
Parameters 
[in] 
slaveId ID of the slave from 
which VoE data will be 
read. 
[out] 
vendorId Read vendor ID. 
[out] 
vendorType Read vendor type. 
[in] 
buffSize Size of the buffer that is 
filled in with the read 
VoE data. 
[out] 
readVoEBuffer A pointer to an unsigned 
int type to which the 
actually read VoE data 
size will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type which actually 
read VoE data size will 
be filled in. 
[in] 
waitTime An error will be returned 
if the VoE read process 
is not finished within the 
specified wait time. 


◆VoERead() [2/4]
ECAPIFUNC 
VoERead ( int masterId, 
int slaveId, 
unsigned int * vendorId, 
unsigned short * vendorType, 
unsigned int buffSize, 
unsigned char * readVoEBuffer, 
unsigned int * actualSize, 
unsigned int 
) 
waitTime = 0
Read VoE data from the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which VoE data will be 
read. 
[out] 
vendorId Read vendor ID. 
[out] 
vendorType Read vendor type. 
[in] 
buffSize Size of the buffer that is 
filled in with the read 
VoE data. 
[out] 
readVoEBuffer A pointer to an unsigned 
int type to which the 
actually read VoE data 
size will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type which actually 
read VoE data size will 


[in] 
waitTime 
be filled in. 
An error will be returned 
if the VoE read process 
is not finished within the 
specified wait time. 
◆ 
VoEWrite() [1/4] 



ECAPIFUNC 
VoEWrite ( 
ECAPIFUNC 
VoEWrite ( 
int 
slaveId, 
unsigned int vendorId, 
unsigned short vendorType, 
unsigned int dataSize, 
unsigned char * writeVoEData, 
unsigned int waitTime = 0
) 
Write VoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 

VoE data will be written. 

[in] 
vendorId Write vendor ID. 

[in] 
vendorType Write vendor type. 

[in] 
dataSize Size of the VoE data to 

be written. 

[in] 
writeVoEData A pointer to the data 
which will be written to 
VoE. 

[in] 
waitTime An error will be returned 
if the VoE write process 
is not finished within the 
specified wait time. 

◆ 
VoEWrite() [2/4] 



ECAPIFUNC 
VoEWrite ( 
ECAPIFUNC 
VoEWrite ( 
int 
int 
masterId, 
slaveId, 
unsigned int vendorId, 
unsigned short vendorType, 
unsigned int dataSize, 
unsigned char * writeVoEData, 
unsigned int waitTime = 0
) 
Write VoE data to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 

VoE data will be written. 

[in] 
vendorId Write vendor ID. 

[in] 
vendorType Write vendor type. 

[in] 
dataSize Size of the VoE data to 

be written. 

[in] 
writeVoEData A pointer to the data 
which will be written to 
VoE. 

[in] 
waitTime An error will be returned 
if the VoE write process 
is not finished within the 
specified wait time. 

◆VoERead() [3/4]

ECAPIFUNC 
VoERead ( 
ECAPIFUNC 
VoERead ( 
int 
slaveId, 
EcVoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read VoE data from the specified slave. 
Parameters 
[in] 
slaveId ID of the slave from 
which VoE data will be 
read. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of VoE read is done. 
[in] 
waitTime An error will be returned 
if the VoE read process 
is not finished within the 
specified wait time. 

◆VoERead() [4/4]

ECAPIFUNC 
VoERead ( 
ECAPIFUNC 
VoERead ( 
int 
int 
masterId, 
slaveId, 
EcVoEReadCallBack callbackFunc, 
unsigned int waitTime 
) 
Read VoE data from the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which VoE data will be 
read. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of VoE read is done. 
[in] 
waitTime An error will be returned 
if the VoE read process 
is not finished within the 
specified wait time. 

◆VoEWrite() [3/4]

ECAPIFUNC 
VoEWrite ( 
ECAPIFUNC 
VoEWrite ( 
int 
slaveId, 
unsigned int vendorId, 
unsigned short vendorType, 
unsigned int dataSize, 
unsigned char * writeVoEData, 
EcVoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write VoE data to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave to which 

VoE data will be written. 

[in] 
vendorId Write vendor ID. 

[in] 
vendorType Write vendor type. 

[in] 
dataSize Size of the VoE data to 

be written. 

[in] 
writeVoEData A pointer to the data 
which will be written to 
VoE. 

[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of VoE write is done. 

[in] 
waitTime An error will be returned 
if the VoE write process 
is not finished within the 
specified wait time. 

◆VoEWrite() [4/4]

ECAPIFUNC 
VoEWrite ( int masterId, 
int slaveId, 
unsigned int vendorId, 
unsigned short vendorType, 
unsigned int dataSize, 
unsigned char * writeVoEData, 
ECAPIFUNC 
VoEWrite ( int masterId, 
int slaveId, 
unsigned int vendorId, 
unsigned short vendorType, 
unsigned int dataSize, 
unsigned char * writeVoEData, 
EcVoEWriteCallBack callbackFunc, 
unsigned int waitTime 
) 
Write VoE data to the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
VoE data will be written. 
[in] 
vendorId Write vendor ID. 
[in] 
vendorType Write vendor type. 
[in] 
dataSize Size of the VoE data to 
be written. 
[in] 
writeVoEData A pointer to the data 
which will be written to 
VoE. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of VoE write is done. 
[in] 
waitTime An error will be returned 
if the VoE write process 
is not finished within the 
specified wait time. 


◆SetAxisMode() [1/2]
ECAPIFUNC 
SetAxisMode ( int slaveId, 
int axisId, 
EcOperationMode::T mode 
) 
Set the axis operation mode for a specified slave axis. The operation mode set by 
this function overrides the operation mode generated by the CoreMotion module 
(including the mode changed by SetAxisCommandMode function) until NONE is 
set by this function. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis whose operation 
mode will be set. 
[in] 
axisId ID of the axis to which 
the operation model will 
be set. 
[in] 
mode Operation mode. 

◆SetAxisMode() [2/2]

ECAPIFUNC 
SetAxisMode ( 
ECAPIFUNC 
SetAxisMode ( 
int 
int 
int 
masterId, 
slaveId, 
axisId, 
EcOperationMode::T mode 
) 
Set the axis operation mode for a specified slave axis. The operation mode set by 
this function overrides the operation mode generated by the CoreMotion module 
(including the mode changed by SetAxisCommandMode function) until NONE is 

set by this function. 
Parameters 
[in] 
[in] 
masterId 
slaveId 
ID of the master whose 
slave will be operated. 
ID of the slave with the 
axis whose operation 
mode will be set. 
[in] 
axisId ID of the axis to which 
the operation model will 
be set. 
[in] 
mode Operation mode. 

◆StartAxisPP() [1/2]
ECAPIFUNC 
StartAxisPP ( int slaveId, 
int axisIndex, 
int targetPos, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char immediately = -1, 

char relative = -1char relative = -1
) 
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP 

operation will be started. 
[in] 
targetPos Target position. 
[in] 
profileVel Profile velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
immediately Start profile immediately. 

If -1, use previous 
setting. If 0, start profile 
after previous profile 
motion end. If 1, start 
profile immediately 
which will override 
previous profile motion. 

[in] 
relative Position specified by 
targetPos is a relative 
motion. If -1, use 
previous setting. If 0, 
position specified by 
targetPos is an absolute 
position. If 1, position 
specified by targetPos is 
a relative motion. 

◆StartAxisPP() [2/2]

immediatelimmediatel
ECAPIFUNC 
StartAxisPP ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
targetPos, 
y = -1, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char 
char 
) 
relative = -1
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP 

operation will be started. 
[in] 
targetPos Target position. 
[in] 
profileVel Profile velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
immediately Start profile immediately. 

If -1, use previous 
setting. If 0, start profile 
after previous profile 
motion end. If 1, start 
profile immediately 
which will override 
previous profile motion. 


[in] 
relative Position specified by 
targetPos is a relative 
motion. If -1, use 
previous setting. If 0, 
position specified by 
targetPos is an absolute 
position. If 1, position 
specified by targetPos is 
a relative motion. 

◆StartAxisPV() [1/4]
ECAPIFUNC 
StartAxisPV ( 
int 
int 
int 
slaveId, 
axisIndex, 
targetVel, 
unsigned int profileAcc, 
unsigned int profileDec 
) 
Start the PV operation for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis for which PV 
operation will be started. 
[in] 
axisIndex ID of axis for which PV 
operation will be started. 
[in] 
targetVel Target velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 

◆ 
StartAxisPV() [2/4] 



◆StartAxisPV() [2/4]
ECAPIFUNC 
StartAxisPV ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
targetVel, 
unsigned int profileAcc, 
unsigned int profileDec 
) 
Start the PV operation for a specified slave axis. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which PV 
operation will be started. 
[in] 
axisIndex ID of axis for which PV 
operation will be started. 
[in] 
targetVel Target velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 

◆StartAxisPV() [3/4]

ECAPIFUNC 
StartAxisPV ( 
ECAPIFUNC 
StartAxisPV ( 
int 
int 
int 
slaveId, 
axisIndex, 
targetVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
unsigned short maxTorque 
) 
Start the PV operation for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis for which PV 
operation will be started. 
[in] 
axisIndex ID of axis for which PV 
operation will be started. 
[in] 
targetVel Target velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
maxTorque Maximum torque. 

◆StartAxisPV() [4/4]

ECAPIFUNC 
StartAxisPV ( 
ECAPIFUNC 
StartAxisPV ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
targetVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
unsigned short maxTorque 
) 
Start the PV operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which PV 
operation will be started. 
[in] 
axisIndex ID of axis for which PV 

operation will be started. 
[in] 
targetVel Target velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
maxTorque Maximum torque. 

◆StartAxisTQ() [1/4]

ECAPIFUNC 
StartAxisTQ ( 
) 
ECAPIFUNC 
StartAxisTQ ( 
) 
int 
int 
slaveId, 
axisIndex, 
short targetTrq 
Start the TQ operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which TQ 
operation will be started. 
[in] 
axisIndex ID of axis for which TQ 
operation will be started. 
[in] 
targetTrq Target torque. 

◆StartAxisTQ() [2/4]

ECAPIFUNC 
StartAxisTQ ( 
ECAPIFUNC 
StartAxisTQ ( 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
short targetTrq 
) 
Start the TQ operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which TQ 
operation will be started. 
[in] 
axisIndex ID of axis for which TQ 
operation will be started. 
[in] 
targetTrq Target torque. 

◆StartAxisTQ() [3/4]

ECAPIFUNC 
StartAxisTQ ( 
ECAPIFUNC 
StartAxisTQ ( 
int 
int 
short 
slaveId, 
axisIndex, 
targetTrq, 
unsigned int maxMotorSpeed 
) 
Start the TQ operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which TQ 
operation will be started. 
[in] 
axisIndex ID of axis for which TQ 
operation will be started. 
[in] 
targetTrq Target torque. 
[in] 
maxMotorSpeed Maximum motor speed. 

◆StartAxisTQ() [4/4]

ECAPIFUNC 
StartAxisTQ ( 
ECAPIFUNC 
StartAxisTQ ( 
int 
int 
int 
short 
masterId, 
slaveId, 
axisIndex, 
targetTrq, 
unsigned int maxMotorSpeed 
) 
Start the TQ operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which TQ 
operation will be started. 
[in] 
axisIndex ID of axis for which TQ 
operation will be started. 
[in] 
targetTrq Target torque. 
[in] 
maxMotorSpeed Maximum motor speed. 

◆StartAxisHM() [1/4]

ECAPIFUNC 
StartAxisHM ( 
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc 
) 
Start the HM operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which HM 
operation will be started. 
[in] 
axisIndex ID of axis for which HM 
operation will be started. 
[in] 
method Homing method (refer to 
manual of servo). 
[in] 
switchSpeed Operation velocity until 
the switch signal is 
detected. 
[in] 
zeroSpeed Operation velocity until 
the home position is 
detected. 
[in] 
hmAcc Acceleration and 
deceleration during the 
HM mode. 

◆StartAxisHM() [2/4]

ECAPIFUNC 
StartAxisHM ( 
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc 
) 
Start the HM operation for a specified slave axis. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which HM 
operation will be started. 
[in] 
axisIndex ID of axis for which HM 
operation will be started. 
[in] 
method Homing method (refer to 
manual of servo). 
[in] 
switchSpeed Operation velocity until 
the switch signal is 
detected. 
[in] 
zeroSpeed Operation velocity until 
the home position is 
detected. 
[in] 
hmAcc Acceleration and 
deceleration during the 
HM mode. 

◆StartAxisHM() [3/4]

◆StartAxisHM() [3/4]
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc, 
int homeOffset 
) 
Start the HM operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which HM 
operation will be started. 
[in] 
axisIndex ID of axis for which HM 
operation will be started. 
[in] 
method Homing method (refer to 
manual of servo). 
[in] 
switchSpeed Operation velocity until 
the switch signal is 
detected. 
[in] 
zeroSpeed Operation velocity until 
the home position is 
detected. 
[in] 
hmAcc Acceleration and 
deceleration during the 
HM mode. 
[in] 
homeOffset home offset after homing 
done. 

◆ 
StartAxisHM() 

◆StartAxisHM() [4/4]
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc, 
int homeOffset 
) 
Start the HM operation for a specified slave axis. 

Parameters 
[in] 
masterId 

[in] 
slaveId 

[in] 
axisIndex 
[in] 
method 
[in] 
switchSpeed 

[in] 
zeroSpeed 

[in] 
hmAcc 

[in] 
homeOffset 

ID of the master whose 

slave will be operated. 
ID of the slave with the 
axis for which HM 
operation will be started. 

ID of axis for which HM 

operation will be started. 
Homing method (refer to 
manual of servo). 

Operation velocity until 
the switch signal is 
detected. 

Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave whose 
axis halt state will be 
released. 
[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆HaltAxisRelease() [2/2]

ECAPIFUNC 
HaltAxisRelease ( 
ECAPIFUNC 
HaltAxisRelease ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master of the 

slave whose axis halt 
state will be released. 

[in] 
slaveId ID of the slave whose 

axis halt state will be 
released. 

[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆OpenSerialChannel() [1/4]
ECAPIFUNC 
OpenSerialChannel ( int slaveId, 
int chnlId, 
wchar_t * comName, 
DCB * dcb, 
COMMTIMEOUTS * timeout, 
unsigned int * error = NULL) 
Open a serial channel to the specified slave. 
Parameters 

[in] 
slaveId ID of the slave whose 
serial channel will be 

opened. 
[in] 
chnlId ID of the channel which 
will be opened. 
[in] 
comName The name of the COM 
port that will be opened 
for this channel. 
[in] 
dcb Parameters used to 
open the COM port. 
[in] 
timeout Wait timeout for opening 
the COM port. 
[out] 
error A pointer to an unsigned 
int type to which the 
error code will be filled in 
if there is any. 

Remarks 

This function is a variation of OpenSerialChannel(int slaveId, int chnlId, char* 
comName, DCB* dcb, COMMTIMEOUTS* timeout, unsigned int* error) that 
accepts a wchar_t COM name. Use this function when using Unicode character 
sets. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 

◆OpenSerialChannel() [2/4]
ECAPIFUNC 
OpenSerialChannel ( int masterId, 
int slaveId, 
int chnlId, 
wchar_t * comName, 
DCB * dcb, 

COMMTIMEOUTS * timeout, 
unsigned int * error = NULL) 
COMMTIMEOUTS * timeout, 
unsigned int * error = NULL) 
Open a serial channel to the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
serial channel will be 
opened. 
[in] 
chnlId ID of the channel which 
will be opened. 
[in] 
comName The name of the COM 
port that will be opened 
for this channel. 
[in] 
dcb Parameters used to 
open the COM port. 
[in] 
timeout Wait timeout for opening 
the COM port. 
[out] 
error A pointer to an unsigned 
int type to which the 
error code will be filled in 
if there is any. 

Remarks 

This function is a variation of OpenSerialChannel(int masterId, int slaveId, int 
chnlId, char* comName, DCB* dcb, COMMTIMEOUTS* timeout, unsigned int* 
error) that accepts a wchar_t COM name. Use this function when using Unicode 
character sets. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 


◆OpenSerialChannel() [3/4]
ECAPIFUNC 
OpenSerialChanne
l 

( int 
int 
char * 
DCB * 
slaveId, 
chnlId, 
comName, 
dcb, 
COMMTIMEOUTS * timeout, 
unsigned int * error = NULL
) 
Open a serial channel to the specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
serial channel will be 
opened. 
[in] 
chnlId ID of the channel which 
will be opened. 
[in] 
comName The name of the COM 
port that will be opened 
for this channel. 
[in] 
dcb Parameters used to 
open the COM port. 
[in] 
timeout Wait timeout for opening 
the COM port. 
[out] 
error A pointer to an unsigned 
int type to which error 
code the will be filled in if 
there is any. 

Remarks 

This function can only be called from a Windows application, and cannot be called 



from an RTX application built using the RTX SDK. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 

◆OpenSerialChannel() [4/4]
ECAPIFUNC 
OpenSerialChanne
l 

( int 
int 
int 
char * 
DCB * 
masterId, 
slaveId, 
chnlId, 
comName, 
dcb, 
COMMTIMEOUTS * timeout, 
unsigned int * error = NULL
) 
Open a serial channel to the specified slave. 
Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
serial channel will be 
opened. 
[in] 
chnlId ID of the channel which 
will be opened. 
[in] 
comName The name of the COM 
port that will be opened 
for this channel. 
[in] 
dcb Parameters used to 
open the COM port. 
[in] 
timeout Wait timeout for opening 


the COM port. 
[out[out] 
error A pointer to an unsigned 
int type to which the 
error code will be filled in 
if there is any. 

Remarks 

This function can only be called from a Windows application, and cannot be called 
from an RTX application built using the RTX SDK. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 

◆ 
CloseSerialChannel() [1/2] 



ECAPIFUNC 
CloseSerialChannel ( 
) 
ECAPIFUNC 
CloseSerialChannel ( 
) 
int 
slaveId, 
int chnlId 
Close an opened serial channel for the specified slave. 

Parameters 
[in] 
slaveId ID of the slave whose 
serial channel will be 
closed. 
[in] 
chnlId ID of the channel which 
will be closed. 
Remarks 

This function can only be called from a Windows application, and cannot be called 
from an RTX application built using the RTX SDK. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 

◆CloseSerialChannel() [2/2]

ECAPIFUNC 
CloseSerialChannel ( 
ECAPIFUNC 
CloseSerialChannel ( 
int 
int 
masterId, 
slaveId, 
int chnlId 
) 
Close an opened serial channel for the specified slave. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave whose 
serial channel will be 
closed. 
[in] 
chnlId ID of the channel which 
will be closed. 
Remarks 

This function can only be called from a Windows application, and cannot be called 
from an RTX application built using the RTX SDK. 

When calling this function from the C++ library, the EcApi_Win.lib library 
must be linked. 



 

