[
    {
        "No": 1,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": "\n[in] errCode The error code to get the string representation of.\n[in] pString A char array that will contain the string representation of the error.\n[in] size The size of the char array in number of characters.",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the ApiBufferErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class ApiBuffer will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the ApiBuffer class or creating a device.",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 2,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 3,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 4,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 5,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 6,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 7,
        "FunctionPython": "def CreateApiBuffer(channel, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size)",
        "Parameters": "[in] channel The API buffer channel. This value must be between 0 and maxApiBufferChannel-1. \n[in] size The size of the API buffer channel memory space in bytes. \n",
        "Remarks": "This function creates a memory space for use with the API buffer. The API buffer stores data such as the API type and API arguments in this space. An API with large function arguments will require more space in the API buffer to store. The CommandQueueIsFull error will be returned when attempting to add an API to the buffer when there is not enough space. As API functions in the API buffer are executed, the memory space they occupied will be freed.\n\nA larger memory space will allow more APIs to be stored in the API buffer.\n\nThe minimum size of the memory space is 262216 bytes. Specifying a smaller size will cause this function to return the RequestedBufferTooSmall error.\n\nThe maximum size of the memory space is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nThe created memory space can be closed using FreeApiBuffer. It is not necessary to call the FreeApiBuffer function when closing the engine, as any open API buffer memory spaces are automatically closed when the engine closes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Create a memory space for use with the API buffer. This function must be called before the API buffer functions can be used."
    },
    {
        "No": 8,
        "FunctionPython": "def CreateApiBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel. This value must be between 0 and maxApiBufferChannel-1. \n",
        "Remarks": "This function creates a memory space for use with the API buffer. See CreateApiBuffer for more information regarding the memory space of an API buffer channel.\n\nCompared to CreateApiBuffer, this function creates a memory space with size equal to maxDefaultApiBufferSize. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Create a memory space for use with the API buffer using the default memory size."
    },
    {
        "No": 9,
        "FunctionPython": "def CreateApiBuffer(channel, size, sizeUnit)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size, SizeUnit::T sizeUnit)",
        "Parameters": "[in] channel The API buffer channel. This value must be between 0 and maxApiBufferChannel-1. \n[in] size The size of the API buffer channel memory space. The units of the size is specified by the sizeUnit argument. \n[in] sizeUnit The units of the size argument. The available options are Byte, Kilobyte, and Megabyte. \n",
        "Remarks": "This function creates a memory space for use with the API buffer. See CreateApiBuffer for more information regarding the memory space of an API buffer channel.\n\nCompared to CreateApiBuffer, the size of the memory space can be specified in one of several units. The units of the memory space has no effect on the API buffer operation. The minimum size of the memory space is 262144 bytes (or the equivalent in kilobytes or megabytes). \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 10,
        "FunctionPython": "def FreeApiBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreeApiBuffer(unsigned int channel)",
        "Parameters": NaN,
        "Remarks": "This function closes an API buffer memory space created by CreateApiBuffer. API buffer memory spaces that remain open when the engine is closed will automatically be closed. An error will be returned if this function is called while the API buffer is executing. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Close an API buffer memory space"
    },
    {
        "No": 11,
        "FunctionPython": "def StartRecordBufferChannel(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartRecordBufferChannel(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel. This value must be between 0 and maxApiBufferChannel-1. ",
        "Remarks": "After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) from the device calling this function will cause the API to be stored in the API buffer instead of being executed immediately. The recorded API sequence can be executed using the Execute function.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Start recording APIs to the API buffer channel.  "
    },
    {
        "No": 12,
        "FunctionPython": "def EndRecordBufferChannel()\u00a0",
        "FunctionC++": "WMX3APIFUNC EndRecordBufferChannel()",
        "Parameters": NaN,
        "Remarks": "After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) from the device calling this function will be executed normally.\n\nTo resume recording APIs to the API buffer channel for this device, call the StartRecordBufferChannel function.\n\nIf this function is called while not recording API functions to an API buffer channel, this function will return the NotRecording error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "End recording APIs to the API buffer channel."
    },
    {
        "No": 13,
        "FunctionPython": "def GetRecordingBufferChannel()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetRecordingBufferChannel(int *channel, unsigned char *enable)",
        "Parameters": "[out] channel A pointer to an int that will contain the API buffer channel that is currently recording APIs through the device calling this function. This will contain -1 if this device is not recording APIs to an API buffer channel. \n[out] enable A pointer to an unsigned char that will contain 1 if the device calling this function is currently recording APIs to an API buffer channel and 0 if not. \n",
        "Remarks": "This function can be used to obtain whether a device is currently recording APIs to the API buffer or executing them normally. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get the currently recording API buffer channel, if any"
    },
    {
        "No": 14,
        "FunctionPython": "def Execute(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Execute(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel to execute. ",
        "Remarks": "This function starts the execution an API buffer channel. APIs in the API buffer channel will be executed in the order that they were added to the buffer. Functions such as Wait can delay the execution of APIs, which may be useful if the API buffer contains several motions that must be executed one after the other after each motion completes.\n\nIt is possible to dynamically add more APIs to the API buffer as it executes. As long as there is a steady flow of new APIs, the API buffer can continue executing indefinitely. As the memory used to store APIs in the API buffer is limited, dynamically adding API functions to the API buffer can cause older APIs that have already executed to be overwritten. If this occurs, the API buffer cannot be rewound with Rewind.\n\nThis function will block until the API buffer channel starts (typically for 1ms). At the time that this function returns without any errors, any other function in this class can be called assuming that the API buffer channel has started executing APIs.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Execute an API buffer."
    },
    {
        "No": 15,
        "FunctionPython": "def Halt(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Halt(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel to halt. ",
        "Remarks": "Stops the execution of an API buffer. This function will stop the API buffer from further calling API functions from the buffer, but it will not stop the effects of APIs that have already been executed. For example, if this function is called after a motion API is executed from the API buffer, the motion will run to completion and will not stop.\n\nAfter stopping an API buffer using this function, execution can be resumed from the next API function in the API buffer by calling the Execute API function again.\n\nThis function will block until the API buffer channel stops (typically for 1ms). At the time that this function returns without any errors, any other function in this class can be called assuming that the API buffer channel has stopped executing APIs.\n\nIf this function is called for an API buffer that is executing the Motion::Wait function, the API buffer will be stopped after the wait completes. For more information, see Halting Execution. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Halt an API buffer."
    },
    {
        "No": 16,
        "FunctionPython": "def Clear(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Clear(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel to clear. ",
        "Remarks": "This function clears all APIs in the API buffer.\n\nThis function will block until the API buffer channel is cleared (typically for 1ms). At the time that this function returns without any errors, any other function in this class can be called assuming that the API buffer channel has been cleared. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Clear an API buffer."
    },
    {
        "No": 17,
        "FunctionPython": "def Rewind(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Rewind(unsigned int channel)",
        "Parameters": "[in] channel The API buffer channel to rewind. ",
        "Remarks": "If ApiBufferState is Active, this function rewinds the API buffer to the beginning and executes it as if Execute had been called.\n\nIf ApiBufferState is Stop, this function rewinds the API buffer to the beginning so that it may be executed again using Execute.\n\nAlso see API Buffer Statuses section for state transitions.\n\nIf APIs are dynamically added to the buffer as the buffer executes, it is possible for older API commands to become overwritten by new commands if the old command has already executed and the buffer has run out of space to add the new command. If this occurs, the buffer cannot be rewound to the first command and the RewindFailedFirstCommandOverwritten error will be returned. The API buffer cannot be rewound until the buffer is cleared and a new API sequence recorded.\n\nThis function will block until the API buffer channel is rewound (typically for 1ms). At the time that this function returns without any errors, any other function in this class can be called assuming that the API buffer channel has been rewound. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Rewind an API buffer."
    },
    {
        "No": 18,
        "FunctionPython": "def GetStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetStatus(unsigned int channel, ApiBufferStatus *pStatus)",
        "Parameters": "[in] channel The API buffer channel to get the status. \n[out] pStatus A pointer to a ApiBufferStatus that will contain the current status of the API buffer. \n",
        "Remarks": "This function will obtain the current status of an API buffer channel. This function should be called cyclically to continuously check the operation of the API buffer channel. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get the current status of an API buffer. "
    },
    {
        "No": 19,
        "FunctionPython": "def SetOptions(channel, pOptions)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "Parameters": "[in] channel The API buffer channel to set the options. \n[in] pOptions A pointer to an object of the ApiBufferOptions class that contains execution options for the API buffer. \n",
        "Remarks": "This function will set the execution options of an API buffer channel. The execution options affect how the API buffer will be executed. See ApiBufferOptions for additional information regarding each available option.\n\nIf this function is not called, the default execution options will be used. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Set options for an API buffer."
    },
    {
        "No": 20,
        "FunctionPython": "def GetOptions(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "Parameters": "[in] channel The API buffer channel to get the options. \n[out] pOptions A pointer to an object of the ApiBufferOptions class that will contain the execution options for the API buffer. \n",
        "Remarks": "This function will get the currently applied execution options of an API buffer channel. The execution options are set using the SetOptions function.\n\nIf this function is called before calling the SetOptions function, the default execution options will be returned. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get the currently applied options for an API buffer."
    },
    {
        "No": 21,
        "FunctionPython": "def SetWatch(channel, pWatch)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "Parameters": "[in] channel The API buffer channel to set the watch options. \n[in] pWatch A pointer to an object of the ApiBufferWatch that contains the watch options for the API buffer. \n",
        "Remarks": "This function will set the watch options of an API buffer channel. When the watch function is enabled, the API buffer will stop execution of API functions in the buffer when one of the watched axes are in the servo off, offline, amp alarm, or limit switch triggered states. The watched axes are checked for these states every communication cycle.\n\nWhen an watch error occurs, the API buffer will stop executing additional API functions, but the motion from API functions that have already been executed will not stop.\n\nThe watch options can be configured to execute another API buffer channel when an watch error occurs. The API buffer channel that is executed this way typically contains an error handling routine, such as stopping all axes or generating an emergency stop.\n\nWatch function statuses, such as whether the watch error has occurred, the error code of the watch error, and the axis that triggered the watch error, can be obtained using the GetStatus function.\n\nThe watch function is disabled by default. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 22,
        "FunctionPython": "def GetWatch(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "Parameters": "[in] channel The API buffer channel to get the watch options. \n[out] pWatch A pointer to an object of the ApiBufferWatch that will contain the watch options for the API buffer. \n",
        "Remarks": "This function will get the currently applied watch options of an API buffer channel. The watch options are set using the SetWatch function.\n\nIf this function is called before calling the SetWatch function, the default watch options will be returned. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 23,
        "FunctionPython": "def Sleep(milliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC Sleep(unsigned int milliseconds)",
        "Parameters": "[in] milliseconds The length of the sleep command in milliseconds. ",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nWhen this function is executed from inside an API buffer, the execution of the API buffer will stop for the specified amount of time.\n\nThis function can add delays in between API functions in the API buffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add a sleep command to an API buffer."
    },
    {
        "No": 24,
        "FunctionPython": "def Wait(int axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "Parameters": "[in] axis The axis to wait to for. ",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nWhen this function is executed from inside an API buffer, the execution of APIs will stop until the specified axis is in the Idle operation state.\n\nThis function can delay the execution of the next API in the API buffer until the motion command of an axis completes.\n\nThis function has the same effect as when the Wait(ApiBufferCondition* condition) function is called with the AxisIdle condition with the specified axis.\n\nIf the specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be generated and logged in the ApiBufferStatus. If the stopOnError option was set to 1 when calling the Execute function, the API buffer execution will stop when this occurs. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 25,
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A set of axes to wait for. ",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nWhen this function is executed from inside an API buffer, the execution of APIs will stop until all the axes in the specified set of axes are in the Idle operation state.\n\nThis function can delay the execution of the next API in the API buffer until the motion commands of multiple axes complete.\n\nThis function has the same effect as when the Wait(ApiBufferCondition* condition) function is called with the AxisIdle condition with the specified set of axes.\n\nIf any specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be generated and logged in the ApiBufferStatus. If the stopOnError option was set to 1 when calling the Execute function, the API buffer execution will stop when this occurs. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 26,
        "FunctionPython": "def Wait_ApiBufferCondition(condition)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(ApiBufferCondition *condition)",
        "Parameters": "[in] condition A pointer to a ApiBufferCondition that specifies the wait condition. ",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nWhen this function is executed from inside an API buffer, the execution of APIs will stop until the specified condition is satisfied.\n\nThis function can add variable length delays in between API functions in the API buffer. For example, the API buffer can be programmed to execute the next API in the buffer when the motion command of an axis completes.\n\nFor ApiBufferCondition types with one or more axis parameters, this function will monitor the specified axes for errors. If any specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be generated and logged in the ApiBufferStatus. If the stopOnError option is set to 1 and passed to the Execute function, the API buffer execution will stop when this occurs. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 27,
        "FunctionPython": "def FlowIf(condition)",
        "FunctionC++": "WMX3APIFUNC FlowIf(ApiBufferCondition *condition, ApiBufferCondition *wait=NULL)",
        "Parameters": "[in] condition A pointer to a ApiBufferCondition that specifies the \"If\" condition. \n[in] wait An optional parameter that specifies the condition at which the \"If\" condition is evaluated. If not specified, or if set to the default value of NULL, the condition will be evaluated immediately when the \"If\" command is encountered during the execution of the API buffer. \n",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nWhen this function is executed from inside an API buffer, the specified condition will be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer sequence until the next \"Else\", \"Else If\", or \"End If\" command will be skipped. If the condition evaluates to TRUE, all APIs in the API buffer sequence until the next \"Else\", \"Else If\", or \"End If\" command will be executed normally.\n\n\"If\" commands may be nested up to 100 levels. For example, the following sequence is allowed:\n\nIf If If Else EndIf Else If Else EndIf EndIf EndIf\n\nAn additional \"wait\" condition may be specified. If a \"wait\" condition is specified, the condition for the \"If\" command is only evaluated when the \"wait\" condition becomes TRUE. While the \"wait\" condition is FALSE, the execution of the API buffer sequence will stop and the evaluation of the \"If\" condition will be deferred. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add an \"If\" command to an API buffer."
    },
    {
        "No": 28,
        "FunctionPython": "def FlowElseIf(condition)\u00a0",
        "FunctionC++": "WMX3APIFUNC FlowElseIf(ApiBufferCondition *condition)",
        "Parameters": "[in] condition A pointer to a ApiBufferCondition that specifies the \"Else If\" condition. ",
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nThis command can be added between an \"If\" command and an \"End If\" command, and before any \"Else\" commands.\n\nWhen this function is executed from inside an API buffer, the specified condition will be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer sequence until the next \"Else\" or \"End If\" command will be skipped. If the condition evaluates to TRUE, all APIs in the API buffer sequence until the next \"Else\" or \"End If\" command will be executed normally. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add an \"Else If\" command to an API buffer."
    },
    {
        "No": 29,
        "FunctionPython": "def FlowElse()\u00a0",
        "FunctionC++": "WMX3APIFUNC FlowElse()",
        "Parameters": NaN,
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nThis command can be added between an \"If\" command and an \"End If\" command.\n\nWhen this function is executed from inside an API buffer, all APIs between this command and the next \"End If\" command will be executed only if the preceding \"If\" or \"Else If\" command evaluates to FALSE. If the preceding \"If\" or \"Else If\" command evaluates to TRUE, then all APIs between this command and the next \"End If\" command will be skipped. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add an \"Else\" command to an API buffer. "
    },
    {
        "No": 30,
        "FunctionPython": "def FlowEndIf()\u00a0",
        "FunctionC++": "WMX3APIFUNC FlowEndIf()",
        "Parameters": NaN,
        "Remarks": "This API may be added to an API buffer that is recording. This API will not have any effect when called while the device is not recording to an API buffer channel.\n\nThis command designates the end of an \"If\"...\"Else If\"...\"Else\"...\"End If\" sequence. APIs in the API buffer after this command will be executed normally. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": "Add an \"End If\" command to an API buffer."
    },
    {
        "No": 31,
        "FunctionPython": "def GetOutputModuleId()\u00a0",
        "FunctionC++": "int GetOutputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 32,
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an unsigned int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 33,
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "ApiBuffer Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 34,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the ErrorCode enum. All errors returned by functions in class WMX3Api will be defined in this enum. Errors returned by functions in other classes may not be defined in this enum, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the WMX3Api class or creating a device.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 35,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 36,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 37,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 38,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 39,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 40,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 41,
        "FunctionPython": "def SetPitchErrorCompensation(axis, pitchErrCompData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData)",
        "Parameters": "[in] axis The axis to set the pitch error compensation parameters. \n[in] pitchErrCompData A pointer to a PitchErrorCompensationFreePositionData object that contains the pitch error compensation parameters. \n",
        "Remarks": "This function is an overloaded version of the SetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData) function that allows pitch error compensation to be started in free position mode.\n\nIn free position mode, the position of each pitch point is specified instead of the pitch interval. This allows the spacing between pitch points to be variable.\n\nThe difference between the largest pitch position and the smallest pitch position must be less than or equal to maxPitchErrorCompFreePositionRangeMultiplier times the distance between the two closest pitch positions. For example, 1000, 1039, 1040, and 41000 is a valid sequence of pitch positions because the difference between the largest pitch position and the smallest pitch position (41000 - 1000 = 40000) is less than or equal to the maxPitchErrorCompFreePositionRangeMultiplier (40000) times the distance between the two closest pitch positions (1040 - 1039 = 1). If the difference between the largest pitch position and the smallest pitch position is too large, the PitchPositionRangeTooLarge error will be returned.\n\nOther than the way in which the pitch point positions are specified, the specifications are the same as normal (pitch interval mode) pitch error compensation.\n\nIf this function is called with the enable parameter set to 1, pitch error compensation is immediately enabled. Otherwise, if this parameter is set to 0, pitch error compensation can be started by calling the EnablePitchErrorCompensation function.\n\nIf pitch error compensation is currently enabled, it must be disabled with the DisablePitchErrorCompensation function before the pitch error compensation parameters can be changed with this function.\n\nThe current offset applied by pitch error compensation is stored in compensation in the CoreMotionStatus structure obtained by the GetStatus function.\n\nPitch error compensation is automatically disabled after starting any homing operation, as the pitch error is invalid if the home position is not known.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Set pitch error compensation parameters. "
    },
    {
        "No": 42,
        "FunctionPython": "def SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData)",
        "Parameters": "[in] axis The axis to set the pitch error compensation parameters. \n[in] pitchErrCompData A pointer to a PitchErrorCompensationFreePositionData object that contains the pitch error compensation parameters. \n",
        "Remarks": "This function is an overloaded version of the SetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData) function that allows pitch error compensation to be started in free position mode.\n\nIn free position mode, the position of each pitch point is specified instead of the pitch interval. This allows the spacing between pitch points to be variable.\n\nThe difference between the largest pitch position and the smallest pitch position must be less than or equal to maxPitchErrorCompFreePositionRangeMultiplier times the distance between the two closest pitch positions. For example, 1000, 1039, 1040, and 41000 is a valid sequence of pitch positions because the difference between the largest pitch position and the smallest pitch position (41000 - 1000 = 40000) is less than or equal to the maxPitchErrorCompFreePositionRangeMultiplier (40000) times the distance between the two closest pitch positions (1040 - 1039 = 1). If the difference between the largest pitch position and the smallest pitch position is too large, the PitchPositionRangeTooLarge error will be returned.\n\nOther than the way in which the pitch point positions are specified, the specifications are the same as normal (pitch interval mode) pitch error compensation.\n\nIf this function is called with the enable parameter set to 1, pitch error compensation is immediately enabled. Otherwise, if this parameter is set to 0, pitch error compensation can be started by calling the EnablePitchErrorCompensation function.\n\nIf pitch error compensation is currently enabled, it must be disabled with the DisablePitchErrorCompensation function before the pitch error compensation parameters can be changed with this function.\n\nThe current offset applied by pitch error compensation is stored in compensation in the CoreMotionStatus structure obtained by the GetStatus function.\n\nPitch error compensation is automatically disabled after starting any homing operation, as the pitch error is invalid if the home position is not known.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Set free position mode pitch error compensation parameters."
    },
    {
        "No": 43,
        "FunctionPython": "def GetPitchErrorCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData)",
        "Parameters": "[in] axis The axis to get the pitch error compensation parameters. \n[out] pitchErrCompData A pointer to a PitchErrorCompensationData object that will contain the pitch error compensation parameters. \n",
        "Remarks": "This function obtains the pitch error compensation parameters and whether or not pitch error compensation is enabled for an axis.\n\nIf the pitch error compensation parameters were specified in free position mode (with the SetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData) function), this function cannot be used to read the pitch error compensation parameters. The overloaded GetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData) function must be used instead. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get pitch error compensation parameters. "
    },
    {
        "No": 44,
        "FunctionPython": "def GetPitchErrorCompensation_FreePosition(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensation(int axis, PitchErrorCompensationFreePositionData *pitchErrCompData)",
        "Parameters": "[in] axis The axis to get the pitch error compensation parameters. \n[out] pitchErrCompData A pointer to a PitchErrorCompensationFreePositionData object that will contain the pitch error compensation parameters. \n",
        "Remarks": "This function obtains the free position mode pitch error compensation parameters and whether or not pitch error compensation is enabled for an axis.\n\nIf the pitch error compensation parameters were specified in pitch interval mode (with the SetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData) function), this function cannot be used to read the pitch error compensation parameters. The overloaded GetPitchErrorCompensation(int axis, PitchErrorCompensationData *pitchErrCompData) function must be used instead. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get free position mode pitch error compensation parameters."
    },
    {
        "No": 45,
        "FunctionPython": "def EnablePitchErrorCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnablePitchErrorCompensation(int axis)",
        "Parameters": "[in] axis The axis to enable pitch error compensation. ",
        "Remarks": "This function enables pitch error compensation for an axis. Pitch error compensation parameters must be set beforehand using the SetPitchErrorCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Enable pitch error compensation."
    },
    {
        "No": 46,
        "FunctionPython": "def DisablePitchErrorCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC DisablePitchErrorCompensation(int axis)",
        "Parameters": "[in] axis The axis to disable pitch error compensation. ",
        "Remarks": "This function disables pitch error compensation for an axis. Pitch error compensation can be enabled again using the EnablePitchErrorCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Disable pitch error compensation."
    },
    {
        "No": 47,
        "FunctionPython": "def GetPitchErrorCompensationAtPosition(axis, pos)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPitchErrorCompensationAtPosition(int axis, double pos, double *pCompensation)",
        "Parameters": "[in] axis The axis to get the pitch error compensation amount. \n[in] pos The position to get the pitch error compensation amount at. \n[out] pCompensation A pointer to a double type variable that returns the pitch error compensation amount at the specified position. \n",
        "Remarks": "This function returns the pitch error compensation amount that would be applied if the axis is at the specified position.\n\nEven if pitch error compensation is disabled, this function returns the pitch error compensation amount based on the last set pitch error compensation data. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Obtain the pitch error compensation amount at the specified position."
    },
    {
        "No": 48,
        "FunctionPython": "def Set2DPitchErrorCompensation(channel, pitchErrCompData2D)\u00a0",
        "FunctionC++": "WMX3APIFUNC Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D)",
        "Parameters": "[in] channel The channel to set the two-dimensional pitch error compensation parameters. Up to max2dPitchErrorCompChannel channels may be defined. \n[in] pitchErrCompData2D A pointer to a TwoDPitchErrorCompensationData object that contains the two-dimensional pitch error compensation parameters. \n",
        "Remarks": "Two-Dimensional (2D) pitch error compensation is a more flexible and powerful version of pitch error compensation in which the offset amount is determined from the positions of two reference axes instead of just one axis. The offset is added to the position command of either of the two reference axes or to a third axis.\n\nIf this function is called with the enable parameter set to 1, two-dimensional pitch error compensation is immediately enabled. Otherwise, if this parameter is set to 0, two-dimensional pitch error compensation can be started by calling the Enable2DPitchErrorCompensation function.\n\nIf two-dimensional pitch error compensation is currently enabled, it must be disabled with the Disable2DPitchErrorCompensation function before the two-dimensional pitch error compensation parameters can be changed with this function.\n\nThe current offset applied by two-dimensional pitch error compensation to an axis is stored in compensation in the CoreMotionStatus structure obtained by the GetStatus function.\n\nWhen two-dimensional pitch error compensation is disabled for an axis, all other two-dimensional pitch error compensation channels for which that axis is one of the reference axes are also disabled to prevent any axes from moving.\n\nTwo-dimensional pitch error compensation is automatically disabled after starting any homing operation, as the pitch error is invalid if the home position is not known.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Set two-dimensional (2D) pitch error compensation parameters."
    },
    {
        "No": 49,
        "FunctionPython": "def Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)\u00a0",
        "FunctionC++": "WMX3APIFUNC Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D)",
        "Parameters": "[in] channel The channel to set the two-dimensional pitch error compensation parameters. Up to max2dPitchErrorCompChannel channels may be defined. \n[in] pitchErrCompData2D A pointer to a TwoDPitchErrorCompensationFreePositionData object that contains the two-dimensional pitch error compensation parameters. \n",
        "Remarks": "This function is an overloaded version of the Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D) function that allows two-dimensional pitch error compensation to be started in free position mode.\n\nIn free position mode, the reference axis positions of each pitch point are specified instead of the pitch intervals. This allows the spacing between pitch points to be variable.\n\nThe difference between the largest pitch position and the smallest pitch position of each reference axis must be less than or equal to max2dPitchErrorCompFreePositionRangeMultiplier times the distance between the two closest pitch positions of that reference axis. For example, 1000, 1039, 1040, and 41000 is a valid sequence of pitch positions because the difference between the largest pitch position and the smallest pitch position (41000 - 1000 = 40000) is less than or equal to the max2dPitchErrorCompFreePositionRangeMultiplier (40000) times the distance between the two closest pitch positions (1040 - 1039 = 1). If the difference between the largest pitch position and the smallest pitch position is too large for either reference axis, the PitchPositionRangeTooLarge error will be returned.\n\nOther than the way in which the pitch point positions are specified, the specifications are the same as normal (pitch interval mode) two-dimensional pitch error compensation.\n\nIf this function is called with the enable parameter set to 1, two-dimensional pitch error compensation is immediately enabled. Otherwise, if this parameter is set to 0, two-dimensional pitch error compensation can be started by calling the Enable2DPitchErrorCompensation function.\n\nIf two-dimensional pitch error compensation is currently enabled, it must be disabled with the Disable2DPitchErrorCompensation function before the two-dimensional pitch error compensation parameters can be changed with this function.\n\nThe current offset applied by two-dimensional pitch error compensation to an axis is stored in compensation in the CoreMotionStatus structure obtained by the GetStatus function.\n\nWhen two-dimensional pitch error compensation is disabled for an axis, all other two-dimensional pitch error compensation channels for which that axis is one of the reference axes are also disabled to prevent any axes from moving.\n\nTwo-dimensional pitch error compensation is automatically disabled after starting any homing operation, as the pitch error is invalid if the home position is not known.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Set free position two-dimensional (2D) pitch error compensation parameters. "
    },
    {
        "No": 50,
        "FunctionPython": "def Get2DPitchErrorCompensation(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D)",
        "Parameters": "[in] channel The channel to get the two-dimensional pitch error compensation parameters. Up to max2dPitchErrorCompChannel channels may be defined. \n[out] pitchErrCompData2D A pointer to a TwoDPitchErrorCompensationData object that will contain the two-dimensional pitch error compensation parameters. \n",
        "Remarks": "This function obtains the two-dimensional pitch error compensation parameters and whether or not two-dimensional pitch error compensation is currently enabled for a two-dimensional pitch error compensation channel.\n\nIf the two-dimensional pitch error compensation parameters were specified in free position mode (with the Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D) function), this function cannot be used to read the two-dimensional pitch error compensation parameters. The overloaded Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D) function must be used instead.\n\nIn the returned TwoDPitchErrorCompensationData object, the pitchCompensationValue at indices greater than or equal to the pitchCount of each respective axis will be set to 0. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get two-dimensional (2D) pitch error compensation parameters."
    },
    {
        "No": 51,
        "FunctionPython": "def Get2DPitchErrorCompensation_FreePosition(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationFreePositionData *pitchErrCompData2D)",
        "Parameters": "[in] channel The channel to get the two-dimensional pitch error compensation parameters. Up to max2dPitchErrorCompChannel channels may be defined. \n[out] pitchErrCompData2D A pointer to a TwoDPitchErrorCompensationFreePositionData object that will contain the two-dimensional pitch error compensation parameters. \n",
        "Remarks": "This function obtains the two-dimensional pitch error compensation parameters and whether or not two-dimensional pitch error compensation is currently enabled for a two-dimensional pitch error compensation channel.\n\nIf the two-dimensional pitch error compensation parameters were specified in pitch interval mode (with the Set2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D) function), this function cannot be used to read the two-dimensional pitch error compensation parameters. The overloaded Get2DPitchErrorCompensation(unsigned int channel, TwoDPitchErrorCompensationData *pitchErrCompData2D) function must be used instead.\n\nIn the returned TwoDPitchErrorCompensationData object, the pitchCompensationValue at indices greater than or equal to the pitchCount of each respective axis will be set to 0. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get free position two-dimensional (2D) pitch error compensation parameters. "
    },
    {
        "No": 52,
        "FunctionPython": "def Enable2DPitchErrorCompensation(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Enable2DPitchErrorCompensation(unsigned int channel)",
        "Parameters": "[in] channel The channel to enable two-dimensional pitch error compensation. Up to max2dPitchErrorCompChannel channels may be defined. ",
        "Remarks": "This function enables the specified two-dimensional pitch error compensation channel. Two-dimensional pitch error compensation parameters must be set beforehand using the SetPitchErrorCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Enable two-dimensional (2D) pitch error compensation."
    },
    {
        "No": 53,
        "FunctionPython": "def Disable2DPitchErrorCompensation(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC Disable2DPitchErrorCompensation(unsigned int channel)",
        "Parameters": "[in] channel The channel to disable two-dimensional pitch error compensation. Up to max2dPitchErrorCompChannel channels may be defined. ",
        "Remarks": "This function disables the specified two-dimensional pitch error compensation channel. Two-dimensional pitch error compensation can be enabled again using the Enable2DPitchErrorCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Disable two-dimensional (2D) pitch error compensation."
    },
    {
        "No": 54,
        "FunctionPython": "def Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)\u00a0",
        "FunctionC++": "WMX3APIFUNC Get2DPitchErrorCompensationAtPosition(unsigned int channel, double refPos1, double refPos2, double *pCompensation)",
        "Parameters": "[in] channel The channel to get the two-dimensional pitch error compensation amount. Up to max2dPitchErrorCompChannel channels may be defined. \n[in] refPos1 The position of the first reference axis to get the two-dimensional pitch error compensation amount at. \n[in] refPos2 The position of the second reference axis to get the two-dimensional pitch error compensation amount at. \n[out] pCompensation A pointer to a double type variable that returns the two-dimensional pitch error compensation amount at the specified reference axis positions. \n",
        "Remarks": "This function returns the two-dimensional pitch error compensation amount that would be applied if the reference axes are at the specified positions.\n\nEven if two-dimensional pitch error compensation is disabled, this function returns the two-dimensional pitch error compensation amount based on the last set two-dimensional pitch error compensation data. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Obtain the two-dimensional (2D) pitch error compensation amount at the specified position."
    },
    {
        "No": 55,
        "FunctionPython": "def SetBacklashCompensation(axis, pBacklashCompData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetBacklashCompensation(int axis, BacklashCompensationData *pBacklashCompData)",
        "Parameters": "[in] axis The axis to set the backlash compensation parameters. \n[in] pBacklashCompData A pointer to a BacklashCompensationData object that contains the backlash compensation parameters. \n",
        "Remarks": "Backlash compensation will apply an offset based on the direction of motion. Parameters determine whether this offset is applied immediately upon changing direction, or if it is applied more gradually over a short distance after changing direction.\n\nIf backlash compensation is currently enabled, it must be disabled with the DisableBacklashCompensation function before the backlash compensation parameters can be changed with this function.\n\nThe current backlash compensation parameters and whether backlash compensation is enabled for an axis can be obtained using the GetBacklashCompensation function. The current offset applied by backlash compenation is stored in compensation in the CoreMotionStatus structure obtained by the GetStatus function.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Set backlash compensation parameters. "
    },
    {
        "No": 56,
        "FunctionPython": "def GetBacklashCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetBacklashCompensation(int axis, BacklashCompensationData *pBacklashCompData)",
        "Parameters": "[in] axis The axis to get the backlash compensation parameters. \n[out] pBacklashCompData A pointer to a BacklashCompensationData object that will contain the backlash compensation parameters. \n",
        "Remarks": "This function obtains the backlash compensation parameters and whether or not backlash compensation is enabled for an axis. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Get backlash compensation parameters."
    },
    {
        "No": 57,
        "FunctionPython": "def EnableBacklashCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnableBacklashCompensation(int axis)",
        "Parameters": "[in] axis The axis to enable backlash compensation. ",
        "Remarks": "This function enables backlash compensation for an axis. Backlash compensation parameters must be set beforehand using the SetBacklashCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Enable backlash compensation."
    },
    {
        "No": 58,
        "FunctionPython": "def DisableBacklashCompensation(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC DisableBacklashCompensation(int axis)",
        "Parameters": "[in] axis The axis to disable backlash compensation. ",
        "Remarks": "This function disables backlash compensation for an axis. Backlash compensation can be enabled again using the EnableBacklashCompensation function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Compensation Class\u00a0",
        "Instruction": "Disable backlash compensation."
    },
    {
        "No": 59,
        "FunctionPython": "def GetInputModuleId()\u00a0",
        "FunctionC++": "int GetInputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 60,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied. \n[out] initialState A pointer to a char that will contain the initialState (triggered or untriggered) of the input function. This determines whether the event can trigger when the event is enabled.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 61,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 62,
        "FunctionPython": "def GetOutputModuleId()\u00a0",
        "FunctionC++": "int GetOutputModuleId()=0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 63,
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)=0",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an unsigned int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 64,
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)=0",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 65,
        "FunctionPython": "def GetModuleId()\u00a0",
        "FunctionC++": "int GetModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "unsigned int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 66,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an unsigned int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 67,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 68,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the ErrorCode enum. All errors returned by functions in class WMX3Api will be defined in this enum. Errors returned by functions in other classes may not be defined in this enum, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the WMX3Api class or creating a device.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 69,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 70,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 71,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 72,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 73,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 74,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 75,
        "FunctionPython": "def GetStatus()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetStatus(CoreMotionStatus *status)",
        "Parameters": "[out] status A pointer to an object of the CoreMotionStatus class that will be filled in with the current system status. ",
        "Remarks": "This function obtains the main status of the entire system and all axes. This function is typically called at regular intervals using a timer loop in order to monitor the status of the system and update the user interface.\n\nThis function has a comparatively low execution overhead, as the statuses are read directly from memory without communicating with the engine.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current system status from the engine."
    },
    {
        "No": 76,
        "FunctionPython": "def ExecEStop(level)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecEStop(EStopLevel::T level)",
        "Parameters": "[in] level The level of the emergency stop. ",
        "Remarks": "This function is used to stop all axes in emergency situations.\n\nThe exact effect of the emergency stop will depend on the specified emergency stop \"level\". It is possible to call this function while the system is already in emergency stop state to increase the \"level\" of the emergency stop to a higher level. However, this function cannot be used to reduce the \"level\" of the emergency stop to a lower level.\n\nAfter an emergency stop is triggered, the system enters an emergency stop state and axes will be unable to be commanded. The ReleaseEStop API function must be called to release the emergency stop state and allow axes to be commanded again. The current emergency stop state of the system can be read using the GetStatus function to obtain the emergencyStop and emergencyStopLevel statuses.\n\nThis function executes a software emergency stop, which is not suitable for critical emergencies. A hardware-based emergency stop must also be integrated physically on the machine. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Initiate an emergency stop to stop the motion of all axes."
    },
    {
        "No": 77,
        "FunctionPython": "def ReleaseEStop()\u00a0",
        "FunctionC++": "WMX3APIFUNC ReleaseEStop()",
        "Parameters": NaN,
        "Remarks": "This function clears the emergency stop state that is set by the ExecEStop function. See ExecEStop for additional information. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the emergency stop state to allow the axes to be controlled again."
    },
    {
        "No": 78,
        "FunctionPython": "def TriggerFlightRecorder()\u00a0",
        "FunctionC++": "WMX3APIFUNC TriggerFlightRecorder()",
        "Parameters": NaN,
        "Remarks": "This function will immediately trigger the flight recorder to write the flight recorder data to file, regardless of the flight recorder conditions specified in FlightRecorderParam. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Trigger the flight recorder to write the flight recorder data to file."
    },
    {
        "No": 79,
        "FunctionPython": "def ResetFlightRecorder()\u00a0",
        "FunctionC++": "WMX3APIFUNC ResetFlightRecorder()",
        "Parameters": NaN,
        "Remarks": "Once the flight recorder is triggered, it can normally not be triggered again until the engine is restarted to prevent the flight recorder file from being overwritten. When this function is called after the flight recorder has been triggered, the flight recorder will be reset so that it may be triggered again. When the flight recorder is triggered again, the previous flight recorder file will be overwritten unless it has been moved to a different directory or the Flight Recorder Time Stamp parameter is set to enabled. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Reset the flight recorder so that it may be triggered again."
    },
    {
        "No": 80,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 81,
        "FunctionPython": "def StartPos(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the motion command. ",
        "Remarks": "This function moves the specified axis to the specified absolute position using a motion profile that is calculated by the specified parameters.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command. "
    },
    {
        "No": 82,
        "FunctionPython": "def StartMov(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the motion. ",
        "Remarks": "This function moves the specified axis to the specified relative position using a motion profile that is calculated by the specified parameters. The target position is relative to the command position of the axis at the time that this function is executed. If this function overrides another position command, the target position will be relative to the target position of the position command that is overridden.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command."
    },
    {
        "No": 83,
        "FunctionPython": "def StartPos_Trigger(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(TriggerPosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the TriggerPosCommand class that contains the parameters of the motion command. ",
        "Remarks": "This function moves the specified axis to the specified absolute position using a motion profile that is calculated by the specified parameters. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command."
    },
    {
        "No": 84,
        "FunctionPython": "def StartMov_Trigger(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(TriggerPosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the TriggerPosCommand class that contains the parameters of the motion command. ",
        "Remarks": "This function moves the specified axis to the specified relative position using a motion profile that is calculated by the specified parameters. The target position is relative to the command position of the axis at the time that this function is executed. If this function overrides another position command, the target position will be relative to the target position of the position command that is overridden. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command."
    },
    {
        "No": 85,
        "FunctionPython": "def StartPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the motion command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves the specified axis to the specified absolute position using a motion profile that is calculated by the specified parameters. The motion will only begin when the specified multiple-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command with multiple trigger events. "
    },
    {
        "No": 86,
        "FunctionPython": "def StartMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the motion command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves the specified axis to the specified relative position using a motion profile that is calculated by the specified parameters. The target position is relative to the command position of the axis at the time that this function is executed. If this function overrides another position command, the target position will be relative to the target position of the position command that is overridden. The motion will only begin when the specified multiple-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command with multiple trigger events. "
    },
    {
        "No": 87,
        "FunctionPython": "def StartPos(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartPos function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute position commands for multiple axes. "
    },
    {
        "No": 88,
        "FunctionPython": "def StartMov(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartMov function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative position commands for multiple axes."
    },
    {
        "No": 89,
        "FunctionPython": "def StartPos_Trigger(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, TriggerPosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartPos function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes."
    },
    {
        "No": 90,
        "FunctionPython": "def StartMov_Trigger(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, TriggerPosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartMov function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes."
    },
    {
        "No": 91,
        "FunctionPython": "def StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. All commanded axes share the same trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartPos function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands with multiple trigger events for multiple axes."
    },
    {
        "No": 92,
        "FunctionPython": "def StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. All commanded axes share the same trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartMov function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands with multiple trigger events for multiple axes. "
    },
    {
        "No": 93,
        "FunctionPython": "def StartLinearIntplPos(pLinearIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves any number of axes to the specified absolute target positions. The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position linear interpolation motion command."
    },
    {
        "No": 94,
        "FunctionPython": "def StartLinearIntplMov(pLinearIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves any number of axes to the specified relative target positions (relative to the command positions of the axes at the time that this function is executed). The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position linear interpolation motion command. "
    },
    {
        "No": 95,
        "FunctionPython": "def StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves any number of axes to the specified absolute target positions. The motion will only begin when the specified trigger condition is satisfied. The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position triggered linear interpolation motion command."
    },
    {
        "No": 96,
        "FunctionPython": "def StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves any number of axes to the specified relative target positions (relative to the command positions of the axes at the time that this function is executed). The motion will only begin when the specified trigger condition is satisfied. The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position triggered linear interpolation motion command."
    },
    {
        "No": 97,
        "FunctionPython": "def StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplPos(LinearIntplCommand *pLinearIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves any number of axes to the specified absolute target positions. The motion will only begin when the specified multi-event trigger condition is satisfied. The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position triggered linear interpolation motion command with multiple trigger events."
    },
    {
        "No": 98,
        "FunctionPython": "def StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLinearIntplMov(LinearIntplCommand *pLinearIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pLinearIntplCommand A pointer to an object of the LinearIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves any number of axes to the specified relative target positions (relative to the command positions of the axes at the time that this function is executed). The motion will only begin when the specified multi-event trigger condition is satisfied. The motion is interpolated so that the axes move together in a straight line.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position triggered linear interpolation motion command with multiple trigger events."
    },
    {
        "No": 99,
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the arc length are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length. "
    },
    {
        "No": 100,
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length."
    },
    {
        "No": 101,
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the absolute end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc. "
    },
    {
        "No": 102,
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the relative center and end positions of the arc. "
    },
    {
        "No": 103,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 104,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. A relative through position (a position on the arc that the axes pass through, relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 105,
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc length are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc."
    },
    {
        "No": 106,
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 107,
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc radius are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 108,
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc radius are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 109,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc."
    },
    {
        "No": 110,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. A relative through position (a position on the arc that the axes pass through) and the relative end position of the arc are specified.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 111,
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the arc length are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length."
    },
    {
        "No": 112,
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length. "
    },
    {
        "No": 113,
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the absolute end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc."
    },
    {
        "No": 114,
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the relative center and end positions of the arc."
    },
    {
        "No": 115,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc."
    },
    {
        "No": 116,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. A relative through position (a position on the arc that the axes pass through, relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 117,
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc length are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc. "
    },
    {
        "No": 118,
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 119,
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc radius are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc."
    },
    {
        "No": 120,
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc radius are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the relative end position of the arc."
    },
    {
        "No": 121,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 122,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. A relative through position (a position on the arc that the axes pass through) and the relative end position of the arc are specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 123,
        "FunctionPython": "def StartCircularIntplPos_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the arc length are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center position of the arc and the arc length."
    },
    {
        "No": 124,
        "FunctionPython": "def StartCircularIntplMov_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndLengthCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndLengthCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center position of the arc and the arc length. "
    },
    {
        "No": 125,
        "FunctionPython": "def StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(CenterAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute center position of the arc and the absolute end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center and end positions of the arc."
    },
    {
        "No": 126,
        "FunctionPython": "def StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(CenterAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the CenterAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative center position of the arc (relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center and end positions of the arc."
    },
    {
        "No": 127,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 128,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. A relative through position (a position on the arc that the axes pass through, relative to the command positions of the axes at the time that this function is executed) and the relative end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc."
    },
    {
        "No": 129,
        "FunctionPython": "def StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(LengthAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc length are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the absolute end position of the arc."
    },
    {
        "No": 130,
        "FunctionPython": "def StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(LengthAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the LengthAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc length are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the relative end position of the arc."
    },
    {
        "No": 131,
        "FunctionPython": "def StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The absolute end position of the arc and the arc radius are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the absolute end position of the arc. "
    },
    {
        "No": 132,
        "FunctionPython": "def StartCircularIntplMov_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(RadiusAndEndCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the RadiusAndEndCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves two axes in a circular arc. The relative end position of the arc (relative to the command positions of the axes at the time that this function is executed) and the arc radius are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the relative end position of the arc."
    },
    {
        "No": 133,
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. An absolute through position (a position on the arc that the axes pass through) and the absolute end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
    },
    {
        "No": 134,
        "FunctionPython": "def StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCircularIntplMov(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pCircularIntplCommand A pointer to an object of the ThroughAndEnd3DCircularIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function moves three axes in a circular arc in three dimensional space. A relative through position (a position on the arc that the axes pass through) and the relative end position of the arc are specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc. "
    },
    {
        "No": 135,
        "FunctionPython": "def StartHelicalIntplPos(pHelicalIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. ",
        "Remarks": "This function moves three axes in a helical motion. The linear motion of the helix must be entirely along one axis, and the rotational motion of the helix must be entirely in the remaining two axes. The absolute center position of the rotational motion, the rotation amount in degrees, and the absolute end position of the linear motion are specified.\n\nThe rotation amount can be greater than 360 degrees.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis."
    },
    {
        "No": 136,
        "FunctionPython": "def StartHelicalIntplMov(pHelicalIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. \nRemarks",
        "Remarks": "This function moves three axes in a helical motion. The linear motion of the helix must be entirely along one axis, and the rotational motion of the helix must be entirely in the remaining two axes. The relative center position of the rotational motion, the rotation amount in degrees, and the relative end position of the linear motion are specified.\n\nThe rotation amount can be greater than 360 degrees.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 137,
        "FunctionPython": "def StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function is the same as the StartHelicalIntplPos function, except a trigger condition is specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis. "
    },
    {
        "No": 138,
        "FunctionPython": "def StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function is the same as the StartHelicalIntplMov function, except a trigger condition is specified. The motion will only begin when the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 139,
        "FunctionPython": "def StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function is the same as the StartHelicalIntplPos function, except a multi-event trigger condition is specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis."
    },
    {
        "No": 140,
        "FunctionPython": "def StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pHelicalIntplCommand A pointer to an object of the HelicalIntplCommand class that contains the interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function is the same as the StartHelicalIntplMov function, except a multi-event trigger condition is specified. The motion will only begin when the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
    },
    {
        "No": 141,
        "FunctionPython": "def StartVelToPos(pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToPos(TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] pTriggerPosCommand A pointer to an object of the TriggerPosCommand class that contains the position command parameters. ",
        "Remarks": "This function will override a velocity command with a position command to an absolute position when the trigger condition is satisfied. The axis command mode will automatically change from Velocity mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command."
    },
    {
        "No": 142,
        "FunctionPython": "def StartVelToMov(pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToMov(TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] pTriggerPosCommand A pointer to an object of the TriggerPosCommand class that contains the position command parameters. ",
        "Remarks": "This function will override a velocity command with a position command to a relative position when the trigger condition is satisfied. The target position is relative to the command position of the axis at the time that this function is executed. The axis command mode will automatically change from Velocity mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command."
    },
    {
        "No": 143,
        "FunctionPython": "def StartVelToPos(numCommands, pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToPos(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pTriggerPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartVelToPos API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands. "
    },
    {
        "No": 144,
        "FunctionPython": "def StartVelToMov(numCommands, pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToMov(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pTriggerPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartVelToMov API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 145,
        "FunctionPython": "def StartVelToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the position command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a velocity command with a position command to an absolute position when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Velocity mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 146,
        "FunctionPython": "def StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the position command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a velocity command with a position command to a relative position when the multiple event trigger condition is satisfied. The target position is relative to the command position of the axis at the time that this function is executed. The axis command mode will automatically change from Velocity mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 147,
        "FunctionPython": "def StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartVelToPos API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 148,
        "FunctionPython": "def StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartVelToMov API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 149,
        "FunctionPython": "def StartTrqToPos(pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] pTriggerPosCommand A pointer to an object of the TriggerPosCommand class that contains the position command parameters. ",
        "Remarks": "This function will override a torque command with a position command to an absolute position when the trigger condition is satisfied. The axis command mode will automatically change from Torque mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command. "
    },
    {
        "No": 150,
        "FunctionPython": "def StartTrqToMov(pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] pTriggerPosCommand A pointer to an object of the TriggerPosCommand class that contains the position command parameters. ",
        "Remarks": "This function will override a torque command with a position command to a relative position when the trigger condition is satisfied. The target position is relative to the command position of the axis at the time that this function is executed. The axis command mode will automatically change from Torque mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command."
    },
    {
        "No": 151,
        "FunctionPython": "def StartTrqToPos(numCommands, pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pTriggerPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartTrqToPos API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands. "
    },
    {
        "No": 152,
        "FunctionPython": "def StartTrqToMov(numCommands, pTriggerPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(unsigned int numCommands, TriggerPosCommand *pTriggerPosCommand)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pTriggerPosCommand A pointer to an array of objects of the TriggerPosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartTrqToMov API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands."
    },
    {
        "No": 153,
        "FunctionPython": "def StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the position command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a torque command with a position command to an absolute position when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Torque mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 154,
        "FunctionPython": "def StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the position command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a torque command with a position command to a relative position when the multiple event trigger condition is satisfied. The target position is relative to the command position of the axis at the time that this function is executed. The axis command mode will automatically change from Torque mode to Position mode.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 155,
        "FunctionPython": "def StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToPos(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartTrqToPos API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start absolute triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 156,
        "FunctionPython": "def StartTrqToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToMov(unsigned int numCommands, PosCommand *pPosCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of position commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the position commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartTrqToMov API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start relative triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 157,
        "FunctionPython": "def StartJog(pJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartJog(JogCommand *pJogCommand)",
        "Parameters": "[in] pJogCommand A pointer to an object of the JogCommand class that contains the jog command parameters. ",
        "Remarks": "This function will command the specified axis to accelerate to the specified velocity, and then continue moving at the specified velocity until stopped. The specified velocity may be positive or negative. The axis will move in the reverse direction if the velocity is negative.\n\nPosition commands executed by StartPos (and equivalent events) can be overridden by jog commands. Jog commands can also be overridden by StartPos (and equivalent events). However, an axis that is executing trigger motion cannot be overridden by jog commands until after the trigger condition has been satisfied. Similarly, an axis that is paused with the Pause function cannot be overridden by jog commands until after it is resumed with the Resume function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a jog command."
    },
    {
        "No": 158,
        "FunctionPython": "def StartJog_TimedJog(pTimedJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartJog(TimedJogCommand *pTimedJogCommand)",
        "Parameters": "[in] pTimedJogCommand A pointer to an object of the TimedJogCommand class that contains the timed jog command parameters. ",
        "Remarks": "This function will command the axis to accelerate to the profile velocity in the time specified in the profile accTimeMilliseconds, run for the runTimeMilliseconds amount of time, and then decelerate to rest in the time specified in the profile decTimeMilliseconds. The total time that the axis is in motion is the sum of accTimeMilliseconds, runTimeMilliseconds, and decTimeMilliseconds.\n\nWhile accelerating, or while jogging at the specified velocity, the axis will be in the Jog operation mode. While decelerating, the axis will be in the Stop operation mode.\n\nThe timer used by this function is a real time timer and not a Windows-level timer. Because of this, the specified times are followed precisely, and the total distance traveled will be exactly the same each time this function is called if the parameters are kept identical.\n\nLike StartJog, the commanded axis can be stopped before the entire motion finishes using functions such as Stop.\n\nOnly the following ProfileTypes are supported by this function. Specifying any other ProfileType will cause this function to return an error.\n\u2022TimeAccTrapezoidal \n\u2022TimeAccSCurve \n\u2022TimeAccJerkRatio \n\u2022TimeAccParabolic \n\u2022TimeAccSin \n\u2022TimeAccAdvancedS \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a timed jog command."
    },
    {
        "No": 159,
        "FunctionPython": "def StartJog(numCommands, pJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartJog(unsigned int numCommands, JogCommand *pJogCommand)",
        "Parameters": "[in] numCommands The number of jog commands. Each command controls a single axis. \n[in] pJogCommand A pointer to an array of objects of the JogCommand class that contain the parameters of the jog commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This command executes the StartJog function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start jog commands for multiple axes. "
    },
    {
        "No": 160,
        "FunctionPython": "def StartJog_TimedJog(numCommands, pTimedJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartJog(unsigned int numCommands, TimedJogCommand *pTimedJogCommand)",
        "Parameters": "[in] numCommands The number of timed jog commands. Each command controls a single axis. \n[in] pTimedJogCommand A pointer to an array of objects of the TimedJogCommand class that contain the parameters of the jog commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This command executes the StartJog function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start timed jog commands for multiple axes."
    },
    {
        "No": 161,
        "FunctionPython": "def StartPosToJog_Trigger(pTriggerJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(TriggerJogCommand *pTriggerJogCommand)",
        "Parameters": "[in] numCommands The number of triggered jog commands. Each command controls a single axis. \n[in] pJogCommand A pointer to an array of objects of the TriggerJogCommand class that contain the parameters of the triggered jog commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This command executes the StartJog function for multiple axes.\n\nThe motion will begin for each axis when the specified trigger condition for that axis is satisfied.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command."
    },
    {
        "No": 162,
        "FunctionPython": "def StartPosToJog_Trigger(numCommands, pTriggerJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, TriggerJogCommand *pTriggerJogCommand)",
        "Parameters": "[in] numCommands The number of triggered timed jog commands. Each command controls a single axis. \n[in] pTimedJogCommand A pointer to an array of objects of the TriggerTimedJogCommand class that contain the parameters of the triggered jog commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This command executes the StartJog function for multiple axes.\n\nThe motion will begin for each axis when the specified trigger condition for that axis is satisfied.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 163,
        "FunctionPython": "def StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(JogCommand *pJogCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of jog commands. Each command controls a single axis. \n[in] pJogCommand A pointer to an array of objects of the JogCommand class that contain the parameters of the jog commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. All commanded axes share the same trigger events. This parameter should not be an array. \n",
        "Remarks": "This command executes the StartJog function for multiple axes.\n\nThe motion will begin for all axes when the specified multi-event trigger condition is satisfied.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered jog commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 164,
        "FunctionPython": "def StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, JogCommand *pJogCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of jog commands. Each command controls a single axis. \n[in] pTimedJogCommand A pointer to an array of objects of the TimedJogCommand class that contain the parameters of the timed jog commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. All commanded axes share the same trigger events. This parameter should not be an array. \n",
        "Remarks": "This command executes the StartJog function for multiple axes.\n\nThe motion will begin for all axes when the specified multi-event trigger condition is satisfied.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 165,
        "FunctionPython": "def StartPosToJog_PosToJog(pPosToJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(PosToJogCommand *pPosToJogCommand)",
        "Parameters": "[in] pPosToJogCommand A pointer to an object of the PosToJogCommand class that contains the parameters of the position and jog commands. ",
        "Remarks": "This function starts a position command and a triggered jog command simultaneously for an axis. The position command is executed immediately, and when the trigger condition is satisfied, the position command is overridden by the jog command.\n\nThis function can be used to move the axis to a particular position, and then keep the axis moving at a constant velocity after reaching that position. To do so, set the trigger condition to be satisfied when the position command completes (such as TriggerType::RemainingTime with the trigger axis set to the commanded axis and the trigger value set to 0), and set the end velocity of the position command equal to the velocity of the jog command.\n\nIf this function is executed for an axis that is executing a position command or a jog command, the command will be overridden by the position command specified for this function. For additional information regarding overrides between jog commands and position commands, see the discussion under StartJog.\n\nAside from specifying the position command with the jog command, the specifications for this function are the same as StartPosToJog. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied. "
    },
    {
        "No": 166,
        "FunctionPython": "def StartPosToJog_PosToJog(numCommands, pPosToJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToJog(unsigned int numCommands, PosToJogCommand *pPosToJogCommand)",
        "Parameters": "[in] numCommands The number of position and jog commands. Each command controls a single axis. \n[in] pPosToJogCommand A pointer to an array of objects of the PosToJogCommand class that contain the parameters of the motion command. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartPosToJog function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied."
    },
    {
        "No": 167,
        "FunctionPython": "def StartMovToJog(pPosToJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMovToJog(PosToJogCommand *pPosToJogCommand)",
        "Parameters": "[in] pPosToJogCommand A pointer to an object of the PosToJogCommand class that contains the parameters of the position and jog commands. ",
        "Remarks": "This function is similar to StartPosToJog, except the target position of the position command is specified as a relative position instead of an absolute position.\n\nThis function can be used to move the axis by a particular distance, and then keep the axis moving at a constant velocity after moving that distance. To do so, set the trigger condition to be satisfied when the position command completes (such as TriggerType::RemainingTime with the trigger axis set to the commanded axis and the trigger value set to 0), and set the end velocity of the position command equal to the velocity of the jog command. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied. "
    },
    {
        "No": 168,
        "FunctionPython": "def StartMovToJog(numCommands, pPosToJogCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMovToJog(unsigned int numCommands, PosToJogCommand *pPosToJogCommand)",
        "Parameters": "[in] numCommands The number of position and jog commands. Each command controls a single axis. \n[in] pPosToJogCommand A pointer to an array of objects of the PosToJogCommand class that contain the parameters of the motion commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This function executes the StartMovToJog function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied."
    },
    {
        "No": 169,
        "FunctionPython": "def Stop(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function stops the motion of an axis that is executing a position command, jog command, interpolation command, or home command.\n\nThis function will only stop axes running in Position command mode. To stop axes running in Velocity command mode, use the Stop function. To stop axes running in Torque command mode, use the StopTrq function.\n\nIf the axis was executing a position command or jog command, it will decelerate to rest using the profile, deceleration, and jerk deceleration parameters of the position or jog command.\n\nIf the axis was executing a home command, it will decelerate to rest using the Homing Velocity Slow Dec parameter, using a trapezoidal motion profile.\n\nIf the axis was executing an interpolation command, all interpolated axes will decelerate to rest along the composite vector of the interpolation. The profile, deceleration, and jerk deceleration parameters of the interpolation command are used to calculate the deceleration path.\n\nThis function is unable to stop the slave axis of a synchronous control pair. To stop a slave axis, specify the master axis of the synchronous control pair (this will stop both the slave and master axes).\n\nIf the commanded axis is in Idle state, this function will return no error.\n\nIf the commanded axis is executing a command for which the deceleration cannot be obtained, the axis will be stopped using the Quick Stop Dec parameter as the deceleration, as if the ExecQuickStop function was called. This might occur if this function is called during the first cycle of processing a new position command or override position command. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis."
    },
    {
        "No": 170,
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. ",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
    },
    {
        "No": 171,
        "FunctionPython": "def Stop_Dec(axis, dec)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(int axis, double dec)",
        "Parameters": "[in] axis The axis to stop. \n[in] dec The deceleration to stop at. \n",
        "Remarks": "This function stops the motion of an axis using the specified deceleration. The axis stops using a trapezoidal profile regardless of the motion the axis was previously executing.\n\nThis function will only stop axes running in Position command mode. To stop axes running in Velocity command mode, use the Stop function. To stop axes running in Torque command mode, use the StopTrq function.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis using the specified deceleration and a trapezoidal profile."
    },
    {
        "No": 172,
        "FunctionPython": "def Stop_StopCommand(numCommands, pStopCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(unsigned int numCommands, StopCommand *pStopCommand)",
        "Parameters": "[in] numCommands The number of stop motions. Each stop motion commands a single axis. \n[in] pStopCommand A pointer to an array of objects of the StopCommand class that contain the parameters of the motion. The number of objects in the array must be equal to numCommands. The dec values specify the deceleration at which to stop the axis in. \n",
        "Remarks": "This function executes the Stop function for multiple axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes using the specified decelerations and trapezoidal profiles."
    },
    {
        "No": 173,
        "FunctionPython": "def ExecQuickStop(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function is identical to the Stop function, except the deceleration rate is set equal to the Quick Stop Dec parameter, and the motion profile is trapezoidal.\n\nA Stop command can be overridden by a ExecQuickStop command, but not the other way around.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration."
    },
    {
        "No": 174,
        "FunctionPython": "def ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. ",
        "Remarks": "This function executes the ExecQuickStop function for multiple axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration."
    },
    {
        "No": 175,
        "FunctionPython": "def ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(int axis, double timeMilliseconds)",
        "Parameters": "[in] axis The axis to stop. \n[in] timeMilliseconds The time in milliseconds to stop the axis in. \n",
        "Remarks": "This function is identical to the Stop function, except the deceleration rate is set so that the axis stops in the specified time, and the motion profile is trapezoidal.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile. "
    },
    {
        "No": 176,
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. \n[in] timeMilliseconds The time in milliseconds to stop the axis in. \n",
        "Remarks": "This function executes the ExecTimedStop function for multiple axes. One stop time is specified for all axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 177,
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "Parameters": "[in] numCommands The number of stop motions. Each stop motion commands a single axis. \n[in] pTimeCommand A pointer to an array of objects of the TimeCommand class that contain the parameters of the motion. The number of objects in the array must be equal to numCommands. The timeMilliseconds values specify the time in milliseconds to stop the axis in. \n",
        "Remarks": "This function executes the ExecTimedStop function for multiple axes. A separate stop time is specified for each axis.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
    },
    {
        "No": 178,
        "FunctionPython": "def Wait(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "Parameters": "[in] axis The axis to wait for. ",
        "Remarks": "This function will block execution and will return execution to the calling thread only when the specified axis enters the Idle operation state.\n\nIf the specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, this function will stop blocking and return the ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code.\n\nEach Device can only process one Wait function at one time. If multiple threads call the Wait function, the timings at which execution is returned to the calling threads is undefined. As explained in CreateDevice, each thread should create its own device. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 179,
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to wait for. ",
        "Remarks": "This function will block execution and will return execution to the calling thread only when the specified axes enter the Idle operation state.\n\nAll specified axes must be Idle at the same time for this function to return execution to the calling thread. If one of the specified axes becomes Idle, but then receives a new position command before every other axis becomes Idle, this function will not return execution until the new position command is finished.\n\nIf any specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, this function will stop blocking and return the ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code.\n\nEach Device can only process one Wait function at one time. If multiple threads call the Wait function, the timings at which execution is returned to the calling threads is undefined. As explained in CreateDevice, each thread should create its own device. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 180,
        "FunctionPython": "def Wait_WaitCondition(pWaitCondition)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(WaitCondition *pWaitCondition)",
        "Parameters": "[in] pWaitCondition A pointer to a WaitCondition that describes the wait condition. ",
        "Remarks": "This function will block execution and will return execution to the calling thread only when the specified wait condition becomes true. See WaitCondition for information regarding the available wait conditions.\n\nIf the specified WaitConditionType is AxisIdle, MotionStarted, or MotionStartedOverrideReady, this function will monitor the specified axes for errors. If any specified axis goes offline, generates an amp alarm, triggers a limit switch, or changes to servo off state, this function will stop blocking and return the ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code.\n\nEach Device can only process one Wait function at one time. If multiple threads call the Wait function, the timings at which execution is returned to the calling threads is undefined. As explained in CreateDevice, each thread should create its own device. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true. "
    },
    {
        "No": 181,
        "FunctionPython": "def Wait_TimeMilli(axis, waitTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(int axis, unsigned int waitTimeMilliseconds)",
        "Parameters": "[in] axis The axis to wait for. \n[in] waitTimeMilliseconds The maximum amount of time to wait before returning. If the waitTimeMilliseconds elapses before the axis becomes Idle, a WaitTimeout error will be returned. To specify no maximum wait time and wait indefinitely until the axis becomes idle, set this value to the constant INFINITE (0xFFFFFFFF). \n",
        "Remarks": "This function is similar to Wait, except it returns execution to the calling thread if the specified wait time elapses before the specified axis becomes Idle. If the specified axis is not Idle when this function returns, it will return the WaitTimeout error. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the axis becomes idle or the wait time elapses. "
    },
    {
        "No": 182,
        "FunctionPython": "def Wait_AxisSel_TimeMilli(pAxisSelection, waitTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection, unsigned int waitTimeMilliseconds)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to wait for. \n[in] waitTimeMilliseconds The maximum amount of time to wait before returning. If the waitTimeMilliseconds elapses before the axes become Idle, a WaitTimeout error will be returned. To specify no maximum wait time and wait indefinitely until the axes become idle, set this value to the constant INFINITE (0xFFFFFFFF). \n",
        "Remarks": "This function is similar to Wait, except it returns execution to the calling thread if the specified wait time elapses before the specified axis becomes Idle. If any of the specified axes is not Idle when this function returns, it will return the WaitTimeout ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the axes become idle."
    },
    {
        "No": 183,
        "FunctionPython": "def Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC Wait(WaitCondition *pWaitCondition, unsigned int waitTimeMilliseconds)",
        "Parameters": "[in] pWaitCondition A pointer to a WaitCondition that describes the wait condition. \n[in] waitTimeMilliseconds The maximum amount of time to wait before returning. If the waitTimeMilliseconds elapses before the axes become Idle, a WaitTimeout error will be returned. To specify no maximum wait time and wait indefinitely until the axes become idle, set this value to the constant INFINITE (0xFFFFFFFF). \n",
        "Remarks": "This function is similar to Wait, except it returns execution to the calling thread if the specified wait time elapses before the specified wait condition becomes true. If the specified wait condition is not true when this function returns, it will return the WaitTimeout error. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a blocking wait command, returning only when the specified wait condition becomes true. "
    },
    {
        "No": 184,
        "FunctionPython": "def Pause(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Pause(int axis)",
        "Parameters": "[in] axis The axis to pause. ",
        "Remarks": "This function pauses the execution of a position command or interpolation command for one axis. The axis will decelerate to rest at the deceleration rate that was specified for the position command or interpolation command.\n\nFor interpolation commands, all interpolating axes will decelerate to a stop. Only one of the interpolating axes needs to be specified to this function.\n\nOnce at rest, the axis will remain in the Pos or Intpl operation state.\n\nThe position command or interpolation command may be resumed after the axis is at rest, or while the axis is decelerating. To resume the axis, call the Resume function.\n\nA paused or pausing axis may also be stopped using Stop, or be overridden by another position command function.\n\nThe Pause and Resume functions are compatible with the following motion functions:\n\u2022StartPos \n\u2022StartMov \n\u2022StartLinearIntplPos \n\u2022StartLinearIntplMov \n\u2022StartCircularIntplPos \n\u2022StartCircularIntplMov \n\u2022StartHelicalIntplPos \n\u2022StartHelicalIntplMov \n\u2022StartPathIntplPos \n\u2022StartPathIntplMov \n\u2022StartPathIntpl3DPos \n\u2022StartPathIntpl3DMov \n\u2022StartPathIntplWithRotation \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command. "
    },
    {
        "No": 185,
        "FunctionPython": "def Pause_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Pause(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to pause. ",
        "Remarks": "This function executes Pause for multiple axes.\n\nAll specified axes must be executing a position command or interpolation command. If one or more specified axes are not executing a position command or interpolation command, then this function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command for multiple axes. "
    },
    {
        "No": 186,
        "FunctionPython": "def Resume(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Resume(int axis)",
        "Parameters": "[in] axis The axis to resume. ",
        "Remarks": "This function resumes the execution of a position command or interpolation command that was paused by the Pause function.\n\nFor interpolation commands, all interpolating axes will resume motion. Only one of the interpolating axes needs to be specified to this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command."
    },
    {
        "No": 187,
        "FunctionPython": "def Resume_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Resume(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to resume. ",
        "Remarks": "This function executes Resume for multiple axes.\n\nAll specified axes must be paused by the Pause function. If one or more specified axes are not paused, then the function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command for multiple axes."
    },
    {
        "No": 188,
        "FunctionPython": "def OverridePos(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverridePos(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override position. Parameters other than axis and target are ignored. ",
        "Remarks": "This function overrides the target position of an axis that is executing one of the following position commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command)\n\nThe new target position is specified as an absolute position.\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as an absolute position"
    },
    {
        "No": 189,
        "FunctionPython": "def OverrideMov(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideMov(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override position. Parameters other than axis and target are ignored. ",
        "Remarks": "This function overrides the target position of an axis that is executing one of the following position commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command)\n\nThe new target position is specified as a relative position (relative to the target position of the position command that is overridden).\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target position of an axis currently executing a position command. The target position is specified as a relative position."
    },
    {
        "No": 190,
        "FunctionPython": "def OverrideVel(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideVel(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override velocity. Parameters other than axis and velocity in profile are ignored. ",
        "Remarks": "This function overrides the target velocity of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nFor jog and velocity commands, the target velocity may be a negative value.\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the velocity of an axis currently executing a position, jog, or velocity command. "
    },
    {
        "No": 191,
        "FunctionPython": "def OverrideAcc(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideAcc(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override acceleration. Parameters other than axis and acc in profile are ignored. ",
        "Remarks": "This function overrides the acceleration of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration of an axis currently executing a position, jog, or velocity command"
    },
    {
        "No": 192,
        "FunctionPython": "def OverrideDec(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideDec(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override deceleration. Parameters other than axis and dec in profile are ignored. ",
        "Remarks": "This function overrides the deceleration of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 193,
        "FunctionPython": "def OverrideJerkAcc(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideJerkAcc(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override acceleration jerk. Parameters other than axis and jerkAcc in profile are ignored. ",
        "Remarks": "This function overrides the acceleration jerk of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration jerk of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 194,
        "FunctionPython": "def OverrideJerkDec(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideJerkDec(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the override deceleration jerk. Parameters other than axis and jerkDec in profile are ignored. ",
        "Remarks": "This function overrides the deceleration jerk of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nThe profile of the command will remain unchanged, except the starting velocity of the profile will be ignored and the override will be executed from the current velocity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration jerk of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 195,
        "FunctionPython": "def OverrideProfile(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideProfile(PosCommand *pPosCommand)",
        "Parameters": "Parameters\n[in] pPosCommand A pointer to an object of the PosCommand class that contains the override profile. \n",
        "Remarks": "This function overrides the entire profile of an axis that is executing one of the following position, jog, or velocity commands:\n\u2022StartPos / StartMov \n\u2022Pause (when pausing a StartPos / StartMov command) \n\u2022StartJog \n\u2022StartVel\n\nOnly the profile is overridden. The target position for axes executing position commands or the target velocity for axes executing jog or velocity commands are not changed. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the entire profile of an axis currently executing a position, jog, or velocity command."
    },
    {
        "No": 196,
        "FunctionPython": "def OverridePos(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverridePos(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverridePos function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as absolute positions."
    },
    {
        "No": 197,
        "FunctionPython": "def OverrideMov(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideMov function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the target positions of multiple axes currently executing position commands. The target positions are specified as relative positions."
    },
    {
        "No": 198,
        "FunctionPython": "def OverrideVel(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideVel(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideVel function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the velocities of multiple axes currently executing position, jog, or velocity commands. "
    },
    {
        "No": 199,
        "FunctionPython": "def OverrideAcc(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideAcc(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideAcc function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the accelerations of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 200,
        "FunctionPython": "def OverrideDec(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideDec(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideDec function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the decelerations of multiple axes currently executing position, jog, or velocity commands. "
    },
    {
        "No": 201,
        "FunctionPython": "def OverrideJerkAcc(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideJerkAcc(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideJerkAcc function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the acceleration jerks of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 202,
        "FunctionPython": "def OverrideJerkDec(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideJerkDec(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideJerkDec function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the deceleration jerks of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 203,
        "FunctionPython": "def OverrideProfile(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideProfile(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of overrides. Each override commands a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the override. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the OverrideProfile function for multiple axes.\n\nThis function returns an error if any of the commanded axes cannot execute the override. An error is returned if any of the commanded axes are in Idle state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Override the entire profiles of multiple axes currently executing position, jog, or velocity commands."
    },
    {
        "No": 204,
        "FunctionPython": "def StopJogAtPos(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to a PosCommand that contains the stop jog at pos motion command parameters. ",
        "Remarks": "This function operates on an axis currently executing a jog command. The axis will smoothly transition from executing a jog command to executing a stop command. The final position of the axis after stopping will be at the specified target position.\n\nWhen this function commands a single turn axis and the target position is between 0 and the single turn encoder count, then the axis will continue rotating in the current direction of rotation and start stopping at the position at which the axis would finish movement at the target position given the specified profile parameters. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis executing a jog command at a timing that will cause the axis to stop at exactly the specified position."
    },
    {
        "No": 205,
        "FunctionPython": "def StopJogAtPos(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of stop jog at pos motion commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the coordinated position commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the StopJogAtPos function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes executing jog commands at timing that wil cause the axes to stop at exactly the specified positions. "
    },
    {
        "No": 206,
        "FunctionPython": "def SuperimposeMov(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(PosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to an object of the PosCommand class that contains the parameters of the superimposed motion command. ",
        "Remarks": "This function moves the specified axis by the specified distance on top of any other motion that the axis may already be executing. During the superimposed motion, the velocity of the axis will equal the sum of the velocities of the two motions. The superimposed motion will have an acceleration segment and a deceleration segment, which may or may not coincide with the acceleration and deceleration segments of the motion the axis was executing. Depending on the profile parameters and the type of motion that the axis is already executing, the superimposed motion may complete before or after the motion that the axis is already executing.\n\nThe motion caused by this command does not affect the axis OperationState. For example, if this function is called while the axis is Idle, the axis will move, but remain in the idle operation state. To check whether an axis is executing superimposed motion, see the Exec Superimposed Motion status.\n\nThe motion caused by this command cannot be stopped using normal Stop functions. To stop superimposed motion, use the StopSuperimpose function.\n\nThis function currently supports superimposing axes in Idle, Pos, or Jog operation states. If this function is called for axes in other operation states, an error will be returned. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing. "
    },
    {
        "No": 207,
        "FunctionPython": "def SuperimposeMov(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of superimposed motion commands. Each command controls a single axis. \n[in] pPosCommand A pointer to an array of objects of the PosCommand class that contain the parameters of the superimposed motion commands. \n",
        "Remarks": "This command executes the SuperimposeMov function for multiple axes.\n\nThis function currently supports superimposing axes in Idle, Pos, or Jog operation states. If this function is called for axes in other operation states, an error will be returned. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing. "
    },
    {
        "No": 208,
        "FunctionPython": "def StopSuperimpose(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function stops the superimposed motion of an axis before it completes. The superimposed motion will decelerate to a stop using the deceleration specified for the profile of the superimposed motion. Any motion that the axis was already executing under the superimposed motion will remain unaffected. The axis will still travel an extra distance equal to the distance traveled due to the superimposed motion before the superimposed motion is stopped. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a superimposed motion."
    },
    {
        "No": 209,
        "FunctionPython": "def StopSuperimpose_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. ",
        "Remarks": "This command executes the StopSuperimpose function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the superimposed motion of multiple axes."
    },
    {
        "No": 210,
        "FunctionPython": "def SimulatePos(pSimulatePosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulatePos(SimulatePosCommand *pSimulatePosCommand, double *pPeakVelocity, double *pTotalTimeMilliseconds, double *pAccelerationTimeMilliseconds, double *pCruiseTimeMilliseconds, double *pDecelerationTimeMilliseconds)",
        "Parameters": "[in] pSimulatePosCommand A pointer to a SimulatePosCommand that contains the simulated position command parameters. \n[out] pPeakVelocity A pointer to a double type variable that will contain the highest absolute velocity that the axis moves at during the simulated motion command. This value is in user units per second. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total execution time of the motion command. This value is in units of milliseconds. \n[out] pAccelerationTimeMilliseconds A pointer to a double variable that will contain the time that the axis spends accelerating during the motion command. This value is in units of milliseconds. \n[out] pCruiseTimeMilliseconds A pointer to a double variable that will contain the time that the axis spends at the commanded velocity during the motion command. This value is in units of milliseconds. \n[out] pDecelerationTimeMilliseconds A pointer to a double variable that will contain the time that the axis spends decelerating during the motion command. If the axis changes direction during the motion command, the deceleration time does not include the time spent decelerating before changing direction. This value is in units of milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the position command are returned."
    },
    {
        "No": 211,
        "FunctionPython": "def SimulateLinearIntplPos(pSimulateLinearIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateLinearIntplPos(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double *pPeakVelocity, double *pTotalTimeMilliseconds, double *pAccelerationTimeMilliseconds,double *pCruiseTimeMilliseconds, double *pDecelerationTimeMilliseconds)",
        "Parameters": "[in] pSimulateLinearIntplCommand A pointer to a SimulateLinearIntplCommand that contains the simulated linear interpolation motion command parameters. \n[out] pPeakVelocity A pointer to a double type variable that will contain the highest composite velocity of the interpolating axes during the simulated motion command. This value is in user units per second. \n[out] pTotalTimeMilliseconds A pointer to an int type variable that will contain the total execution time of the motion command. This value is in units of milliseconds. \n[out] pAccelerationTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends accelerating during the motion command. This value is in units of milliseconds. \n[out] pCruiseTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends at the commanded velocity during the motion command. This value is in units of milliseconds. \n[out] pDecelerationTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends decelerating during the motion command. If the axis changes direction during the motion command, the deceleration time does not include the time spent decelerating before changing direction. This value is in units of milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the linear interpolation motion command are returned. "
    },
    {
        "No": 212,
        "FunctionPython": "def SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePosCommand *pSimulatePosCommand, int returnType, double timeMilliseconds, double *pCalculatedPos, double *pCalculatedVel)",
        "Parameters": "[in] pSimulatePosCommand A pointer to a SimulatePosCommand that contains the simulated position command parameters. \n[in] returnType Determines whether the value specified for the \"timeMilliseconds\" argument represents the time elapsed or the time remaining. If 0, the \"timeMilliseconds\" specified is the time elapsed. If 1, the \"timeMilliseconds\" specified is the time remaining. \n[in] timeMilliseconds The amount of time elapsed or remaining, depending on the value specified for the \"returnType\" function argument. This value is in units of milliseconds. \n[out] pCalculatedPos A pointer to a double type variable that will contain the position that the axis is at after the specified amount of time elapses or remains. This value is in user units. \n[out] pCalculatedVel A pointer to a double type variable that will contain the velocity that the axis is at after the specified amount of time elapses or remains. This value is in user units per second.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The position and velocity of the axis after the motion command runs for the specified time are returned. "
    },
    {
        "No": 213,
        "FunctionPython": "def SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double timeMilliseconds, double *pPosArray, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "Parameters": "[in] pSimulateLinearIntplCommand A pointer to a SimulateLinearIntplCommand that contains the simulated linear interpolation motion command parameters. \n[out] pPeakVelocity A pointer to a double type variable that will contain the highest composite velocity of the interpolating axes during the simulated motion command. This value is in user units per second. \n[out] pTotalTimeMilliseconds A pointer to an int type variable that will contain the total execution time of the motion command. This value is in units of milliseconds. \n[out] pAccelerationTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends accelerating during the motion command. This value is in units of milliseconds. \n[out] pCruiseTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends at the commanded velocity during the motion command. This value is in units of milliseconds. \n[out] pDecelerationTimeMilliseconds A pointer to an int variable that will contain the time that the axis spends decelerating during the motion command. If the axis changes direction during the motion command, the deceleration time does not include the time spent decelerating before changing direction. This value is in units of milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move distance, remain distance, and total distance after the linear interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 214,
        "FunctionPython": "def SimulateTimeAtPos(pSimulatePosCommand, specificPos)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePosCommand *pSimulatePosCommand, double specificPos, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds)",
        "Parameters": "[in] pSimulatePosCommand A pointer to a SimulatePosCommand that contains the simulated position command parameters. \n[in] specificPos The position at which to calculate the \"move time\" and \"remain time\" of the profile. This value is in user units. \n[out] pMoveTimeMilliseconds A pointer to an double type variable that will contain the amount of time elapsed when the axis first reaches the \"specific position.\" This value is in units of milliseconds. \n[out] pRemainTimeMilliseconds A pointer to an double type variable that will contain the amount of time remaining in the motion command when the axis reaches the \"specific position.\" This value is in units of milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned. "
    },
    {
        "No": 215,
        "FunctionPython": "def SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulateLinearIntplCommand *pSimulateLinearIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "Parameters": "[in] pSimulateLinearIntplCommand A pointer to a SimulateLinearIntplCommand that contains the simulated linear interpolation motion command parameters. \n[in] specificDistance The distance along the linear interpolation at which to calculate the move time, remain time, and total time of the linear interpolation command. This is the distance in N dimensions, where N is the number of axes in the interpolation. \n[out] pMoveTimeMilliseconds A pointer to a double type variable that will contain the amount of time elapsed when the axes travel a distance equal to specificDistance. The units are milliseconds. \n[out] pRemainTimeMilliseconds A pointer to a double type variable that will contain the amount of time remaining when the axes travel a distance equal to specificDistance. The units are milliseconds. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total time that the linear interpolation takes to complete. This value is always equal to the sum of the values returned by pMoveTime and pRemainTime. The units are milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a linear interpolation motion command without moving any axes. The move time, remain time, and total time after the linear interpolation runs for a specified distance are returned. "
    },
    {
        "No": 216,
        "FunctionPython": "def CreatePVTBuffer(axis, points)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreatePVTBuffer(int axis, unsigned int points)",
        "Parameters": "[in] axis The axis to allocate the buffer memory. \n[in] points The number of points to allocate memory for. Each PVT, PT, VT, or AT point occupies one point in the memory. \n",
        "Remarks": "When the WMX3 engine is started, no memory is allocated for the execution of PVT motion commands. This function allocates memory to execute the following PVT motion commands:\n\u2022StartPVT\n\u2022StartPVT (Interpolation)\n\u2022StartPT\n\u2022StartVT\n\u2022StartAT\n\nIf any of the above commands are called before this function, a default buffer memory for maxPvtAppendPoints will be allocated. If the memory allocation fails, or if more than maxPvtAppendPoints points are specified, the PVT motion command will return an error. To execute a PVT motion command with more than maxPvtAppendPoints points, this function must be called beforehand, specifying the required number of points.\n\nFor StartPVT (Interpolation), buffer memory must be separately allocated for all interpolating axes.\n\nAllocating buffer memory space is an operation that can fail due to lack of memory space or fragmentation of memory. For deterministic operation, this function should be called during initialization to allocate memory for all axes that will potentially execute a PVT motion command.\n\nThe maximum size of the PVT buffer memory space of each axis is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nIt is not necessary to call this function again after buffer memory has been allocated once. (When the WMX3 engine is restarted, this function must be called again to allocate buffer memory.)\n\nBuffer memory that has been allocated can be freed using the FreePVTBuffer function. After freeing the PVT buffer memory of an axis, this function can be called again to reallocate a different amount of buffer memory.\n\nIt is not necessary to free allocated memory using FreePVTBuffer before exiting the program. Any allocated memory is automatically freed when the WMX3 engine is closed.\n\nThe GetPVTBufferPoints function can be used to find the amount of PVT buffer memory currently allocated to an axis.\n\nThe GetPVTBytesPerPoint function can be used to convert the buffer memory size from points to bytes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Allocate buffer memory to an axis for the execution of PVT motion commands. "
    },
    {
        "No": 217,
        "FunctionPython": "def FreePVTBuffer(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreePVTBuffer(int axis)",
        "Parameters": "[in] axis The axis to free the buffer memory. ",
        "Remarks": "This function frees the buffer memory that has been allocated with the CreatePVTBuffer function. This allows CreatePVTBuffer to be called again to allocate a different amount of memory.\n\nIt is not necessary to call this function before exiting the program, as any allocated memory is automatically freed when the WMX3 engine closes.\n\nThe freed memory, after a brief delay, will become available for the system to use for another purpose.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Free PVT buffer memory for an axis. "
    },
    {
        "No": 218,
        "FunctionPython": "def GetPVTBufferPoints(axis, pPoints)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPVTBufferPoints(int axis, unsigned int *pPoints)",
        "Parameters": "[in] axis The axis to read the buffer memory size. \n[out] pPoints A pointer to an unsigned int that will contain the number of points that can be stored in the buffer memory. \n",
        "Remarks": "This function obtains the amount of PVT buffer memory currently allocated to an axis, in units of points.\n\nTo convert the buffer memory size from the number of points to bytes, use the GetPVTBytesPerPoint function.\n\nIf no buffer memory has been allocated to the specified channel yet, this function will return 0 in the pPoints parameter.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Get the amount of PVT buffer memory currently allocated to an axis."
    },
    {
        "No": 219,
        "FunctionPython": "def GetPVTBytesPerPoint(pBytes)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPVTBytesPerPoint(unsigned int *pBytes)",
        "Parameters": "[out] pBytes A pointer to an unsigned int that will contain the number of bytes of memory required per point data. \n",
        "Remarks": "This function obtains the number of bytes of memory required to store one point data in the PVT buffer memory. This can be used to calculate the number of bytes of buffer memory required to store a particular number of points. For example, if this function returns 48, the number of bytes required to store 100000 points is 48*100000 = 4800000, or approximately 4.8MB.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Get the number of bytes required per point data in the PVT buffer memory."
    },
    {
        "No": 220,
        "FunctionPython": "def StartPVT(AdvMotion_PVTCommand pPVTCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand)",
        "Parameters": "[in] pPVTCommand A pointer to a PVTCommand that contains the PVT parameters. ",
        "Remarks": "A PVT motion command consists of a sequence of position-velocity-time points. The axis will travel through each point position at the specified time and velocity. The acceleration is linear between two points, but may not be continuous at the interface of each point.\n\nThe PVT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of PVTCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The velocity is signed, and can accept positive and negative values. The minimum number of points is 1 (with a time greater than 0).\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPVTAddlCommand optional arguments can be specified to append additional points to the PVT command after the points defined in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pPVTCommand and pPVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 221,
        "FunctionPython": "def StartPVT_Intpl(pPVTCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand)",
        "Parameters": "[in] pPVTCommand A pointer to a PVTIntplCommand that contains the PVT parameters. ",
        "Remarks": "This function is a variation of StartPVT that can command up to maxPvtInterpolateAxes axes at once. The commanded axes will all start motion during the same communication cycle, allowing coordination between the axes with the careful selection of points.\n\nThis function allocates memory dynamically when called for the first time for each of the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPVTAddlCommand optional arguments can be specified to append additional points to the PVT interpolation command after the points defined in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for each commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined for that axis in pPVTCommand and pPVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
    },
    {
        "No": 222,
        "FunctionPython": "def StartPT(pPTCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand)",
        "Parameters": "[in] pPTCommand A pointer to a PTCommand that contains the PT parameters. ",
        "Remarks": "A PT motion command consists of a sequence of position-time points. The axis will travel through each point position at the specified time. The velocity between two points is constant, but may not be continuous at the interface of each point.\n\nThe PT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of PTCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-velocity segments. The acceleration when switching from one velocity to another is infinite.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPTAddlCommand optional arguments can be specified to append additional points to the PT command after the points defined in pPTCommand. The pPTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pPTCommand and pPTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 223,
        "FunctionPython": "def StartVT(pVTCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand)",
        "Parameters": "[in] pVTCommand A pointer to a VTCommand that contains the VT parameters. ",
        "Remarks": "A VT motion command consists of a sequence of velocity-time points. The velocity between two points is constant, and is equal to the velocity of the latter point.\n\nThe VT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of VTCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The velocity is signed, and can accept positive and negative values. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-velocity segments. The acceleration when switching from one velocity to another is infinite.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pVTAddlCommand optional arguments can be specified to append additional points to the VT command after the points defined in pVTCommand. The pVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pVTCommand and pVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command. "
    },
    {
        "No": 224,
        "FunctionPython": "def StartAT(pATCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartAT(ATCommand *pATCommand)",
        "Parameters": "[in] pATCommand A pointer to a ATCommand that contains the AT parameters. ",
        "Remarks": "An AT motion command consists of a sequence of acceleration-time points. The acceleration between two points is constant, and is equal to the acceleration of the latter point.\n\nThe AT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of ATCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-acceleration segments. If the accelerations and times are not chosen carefully, the profile will end at a non-zero velocity.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pATAddlCommand optional arguments can be specified to append additional points to the AT command after the points defined in pATCommand. The pATAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pATCommand and pATAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a AT motion command. "
    },
    {
        "No": 225,
        "FunctionPython": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTAdditionalCommand *pPVTAddlCommand=NULL)",
        "Parameters": "[in] pPVTCommand A pointer to a PVTCommand that contains the PVT parameters. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPVTCommand. \n[in] pPVTAddlCommand An optional argument that is a pointer to an array of PVTAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function is a variation of StartPVT that can command up to maxPvtInterpolateAxes axes at once. The commanded axes will all start motion during the same communication cycle, allowing coordination between the axes with the careful selection of points.\n\nThis function allocates memory dynamically when called for the first time for each of the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPVTAddlCommand optional arguments can be specified to append additional points to the PVT interpolation command after the points defined in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for each commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined for that axis in pPVTCommand and pPVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 226,
        "FunctionPython": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTIntplAdditionalCommand *pPVTAddlCommand=NULL)",
        "Parameters": "[in] pPVTCommand A pointer to a PVTIntplCommand that contains the PVT parameters. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPVTCommand. \n[in] pPVTAddlCommand An optional argument that is a pointer to an array of PVTIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function is a variation of StartPVT that can command up to maxPvtInterpolateAxes axes at once. The commanded axes will all start motion during the same communication cycle, allowing coordination between the axes with the careful selection of points.\n\nThis function allocates memory dynamically when called for the first time for each of the commanded axes after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPVTAddlCommand optional arguments can be specified to append additional points to the PVT interpolation command after the points defined in pPVTCommand. The pPVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for each commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined for that axis in pPVTCommand and pPVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
    },
    {
        "No": 227,
        "FunctionPython": "StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand, unsigned int numAddlCommands=0, PTAdditionalCommand *pPTAddlCommand=NULL)",
        "Parameters": "[in] pPTCommand A pointer to a PTCommand that contains the PT parameters. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPVTCommand. \n[in] pPTAddlCommand An optional argument that is a pointer to an array of PTAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "A PT motion command consists of a sequence of position-time points. The axis will travel through each point position at the specified time. The velocity between two points is constant, but may not be continuous at the interface of each point.\n\nThe PT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of PTCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-velocity segments. The acceleration when switching from one velocity to another is infinite.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPTAddlCommand optional arguments can be specified to append additional points to the PT command after the points defined in pPTCommand. The pPTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pPTCommand and pPTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 228,
        "FunctionPython": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand, unsigned int numAddlCommands=0, VTAdditionalCommand *pVTAddlCommand=NULL)",
        "Parameters": "[in] pVTCommand A pointer to a VTCommand that contains the VT parameters. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPVTCommand. \n[in] pVTAddlCommand An optional argument that is a pointer to an array of VTAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "A VT motion command consists of a sequence of velocity-time points. The velocity between two points is constant, and is equal to the velocity of the latter point.\n\nThe VT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of VTCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The velocity is signed, and can accept positive and negative values. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-velocity segments. The acceleration when switching from one velocity to another is infinite.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pVTAddlCommand optional arguments can be specified to append additional points to the VT command after the points defined in pVTCommand. The pVTAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pVTCommand and pVTAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command."
    },
    {
        "No": 229,
        "FunctionPython": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartAT(ATCommand *pATCommand, unsigned int numAddlCommands=0, ATAdditionalCommand *pATAddlCommand=NULL)",
        "Parameters": "[in] pATCommand A pointer to a ATCommand that contains the AT parameters. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPVTCommand. \n[in] pATAddlCommand An optional argument that is a pointer to an array of ATAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "An AT motion command consists of a sequence of acceleration-time points. The acceleration between two points is constant, and is equal to the acceleration of the latter point.\n\nThe AT command will start with the initial position equal to the current command position of the axis, the initial velocity equal to 0, and the initial time equal to 0. This initial point does not need to be specified (if the first point of ATCommand has a timeMilliseconds of 0, that point is ignored).\n\nThe point times must be specified in ascending order. The point times do not need to be a multiple of the cycle time. The minimum number of points is 1 (with a time greater than 0).\n\nThis function will construct a rudimentary profile consisting of sequences of constant-acceleration segments. If the accelerations and times are not chosen carefully, the profile will end at a non-zero velocity.\n\nThis function allocates memory dynamically when called for the first time for the commanded axis after starting the WMX3 engine. See CreatePVTBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pATAddlCommand optional arguments can be specified to append additional points to the AT command after the points defined in pATCommand. The pATAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the PVT memory buffer for the commanded axis (created with CreatePVTBuffer) is large enough to hold all points that are defined in pATCommand and pATAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a AT motion command. "
    },
    {
        "No": 230,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 231,
        "FunctionPython": "def StartHome(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHome(int axis)",
        "Parameters": "[in] axis The axis to home. ",
        "Remarks": "This function searches for the home position as described by the HomeParam parameters.\n\nThe axis to home must not be a synchronous control slave axis; if it is, this function will return an error and the axis will not be homed. To home a synchronous control pair or group, call this function with the \"axis\" argument set to the master axis. Several parameters affect the homing procedure of synchronous control pairs.\n\nWhen this function is called, the specified axis will always search for the home position. To return to the zero position without searching for the home position, use a motion API function such as StartPos with the target position set to 0.\n\nThe ZPulseDetectionUnsupported, TouchProbeDetectionUnsupported, HomeSwitchDetectionUnsupported, or LimitSwitchDetectionUnsupported if the appropriate signal required to complete homing is unavailable.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start homing an axis. The axis will search for the home position. If found, the home position will become the zero position for that axis."
    },
    {
        "No": 232,
        "FunctionPython": "def StartHome_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartHome(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class object that specifies which axes to home. ",
        "Remarks": "This function is an overloaded function of StartHome that starts the homing procedure for multiple axes.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start homing multiple axes. The axes will search for the home positions. If found, the home position will become the zero position for that axis"
    },
    {
        "No": 233,
        "FunctionPython": "def Continue(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Continue(int axis)",
        "Parameters": "[in] axis The axis to continue homing. ",
        "Remarks": "This function continues the homing operation of an axis that has been paused during homing. An axis will pause during homing only if the Pause Mode parameter is set to TRUE for that axis. See Homing for information regarding the points at which pauses are inserted for each home type.\n\nPause mode can be useful when experimenting with the homing routine. Pause mode is typically not used in deployed applications.\n\nThis function will return an error if the specified axis is not paused while homing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Continue homing an axis that has been paused during the homing operation. "
    },
    {
        "No": 234,
        "FunctionPython": "def Continue_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Continue(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class object that specifies which axes to continue homing. ",
        "Remarks": "This function is an overloaded function of Continue that continues the paused homing procedure for multiple axes.\n\nThis function will return an error if any of the specified axes are not paused while homing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Continue homing multiple axes that have been paused during the homing operation. "
    },
    {
        "No": 235,
        "FunctionPython": "def Cancel(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Cancel(int axis)",
        "Parameters": "[in] axis The axis to cancel homing. ",
        "Remarks": "This function cancels the homing operation of an axis that has been paused during homing. See Continue for additional information regarding pause mode in homing.\n\nThis function will return an error if the specified axis is not paused while homing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Cancel the homing operation for an axis that has been paused during homing operation."
    },
    {
        "No": 236,
        "FunctionPython": "def Cancel_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Cancel(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class object that specifies which axes to cancel homing. ",
        "Remarks": "This function is an overloaded function of Cancel that cancels the paused homing procedure for multiple axes.\n\nThis function will return an error if any of the specified axes are not paused while homing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Cancel the homing procedure for multiple axes that have been paused during homing operation"
    },
    {
        "No": 237,
        "FunctionPython": "def SetCommandPos(axis, position)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetCommandPos(int axis, double position)",
        "Parameters": "[in] axis The axis to set the command position of. \n[in] position The value to set the axis command position to. \n",
        "Remarks": "This function will set the current command position of the specified axis to the specified value by shifting the home position. The axis will not move during this operation (the command sent to the servo will remain the same).\n\nThe specified axis must be in Idle state before calling this function. This function can be called for sync master axes or sync slave axes (in which case the axis will be in Sync instead of Idle).\n\nIf the API Wait Until Motion Start parameter is enabled, this function will not return until after the next cycle, when the home position has been updated. Motion functions can be called after this function returns, and the target positions will be calculated correctly based on the updated home position. If the API Wait Until Motion Start parameter is disabled, the user must wait until the next cycle and verify that the home position has been updated using the GetStatus function before calling motion functions. See Function Calls to blocking for additional information.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current command position of the axis to the specified value. "
    },
    {
        "No": 238,
        "FunctionPython": "def SetFeedbackPos(axis, position)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetFeedbackPos(int axis, double position)",
        "Parameters": "[in] axis The axis to set the feedback position of. \n[in] position The value to set the axis feedback position to. \n",
        "Remarks": "This function will set the current feedback position of the specified axis to the specified value by shifting the home position. This axis will not move during this operation (the command sent to the servo will remain the same).\n\nThe specified axis must be in Idle state before calling this function. This function can be called for sync master axes or sync slave axes (in which case the axis will be in Sync instead of Idle).\n\nIf the API Wait Until Motion Start parameter is enabled, this function will not return until after the next cycle, when the home position has been updated. Motion functions can be called after this function returns, and the target positions will be calculated correctly based on the updated home position. If the API Wait Until Motion Start parameter is disabled, the user must wait until the next cycle and verify that the home position has been updated using the GetStatus function before calling motion functions. See Function Calls to blocking for additional information.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current feedback position of the axis to the specified value. "
    },
    {
        "No": 239,
        "FunctionPython": "def SetHomeDone(axis, value)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetHomeDone(int axis, unsigned char value)",
        "Parameters": "[in] axis The axis to set the \"home done\" state. \n[in] value Specify 0 to set the \"home done\" state to FALSE or 1 to set the \"home done\" state to TRUE. \n",
        "Remarks": "This function sets the Home Done state of each axis. This state can be obtained by reading the Home Done member of the CoreMotionAxisStatus structure returned by the GetStatus API function.\n\nThe Home Done state of the axis is automatically set to TRUE after a successful homing operation. Depending on the Clear Home Done On Servo Off and Clear Home Done On Comm Stop parameters, the Home Done state may be set to FALSE when communication is stopped or the axis servo is turned off.\n\nThis function can be used to manually override the Home Done state that is normally set or reset as described above. This may be useful if the user implements a custom homing routine.\n\nThe Home Done state affects several operations. The software limit (set with Soft Limit Type parameter) only triggers while the Home Done state is TRUE. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the \"home done\" state. "
    },
    {
        "No": 240,
        "FunctionPython": "def SetCommandPosToFeedbackPos(axis)",
        "FunctionC++": "WMX3APIFUNC SetCommandPosToFeedbackPos(int axis, double posChangePerCycle=0)",
        "Parameters": "[in] axis The axis to set the command position to feedback position. \n[in] posChangePerCycle An optional argument that limits the rate at which this function causes the command position to change every cycle. If this value is set, the command position will cchange by at most this number of user units every cycle. \n",
        "Remarks": "This function changes the current command position to be equal to the current feedback position. Unlike the SetCommandPos and SetFeedbackPos functions, the commanded position itself is changed and the home position is not shifted. Because of this, the axis may move as a result of this function, although it typically will not because the command position is set to the feedback position.\n\nIf the posChangePerCycle optional argument is set, the rate at which this function causes the command position to change will be limited to that many user units per cycle. Thus, it sets a \"velocity\" for the change in command position, in user units per cycle.\n\nThis function can be used to set the command position to be exactly at a physical boundary. A motion command can be executed to push the axis against a physical boundary (taking care that the output torque is small enough as to not damage the machine). When the axis touches the physical boundary, the feedback position will stop changing even as the command position continues increasing (or decreasing) to positions beyond the boundary. After this point, this function can be called to return the command position back to the position where the feedback position stopped changing, which is exactly at the physical boundary. The posChangePerCycle argument might be set to a nonzero value if the servo generates an alarm from changing the position command too rapidly during this operation. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current cyclic command position equal to the feedback position."
    },
    {
        "No": 241,
        "FunctionPython": "def GetHomeData()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetHomeData(HomeData *pHomeData)",
        "Parameters": "[out] pHomeData A pointer to a HomeData object that will contain the homing related data for all axes.  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the homing related data for all axes. "
    },
    {
        "No": 242,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 243,
        "FunctionPython": "def SetSyncMasterSlave(masterAxis, slaveAxis)",
        "FunctionC++": "WMX3APIFUNC SetSyncMasterSlave(int masterAxis, int slaveAxis, SyncOptions *pSyncOptions=NULL)",
        "Parameters": "[in] masterAxis The master axis. \n[in] slaveAxis The slave axis. \n[in] pSyncOptions An optional argument that is used to specify additional options for the sync control. \n",
        "Remarks": "This function starts sync control between a master axis and a slave axis. The command position of the slave axis at the time that this function is executed becomes synchronized to the command position of the master axis at the time that this function is executed. Any subsequent changes to the master axis command position will also be added to the slave axis command position.\n\nA slave axis will follow the movements of the master axis.\n\nWhen this function returns, sync control is already established. The master axis can be moved immediately.\n\nThe master and slave axes must not be in motion (must be in Idle operation state) when this function is called. To start synchronization with a master axis that is in motion, use the SetSyncGearRatio function (with a gear ratio of 1) instead.\n\nThe slave axis servo must be in Servo On state when this function is executed. The master axis servo may be on or off.\n\nThe slave axis must not be a sync master of any other axis.\n\nThe Master Desync Type and Slave Desync Type parameters can be set to automatically stop or turn off the axis servo when synchronization is broken.\n\nThe Single Turn Mode parameter must be set to the same value for the master and slave axes (this parameter must be enabled or disabled for both axes). If the Single Turn Mode parameter is set to enabled, then the master and slave axes must have the same Single Turn Encoder Count.\n\nWhen the slave servo turns off (Servo On becomes FALSE), synchronous control is resolved for that slave axis. This function must be called again to reestablish synchronous control for that axis.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Establish synchronous control between a master axis and a slave axis."
    },
    {
        "No": 244,
        "FunctionPython": "def SetSyncCombine(masterAxis1, masterAxis2, slaveAxis)",
        "FunctionC++": "WMX3APIFUNC SetSyncCombine(int masterAxis1, int masterAxis2, int slaveAxis, SyncCombineOptions *pSyncCombineOptions=NULL)",
        "Parameters": "[in] masterAxis1 The first master axis. \n[in] masterAxis2 The second master axis. \n[in] slaveAxis The slave axis. \n[in] pSyncCombineOptions An optional argument that is used to specify additional options for the sync control. \n",
        "Remarks": "Combine sync is a special type of sync control in which two master axes control a slave axis. The cyclic position command of the slave axis will be set equal to the sum of the cyclic position commands of the two master axes.\n\nUpon initiating combine sync control, a single offset to the slave axis will be calculated so that the current position command of the slave axis equals the sum of the position commands of the two master axes.\n\nWhen this function returns, sync control is already established. The master axes can be moved immediately.\n\nBoth master axes and the slave axis must not be in motion (must be in Idle operation state) when this function is called.\n\nThe slave axis servo must be in Servo On state when this function is executed. The master axis servos may be on or off.\n\nThe slave axis must not be a sync master of any other axis.\n\nThe Master Desync Type and Slave Desync Type parameters can be set to automatically stop or turn off the axis servo when synchronization is broken.\n\nSingle turn mode is not supported in combine sync control. An error will be returned when attempting to start combine sync control for axes in single turn mode.\n\nThe VelocityOffset and SymmetricVelocityOffset sync offset compensation modes are not supported when operating combine sync control.\n\nHoming is not supported in combine sync control. Attempting to start homing for combine sync axes will cause the homing function to return an error.\n\nThe ResolveSync function can be used resolve combine sync control and regular sync control.\n\nSlave axes which are controlled with combine sync will have an operation state of Sync in the Op State status returned by the GetStatus function. The axis numbers of the two master axes can be found in the Master Axis and Second Master Axis statuses returned by the GetStatus function.\n\nWhen the slave servo turns off (Servo On becomes FALSE), synchronous control is resolved for that slave axis. This function must be called again to reestablish synchronous control for that axis.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Combine the position commands of two master axes and set it as the position command of a slave axis."
    },
    {
        "No": 245,
        "FunctionPython": "def SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAbsoluteSyncPhase(int slaveAxis, double phase, Profile *pProfile)",
        "Parameters": "[in] slaveAxis The slave axis to apply the sync phase. \n[in] phase The absolute sync phase to apply. \n[in] pProfile A pointer to a Profile class object that contains the profile to use when applying the phase. \n",
        "Remarks": "This function sets the absolute sync phase of a slave axis. The sync phase is an additional offset that is applied to the sync slave axis but not the master axis.\n\nThe sync phase is 0 when sync control is started.\n\nThe slave will shift from the master axis by the sync phase amount using the specified profile. The time taken for the slave to completely shift by the sync phase amount will depend on the specified profile type, velocity, acceleration, etc.\n\nThe sync phase may be changed while the master and slave axes are in motion.\n\nThe sync phase may not be changed while the axis has still only partially applied a previous sync phase shift or a sync gear shift. Whether a sync axis is currently in the middle of applying a sync phase shift or sync gear shift can be checked with the Detail Op State status. An axis executing phase shift will be in the Sync_PhaseShift state and an axis executing gear shift will be in the Sync_GearShift state.\n\nThe currently applied sync phase can be obtained by checking the Sync Phase Offset status. An absolute phase that is greater than the currently applied sync phase will cause the slave to shift in the positive direction. An absolute phase that is less than the currently applied sync phase will cause the slave to shift in the negative direction.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute sync phase of a slave axis."
    },
    {
        "No": 246,
        "FunctionPython": "def AddRelativeSyncPhase(slaveAxis, phase, pProfile)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddRelativeSyncPhase(int slaveAxis, double phase, Profile *pProfile)",
        "Parameters": "[in] slaveAxis The slave axis to apply the sync phase. \n[in] phase The relative sync phase to apply. \n[in] pProfile A pointer to a Profile class object that contains the profile to use when applying the phase. \n",
        "Remarks": "This function adds a relative sync phase to a slave axis. The sync phase is an additional offset that is applied to the sync slave axis but not the master axis.\n\nThe sync phase is 0 when sync control is started.\n\nThe slave will shift from the master axis by the sync phase amount using the specified profile. The time taken for the slave to completely shift by the sync phase amount will depend on the specified profile type, velocity, acceleration, etc.\n\nThe sync phase may be changed while the master and slave axes are in motion.\n\nThe sync phase may not be changed while the axis has still only partially applied a previous sync phase shift or a sync gear shift. Whether a sync axis is currently in the middle of applying a sync phase shift or sync gear shift can be checked with the Detail Op State status. An axis executing phase shift will be in the Sync_PhaseShift state and an axis executing gear shift will be in the Sync_GearShift state.\n\nThe currently applied sync phase can be obtained by checking the Sync Phase Offset status. A positive relative sync phase will cause the slave to shift in the positive direction. A negative relative sync phase will cause the slave to shift in the negative direction.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Add a relative sync phase to a slave axis. "
    },
    {
        "No": 247,
        "FunctionPython": "def SetSyncGearRatio(slaveAxis, gearRatio, pProfile)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int slaveAxis, double gearRatio, Profile *pProfile)",
        "Parameters": "[in] slaveAxis The slave axis to apply the sync gear ratio. \n[in] gearRatio The sync gear ratio to apply. \n[in] pProfile A pointer to a Profile class object that contains the profile to use when applying the sync gear ratio. \n",
        "Remarks": "The sync gear ratio is the ratio between the slave axis position command and the master axis position command. The amount that the master axis moves during one cycle is multiplied by the sync gear ratio to calculate the amount that the slave axis moves during that cycle.\n\nThe sync gear ratio can be any value between 0.000001 and 2147483647, or any value between -0.000001 and -2147483647. A negative sync gear ratio will cause the slave axis to move in the opposite direction as the master axis.\n\nA sync gear ratio with magnitude greater than 1 causes the slave axis to move at a greater velocity (in terms of user units of the slave axis) than the master axis. A sync gear ratio with magnitude less than 1 causes the slave axis to move at a smaller velocity (in terms of user units of the slave axis) than the master axis.\n\nThe sync gear ratio may be changed while the master and slave axes are in motion.\n\nIf the sync gear ratio is changed while the master and slave axes are in motion, the new sync gear ratio is not applied immediately to prevent the slave axis velocity from suddenly changing. The slave axis will shift from the current velocity to the velocity that would be commanded by the new gear ratio using the specified profile parameters (profile type, velocity, acceleration, etc.). The slave axis will follow any changes to the master axis velocity during the catch up motion, but the total time taken for the catch up motion to complete will not be affected by changes in the master axis velocity.\n\nThe sync gear ratio may not be changed while the axis has still only partially applied a previous sync phase shift or a sync gear shift. Whether a sync axis is currently in the middle of applying a sync phase shift or sync gear shift can be checked with the Detail Op State status. An axis executing phase shift will be in the Sync_PhaseShift state and an axis executing gear shift will be in the Sync_GearShift state.\n\nThis function causes the sync offset between the slave and master positions to change based on the gear ratio and the position and velocity of the master axis at the time that this function is called. A phase shift operation such as SetAbsoluteSyncPhase may be necessary after this operation completes.\n\nExample:\n\nThe master and slave axes are moving at a rate of 10000 pulses per second when this function is called with a sync gear ratio of 2. The new slave axis velocity is 20000 pulses per second, but the slave axis does not instantly change to this velocity. Instead, the slave axis gradually ramps to to this velocity using the profile parameters passed to this function. If the master axis velocity changes to 30000 pulses per second while the slave axis is shifting to the new gear ratio, the slave axis will ramp up to 60000 pulses per second, but the total time taken to shift the gear ratio remains the same.\n\nIf the master and slave axes are not in motion when this function is executed, the slave will instantly shift to the new gear ratio.\n\nThe currently applied sync gear ratio can be obtained by checking the Sync Gear Ratio status.\n\nThe sync gear ratio operates independently from the Gear Ratio Numerator and Gear Ratio Denominator parameters.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the sync gear ratio between a sync slave axis and the master axis. "
    },
    {
        "No": 248,
        "FunctionPython": "def SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int masterAxis, int slaveAxis, double gearRatio, Profile *pProfile)",
        "Parameters": "[in] masterAxis The master axis. \n[in] slaveAxis The slave axis to apply the sync gear ratio. \n[in] gearRatio The sync gear ratio to apply. \n[in] pProfile A pointer to a Profile class object that contains the profile to use when applying the sync gear ratio. \n",
        "Remarks": "This function is similar to SetSyncGearRatio, but this function will also establish sync control between the specified master and slave axes if they are not synchornized already.\n\nWhen this function establishes sync control, the command position of the slave axis at the time that this function is called becomes synchronized to the command position of the master axis at the time that this function is called.\n\nWhen this function establishes sync control, the master axis can be moved immediately after this function returns.\n\nUnlike many other sync functions, this function is also able to establish sync control while the master and slave axes are not in Idle state. The slave axis will catch up to the master axis velocity using the profile parameters passed to this function. Sync control is established at the position that the slave axis velocity catches up the master axis velocity.\n\nIf the specified slave axis has already established sync control with the specified master axis, this function behaves the same as SetSyncGearRatio. If the specified slave axis is synchronized to a different master axis, an error will be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Establish sync control between two axes, and set the sync gear ratio between a sync slave axis and the master axis."
    },
    {
        "No": 249,
        "FunctionPython": "def SyncToJog(slaveAxis, pProfile)\u00a0",
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis, Profile *pProfile)",
        "Parameters": "[in] slaveAxis The slave axis to resolve sync. \n[in] pProfile A pointer to a Profile class object that contains the profile parameters for the jog command. \n",
        "Remarks": "This function resolves sync control for a slave axis, and immediately starts a jog command for the slave axis. If the slave axis was in motion when this function is called, the initial velocity of the jog command will be the velocity of the slave axis when this function is called (unless a non-zero startingVelocity is specified in the profile argument of this function, in which case that starting velocity will take precedence). ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis. "
    },
    {
        "No": 250,
        "FunctionPython": "def SyncToJog(slaveAxis)\u00a0",
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis)",
        "Parameters": "[in] slaveAxis The slave axis to resolve sync. \n[in] pProfile A pointer to a Profile class object that contains the profile parameters for the jog command. \n",
        "Remarks": "This function resolves sync control for a slave axis, and immediately starts a jog command for the slave axis. The velocity of the jog command will equal the velocity of the slave axis when this function is called.\n\nBecause the deceleration is not specified for the jog command, attempting to stop the jog command using the Stop function will cause the default deceleration (10000 user units per second) to be used. For most applications, the default deceleration is not suitable, so the Stop function with a deceleration argument should be used instead. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis with the velocity equal to the velocity that the slave axis was moving at"
    },
    {
        "No": 251,
        "FunctionPython": "def ResolveSync(slaveAxis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ResolveSync(int slaveAxis)",
        "Parameters": "[in] slaveAxis The slave axis to release synchronous control.  ",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Release the specified slave axis from synchronous control."
    },
    {
        "No": 252,
        "FunctionPython": "def SetSyncGroup(groupId, pSyncGroup)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSyncGroup(int groupId, SyncGroup syncGroup)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[in] syncGroup A pointer to a SyncGroup class object that specifies the sync group parameters. \n",
        "Remarks": "This function sets the settings of a sync group. The maximum number of sync groups that can be defined at once is equal to maxSyncGroup.\n\nA sync group consists of one sync master axis and any number of slave axes. The sync group tracks the home done status of the sync group and any errors encountered during the sync operation. These statuses can be checked using the GetSyncGroupStatus function.\n\nA sync group must first be enabled using the EnableSyncGroup function before it has any effect. Once enabled, a sync group will automatically start sync control for the defined slave axes while they are in servo on (Servo On is TRUE) state.\n\nIf this function is called to redefine a sync group that is currently enabled, the sync group will return to disabled state and must be enabled again using the EnableSyncGroup function.\n\nThere are several sync group functions that cannot be replicated with normal sync control. For example, sync groups can be configured to turn all sync axis servos on or off together with the servoOnOffSynchronization option. Using the CatchUp startup type, sync groups are able to execute catch up motion to restore the previous sync offset after sync is broken.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axes and parameters of a synchronization group."
    },
    {
        "No": 253,
        "FunctionPython": "def GetSyncGroup(groupId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSyncGroup(int groupId, SyncGroup *pSyncGroup)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[out] pSyncGroup A pointer to a SyncGroup class object that specifies the sync group parameters. \n",
        "Remarks": "This function gets the settings of a particular sync group. To get for the statuses of the sync group, including whether the sync group is enabled, use the GetSyncGroupStatus function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axes and parameters of a sync group. "
    },
    {
        "No": 254,
        "FunctionPython": "def AddAxisToSyncGroup(groupId, axis, isMaster)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddAxisToSyncGroup(int groupId, int axis, unsigned char isMaster)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[in] axis The axis to add to the sync group. \n[in] isMaster 0: The axis is a slave axis; 1: The axis is a master axis. \n",
        "Remarks": "This function adds an axis to a sync group. A slave axis or a master axis can be added, depending on the value of the isMaster argument.\n\nAdding a master axis will remove any existing master axis from the sync group. A sync group may only have one master axis at any time.\n\nIf a master axis is added, but the axis is already one of the slave axes in the sync group, the axis will become the master axis and no longer be a slave axis.\n\nIf a slave axis is added, but the axis is already the master axis of the sync group, the axis will become a slave axis and the sync group will have no master axis (until a new master axis is added).\n\nCalling this function on a sync group that is currently enabled will disable it. The sync group must be enabled again using the EnableSyncGroup function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Add another axis to an existing sync group. "
    },
    {
        "No": 255,
        "FunctionPython": "def RemoveAxisFromSyncGroup(groupId, axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC RemoveAxisFromSyncGroup(int groupId, int axis)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[in] axis The axis to remove from the sync group. \n",
        "Remarks": "This function removes an axis from the sync group.\n\nCalling this function on a sync group that is currently enabled will disable it. The sync group must be enabled again using the EnableSyncGroup function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Remove an axis from an existing sync group. "
    },
    {
        "No": 256,
        "FunctionPython": "def EnableSyncGroup(groupId, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnableSyncGroup(int groupId, unsigned char enable)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[in] enable 0: Disable the sync group; 1: Enable the sync group. \n",
        "Remarks": "This functions enables or disables a sync group. A sync group must be enabled before it has any effect. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Enable or disable a sync group. "
    },
    {
        "No": 257,
        "FunctionPython": "def GetSyncGroupStatus(groupId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSyncGroupStatus(int groupId, SyncGroupStatus *pStatus)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. \n[out] pStatus A pointer to an object of the class SyncGroupStatus that contains the sync group status. \n",
        "Remarks": "This function gets the current status of a sync group. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current status of the specified sync group."
    },
    {
        "No": 258,
        "FunctionPython": "def ClearSyncGroupError(groupId)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearSyncGroupError(int groupId)",
        "Parameters": "[in] groupId The sync group ID. This value must be between 0 and maxSyncGroup - 1. ",
        "Remarks": "This function clears the catchUpError, syncError, axisError, and interruptError errors of the specified sync group to 0. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear all sync group errors of the specified sync group. "
    },
    {
        "No": 259,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 260,
        "FunctionPython": "def SetServoOn(axis, newStatus)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetServoOn(int axis, int newStatus)",
        "Parameters": "[in] axis The axis of the servo drive to turn on or off. \n[in] newStatus 1: Turn on the servo, 0: Turn off the servo \n",
        "Remarks": "This function will return ErrorCode::None after sending a signal to the servo to turn on or off. Even after this function returns no error, the servo may take a few cycles to turn on or off, or may fail to turn on or off. The Servo On status (obtained with GetStatus) should be checked to verify that the axis servo has turned on or off before continuing with operations that require the servo to be on or off. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Turn a servo drive in the servo network on or off. "
    },
    {
        "No": 261,
        "FunctionPython": "def SetServoOn_AxisSel(axisSel, newStatus)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetServoOn(AxisSelection *axisSel, int newStatus)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class that specifies which axes to turn on or off. \n[in] newStatus 1: Turn on the servo, 0: Turn off the servo \n",
        "Remarks": "This function is a variation of the SetServoOn function that operates on multiple axes at the same time. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Turn multiple servo drives in the servo network on or off. "
    },
    {
        "No": 262,
        "FunctionPython": "def ClearAmpAlarm(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(int axis)",
        "Parameters": "[in] axis The axis to clear the amp alarm. ",
        "Remarks": "This function will return ErrorCode::None after sending a signal to the servo to clear the amp alarm. Even after this function returns no error, the servo may take a few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp Alarm status (obtained with GetStatus) can be checked to verify whether the amp alarm has been cleared. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarm on the specified axis. "
    },
    {
        "No": 263,
        "FunctionPython": "def ClearAmpAlarm_AxisSel(axisSel)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(AxisSelection *axisSel)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class that specifies which axes to clear the amp alarm. ",
        "Remarks": "This function is a variation of the ClearAmpAlarm function that operates on multiple axes at the same time. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarms on multiple axes."
    },
    {
        "No": 264,
        "FunctionPython": "def ClearAxisAlarm(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(int axis)",
        "Parameters": "[in] axis The axis to clear the axis alarm. ",
        "Remarks": "This function clears the axis alarms for the specified axis. Axis alarms are software-based alarms generated by WMX3 such as following error. These alarms are not generated by the hardware.\n\nTo clear hardware-generated amp alarms, use the ClearAmpAlarm function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on the specified axis."
    },
    {
        "No": 265,
        "FunctionPython": "def ClearAxisAlarm_AxisSel(axisSel)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class that specifies which axes to clear the axis alarm. ",
        "Remarks": "This function is a variation of the ClearAxisAlarm function that operates on multiple axes at the same time. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on multiple axes. "
    },
    {
        "No": 266,
        "FunctionPython": "def SetAxisCommandMode(axis, mode)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(int axis, AxisCommandMode::T mode)",
        "Parameters": "[in] axis The axis to set the command mode. \n[in] mode The command mode to set the axis to. \n",
        "Remarks": "The AxisCommandMode of an axis determines how the axis is commanded. An axis operating in Position mode will be controlled by position, an axis operating in Velocity mode will be controlled by velocity, and an axis operating in Torque mode will be controlled by torque. Most motion commands can only be executed by an axis in a particular mode.\n\nThe axis command mode can only be changed while the axis is in the Idle operation state or when the engine is not communicating with the axes (the engine is not in Communicating state). Calling this function while the axis is not in Idle operation state will cause the NotIdleState error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of the axis."
    },
    {
        "No": 267,
        "FunctionPython": "def SetAxisCommandMode_AxisSel(axisSel, mode)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(AxisSelection *pAxisSelection, AxisCommandMode::T mode)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class that specifies which axes to set the command mode. \n[in] mode The command mode to set the axis to. \n",
        "Remarks": "This function is a variation of the SetAxisCommandMode function that operates on multiple axes at the same time.\n\nThis function will change the command mode of the specified axes in sequence, starting from the smallest axis number. If the command mode of an axis cannot be changed (for example, because the axis is not in Idle operation state), this function will return an error and abort changing the command mode of subsequent axes, but the command modes of earlier axes will remain changed.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of multiple axes. "
    },
    {
        "No": 268,
        "FunctionPython": "def GetAxisCommandMode(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAxisCommandMode(int axis, AxisCommandMode::T *pMode)",
        "Parameters": "[in] axis The axis to get the command mode. \n[out] pMode A pointer to a AxisCommandMode variable that will contain the command mode of the axis. \n",
        "Remarks": "This function obtains that current AxisCommandMode of an axis. This value is identical to the Axis Command Mode status obtained with the GetStatus function.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the command mode of the axis. "
    },
    {
        "No": 269,
        "FunctionPython": "def GetPosCommand(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPosCommand(int axis, double *pPosition)",
        "Parameters": "[in] axis The axis to get the position command. \n[out] pPosition A pointer that will contain the position command. \n",
        "Remarks": "This function obtains the current cycle position command of an axis. This value is identical to the Pos Cmd status obtained with the GetStatus function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle position command of the axis. "
    },
    {
        "No": 270,
        "FunctionPython": "def GetPosFeedback(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPosFeedback(int axis, double *pPosition)",
        "Parameters": "[in] axis The axis to get the position feedback. \n[out] pPosition A pointer that will contain the position feedback. \n",
        "Remarks": "This function obtains the current cycle position feedback of an axis. This value is identical to the Actual Pos status obtained with the GetStatus function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle position feedback of the axis."
    },
    {
        "No": 271,
        "FunctionPython": "def GetVelCommand(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVelCommand(int axis, double *pVelocity)",
        "Parameters": "[in] axis The axis to get the velocity command. \n[out] pVelocity A pointer that will contain the velocity command. \n",
        "Remarks": "This function obtains the current cycle velocity command of an axis. This value is identical to the Velocity Cmd status obtained with the GetStatus function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle velocity command of the axis"
    },
    {
        "No": 272,
        "FunctionPython": "def GetVelFeedback(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVelFeedback(int axis, double *pVelocity)",
        "Parameters": "[in] axis The axis to get the velocity feedback. \n[out] pVelocity A pointer that will contain the velocity feedback. \n",
        "Remarks": "This function obtains the current cycle velocity feedback of an axis. This value is identical to the Actual Velocity status obtained with the GetStatus function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current cycle velocity feedback of the axis"
    },
    {
        "No": 273,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 274,
        "FunctionPython": "def StartVel(pVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVel(VelCommand *pVelCommand)",
        "Parameters": "[in] pVelCommand A pointer to an object of the VelCommand class that contains the velocity command parameters. ",
        "Remarks": "This function will command the specified axis to accelerate or decelerate to the specified velocity, and then continue moving at the specified velocity. The target velocity may be positive or negative. The axis will move in the reverse direction if the velocity is negative.\n\nThe acceleration determines the rate at which the speed of the axis will increase, regardless of the direction of motion command.\n\nThe deceleration determines the rate at which the speed of the axis will decrease, regardless of the direction of motion command.\n\nAn axis that is already executing a velocity command can be given a new override velocity command using this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a velocity command."
    },
    {
        "No": 275,
        "FunctionPython": "def StartVel_TimedVel(pTimedVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVel(TimedVelCommand *pTimedVelCommand)",
        "Parameters": "[in] pTimedVelCommand A pointer to an object of the TimedVelCommand class that contains the timed velocity command parameters. ",
        "Remarks": "This function can only command axes in the Velocity command mode. For additional information, see SetAxisCommandMode.\n\nThis function will command the specified axis to accelerate to the specified velocity, and then continue moving at the specified velocity for the specified amount of time, and then decelerate to a stop.\n\nThe acceleration determines the rate at which the speed of the axis will increase, regardless of the direction of the motion command. This value must be positive or 0.\n\nIf the acceleration time is set to 0, the axis will change to the target velocity in one cycle, ignoring the specified acceleration or deceleration. This special method of specifying the acceleration is only available for this function, and not for other functions that take an acceleration argument.\n\nThe deceleration determines the rate at which the speed of the axis will decrease, regardless of the direction of the motion command. This includes the deceleration rate of the axis when the axis stops after the run time elapses. Also, if the axis is stopped using the Stop API function, it will stop using the deceleration that was specified when calling this function. This value must be positive or 0.\n\nIf the deceleration time is set to 0, the axis will stop in one cycle when the run time elapses, or when the Stop API function is called. This special method of specifying the deceleration is only available for this function, and not for other functions that take a deceleration argument.\n\nOnly the following ProfileTypes are supported by this function. Specifying any other ProfileType will cause this function to return an error.\n\u2022TimeAccTrapezoidal \n\u2022TimeAccSCurve \n\u2022TimeAccJerkRatio \n\u2022TimeAccParabolic \n\u2022TimeAccSin \n\u2022TimeAccAdvancedS\n\nAn axis that is already executing a velocity command can be given a new override velocity command using this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a timed velocity command. "
    },
    {
        "No": 276,
        "FunctionPython": "def StartVel_MaxTrq(pVelCommand, maxTrqLimit)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVel(VelCommand *pVelCommand, double maxTrqLimit)",
        "Parameters": "[in] pVelCommand A pointer to an object of the VelCommand class that contains the velocity command parameters. \n[in] maxTrqLimit The maximum torque limit to apply. \n",
        "Remarks": "This function is an overloaded function of StartVel that also sets the Max Trq Limit parameter. The Max Trq Limit will be fixed to the specified value while this velocity command executes. After the velocity command is stopped or overridden, the Max Trq Limit will remain at the specified value until modified by another function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a velocity command and set the maximum torque limit."
    },
    {
        "No": 277,
        "FunctionPython": "def StartVel(numCommands, pVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, VelCommand *pVelCommand)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pVelCommand A pointer to an array of objects of the VelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartVel API function for multiple axes.\n\nIf the specified arguments are invalid for any of the commanded axes, the motion will be canceled for all axes and the API function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start velocity commands for multiple axes. "
    },
    {
        "No": 278,
        "FunctionPython": "def StartVel_TimedVel(numCommands, pTimedVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, TimedVelCommand *pTimedVelCommand)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pTimedVelCommand A pointer to an array of objects of the TimedVelCommand class that contain the parameters of the timed velocity commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartVel API function for multiple axes.\n\nIf the specified arguments are invalid for any of the commanded axes, the motion will be canceled for all axes and the API function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start timed velocity commands for multiple axes"
    },
    {
        "No": 279,
        "FunctionPython": "def Stop(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function stops the motion of an axis that is executing a position command, jog command, interpolation command, or home command.\n\nThis function will only stop axes running in Position command mode. To stop axes running in Velocity command mode, use the Stop function. To stop axes running in Torque command mode, use the StopTrq function.\n\nIf the axis was executing a position command or jog command, it will decelerate to rest using the profile, deceleration, and jerk deceleration parameters of the position or jog command.\n\nIf the axis was executing a home command, it will decelerate to rest using the Homing Velocity Slow Dec parameter, using a trapezoidal motion profile.\n\nIf the axis was executing an interpolation command, all interpolated axes will decelerate to rest along the composite vector of the interpolation. The profile, deceleration, and jerk deceleration parameters of the interpolation command are used to calculate the deceleration path.\n\nThis function is unable to stop the slave axis of a synchronous control pair. To stop a slave axis, specify the master axis of the synchronous control pair (this will stop both the slave and master axes).\n\nIf the commanded axis is in Idle state, this function will return no error.\n\nIf the commanded axis is executing a command for which the deceleration cannot be obtained, the axis will be stopped using the Quick Stop Dec parameter as the deceleration, as if the ExecQuickStop function was called. This might occur if this function is called during the first cycle of processing a new position command or override position command. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis."
    },
    {
        "No": 280,
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. ",
        "Remarks": "This function executes the Stop function for multiple axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
    },
    {
        "No": 281,
        "FunctionPython": "def ExecQuickStop(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function is identical to the Stop function, except the deceleration rate is set equal to the Quick Stop Dec parameter, and the motion profile is trapezoidal.\n\nA Stop command can be overridden by a ExecQuickStop command, but not the other way around.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration."
    },
    {
        "No": 282,
        "FunctionPython": "def ExecQuickStop_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecQuickStop(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. ",
        "Remarks": "This function executes the ExecQuickStop function for multiple axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration."
    },
    {
        "No": 283,
        "FunctionPython": "def ExecTimedStop_TimeMilli(axis, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(int axis, double timeMilliseconds)",
        "Parameters": "[in] axis The axis to stop. \n[in] timeMilliseconds The time in milliseconds to stop the axis in. \n",
        "Remarks": "This function is identical to the Stop function, except the deceleration rate is set so that the axis stops in the specified time, and the motion profile is trapezoidal.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile. "
    },
    {
        "No": 284,
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class object that specifies the axes to stop. \n[in] timeMilliseconds The time in milliseconds to stop the axis in. \n",
        "Remarks": "This function executes the ExecTimedStop function for multiple axes. One stop time is specified for all axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 285,
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "Parameters": "[in] numCommands The number of stop motions. Each stop motion commands a single axis. \n[in] pTimeCommand A pointer to an array of objects of the TimeCommand class that contain the parameters of the motion. The number of objects in the array must be equal to numCommands. The timeMilliseconds values specify the time in milliseconds to stop the axis in. \n",
        "Remarks": "This function executes the ExecTimedStop function for multiple axes. A separate stop time is specified for each axis.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Position, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
    },
    {
        "No": 286,
        "FunctionPython": "def SetMaxMotorSpeed(axis, speed)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMaxMotorSpeed(int axis, double speed)",
        "Parameters": "[in] axis The axis to set the maximum motor speed of. \n[in] speed The maximum motor speed. \n",
        "Remarks": "This function sets the maximum motor speed of an axis. The speed of the axis in either direction during all motions will be limited to this value.\n\nSee the discussion under Max Motor Speed for additional information regarding the parameter set by this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum motor speed of an axis."
    },
    {
        "No": 287,
        "FunctionPython": "def GetMaxMotorSpeed(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMaxMotorSpeed(int axis, double *pSpeed)",
        "Parameters": "[in] axis The axis to get the maximum motor speed of. \n[out] pSpeed A pointer to a double that will contain the maximum motor speed. \n",
        "Remarks": "This function gets the maximum motor speed of an axis.\n\nSee the discussion under Max Motor Speed for additional information regarding the parameter set by this function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum motor speed of an axis."
    },
    {
        "No": 288,
        "FunctionPython": "def OverrideVel(pVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideVel(VelCommand *pVelCommand)",
        "Parameters": "[in] pVelCommand A pointer to an object of the VelCommand class that contains the velocity command parameters. ",
        "Remarks": "This function will override just the velocity of the axis. The axis will retain the profile type, acceleration, deceleration, jerk acceleration, jerk deceleration, and all other motion parameters. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set an override velocity for a single axis that is currently executing a velocity command."
    },
    {
        "No": 289,
        "FunctionPython": "def OverrideVel(numCommands, pVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC OverrideVel(unsigned int numCommands, VelCommand *pVelCommand)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pVelCommand A pointer to an array of objects of the VelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the OverrideVel API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set override velocities for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 290,
        "FunctionPython": "def StartPosToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToVel(TriggerVelCommand *pTriggerVelCommand)",
        "Parameters": "[in] pTriggerVelCommand A pointer to an object of the TriggerVelCommand class that contains the velocity command parameters. ",
        "Remarks": "This function will override a position command with a velocity command when the trigger condition is satisfied. The axis command mode will automatically change from Position mode to Velocity mode.\n\nLike the StartVel function, the acceleration and deceleration (or acceleration time and deceleration time for certain profile types) can be set to 0 for infinite acceleration and deceleration.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command."
    },
    {
        "No": 291,
        "FunctionPython": "def StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToVel(unsigned int numCommands, TriggerVelCommand *pTriggerVelCommand)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pTriggerVelCommand A pointer to an array of objects of the TriggerVelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartPosToVel API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 292,
        "FunctionPython": "def StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToVel(VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pVelCommand A pointer to an object of the VelCommand class that contains the parameters of the velocity command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a position command with a velocity command when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Position mode to Velocity mode.\n\nLike the StartVel function, the acceleration and deceleration (or acceleration time and deceleration time for certain profile types) can be set to 0 for infinite acceleration and deceleration.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 293,
        "FunctionPython": "def StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToVel(unsigned int numCommands, VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pVelCommand A pointer to an array of objects of the VelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartPosToVel API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events"
    },
    {
        "No": 294,
        "FunctionPython": "def StartTrqToVel_TriggerVel(pTriggerVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(TriggerVelCommand *pTriggerVelCommand)",
        "Parameters": "[in] pTriggerVelCommand A pointer to an object of the TriggerVelCommand class that contains the velocity command parameters. ",
        "Remarks": "This function will override a torque command with a velocity command when the trigger condition is satisfied. The axis command mode will automatically change from Torque mode to Velocity mode.\n\nLike the StartVel function, the acceleration and deceleration (or acceleration time and deceleration time for certain profile types) can be set to 0 for infinite acceleration and deceleration.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 295,
        "FunctionPython": "def StartTrqToVel_TriggerVel(numCommands, pTriggerVelCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(unsigned int numCommands, TriggerVelCommand *pTriggerVelCommand)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pTriggerVelCommand A pointer to an array of objects of the TriggerVelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartTrqToVel API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 296,
        "FunctionPython": "def StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pVelCommand A pointer to an object of the VelCommand class that contains the parameters of the velocity command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a torque command with a velocity command when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Torque mode to Velocity mode.\n\nLike the StartVel function, the acceleration and deceleration (or acceleration time and deceleration time for certain profile types) can be set to 0 for infinite acceleration and deceleration.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 297,
        "FunctionPython": "def StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrqToVel(unsigned int numCommands, VelCommand *pVelCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of velocity commands. Each command controls a single axis. \n[in] pVelCommand A pointer to an array of objects of the VelCommand class that contain the parameters of the velocity commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartTrqToVel API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events. "
    },
    {
        "No": 298,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 299,
        "FunctionPython": "def SetMaxTrqLimit(axis, torque)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMaxTrqLimit(int axis, double torque)",
        "Parameters": "[in] axis The axis to set the torque limit. \n[in] torque The maximum torque that the axis will apply, in units of %. \n",
        "Remarks": "This function sets the maximum torque output of an axis. The axis servo will only apply up to the maximum torque limit set using this function.\n\nSee the discussion under Max Trq Limit for additional information regarding the parameter set by this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit of an axis."
    },
    {
        "No": 300,
        "FunctionPython": "def GetMaxTrqLimit(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMaxTrqLimit(int axis, double *pTorque)",
        "Parameters": "[in] axis The axis to get the torque limit. \n[out] pTorque A pointer to a double that will contain the maximum torque limit, in units of %. \n",
        "Remarks": "This function gets the maximum torque output of an axis.\n\nSee the discussion under Max Trq Limit for additional information regarding the parameter obtained by this function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit of an axis."
    },
    {
        "No": 301,
        "FunctionPython": "def SetPositiveTrqLimit(axis, torque)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPositiveTrqLimit(int axis, double torque)",
        "Parameters": "[in] axis The axis to set the torque limit. \n[in] torque The maximum torque that the axis will apply in the positive direction, in units of %. \n",
        "Remarks": "This function sets the maximum torque output of an axis in the positive direction. The axis servo will only apply up to the maximum torque limit set using this function in the positive direction.\n\nSee the discussion under Positive Trq Limit for additional information regarding the parameter set by this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit in the positive direction of an axis."
    },
    {
        "No": 302,
        "FunctionPython": "def GetPositiveTrqLimit(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPositiveTrqLimit(int axis, double *pTorque)",
        "Parameters": "[in] axis The axis to get the torque limit. \n[out] pTorque A pointer to a double that will contain the positive torque limit, in units of %. \n",
        "Remarks": "This function gets the maximum torque output of an axis in the positive direction.\n\nSee the discussion under Positive Trq Limit for additional information regarding the parameter obtained by this function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit in the positive direction of an axis."
    },
    {
        "No": 303,
        "FunctionPython": "def SetNegativeTrqLimit(axis, torque)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetNegativeTrqLimit(int axis, double torque)",
        "Parameters": "[in] axis The axis to set the torque limit. \n[in] torque The maximum torque that the axis will apply in the negative direction, in units of %. \n",
        "Remarks": "This function sets the maximum torque output of an axis in the negative direction. The axis servo will only apply up to the maximum torque limit set using this function in the negative direction.\n\nSee the discussion under Negative Trq Limit for additional information regarding the parameter set by this function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the maximum torque limit in the negative direction of an axis. "
    },
    {
        "No": 304,
        "FunctionPython": "def GetNegativeTrqLimit(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetNegativeTrqLimit(int axis, double *pTorque)",
        "Parameters": "[in] axis The axis to get the torque limit. \n[out] pTorque A pointer to a double that will contain the negative torque limit, in units of %. \n",
        "Remarks": "This function gets the maximum torque output of an axis in the negative direction.\n\nSee the discussion under Negative Trq Limit for additional information regarding the parameter obtained by this function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the maximum torque limit in the negative direction of an axis. "
    },
    {
        "No": 305,
        "FunctionPython": "def StartTrq(pTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrq(TrqCommand *pTrqCommand)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. ",
        "Remarks": "This function will start a torque command. The OperationState of the axis will become Trq.\n\nWhile executing a torque command, the axis will apply a constant torque in the specified direction. Depending on the load on the axis, the axis position may move during a torque command.\n\nThis function can only command axes in the Torque command mode. For additional information, see SetAxisCommandMode.\n\nIn order to use this function, the axis must be configured to receive cyclic torque commands. The trqCommandSupport status returned by GetStatus will contain TRUE if the axis is configured to receive cyclic torque commands. Even if the axis is configured to receive cyclic torque commands, this function will not work if the axis servo does not support torque commands.\n\nThe torque argument has units of %. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command."
    },
    {
        "No": 306,
        "FunctionPython": "def StartTrq(numCommands, pTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrq(unsigned int numCommands, TrqCommand *pTrqCommand)",
        "Parameters": "[in] numCommands The number of torque commands. Each command controls a single axis. \n[in] pTrqCommand A pointer to an array of objects of the TrqCommand class that contain the parameters of the torque commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartTrq API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start torque commands for multiple axes. "
    },
    {
        "No": 307,
        "FunctionPython": "def StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTrq(TrqCommand *pTrqCommand, double maxMotorSpeed)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] maxMotorSpeed The maximum motor speed to apply. \n",
        "Remarks": "This function is an overloaded function of StartTrq that also sets the Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified value while this torque command executes. After the torque command is stopped or overridden, the Max Motor Speed will remain at the specified value until modified by another function. The Max Motor Speed parameter is specified in units of rpm. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command and set the maximum motor speed. "
    },
    {
        "No": 308,
        "FunctionPython": "def StartRampTimeTrq(pTrqCommand, rampCycleTime)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartRampTimeTrq(TrqCommand *pTrqCommand, unsigned int rampCycleTime)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] rampCycleTime The number of communication cycles that the torque will be changed over. If 0 or 1 is specified, the torque will be changed over 1 cycle. \n",
        "Remarks": "This function will start a torque command. Compared to the StartTrq function, the torque will be changed over a number of communication cycles.\n\nThe Cycle Time Milliseconds status obtained with GetStatus can be used to find the number of milliseconds per communication cycle.\n\nThe torque will change at a constant rate over the specified time. This rate is dependent on the target torque and the current torque command of the axis. This function can command an axis that is already executing a torque command. Other torque commands can override this torque command, even while the torque is still changing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command in which the torque is changed over time"
    },
    {
        "No": 309,
        "FunctionPython": "def StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartRampTimeTrq(TrqCommand *pTrqCommand, unsigned int rampCycleTime, double maxMotorSpeed)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] rampCycleTime The number of communication cycles that the torque will be changed over. If 0 or 1 is specified, the torque will be changed over 1 cycle. \n[in] maxMotorSpeed The maximum motor speed to apply. \n",
        "Remarks": "This function is an overloaded function of StartRampTimeTrq that also sets the Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified value while this torque command executes. After the torque command is stopped or overridden, the Max Motor Speed will remain at the specified value until modified by another function. The Max Motor Speed parameter is specified in units of rpm. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed over time and set the maximum motor speed."
    },
    {
        "No": 310,
        "FunctionPython": "def StartRampRateTrq(pTrqCommand, rampRate)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartRampRateTrq(TrqCommand *pTrqCommand, double rampRate)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] rampRate The rate at which the torque is changed, in units of % per second. \n",
        "Remarks": "This function will start a torque command. Compared to the StartTrq function, the torque will change at the specified rate until the target torque is reached.\n\nThis function can command an axis that is already executing a torque command. Other torque commands can override this torque command, even while the torque is still changing. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed at a specified rate. "
    },
    {
        "No": 311,
        "FunctionPython": "def StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartRampRateTrq(TrqCommand *pTrqCommand, double rampRate, double maxMotorSpeed)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] rampRate The rate at which the torque is changed, in units of % per second. \n[in] maxMotorSpeed The maximum motor speed to apply. \n",
        "Remarks": "This function is an overloaded function of StartRampRateTrq that also sets the Max Motor Speed parameter. The Max Motor Speed will be fixed to the specified value while this torque command executes. After the torque command is stopped or overridden, the Max Motor Speed will remain at the specified value until modified by another function. The Max Motor Speed parameter is specified in units of rpm. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a torque command in which the torque is changed at a specified rate and set the maximum motor speed. "
    },
    {
        "No": 312,
        "FunctionPython": "def StopTrq(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopTrq(int axis)",
        "Parameters": "[in] axis The axis to stop. ",
        "Remarks": "This function will stop the torque command for an axis executing a torque command.\n\nThis function will only stop axes running in Torque command mode. To stop axes running in Position command mode, use the Stop function. To stop axes running in Velocity command mode, use the Stop function.\n\nIf the commanded axis is in Idle state, this function will return no error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a torque command. "
    },
    {
        "No": 313,
        "FunctionPython": "def StopTrq_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopTrq(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to an AxisSelection class that specifies the axes to stop. ",
        "Remarks": "This function is an overloaded function of StopTrq API function that stops torque commands for multiple axes.\n\nIf any of the commanded axes are in an invalid state, this function will return an error but the remainder of the commanded axes will be stopped. An axis is in an invalid state if the axis servo is not on, if the axis command mode is not Torque, or if the axis is receiving or has received a new motion command to be started on the next communication cycle. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Stop torque commands for multiple axes. "
    },
    {
        "No": 314,
        "FunctionPython": "def StartPosToTrq(pTriggerTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(TriggerTrqCommand *pTriggerTrqCommand)",
        "Parameters": "[in] pTriggerTrqCommand A pointer to an object of the TriggerTrqCommand class that contains the torque command parameters. ",
        "Remarks": "This function will override a position command with a torque command when the trigger condition is satisfied. The axis command mode will automatically change from Position mode to Torque mode.\n\nThe axis commanded by this function must be in the Position command mode when this function is called. When the trigger condition is satisfied, the axis will change to Torque mode. The axis will remain in Torque mode even after the torque command is stopped with the StopTrq function. To return the axis to Position mode, use a function to set the axis command mode (such as SetAxisCommandMode).\n\nThe axis commanded by this function must either be in Idle state or be executing a position command in the Pos state. If the axis started in Idle state or the position command finishes before the trigger condition is satisfied, the axis will continue to wait for the trigger condition to become satisfied. When the trigger condition is satisfied, the axis will change to Torque mode and start executing the torque command.\n\nTo stop this command before the trigger condition is satisfied, use the Stop function. To stop this command after the trigger condition has been satisfied and the torque command has been executed, use the StopTrq function.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command."
    },
    {
        "No": 315,
        "FunctionPython": "def StartPosToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(unsigned int numCommands, TriggerTrqCommand *pTriggerTrqCommand)",
        "Parameters": "[in] numCommands The number of torque commands. Each command controls a single axis. \n[in] pTriggerTrqCommand A pointer to an array of objects of the TriggerTrqCommand class that contain the parameters of the torque commands. The number of elements in the array must equal numCommands \n",
        "Remarks": "This function executes the StartPosToTrq API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands."
    },
    {
        "No": 316,
        "FunctionPython": "def StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a position command with a torque command when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Position mode to Torque mode.\n\nThe axis commanded by this function must be in the Position command mode when this function is called. When the trigger condition is satisfied, the axis will change to Torque mode. The axis will remain in Torque mode even after the torque command is stopped with the StopTrq function. To return the axis to Position mode, use a function to set the axis command mode (such as SetAxisCommandMode).\n\nThe axis commanded by this function must either be in Idle state or be executing a position command in the Pos state. If the axis started in Idle state or the position command finishes before the trigger condition is satisfied, the axis will continue to wait for the trigger condition to become satisfied. When the trigger condition is satisfied, the axis will change to Torque mode and start executing the torque command.\n\nTo stop this command before the trigger condition is satisfied, use the Stop function. To stop this command after the trigger condition has been satisfied and the torque command has been executed, use the StopTrq function.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events. "
    },
    {
        "No": 317,
        "FunctionPython": "def StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPosToTrq(unsigned int numCommands, TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of torque commands. Each command controls a single axis. \n[in] pTrqCommand A pointer to an array of objects of the TrqCommand class that contain the parameters of the torque commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartPosToTrq API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 318,
        "FunctionPython": "def StartVelToTrq(pTriggerTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(TriggerTrqCommand *pTriggerTrqCommand)",
        "Parameters": "[in] pTriggerTrqCommand A pointer to an object of the TriggerTrqCommand class that contains the torque command parameters. ",
        "Remarks": "This function will override a velocity command with a torque command when the trigger condition is satisfied. The axis command mode will automatically change from Velocity mode to Torque mode.\n\nThe axis commanded by this function must be in the Velocity command mode when this function is called. When the trigger condition is satisfied, the axis will change to Torque mode. The axis will remain in Torque mode even after the torque command is stopped with the StopTrq function. To return the axis to Velocity mode, use a function to set the axis command mode (such as SetAxisCommandMode).\n\nThe axis commanded by this function must either be in Idle state or be executing a velocity command in the Velocity state. If the axis started in Idle state or the velocity command finishes before the trigger condition is satisfied, the axis will continue to wait for the trigger condition to become satisfied. When the trigger condition is satisfied, the axis will change to Torque mode and start executing the torque command.\n\nTo stop this command before the trigger condition is satisfied, use the Stop function. To stop this command after the trigger condition has been satisfied and the torque command has been executed, use the StopTrq function.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command."
    },
    {
        "No": 319,
        "FunctionPython": "def StartVelToTrq(numCommands, pTriggerTrqCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(unsigned int numCommands, TriggerTrqCommand *pTriggerTrqCommand)",
        "Parameters": "[in] numCommands The number of torque commands. Each command controls a single axis. \n[in] pTriggerTrqCommand A pointer to an array of objects of the TriggerTrqCommand class that contain the parameters of the torque commands. The number of elements in the array must equal numCommands. \n",
        "Remarks": "This function executes the StartVelToTrq API function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands."
    },
    {
        "No": 320,
        "FunctionPython": "def StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pTrqCommand A pointer to an object of the TrqCommand class that contains the parameters of the torque command. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function will override a velocity command with a torque command when the multiple event trigger condition is satisfied. The axis command mode will automatically change from Velocity mode to Torque mode.\n\nThe axis commanded by this function must be in the Velocity command mode when this function is called. When the trigger condition is satisfied, the axis will change to Torque mode. The axis will remain in Torque mode even after the torque command is stopped with the StopTrq function. To return the axis to Velocity mode, use a function to set the axis command mode (such as SetAxisCommandMode).\n\nThe axis commanded by this function must either be in Idle state or be executing a velocity command in the Velocity state. If the axis started in Idle state or the velocity command finishes before the trigger condition is satisfied, the axis will continue to wait for the trigger condition to become satisfied. When the trigger condition is satisfied, the axis will change to Torque mode and start executing the torque command.\n\nTo stop this command before the trigger condition is satisfied, use the Stop function. To stop this command after the trigger condition has been satisfied and the torque command has been executed, use the StopTrq function.\n\nThis function does not support the SameTimeCompletion, StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. Specifying these trigger types will cause the TriggerTypeNotSupported error to be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered torque command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events."
    },
    {
        "No": 321,
        "FunctionPython": "def StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartVelToTrq(unsigned int numCommands, TrqCommand *pTrqCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] numCommands The number of torque commands. Each command controls a single axis. \n[in] pTrqCommand A pointer to an array of objects of the TrqCommand class that contain the parameters of the torque commands. The number of elements in the array must equal numCommands. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. This parameter should not be an array. \n",
        "Remarks": "This function executes the StartVelToTrq API function for multiple axes. All commanded axes share the same trigger events. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Start triggered torque commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events."
    },
    {
        "No": 322,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 323,
        "FunctionPython": "def SetParam(pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetParam(SystemParam *pParam, SystemParam *pParamError=NULL)",
        "Parameters": "[in] pParam A pointer to an object of the SystemParam class that contains the parameter settings to set. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the SystemParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set system parameter settings for all axes."
    },
    {
        "No": 324,
        "FunctionPython": "def GetParam()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetParam(SystemParam *pParam)",
        "Parameters": "[out] pParam A pointer to an object of the SystemParam class that will contain the current parameter settings. ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for all axes."
    },
    {
        "No": 325,
        "FunctionPython": "def SetParam_Axis(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetParam(int axis, SystemParam *pParam, SystemParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the parameters. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameter settings to set. Although this object contains parameter settings for every axis, only the parameters of the specified axis will be applied. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the SystemParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. Only the parameter values corresponding to the specified axis will be modified this way. \n",
        "Remarks": "This function will not set parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will set axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set system parameter settings for a single axis. "
    },
    {
        "No": 326,
        "FunctionPython": "def GetParam_Axis(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetParam(int axis, SystemParam *pParam)",
        "Parameters": "[in] axis The axis to get the parameters. \n[out] pParam A pointer to an object of the SystemParam class that will contain the current parameter settings. Although this object contains parameter settings for every axis, only the parameter values corresponding to the specified axis will be modified by this function. \n",
        "Remarks": "This function will not get parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will get axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for a single axis."
    },
    {
        "No": 327,
        "FunctionPython": "def SetAxisParam(pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisParam(AxisParam *pParam, AxisParam *pParamError=NULL)",
        "Parameters": "[in] pParam A pointer to an object of the AxisParam class that contains the parameter settings to set. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the AxisParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for all axes. "
    },
    {
        "No": 328,
        "FunctionPython": "def GetAxisParam()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAxisParam(AxisParam *pParam)",
        "Parameters": "[out] pParam A pointer to an object of the AxisParam class that will contain the current parameter settings. ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get axis parameters for all axes."
    },
    {
        "No": 329,
        "FunctionPython": "def SetAxisParam_Axis(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisParam(int axis, AxisParam *pParam, AxisParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the parameters. \n[in] pParam A pointer to an object of the AxisParam class that contains the parameter settings to set. Although this object contains parameter settings for every axis, only the parameters of the specified axis will be applied. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the AxisParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. Only the parameter values corresponding to the specified axis will be modified this way. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for a single axis. "
    },
    {
        "No": 330,
        "FunctionPython": "def GetAxisParam_Axis(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAxisParam(int axis, AxisParam *pParam)",
        "Parameters": "[in] axis The axis to get the parameters. \n[out] pParam A pointer to an object of the AxisParam class that will contain the current parameter settings. Although this object contains parameter settings for every axis, only the parameter values corresponding to the specified axis will be modified by this function. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get axis parameters for a single axis. "
    },
    {
        "No": 331,
        "FunctionPython": "def SetGearRatio(axis, numerator, denominator)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetGearRatio(int axis, double numerator, double denominator)",
        "Parameters": "[in] axis The axis to set the gear ratio. \n[in] numerator The numerator of the gear ratio. \n[in] denominator The denominator of the gear ratio. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the gear ratio of the axis. "
    },
    {
        "No": 332,
        "FunctionPython": "def SetSingleTurn(axis, enable. encoderCount)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSingleTurn(int axis, bool enable, unsigned int encoderCount)",
        "Parameters": "single turn mode and encoder count. \n[in] enable If FALSE, single turn mode will be disabled for the axis. If TRUE, single turn mode will be enabled for the axis. \n[in] encoderCount If single turn mode is enabled, the number of encoder counts (pulses) in one turn. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the single turn mode and single turn encoder count of an axis."
    },
    {
        "No": 333,
        "FunctionPython": "def SetMovingAverageProfileTime(axis, milliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMovingAverageProfileTime(int axis, double milliseconds)",
        "Parameters": "[in] axis The axis to set the moving average profile time. \n[in] milliseconds The averaging time of the moving average filter in milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the moving average profile time parameter for an axis."
    },
    {
        "No": 334,
        "FunctionPython": "def SetAxisUnit(axis, unit)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisUnit(int axis, double unit)",
        "Parameters": "[in] axis The axis to set the axis unit. \n[in] unit The specified axis unit.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axis unit parameter for an axis. "
    },
    {
        "No": 335,
        "FunctionPython": "def SetVelocityFeedforwardGain(axis, gain)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetVelocityFeedforwardGain(int axis, double gain)",
        "Parameters": "[in] axis The axis to set velocity feedforward gain. \n[in] gain The specified velocity feedforward gain.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the velocity feedforward gain parameter for an axis."
    },
    {
        "No": 336,
        "FunctionPython": "def SetAxisPolarity(axis, polarity)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAxisPolarity(int axis, char polarity)",
        "Parameters": "[in] axis The axis to set the axis polarity. \n[in] polarity If set to 1, the polarity is normal; if set to -1, the axis polarity will be reversed (the physical axis will move in the opposite direction).  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axis polarity for an axis."
    },
    {
        "No": 337,
        "FunctionPython": "def SetAbsoluteEncoderMode(axis, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAbsoluteEncoderMode(int axis, bool enable)",
        "Parameters": "[in] axis The axis to set the absolute encoder mode. \n[in] enable If FALSE, absolute encoder mode will be disabled for the axis. If TRUE, absolute encoder mode will be enabled for the axis. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute encoder mode for an axis. "
    },
    {
        "No": 338,
        "FunctionPython": "def SetAbsoluteEncoderHomeOffset(axis, offset)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAbsoluteEncoderHomeOffset(int axis, double offset)",
        "Parameters": "[in] axis The axis to set the absolute encoder home offset. \n[in] offset The specified absolute encoder home offset. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute encoder home offset for an axis."
    },
    {
        "No": 339,
        "FunctionPython": "def GetGearRatio(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetGearRatio(int axis, double *pNumerator, double *pDenominator)",
        "Parameters": "[in] axis The axis to get the gear ratio. \n[out] pNumerator A pointer to a double variable that will contain the numerator of the gear ratio. \n[out] pDenominator A pointer to a double variable that will contain the denominator of the gear ratio. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the gear ratio of the axis. "
    },
    {
        "No": 340,
        "FunctionPython": "def GetSingleTurn(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSingleTurn(int axis, bool *pEnable, unsigned int *pEncoderCount)",
        "Parameters": "[in] axis The axis to set the single turn mode and encoder count. \n[out] pEnable A pointer to an bool variable that will contain FALSE if single turn mode is disabled for the axis and TRUE if single turn mode is enabled for the axis. \n[out] pEncoderCount A pointer to an unsigned int variable that will contain the number of encoder counts that comprise one turn if single turn mode is enabled. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the single turn mode and single turn encoder count of an axis. "
    },
    {
        "No": 341,
        "FunctionPython": "def GetMovingAverageProfileTime(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMovingAverageProfileTime(int axis, double *pMilliseconds)",
        "Parameters": "[in] axis The axis to get the moving average profile time. \n[out] pMilliseconds A pointer to a double variable that will contain the moving average profile time.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the moving average profile time parameter of an axis. "
    },
    {
        "No": 342,
        "FunctionPython": "def GetAxisUnit(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAxisUnit(int axis, double *pUnit)",
        "Parameters": "[in] axis The axis to get the axis unit. \n[out] pUnit A pointer to a double that will contain the axis unit.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axis unit parameter of an axis. "
    },
    {
        "No": 343,
        "FunctionPython": "def GetVelocityFeedforwardGain(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVelocityFeedforwardGain(int axis, double *pGain)",
        "Parameters": "[in] axis The axis to get the velocity feedforward gain. \n[out] pGain A pointer to a double variable that will contain the velocity feedforward gain.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the velocity feedforward gain of an axis."
    },
    {
        "No": 344,
        "FunctionPython": "def GetAxisPolatity(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAxisPolarity(int axis, char *pPolarity)",
        "Parameters": "[in] axis The axis to get the axis polarity. \n[out] pPolarity A pointer to a char variable that will contain the axis polarity.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the axis polarity of an axis."
    },
    {
        "No": 345,
        "FunctionPython": "def GetAbsoluteEncoderMode(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAbsoluteEncoderMode(int axis, bool *pEnable)",
        "Parameters": "[in] axis The axis to get the absolute encoder mode. \n[out] pEnable A pointer to a bool variable that will contain the absolute encoder mode. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the absolute encoder mode of an axis. "
    },
    {
        "No": 346,
        "FunctionPython": "def GetAbsoluteEncoderHomeOffset(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAbsoluteEncoderHomeOffset(int axis, double *pOffset)",
        "Parameters": "[in] axis The axis to get the absolute encoder home offset. \n[out] pOffset A pointer to a double variable that will contain the absolute encoder home offset. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the absolute encoder home offset of an axis."
    },
    {
        "No": 347,
        "FunctionPython": "def SetFeedbackParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetFeedbackParam(int axis, FeedbackParam *pParam, FeedbackParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the feedback parameters. \n[in] pParam A pointer to an object of the FeedbackParam class that contains the feedback parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the FeedbackParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set feedback parameter settings for an axis."
    },
    {
        "No": 348,
        "FunctionPython": "def SetHomeParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetHomeParam(int axis, HomeParam *pParam, HomeParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the home parameters. \n[in] pParam A pointer to an object of the HomeParam class that contains the feedback parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the HomeParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set home parameter settings for an axis. "
    },
    {
        "No": 349,
        "FunctionPython": "def SetLimitParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetLimitParam(int axis, LimitParam *pParam, LimitParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the limit parameters. \n[in] pParam A pointer to an object of the LimitParam class that contains the limit parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the LimitParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set limit parameter settings for an axis. "
    },
    {
        "No": 350,
        "FunctionPython": "def SetMotionParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMotionParam(int axis, MotionParam *pParam, MotionParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the motion parameters. \n[in] pParam A pointer to an object of the MotionParam class that contains the motion parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the MotionParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set motion parameter settings for an axis. "
    },
    {
        "No": 351,
        "FunctionPython": "def SetAlarmParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetAlarmParam(int axis, AlarmParam *pParam, AlarmParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the alarm parameters. \n[in] pParam A pointer to an object of the AlarmParam class that contains the alarm parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the AlarmParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set alarm parameter settings for an axis. "
    },
    {
        "No": 352,
        "FunctionPython": "def SetSyncParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSyncParam(int axis, SyncParam *pParam, SyncParam *pParamError=NULL)",
        "Parameters": "[in] axis The axis to set the sync parameters. \n[in] pParam A pointer to an object of the SyncParam class that contains the sync parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the SyncParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set sync parameter settings for an axis. "
    },
    {
        "No": 353,
        "FunctionPython": "def SetFlightRecorderParam(axis, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderParam(FlightRecorderParam *pParam, FlightRecorderParam *pParamError=NULL)",
        "Parameters": "[in] pParam A pointer to an object of the FlightRecorderParam class that contains the flight recorder parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the FlightRecorderParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set flight recorder parameters."
    },
    {
        "No": 354,
        "FunctionPython": "def SetFlightRecorderPath(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderPath(char *pPath)",
        "Parameters": "[in] pPath A zero-terminated string that contains the absolute file path to save the flight recorder to. ",
        "Remarks": "This function can be used to change the directory to save the flight recorder data to. By default, flight recorder data is saved to the root of the C drive (\"C:\\\").\n\nThe directory specified must be an absolute file path. The string may or may not be terminated with a backslash. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Set the file path to save the flight recorder data to. "
    },
    {
        "No": 355,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetFlightRecorderPath(wchar_t *pPath)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Set the file path to save the flight recorder data to. "
    },
    {
        "No": 356,
        "FunctionPython": "def SetEmergencyStopParam(pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEmergencyStopParam(EmergencyStopParam *pParam, EmergencyStopParam *pParamError=NULL)",
        "Parameters": "[in] pParam A pointer to an object of the EmergencyStopParam class that contains the emergency stop parameters to apply. \n[out] pParamError An optional argument that returns which parameters were invalid. Each value inside the EmergencyStopParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set emergency stop parameters."
    },
    {
        "No": 357,
        "FunctionPython": "def GetFeedbackParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetFeedbackParam(int axis, FeedbackParam *pParam)",
        "Parameters": "[in] axis The axis to get the feedback parameters \n[out] pParam A pointer to an object of the FeedbackParam class that will contain the current feedback parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get feedback parameter settings for an axis."
    },
    {
        "No": 358,
        "FunctionPython": "def GetHomeParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetHomeParam(int axis, HomeParam *pParam)",
        "Parameters": "[in] axis The axis to get the home parameters \n[out] pParam A pointer to an object of the HomeParam class that will contain the current home parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get home parameter settings for an axis. "
    },
    {
        "No": 359,
        "FunctionPython": "def GetLimitParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetLimitParam(int axis, LimitParam *pParam)",
        "Parameters": "[in] axis The axis to get the limit parameters \n[out] pParam A pointer to an object of the LimitParam class that will contain the current limit parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get limit switch parameter settings for an axis"
    },
    {
        "No": 360,
        "FunctionPython": "def GetMotionParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMotionParam(int axis, MotionParam *pParam)",
        "Parameters": "[in] axis The axis to get the motion parameters \n[out] pParam A pointer to an object of the MotionParam class that will contain the current motion parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get motion parameter settings for an axis. "
    },
    {
        "No": 361,
        "FunctionPython": "def GetAlarmParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAlarmParam(int axis, AlarmParam *pParam)",
        "Parameters": "[in] axis The axis to get the alarm parameters \n[out] pParam A pointer to an object of the AlarmParam class that will contain the current alarm parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get alarm parameter settings for an axis. "
    },
    {
        "No": 362,
        "FunctionPython": "def GetSyncParam(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSyncParam(int axis, SyncParam *pParam)",
        "Parameters": "[in] axis The axis to get the sync parameters \n[out] pParam A pointer to an object of the SyncParam class that will contain the current sync parameters of the axis. \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the sync parameters of the axis. "
    },
    {
        "No": 363,
        "FunctionPython": "def GetFlightRecorderParam()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetFlightRecorderParam(FlightRecorderParam *pParam)",
        "Parameters": "[out] pParam A pointer to an object of the FlightRecorderParam class that will contain the current flight recorder parameters. ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get flight recorder parameters."
    },
    {
        "No": 364,
        "FunctionPython": "def GetEmergencyStopParam()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEmergencyStopParam(EmergencyStopParam *pParam)",
        "Parameters": "[out] pParam A pointer to an object of the EmergencyStopParam class that will contain the current emergency stop parameters. ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get emergency stop parameters."
    },
    {
        "No": 365,
        "FunctionPython": "def GetDefaultParam(pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetDefaultParam(SystemParam *pParam)",
        "Parameters": "[out] pParam A pointer to an object of the SystemParam class that will contain the default parameters.  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the default system parameters. "
    },
    {
        "No": 366,
        "FunctionPython": "def GetDefaultAxisParam()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetDefaultAxisParam(AxisParam *pAxisParam)",
        "Parameters": "[out] pAxisParam A pointer to an object of the AxisParam class that will contain the default parameters.  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the default axis parameters."
    },
    {
        "No": 367,
        "FunctionPython": "def Export_SysPrm(pPath, pParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 368,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. \n",
        "Remarks": "This function is a variation of Export that accepts a wchar_t array for the file path string. Use this function when using Unicode character sets.\n\nThe exported file itself uses the same character set as Export. Files created with either version of this function are identical.\n",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 369,
        "FunctionPython": "def Export_AxisPrm(pPath, pAxisParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters to an xml file. "
    },
    {
        "No": 370,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. \n",
        "Remarks": "This function is a variation of Export that accepts a wchar_t array for the file path string. Use this function when using Unicode character sets.\n\nThe exported file itself uses the same character set as Export. Files created with either version of this function are identical.\n",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters to an xml file. "
    },
    {
        "No": 371,
        "FunctionPython": "def Export_SysPrm_AxisPrm(pPath, pParam, pAxisParam)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters to an xml file. "
    },
    {
        "No": 372,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. \n",
        "Remarks": "This function is a variation of Export that accepts a wchar_t array for the file path string. Use this function when using Unicode character sets.\n\nThe exported file itself uses the same character set as Export. Files created with either version of this function are identical.\n",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters to an xml file. "
    },
    {
        "No": 373,
        "FunctionPython": "def Export_SysPrm_Axis(pPath, pParam, axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, int axis)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] axis The axis to export the parameter settings. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.\n\nThe parameter settings of only one axis is written to file.\n\nThis function will not export parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will export axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters of one axis to an xml file."
    },
    {
        "No": 374,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, int axis)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] axis The axis to export the parameter settings. \n",
        "Remarks": "This function is a variation of Export that accepts a wchar_t array for the file path string. Use this function when using Unicode character sets.\n\nThe exported file itself uses the same character set as Export. Files created with either version of this function are identical.\n",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters of one axis to an xml file."
    },
    {
        "No": 375,
        "FunctionPython": "def Export_AxisPrm_Axis(pPath, pAxisParam, axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, AxisParam *pAxisParam, int axis)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] axis The axis to export the parameter settings. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.\n\nThe parameter settings of only one axis is written to file.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export axis parameters of one axis to an xml file. "
    },
    {
        "No": 376,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, AxisParam *pAxisParam, int axis)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] axis The axis to export the parameter settings. \n",
        "Remarks": "This function is a variation of Export that accepts a wchar_t array for the file path string. Use this function when using Unicode character sets.\n\nThe exported file itself uses the same character set as Export. Files created with either version of this function are identical.\n",
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": NaN
    },
    {
        "No": 377,
        "FunctionPython": "def Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Export(char *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to. \n[in] pParam A pointer to an object of the SystemParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] pAxisParam A pointer to an object of the AxisParam class that contains the parameters to be exported. Although this class contains parameter settings for all axes, only the parameter settings for the specified axis will be exported. \n[in] axis The axis to export the parameter settings. \n",
        "Remarks": "This function writes the parameter settings passed to this function to an xml file. The parameter settings can be read from the xml file using one of the Import functions.\n\nThe parameter settings of only one axis is written to file.\n\nThis function will not export parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will export axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Export system parameters to an xml file. "
    },
    {
        "No": 378,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Export(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Export system and axis parameters of one axis to an xml file."
    },
    {
        "No": 379,
        "FunctionPython": "def Import_SysPrm(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pParam A pointer to an object of the SystemParam class that will contain the parameters that are loaded. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters from an xml file. "
    },
    {
        "No": 380,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters from an xml file. "
    },
    {
        "No": 381,
        "FunctionPython": "def Import_AxisPrm(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pAxisParam A pointer to an object of the AxisParam class that will contain the parameters that are loaded. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters from an xml file. "
    },
    {
        "No": 382,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, AxisParam *pAxisParam)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters from an xml file. "
    },
    {
        "No": 383,
        "FunctionPython": "def Import_SysPrm_AxisPrm(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pParam A pointer to an object of the SystemParam class that will contain the parameters that are loaded. \n[out] pAxisParam A pointer to an object of the AxisParam class that will contain the parameters that are loaded. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters from an xml file. "
    },
    {
        "No": 384,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters from an xml file. "
    },
    {
        "No": 385,
        "FunctionPython": "def Import_SysPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pParam A pointer to an object of the SystemParam class that will contain the parameters that are loaded. Although this class contains parameter settings for all axes, only the parameter values corresponding to the specified axis or axes will be modified by this function. \n[in] axis The axis to import the parameter settings. \n[in] copyParamToAxes An optional parameter that specifies a set to axes to copy the imported parameter settings to. The parameter settings imported for the specified axis will also be copied to the variables in pParam corresponding to the set of axes specified in copyParamToAxes. This can be used to apply the same set of parameters to multiple axes. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.\n\nThe parameter settings of only one axis is read from file, even if the file contains parameter settings for other axes.\n\nThis function will not import parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will import axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters of one axis from an xml file."
    },
    {
        "No": 386,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import system parameters of one axis from an xml file."
    },
    {
        "No": 387,
        "FunctionPython": "def Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pAxisParam A pointer to an object of the AxisParam class that will contain the parameters that are loaded. Although this class contains parameter settings for all axes, only the parameter values corresponding to the specified axis or axes will be modified by this function. \n[in] axis The axis to import the parameter settings. \n[in] copyParamToAxes An optional parameter that specifies a set to axes to copy the imported parameter settings to. The parameter settings imported for the specified axis will also be copied to the variables in pAxisParam corresponding to the set of axes specified in copyParamToAxes. This can be used to apply the same set of parameters to multiple axes. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.\n\nThe parameter settings of only one axis is read from file, even if the file contains parameter settings for other axes.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters of one axis from an xml file."
    },
    {
        "No": 388,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import axis parameters of one axis from an xml file."
    },
    {
        "No": 389,
        "FunctionPython": "def Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)\u00a0",
        "FunctionC++": "WMX3APIFUNC Import(char *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[out] pParam A pointer to an object of the SystemParam class that will contain the parameters that are loaded. Although this class contains parameter settings for all axes, only the parameter values corresponding to the specified axis or axes will be modified by this function. \n[out] pAxisParam A pointer to an object of the AxisParam class that will contain the parameters that are loaded. Although this class contains parameter settings for all axes, only the parameter values corresponding to the specified axis or axes will be modified by this function. \n[in] axis The axis to import the parameter settings. \n[in] copyParamToAxes An optional parameter that specifies a set to axes to copy the imported parameter settings to. The parameter settings imported for the specified axis will also be copied to the variables in pParam and pAxisParam corresponding to the set of axes specified in copyParamToAxes. This can be used to apply the same set of parameters to multiple axes. \n",
        "Remarks": "This function reads parameter settings from an xml file and copies them to the parameters class passed to this function. Parameter settings that are not in the file are not overwritten.\n\nThe parameter settings of only one axis is read from file, even if the file contains parameter settings for other axes.\n\nThis function will not import parameters that are common to all axes, such as enableFlightRecorder and enableEStopSignal. It will import axis-specific parameters in the FlightRecorderParam and EmergencyStopParam classes such as collectAxisFlightRecorderData and eStopDec.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters of one axis from an xml file."
    },
    {
        "No": 390,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC Import(wchar_t *pPath, SystemParam *pParam, AxisParam *pAxisParam, int axis, AxisSelection *copyParamToAxes=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Import system and axis parameters of one axis from an xml file."
    },
    {
        "No": 391,
        "FunctionPython": "def GetAndExportAll(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAndExportAll(char *pPath)",
        "Parameters": "[in] pPath The absolute file path to save the parameter file to ",
        "Remarks": "This function gets the current system parameter settings and axis parameter settings for all axes, and then exports them to an xml file.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CoreMotion Class",
        "Instruction": "Get the current parameters for all axes and export them to an xml file. "
    },
    {
        "No": 392,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetAndExportAll(wchar_t *pPath)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Get the current parameters for all axes and export them to an xml file. "
    },
    {
        "No": 393,
        "FunctionPython": "def ImportAndSetAll(path)\u00a0",
        "FunctionC++": "WMX3APIFUNC ImportAndSetAll(char *pPath, SystemParam *pParamError=NULL, AxisParam *pAxisParamError=NULL)",
        "Parameters": "[in] pPath The absolute file path to load the parameter file from. \n[in] pParamError An optional argument that returns which parameters were invalid. Each value inside the SystemParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n[in] pAxisParamError An optional argument that returns which parameters were invalid. Each value inside the AxisParam object that is passed to this argument will contain 0 if that parameter was valid and 1 if that parameter was invalid. \n",
        "Remarks": "This function imports parameter settings from the specified xml file, and then sets the imported parameters as the current parameter settings. If any parameter settings are not defined in the xml file, they will be set to 0, which often is an invalid setting and causes the API to return ParameterSettingsInvalid.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Imports parameters from an xml file and set them as the current parameters for all axes. "
    },
    {
        "No": 394,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC ImportAndSetAll(wchar_t *pPath, SystemParam *pParamError=NULL, AxisParam *pAxisParamError=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CoreMotion Class",
        "Instruction": "Imports parameters from an xml file and set them as the current parameters for all axes. "
    },
    {
        "No": 395,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 397,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 398,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 399,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 400,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 401,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 402,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 403,
        "FunctionPython": "def CreateSplineBuffer(channel, points)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreateSplineBuffer(int channel, unsigned int points)",
        "Parameters": "[in] channel The spline execution channel. The maximum number of available channels is maxSplineChannel. \n[in] points The number of points to allocate memory for. Each spline point occupies one point in the memory. Setting the sampleMultiplier parameter of a VelAccLimitedSplineCommand to a value greater than 1 will multiply the number of points occupied by one spline point. For example, if sampleMultiplier is set to 10, each point in the spline will require 10 points worth of buffer memory to store. \n",
        "Remarks": "When the WMX3 engine is started, no memory is allocated for execution of spline motion commands. This function must be called before a spline motion command can be executed.\n\nEach channel has a separate buffer memory space. This function must be called for each channel before that channel can execute spline motion commands. Each channel can execute one spline motion command at one time. To execute two spline motion commands at the same time, buffer memory space must be allocated for two channels. However, if two spline motion commands are executed sequentially with no overlap, only one channel is required, even if the spline motion commands control different axes.\n\nAllocating buffer memory space is an operation that can fail due to lack of memory space or fragmentation of memory. For deterministic operation, this function should be called during initialization to allocate memory for all spline execution channels that will potentially be used by the program.\n\nThe maximum size of the buffer memory space of a spline execution channel is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nIt is not necessary to call this function again after buffer memory has been allocated once. (When the WMX3 engine is restarted, this function must be called again to allocate buffer memory.)\n\nBuffer memory that has been allocated can be freed using the FreeSplineBuffer function. After freeing the buffer memory of a spline execution channel, this function can be called again to reallocate a different amount of buffer memory.\n\nIt is not necessary to free allocated memory using FreeSplineBuffer before exiting the program. Any allocated memory is automatically freed when the WMX3 engine is closed.\n\nThe GetSplineBufferPoints function can be used to find the amount of buffer memory currently allocated to a spline execution channel.\n\nThe GetSplineBytesPerPoint function can be used to convert the buffer memory size from points to bytes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Allocate buffer memory for a spline execution channel."
    },
    {
        "No": 404,
        "FunctionPython": "def FreeSplineBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreeSplineBuffer(int channel)",
        "Parameters": "[in] channel The spline execution channel. The maximum number of available channels is maxSplineChannel. ",
        "Remarks": "This function frees the buffer memory that has been allocated with the CreateSplineBuffer function. This allows CreateSplineBuffer to be called again to allocate a different amount of memory.\n\nIt is not necessary to call this function before exiting the program, as any allocated memory is automatically freed when the WMX3 engine closes.\n\nThe freed memory, after a brief delay, will become available for the system to use for another purpose. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Free buffer memory for a spline execution channel."
    },
    {
        "No": 405,
        "FunctionPython": "def GetSplineBufferPoints(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSplineBufferPoints(int channel, unsigned int *pPoints)",
        "Parameters": "[in] channel The spline execution channel. The maximum number of available channels is maxSplineChannel. \n[out] pPoints A pointer to an unsigned int that will contain the number of points that can be stored in the buffer memory. \n",
        "Remarks": "This function obtains the amount of buffer memory currently allocated to a spline execution channel, in units of points.\n\nTo convert the buffer memory size from the number of points to bytes, use the GetSplineBytesPerPoint function.\n\nIf no buffer memory has been allocated to the specified channel yet, this function will return 0 in the pPoints parameter. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the amount of buffer memory currently allocated to a spline execution channel. "
    },
    {
        "No": 406,
        "FunctionPython": "def GetSplineBytesPerPoint()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSplineBytesPerPoint(unsigned int *pBytes)",
        "Parameters": "[out] pBytes A pointer to an unsigned int that will contain the number of bytes of memory required per point data. \n",
        "Remarks": "This function obtains the number of bytes of memory required to store one point data in the spline execution buffer memory. This can be used to calculate the number of bytes of buffer memory required to store a particular number of points. For example, if this function returns 192, the number of bytes required to store 100000 points is 192*100000 = 19200000, or approximately 18.3MB. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the number of bytes required per point data in the spline execution buffer memory."
    },
    {
        "No": 407,
        "FunctionPython": "def StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, PointTimeSplineCommand *pSplineCommand,unsigned int numPoints,SplinePoint *pPoint, double *pPointTimeMilliseconds)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a PointTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n[in] pPointTimeMilliseconds An array of doubles that contain the spline time data. The N-th index of the array specifies the time data of the N-th index of the pPoint array. The length of the array must be equal to numPoints. The times are specified in units of milliseconds. \n",
        "Remarks": "During a cubic spline motion, the commanded axes will traverse each point in order at the specified times. The velocities and accelerations of the commanded axes will be continuous throughout the entire motion, so the resulting path will be smooth. However, if the points and times are not specified carefully, the commanded axes may reach a very high velocity or acceleration during the motion (although the velocity and acceleration will still be continuous).\n\nThis type of spline is suitable if the time at which each point is traversed must be specified.\n\nThe first point will automatically be set to the current position of the commanded axes, and does not need to be passed to this function. If the first point passed to this function is equal to the current position of the commanded axes, that point will be ignored.\n\nThe time at each point must be specified in ascending order, or else an error will be returned. The first time will automatically be set to 0, and does not need to be passed to this function. If the first time passed to this function is equal to 0, that time will be ignored.\n\nWhen stopping the spline motion using the Stop function, the interpolating axes will decelerate to a stop along the spline path using the approximate maximum composite acceleration that would be applied to the axes when executing the spline command.\n\nThe minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will cause the TimeBetweenPointsTooClose error to be returned.\n\nThe minimum distance between points is 1e-6 user units. If there are consecutive points with less than this distance, the latter point will be ignored. If this causes the number of points to be less than 2 (excluding the first point), the PointCountBelowMinimum error will be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 408,
        "FunctionPython": "def StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a TotalTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "During a cubic spline motion, the commanded axes will traverse each point, completing the spline using the specified total time. The velocities and accelerations of the commanded axes will be continuous throughout the entire motion, so the resulting path will be smooth. The velocity along the spline will be relatively constant, so one or more commanded axes may undergo high acceleration if there is a sharp corner in the given point data.\n\nThe time at which each point is traversed is calculated taking into account the distance between the points, the acceleration at the beginning, and the deceleration at the end.\n\nThis type of spline is suitable for motion where the total time to complete the spline is important, and there is no sharp corner in the given point data. If there is a sharp corner in the point data, one or more commanded axes may undergo high acceleration, even if the velocity along the spline is relatively constant. At these sharp corners, the velocity may also suddenly and momentarily increase or decrease.\n\nThe first point will automatically be set to the current position of the commanded axes, and does not need to be passed to this function. If the first point passed to this function is equal to the current position of the commanded axes, that point will be ignored.\n\nWhen stopping the spline motion using the Stop function, the interpolating axes will decelerate to a stop along the spline path using the approximate maximum composite acceleration that would be applied to the axes when executing the spline command.\n\nThe minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will cause the TimeBetweenPointsTooClose error to be returned.\n\nThe minimum distance between points is 1e-6 user units. If there are consecutive points with less than this distance, the latter point will be ignored. If this causes the number of points to be less than 2 (excluding the first point), the PointCountBelowMinimum error will be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 409,
        "FunctionPython": "def StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a ProfileSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "During a cubic spline motion, the commanded axes will traverse each point, traveling along the spline using the specified motion profile. The velocities and accelerations of the commanded axes will be continuous throughout the entire motion, so the resulting path will be smooth. The velocity along the spline will be relatively constant, so one or more commanded axes may have high acceleration if there is a sharp corner in the given point data.\n\nCompared to StartCSplinePos, this function has the following differences:\n\u2022The velocity, acceleration, jerk, etc. that is used is directly specified instead of being calculated from the specified time.\n\u2022All available profile shapes in ProfileType can be used.\n\u2022Acceleration and deceleration along the spline path can stretch over several points or a fraction of a point. With StartCSplinePos, acceleration along the spline path occurs only between the first point and second point, and deceleration along the spline path occurs only between the last point and second to last point.\n\nThis type of spline is suitable for motion where the velocity, acceleration, and profile shape along the spline path needs to be specified, and there is no sharp corner in the given point data. If there is a sharp corner in the point data, one or more commanded axes may undergo high acceleration, even if the velocity along the spline is relatively constant. At these sharp corners, the velocity may also suddenly and momentarily increase or decrease.\n\nThe first point will automatically be set to the current position of the commanded axes, and does not need to be passed to this function. If the first point passed to this function is equal to the current position of the commanded axes, that point will be ignored.\n\nWhen stopping the spline motion using the Stop function, the interpolating axes will gradually stop along the spline path using the deceleration parameters specified in the profile argument.\n\nThe minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will cause the TimeBetweenPointsTooClose error to be returned.\n\nThe minimum distance between points is 1e-6 user units. If there are consecutive points with less than this distance, the latter point will be ignored. If this causes the number of points to be less than 2 (excluding the first point), the PointCountBelowMinimum error will be returned.\n\nIf a large value is specified for the sampleMultiplier parameter, the time and distance between points will become smaller from the added sample points, and may cause the TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this occurs, reduce the sampleMultiplier.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions."
    },
    {
        "No": 410,
        "FunctionPython": "def StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a VelAccLimitedSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "During a cubic spline motion, the commanded axes will traverse each point, traveling along the spline at the specified velocity and acceleration, while staying within the velocity and acceleration limits of each individual axis.\n\nThis type of spline is suitable for point data containing sharp corners. Each axis will decelerate at corners to stay within the velocity and acceleration limits of that axis. The entire spline is considered when calculating the deceleration, so the axes may start to decelerate from several points before the sharp corner. The deceleration is optimized so that the spline will be traversed in approximately the shortest amount of time possible with the given velocity and acceleration constraints.\n\nBecause the velocities and accelerations along the spline are sampled at certain non-constant intervals (that are typically greater than one cycle), there will be some approximation and the velocities and accelerations during some cycles may exceed the specified composite values or the limits by a small percentage. Increasing the sample count can improve the accuracy of the velocity and acceleration limits.\n\nThe first point will automatically be set to the current position of the commanded axes, and does not need to be passed to this function. If the first point passed to this function is equal to the current position of the commanded axes, that point will be ignored.\n\nWhen stopping the spline motion using the Stop function, the interpolating axes will decelerate to a stop along the spline path using the approximate maximum composite acceleration that would be applied to the axes when executing the spline command.\n\nThe minimum time between points is 1 microsecond (1e-3 milliseconds). Exceeding this limit will cause the TimeBetweenPointsTooClose error to be returned.\n\nThe minimum distance between points is 1e-6 user units. If there are consecutive points with less than this distance, the latter point will be ignored. If this causes the number of points to be less than 2 (excluding the first point), the PointCountBelowMinimum error will be returned.\n\nIf a large value is specified for the sampleMultiplier parameter, the time and distance between points will become smaller from the added sample points, and may cause the TimeBetweenPointsTooClose or DistanceBetweenPointsTooClose errors to be returned. If this occurs, reduce the sampleMultiplier.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
    },
    {
        "No": 411,
        "FunctionPython": "def StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, PointTimeSplineCommand *pSplineCommand,unsigned int numPoints, SplinePoint *pPoint, double *pPointTimeMilliseconds)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a PointTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n[in] pPointTimeMilliseconds An array of doubles that contain the spline time data. The N-th index of the array specifies the time data of the N-th index of the pPoint array. The length of the array must be equal to numPoints. The times are specified in units of milliseconds. \n",
        "Remarks": "This is a relative position version of the StartCSplinePos function, where all point positions are specified relative to the command positions of the commanded axes at the time that this function is executed.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as relative positions."
    },
    {
        "No": 412,
        "FunctionPython": "def StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a TotalTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This is a relative position version of the StartCSplinePos function, where all point positions are specified relative to the command positions of the commanded axes at the time that this function is executed.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions."
    },
    {
        "No": 413,
        "FunctionPython": "def StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a ProfileSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This is a relative position version of the StartCSplinePos function, where all point positions are specified relative to the command positions of the commanded axes at the time that this function is executed.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions."
    },
    {
        "No": 414,
        "FunctionPython": "def StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a VelAccLimitedSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This is a relative position version of the StartCSplinePos function, where all point positions are specified relative to the command positions of the commanded axes at the time that this function is executed.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions."
    },
    {
        "No": 415,
        "FunctionPython": "def StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a PointTimeSplineCommand that contains the spline parameters. \n[in] pPointTimeMilliseconds An array of doubles that contain the spline time data. The N-th index of the array specifies the time data of the N-th index of the pPoint array. The length of the array must be equal to numPoints. The times are specified in units of milliseconds. ",
        "Remarks": "This function is similar to the StartCSplinePos function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 416,
        "FunctionPython": "def StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a TotalTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplinePos function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions."
    },
    {
        "No": 417,
        "FunctionPython": "def StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a ProfileSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplinePos function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions. "
    },
    {
        "No": 418,
        "FunctionPython": "def StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a VelAccLimitedSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplinePos function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
    },
    {
        "No": 419,
        "FunctionPython": "def StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a PointTimeSplineCommand that contains the spline parameters. \n[in] pPointTimeMilliseconds An array of doubles that contain the spline time data. The N-th index of the array specifies the time data of the N-th index of the pPoint array. The length of the array must be equal to numPoints. The times are specified in units of milliseconds. ",
        "Remarks": "This function is similar to the StartCSplineMov function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as relative positions."
    },
    {
        "No": 420,
        "FunctionPython": "def StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, TotalTimeSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a TotalTimeSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplineMov function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions."
    },
    {
        "No": 421,
        "FunctionPython": "def StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, ProfileSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a ProfileSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplineMov function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions."
    },
    {
        "No": 422,
        "FunctionPython": "def StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCBSplineMov(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "Parameters": "[in] channel The spline channel to execute the spline motion command. \n[in] pSplineCommand A pointer to a VelAccLimitedSplineCommand that contains the spline parameters. \n[in] numPoints The number of points in the pPoint array that is passed to this function. This value must be at least 2. \n[in] pPoint An array of SplinePoint objects that contain the spline point data. The length of the array must be equal to numPoints. \n",
        "Remarks": "This function is similar to the StartCSplineMov function, except the specified points are not necessarily traversed (except for the first point and last point). Instead, the spline path will be pulled toward each point so that it travels close to that point.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions."
    },
    {
        "No": 423,
        "FunctionPython": "CreatePathIntplBuffer(axis, unsigned points)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreatePathIntplBuffer(int axis, unsigned int points)",
        "Parameters": "[in] axis The axis to allocate the buffer memory. \n[in] points The number of points to allocate memory for. Each path interpolation segment and each circular interpolation segment inserted by auto smoothing occupies one point in the memory. \n",
        "Remarks": "When the WMX3 engine is started, no memory is allocated for the execution of path interpolation commands. This function allocates memory to execute the following path interpolation commands:\n\u2022StartPathIntplPos\n\u2022StartPathIntplMov\n\u2022StartPathIntpl3DPos\n\u2022StartPathIntpl3DMov\n\nIf any of the above commands are called before this function, a default buffer memory for maxPathInterpolateAppendPoints will be allocated. If the memory allocation fails, or if more than maxPathInterpolateAppendPoints points are specified, the path interpolation command will return an error. To execute a path interpolation command with more than maxPathInterpolateAppendPoints points, this function must be called beforehand, specifying the required number of points.\n\nThe buffer memory allocated to the axis assigned to axis[0] of the path interpolation command will be used to execute the path interpolation. The buffer memory of the remaining interpolation axes are not used.\n\nAllocating buffer memory space is an operation that can fail due to lack of memory space or fragmentation of memory. For deterministic operation, this function should be called during initialization to allocate memory for all axes that will potentially be the first axis of a path interpolation motion command.\n\nThe maximum size of the path interpolation buffer memory space of each axis is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nIt is not necessary to call this function again after buffer memory has been allocated once. (When the WMX3 engine is restarted, this function must be called again to allocate buffer memory.)\n\nBuffer memory that has been allocated can be freed using the FreePathIntplBuffer function. After freeing the path interpolation buffer memory of an axis, this function can be called again to reallocate a different amount of buffer memory.\n\nIt is not necessary to free allocated memory using FreePathIntplBuffer before exiting the program. Any allocated memory is automatically freed when the WMX3 engine is closed.\n\nThe GetPathIntplBufferPoints function can be used to find the amount of path interpolation buffer memory currently allocated to an axis.\n\nThe GetPathIntplBytesPerPoint function can be used to convert the buffer memory size from points to bytes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Allocate buffer memory to an axis for the execution of path interpolation commands. "
    },
    {
        "No": 424,
        "FunctionPython": "FreePathIntplBuffer(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreePathIntplBuffer(int axis)",
        "Parameters": "[in] axis The axis to free the buffer memory. ",
        "Remarks": "This function frees the buffer memory that has been allocated with the CreatePathIntplBuffer function. This allows CreatePathIntplBuffer to be called again to allocate a different amount of memory.\n\nIt is not necessary to call this function before exiting the program, as any allocated memory is automatically freed when the WMX3 engine closes.\n\nThe freed memory, after a brief delay, will become available for the system to use for another purpose. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Free path interpolation buffer memory for an axis."
    },
    {
        "No": 425,
        "FunctionPython": "GetPathIntplBufferPoints(axis, pPoints)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplBufferPoints(int axis, unsigned int *pPoints)",
        "Parameters": "[in] axis The axis to read the buffer memory size. \n[out] pPoints A pointer to an unsigned int that will contain the number of points that can be stored in the buffer memory. \n",
        "Remarks": "This function obtains the amount of path interpolation buffer memory currently allocated to an axis, in units of points (interpolation segments).\n\nTo convert the buffer memory size from the number of points to bytes, use the GetPathIntplBytesPerPoint function.\n\nIf no buffer memory has been allocated to the specified channel yet, this function will return 0 in the pPoints parameter. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the amount of path interpolation buffer memory currently allocated to an axis. "
    },
    {
        "No": 426,
        "FunctionPython": "GetPathIntplBytesPerPoint(pBytes)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplBytesPerPoint(unsigned int *pBytes)",
        "Parameters": "[out] pBytes A pointer to an unsigned int that will contain the number of bytes of memory required per point data. \n",
        "Remarks": "This function obtains the number of bytes of memory required to store one point data in the path interpolation buffer memory. This can be used to calculate the number of bytes of buffer memory required to store a particular number of points. For example, if this function returns 440, the number of bytes required to store 100000 points is 440*100000 = 44000000, or approximately 44MB. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the number of bytes required per point data in the path interpolation buffer memory."
    },
    {
        "No": 427,
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as absolute positions. ",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 428,
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as relative positions (relative to the command positions at the time that this function is executed). ",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 429,
        "FunctionPython": "def StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as absolute positions.\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 430,
        "FunctionPython": "def StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 431,
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as absolute positions.\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 432,
        "FunctionPython": "def StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 433,
        "FunctionPython": "def OverridePathIntplVelocityMultiplier(int axis, double multiplier)",
        "FunctionC++": "WMX3APIFUNC OverridePathIntplVelocityMultiplier(int axis, double multiplier)",
        "Parameters": "[in] axis The axis executing the path interpolation. \n[in] multiplier The velocity multiplier to apply. \n",
        "Remarks": "This function can be called while executing a path interpolation to change the profile velocity by the specified factor. The interpolating axes will accelerate or decelerate to the new velocity using the acceleration or deceleration of the path interpolation command.\n\nThis function may be called multiple times. Each time this function is called, the new velocity is calculated as the original profile velocity of the path interpolation multiplied by the specified velocity multiplier.\n\nAll other profile parameters, including the starting velocity and end velocity, are not changed by this function (except as noted below). The target positions of the path interpolation are not changed.\n\nIf a different profile is specified for each segment of the path, the velocities of all profiles are multiplied by the specified multiplier. The end velocities of all profiles are also multiplied by the specified multiplier, except for the end velocity of the final segment of the path.\n\nThe velocity multiplier must be between 0 and 2 inclusive. For example, to set the velocity to 50% of the original profile velocity, pass 0.5 to the multiplier argument. If 1 is passed to the multiplier argument, the velocity will be set equal to the original profile velocity of the path interpolation.\n\nIf 0 is passed to the multiplier argument, the path interpolation will be paused as if the Pause function is called. The path interpolation can be resumed by calling this function again with a nonzero multiplier (the path interpolation can also be resumed by calling the Resume function, in which case the motion will be resumed using the multiplier immediately before it was paused).\n\nThis function can also be used in place of the Resume function to resume a path interpolation that has been paused with the Pause function.\n\nIf the velocity after applying the multiplier is below 1 user unit per second, the new velocity will be set to 1 user unit per second.\n\nEither of the two axes executing path interpolation can be passed to the axis argument. This operation of this function will be the same regardless of which of the axes is specified.\n\nWhen this function is called, the profile of the path interpolation will be recalculated. The standard behavior of overrides apply (see Acceleration Reset).\n\nIf the specified axis is not executing a path interpolation command started with StartPathIntplPos or StartPathIntplMov, this function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Override a path interpolation motion using a velocity multiplier."
    },
    {
        "No": 434,
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as absolute positions. ",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 435,
        "FunctionPython": "def StartPathIntpl3DMov(pPathIntplCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as relative positions (relative to the command positions at the time that this function is executed). ",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 436,
        "FunctionPython": "def StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as absolute positions.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 437,
        "FunctionPython": "def StartPathIntpl3DMov_Trigger(pPathIntplCommand, Trigger pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 438,
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as absolute positions.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 439,
        "FunctionPython": "def StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 440,
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as absolute positions. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 441,
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand\u00a0*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as relative positions (relative to the command positions at the time that this function is executed). \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 442,
        "FunctionPython": "def StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand\u00a0*pPathIntplCommand,\u00a0Trigger\u00a0*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as absolute positions.\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 443,
        "FunctionPython": "def StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand\u00a0*pPathIntplCommand,\u00a0Trigger\u00a0*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 444,
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents, unsigned int numAddlCommands=0, PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as absolute positions.\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 445,
        "FunctionPython": "def StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand\u00a0*pPathIntplCommand,\u00a0TriggerEvents\u00a0*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand\u00a0*pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntplAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThe StaggeredDistanceCompletion trigger type is not supported by this function. Specifying this trigger type will cause the function to return an error.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 446,
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as absolute positions. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 447,
        "FunctionPython": "def StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand\u00a0*pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. All positions are specified as relative positions (relative to the command positions at the time that this function is executed). \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 448,
        "FunctionPython": "def StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0Trigger\u00a0*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as absolute positions.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 449,
        "FunctionPython": "def StartPathIntpl3DMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0Trigger\u00a0*pTrigger,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTrigger A pointer to an object of the Trigger class that specifies the trigger condition. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a trigger condition. The motion will only begin when the specified trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 450,
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0TriggerEvents\u00a0*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as absolute positions.\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 451,
        "FunctionPython": "def StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand\u00a0*pPathIntplCommand,\u00a0TriggerEvents\u00a0*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "Parameters": "[in] pPathIntplCommand A pointer to a PathIntplCommand that contains the path interpolation parameters. \n[in] pTriggerEvents A pointer to an object of the TriggerEvents class that contains the trigger events. \n[in] numAddlCommands An optional argument that specifies the number of additional commands to append after pPathIntplCommand. \n[in] pPathIntplAddlCommand An optional argument that is a pointer to an array of PathIntpl3DAdditionalCommand objects. The size of the array should be equal to numAddlCommands. \n",
        "Remarks": "This function starts a path interpolation motion with a multi-event trigger condition. The motion will only begin when the specified multi-event trigger condition is satisfied. All positions are specified as relative positions (relative to the command positions at the time that this function is executed).\n\nThis function allocates memory dynamically when called for the first time for the first interpolating axis (axis[0]) after starting the WMX3 engine. See CreatePathIntplBuffer for additional information. See Function Calls related Memory Allocation for additional information regarding dynamically allocated memory.\n\nThe numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to append additional segments to the path interpolation command after the segments defined in pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an array, and any number of additional commands may be specified as long as the path interpolation memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
    },
    {
        "No": 452,
        "FunctionPython": "def OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)",
        "FunctionC++": "WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)",
        "Parameters": "[in] axis The axis executing the 3D path interpolation. \n[in] multiplier The velocity multiplier to apply. \n",
        "Remarks": "This function can be called while executing a 3D path interpolation to change the profile velocity by the specified factor. The interpolating axes will accelerate or decelerate to the new velocity using the acceleration or deceleration of the 3D path interpolation command.\n\nThis function may be called multiple times. Each time this function is called, the new velocity is calculated as the original profile velocity of the 3D path interpolation multiplied by the specified velocity multiplier.\n\nAll other profile parameters, including the starting velocity and end velocity, are not changed by this function (except as noted below). The target positions of the 3D path interpolation are not changed.\n\nIf a different profile is specified for each segment of the path, the velocities of all profiles are multiplied by the specified multiplier. The end velocities of all profiles are also multiplied by the specified multiplier, except for the end velocity of the final segment of the path.\n\nThe velocity multiplier must be between 0 and 2 inclusive. For example, to set the velocity to 50% of the original profile velocity, pass 0.5 to the multiplier argument. If 1 is passed to the multiplier argument, the velocity will be set equal to the original profile velocity of the 3D path interpolation.\n\nIf 0 is passed to the multiplier argument, the path interpolation will be paused as if the Pause function is called. The path interpolation can be resumed by calling this function again with a nonzero multiplier (the path interpolation can also be resumed by calling the Resume function, in which case the motion will be resumed using the multiplier immediately before it was paused).\n\nThis function can also be used in place of the Resume function to resume a path interpolation that has been paused with the Pause function.\n\nIf the velocity after applying the multiplier is below 1 user unit per second, the new velocity will be set to 1 user unit per second.\n\nAny of the three axes executing 3D path interpolation can be passed to the axis argument. The operation of this function will be the same regardless of which of the axes is specified.\n\nWhen this function is called, the profile of the 3D path interpolation will be recalculated. The standard behavior of overrides apply (see Acceleration Reset).\n\nIf the specified axis is not executing a 3D path interpolation command started with StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Override a 3D path interpolation motion using a velocity multiplier."
    },
    {
        "No": 453,
        "FunctionPython": "def CreatePathIntplWithRotationBuffer(channel, points)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreatePathIntplWithRotationBuffer(int channel, unsigned int points)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] points The number of points to allocate memory for. Each linear or circular interpolation segment in the path occupies one point in the memory, and an additional point if an auto smoothing segment is inserted. \n",
        "Remarks": "When the WMX3 engine is started, no memory is allocated for execution of path interpolation with rotation. This function must be called before a path interpolation with rotation channel can execute motion commands.\n\nEach channel has a separate buffer memory space. This function must be called for each path interpolation channel before that channel can execute motion commands.\n\nAllocating buffer memory space is an operation that can fail due to lack of memory space or fragmentation of memory. For deterministic operation, this function should be called during initialization to allocate memory for all path interpolation channels that will potentially be used by the program.\n\nThe maximum size of the buffer memory space of a path interpolation with rotation channel is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nIt is not necessary to call this function again after buffer memory has been allocated once. The ClearPathIntplWithRotation function will clear the contents of the buffer memory, but will not free the buffer memory itself. (When the WMX3 engine is restarted, this function must be called again to allocate buffer memory.)\n\nBuffer memory that has been allocated can be freed using the FreePathIntplWithRotationBuffer function. After freeing the buffer memory of a path interpolation with rotation channel, this function can be called again to reallocate a different amount of buffer memory.\n\nIt is not necessary to free allocated memory using FreePathIntplWithRotationBuffer before exiting the program. Any allocated memory is automatically freed when the WMX3 engine is closed.\n\nThe GetPathIntplWithRotationBytesPerPoint function can be used to convert the buffer memory size from points to bytes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Allocate buffer memory for a path interpolation with rotation channel."
    },
    {
        "No": 454,
        "FunctionPython": "def FreePathIntplWithRotationBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreePathIntplWithRotationBuffer(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. ",
        "Remarks": "This function frees the buffer memory that has been allocated with the CreatePathIntplWithRotationBuffer function. This allows CreatePathIntplWithRotationBuffer to be called again to allocate a different amount of memory.\n\nIt is not necessary to call this function before exiting the program, as any allocated memory is automatically freed when the WMX3 engine closes.\n\nThe freed memory, after a brief delay, will become available for the system to use for another purpose. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Free buffer memory for a path interpolation with rotation channel."
    },
    {
        "No": 455,
        "FunctionPython": "def GetPathIntplWithRotationBytesPerPoint()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint(unsigned int *pBytes)",
        "Parameters": "[out] pBytes A pointer to an unsigned int that will contain the number of bytes of memory required per point data. \n",
        "Remarks": "This function obtains the number of bytes of memory required to store one point data in the path interpolation with rotation buffer memory. This can be used to calculate the number of bytes of buffer memory required to store a particular number of points. For example, if this function returns 448, the number of bytes required to store 10000 points is 448*10000 = 4480000, or about 4MB. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the number of bytes required per point data in the path interpolation with rotation buffer memory."
    },
    {
        "No": 456,
        "FunctionPython": "def SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPathIntplWithRotationConfiguration(int channel, PathIntplWithRotationConfiguration *pConfig)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pConfig A pointer to an PathIntplWithRotationConfiguration object that contains the path interpolation with rotation configuration data. \n",
        "Remarks": "This function configures a path interpolation with rotation channel with data required for operation, such as the commanded axes.\n\nThis function must be called before interpolation commands can be added to the path interpolation with rotation channel with the AddPathIntplWithRotationCommand function.\n\nBefore configuring a path interpolation with rotation channel, buffer memory for path interpolation with rotation must be allocated using the CreatePathIntplWithRotationBuffer function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Set the configuration data for a path interpolation with rotation channel."
    },
    {
        "No": 457,
        "FunctionPython": "def AddPathIntplWithRotationCommand(channel, pCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddPathIntplWithRotationCommand(int channel, PathIntplWithRotationCommand *pCommand)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pCommand A pointer to a PathIntplWithRotationCommand object that contains the path interpolation with rotation command data. \n",
        "Remarks": "This function adds interpolation commands to a path interpolation with rotation channel. The added commands are not executed until the StartPathIntplWithRotation function is called.\n\nBefore adding point segment commands, buffer memory for path interpolation with rotation must be allocated using the CreatePathIntplWithRotationBuffer function.\n\nBefore adding point segment commands, the path interpolation channel must be configured using the SetPathIntplWithRotationConfiguration function.\n\nCalling this function for the first time after clearing a path interpolation with rotation channel fixes the starting position of the X axis, Y axis, rotational axis, and if enabled, the Z axis on the path. Moving the X axis, Y axis, rotational axis, or Z axis after calling this function will move the axis off the path and cause the StartPathIntplWithRotation function to return the PathInterpolationAxesHaveBeenMoved error. If this occurs, the path interpolation with rotation channel must be cleared and the path must be defined again.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Add interpolation commands to a path interpolation with rotation channel."
    },
    {
        "No": 458,
        "FunctionPython": "def StartPathIntplWithRotation(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. ",
        "Remarks": "This function moves the axes of a path interpolation with rotation channel to the end of the path, using the configuration parameters set for the path interpolation with rotation channel.\n\nIt is possible to execute the path interpolation with rotation only partway along the path using the StartPathIntplWithRotation(int channel, double pos) or StartPathIntplWithRotation(int channel, unsigned int point) functions or by stopping execution with the Stop function. If this function is called afterthe path has been executed partway, the execution will continue from the current position.\n\nIf a path interpolation with rotation is executed partway, and then a commanded axis is moved using a different function, this function will return an error. If the path interpolation with rotation is stopped with another function such as ExecQuickStop, this function will return an error. In this case, the path must be reset by calling ClearPathIntplWithRotation and then the path must be defined again.\n\nPoint segment commands must be added to the path interpolation with rotation channel using the AddPathIntplWithRotationCommand function before this function is called. This function can be executed as long as the path contains at least one point segment.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute motion for a path interpolation with rotation channel."
    },
    {
        "No": 459,
        "FunctionPython": "def StartPathIntplWithRotation_Trigger(channel, pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, Trigger *pTrigger)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pTrigger A pointer to an Trigger object that defines the trigger condition. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation will start executing after the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 460,
        "FunctionPython": "def StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pTriggerEvents A pointer to an TriggerEvents object that defines the trigger events. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation will start executing after the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied. "
    },
    {
        "No": 461,
        "FunctionPython": "def StartPathIntplWithRotation_Pos(channel, double pos)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pos The target position along the path to move to. \n",
        "Remarks": "This function moves the axes of a path interpolation with rotation channel along the path to the specified position, using the configuration parameters set for the path interpolation with rotation channel. The position is specified as the distance along the path starting from the beginning of the path. If the specified position is greater than the length of the path, the path interpolation will be executed to the end of the path.\n\nIf the path interpolation with rotation has been executed partway along the path using this function, the StartPathIntplWithRotation(int channel, unsigned int point) function, or by stopping execution with the Stop function, this function can be used to backtrack along the path by specifying a smaller position than the current position. If the specified position is less than zero, the path interpolation will backtrack to the beginning of the path. The motion of the rotational axis during backtracking will be identical as during the forward motion.\n\nThis function is able to move the axes to any position along the path, even positions that are partway along segments.\n\nIt is not trivial to convert a specific X and Y position along the path to a distance that can be passed to this function. This function should mostly be used to move relative distances from the current position along the path (this position can be obtained from the PathIntplWithRotationStatus.pos status). To move to a specific point, use the StartPathIntplWithRotation(int channel, unsigned int point) function instead.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute motion to the specified position for a path interpolation with rotation channel."
    },
    {
        "No": 462,
        "FunctionPython": "def StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, Trigger *pTrigger)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pos The target position along the path to move to. \n[in] pTrigger A pointer to an Trigger object that defines the trigger condition. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path interpolation will start executing after the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 463,
        "FunctionPython": "def StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] pos The target position along the path to move to. \n[in] pTriggerEvents A pointer to an TriggerEvents object that defines the trigger events. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path interpolation will start executing after the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 464,
        "FunctionPython": "def StartPathIntplWithRotation_Point(channel, point)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] point The target point to move to. \n",
        "Remarks": "This function moves the axes of a path interpolation with rotation along the path to the specified point, using the configuration parameters set for the path interpolation with rotation channel. The points are defined as the indices of the command segment added with the AddPathIntplWithRotationCommand function. Auto smoothing segments inserted between linear interpolations do not increment this index. The axes will move to the position at the beginning of this command segment.\n\nIf the path interpolation with rotation has been executed partway along the path using this function, the StartPathIntplWithRotation(int channel, double pos) function, or by stopping execution with the Stop function, this function can be used to backtrack along the path by specifying a point from earlier in the path. The motion of the rotational axis during backtracking will be identical as during the forward motion.\n\nIt is possible to specify a point equal to the total number of command segments in the path. In this case, the axis will move to the end of the path. If the specified point is greater than the total number of command segments in the path, the axis will also move to the end of the path.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute motion to the specified point for a path interpolation with rotation channel. "
    },
    {
        "No": 465,
        "FunctionPython": "def StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point, Trigger *pTrigger)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] point The target point to move to. \n[in] pTrigger A pointer to an Trigger object that defines the trigger condition. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except the path interpolation will start executing after the specified trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 466,
        "FunctionPython": "def StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point, TriggerEvents *pTriggerEvents)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[in] point The target point to move to. \n[in] pTriggerEvents A pointer to an TriggerEvents object that defines the trigger events. \n",
        "Remarks": "This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except the path interpolation will start executing after the specified multi-event trigger condition is satisfied.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 467,
        "FunctionPython": "def ClearPathIntplWithRotation(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearPathIntplWithRotation(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. ",
        "Remarks": "This function clears all data for a path interpolation with rotation channel, including any existing point segment commands and configuration settings. Use this function if a path interpolation with rotation channel must be reset. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Clear all data for a path interpolation with rotation channel."
    },
    {
        "No": 468,
        "FunctionPython": "def GetPathIntplWithRotationStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplWithRotationStatus(int channel, PathIntplWithRotationStatus *pStatus)",
        "Parameters": "[in] channel The channel of the path interpolation with rotation. The maximum number of available channels is maxPathIntplWithRotationChannel. \n[out] pStatus A pointer to a PathIntplWithRotationStatus class object that will contain the status of the path interpolation with rotation channel. \n",
        "Remarks": "Use this function to get the status of a path interpolation with rotation channel. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the current status for a path inteprolation with rotation channel."
    },
    {
        "No": 469,
        "FunctionPython": "def CreatePathIntplLookaheadBuffer(channel, points)\u00a0",
        "FunctionC++": "WMX3APIFUNC CreatePathIntplLookaheadBuffer(int channel, unsigned int points)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. \n[in] points The number of points to allocate memory for. Each linear or circular interpolation segment in the path occupies at least two points, and more if the segment distance is greater than the sample distance. For example, a linear interpolation with a length of 500 user units and a sample distance of 10 user units will occupy 500 / 10 = 50 points. \n",
        "Remarks": "When the WMX3 engine is started, no memory is allocated for execution of path interpolation with look ahead. This function must be called before a path interpolation with look ahead channel can execute motion commands.\n\nEach channel has a separate buffer memory space. This function must be called for each path interpolation channel before that channel can execute motion commands.\n\nAllocating buffer memory space is an operation that can fail due to lack of memory space or fragmentation of memory. For deterministic operation, this function should be called during initialization to allocate memory for all path interpolation channels that will potentially be used by the program.\n\nThe maximum size of the buffer memory space of a path interpolation with look ahead channel is 2GB-1Byte (2147483647 bytes). Specifying a larger size will cause this function to return the RequestedBufferTooLarge error.\n\nIt is not necessary to call this function again after buffer memory has been allocated once. The ClearPathIntplLookahead function will clear the contents of the buffer memory, but will not free the buffer memory itself. (When the WMX3 engine is restarted, this function must be called again to allocate buffer memory.)\n\nBuffer memory that has been allocated can be freed using the FreePathIntplLookaheadBuffer function. After freeing the buffer memory of a path interpolation with look ahead channel, this function can be called again to reallocate a different amount of buffer memory.\n\nIt is not necessary to free allocated memory using FreePathIntplLookaheadBuffer before exiting the program. Any allocated memory is automatically freed when the WMX3 engine is closed.\n\nThe GetPathIntplLookaheadBytesPerPoint function can be used to convert the buffer memory size from points to bytes.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Allocate buffer memory for a path interpolation with look ahead channel. "
    },
    {
        "No": 470,
        "FunctionPython": "def FreePathIntplLookaheadBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC FreePathIntplLookaheadBuffer(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. ",
        "Remarks": "This function frees the buffer memory that has been allocated with the CreatePathIntplLookaheadBuffer function. This allows CreatePathIntplLookaheadBuffer to be called again to allocate a different amount of memory.\n\nIt is not necessary to call this function before exiting the program, as any allocated memory is automatically freed when the WMX3 engine closes.\n\nThe freed memory, after a brief delay, will become available for the system to use for another purpose. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Free buffer memory for a path interpolation with lookahead channel. "
    },
    {
        "No": 471,
        "FunctionPython": "def GetPathIntplLookaheadBytesPerPoint()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint(unsigned int *pBytes)",
        "Parameters": "[out] pBytes A pointer to an unsigned int that will contain the number of bytes of memory required per point data. \n",
        "Remarks": "This function obtains the number of bytes of memory required to store one point data in the path interpolation with rotation buffer memory. This can be used to calculate the number of bytes of buffer memory required to store a particular number of points. For example, if this function returns 288, the number of bytes required to store 10000 points is 288*10000 = 2880000, or about 3MB. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the number of bytes required per point data in the path interpolation with look ahead buffer memory."
    },
    {
        "No": 472,
        "FunctionPython": "def SetPathIntplLookaheadConfiguration(channel, pConfig)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPathIntplLookaheadConfiguration(int channel, PathIntplLookaheadConfiguration *pConfig)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. \n[in] pConfig A pointer to an PathIntplLookaheadConfiguration object that contains the path interpolation with look ahead configuration data. \n",
        "Remarks": "This function configures a path interpolation with look ahead channel with data required for operation, such as the commanded axes and the axis velocity and acceleration limits.\n\nThis function must be called before interpolation commands can be added to the path interpolation with look ahead channel with the AddPathIntplLookaheadCommand function.\n\nAfter points are added to the path interpolation with look ahead channel, the configuration cannot be changed with this function until the channel is cleared with the ClearPathIntplLookahead function or the channel buffer is freed and then reallocated with the FreePathIntplLookaheadBuffer and CreatePathIntplLookaheadBuffer functions.\n\nBefore configuring a path interpolation with look ahead channel, buffer memory for path interpolation with look ahead must be allocated using the CreatePathIntplLookaheadBuffer function.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Set the configuration data for a path interpolation with lookahead channel. "
    },
    {
        "No": 473,
        "FunctionPython": "def AddPathIntplLookaheadCommand(channel, pCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddPathIntplLookaheadCommand(int channel, PathIntplLookaheadCommand *pCommand)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. \n[in] pCommand A pointer to a PathIntplLookaheadCommand object that contains the path interpolation with look ahead command data. \n",
        "Remarks": "This function adds interpolation commands to a path interpolation with look ahead channel. The added commands are not executed until the StartPathIntplLookahead function is called.\n\nCommands may be added while a path interpolation with look ahead channel is executing. Doing so can modify the velocity and acceleration profiles of the path interpolation, including the velocity and acceleration profiles of point segments that were already in the buffer. For example, adding point segments before an executing path interpolation finishes will cause the path interpolation to continue executing at the commanded velocity without decelerating until the newly added point segments have been traversed.\n\nBefore adding point segment commands, buffer memory for path interpolation with look ahead must be allocated using the CreatePathIntplLookaheadBuffer function.\n\nBefore adding point segment commands, the path interpolation channel must be configured using the SetPathIntplLookaheadConfiguration function.\n\nWhen adding more commands than maxPathIntplLookaheadAppendPoints commands to the path interpolation with look ahead channel, use the overloaded AddPathIntplLookaheadCommand function with the numCommands argument and specify all commands with one function call. Calling the AddPathIntplLookaheadCommand function multiple times instead could cause the velocity along the path to not be ideal.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Add interpolation commands to a path interpolation with look ahead channel. "
    },
    {
        "No": 474,
        "FunctionPython": "def StartPathIntplLookahead(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPathIntplLookahead(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. ",
        "Remarks": "Point segment commands must be added to the path interpolation with look ahead channel using the AddPathIntplLookaheadCommand function before this function is called. This function can be executed as long as the path contains at least one point segment.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start the motion for a path interpolation with look ahead channel."
    },
    {
        "No": 475,
        "FunctionPython": "def StopPathIntplLookahead(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopPathIntplLookahead(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. ",
        "Remarks": "This function stops the motion for a path interpolation with look ahead channel. The axes will decelerate along the commanded path using the compositeAcc specified for the path interpolation.\n\nAfter the axes stop, the path interpolation can be resumed by calling the StartPathIntplLookahead function again. The velocity and acceleration profiles along the path will be recalculated. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Stop the motion for a path interpolation with look ahead channel."
    },
    {
        "No": 476,
        "FunctionPython": "def ClearPathIntplLookahead(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearPathIntplLookahead(int channel)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. ",
        "Remarks": "This function clears all data for a path interpolation with look ahead channel, including any existing point segment commands and statuses. Use this function if a path interpolation with look ahead channel must be reset. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Clear all data for a path interpolation with look ahead channel."
    },
    {
        "No": 477,
        "FunctionPython": "def GetPathIntplLookaheadStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPathIntplLookaheadStatus(int channel, PathIntplLookaheadStatus *pStatus)",
        "Parameters": "[in] channel The channel of the path interpolation with look ahead. The maximum number of available channels is maxPathIntplLookaheadChannel. \n[out] pStatus A pointer to a PathIntplLookaheadStatus class object that will contain the status of the path interpolation with look ahead channel. \n",
        "Remarks": "Use this function to get the status of a path interpolation with look ahead channel. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get the current status for a path interpolation with look ahead channel. "
    },
    {
        "No": 478,
        "FunctionPython": "def StartCoordinatedPos(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedPosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to a CoordinatedPosCommand that contains the coordinated position command parameters. ",
        "Remarks": "This function executes coordinated motion for two axes. The first axis executes a regular position command with the specified profile, and the second axis travels the specified distance in the same time as the first axis position command. The velocity of the second axis increases at a constant rate until the midpoint, and then decreases at a constant rate until the axis reaches the target position. The axis2SmoothRatio can be specified to convert that amount of the second axis velocity profile into a parabolic profile.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an interpolation between two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time."
    },
    {
        "No": 479,
        "FunctionPython": "def StartCoordinatedPos(numCommands, pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(unsigned int numCommands, CoordinatedPosCommand *pPosCommand)",
        "Parameters": "[in] numCommands The number of coordinated position commands. Each command controls a pair of two axes. \n[in] pPosCommand A pointer to an array of objects of the CoordinatedPosCommand class that contain the parameters of the coordinated position commands. The number of objects in the array must be equal to numCommands. \n",
        "Remarks": "This command executes the StartCoordinatedPos function for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start multiple interpolations, each between pairs of two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time. "
    },
    {
        "No": 480,
        "FunctionPython": "def StartCoordinatedPos_JerkRatio(pPosCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedJerkRatioPosCommand *pPosCommand)",
        "Parameters": "[in] pPosCommand A pointer to a CoordinatedJerkRatioPosCommand that contains the coordinated position command parameters. ",
        "Remarks": "This function executes coordinated motion for two or more axes. The first axis executes a regular position command with the specified profile, and the remaining axes travel the specified distances in the same time as the first axis position command. Each remaining axis accelerates at the specified acceleration, stops accelerating at a velocity calculated from the movement distance and acceleration, and decelerates at the same magnitude at the specified acceleration to finish the motion in the same time as the first axis. If it is impossible to finish the motion in the same time as the first axis with the specified acceleration, the acceleration is increased. The acceleration and deceleration segments will have velocity profile that is partway between trapezoidal and S-curve depending on the specified jerk ratio (the jerk ratio is the ratio between 0 and 1 for which the acceleration changes during the acceleration and deceleration segments).",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start an interpolation between two or more axes, where one axis executes a normal position command and the remaining axes travel the specified distances in the same amount of time."
    },
    {
        "No": 481,
        "FunctionPython": "def StartTwoLinkLinearPos(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkLinearPos(TwoLinkLinearCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkLinearCommand that contains the two link motion parameters. ",
        "Remarks": "This function simulates a rotary axis connected to the commanded linear axis with two links. A profile is generated for the rotary axis and the linear axis follows the simulated motion of the rotary axis as if it is pulled by the two links.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 482,
        "FunctionPython": "def StartTwoLinkLinearMov(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkLinearMov(TwoLinkLinearCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkLinearCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkLinearPos, except the target position is specified in relative coordinates (relative to the current position of the commanded axis). ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates."
    },
    {
        "No": 483,
        "FunctionPython": "def StartTwoLinkRotaryPos(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkRotaryPos(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkRotaryCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkLinearPos, except the commanded axis is the rotary axis and the simulated axis is the linear axis.\n\nThe axis commanded by this function must be a rotary axis (the Single Turn Mode parameter must be set to true).\n\nRspan is set equal to the Single Turn Encoder Count parameter (after being adjusted by the Gear Ratio Numerator and Gear Ratio Denominator parameters).\n\nIf the target position is between 0 and Rspan, the direction of motion will be adjusted so that the total distance moved is at most Rspan / 2.\n\nThe direction of rotation will be the same for the entire motion, and will be in the direction of the target position compared to the current position. The axis may rotate multiple times if the target position is outside the range from 0 to Rspan.\n\nThe motion profile generated for the linear axis will decelerate to zero velocity each time the linear axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 484,
        "FunctionPython": "def StartTwoLinkRotaryMov(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkRotaryMov(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkRotaryCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative coordinates (relative to the current position of the commanded axis). ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates."
    },
    {
        "No": 485,
        "FunctionPython": "def StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredLinearPos(TwoLinkLinearCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkLinearCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkLinearPos, except L2 is not tethered to the linear axis, and may move up and down freely. L2 is always oriented parallel to the linear axis. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 486,
        "FunctionPython": "def StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredLinearMov(TwoLinkLinearCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkLinearCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkUntetheredLinearPos, except the target position is specified in relative coordinates (relative to the current position of the commanded axis). ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates."
    },
    {
        "No": 487,
        "FunctionPython": "def StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredRotaryPos(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkRotaryCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkRotaryPos, except L2 is not tethered to the linear axis, and may move up and down freely. L2 is always oriented parallel to the linear axis. Also see the image in the discussion of StartTwoLinkUntetheredLinearPos. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates."
    },
    {
        "No": 488,
        "FunctionPython": "def StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartTwoLinkUntetheredRotaryMov(TwoLinkRotaryCommand *pTwoLinkCommand)",
        "Parameters": "[in] pTwoLinkCommand A pointer to a TwoLinkRotaryCommand that contains the two link motion parameters. ",
        "Remarks": "This function is similar to StartTwoLinkUntetheredRotaryPos, except the target position is specified in relative coordinates (relative to the current position of the commanded axis). ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates."
    },
    {
        "No": 489,
        "FunctionPython": "def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntplCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntplCommand class that contains the parameters for the path interpolation. \n[in] timeMilliseconds The amount of time elapsed. This value is in units of milliseconds. \n[out] pPos1 A pointer to a double type variable that will contain the position that the first axis is at after the specified amount of time elapses. \n[out] pPos2 A pointer to a double type variable that will contain the position that the second axis is at after the specified amount of time elapses. \n[out] pMoveDistance A pointer to a double type variable that will contain the total distance moved along the path in the two dimensional plane formed by the first and second axes. \n[out] pRemainDistance A pointer to a double type variable that will contain the total distance remaining in the path in the two dimensional plane formed by the first and second axes. \n[out] pTotalDistance A pointer to a double type variable that will contain the total distance along the entire path in the two dimensional plane formed by the first and second axes. This value is always equal to the sum of the values returned by pMoveDistance and pRemainDistance.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move distance, remain distance, and total distance after the path interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 490,
        "FunctionPython": "def SimulateTimeAtPos(pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntplCommand *pPathIntplCommand, double specificPos1, double specificPos2, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntplCommand class that contains the parameters for the path interpolation. \n[in] specificPos1 The position of the first axis at which to calculate the move time, remain time, and total time of the path interpolation command. \n[in] specificPos2 The position of the second axis at which to calculate the move time, remain time, and total time of the path interpolation command. \n[in] minimumSearchIndex The minimum index of the interpolation segments defined in pPathIntplCommand at which to search for the specified positions. \n[out] pMoveTimeMilliseconds A pointer to a double type variable that will contain the amount of time elapsed when the axes reach the position of specificPos1 and specificPos2. The units are milliseconds. \n[out] pRemainTimeMilliseconds A pointer to a double type variable that will contain the amount of time remaining in the path interpolation when the axes reach the position of specificPos1 and specificPos2. The units are milliseconds. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total time of the path interpolation. This value is always equal to the sum of the values returned by pMoveTime and pRemainTime. The units are milliseconds. \n",
        "Remarks": "This function simulates a path interpolation command, and calculates the time at which the axes reach a particular position during the path interpolation. If the axes do not pass the specified position during the entire path interpolation, this function will return an error. The specified position must be within 1 user unit of the path for this function to consider the interpolating axes to have crossed the position.\n\nBy setting the minimumSearchIndex value appropriately, simulations can be performed for path interpolations in which the path crosses the specified position multiple times.\n\nFor example, if the path crosses the specified position during the interpolation segments at indices 0, 2, and 4:\n\nminimumSearchIndex = 0 will cause the simulation to calculate the move time, remain time, and total time for the first time that the path crosses the specified position.\n\nminimumSearchIndex = 1 or 2 will cause the simulation to calculate the move time, remain time, and total time for the second time that the path crosses the specified position.\n\nminimumSearchIndex = 3 or 4 will cause the simulation to calculate the move time, remain time, and total time for the third time that the path crosses the specified position. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned."
    },
    {
        "No": 491,
        "FunctionPython": "def SimulateTimeAtDist(pPathIntplCommand, specificDistance)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntplCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntplCommand class that contains the parameters for the path interpolation. \n[in] specificDistance The distance along the path at which to calculate the move time, remain time, and total time of the path interpolation command. \n[out] pMoveTimeMilliseconds A pointer to a double type variable that will contain the amount of time elapsed when the axes travel along the path a distance equal to specificDistance. The units are milliseconds. \n[out] pRemainTimeMilliseconds A pointer to a double type variable that will contain the amount of time remaining in the path interpolation when the axes travel along the path a distance equal to specificDistance. The units are milliseconds. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total time of the path interpolation. This value is always equal to the sum of the values returned by pMoveTime and pRemainTime. The units are milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned."
    },
    {
        "No": 492,
        "FunctionPython": "def SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntpl3DCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pPos3, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntpl3DCommand class that contains the parameters for the 3D path interpolation. \n[in] timeMilliseconds The amount of time elapsed. This value is in units of milliseconds. \n[out] pPos1 A pointer to a double type variable that will contain the position that the first axis is at after the specified amount of time elapses. \n[out] pPos2 A pointer to a double type variable that will contain the position that the second axis is at after the specified amount of time elapses. \n[out] pPos3 A pointer to a double type variable that will contain the position that the third axis is at after the specified amount of time elapses. \n[out] pMoveDistance A pointer to a double type variable that will contain the total distance moved along the three dimensional path. \n[out] pRemainDistance A pointer to a double type variable that will contain the total distance remaining in the three dimensional path. \n[out] pTotalDistance A pointer to a double type variable that will contain the total distance along the entire three dimensional path. This value is always equal to the sum of the values returned by pMoveDistance and pRemainDistance.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned."
    },
    {
        "No": 493,
        "FunctionPython": "def SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificPos1, double specificPos2, double specificPos3, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntpl3DCommand class that contains the parameters for the 3D path interpolation. \n[in] specificPos1 The position of the first axis at which to calculate the move time, remain time, and total time of the 3D path interpolation command. \n[in] specificPos2 The position of the second axis at which to calculate the move time, remain time, and total time of the 3D path interpolation command. \n[in] specificPos3 The position of the third axis at which to calculate the move time, remain time, and total time of the 3D path interpolation command. \n[in] minimumSearchIndex The minimum index of the interpolation segments defined in pPathIntplCommand at which to search for the specified positions. \n[out] pMoveTimeMilliseconds A pointer to a double type variable that will contain the amount of time elapsed when the axes reach the position in three dimensions specified by specificPos1, specificPos2, and specificPos3. The units are milliseconds. \n[out] pRemainTimeMilliseconds A pointer to a double type variable that will contain the amount of time remaining in the 3D path interpolation when the axes reach the position in three dimensions specified by specificPos1, specificPos2, and specificPos3. The units are milliseconds. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total time of the 3D path interpolation. This value is always equal to the sum of the values returned by pMoveTime and pRemainTime. The units are milliseconds. \n",
        "Remarks": "This function simulates a 3D path interpolation command, and calculates the time at which the axes reach a particular position during the 3D path interpolation. If the axes do not pass the specified position during the entire 3D path interpolation, this function will return an error. The specified position must be within 1 user unit of the path for this function to consider the interpolating axes to have crossed the position.\n\nBy setting the minimumSearchIndex value appropriately, simulations can be performed for path interpolations in which the path crosses the specified position multiple times.\n\nFor example, if the path crosses the specified position during the interpolation segments at indices 0, 2, and 4:\n\nminimumSearchIndex = 0 will cause the simulation to calculate the move time, remain time, and total time for the first time that the path crosses the specified position.\n\nminimumSearchIndex = 1 or 2 will cause the simulation to calculate the move time, remain time, and total time for the second time that the path crosses the specified position.\n\nminimumSearchIndex = 3 or 4 will cause the simulation to calculate the move time, remain time, and total time for the third time that the path crosses the specified position. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned"
    },
    {
        "No": 494,
        "FunctionPython": "def SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)\u00a0",
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "Parameters": "[in] pPathIntplCommand A pointer to an object of the SimulatePathIntpl3DCommand class that contains the parameters for the 3D path interpolation. \n[in] specificDistance The distance along the path at which to calculate the move time, remain time, and total time of the 3D path interpolation command. \n[out] pMoveTimeMilliseconds A pointer to a double type variable that will contain the amount of time elapsed when the axes travel along the path a distance equal to specificDistance. The units are milliseconds. \n[out] pRemainTimeMilliseconds A pointer to a double type variable that will contain the amount of time remaining in the 3D path interpolation when the axes travel along the path a distance equal to specificDistance. The units are milliseconds. \n[out] pTotalTimeMilliseconds A pointer to a double type variable that will contain the total time of the 3D path interpolation. This value is always equal to the sum of the values returned by pMoveTime and pRemainTime. The units are milliseconds.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move time, remain time, and total time after the 3D path interpolation runs for the specified distance are returned."
    },
    {
        "No": 495,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 496,
        "FunctionPython": "def SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetConstantLinearVel(int masterAxis, int slaveAxis, double centerPos, double minR, double positiveMaxR, double negativeMaxR, double constLinVel, double initVelVariance)",
        "Parameters": "[in] masterAxis The axis controlling the arm. \n[in] slaveAxis The axis controlling the disc rotation. \n[in] centerPos The position of the master axis at the center of the disc. \n[in] minR The minimum radius below which the slave axis angular velocity will be constant and equal to constLinVel / minR. This value must be greater than or equal to 1. \n[in] positiveMaxR The maximum radius in the positive direction of the master axis at which the slave axis angular velocity should be kept constant. If the radius exceeds this value, the slave axis angular velocity will be constant and equal to constLinVel / positiveMaxR. This value must be greater than or equal to minR. \n[in] negativeMaxR The maximum radius in the negative direction of the master axis at which the slave axis angular velocity should be kept constant. If the radius exceeds this value, the slave axis angular velocity will be constant and equal to constLinVel / negativeMaxR. This value must be greater than or equal to minR. \n[in] constLinVel The constant surface linear velocity under the arm. \n[in] initVelVariance If the difference between the slave axis velocity when this API is called and the slave axis velocity immediately after this API is called exceeds this value, the API will return an error. \n",
        "Remarks": "Constant linear velocity synchronizes the motion of a velocity mode axis with the motion of a position mode axis in such a way that if the velocity mode axis controls the rotation of a wafer or disc and the position mode axis controls the motion of an arm in a radial direction from the center of the wafer or disc, the velocity of the disc surface immediately below the arm is constant.\n\nBecause the slave axis is a rotary axis, it should be set to single turn mode using the SetSingleTurn function. Not doing so will cause the axis feedback position to continue to increase as the axis rotates.\n\nThe motion of the position mode axis is unrestricted. The velocity mode axis follows the motion of the position mode axis according to the following formula:\n\nr = distance from the center of the disc of the position mode axis [user units] \n\u03b8' = angular velocity of disc [radians per second] \nvc = constant surface linear velocity [user units per second]\n\n\u03b8' = vc / r\n\nvelocity of velocity mode axis in units of user units per second = [Single Turn Encoder Count] * \u03b8' / (2\u03c0)\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start constant linear velocity control for an axis."
    },
    {
        "No": 497,
        "FunctionPython": "def ResolveConstantLinearVel(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC ResolveConstantLinearVel(int axis)",
        "Parameters": "[in] axis The axis controlling the disc rotation (the slave axis specified for SetConstantLinearVel). ",
        "Remarks": "Resolves constant linear velocity control for an axis that was started with SetConstantLinearVel.\n\nUpon resolving constant linear velocity control, the axis will continue to move at the velocity that the axis was moving at when this API function was called. To stop the axis, call the StartVel API function with a velocity of 0. Calling the Stop API function instead will immediately change the command velocity of the axis to 0, as no deceleration is specified by SetConstantLinearVel. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Resolve constant linear velocity control for an axis."
    },
    {
        "No": 498,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 499,
        "FunctionPython": "def StartECAM(channel, pECAMData)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartECAM(int channel, ECAMData *pECAMData)",
        "Parameters": "[in] channel The channel of E-CAM control. Each channel corresponds to a single slave axis. Up to maxEcamChannel channels may be operated at any time. \n[in] pECAMData A pointer to an ECAMData class object that specifies the E-CAM control parameters. \n",
        "Remarks": "E-CAM control is a type of master-slave control in which the position command of a slave axis is controlled by the position of a master axis in a non-linear manner. The correlation between the position of the master axis and the position command of the slave axis is defined using an E-CAM table.\n\nThe master axis, slave axis, E-CAM table, and additional options are passed to this function using the pECAMData argument.\n\nThe E-CAM table may contain at least 2 and up to maxEcamPoints points of data.\n\nThe master axis positions must be specified in ascending order. If they are not specified in ascending order, an error will be returned.\n\nThis function both sets the E-CAM data and starts E-CAM control. If the ECAMClutchType is set to None, the slave axis may suddenly move if it is not already at the position initially commanded by E-CAM control. To avoid this, use the SimpleCatchUp clutch type or verify that this function is called while the slave axis is at the correct position.\n\nE-CAM control is immediately started when this function is called. The slave and master axes must be in appropriate positions when this function is called to avoid sudden motion in the slave axis.\n\nThe slave axis must be in Idle operation state when starting E-CAM control. The master axis may be in any state.\n\nEach E-CAM channel supports one slave axis. Multiple E-CAM channels may have the same master axis.\n\nEach E-CAM channel can only control one slave axis at any time. To start a different E-CAM control, the channel must first be stopped with the StopECAM function.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start E-CAM control."
    },
    {
        "No": 500,
        "FunctionPython": "def GetECAM(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetECAM(int channel, ECAMData *pECAMData)",
        "Parameters": "[in] channel The channel of E-CAM control. Each channel corresponds to a single slave axis. Up to maxEcamChannel channels may be operated at any time. \n[out] pECAMData A pointer to an ECAMData class object that will contain the E-CAM control parameters. \n",
        "Remarks": "This function obtains the currently set E-CAM control parameters for an E-CAM channel that was started with the StartECAM API function. This function will return an error if the specified E-CAM channel is not currently controlling a slave axis. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get E-CAM control parameters."
    },
    {
        "No": 501,
        "FunctionPython": "def StopECAM(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopECAM(int channel)",
        "Parameters": "[in] channel The channel of E-CAM control. Each channel corresponds to a single slave axis. Up to maxEcamChannel channels may be operated at any time. \n[out] pECAMData A pointer to an ECAMData class object that will contain the E-CAM control parameters. \n",
        "Remarks": "This function stops E-CAM control for a channel. The E-CAM channel is specified, and not the slave axis number. If the E-CAM channel is not enabled and controlling an axis, an error will be returned.\n\nThis function is used to stop E-CAM control that was started with either the StartECAM API function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Stop E-CAM control."
    },
    {
        "No": 502,
        "FunctionPython": "def StartDancerControl(axis, AdvSync_DancerControlOptions pDancerControlOptions)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartDancerControl(int axis, DancerControlOptions *pDancerControlOptions)",
        "Parameters": "[in] axis The axis to execute dancer control. \n[in] pDancerControlOptions A pointer to a DancerControlOptions object that contains the options for dancer control. \n",
        "Remarks": "Dancer control is a function to control a velocity mode axis using a PID loop with the input taken from a segment of the I/O. The velocity command of the axis is set according to the following equation:\n\nVelocity Command = P(t) * P_Gain + I(t) * I_Gain + D(t) * D_Gain\n\nP(t) = (input - input_zero) / (input_max - input_min)\n\nI(t) = sum of P(T) from T = t-n to T = t\n\nD(t) = (1/m) * sum of P(T) - P(T-1) from T = t to T = t-m\n\n= (1/m) * (P(t) - P(t-m))\n\nP_Gain, I_Gain, and D_Gain are specified by the dancer control option settings. These should be adjusted to tune the dancer control to achieve the desired response for the machine.\n\ninput is the current input, taken from a segment of the I/O. The address and size of the I/O segment are specified by the dancer control option settings.\n\ninput_zero is the input at which P(t) equals zero. This is the input that the dancer control should settle to.\n\ninput_min and input_max specify the expected range of inputs. If set correctly, the range of P(t) will have a span of 1. Depending on the value of input_zero, the range may be from 0 to 1, from -1 to 0, from -0.5 to 0.5, etc. If the input falls below input_min or exceeds input_max, P(t) will exceed this range.\n\nm is the derivative sample size specified by the dancer control settings. If set to 0, the derivative sample size will be 1.\n\nn is the number of time cycles to take the integral over, as specified by the dancer control settings. If set to 0, the integral will be taken over the entire time that the dancer control is in operation, after starting dancer control.\n\nIf the above options are configured correctly, the dancer control will settle to the state where the input is equal to input_zero, with the desired response characteristics.\n\nDancer control may only be executed while the axis is in Velocity mode.\n\nDancer control may only be executed while the axis is in Idle or DancerControl operation state. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Start dancer control."
    },
    {
        "No": 503,
        "FunctionPython": "def StopDancerControl(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopDancerControl(int axis)",
        "Parameters": "[in] axis The axis to stop dancer control. ",
        "Remarks": "This function stops an axis executing dancer control. The axis will decelerate to a stop using the quick stop deceleration specified with Quick Stop Dec. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Stop dancer control."
    },
    {
        "No": 504,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "AdvancedMotion Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 505,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 506,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 507,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 508,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 509,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 510,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 511,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 512,
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Create a new cyclic buffer memory space for an axis."
    },
    {
        "No": 513,
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize)",
        "Parameters": "\n",
        "Remarks": "\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes."
    },
    {
        "No": 514,
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 516,
        "FunctionPython": "def CloseCyclicBuffer(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(int axis)",
        "Parameters": "[in] axis The axis to close the cyclic buffer memory space of. ",
        "Remarks": "Cyclic buffer memory space that is opened with the OpenCyclicBuffer function can be closed with this function. Any cyclic buffer memory spaces that remain opened when the engine closes will be automatically closed. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Close the cyclic buffer memory space of an axis."
    },
    {
        "No": 517,
        "FunctionPython": "def CloseCyclicBuffer_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection that specifies which axes to close the cyclic buffer memory space of. ",
        "Remarks": "This function is an overload of CloseCyclicBuffer that closes the cyclic buffer memory space for multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Close the cyclic buffer memory space of multiple axes."
    },
    {
        "No": 518,
        "FunctionPython": "def AddCommand(axis, pCmd)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddCommand(int axis, CyclicBufferSingleAxisCommand *pCmd)",
        "Parameters": "[in] axis The axis to append the cyclic position command data to. \n[in] pCmd A pointer to a CyclicBufferSingleAxisCommand class that contains the cyclic position command data. \n",
        "Remarks": "If the cyclic position command buffer does not have enough space remaining to append a point, a BufferSizeIsNotEnough error is returned and no data is appended to the buffer. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Add one position command data to the cyclic position command buffer of one axis. "
    },
    {
        "No": 519,
        "FunctionPython": "def AddCommand(axis, pCmd, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddCommand(int axis, CyclicBufferSingleAxisCommand *pCmd, int count)",
        "Parameters": "[in] axis The axis to append the cyclic position command data to. \n[in] pCmd An array of objects of the CyclicBufferSingleAxisCommand class that contains the cyclic position command data. The number of objects in the array must equal the \"count\" argument. \n[in] count The number of objects in the pCmd array. \n",
        "Remarks": "If the cyclic position command buffer does not have enough space remaining to append the specified number of points, a BufferSizeIsNotEnough error is returned and no data is appended to the buffer. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Add any number of position command data to the cyclic position command buffer of one axis. "
    },
    {
        "No": 520,
        "FunctionPython": "def AddCommand_AxisSel(pAxisSelection, pCmds)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddCommand(AxisSelection *pAxisSelection, CyclicBufferMultiAxisCommands *pCmds)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection that specifies which axes to append the cyclic position command data to. \n[in] pCmds A pointer to a CyclicBufferMultiAxisCommands class that contains the cyclic position command data of multiple axes. \n",
        "Remarks": "This function is a variation of the AddCommand function that appends one position command data each to multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Add one position command data each to the cyclic position command buffer of multiple axes. "
    },
    {
        "No": 521,
        "FunctionPython": "def AddCommand_AxisSel(pAxisSelection, pCmds, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC AddCommand(AxisSelection *pAxisSelection, CyclicBufferMultiAxisCommands *pCmds, int count)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection that specifies which axes to append the cyclic position command data to. \n[in] pCmds An array of objects of the CyclicBufferMultiAxisCommands class that contains the cyclic position command data. The number of objects in the array must equal the \"count\" argument. \n[in] count The number of objects in the pCmds array. \n",
        "Remarks": "This function is a variation of the AddCommand function that appends any number of position command data to multiple axes. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Add any number of position command data to the cyclic position command buffer of multiple axes."
    },
    {
        "No": 522,
        "FunctionPython": "def Execute(axis)",
        "FunctionC++": "WMX3APIFUNC Execute(int axis, CyclicBufferSingleAxisOption *pOption=NULL)",
        "Parameters": "[in] axis The axis to start execution of cyclic position commands. \n[in] pOption A pointer to a CyclicBufferSingleAxisOption class that contains execution options. If no value is specified for this optional argument, the default options will be applied. \n",
        "Remarks": "An axis that is currently executing cyclic position commands will have an OperationState of DirectControl.\n\nIf the cyclic position command buffer is empty or becomes empty, execution will resume automatically the next time that cyclic position command data is appended to the buffer as long as the axis is still in DirectControl. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Start the execution of the cyclic position command buffer for a single axis."
    },
    {
        "No": 523,
        "FunctionPython": "def Execute_AxisSel(pAxisSelection)",
        "FunctionC++": "WMX3APIFUNC Execute(AxisSelection *pAxisSelection, CyclicBufferMultiAxisOption *pOption=NULL)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class that specifies the axes to start the execution of cyclic position commands. \n[in] pOption A pointer to a CyclicBufferMultiAxisOption class that contains execution options. If no value is specified for this optional argument, the default options will be applied. \n",
        "Remarks": "This function is an overloaded function of Execute that starts the execution of the cyclic position command buffer for multiple axes. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Start the execution of the cyclic position command buffer for multiple axes. "
    },
    {
        "No": 524,
        "FunctionPython": "def Abort(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC Abort(int axis)",
        "Parameters": "[in] axis The axis to stop the execution of cyclic position commands. ",
        "Remarks": "An axis that stops executing cyclic position commands will return to the Idle state. The command velocity of the axis will suddenly become 0.\n\nAny remaining position commands in the buffer will be cleared. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Class\u00a0",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and clear the buffer. "
    },
    {
        "No": 525,
        "FunctionPython": "def Abort_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC Abort(AxisSelection *pAxisSelection)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class that specifies the axes to stop the execution of cyclic position commands. ",
        "Remarks": "This function is an overloaded function of Abort that stops the execution of the cyclic position command buffer for multiple axes. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and clear the buffer. "
    },
    {
        "No": 526,
        "FunctionPython": "def GetStatus(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetStatus(int axis, CyclicBufferSingleAxisStatus *pStatus)",
        "Parameters": "[in] axis The axis to get the status of. \n[out] pStatus A pointer to a CyclicBufferSingleAxisStatus class which will return the cyclic position command buffer status of the specified axis. \n\n",
        "Remarks": "This function retrieves the cyclic position command buffer status of one axis. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get the cyclic position command buffer status of the specified axis."
    },
    {
        "No": 527,
        "FunctionPython": "def GetStatus_AxisSel(pAxisSelection)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetStatus(AxisSelection *pAxisSelection, CyclicBufferMultiAxisStatus *pStatus)",
        "Parameters": "[in] pAxisSelection A pointer to a AxisSelection class that specifies the axes to get the statuses of. \n[out] pStatus A pointer to a CyclicBufferMultiAxisStatus class which will return the cyclic position command buffer statuses of the specified axes. \n",
        "Remarks": "[in] pAxisSelection A pointer to a AxisSelection class that specifies the axes to get the statuses of. \n[out] pStatus A pointer to a CyclicBufferMultiAxisStatus class which will return the cyclic position command buffer statuses of the specified axes. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CyclicBuffer Class\u00a0",
        "Instruction": "Get the cyclic position command buffer status of the specified axes. "
    },
    {
        "No": 528,
        "FunctionPython": "def GetInputModuleId()\u00a0",
        "FunctionC++": "int GetInputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 529,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied. \n[out] initialState A pointer to a char that will contain the initialState (triggered or untriggered) of the input function. This determines whether the event can trigger when the event is enabled.  \n\nImplements EventInput.\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 530,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n\nImplements EventInput.\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 531,
        "FunctionPython": "def GetOutputModuleId()\u00a0",
        "FunctionC++": "int GetOutputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 532,
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an unsigned int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied.  \n\nImplements EventOutput.\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 533,
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n\nImplements EventOutput.\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 534,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 535,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 536,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 537,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 538,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 539,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 540,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 541,
        "FunctionPython": "def SetEvent(pEventInput, pEventOutput)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "Parameters": "[out] pId A pointer to an int variable that will contain the event identification number of the new event if the new event is successfully created. The event identification number identifies an event and is passed as arguments to several event command APIs. No two events will have the same event identification number. \n[in] pEventInput A pointer to an object of a class that extends the EventInput class that defines the event input function. \n[in] pEventOutput A pointer to an object of a class that extends the EventOutput class that defines the event output function. \n[in] pOption An optional parameter that is a pointer to an object of the EventOption class and specifies additional options to apply to the event. \n",
        "Remarks": "Events consist of two parts: an input function (the condition) and the output function (the action). When the condition is satisfied, the action will be executed.\n\nThe event input function is defined by a class that inherits the EventInput class. Each module defines up to one such class. For example, the CoreMotion module defines the CoreMotionEventInput class, which can be used to specify one of several event inputs.\n\nSimilarly, the event output function is defined by a class that inherits the EventOutput class. Each module defines up to one such class. For example, the CoreMotion module defines the CoreMotionEventOutput class, which can be used to specify one of several event outputs.\n\nOnce the output function is triggered, it cannot be triggered again until the input function becomes FALSE and then TRUE again. When the EnableEvent function is called for an event, the state of the event will be reset so that it may be triggered again.\n\nEvents are evaluated every communication cycle in the order of the identification numbers by the module that defines the event.\n\nThis function returns the ID number of the event. Each event has a unique ID number. However, once an event is deleted, the ID number of that event may be reused by a subsequently defined event. The event ID number is required to obtain the event status with the GetEvent function.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 542,
        "FunctionPython": "def SetEvent_Option(pEventInput, pEventOutput, pOption)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "Parameters": "[out] pId A pointer to an int variable that will contain the event identification number of the new event if the new event is successfully created. The event identification number identifies an event and is passed as arguments to several event command APIs. No two events will have the same event identification number. \n[in] pEventInput A pointer to an object of a class that extends the EventInput class that defines the event input function. \n[in] pEventOutput A pointer to an object of a class that extends the EventOutput class that defines the event output function. \n[in] pOption An optional parameter that is a pointer to an object of the EventOption class and specifies additional options to apply to the event. \n",
        "Remarks": "Events consist of two parts: an input function (the condition) and the output function (the action). When the condition is satisfied, the action will be executed.\n\nThe event input function is defined by a class that inherits the EventInput class. Each module defines up to one such class. For example, the CoreMotion module defines the CoreMotionEventInput class, which can be used to specify one of several event inputs.\n\nSimilarly, the event output function is defined by a class that inherits the EventOutput class. Each module defines up to one such class. For example, the CoreMotion module defines the CoreMotionEventOutput class, which can be used to specify one of several event outputs.\n\nOnce the output function is triggered, it cannot be triggered again until the input function becomes FALSE and then TRUE again. When the EnableEvent function is called for an event, the state of the event will be reset so that it may be triggered again.\n\nEvents are evaluated every communication cycle in the order of the identification numbers by the module that defines the event.\n\nThis function returns the ID number of the event. Each event has a unique ID number. However, once an event is deleted, the ID number of that event may be reused by a subsequently defined event. The event ID number is required to obtain the event status with the GetEvent function.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 543,
        "FunctionPython": "def SetEvent_ID(pEventInput, pEventOutput, id)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, int id, EventOption *pOption=NULL)",
        "Parameters": "[out] pId A pointer to an int variable that will contain the event identification number of the new event if the new event is successfully created. The event identification number identifies an event and is passed as arguments to several event command APIs. No two events will have the same event identification number. \n[in] pEventInput A pointer to an object of a class that extends the EventInput class that defines the event input function. \n[in] pEventOutput A pointer to an object of a class that extends the EventOutput class that defines the event output function. \n[in] id The identification number that is requested by the new event. If this identification number is in use by another event, the IDInUse error will be returned. If this function succeeds, the pId argument will return this value. This value must be at least 0 and less than maxEvents. \n[in] pOption An optional parameter that is a pointer to an object of the EventOption class and specifies additional options to apply to the event. \n",
        "Remarks": "This function is an overloaded function of SetEvent that allows the event identification number of the new event to be specified. If the event identification number is in use by another event or is out of range, this function will return an error.\n\nThis function is useful when the value returned by pId is difficult to read, such as when executing this function with the ApiBuffer class. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 544,
        "FunctionPython": "def SetEvent_ID_Option(pEventInput, pEventOutput, id, pOption)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, EventInput *pEventInput, EventOutput *pEventOutput, int id, EventOption *pOption=NULL)",
        "Parameters": "[out] pId A pointer to an int variable that will contain the event identification number of the new event if the new event is successfully created. The event identification number identifies an event and is passed as arguments to several event command APIs. No two events will have the same event identification number. \n[in] pEventInput A pointer to an object of a class that extends the EventInput class that defines the event input function. \n[in] pEventOutput A pointer to an object of a class that extends the EventOutput class that defines the event output function. \n[in] id The identification number that is requested by the new event. If this identification number is in use by another event, the IDInUse error will be returned. If this function succeeds, the pId argument will return this value. This value must be at least 1 and less than maxEvents. \n[in] pOption An optional parameter that is a pointer to an object of the EventOption class and specifies additional options to apply to the event. \n",
        "Remarks": "This function is an overloaded function of SetEvent that allows the event identification number of the new event to be specified. If the event identification number is in use by another event or is out of range, this function will return an error.\n\nThis function is useful when the value returned by pId is difficult to read, such as when executing this function with the ApiBuffer class. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 545,
        "FunctionPython": "def GetEventModuleId(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEventModuleId(int id, int *pInputModuleId, int *pOutputModuleId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the input function module ID and output function module ID of an existing event."
    },
    {
        "No": 546,
        "FunctionPython": "def GetEvent_InOut(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "Parameters": "[in] id The event identification number of the event. \n[out] pEventInput A pointer to an object of a class that extends the EventInput class that will contain the event input function. The class must match the class that was used to set the event input function. \n[out] pEventOutput A pointer to an object of a class that extends the EventOutput class that will contain the event output function. The class must match the class that was used to set the event output function. \n[out] pOption An optional pointer to an object of the EventOption class that will contain the option settings of the event. \n",
        "Remarks": "This function gets the parameters of an event that was defined by SetEvent and other functions.\n\nThe objects passed to the pEventInput and pEventOutput arguments must match the classes that were used to define the input function and output function. If the classes are not matched, the EventInputModuleIdNotMatched or EventOutputModuleIdNotMatched error is returned. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionPython": "def GetEventOption(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "Parameters": "[in] id The event identification number of the event. \n[out] pOption A pointer to an object of the EventOption class that will contain the option settings of the event. \n",
        "Remarks": "This function reads the option settings of an event. The event is specified by the identification number. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the option settings of an existing event. "
    },
    {
        "No": 548,
        "FunctionPython": "def SetEventInput(id, pEventInput)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEventInput(int id, EventInput *pEventInput)",
        "Parameters": "[in] id The event identification number of the event. \n[in] pEventInput A pointer to an EventInput class object that defines the event input function. \n",
        "Remarks": "This function sets the input function of an event. The event must be first defined with the SetEvent function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "This function sets the input function of an event."
    },
    {
        "No": 549,
        "FunctionPython": "def SetEventOutput(id, pEventOutput)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEventOutput(int id, EventOutput *pEventOutput)",
        "Parameters": "[in] id The event identification number of the event. \n[in] pEventOutput A pointer to an EventOutput class object that defines the event output function. \n",
        "Remarks": "This function sets the output function of an event. The event must be first defined with the SetEvent function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "This function sets the output function of an event."
    },
    {
        "No": 550,
        "FunctionPython": "def GetEventInput(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEventInput(int id, EventInput *pEventInput)",
        "Parameters": "[in] id The event identification number of the event. \n[out] pEventInput A pointer to an EventInput class object that will contain the event input function. \n",
        "Remarks": "This function gets the input function of an event. The event must be first defined with the SetEvent function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "This function gets the input function of an event. "
    },
    {
        "No": 551,
        "FunctionPython": "def GetEventOutput(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEventOutput(int id, EventOutput *pEventOutput)",
        "Parameters": "[in] id The event identification number of the event. \n[out] pEventOutput A pointer to an EventOutput class object that will contain the event output function. \n",
        "Remarks": "This function gets the input function of an event. The event must be first defined with the SetEvent function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "This function gets the output function of an event. "
    },
    {
        "No": 552,
        "FunctionPython": "def GetAllEventID()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "Parameters": "[out] pEventIdData A pointer to an AllEventID class object that will contain the id of all existing events. \n[in] filterInputModuleId An optional parameter that will modify the function to only obtain events with input functions defined by the specified ModuleId. \n[in] filterOutputModuleId An optional parameter that will modify the function to only obtain events with output functions defined by the specified ModuleId. \n",
        "Remarks": "This function obtains the IDs of all events that are currently defined. The IDs may be passed to other functions that reference event IDs. For example, an event ID may be passed to the GetEvent API function to obtain further information about that event.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "Parameters": "[out] pEventIdData A pointer to an AllEventID class object that will contain the id of all existing events. \n[in] filterInputModuleId An optional parameter that will modify the function to only obtain events with input functions defined by the specified ModuleId. \n[in] filterOutputModuleId An optional parameter that will modify the function to only obtain events with output functions defined by the specified ModuleId. \n",
        "Remarks": "This function obtains the IDs of all events that are currently defined. The IDs may be passed to other functions that reference event IDs. For example, an event ID may be passed to the GetEvent API function to obtain further information about that event.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 554,
        "FunctionPython": "def GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "Parameters": "[out] pEventIdData A pointer to an AllEventID class object that will contain the id of all existing events. \n[in] filterInputModuleId An optional parameter that will modify the function to only obtain events with input functions defined by the specified ModuleId. \n[in] filterOutputModuleId An optional parameter that will modify the function to only obtain events with output functions defined by the specified ModuleId. \n",
        "Remarks": "This function obtains the IDs of all events that are currently defined. The IDs may be passed to other functions that reference event IDs. For example, an event ID may be passed to the GetEvent API function to obtain further information about that event.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 555,
        "FunctionPython": "def EnableEvent(id, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnableEvent(int id, unsigned char enable)",
        "Parameters": "[in] id The event identification number of the event. \n[in] enable If 0, the event will be disabled. If 1, the event will be enabled. \n",
        "Remarks": "This function enables or disables an existing event. The event is specified by the identification number. The event must first be created using the SetEvent API function.\n\nA disabled event will not be evaluated. A disabled event can later be enabled by another call to this API function.\n\nThe initial enabled or disabled state of an event created by a call to SetEvent will depend on the enabled parameter of the Event object passed to SetEvent. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Enable or disable an existing event."
    },
    {
        "No": 556,
        "FunctionPython": "def RemoveEvent(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC RemoveEvent(int id)",
        "Parameters": "[in] id The event identification number of the event. ",
        "Remarks": "This function removes an existing event. The event is specified by the identification number.\n\nThis function will permanently remove an event. The event identification number of the event will be freed, and may be assigned to events defined later.\n\nThis function blocks execution and will return at the end of the next cyclic interrupt. If communication is stopped (and events are not being processed), this function is non-blocking and will remove the event immediately. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Remove an existing event."
    },
    {
        "No": 557,
        "FunctionPython": "def ClearAllEvent()\u00a0",
        "FunctionC++": "WMX3APIFUNC ClearAllEvent()",
        "Parameters": NaN,
        "Remarks": "This function permanently clears all existing events. All event identification numbers will be freed, and may be assigned to events defined later.\n\nThis function blocks execution and will return at the end of the next cyclic interrupt. If communication is stopped (and events are not being processed), this function is non-blocking and will clear all events immediately. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Clear all existing events."
    },
    {
        "No": 558,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetCustomEvent(int *pId, int inputModuleId, void *pInputData, int inputDataSize, int outputModuleId, void *pOutputData, int outputDataSize, int id, CustomEventOption *pOption=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 559,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetCustomEventInput(int id, int moduleId, void *pInputData, int inputDataSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 560,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetCustomEventOutput(int id, int moduleId, void *pOutputData, int outputDataSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 561,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetCustomEventInput(int id, void *pInputDataBuff, int inputDataBuffSize, int *pInputDataSize, int *pModuleId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 562,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetCustomEventOutput(int id, void *pOutputDataBuff, int outputDataBuffSize, int *pOutputDataSize, int *pModuleId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 563,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetCustomEventConfigureOfModule(int moduleId, void *pSetEventData, int setEventDataSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 564,
        "FunctionPython": "def SetEvent(pEventData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, Event *pEventData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 565,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetEvent(int *pId, Event *pEventData, unsigned int id)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set an event."
    },
    {
        "No": 566,
        "FunctionPython": "def GetEvent(id)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, Event *pEventData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the parameters of an event. "
    },
    {
        "No": 567,
        "FunctionPython": "def SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetSoftwareTouchProbe(unsigned int channel, unsigned char enable, int axis, int byteAddrs, int bitOffset, unsigned char logic, TouchProbeMode::T mode)",
        "Parameters": "[in] channel The channel of the software touch probe. The number of available channels is contained in the maxTouchprobeChannel constant. Touch probe parameters are unique to each channel. \n[in] enable Whether the software touch probe is enabled or not. The API function EnableSoftwareTouchProbe can be used to enable or disable a software touch probe without modifying the touch probe parameters. \n[in] axis The axis to latch the encoder data. \n[in] byteAddrs The byte address of the input signal that triggers latching the encoder data. \n[in] bitOffset The bit address of the input signal that triggers latching the encoder data. \n[in] logic The polarity of the input signal. If set to 0, the encoder data is latched when the input signal changes from 1 to 0. If set to 1, the encoder data is latched when the input signal changes from 0 to 1. \n[in] mode The mode of the software touch probe. If set to LatchFirst, the latched encoder data will not be overwritten when there are subsequent input signal triggers. When the latched data is read using the GetSoftwareTouchProbeCounterValue API function, the software touch probe is considered to have no latched data any more, and the software touch probe will be able to latch encoder data again. If set to LatchLast, the latched encoder data will be overwritten when there are subsequent input signal triggers. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set parameters for a software touch probe channel. A software touch probe channel is able to latch onto the encoder data of an axis when a particular input signal is detected."
    },
    {
        "No": 568,
        "FunctionPython": "def EnableSoftwareTouchProbe(channel, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnableSoftwareTouchProbe(unsigned int channel, unsigned char enable)",
        "Parameters": "[in] channel The channel of the software touch probe. \n[in] enable Set to 0 to disable the software touch probe and 1 to enable the software touch probe.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Enable a software touch probe channel. A software touch probe channel will only latch encoder data when enabled."
    },
    {
        "No": 569,
        "FunctionPython": "def GetSoftwareTouchProbe(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSoftwareTouchProbe(unsigned int channel, unsigned char *pEnabled, int *pAxis, int *pByteAddrs, int *pBitOffset, unsigned char *pLogic, TouchProbeMode::T *pMode)",
        "Parameters": "[in] channel The channel of the software touch probe. The number of available channels is contained in the maxTouchprobeChannel constant. Touch probe parameters are unique to each channel. \n[out] pEnabled A pointer to an unsigned char that will contain whether the software touch probe is enabled or not. The API function EnableSoftwareTouchProbe can be used to enable or disable a software touch probe without modifying the touch probe parameters. \n[out] pAxis A pointer to an int that will contain the axis to latch the encoder data. \n[out] pByteAddrs A pointer to an int that will contain the byte address of the input signal that triggers latching the encoder data. \n[out] pBitOffset A pointer to an int that will contain the bit address of the input signal that triggers latching the encoder data. \n[out] pLogic A pointer to an unsigned char that will contain the polarity of the input signal. If set to 0, the encoder data is latched when the input signal changes from 1 to 0. If set to 1, the encoder data is latched when the input signal changes from 0 to 1. \n[out] pMode A pointer to a TouchProbeMode variable that will contain the mode of the software touch probe. If set to LatchFirst, any latched encoder data will not be overwritten when there are subsequent input signal triggers. When the latched data is read using the GetSoftwareTouchProbeCounterValue API function, the software touch probe is considered to have no latched data any more, and the software touch probe will be able to latch encoder data again. If set to LatchLast, latched encoder data will be overwritten when there are subsequent input signal triggers.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get parameters of a software touch probe channel."
    },
    {
        "No": 570,
        "FunctionPython": "def IsSoftwareTouchProbeLatched(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC IsSoftwareTouchProbeLatched(unsigned int channel, unsigned char *pLatched)",
        "Parameters": "[in] channel The channel of the software touch probe. \n[out] pLatched A pointer to an unsigned char that will contain whether the software touch probe channel has latched data. This value is set to 1 if encoder data has been latched. This value is reset to 0 whenever the GetSoftwareTouchProbeCounterValue API function is called.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Check whether a software touch probe channel has latched data. "
    },
    {
        "No": 571,
        "FunctionPython": "def GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetSoftwareTouchProbeCounterValue(unsigned int channel, unsigned char *pLatched, double *pCounterValue)",
        "Parameters": "[in] channel The channel of the software touch probe. \n[out] pLatched A pointer to an unsigned char that will contain whether the software touch probe channel has latched data. This value is set to 1 if encoder data has been latched. This value is reset to 0 whenever the GetSoftwareTouchProbeCounterValue API function is called. \n[out] pCounterValue The encoder data latched by the software touch probe.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get latched data of software touch probe."
    },
    {
        "No": 572,
        "FunctionPython": "def SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetHardwareTouchProbe(int axis, unsigned char enable, TouchProbeMode::T mode, TouchProbeSource::T triggerSource, unsigned int channel)",
        "Parameters": "[in] axis The axis of the hardware touch probe. \n[in] enable This value determines the initial state of the hardware touch probe. Set to 0 to disable the hardware touch probe and 1 to enable the hardware touch probe. \n[in] mode The mode of the touch probe. If set to LatchFirst, the hardware touch probe will latch the encoder data when the next touch probe input signal is detected, but will not latch the encoder data for any subsequent touch probe input signals. If set to LatchLast, the hardware touch probe will latch the encoder data each time the touch probe input signal is detected. \n[in] triggerSource The trigger source of the touch probe. If set to ZPulse, the Z-pulse (index pulse) signal will trigger the touch probe. If set to TouchProbe, the touch probe signal will trigger the touch probe. The touch probe signal specifications will be dependent on the servo drive, and can often be configured to one of several inputs. \n[in] channel The channel of the touch probe. The allowed values are 0 or 1. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set parameters for the hardware touch probe of an axis. A hardware touch probe latches the encoder data of the axis when the touch probe input signal is detected."
    },
    {
        "No": 573,
        "FunctionPython": "def GetHardwareTouchProbeStatus(axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetHardwareTouchProbeStatus(int axis, HardwareTouchProbeStatus *pStatus)",
        "Parameters": "[in] axis The axis of the hardware touch probe. \n[out] pStatus A pointer to a HardwareTouchProbeStatus class object that contains the parameters and current state of the hardware touch probe.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get parameters and current state of the hardware touch probe of an axis. "
    },
    {
        "No": 574,
        "FunctionPython": "def EnableHardwareTouchProbe(axis, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC EnableHardwareTouchProbe(int axis, unsigned char enable)",
        "Parameters": "[in] axis The axis of the hardware touch probe. \n[in] enable Set to 0 to disable the hardware touch probe and 1 to enable the hardware touch probe.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Enable or disable the hardware touch probe of an axis."
    },
    {
        "No": 575,
        "FunctionPython": "def SetPSOConfig(channel, pType, pMinDurationMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[in] type The type of comparison to perform. \n[in] pSource The source to use for the comparison. \n[in] pOutput A pointer to an PSOOutput class object that specifies the type and address of the output to set based on the result of the comparison. \n[in] minDurationMilliseconds The duration to keep the output set after the comparison changes from true to false. The output will be set while the comparison yields true, and for the period specified in this argument after the comparison changes from true to false. This value has units of milliseconds. \n[in] pOption An optional argument that is a pointer to a class containing additional position synchronous output options. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
    },
    {
        "No": 576,
        "FunctionPython": "def SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[in] type The type of comparison to perform. \n[in] pSource The source to use for the comparison. \n[in] pOutput A pointer to an PSOOutput class object that specifies the type and address of the output to set based on the result of the comparison. \n[in] minDurationMilliseconds The duration to keep the output set after the comparison changes from true to false. The output will be set while the comparison yields true, and for the period specified in this argument after the comparison changes from true to false. This value has units of milliseconds. \n[in] pOption An optional argument that is a pointer to a class containing additional position synchronous output options. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
    },
    {
        "No": 577,
        "FunctionPython": "def GetPSOConfig(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSOConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource,PSOOutput *pOutput, double *pMinDurationMilliseconds, PSOOption *pOption=NULL)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pType A pointer to a ComparisonType that will contain the type of comparison to perform. \n[out] pSource A pointer to a ComparatorSource class object that specifies the source to use for the comparison. \n[out] pOutput A pointer to an PSOOutput class object that specifies the type and address of the output to set based on the result of the comparison. \n[out] pMinDurationMilliseconds A pointer to a double that will contain the duration to keep the output set when the comparison changes from true to false, in units of milliseconds. \n[out] pOption An optional argument that is a pointer to a class that will return additional position synchronous output options.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get parameters for a position synchronous output channel."
    },
    {
        "No": 578,
        "FunctionPython": "def GetPSOConfig_Option(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSOConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource,PSOOutput *pOutput, double *pMinDurationMilliseconds, PSOOption *pOption=NULL)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pType A pointer to a ComparisonType that will contain the type of comparison to perform. \n[out] pSource A pointer to a ComparatorSource class object that specifies the source to use for the comparison. \n[out] pOutput A pointer to an PSOOutput class object that specifies the type and address of the output to set based on the result of the comparison. \n[out] pMinDurationMilliseconds A pointer to a double that will contain the duration to keep the output set when the comparison changes from true to false, in units of milliseconds. \n[out] pOption An optional argument that is a pointer to a class that will return additional position synchronous output options.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get parameters for a position synchronous output channel."
    },
    {
        "No": 579,
        "FunctionPython": "def SetPSOSingleData(channel, sData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPSOSingleData(unsigned int channel, double sData)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[in] sData The data point. \n",
        "Remarks": "This function sets a single data point for a position synchronous output channel. Any data points that have been previously set by the SetPSOSingleData, SetPSOMultipleData, or SetPSOIntervalData functions are cleared.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set a single data point for a position synchronous output channel."
    },
    {
        "No": 580,
        "FunctionPython": "def SetPSOMultipleData(channel, count, pMData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPSOMultipleData(unsigned int channel, int count, double *pMData)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[in] count The number of data points at the memory location pointed by mData. The maximum number of data points is contained in the maxPsoData constant. \n[in] pMData A pointer to memory location containing a sequence of data points. \n",
        "Remarks": "This function sets multiple data points for a position synchronous output channel. Any data points that have been previously set by the SetPSOSingleData, SetPSOMultipleData, or SetPSOIntervalData functions are cleared.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set multiple data points for a position synchronous output channel."
    },
    {
        "No": 581,
        "FunctionPython": "def SetPSOIntervalData(channel, rangeStart, rangeEnd, interval)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPSOIntervalData(unsigned int channel, double rangeStart, double rangeEnd, double interval)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[in] rangeStart The starting position of the range. The first data point will be set to rangeStart + interval. \n[in] rangeEnd The end position of the range. This is the greatest position where the data point may be set. \n[in] interval The interval between each data point. \n",
        "Remarks": "This function sets data points over a range for a position synchronous output channel. Any data points that have been previously set by the SetPSOSingleData, SetPSOMultipleData, or SetPSOIntervalData functions are cleared.\n\nAll points p that satisfy [p = rangeStart + n*interval] and [rangeStart < p <= rangeEnd] for integer n will trigger the output. For example, if rangeStart = 0, rangeEnd = 5000, and interval = 1000, then the output will be triggered at positions 1000, 2000, 3000, 4000, and 5000.\n\nThe activeDataIndex status will return n when the output is set by the nth point. For example, in the above example, activeDataIndex will be set to 1 when the output is set by position 1000, 2 when the output is set by position 2000, 3 when the output is set by position 3000, 4 when the output is set by position 4000, and 5 when the output is set by position 5000.\n\nThe number of points p that are generated by this function is unlimited, and may exceed maxPsoData.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set data points over a range for a position synchronous output channel."
    },
    {
        "No": 582,
        "FunctionPython": "def GetPSOData(channel, maxCount)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSOData(unsigned int channel, int *pCount, double *pMData, int maxCount)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pCount A pointer to an int that will contain the number of data points at the memory location pointed by mData. The maximum number of data points is contained in the maxPsoData constant. \n[out] pMData A pointer to a memory location that will contain the sequence of data points that are currently set for the position synchronous output channel. Enough space for the maximum number of data points (maxPsoData) must be reserved. \n[in] maxCount The maximum count of data to copy into pMData. \n",
        "Remarks": "This function obtains the data points that have been set for a position synchronous output channel using the SetPSOSingleData or SetPSOMultipleData functions.\n\nThe GetFunctionDoesNotMatchSetFunction error is returned if the data for the position synchronous output channel has been set by the SetPSOIntervalData function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get all data points that are currently set for a position synchronous output channel."
    },
    {
        "No": 583,
        "FunctionPython": "def GetPSODataCount(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSODataCount(unsigned int channel, int *pCount)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pCount A pointer to an int that will contain the number of data points that are set for the position synchronous output channel. The maximum number of data points is contained in the maxPsoData constant. \n",
        "Remarks": "This function obtains the number of data points that have been set for a position synchronous output channel using the SetPSOSingleData or SetPSOMultipleData functions.\n\nThe GetFunctionDoesNotMatchSetFunction error is returned if the data for the position synchronous output channel has been set by the SetPSOIntervalData function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the number of data points that are currently set for a position synchronous output channel. "
    },
    {
        "No": 584,
        "FunctionPython": "def GetPSOIntervalData(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSOIntervalData(unsigned int channel, double *pRangeStart, double *pRangeEnd, double *pInterval)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pRangeStart A pointer to a double that will contain the starting position of the range. \n[out] pRangeEnd A pointer to a double that will contain the end position of the range. \n[out] pInterval A pointer to a double that will contain the interval between each data point. \n",
        "Remarks": "This function obtains the range and interval that have been set for a position synchronous output channel using the SetPSOIntervalData function.\n\nThe GetFunctionDoesNotMatchSetFunction error is returned if the data for the position synchronous output channel has been set by the SetPSOSingleData or SetPSOMultipleData functions. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the range and interval of a position synchronous output channel. "
    },
    {
        "No": 585,
        "FunctionPython": "def StartPSO(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPSO(unsigned int channel)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. ",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Start a position synchronous output channel. A position synchronous output channel must be started before it controls the output."
    },
    {
        "No": 586,
        "FunctionPython": "def StopPSO(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopPSO(unsigned int channel)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant.  ",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Stop a position synchronous output channel. A stopped position synchronous output channel will stop controlling any outputs. "
    },
    {
        "No": 587,
        "FunctionPython": "def GetPSOStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPSOStatus(unsigned int channel, PSOStatus *pStatus)",
        "Parameters": "[in] channel The channel of the position synchronous output. The number of available channels is contained in the maxPsoChannel constant. \n[out] pStatus A pointer to a PSOStatus class object that contains the state of the position synchronous output channel.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the state of a position synchronous output channel."
    },
    {
        "No": 588,
        "FunctionPython": "def SetPlannedVelOverrideConfig(channel, type, pSource, axis)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, int axis)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[in] type The type of comparison to perform. \n[in] pSource A pointer to a ComparatorSource class object that specifies the source to use for the comparison. \n[in] axis The axis to override the velocity of when the condition yields true. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set parameters for a planned velocity override channel. A planned velocity override channel is able to override the velocity of an axis when certain conditions, such as an axis reaching a certain position, are met."
    },
    {
        "No": 589,
        "FunctionPython": "def GetPlannedVelOverrideConfig(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideConfig(unsigned int channel, ComparisonType::T *pType, ComparatorSource *pSource, int *pAxis)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[out] pType A pointer to a ComparisonType that will contain the type of comparison to perform. \n[out] pSource A pointer to a ComparatorSource class object that specifies the source to use for the comparison. \n[out] pAxis A pointer to an int that will contain the axis to override the velocity of when the condition yields true.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get parameters for a planned velocity override channel."
    },
    {
        "No": 590,
        "FunctionPython": "def SetPlannedVelOverrideSingleData(channel, sData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideSingleData(unsigned int channel, PlannedVelocityData sData)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[in] sData The data point as represented by a PlannedVelocityData class object. \n",
        "Remarks": "This function sets a single data point for a planned velocity override channel. Any data points that have been previously set by the SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData functions are cleared.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set a single data point for a planned velocity override channel. "
    },
    {
        "No": 591,
        "FunctionPython": "def SetPlannedVelOverrideMultipleData(channel, count, pMData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideMultipleData(unsigned int channel, int count, PlannedVelocityData *pMData)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[in] count The number of data points at the memory location pointed by mData. The maximum number of data points is contained in the maxPveloData constant. \n[in] pMData A pointer to a memory location containing a sequence of data points. Data points are represented by PlannedVelocityData class objects. \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Set multiple data points for a planned velocity override channel."
    },
    {
        "No": 592,
        "FunctionPython": "def GetPlannedVelOverrideData(channel, maxCount)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideData(unsigned int channel, int *pCount, PlannedVelocityData *pMData, int maxCount)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[out] pCount A pointer to an int that will contain the number of data points at the memory location pointed by mData. The maximum number of data points is contained in the maxPveloData constant. \n[out] pMData A pointer to a memory location that will contain the sequence of data points that are currently set for the planned velocity override channel. Enough space to store the maximum number of data points (maxPveloData) must be reserved. Data points are represented PlannedVelocityData class objects. \n[in] maxCount The maximum count of data to copy into pMData.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get all data points that are currently set for a planned velocity override channel."
    },
    {
        "No": 593,
        "FunctionPython": "def GetPlannedVelOverrideDataCount(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideDataCount(unsigned int channel, int *pCount)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[out] pCount A pointer to an int that will contain the number of data points that are set for the planned velocity override channel. The maximum number of data points is contained in the constants::maxPveloData.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the number of data points that are currently set for a planned velocity override channel. "
    },
    {
        "No": 594,
        "FunctionPython": "def StartPlannedVelOverride(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartPlannedVelOverride(unsigned int channel)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. ",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Start a planned velocity override channel. A planned velocity override channel must be started before it controls the output. "
    },
    {
        "No": 595,
        "FunctionPython": "def StopPlannedVelOverride(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopPlannedVelOverride(unsigned int channel)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Stop a planned velocity override channel. A stopped planned velocity override channel will stop controlling any outputs."
    },
    {
        "No": 596,
        "FunctionPython": "def GetPlannedVelOverrideStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideStatus(unsigned int channel, PlannedVelocityStatus *pStatus)",
        "Parameters": "[in] channel The channel of the planned velocity override. The number of available channels is contained in the maxPveloChannel constant. \n[out] pStatus A pointer to a PlannedVelocityStatus class object that contains the state of the planned velocity override channel.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class\u00a0",
        "Instruction": "Get the state of a planned velocity override channel."
    },
    {
        "No": 597,
        "FunctionPython": "def GetInputModuleId()\u00a0",
        "FunctionC++": "int GetInputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 598,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied. \n[out] initialState A pointer to a char that will contain the initialState (triggered or untriggered) of the input function. This determines whether the event can trigger when the event is enabled.  \n\nImplements EventInput.\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 599,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n\nImplements EventInput.\n  \n\n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 600,
        "FunctionPython": "def GetOutputModuleId()\u00a0",
        "FunctionC++": "int GetOutputModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 601,
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an unsigned int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 602,
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 603,
        "FunctionPython": "def GetModuleId()\u00a0",
        "FunctionC++": "int GetModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "unsigned int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 604,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied. \n[out] initialState A pointer to a char that will contain the initialState (triggered or untriggered) of the input function. This determines whether the event can trigger when the event is enabled.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 605,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 606,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 607,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 608,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 609,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 610,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 611,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 612,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 613,
        "FunctionPython": "def SetOutBit(addr, bit, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBit(int addr, int bit, unsigned char data)",
        "Parameters": "[in] addr The byte address of the bit to set. \n[in] bit The bit address of the bit to set. \n[in] data The value to set the bit to.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of an output bit."
    },
    {
        "No": 614,
        "FunctionPython": "def SetOutByte(addr, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutByte(int addr, unsigned char data)",
        "Parameters": "[in] addr The address of the byte to set. \n[in] data The value to set the byte to.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of an output byte."
    },
    {
        "No": 615,
        "FunctionPython": "def SetOutBytes(addr, size, pData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBytes(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to set. \n[in] pData A pointer to a unsigned char array that contains the values to set the bytes to. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function does not set the specified data atomically. If the data is read by another thread at the same time, partially updated data may be read. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of multiple output bytes."
    },
    {
        "No": 616,
        "FunctionPython": "def SetOutBits(pByte, pBit, pData, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBits(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "Parameters": "[in] pAddr A pointer to an int array that contains the byte addresses of the output bits. The size of the array must be equal to the count parameter. \n[in] pBit A pointer to an int array that contains the bit addresses of the output bits. The size of the array must be equal to the count parameter. \n[in] pData A pointer to an unsigned char array that contains the values to set the bits to. The size of the array must be equal to the count parameter. \n[in] count The number of bits to set. \n",
        "Remarks": "This function is equivalent to calling the SetOutBit function multiple times, but can be faster due to the reduced overhead. There is no limit to the number of bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so on. The bits can be specified in any order. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of multiple output bits."
    },
    {
        "No": 617,
        "FunctionPython": "def SetOutAnalogDataChar(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataChar(int addr, char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets one byte of the output address space to the specified char type analog data value. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 618,
        "FunctionPython": "def SetOutAnalogDataUChar(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUChar(int addr, unsigned char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets one byte of the output address space to the specified unsigned char type analog data value. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 619,
        "FunctionPython": "def SetOutAnalogDataShort(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataShort(int addr, short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets two bytes of the output address space to the specified short type analog data value.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 620,
        "FunctionPython": "def SetOutAnalogDataUShort(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUShort(int addr, unsigned short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets two bytes of the output address space to the specified unsigned short type analog data value.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 621,
        "FunctionPython": "def SetOutAnalogDataInt(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataInt(int addr, int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets four bytes of the output address space to the specified int type analog data value.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 622,
        "FunctionPython": "def SetOutAnalogDataUInt(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUInt(int addr, unsigned int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets four bytes of the output address space to the specified unsigned int type analog data value.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 623,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskMode(bool enable)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Set the bitmask mode of output."
    },
    {
        "No": 624,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBit(int addr, int bit, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Set the bitmask of output bit."
    },
    {
        "No": 625,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskByte(int addr, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Set the bitmask of an output byte."
    },
    {
        "No": 626,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBytes(int addr, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Set the bitmask of multiple output bytes. "
    },
    {
        "No": 627,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetOutBitMaskBits(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Set the bitmask of multiple output bits."
    },
    {
        "No": 628,
        "FunctionPython": "def GetInBit(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInBit(int addr, int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an input bit."
    },
    {
        "No": 629,
        "FunctionPython": "def GetInByte(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInByte(int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an input byte. "
    },
    {
        "No": 630,
        "FunctionPython": "def GetInBytes(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInBytes(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function obtains the input data that was read by the engine during the most recent interrupt (communication cycle).\n\nThis function does not read the specified data atomically. If the data is overwritten by another thread at the same time (for example, if a communication interrupt occurs), partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of multiple input bytes."
    },
    {
        "No": 631,
        "FunctionPython": "def GetInAnalogDataChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataChar(int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the input address space and returns the data as a char type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 632,
        "FunctionPython": "def GetInAnalogDataUChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUChar(int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to an unsigned char that will receive the data. \n",
        "Remarks": "This function reads one byte of the input address space and returns the data as an unsigned char type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 633,
        "FunctionPython": "def GetInAnalogDataShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataShort(int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a short that will receive the data. \n",
        "Remarks": "This function reads two bytes of the input address space and returns the data as a short type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle).\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time (for example, if a communication interrupt occurs), partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 634,
        "FunctionPython": "def GetInAnalogDataUShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUShort(int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to an unsigned short that will receive the data. \n",
        "Remarks": "This function reads two bytes of the input address space and returns the data as an unsigned short type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle).\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time (for example, if a communication interrupt occurs), partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 635,
        "FunctionPython": "def GetInAnalogDataInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataInt(int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to an int that will receive the data. \n",
        "Remarks": "This function reads four bytes of the input address space and returns the data as an int type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle).\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time (for example, if a communication interrupt occurs), partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 636,
        "FunctionPython": "def GetInAnalogDataUInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUInt(int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to an unsigned int that will receive the data. \n",
        "Remarks": "This function reads four bytes of the input address space and returns the data as an unsigned int type analog data value.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle).\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time (for example, if a communication interrupt occurs), partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 637,
        "FunctionPython": "def GetOutBit(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutBit(int addr, int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an output bit."
    },
    {
        "No": 638,
        "FunctionPython": "def GetOutByte(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutByte(int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an output byte."
    },
    {
        "No": 639,
        "FunctionPython": "def GetOutBytes(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutBytes(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function does not read the specified data atomically. If the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of multiple output bytes. "
    },
    {
        "No": 640,
        "FunctionPython": "def GetOutAnalogDataChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataChar(int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the output address space and returns the data as a char type analog data value. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 641,
        "FunctionPython": "def GetOutAnalogDataUChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUChar(int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the output address space and returns the data as an unsigned char type analog data value. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 642,
        "FunctionPython": "def GetOutAnalogDataShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataShort(int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the output address space and returns the data as a short type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning two bytes."
    },
    {
        "No": 643,
        "FunctionPython": "def GetOutAnalogDataUShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUShort(int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the output address space and returns the data as an unsigned short type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning two bytes."
    },
    {
        "No": 644,
        "FunctionPython": "def GetOutAnalogDataInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataInt(int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the output address space and returns the data as an int type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 645,
        "FunctionPython": "def GetOutAnalogDataUInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUInt(int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the output address space and returns the data as an unsigned int type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 646,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskMode(bool *pEnable)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get the bitmask mode of output."
    },
    {
        "No": 647,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskBit(int addr, int bit, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get the bitmask of an output bit."
    },
    {
        "No": 648,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskByte(int addr, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get the bitmask of an output byte."
    },
    {
        "No": 649,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetOutBitMaskBytes(int addr, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Io Class\u00a0",
        "Instruction": "Get the bitmask of multiple output bytes. "
    },
    {
        "No": 650,
        "FunctionPython": "def SetOutBitEx(addr, bit, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBitEx(int addr, int bit, unsigned char data)",
        "Parameters": "[in] addr The byte address of the bit to set. \n[in] bit The bit address of the bit to set. \n[in] data The value to set the bit to. \n",
        "Remarks": "This function has a faster response time compared to SetOutBit.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of an output bit."
    },
    {
        "No": 651,
        "FunctionPython": "def SetOutByteEx(addr, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutByteEx(int addr, unsigned char data)",
        "Parameters": "[in] addr The address of the byte to set. \n[in] data The value to set the byte to. \n",
        "Remarks": "This function has a faster response time compared to SetOutByte.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of an output byte. "
    },
    {
        "No": 652,
        "FunctionPython": "def SetOutBytesEx(addr, size, pData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBytesEx(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to set. \n[in] pData A pointer to a unsigned char array that contains the values to set the bytes to. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function has a faster response time compared to SetOutBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of multiple output bytes."
    },
    {
        "No": 653,
        "FunctionPython": "def SetOutBitsEx(pByte, pBit, pData, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutBitsEx(int *pAddr, int *pBit, unsigned char *pData, int count)",
        "Parameters": "[in] pAddr A pointer to an int array that contains the byte addresses of the output bits. The size of the array must be equal to the count parameter. \n[in] pBit A pointer to an int array that contains the bit addresses of the output bits. The size of the array must be equal to the count parameter. \n[in] pData A pointer to an unsigned char array that contains the values to set the bits to. The size of the array must be equal to the count parameter. \n[in] count The number of bits to set. \n",
        "Remarks": "This function is equivalent to calling the SetOutBit function multiple times, but can be faster due to the reduced overhead. There is no limit to the number of bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so on. The bits can be specified in any order.\n\nThis function has a faster response time compared to SetOutBits.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of multiple output bits. "
    },
    {
        "No": 654,
        "FunctionPython": "def SetOutAnalogDataCharEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataCharEx(int addr, char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets one byte of the output address space to the specified char type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning one byte."
    },
    {
        "No": 655,
        "FunctionPython": "def SetOutAnalogDataUCharEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUCharEx(int addr, unsigned char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets one byte of the output address space to the specified unsigned char type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataUChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning one byte. "
    },
    {
        "No": 656,
        "FunctionPython": "def SetOutAnalogDataShortEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataShortEx(int addr, short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets two bytes of the output address space to the specified short type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning two bytes. "
    },
    {
        "No": 657,
        "FunctionPython": "def SetOutAnalogDataUShortEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUShortEx(int addr, unsigned short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets two bytes of the output address space to the specified unsigned short type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataUShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning two bytes."
    },
    {
        "No": 658,
        "FunctionPython": "def SetOutAnalogDataIntEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataIntEx(int addr, int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets four bytes of the output address space to the specified int type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning four bytes. "
    },
    {
        "No": 659,
        "FunctionPython": "def SetOutAnalogDataUIntEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetOutAnalogDataUIntEx(int addr, unsigned int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the output bytes to. \n",
        "Remarks": "This function sets four bytes of the output address space to the specified unsigned int type analog data value.\n\nThis function has a faster response time compared to SetOutAnalogDataUInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the value of output analog data spanning four bytes."
    },
    {
        "No": 660,
        "FunctionPython": "def GetInBitEx(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInBitEx(int addr, int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetInBit.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an input bit. "
    },
    {
        "No": 661,
        "FunctionPython": "def GetInByteEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInByteEx(int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetInByte.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an input byte."
    },
    {
        "No": 662,
        "FunctionPython": "def GetInBytesEx(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInBytesEx(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function has a faster response time compared to GetInBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of multiple input bytes."
    },
    {
        "No": 663,
        "FunctionPython": "def GetInAnalogDataCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataCharEx(int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the input address space and returns the data as a char type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 664,
        "FunctionPython": "def GetInAnalogDataUCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUCharEx(int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the input address space and returns the data as an unsigned char type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataUChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning one byte."
    },
    {
        "No": 665,
        "FunctionPython": "def GetInAnalogDataShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataShortEx(int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the input address space and returns the data as a short type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning two bytes"
    },
    {
        "No": 666,
        "FunctionPython": "def GetInAnalogDataUShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUShortEx(int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the input address space and returns the data as an unsigned short type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataUShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning two bytes."
    },
    {
        "No": 667,
        "FunctionPython": "def GetInAnalogDataIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataIntEx(int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the input address space and returns the data as an int type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 668,
        "FunctionPython": "def GetInAnalogDataUIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInAnalogDataUIntEx(int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the input address space and returns the data as an unsigned int type analog data value.\n\nThis function has a faster response time compared to GetInAnalogDataUInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer.\n\nThis function obtains the input data that was read by the engine during the most recent interrupt (communication cycle). \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of input analog data spanning four bytes."
    },
    {
        "No": 669,
        "FunctionPython": "def GetOutBitEx(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutBitEx(int addr, int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetOutBit.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an output bit."
    },
    {
        "No": 670,
        "FunctionPython": "def GetOutByteEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutByteEx(int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetOutByte.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of an output byte."
    },
    {
        "No": 671,
        "FunctionPython": "def GetOutBytesEx(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutBytesEx(int addr, int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function has a faster response time compared to GetOutBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of multiple output bytes."
    },
    {
        "No": 672,
        "FunctionPython": "def GetOutAnalogDataCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataCharEx(int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the output address space and returns the data as a char type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning one byte. "
    },
    {
        "No": 673,
        "FunctionPython": "def GetOutAnalogDataUCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUCharEx(int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the output address space and returns the data as an unsigned char type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataUChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning one byte."
    },
    {
        "No": 674,
        "FunctionPython": "def GetOutAnalogDataShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataShortEx(int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the output address space and returns the data as a short type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning two bytes. "
    },
    {
        "No": 675,
        "FunctionPython": "def GetOutAnalogDataUShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUShortEx(int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the output address space and returns the data as an unsigned short type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataUShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning two bytes. "
    },
    {
        "No": 676,
        "FunctionPython": "def GetOutAnalogDataIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataIntEx(int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the output address space and returns the data as an int type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning four bytes."
    },
    {
        "No": 677,
        "FunctionPython": "def GetOutAnalogDataUIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetOutAnalogDataUIntEx(int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the output address space and returns the data as an unsigned int type analog data value.\n\nThis function has a faster response time compared to GetOutAnalogDataUInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the value of output analog data spanning four bytes. "
    },
    {
        "No": 678,
        "FunctionPython": "def SetInitialOutByte(addr, data, enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInitialOutByte(int addr, unsigned char data, unsigned char enable)",
        "Parameters": "[in] addr The address of the byte to set. \n[in] data The value to set the byte to. \n[in] enable Set to 1 to enable the initial value of this output byte, and set to 0 to disable it. If the initial value is disabled, the output byte will not be changed when communication is started. \n",
        "Remarks": "This function sets the initial value of an output byte. The initial value is the value that the output byte is set to whenever communication with the servo network is started using the StartCommunication API function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the initial value of an output byte that is applied when communication is started."
    },
    {
        "No": 679,
        "FunctionPython": "def SetInitialOutBytes(addr, size, pData, pEnable)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInitialOutBytes(int addr, int size, unsigned char *pData, unsigned char *pEnable)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to set. \n[in] pData A pointer to an unsigned char array that contains the values to set the bytes to. The size of the array must be greater than or equal to the size parameter. \n[in] pEnable A pointer to an unsigned char array that is used to enable or disable the initial value of each output byte. Set to 1 to enable the initial value of the corresponding output byte, and set to 0 to disable it. If the initial value is disabled, the output byte will not be changed when communication is started. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function sets the initial values of multiple output bytes. The initial values are the values that the output bytes are set to whenever communication with the servo network is started using the StartCommunication API function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 680,
        "FunctionPython": "def GetInitialOutByte(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInitialOutByte(int addr, unsigned char *pData, unsigned char *pEnable)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n[out] pEnable A pointer to a unsigned char that will contain 1 if the initial value is set for the specified output byte, and 0 otherwise. \n",
        "Remarks": "This function gets the initial value of an output byte. The initial value is the value that the output byte is set to whenever communication with the servo network is started using the StartCommunication API function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Set the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 681,
        "FunctionPython": "def GetInitialOutBytes(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInitialOutBytes(int addr, int size, unsigned char *pData, unsigned char *pEnable)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n[out] pEnable A pointer to a unsigned char array. Each index will contain 1 if the initial value is set for the output byte corresponding to that index, and 0 otherwise. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function gets the initial values of multiple output bytes. The initial values are the values that the output bytes are set to whenever communication with the servo network is started using the StartCommunication API function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the initial values of multiple output bytes that are applied when communication is started. "
    },
    {
        "No": 682,
        "FunctionPython": "def GetInitialOutByteInterruptId(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInitialOutByteInterruptId(int addr, unsigned char *pInterruptId)",
        "Parameters": "[in] addr The address of the output byte to check. \n[out] pInterruptId A pointer to an unsigned char that will contain the ID of the interrupt that will set the initial value of the specified output byte. \n",
        "Remarks": "This function gets the ID of the interrupt (cyclic handler) that will set the initial value of the specified output byte. The specified output byte will be set to the configured value (if any) when communication is started for this interrupt. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": " Get the ID of the interrupt (cyclic handler) that will set the initial value of the specified output byte. "
    },
    {
        "No": 683,
        "FunctionPython": "def GetInitialOutBytesInterruptId(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInitialOutBytesInterruptId(int addr, int size, unsigned char *pInterruptId)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to check. \n[out] pInterruptId A pointer to an unsigned char array. Each index will contain the ID of the interrupt that will set the initial value of the specified output byte. \n",
        "Remarks": "This function gets the IDs of the interrupts (cyclic handlers) that will set the initial values of the specified output bytes. Each specified output byte will be set to the configured value (if any) when communication is started for the associated interrupt. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Io Class\u00a0",
        "Instruction": "Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the specified output bytes."
    },
    {
        "No": 684,
        "FunctionPython": "def GetModuleId()\u00a0",
        "FunctionC++": "int GetModuleId()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "unsigned int\u00a0",
        "ReturnValue": "ID of the module\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 685,
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize)",
        "Parameters": "[out] buff A pointer to a buffer that will contain the binary representation of the member variables. \n[in] buffSize The size of the buffer in bytes. \n[out] dataSize A pointer to an int that will contain the size of the binary representation of the member variables, in bytes. This size of the buffer will be occupied. \n[out] initialState A pointer to a char that will contain the initialState (triggered or untriggered) of the input function. This determines whether the event can trigger when the event is enabled.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 686,
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "Parameters": "[in] moduleId The ID of the module that defines the binary representation of the member variables. \n[in] data A pointer to a buffer that contains the binary representation of the member variables. \n[in] dataSize The size of the buffer in bytes.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 687,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "log Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 688,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 689,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "log Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 690,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 691,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 692,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "log Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 693,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 694,
        "FunctionPython": "def StartLog(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartLog(unsigned int channel)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. ",
        "Remarks": "Before starting to log data, data logging settings must first be set using the SetLog API function.\n\nWhen this function is called, a file will be immediately created at the file path specified by the SetLog API function. Data will be collected and written to this file until the specified sample time elapses or an error is encountered.\n\nCall the GetLogStatus API function to obtain the status of the logging operation.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Start logging data. "
    },
    {
        "No": 695,
        "FunctionPython": "def StopLog(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopLog(unsigned int channel)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. ",
        "Remarks": "Data logging can be finished before the specified sample time elapses using this function. When this function is called, data logging will stop. Data that had already been written to the log file remain written. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Stop logging data."
    },
    {
        "No": 696,
        "FunctionPython": "def ResetLog(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC ResetLog(unsigned int channel)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. ",
        "Remarks": "When this function is called, all log settings, options, and statuses are cleared for the specified channel.\n\nThis function cannot be called while a logging operation is active. The state of the log channel obtained with the GetDetailLogStatus function must be Finished, WriteFail, or BufferOverflow. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Reset the log settings, options, and statuses for the specified log channel."
    },
    {
        "No": 697,
        "FunctionPython": "def SetLogHeader(channel, pLogHeader)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetLogHeader(unsigned int channel, char **ppLine, unsigned int numLines)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] ppLine An array of pointers to null-terminated char arrays. Each null-terminated char array contains one line of the header. \n[in] numLines The number of elements (pointers to null-terminated char arrays) in the value passed to the \"ppLine\" parameter. Each pointer (to a null-terminated char array) contains one line of the header string, so the \"numLines\" value effectively specifies the number of lines in the header. \n",
        "Remarks": "This function sets the header string that is printed at the beginning of the log file. This function is optional, and it is not necessary to call this function when collecting log data. If this function is not called, no header will be printed at the beginning of the log file.\n\nThe maximum number of lines that may constitute the header is defined by the maxLogHeaderLines constant. The maximum number of characters total in the header (including the new line character at the end of each line) is defined by the maxLogHeaderBytes constant.\n\nThe log header can be removed by calling the ResetLog function. All other log settings and options will also be cleared, and will need to be set again. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Set the log header string that is copied to the beginning of the log file."
    },
    {
        "No": 698,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, unsigned int moduleId, void *data, unsigned int dataSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 699,
        "FunctionPython": "def SetLog(channel, input)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, LogInput *input)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] input A pointer to an object of a class that inherits the LogInput class. \n",
        "Remarks": "This function specifies which data to be collected by the logging operation.\n\nEach module that contains data that can be logged defines a class that inherits the LogInput class. For example, the CoreMotion module defines the CoreMotionLogInput class, which can be used to collect axis data such as position commands. The IO module defines the IoLogInput, which can be used to collect I/O data.\n\nData from multiple modules may be logged simultaneously. To do so, call this function multiple times, passing in a different LogInput object each time. For example, to collect the position command data of an axis and I/O data in a single log file, call this function passing an CoreMotionLogInput object, and then call this function again passing an IoLogInput object.\n\nIf the data to collect from a module has been specified already, calling this function again for the same module will overwrite the set of data to collect.\n\nThis function allocates memory each time it is called. If there is not enough contiguous memory in the real time operating system space, an error will be returned.\n\nThe memory allocated by this function is released when the log operation finishes. To start another log operation, this function must be called again.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 700,
        "FunctionPython": "def SetLogOption(channel, pOption)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pOption A pointer to an object of the LogChannelOptions class that contains the log options. \n",
        "Remarks": "This function sets the log options for a log channel. These options are applied each time a log operation is started by the specified channel.\n\nBefore this function is called for a log channel, the default log options are applied (these default log options can be obtained by calling GetLogOption before calling this function).\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Set the log options for a log channel."
    },
    {
        "No": 701,
        "FunctionPython": "def GetLogOption(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[out] pOption A pointer to an object of the LogChannelOptions class will contain the log options. \n",
        "Remarks": "This function gets the log options for a log channel. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the log options for a log channel. "
    },
    {
        "No": 702,
        "FunctionPython": "def SetLogFilePath(channel, pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetLogFilePath(unsigned int channel, LogFilePathA *pPath)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pPath A pointer to an object of the LogFilePathA class that contains the file path. \n",
        "Remarks": "This function sets the file path for a log channel. Log operations started by the specified channel will save the log file to this file path.\n\nThe directory specified in dirPath must exist. Otherwise, the log operation will generate a WriteFail error.\n\nThe file path is specified as a char string. To specify the file path as a wchar_t string, use the SetLogFilePath function.\n\nIf a log operation is started for a log channel before calling this function, the log file is saved to the default file path of \"C:\\wmx3_logfile.txt\". \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Set the file path for a log channel."
    },
    {
        "No": 703,
        "FunctionPython": "def GetLogFilePath(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetLogFilePath(unsigned int channel, LogFilePathA *pPath)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[out] pPath A pointer to an object of the LogFilePathA class that will contain the file path. \n",
        "Remarks": "This function gets the file path of a log channel. This is the file path that the log file will be saved to when a log operation is started by the log channel.\n\nThe file path is obtained as a char string. To obtain the file path as a wchar_t string, use the GetLogFilePath function. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the file path for a log channel."
    },
    {
        "No": 704,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetLogFilePath(unsigned int channel, LogFilePathW *pPath)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Set the file path for a log channel."
    },
    {
        "No": 705,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetLogFilePath(unsigned int channel, LogFilePathW *pPath)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Get the file path for a log channel."
    },
    {
        "No": 706,
        "FunctionPython": "def GetLogStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetLogStatus(unsigned int channel, LogStatus *pStatus)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[out] pStatus A pointer to a LogStatus that will contain the current status of the logging operation. \n",
        "Remarks": "This function obtains the status of the current logging operation. This function may be called after starting a logging operation using StartLog to observe the progress of the logging operation.\n\nThe samplesToCollect, samplesCollected, and samplesWritten values contain the same information as the millisecondsToCollect, millisecondsCollected, and millisecondsWritten values. The difference between these two groups of values is the unit.\n\nIf logging is stopped because of write failure, verify that the application calling the log function has permission to write to the specified file path of the log file.\n\nIf logging is stopped because of buffer overflow, reduce the number of axes to log data, reduce the number of types of data to log, increase the sampling period (reduce the sampling frequency), or improve the file write speed of the PC. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation."
    },
    {
        "No": 707,
        "FunctionPython": "def GetDetailLogStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetDetailLogStatus(unsigned int channel, DetailLogStatus *pStatus)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[out] pStatus A pointer to a DetailLogStatus that will contain the current status of the logging operation. \n",
        "Remarks": "This function obtains the detailed status of the current logging operation. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained. "
    },
    {
        "No": 708,
        "FunctionPython": "def SetLog(channel, pPath, milliseconds, samplePeriodInCycles, pAxisSelection, pOptions, mode)",
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, char *pPath, unsigned int milliseconds, unsigned int samplePeriodInCycles, AxisSelection *pAxisSelection, LogOptions *pOptions,unsigned int mode, unsigned int burstWriteLines=4, unsigned int scale=9)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] input A pointer to an object of a class that inherits the LogInput class. \n",
        "Remarks": "This function specifies which data to be collected by the logging operation.\n\nEach module that contains data that can be logged defines a class that inherits the LogInput class. For example, the CoreMotion module defines the CoreMotionLogInput class, which can be used to collect axis data such as position commands. The IO module defines the IoLogInput, which can be used to collect I/O data.\n\nData from multiple modules may be logged simultaneously. To do so, call this function multiple times, passing in a different LogInput object each time. For example, to collect the position command data of an axis and I/O data in a single log file, call this function passing an CoreMotionLogInput object, and then call this function again passing an IoLogInput object.\n\nIf the data to collect from a module has been specified already, calling this function again for the same module will overwrite the set of data to collect.\n\nThis function allocates memory each time it is called. If there is not enough contiguous memory in the real time operating system space, an error will be returned.\n\nThe memory allocated by this function is released when the log operation finishes. To start another log operation, this function must be called again.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 709,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetLog(unsigned int channel, wchar_t *pPath, unsigned int milliseconds, unsigned int samplePeriodInCycles, AxisSelection *pAxisSelection, LogOptions *pOptions,unsigned int mode, unsigned int burstWriteLines=4, unsigned int scale=9)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Specify data to be collected by the logging operation."
    },
    {
        "No": 710,
        "FunctionPython": "def SetIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetIOLog(unsigned int channel, IOAddress *pInputIOAddress, unsigned int inputSize, IOAddress *pOutputIOAddress, unsigned int outputSize)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pInputIOAddress An array of I/O input addresses. The size parameter must be specified. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] inputSize The number elements in the pInputIOAddress array. \n[in] pOutputIOAddress An array of I/O output addresses. The size parameter must be specified. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] outputSize The number of elements in the pOutputIOAddress array. \n",
        "Remarks": "This function can be called to specify the data log function to log I/O data when StartLog is called. I/O data can be logged alongside position/velocity data by calling both SetLog and SetIOLog. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 711,
        "FunctionPython": "def SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetIOLogFormat(unsigned int channel, IOLogFormat *pInputIOLogFormat, unsigned int inputIOFormatCount, IOLogFormat *pOutputIOLogFormat, unsigned int outputIOFormatCount)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pInputIOLogFormat A pointer to an array of IOLogFormat objects. Each IOLogFormat object defines a contiguous region of I/O input addresses to log using a particular format. The byte member specifies the starting byte address of the region of I/O inputs to log. The bit member specifies the starting bit address of the region of I/O inputs to log. The ioFormatType member specifies the format of the logged data. \n[in] inputIOFormatCount The number of elements in the inputIOLogFormat array. \n[in] pOutputIOLogFormat A pointer to an array of IOLogFormat objects. Each IOLogFormat object defines a contiguous region of I/O output addresses to log using a particular format. The byte member specifies the starting byte address of the region of I/O outputs to log. The bit member specifies the starting bit address of the region of I/O outputs to log. The ioFormatType member specifies the format of the logged data. \n[in] outputIOFormatCount The number of elements in the outputIOLogFormat array. \n",
        "Remarks": "This function is an alternate way to log I/O data. This function allows contiguous sequences of I/O to be logged under a single column, whereas the SetIOLog function logs each individual I/O bit under a separate column. This function is useful when logging I/O data for systems which contain entities that are represented by multiple I/O bits, such as analog I/O modules. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 712,
        "FunctionPython": "def SetMLog(channel, pMAddress, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMLog(unsigned int channel, MAddress *pMAddress, unsigned int size)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pMAddress An array of user memory addresses. The size parameter must be specified. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] size The number elements in the pMAddress array. \n",
        "Remarks": "This function can be called to specify the data log function to log user memory data when StartLog is called. User memory data can be logged alongside position/velocity data by calling both SetLog and SetMLog. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 713,
        "FunctionPython": "def SetMLogFormat(channel, pMLogFormat, mFormatCount)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMLogFormat(unsigned int channel, MLogFormat *pMLogFormat, unsigned int mFormatCount)",
        "Parameters": "[in] channel The channel of the log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxLogChannel constant. \n[in] pMLogFormat A pointer to an array of MLogFormat objects. Each MLogFormat object defines a contiguous region of user memory addresses to log using a particular format. The byte member specifies the starting byte address of the region of user memory to log. The bit member specifies the starting bit address of the region of user memory to log. The mFormatType member specifies the format of the logged data. \n[in] mFormatCount The number of elements in the pMLogFormat array. \n",
        "Remarks": "This function is an alternate way to log user memory data. This function allows contiguous sequences of user memory to be logged under a single column, whereas the SetMLog function logs each individual user memory bit under a separate column. This function is useful for logging a contiguous segment of user memory that represents a single entity. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 714,
        "FunctionPython": "def OpenMemoryLogBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenMemoryLogBuffer(unsigned int channel)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. ",
        "Remarks": "This function opens the memory log buffer. The memory log buffer must be opened before memory log operations can be performed.\n\nThe memory log buffer should be opened as early as possible if memory log operations will be used by the application, as this function can fail if the system does not have enough memory to open the log buffer.\n\nIf a function that requires the memory log buffer (SetMemoryIOLog, SetMemoryMLog, StartMemoryLog, StopMemoryLog, GetMemoryLogStatus) is called before the memory log buffer is opened, the function will attempt to open the memory log buffer automatically.\n\nOnce the memory log buffer has been opened, it does not need to be opened again unless the log buffer is closed with the CloseMemoryLogBuffer function or the engine is restarted. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Open the memory log buffer."
    },
    {
        "No": 715,
        "FunctionPython": "def CloseMemoryLogBuffer(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC CloseMemoryLogBuffer(unsigned int channel)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. ",
        "Remarks": "This function closes the memory log buffer that has been opened by the OpenMemoryLogBuffer function. This frees the memory that has been used for the memory log buffer. Once the memory log buffer is closed, memory log functions will be unavailable until the memory log buffer is reopened using the OpenMemoryLogBuffer function.\n\nIt is not neccessary to close the memory log buffer once it is opened. For most cases, the memory log buffer should be opened during initialization and kept open for the entire session.\n\nIt is not necessary to call this function before closing the WMX3 engine. All buffers that were open at the time that the WMX3 engine closes will be closed automatically. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Close the memory log buffer."
    },
    {
        "No": 716,
        "FunctionPython": "def SetMemoryLog(channel, pAxisSelection, pOption)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMemoryLog(unsigned int channel, AxisSelection *pAxisSelection, MemoryLogOptions *pOption)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. \n[in] input A pointer to an object of a class that inherits the LogInput class. \n",
        "Remarks": "This function specifies which data to be collected by the memory log operation.\n\nEach module that contains data that can be logged defines a class that inherits the LogInput class. For example, the CoreMotion module defines the CoreMotionLogInput class, which can be used to collect axis data such as position commands. The IO module defines the IoLogInput, which can be used to collect I/O data.\n\nData from multiple modules may be logged simultaneously. To do so, call this function multiple times, passing in a different LogInput object each time. For example, to collect the position command data of an axis and I/O data in a single log file, call this function passing an CoreMotionLogInput object, and then call this function again passing an IoLogInput object.\n\nIf the data to collect from a module has been specified already, calling this function again for the same module will overwrite the set of data to collect.\n\nThe collected data can be read out with GetMemoryLogData function.\n\nThis function allocates memory each time it is called. If there is not enough contiguous memory in the real time operating system space, an error will be returned.\n\nThe memory allocated by this function is not released until CloseMemoryLogBuffer function or ResetMemoryLog function is called or the WMX3 engine is closed. As an exception, the memory allocated by specifying LogApiLogInput as an argument to this function will not be freed by ResetMemoryLog function.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 717,
        "FunctionPython": "def SetMemoryIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMemoryIOLog(unsigned int channel, IOAddress *pInputIOAddress, unsigned int inputSize, IOAddress *pOutputIOAddress, unsigned int outputSize)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. \n[in] pInputIOAddress An array of I/O input addresses. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] inputSize The number elements in the pInputIOAddress array. \n[in] pOutputIOAddress An array of I/O output addresses. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] outputSize The number of elements in the pOutputIOAddress array. \n",
        "Remarks": "This function should be called before calling StartMemoryLog to specify regions of the I/O to log with the memory log function.\n\nThe total amount of I/O that will be logged cannot be greater than maxMemLogIoInputByteSize for inputs and maxMemLogIoOutputByteSize for outputs. Bytes count against this limit even if only one bit of the byte is actually logged.\n\nThe memory log buffer stores up to maxMemLogBufferSize cycles of data at one time. If the logged data is not read using GetMemoryLogData fast enough, log data will be overwritten starting from the oldest data (this can be observed by checking for skipped cycles in the cycleCounter or the overflowFlag value of the log data. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 718,
        "FunctionPython": "def SetMemoryMLog(channel, pMAddress, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMemoryMLog(unsigned int channel, MAddress *pMAddress, unsigned int size)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. \n[in] pMAddress An array of user memory addresses. Multiple contiguous bits can be specified by setting size to the number of bits. \n[in] size The number elements in the pMAddress array. \n",
        "Remarks": "This function should be called before calling StartMemoryLog to specify regions of the user memory to log with the memory log function.\n\nThe total amount of user memory that will be logged cannot be greater than maxMemLogMDataByteSize. Bytes count against this limit even if only one bit of the byte is actually logged.\n\nThe memory log buffer stores up to maxMemLogBufferSize cycles of data at one time. If the logged data is not read using GetMemoryLogData fast enough, log data will be overwritten starting from the oldest data (this can be observed by checking for skipped cycles in the cycleCounter or the overflowFlag value of the log data. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 719,
        "FunctionPython": "def StartMemoryLog(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StartMemoryLog(unsigned int channel)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant.",
        "Remarks": "Memory log settings must first be set using the SetMemoryLog API function.\n\nWhen this function is called, the data specified by functions such as SetMemoryLog will be recorded to a preallocated buffer every cycle. The recording continues until the StopMemoryLog function is called or an error is encountered.\n\nCall the GetMemoryLogStatus API function to obtain the status of the logging operation. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Start the memory log operation."
    },
    {
        "No": 720,
        "FunctionPython": "def StopMemoryLog(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC StopMemoryLog(unsigned int channel)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. ",
        "Remarks": "When this function is called, the engine will stop recording data to the memory log. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Stop the memory log operation. "
    },
    {
        "No": 721,
        "FunctionPython": "def GetMemoryLogStatus(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMemoryLogStatus(unsigned int channel, MemoryLogStatus *pStatus)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. \n[out] pStatus A pointer to a MemoryLogStatus that will contain the current status of the logging operation. \n",
        "Remarks": "This function obtains the status of the memory log. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the memory log operation."
    },
    {
        "No": 722,
        "FunctionPython": "def GetMemoryLogData(channel)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMemoryLogData(unsigned int channel, MemoryLogData *pData)",
        "Parameters": "[in] channel The channel of the memory log operation. Each channel operates independently from all other channels. The first channel is 0. The number of available channels is defined by the maxMemLogChannel constant. \n[out] pOutput A pointer to an object of a class that inherits the LogOutput class object that will contain the logged data. \n",
        "Remarks": "This function retrieves a maximum of maxLogOutputDataSize cycles of log data from memory log buffer each time it is called.\n\nOnly the data of the module specified in pOutput is retrieved. If SetMemoryLog is called multiple times to set multiple modules to the memory log, this function will discard the log data of the same cycle for modules other than the one specified in the argument pOutput. To retrieve log data of multiple modules at the same time, use the GetMemoryLogData function.\n\nThe memory log buffer stores up to maxMemLogBufferSize cycles of data at one time. If the logged data is not read using GetMemoryLogData fast enough, log data will be overwritten starting from the oldest data (this can be observed by checking for skipped cycles in the cycleCounter or the overflowFlag value of the log data.\n\nCalling this function and retrieving data from the buffer will clear the overflowFlag until the buffer overflows again. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 723,
        "FunctionPython": "def SetApiLog(pPath)",
        "FunctionC++": "WMX3APIFUNC SetApiLog(char *pPath, ApiLogOptions *pOptions=NULL, unsigned int buffSize=16777216)",
        "Parameters": "[in] pPath The absolute file path to save the API log file to. \n[in] pOptions An optional argument that specifies options for the API log. \n[in] buffSize An optional argument that specifies the size of the buffer memory to allocate for the API log, in units of bytes. If not specified, a buffer memory of the default size will be allocated. \n",
        "Remarks": "This function sets the parameters for the API log. This function must be called before calling the StartApiLog function.\n\nThe API log records API function call data to file. Information is extracted from the API log file with the GetApiLogData function. For additional information, see the link under \"See also\" below.\n\nThis function allocates memory each time it is called. If there is not enough contiguous memory in the real time operating system space, an error will be returned.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Set the parameters for the API log. "
    },
    {
        "No": 724,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetApiLog(wchar_t *pPath, ApiLogOptions *pOptions=NULL, unsigned int buffSize=16777216)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Set the parameters for the API log"
    },
    {
        "No": 725,
        "FunctionPython": "def StartApiLog()\u00a0",
        "FunctionC++": "WMX3APIFUNC StartApiLog()",
        "Parameters": NaN,
        "Remarks": "This function starts logging data to the API log file.\n\nThe SetApiLog function must be called before calling this function to set the API log parameters and allocate the buffer memory.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Start logging data to the API log. "
    },
    {
        "No": 726,
        "FunctionPython": "def StopApiLog()\u00a0",
        "FunctionC++": "WMX3APIFUNC StopApiLog()",
        "Parameters": NaN,
        "Remarks": "This function stops logging data to the API log file.\n\nLogging of data must first be started with the StartApiLog function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Stop logging data to the API log."
    },
    {
        "No": 727,
        "FunctionPython": "def GetApiLogStatus()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetApiLogStatus(ApiLogStatus *pStatus)",
        "Parameters": "[out] pStatus A pointer to an ApiLogStatus class object that will contain the current status of the API log. ",
        "Remarks": "This function gets the current status of the API log. This function can be called periodically to monitor the API log state. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the API log."
    },
    {
        "No": 728,
        "FunctionPython": "def OpenApiLogFile(pPath)\u00a0",
        "FunctionC++": "WMX3APIFUNC OpenApiLogFile(char *pPath, FILE **ppFile)",
        "Parameters": "[in] pPath The absolute or relative file path of the API log file to open. \n[out] ppFile A pointer to a FILE pointer that will return a pointer to a FILE object representing the opened file. \n",
        "Remarks": "This function opens an API log file that is created with the StartApiLog function. The StopApiLog function must first be called to close the file.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Open an API log file to extract information from the contents."
    },
    {
        "No": 729,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC OpenApiLogFile(wchar_t *pPath, FILE **ppFile)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "log Class",
        "Instruction": "Open an API log file to extract information from the contents."
    },
    {
        "No": 730,
        "FunctionPython": "def GetApiLogData(pFile, buffSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize)",
        "Parameters": "[in] pFile A pointer to a FILE object that represents the opened API log file. \n[in] pDataBuff A pointer to a char buffer that contains the extracted raw data. \n[in] buffSize The size of the buffer pointed by pDataBuff in units of bytes. \n[out] pApiLogInfo An optional argument that is a pointer to an ApiLogInfo class object that returns additional information regarding the API function call data. \n",
        "Remarks": "This function extracts the information of one API function call from the API log file opened with the OpenApiLogFile function. The raw data can be converted to a string message with the ApiLogToString function that is defined in the module that defines the called API function.\n\nFor additional information, see the link under \"See also\" below.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": NaN
    },
    {
        "No": 731,
        "FunctionPython": "def GetApiLogData_ApiLogInfo(pFile, buffSize)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize, ApiLogInfo *pApiLogInfo=NULL)",
        "Parameters": "[in] pFile A pointer to a FILE object that represents the opened API log file. \n[in] pDataBuff A pointer to a char buffer that contains the extracted raw data. \n[in] buffSize The size of the buffer pointed by pDataBuff in units of bytes. \n[out] pApiLogInfo An optional argument that is a pointer to an ApiLogInfo class object that returns additional information regarding the API function call data. \n",
        "Remarks": "This function extracts the information of one API function call from the API log file opened with the OpenApiLogFile function. The raw data can be converted to a string message with the ApiLogToString function that is defined in the module that defines the called API function.\n\nFor additional information, see the link under \"See also\" below.\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Extract the information of one API function call from the API log file."
    },
    {
        "No": 732,
        "FunctionPython": "def CloseApiLogFile(pFile)",
        "FunctionC++": "WMX3APIFUNC CloseApiLogFile(FILE *pFile)",
        "Parameters": "[in] pFile A pointer to a FILE object that represents the opened API log file. \n[in] pDataBuff A pointer to a char buffer that contains the extracted raw data. \n[in] buffSize The size of the buffer pointed by pDataBuff in units of bytes. \n[out] pApiLogInfo An optional argument that is a pointer to an ApiLogInfo class object that returns additional information regarding the API function call data. \n",
        "Remarks": "This function closes an API log file that has been opened with the OpenApiLogFile function. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "log Class",
        "Instruction": "Close an API log file."
    },
    {
        "No": 733,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 734,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 735,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 736,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 737,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 738,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 739,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 740,
        "FunctionPython": "def SetMBit(addr, bit, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBit(unsigned int addr, unsigned int bit, unsigned char data)",
        "Parameters": "[in] addr The byte address of the bit to set. \n[in] bit The bit address of the bit to set. \n[in] data The value to set the bit to.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of a user memory bit."
    },
    {
        "No": 741,
        "FunctionPython": "def SetMByte(addr, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMByte(unsigned int addr, unsigned char data)",
        "Parameters": "[in] addr The address of the byte to set. \n[in] data The value to set the byte to.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of a user memory byte."
    },
    {
        "No": 742,
        "FunctionPython": "def SetMBytes(addr, size, pData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBytes(unsigned int addr, unsigned int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to set. \n[in] pData A pointer to an unsigned char array that contains the values to set the bytes to. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "The maximum number of bytes that this function can write per function call is maxUserMemoryReadWriteBytes. If this size is exceeded, an error will be returned. To write a greater range of the user memory space, call this function multiple times.\n\nThis function does not set the specified data atomically. If the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of multiple user memory bytes. "
    },
    {
        "No": 743,
        "FunctionPython": "def SetMBits(pByte, pBit, pData, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBits(unsigned int *pAddr, unsigned int *pBit, unsigned char *pData, unsigned int count)",
        "Parameters": "[in] pAddr A pointer to an int array that contains the byte addresses of the user memory bits. The size of the array must be equal to the count parameter. \n[in] pBit A pointer to an int array that contains the bit addresses of the user memory bits. The size of the array must be equal to the count parameter. \n[in] pData A pointer to an unsigned char array that contains the values to set the bits to. The size of the array must be equal to the count parameter. \n[in] count The number of bits to set. \n",
        "Remarks": "This function is equivalent to calling the SetMBit function multiple times, but can be faster due to the reduced overhead. There is no limit to the number of bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first memory bit to set, pAddr[1], pBit[1], and pData[1] specify the second memory bit to set, and so on. The bits can be specified in any order.\n\nThe difference between the largest byte address and the smallest byte address specified to this function must be less than half of maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will be returned. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of multiple user memory bits. "
    },
    {
        "No": 744,
        "FunctionPython": "def SetMAnalogDataChar(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataChar(int addr, char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets one byte of the user memory address space to the specified char type analog data value. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 745,
        "FunctionPython": "def SetMAnalogDataUChar(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUChar(int addr, unsigned char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets one byte of the user memory address space to the specified unsigned char type analog data value. of the user memory. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 746,
        "FunctionPython": "def SetMAnalogDataShort(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataShort(int addr, short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets two bytes of the user memory address space to the specified short type analog data value. user memory.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 747,
        "FunctionPython": "def SetMAnalogDataUShort(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUShort(int addr, unsigned short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets two bytes of the user memory address space to the specified unsigned short type analog data value. of the user memory.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 748,
        "FunctionPython": "def SetMAnalogDataInt(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataInt(int addr, int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets four bytes of the user memory address space to the specified int type analog data value. user memory.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 749,
        "FunctionPython": "def SetMAnalogDataUInt(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUInt(int addr, unsigned int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the user memory data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets four bytes of the user memory address space to the specified unsigned int type analog data value. of the user memory.\n\nIf the address of the data set by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In this case, if the data is read by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 750,
        "FunctionPython": "def GetMBit(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMBit(unsigned int addr, unsigned int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of a user memory bit."
    },
    {
        "No": 751,
        "FunctionPython": "def GetMByte(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMByte(unsigned int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of a user memory byte."
    },
    {
        "No": 752,
        "FunctionPython": "def GetMBytes(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMBytes(unsigned int addr, unsigned int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "The maximum number of bytes that this function can read per function call is maxUserMemoryReadWriteBytes. If this size is exceeded, an error will be returned. To read a greater range of the user memory space, call this function multiple times.\n\nThis function does not read the specified data atomically. If the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of multiple user memory bytes."
    },
    {
        "No": 753,
        "FunctionPython": "def GetMAnalogDataChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataChar(unsigned int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the user memory address space and returns the data as a char type analog data value. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 754,
        "FunctionPython": "def GetMAnalogDataUChar(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUChar(unsigned int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the user memory address space and returns the data as an unsigned char type analog data value. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 755,
        "FunctionPython": "def GetMAnalogDataShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataShort(unsigned int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the user memory address space and returns the data as a short type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 756,
        "FunctionPython": "def GetMAnalogDataUShort(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUShort(unsigned int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the user memory address space and returns the data as an unsigned short type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 757,
        "FunctionPython": "def GetMAnalogDataInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataInt(unsigned int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the user memory address space and returns the data as an int type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 758,
        "FunctionPython": "def GetMAnalogDataUInt(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUInt(unsigned int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the user memory address space and returns the data as an unsigned int type analog data value.\n\nIf the address of the data read by this function crosses the boundary of a multiple of 64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. In this case, if the data is overwritten by another thread at the same time, partially updated data may be read. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 759,
        "FunctionPython": "def SetMBitEx(addr, bit, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBitEx(unsigned int addr, unsigned int bit, unsigned char data)",
        "Parameters": "[in] addr The byte address of the bit to set. \n[in] bit The bit address of the bit to set. \n[in] data The value to set the bit to. \n",
        "Remarks": "This function has a faster response time compared to SetMBit.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of a user memory bit."
    },
    {
        "No": 760,
        "FunctionPython": "def SetMByteEx(addr, data)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMByteEx(unsigned int addr, unsigned char data)",
        "Parameters": "[in] addr The address of the byte to set. \n[in] data The value to set the byte to. \n",
        "Remarks": "This function has a faster response time compared to SetMByte.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of a user memory byte."
    },
    {
        "No": 761,
        "FunctionPython": "def SetMBytesEx(addr, size, pData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBytesEx(unsigned int addr, unsigned int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to set. \n[in] pData A pointer to a unsigned char array that contains the values to set the bytes to. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function has a faster response time compared to SetMBytes.\n\nUnlike the SetMBytes function, the size of the written data can be greater than maxUserMemoryReadWriteBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of multiple user memory bytes. "
    },
    {
        "No": 762,
        "FunctionPython": "def SetMBitsEx(pByte, pBit, pData, count)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMBitsEx(unsigned int *pAddr, unsigned int *pBit, unsigned char *pData, unsigned int count)",
        "Parameters": "[in] pAddr A pointer to an int array that contains the byte addresses of the user memory bits. The size of the array must be equal to the count parameter. \n[in] pBit A pointer to an int array that contains the bit addresses of the user memory bits. The size of the array must be equal to the count parameter. \n[in] pData A pointer to an unsigned char array that contains the values to set the bits to. The size of the array must be equal to the count parameter. \n[in] count The number of bits to set. \n",
        "Remarks": "This function is equivalent to calling the SetMBit function multiple times, but can be faster due to the reduced overhead. There is no limit to the number of bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, and so on. The bits can be specified in any order.\n\nThis function has a faster response time compared to SetMBits.\n\nUnlike the SetMBits function, the difference between the largest byte address and the smallest byte address can be equal to or larger than half of maxUserMemoryReadWriteBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of multiple user memory bits. "
    },
    {
        "No": 763,
        "FunctionPython": "def SetMAnalogDataCharEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataCharEx(int addr, char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets one byte of the user memory address space to the specified char type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 764,
        "FunctionPython": "def SetMAnalogDataUCharEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUCharEx(int addr, unsigned char analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets one byte of the user memory address space to the specified unsigned char type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataUChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning one byte."
    },
    {
        "No": 765,
        "FunctionPython": "def SetMAnalogDataShortEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataShortEx(int addr, short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets two bytes of the user memory address space to the specified short type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 766,
        "FunctionPython": "def SetMAnalogDataUShortEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUShortEx(int addr, unsigned short analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets two bytes of the user memory address space to the specified unsigned short type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataUShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning two bytes."
    },
    {
        "No": 767,
        "FunctionPython": "def SetMAnalogDataIntEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataIntEx(int addr, int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets four bytes of the user memory address space to the specified int type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 768,
        "FunctionPython": "def SetMAnalogDataUIntEx(addr, analogData)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetMAnalogDataUIntEx(int addr, unsigned int analogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[in] analogData The value of the analog data to set the user memory bytes to. \n",
        "Remarks": "This function sets four bytes of the user memory address space to the specified unsigned int type analog data value.\n\nThis function has a faster response time compared to SetMAnalogDataUInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Set the value of user memory analog data spanning four bytes."
    },
    {
        "No": 769,
        "FunctionPython": "def GetMBitEx(addr, bit)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMBitEx(unsigned int addr, unsigned int bit, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the bit to get. \n[in] bit The bit address of the bit to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetMBit.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of a user memory bit."
    },
    {
        "No": 770,
        "FunctionPython": "def GetMByteEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMByteEx(unsigned int addr, unsigned char *pData)",
        "Parameters": "[in] addr The address of the byte to get. \n[out] pData A pointer to a unsigned char that will receive the data. \n",
        "Remarks": "This function has a faster response time compared to GetMByte.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of a user memory byte."
    },
    {
        "No": 771,
        "FunctionPython": "def GetMBytesEx(addr, size)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMBytesEx(unsigned int addr, unsigned int size, unsigned char *pData)",
        "Parameters": "[in] addr The byte address of the head byte. \n[in] size The number of bytes to get. \n[out] pData A pointer to a unsigned char array that will receive the data. The size of the array must be greater than or equal to the size parameter. \n",
        "Remarks": "This function has a faster response time compared to GetMBytes.\n\nUnlike the GetMBytes function, the size of the read data can be greater than maxUserMemoryReadWriteBytes.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of multiple user memory bytes. "
    },
    {
        "No": 772,
        "FunctionPython": "def GetMAnalogDataCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataCharEx(unsigned int addr, char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the user memory address space and returns the data as a char type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 773,
        "FunctionPython": "def GetMAnalogDataUCharEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUCharEx(unsigned int addr, unsigned char *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads one byte of the user memory address space and returns the data as an unsigned char type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataUChar.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning one byte."
    },
    {
        "No": 774,
        "FunctionPython": "def GetMAnalogDataShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataShortEx(unsigned int addr, short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads two bytes of the user memory address space and returns the data as a short type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 775,
        "FunctionPython": "def GetMAnalogDataUShortEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUShortEx(unsigned int addr, unsigned short *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "\n\nThis function reads two bytes of the user memory address space and returns the data as an unsigned short type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataUShort.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning two bytes."
    },
    {
        "No": 776,
        "FunctionPython": "def GetMAnalogDataIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataIntEx(unsigned int addr, int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the user memory address space and returns the data as an int type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 777,
        "FunctionPython": "def GetMAnalogDataUIntEx(addr)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetMAnalogDataUIntEx(unsigned int addr, unsigned int *pAnalogData)",
        "Parameters": "[in] addr The byte address of the first byte of the analog data. \n[out] pAnalogData A pointer to a char that will receive the data. \n",
        "Remarks": "This function reads four bytes of the user memory address space and returns the data as an unsigned int type analog data value.\n\nThis function has a faster response time compared to GetMAnalogDataUInt.\n\nBecause of the difference in the data flow channel, this function cannot be called from an ApiBuffer. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get the value of user memory analog data spanning four bytes."
    },
    {
        "No": 778,
        "FunctionPython": NaN,
        "FunctionC++": "void GetUserMemoryAddress(void **pptr)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "UserMemory Class\u00a0",
        "Instruction": "Get a pointer to the memory address of the user memory address space."
    },
    {
        "No": 779,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 780,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 781,
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)\u00a0",
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": "[in] pLogData A char array containing the raw data. \n[in] logDataSize The size of the pLogData char array. This size must be equal to or greater than the size of the raw data. \n[out] pString A char array that will contain the string representation of the raw data of the API log. \n[in] size The size of the pString char array in number of characters. \n",
        "Remarks": "This function converts the raw data for one API function call that was extracted from the API log with the GetApiLogData function.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "API log string\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 782,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 783,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 784,
        "FunctionPython": "def GetIMDllVersion()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetIMDllVersion(int *pVersion, int *pRevision)",
        "Parameters": "[out] pVersion The version number. \n[out] pRevision The revision number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the version of the IMDll. "
    },
    {
        "No": 785,
        "FunctionPython": "def PrintToFile(filePath, format)\u00a0",
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const char *filePath, const char *format,...)",
        "Parameters": "[in] filePath A char array that contains the file path of the file to append to as a null-terminated string. \n[in] format The char string to append. This argument can contain format specifiers followed by additional arguments in the same manner as the C/C++ printf() function. \n",
        "Remarks": "This function appends a formatted string to a file. If the file does not exist, a new file is created.\n\nThe char string after formatting must be 1024 characters or less. If the char string after formatting exceeds 1024 characters, the BufferTooSmall error is returned.\n\nThis function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 786,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const wchar_t *filePath, const wchar_t *format,...)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 787,
        "FunctionPython": "def PrintToFileIfExist(filePath, format)\u00a0",
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const char *filePath, const char *format,...)",
        "Parameters": "[in] filePath A char array that contains the file path of the file to append to as a null-terminated string. \n[in] format The char string to append. This argument can contain format specifiers followed by additional arguments in the same manner as the C/C++ printf() function. \n",
        "Remarks": "This function appends a formatted string to a file. If the file does not exist, an error is returned.\n\nThe char string after formatting must be 1024 characters or less. If the char string after formatting exceeds 1024 characters, the BufferTooSmall error is returned.\n\nThis function is static, and may be called without declaring an instance of this class or creating a device. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 788,
        "FunctionPython": NaN,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const wchar_t *filePath, const wchar_t *format,...)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 789,
        "FunctionPython": "def GetStdOutStr()\u00a0",
        "FunctionC++": "static WMX3APIFUNC GetStdOutStr(char *buff, int buffSize, unsigned char *isWideChar, int *strlen)",
        "Parameters": "[out] buff A buffer that outputs the character string stored in the message output buffer. \n[in] buffSize The size of the buffer that outputs the character string stored in the message output buffer. \n[out] isWideChar If 1, wide characters are stored in message output buffer. If 0, multibyte characters are stored in the message output buffer. \n[out] strlen Number of characters in the string that was obtained from the message output buffer. \n",
        "Remarks": "This function gets the string stored in the WMX3 engine message output buffer. By setting \"2\" to the StdOut key in Module.ini, the WMX3 engine message will be output to the message output buffer. If a value other than \"2\" is set in the StdOut key of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be acquired with this function. (For details, see the description of Module.ini in GeneralHelp.)\n\nWhen a string is obtained from the message output buffer using this function, the obtained string is deleted from the message output buffer. If the size of the specified output buffer is smaller than the size of the string stored in the message output buffer, the substring that can fit in the specified output buffer size is obtained.\n\nIf this function is used, resources are reserved in the WMX3 engine, and it is necessary to release the resources by calling the ReleaseStdOut function before the program ends. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "WMX3 engine message\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Get the character string stored in the WMX3 engine message output buffer. "
    },
    {
        "No": 790,
        "FunctionPython": "def GetStdOutDataSize()",
        "FunctionC++": "static WMX3APIFUNC GetStdOutDataSize()",
        "Parameters": NaN,
        "Remarks": "This function gets the size of the string stored in the WMX3 engine message output buffer. If this function is used, resources are reserved in the WMX3 engine, and it is necessary to release the resources by calling the ReleaseStdOut function before the program ends. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Get the size of the string stored in the WMX3 engine message output buffer. "
    },
    {
        "No": 791,
        "FunctionPython": "def ClearStdOut()",
        "FunctionC++": "static WMX3APIFUNC ClearStdOut()",
        "Parameters": NaN,
        "Remarks": "This function clears the string stored in the WMX3 engine message output buffer. If this function is used, resources are reserved in the WMX3 engine, and it is necessary to release the resources by calling the ReleaseStdOut function before the program ends. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Clear the string stored in the WMX3 engine message output buffer."
    },
    {
        "No": 792,
        "FunctionPython": "def ReleaseStdOut()",
        "FunctionC++": "static WMX3APIFUNC ReleaseStdOut()",
        "Parameters": NaN,
        "Remarks": "This function releases resources opened by the WMX3 engine when any of the following functions is called.\n\u2022GetStdOutStr \n\u2022GetStdOutDataSize \n\u2022ClearStdOut\n\nIf any of the above functions is called, this function must be called before the program ends to release resources. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Release resources related to the WMX3 engine message output buffer."
    },
    {
        "No": 793,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 794,
        "FunctionPython": "def StartEngine(path)",
        "FunctionC++": "WMX3APIFUNC StartEngine(const char *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": "[in] path The full path of the directory that contains the WMX3 engine (WMX3Engine.rtss). \n[in] waitTimeMilliseconds An optional argument that specifies the amount of time to wait for the engine to start before returning. If no value is specified or 0 is specified, this function will block until the engine process starts, but will return before the engine fully initializes. If another function is called before the engine is fully initialized, an error will be returned. The Engine State status obtained by GetStatus can be checked to see the engine has been initialized (this status will contain Idle while the engine has not fully initialized). If a nonzero value is specified, this function will wait until the engine starts or the specified amount of time elapses. If the engine has not started after waiting for the specified amount of time, the EngineNotStartedInSpecifiedTime error is returned. \n[in] core An optional argument that sets the CPU core to run the engine on. The specified core must be assigned to the RTX operating system. If the specified core does not exist or is not assigned to the RTX operating system, the default core will be used instead. This argument will have no effect if the engine is already running when this function is called. \n[in] affinityMask An optional argument that can be used to specify more than one CPU core to run the engine on. For example, to run the engine on CPU cores 0, 1, and 2, the affinity mask should be set to (1 << 0) | (1 << 1) | (1 << 2). The specified cores must be assigned to the RTX operating system. If both \"core\" and \"affinityMask\" are specified, the engine will run on all cores specified in either of these values. This argument will have no effect if the engine is already running when this function is called. \n",
        "Remarks": "This function can starts the WMX3 engine without creating a device. Typically, this function does not need to be called, as the engine is automatically started when the first device is created with the CreateDevice function.\n\nScenarios in which the user might use this function include the following:\n\u2022The architecture of the user application requires the engine to be started independently before creating any devices.\n\u2022The user has closed the engine using the StopEngine function while some devices remain open. In this case, calling this function will start the engine and cause the link to existing devices to be restored so that they may call API functions again.\n\nUnlike most API functions, this function can be called successfully without creating a device with CreateDevice.\n\nThis function is blocking, and may take several seconds or more before it returns a value. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Start the WMX3 engine without creating a device. "
    },
    {
        "No": 795,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC StartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Start the WMX3 engine without creating a device. "
    },
    {
        "No": 796,
        "FunctionPython": "def RestartEngine(path)",
        "FunctionC++": "WMX3APIFUNC RestartEngine(const char *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": "[in] path The full path of the directory that contains the WMX3 engine (WMX3Engine.rtss). \n[in] waitTimeMilliseconds An optional argument that specifies the amount of time to wait for the engine to start before returning. If no value is specified or 0 is specified, this function will block until the engine process starts, but will return before the engine fully initializes. If another function is called before the engine is fully initialized, an error will be returned. The Engine State status obtained by GetStatus can be checked to see the engine has been initialized (this status will contain Idle while the engine has not fully initialized). If a nonzero value is specified, this function will wait until the engine starts or the specified amount of time elapses. If the engine has not started after waiting for the specified amount of time, the EngineNotStartedInSpecifiedTime error is returned. \n[in] core An optional argument that sets the CPU core to run the engine on. The specified core must be assigned to the RTX operating system. If the specified core does not exist or is not assigned to the RTX operating system, the default core will be used instead. This argument will have no effect if the engine is already running when this function is called. \n[in] affinityMask An optional argument that can be used to specify more than one CPU core to run the engine on. For example, to run the engine on CPU cores 0, 1, and 2, the affinity mask should be set to (1 << 0) | (1 << 1) | (1 << 2). The specified cores must be assigned to the RTX operating system. If both \"core\" and \"affinityMask\" are specified, the engine will run on all cores specified in either of these values. This argument will have no effect if the engine is already running when this function is called. \n",
        "Remarks": "This function stops the currently running WMX3 engine and then restarts the WMX3 engine.\n\nThis function is equivalent to calling the StopEngine function, waiting until the engine has closed, and then calling the StartEngine function.\n\nWhen the engine is restarted, all data will be initialized as if the engine is started for the first time. This includes all parameter data, which will be reset to their default values, and all I/O and user memory data, which will be cleared. All dynamically allocated buffer memory will be released (see Function Calls related Memory Allocation).\n\nScenarios in which the user might use this function include the following:\n\u2022The user wants to change the loaded modules or other engine options without closing all devices. By calling this function, the engine can be restarted with different loaded modules or other engine options. Any existing devices will automatically reconnect with the engine after it is restarted. If a different version of the engine is started, the existing devices may not be able to reconnect with the engine, and unpredictable behavior may occur.\n\nUnlike most API functions, this function can be called successfully without creating a device with CreateDevice.\n\nThis function is blocking, and may take several seconds or more before it returns a value. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 797,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC RestartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 798,
        "FunctionPython": "def StopEngine()",
        "FunctionC++": "WMX3APIFUNC StopEngine(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "[in] waitTimeMilliseconds An optional argument that specifies the amount of time to wait for the engine to stop before returning. If no value is specified or 0 is specified, this function will block until a stop signal is sent to the engine process, but will return without checking if the engine process has stopped. If a nonzero value is specified, this function will wait until the engine process has stopped before returning. ",
        "Remarks": "This function stops the WMX3 engine, regardless of whether there were any open devices left. Typically, this function does not need to be called, as the engine is automatically stopped when the last device is closed with the CloseDevice function.\n\nWhen the engine is restarted with the StartEngine function, all data will be initialized as if the engine is started for the first time. This includes all parameter data, which will be reset to their default values, and all I/O and user memory data, which will be cleared. When the engine is stopped, all dynamically allocated buffer memory will be released (see Function Calls related Memory Allocation).\n\nScenarios in which the user might use this function include the following:\n\u2022The user wants to change the loaded modules or other engine options without closing all devices. By calling this function, waiting until the engine stops, and then starting the engine again with the StartEngine function, the loaded modules or other engine options can be changed. Any existing devices will automatically reconnect with the engine after it is restarted. If a different version of the engine is started, the existing devices may not be able to reconnect with the engine, and unpredictable behavior may occur.\n\nUnlike most API functions, this function can be called successfully without creating a device with CreateDevice.\n\nThis function is blocking, and may take several seconds or more before it returns a value. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine."
    },
    {
        "No": 799,
        "FunctionPython": "def CreateDevice(path)",
        "FunctionC++": "WMX3APIFUNC CreateDevice(const char *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": "[in] path The full path of the directory that contains the WMX3 engine (WMX3Engine.rtss). \n[in] type An optional argument that specifies the type of device to create. This determines the method by which the device executes API functions. Also see Device Types. \n[in] waitTimeMilliseconds An optional argument that specifies the amount of time to wait after the device is created to verify that the engine is in a normal state. If no value is specified or 0 is specified, this function will not verify whether the engine is a normal state. If a value greater than 0 is specified, this function will continue to block after the device is created to communicate with the engine and verify that the engine is in a normal state. This function returns when the engine is confirmed to be in a normal state or when the specified time elapses. If this function cannot verify that the engine is in a normal state after waiting for the specified time, it will return the SystemInitializationNotDone error. \n[in] core An optional argument that sets the CPU core to run the engine on. The specified core must be assigned to the RTX operating system. If the specified core does not exist or is not assigned to the RTX operating system, the default core will be used instead. This argument will have no effect if the engine is already running when this function is called. \n[in] affinityMask An optional argument that can be used to specify more than one CPU core to run the engine on. For example, to run the engine on CPU cores 0, 1, and 2, the affinity mask should be set to (1 << 0) | (1 << 1) | (1 << 2). The specified cores must be assigned to the RTX operating system. If both \"core\" and \"affinityMask\" are specified, the engine will run on all cores specified in either of these values. This argument will have no effect if the engine is already running when this function is called. \n",
        "Remarks": "Each WMX3Api object must call this function first to establish an interface with the WMX3 engine before calling any API function (with a few exceptions). After this function succeeds and returns None, other API functions can be called.\n\nA pointer to a WMX3Api object must be passed to the constructor of classes that contain the API functions of each module. Before calling any API functions contained in that class, the CreateDevice function must be called from the passed WMX3Api object. The CreateDevice function can be called before or after passing the WMX3Api object to the constructor.\n\nIf this function is not called, or if this function fails, all other API functions (with a few exceptions) will return the DeviceIsNull error.\n\nOnce a device is succesfully created for a WMX3Api object, it will not need to call this function again unless the device is closed with the CloseDevice function).\n\nEach thread in the user application must instantiate a separate WMX3Api object and call CreateDevice. If multiple threads call API functions using the same device, there may be a delay when calling API functions, and some API functions such as Wait will not operate correctly due to shared resources.\n\nIf the WMX3 engine process is not running when this function is called, the WMX3 engine process will be started.\n\nUp to maxDevices devices may exist at the same time, and may independently communicate with the WMX3 engine. Therefore, the user application may call WMX3 library API functions from up to maxDevices threads. Attempting to create more than maxDevices devices will cause this API function to return the ReachMaxChannelNumber error.\n\nThis function is blocking, and may take several seconds or more before it returns a value.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
    },
    {
        "No": 800,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC CreateDevice(const wchar_t *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
    },
    {
        "No": 801,
        "FunctionPython": "def CloseDevice()\u00a0",
        "FunctionC++": "WMX3APIFUNC CloseDevice()",
        "Parameters": "[in] exitNoDev If set to true, the engine will exit if the closed device is the last open device (excluding DeviceTypeExitWOCnt devices). If set to false, the engine will not exit even if the closed device is the last open device. This parameter will be set to true if not specified. ",
        "Remarks": "This function closes the device used to interface with the WMX3 engine that has been created with the CreateDevice function. Each object of the WMX3Api class that has successfully created a device must call the CloseDevice function before the user application exits or the object is deleted.\n\nThe WMX3 engine automatically exits when all devices have been closed with this function. If any devices are not closed when the user application exits, the WMX3 engine will remain running. (The engine will close if the Watchdog timer runs out.)\n\nThis function is blocking. When this function is called, execution will return to the calling thread only after the device is closed, or when the time out period elapses.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Close a device."
    },
    {
        "No": 802,
        "FunctionPython": "def GetDeviceID()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetDeviceID(int *id)",
        "Parameters": "[out] id A pointer to an int that will contain the ID number of the device. ",
        "Remarks": "This function returns the device ID number of the device.\n\nAll running devices will have unique device ID numbers.\n\nDevice ID numbers of devices that have been closed with CloseDevice are freed, and may be assigned to devices later created by CreateDevice. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the device ID number of the device."
    },
    {
        "No": 803,
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)\u00a0",
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "Parameters": "[in] quit A flag signifying whether to automatically stop the engine when the last device is closed. If set to TRUE, the engine will automatically stop. If set to FALSE, the engine will not automatically stop. \n",
        "Remarks": "This function configures the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out.\n\nBy default, the engine is configured to automatically quit when the last device is closed by a watchdog time out.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionPython": "def SetWatchdog(watchdog)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "Parameters": "[in] watchdog The watchdog time out period, in milliseconds. \n",
        "Remarks": "This function sets the watchdog time out period for the device that called this function. Even if this function is not called, a watchdog timer is enabled for each device using the default time out period. If the process that created the device is closed without closing the device, the device will be automatically closed after the watchdog time out period elapses.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
    },
    {
        "No": 805,
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "Parameters": "[in] watchdog The watchdog time out period, in milliseconds. \n[in] deviceId The device ID of the device. \n",
        "Remarks": "This function sets the watchdog time out period for the device with the specified ID.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionPython": "def GetWatchDog()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "Parameters": "[out] watchdog The watchdog time out period set for this device, in milliseconds. If this value is 0, the device has no watchdog. \n[out] watchdogCount An optional argument that will retrieve the current watchdog count for this device. This is the number of milliseconds that have elapsed since the watchdog thread last reported that the device is operating normally. \n",
        "Remarks": "This function obtains the current watchdog time out period and watchdog count of the device that called this function. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
    },
    {
        "No": 807,
        "FunctionPython": "def ResetWatchdogTimer()\u00a0",
        "FunctionC++": "WMX3APIFUNC ResetWatchdogTimer()",
        "Parameters": NaN,
        "Remarks": "This function resets the watchdog count value of the device that called this function so that it is considered to be alive until the watchdog time out period elapses again. Normally, this function does not need to be called, as the watchdog thread that is automatically started when a device is created will periodically reset the watchdog count. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Reset the watchdog count of a device."
    },
    {
        "No": 808,
        "FunctionPython": "def SetStatistic(enable)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetStatistic(bool enable)",
        "Parameters": "[in] enable Whether to enable device statistics collection. ",
        "Remarks": "This function configures a device to collect or not collect API execution statistics data.",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Configure a device to collect API execution statistics data."
    },
    {
        "No": 809,
        "FunctionPython": "def GetStatistic()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetStatistic(DeviceStatistics *statistics)",
        "Parameters": "[out] statistics A pointer to a DeviceStatistics object that will contain the collected statistics data. ",
        "Remarks": "This function obtains the currently collected API execution statistics data for a device. The device must be first configured to collect this data using the SetStatistic function.\n\nThis data is collected as API functions are executed through this device. The GetStatistic function can be used to read the collected data. See the DeviceStatistics class for additional information regarding the data that is collected.\n\nThis data is not collected for API functions that are not executed by API process threads. See Function Calls for Special Processing for a list of these functions.\n\nThis data is collected for API functions when they are appended to the API buffer but not when they are executed from the API buffer (see API Buffer).\n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Read the currently collected API execution statistics data."
    },
    {
        "No": 810,
        "FunctionPython": "def SetInterruptId(interrputId)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetInterruptId(unsigned int interruptId)",
        "Parameters": "[in] interruptId The interrupt to associate with the calling device. ",
        "Remarks": "This function sets the interrupt (cyclic handler) to associate with the calling device.\n\nAfter calling the CreateDevice function to create a device, that device can be associated to a particular interrupt by calling this function. A few functions are affected by the interrupt associated with the calling device. Other than these functions, the interrupt associated with the calling device has no effect on the operation of the device. See Functions Calls affected by Interrupts for additional information.\n\nA newly created device is by default associated with interrupt 0.\n\nThe interrupt ID must be at least 0 and less than maxInterrupts. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Set the interrupt (cyclic handler) associated with the calling device."
    },
    {
        "No": 811,
        "FunctionPython": "def GetInterruptId(interrputId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetInterruptId(unsigned int *interruptId)",
        "Parameters": "[out] interruptId A pointer to an unsigned int that will contain the interrupt associated with the calling device. ",
        "Remarks": "This function obtains the ID of the interrupt (cyclic handler) associated with the calling device. This interrupt is set using the SetInterruptId function. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Get the interrupt (cyclic handler) associated with the calling device."
    },
    {
        "No": 812,
        "FunctionPython": "def StartCommunication()",
        "FunctionC++": "WMX3APIFUNC StartCommunication(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "waitTimeMilliseconds The amount of time to wait for communication to be established before returning. If this argument is set to 0, or it is not specified, this function will send a signal to start communication but may return before communication is completely established. If this argument is set to a nonzero value, the function will block and not return until communication is established or the waitTimeMilliseconds time elapses. In this case, an error will be returned if waitTimeMilliseconds elapses before communication is established. If an error is returned this way, the signal to start communication will remain set and communication may still become established a few moments later. ",
        "Remarks": "This function must be called before performing any other functions that require communication with the servo network.\n\nTo check if communication with the servo network can be started, call the GetStatus API function and check the Engine State variable. If this value is equal to Idle, communication cannot be started yet and calling this function will have no effect. If this value is equal to Running, communication can be started with this function.\n\nEven if Engine State is equal to Running, some additional time is required to establish a link with the network. Calling this function at this time will cause it to return the StartCommunicationError. If this occurs, call this function after waiting for a few seconds.\n\nTo check if communication with the servo network has been successfully established, again call the GetStatus API function and check the Engine State variable. If Engine State is equal to Communicating, communication is working.\n\nThis function is blocking. When this function is called, execution will return only when a network communication request is initiated, or when the initiation of the network communication request times out. Note that the engine status will not immediately change to Communicating after the network communication request is initiated. Even after this function returns, it may be necessary to wait for several seconds before GetStatus returns the Communicating status. If a value is specified for the waitTimeMilliseconds parameter, this function will wait until the engine status changes to Communicating or the specified time out period elapses before returning.\n\nFunctions that require communication with the servo network will return errors unless they are executed after the Engine State becomes Communicating. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Start communication with the servo network."
    },
    {
        "No": 813,
        "FunctionPython": "def StopCommunication()",
        "FunctionC++": "WMX3APIFUNC StopCommunication(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "waitTimeMilliseconds The amount of time to wait for communication to be stopped before returning. If this argument is set to 0, or it is not specified, this function will send a signal to stop communication but may return before communication is completely stopped. If this argument is set to a nonzero value, the function will block and not return until communication is stopped or the waitTimeMilliseconds time elapses. In this case, an error will be returned if waitTimeMilliseconds elapses before communication is stopped. If an error is returned this way, the signal to stop communication will remain set and communication may still become established a few moments later. ",
        "Remarks": "This function can be called after establishing communication with the servo network using the StartCommunication function. This function will end communication with the servo network. To check if communication with the servo network has been successfully stopped, call the GetStatus API function and check the Engine State variable. If the Engine State is no longer Communicating, communication has been stopped (the Engine State will normally be Running at this point).\n\nNote that the Engine State will not immediately change to Running immediately after this function is called. Even after this function returns, it may be necessary to wait for several seconds before GetStatus returns the Running engine status. If a value is specified for the waitTimeMilliseconds parameter, this function will wait until the engine status changes to Running or the specified time out period elapses before returning.\n\nNo function that requires communication with the servo network may be executed after communication is stopped. StartCommunication may be called again to reestablish communication with the servo network. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Stop communication with the servo network."
    },
    {
        "No": 814,
        "FunctionPython": "def GetModulesInfo()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetModulesInfo(ModulesInfoA *modules)",
        "Parameters": "[out] modules A pointer to a ModulesInfoA object that will contain the information of the modules that are loaded by the engine. ",
        "Remarks": "This function obtains the information of the modules that are loaded by the engine. The engine can execute API functions in a module library only if the corresponding module has been loaded. See ModulesInfoA for additional information regarding the module data that can be obtained. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of the modules that are loaded by the engine."
    },
    {
        "No": 815,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetModulesInfo(ModulesInfoW *modules)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of the modules that are loaded by the engine."
    },
    {
        "No": 816,
        "FunctionPython": "def GetModuleInfo(moduleId)\u00a0",
        "FunctionC++": "WMX3APIFUNC GetModuleInfo(int moduleId, ModuleInfoA *module)",
        "Parameters": "[out] moduleId The unique id number of the module to check. \n[out] module A pointer to a ModuleInfoA object that will contain the information of the specified module, if it is loaded by the engine. \n",
        "Remarks": "This function obtains the information of a single module that is loaded by the engine.\n\nIf the module with the specified moduleId is not loaded, a ModuleIsNotLoaded error is returned. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of a single module that is loaded by the engine."
    },
    {
        "No": 817,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetModuleInfo(int moduleId, ModuleInfoW *module)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of a single module that is loaded by the engine."
    },
    {
        "No": 818,
        "FunctionPython": "def GetEngineStatus()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetEngineStatus(EngineStatus *status)",
        "Parameters": "[out] status A pointer to a EngineStatus object that will contain the engine status. ",
        "Remarks": "This funtion obtains the status of the engine.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain the status of the engine."
    },
    {
        "No": 819,
        "FunctionPython": "def GetAllDevices()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetAllDevices(DevicesInfoA *devices)",
        "Parameters": "[out] devices A pointer to a DevicesInfoA object that will contain the information of all existing devices. ",
        "Remarks": "This function obtains the information of all existing devices. This includes the number of currently existing devices and the ID and name of each device.\n\nThis function can be used to verify that all other devices have closed. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of all existing devices."
    },
    {
        "No": 820,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetAllDevices(DevicesInfoW *devices)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Obtain information of all existing devices."
    },
    {
        "No": 821,
        "FunctionPython": "def SetDeviceName(name)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const char *name)",
        "Parameters": "[in] name A char array that contains the name of the device as a null-terminated string. The array must not be longer than maxDeviceName characters, or else the name will be truncated. ",
        "Remarks": "This function sets the name of the device calling this function. The device name has no effect on the operation of the device, except that it makes the device easier to identify when using functions such as GetAllDevices. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 822,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const wchar_t *name)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 823,
        "FunctionPython": "def GetDeviceName()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetDeviceName(char *nameBuf, unsigned int bufSize)",
        "Parameters": "[out] nameBuf A char array that will contain the name of the device as a null-terminated string. The array must have space to store at least maxDeviceName characters. \n[in] bufSize The size of the char array passed to the nameBuf argument. \n",
        "Remarks": "This function gets the name of the device calling this function. The name of the device can be set using the SetDeviceName function.\n\nThe default name of a device before calling the SetDeviceName function is blank. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 824,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(wchar_t *nameBuf, unsigned int bufSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 825,
        "FunctionPython": "def SetDeviceWaitEvent(errCode)",
        "FunctionC++": "WMX3APIFUNC SetDeviceWaitEvent(int errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 826,
        "FunctionPython": "def ResetDeviceWaitEvent()",
        "FunctionC++": "WMX3APIFUNC ResetDeviceWaitEvent()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 827,
        "FunctionPython": "def WaitForDeviceWaitEvent(waitTime, errCode)",
        "FunctionC++": "WMX3APIFUNC WaitForDeviceWaitEvent(unsigned int waitTime, int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Reserved."
    },
    {
        "No": 828,
        "FunctionPython": "def SetModuleSuspend(suspend)\u00a0",
        "FunctionC++": "WMX3APIFUNC SetModuleSuspend(ModuleSuspend *suspend)",
        "Parameters": "[in] suspend A pointer to a ModuleSuspend object that contains the suspend setting for each platform module. ",
        "Remarks": "This function configures the engine to suspend loading specific platform modules when communication is started.\n\nPlatform modules for which the suspend setting is set to 1 are not loaded.\n\nPlatform modules for which the suspend setting is set to 0 are loaded.\n\nOne use of this function is to dynamically switch between loading the simulator module and non-simulator platform modules without stopping the engine or modifying configuration files.\n\nThe following modules may be suspended by this function:\n\u2022SimuPlatform \n\u2022EcPlatform \n\u2022RtexPlatform \n\u2022MIIIPlatform\n\nPlatform modules that are disabled in the configuration file will not be loaded, regardless of its suspend setting.\n\nThe applied suspend settings take effect the next time communication is started. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 829,
        "FunctionPython": "def GetModuleSuspend()\u00a0",
        "FunctionC++": "WMX3APIFUNC GetModuleSuspend(ModuleSuspend *suspend)",
        "Parameters": "[out] suspend A pointer to a ModuleSuspend object that will contain the suspend setting for each platform module. ",
        "Remarks": "This function reads the suspend setting of each platform module.\n\nSuspend settings are checked by the engine whenever communication is started. Platform modules for which the suspend setting is 1 will not be loaded. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 830,
        "FunctionPython": "def AbortModuleSuspend()\u00a0",
        "FunctionC++": "WMX3APIFUNC AbortModuleSuspend()",
        "Parameters": NaN,
        "Remarks": "This function clears all suspend settings that have been set by SetModuleSuspend.\n\nAll platform modules that are enabled in the configuration file will be loaded by the engine the next time communication is started. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Clear all settings of whether to suspend loading specific platform modules when starting communication. "
    },
    {
        "No": 831,
        "FunctionPython": "def SleepAtEngine(microSecond)\u00a0",
        "FunctionC++": "WMX3APIFUNC SleepAtEngine(unsigned long microSecond)",
        "Parameters": "[in] microSecond The timeout interval (in microseconds) for which execution is paused. Up to (2^32-1) microseconds can be specified. ",
        "Remarks": "This function suspends execution of the current thread until the specified timeout interval elapses.\n\nThe timeout interval must be set to a value greater than or equal to the minimum timer period of the system on which the engine is running.\n\nIf the specified timeout interval is below the minimum timer period, no error is returned and the thread pauses execution for at least the minimum timer period.\n\nEven if the timeout interval is greater than or equal to the minimum timer period, the thread may pause for a minimum of several tens of microseconds. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Pauses execution of the current thread until the specified timeout interval elapses."
    },
    {
        "No": 832,
        "FunctionPython": "def PrintToServerConsole(format)\u00a0",
        "FunctionC++": "WMX3APIFUNC PrintToServerConsole(const char *format,...)",
        "Parameters": "[in] format The char string to print. This argument can contain format specifiers followed by additional arguments in the same manner as the C/C++ printf() function. ",
        "Remarks": "This function signals the engine to print a formatted string to the Rtx Server Console. The Rtx Server Console is a component of the RTX operating system that displays messages to the user in Windows space. \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Print a message to the Console Screen."
    },
    {
        "No": 833,
        "FunctionPython": NaN,
        "FunctionC++": "WMX3APIFUNC PrintToServerConsole(const wchar_t *format,...)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "WMX3Api Class",
        "Instruction": "Print a message to the Console Screen."
    },
    {
        "No": 834,
        "FunctionPython": "def RecordWindowsUpdates()\u00a0",
        "FunctionC++": "WMX3APIFUNC RecordWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "[in] waitTimeMilliseconds An optional parameter that is used to specify the maximum amount of time that this function can block before returning. If this parameter is not specified, there is no limit to the amount of time that this function can block. ",
        "Remarks": "This function records to file a list of Windows Updates that are currently installed to the system.\n\nThis function can be used in conjunction with the CompareWindowsUpdates function to detect changes to the Windows Updates that are installed to the system.\n\nThe file that is created by this function is stored in the C:\\ProgramData\\SoftServo\\WMX3 directory with the file name InstalledWindowsUpdates.dat.\n\nThis function will overwrite the existing file if there is any.\n\nThis function can execute without a device (this function can be called before calling CreateDevice). \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Record a list of installed Windows Updates to file. "
    },
    {
        "No": 835,
        "FunctionPython": "def RecordWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC RecordWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "[in] waitTimeMilliseconds An optional parameter that is used to specify the maximum amount of time that this function can block before returning. If this parameter is not specified, there is no limit to the amount of time that this function can block. ",
        "Remarks": "\n\nThis function records to file a list of Windows Updates that are currently installed to the system.\n\nThis function can be used in conjunction with the CompareWindowsUpdates function to detect changes to the Windows Updates that are installed to the system.\n\nThe file that is created by this function is stored in the C:\\ProgramData\\SoftServo\\WMX3 directory with the file name InstalledWindowsUpdates.dat.\n\nThis function will overwrite the existing file if there is any.\n\nThis function can execute without a device (this function can be called before calling CreateDevice). \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Record a list of installed Windows Updates to file. "
    },
    {
        "No": 836,
        "FunctionPython": "def CompareWindowsUpdates()\u00a0",
        "FunctionC++": "WMX3APIFUNC CompareWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "[in] waitTimeMilliseconds An optional parameter that is used to specify the maximum amount of time that this function can block before returning. If this parameter is not specified, there is no limit to the amount of time that this function can block. ",
        "Remarks": "This function compares the file generated by the RecordWindowsUpdates function against the Windows Updates that are currently installed to the system.\n\nThis function returns the UpdatesListUninitialized error code if the file is not found.\n\nThis function returns the UpdatesListDoesNotMatchInstalledUpdates error code if the file is found, but its contents do not match the Windows Updates that are currently installed to the system. This can occur if a new Windows Update has been installed or an existing Windows Update has been uninstalled since the time that the RecordWindowsUpdates function was last called.\n\nThis function can execute without a device (this function can be called before calling CreateDevice).\n\nOne way to use this function is as follows:\n1.Call this function immediately before calling CreateDevice. Calling this function will not start the real time operating system.\n2.If this function returns the UpdatesListDoesNotMatchInstalledUpdates error, display a warning message to the user.\n3.If the user confirms that the installed Windows Updates are compatible with the real time operating system, call CreateDevice as usual to start the WMX3 engine.\n4.After the WMX3 engine starts, RecordWindowsUpdates should be called to update the file containing the list of installed Windows Updates. This way, the warning message will be displayed again only if there is another change in the installed Windows Updates.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file. "
    },
    {
        "No": 837,
        "FunctionPython": "def CompareWindowsUpdates(waitTimeMilliseconds)\u00a0",
        "FunctionC++": "WMX3APIFUNC CompareWindowsUpdates(unsigned int waitTimeMilliseconds=0)",
        "Parameters": "[in] waitTimeMilliseconds An optional parameter that is used to specify the maximum amount of time that this function can block before returning. If this parameter is not specified, there is no limit to the amount of time that this function can block. ",
        "Remarks": "This function compares the file generated by the RecordWindowsUpdates function against the Windows Updates that are currently installed to the system.\n\nThis function returns the UpdatesListUninitialized error code if the file is not found.\n\nThis function returns the UpdatesListDoesNotMatchInstalledUpdates error code if the file is found, but its contents do not match the Windows Updates that are currently installed to the system. This can occur if a new Windows Update has been installed or an existing Windows Update has been uninstalled since the time that the RecordWindowsUpdates function was last called.\n\nThis function can execute without a device (this function can be called before calling CreateDevice).\n\nOne way to use this function is as follows:\n1.Call this function immediately before calling CreateDevice. Calling this function will not start the real time operating system.\n2.If this function returns the UpdatesListDoesNotMatchInstalledUpdates error, display a warning message to the user.\n3.If the user confirms that the installed Windows Updates are compatible with the real time operating system, call CreateDevice as usual to start the WMX3 engine.\n4.After the WMX3 engine starts, RecordWindowsUpdates should be called to update the file containing the list of installed Windows Updates. This way, the warning message will be displayed again only if there is another change in the installed Windows Updates.\n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "WMX3Api Class",
        "Instruction": "Compare the list of currently installed Windows Updates to the list recorded to file. "
    },
    {
        "No": 838,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static ECAPIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the AdvancedMotionErrorCode enum or the ErrorCode enum in the WMX3Api.h header. All errors returned by functions in class AdvancedMotion will be defined in one of these enums. Errors returned by functions in other classes may not be defined in one of these enums, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the AdvancedMotion class or creating a device. \n",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 839,
        "FunctionPython": NaN,
        "FunctionC++": "static ECAPIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 840,
        "FunctionPython": NaN,
        "FunctionC++": "static ECAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 841,
        "FunctionPython": NaN,
        "FunctionC++": "static ECAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 842,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static ECAPIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is used to retrieve the version information of the library used to compile the application. This function is static, and may be called without declaring an instance of the Ecat class or creating a device. The function GetVersion is used to retrieve the version information of the loaded EcPlatform.rtdll, which could be different from the library. The version of the EcPlatform.rtdll is determined by the rtdll file that is loaded by WMX3Engine. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 843,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 844,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "ECAPIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 845,
        "FunctionPython": "def ScanNetwork()\u00a0",
        "FunctionC++": "ECAPIFUNC ScanNetwork()",
        "Parameters": NaN,
        "Remarks": "The scan result updates the master information obtained by function GetMasterInfo. ",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Scan the network topology."
    },
    {
        "No": 846,
        "FunctionPython": "def ChangeSlaveState(slaveId, state)\u00a0",
        "FunctionC++": "ECAPIFUNC ChangeSlaveState(int slaveId, EcStateMachine::T state, int *errorCode)",
        "Parameters": "[in] slaveId ID of the slave whose state will be changed.  \n[in] state The state to change the specified slave to.  \n[out] errorCode AL status code when slave state change failed.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Change the specified slave state."
    },
    {
        "No": 847,
        "FunctionPython": "def StartHotconnect()\u00a0",
        "FunctionC++": "ECAPIFUNC StartHotconnect()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Start hot connect. "
    },
    {
        "No": 848,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ResetRefClockInfo()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Reset the reference clock information."
    },
    {
        "No": 849,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ResetTransmitStatisticsInfo()",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Reset the transmission statistics information. "
    },
    {
        "No": 850,
        "FunctionPython": "def GetMasterInfo()\u00a0",
        "FunctionC++": "ECAPIFUNC GetMasterInfo(EcMasterInfo *master)",
        "Parameters": "[out] master A pointer to a EcMasterInfo class that will be filled in with the current master information.  ",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Read the current master information from the engine."
    },
    {
        "No": 851,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int slaveId, char *path, unsigned char oneshot=1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 852,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int slaveId, wchar_t *path, unsigned char oneshot=1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 853,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int slaveId, int regAddr, int len, unsigned char *data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address. "
    },
    {
        "No": 854,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterRead(int slaveId, int regAddr, int len, unsigned char *buff)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 855,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int slaveId, int regAddr, int len, unsigned char *data, EcRegisterWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address. "
    },
    {
        "No": 856,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterRead(int slaveId, int regAddr, int len, EcRegisterReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 857,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int regAddr, int len, unsigned char *data, unsigned short *wkc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 858,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int regAddr, int len, unsigned char *buff, unsigned short *wkc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 859,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int regAddr, int len, unsigned char *data, EcRegisterBroadcastWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 860,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int regAddr, int len, EcRegisterBroadcastReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 861,
        "FunctionPython": "def SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)",
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": "[in] slaveId ID of the slave to which SDO data will be downloaded.  \n[in] index SDO index.  \n[in] subindex SDO subindex.  \n[in] sdoDataSize SDO data size.  \n[in] sdoData SDO data.  \n[out] errCode A pointer to an int type to which an SDO abort code from the slave will be filled in if there is any.  \n[in] waitTime An error will be returned if the SDO download process is not finished within the specified wait time.  \n",
        "Remarks": "This function will download SDO by expedited type in which SDO size just can be 1, 2 and 4 byte. ",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 862,
        "FunctionPython": "def SdoUpload(slaveId, index, subindex, sdoBuffSize)",
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": "[in] slaveId ID of the slave from which SDO data will be uploaded.  \n[in] index SDO index.  \n[in] subindex SDO subindex.  \n[in] sdoBuffSize Size of sdoBuff which is used to obtain the uploaded SDO data.  \n[out] sdoBuff A pointer to an array to which the uploaded SDO data will be filled in.  \n[out] actualSize A pointer to an unsigned int type to which the actual uploaded SDO data size will be filled in.  \n[out] errCode A pointer to an int type to which an SDO abort code from the slave will be filled in if there is any.  \n[in] waitTime An error will be returned if the SDO upload process is not finished within the specified wait time.  \n",
        "Remarks": "This function will upload SDO by expedited type in which SDO size just can be 1, 2 and 4 byte. \n",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO. "
    },
    {
        "No": 863,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 864,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 865,
        "FunctionPython": "def SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)",
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "Parameters": "[in] slaveId ID of the slave to which SDO data will be downloaded.  \n[in] index SDO index.  \n[in] subindex SDO subindex.  \n[in] sdoType SDO download type.  \n[in] sdoDataSize SDO data size.  \n[in] sdoData SDO data.  \n[out] errCode A pointer to an int type to which an SDO abort code from the slave will be filled in if there is any.  \n[in] waitTime An error will be returned if the SDO download process is not finished within the specified wait time.  \n[in] complete Enable the complete access.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 866,
        "FunctionPython": "def SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)",
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "Parameters": "[in] slaveId ID of the slave from which SDO data will be uploaded.  \n[in] index SDO index.  \n[in] subindex SDO subindex.  \n[in] sdoType SDO upload type.  \n[in] sdoBuffSize Size of sdoBuff which is used to obtain the uploaded SDO data.  \n[out] sdoBuff A pointer to an array to which the uploaded SDO data will be filled in.  \n[out] actualSize A pointer to an unsigned int type to which the actual uploaded SDO data size will be filled in.  \n[out] errCode A pointer to an int type to which an SDO abort code from the slave will be filled in if there is any.  \n[in] waitTime An error will be returned if the SDO upload process is not finished within the specified wait time.  \n[in] complete Enable the complete access.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 867,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 868,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int slaveId, int index, int subindex, EcSdoType::T sdoType, EcSdoUploadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 869,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int slaveId, EcObjectDescriptionListType::T type, EcSlaveSdoInfoObjectDescriptionList *list)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 870,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int slaveId, int index, EcSlaveSdoInfoEntryDescriptionList *list)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index."
    },
    {
        "No": 871,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int slaveId, EcObjectDescriptionListType::T type, EcSdoInfoGetODListCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave. "
    },
    {
        "No": 872,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int slaveId, int index, EcSdoInfoGetEDListCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index."
    },
    {
        "No": 873,
        "FunctionPython": "def TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)",
        "FunctionC++": "ECAPIFUNC TxPdoWrite(int slaveId, int index, int subindex, int pdoDataSize, unsigned char *pdoData, unsigned int mask=0)",
        "Parameters": "[in] slaveId ID of the slave to which the Tx PDO data will be written.  \n[in] index PDO index.  \n[in] subindex PDO subindex.  \n[in] pdoDataSize PDO size.  \n[in] pdoData A pointer to the PDO data array.  \n[in] mask Mask to decide which bits of pdoData will be written. All bits will be written if zero.  \n",
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's Tx PDO. "
    },
    {
        "No": 874,
        "FunctionPython": "def ClearTxPdoWrite(slaveId, index, subindex)\u00a0",
        "FunctionC++": "ECAPIFUNC ClearTxPdoWrite(int slaveId, int index, int subindex)",
        "Parameters": "[in] slaveId ID of the slave to which the Tx PDO data will be written.  \n[in] index PDO index.  \n[in] subindex PDO subindex.  \n",
        "Remarks": "If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an error. \n The value to be written is the logical conjunction of pdoData and mask. However, the masks 0x00000000 and 0xFFFFFFFFFF have the same meaning. \n This function returns an error if a specific PDO Index is given in the argument index, if AllowPdoReadWrite:1 is defined in the eni file but the mask is 0x00000000. This is a safety mechanism to prevent overwriting of variables used in motion control. \n To enable PDO write in all cases, in addition to defining AllowPdoReadWrite:1 in the eni file, provide 0xFFFFFFFFFF for the argument mask. \n The specific PDO Indexes are as follows:\n\nPDO Index \uff1a                          Name\uff1a \n\n           0x6040                           ControlWord  \n           0x6060                           ModesOfOperation  \n           0x607A                           TargetPosition  \n           0x60FF                           TargetVelocity  \n           0x6071                           TargetTorque  \n           0x6072                           MaxTorque  \n           0x60E0                           PositiveTorqueLimit  \n           0x60E1                           NegativeTorqueLimit  \n           0x60B8                           TouchProbeFunction  \n           0x607F                           MaxProfileVelocity  \n           0x60B1                           VelocityOffset  \n           0x60B2                           TorqueOffset  \n           0x6080                           MaxMotorSpeed  \n           0x60FE                           DigitalOutput  \n",
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Clear the data which is being written to Tx PDO."
    },
    {
        "No": 875,
        "FunctionPython": "def PdoRead(slaveId, index, subindex, pdoBuffSize)\u00a0",
        "FunctionC++": "ECAPIFUNC PdoRead(int slaveId, int index, int subindex, int pdoBuffSize, unsigned char *pdoBuff, unsigned int *actualSize)",
        "Parameters": "[in] slaveId ID of the slave from which Rx or Tx PDO data will be read.  \n[in] index PDO index.  \n[in] subindex PDO subindex.  \n[in] pdoBuffSize Size of pdoBuff.  \n[out] pdoBuff A pointer to an array to which the read PDO data will be filled in.  \n[out] actualSize A pointer to an unsigned int type to which the actually read PDO size will be filled in.  \n",
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's Rx or Tx PDO."
    },
    {
        "No": 876,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBit(int slaveId, int byte, int bit, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output bit for a slave. "
    },
    {
        "No": 877,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputByte(int slaveId, int byte, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output byte for a slave."
    },
    {
        "No": 878,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bytes for a slave."
    },
    {
        "No": 879,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBits(int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bits for a slave. "
    },
    {
        "No": 880,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input bit from a slave."
    },
    {
        "No": 881,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputByte(int slaveId, int byte, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input byte from a slave."
    },
    {
        "No": 882,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple input bytes from a slave."
    },
    {
        "No": 883,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputBit(int slaveId, int byte, int bit, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output bit from a slave."
    },
    {
        "No": 884,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputByte(int slaveId, int byte, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output byte from a slave. "
    },
    {
        "No": 885,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple output bytes from a slave."
    },
    {
        "No": 886,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 887,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 888,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 889,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 890,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave"
    },
    {
        "No": 891,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 892,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 893,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 894,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIWrite(int slaveId, int siiAddr, int len, unsigned char *data, bool checkSum=false)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 895,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIRead(int slaveId, int siiAddr, int len, unsigned char *buff)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM."
    },
    {
        "No": 896,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIWrite(int slaveId, int siiAddr, int len, unsigned char *data, EcSIIWriteCallBack callbackFunc, unsigned int waitTime, bool checkSum=false)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 897,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIRead(int slaveId, int siiAddr, int len, EcSIIReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM. "
    },
    {
        "No": 898,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoERead(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 899,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave."
    },
    {
        "No": 900,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave."
    },
    {
        "No": 901,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave."
    },
    {
        "No": 902,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoERead(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 903,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave. "
    },
    {
        "No": 904,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteControlCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave. "
    },
    {
        "No": 905,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned int writeLength, unsigned char *writeAoEData, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 906,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoERead(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int buffSize, unsigned char *readSoEBuffer, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 907,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoEWrite(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave."
    },
    {
        "No": 908,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoERead(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, EcSoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 909,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoEWrite(int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, EcSoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave. "
    },
    {
        "No": 910,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoERead(int slaveId, unsigned int *vendorId, unsigned short *vendorType, unsigned int buffSize, unsigned char *readVoEBuffer, unsigned int *actualSize, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave."
    },
    {
        "No": 911,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoEWrite(int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 912,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoERead(int slaveId, EcVoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave. "
    },
    {
        "No": 913,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoEWrite(int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, EcVoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 914,
        "FunctionPython": "def SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "FunctionC++": "ECAPIFUNC SetAxisMode(int slaveId, int axisIndex, EcOperationMode::T mode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Set the axis operation mode for a specified slave axis."
    },
    {
        "No": 915,
        "FunctionPython": "def StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "FunctionC++": "ECAPIFUNC StartAxisPP(int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Start the PP operation for a specified slave axis. "
    },
    {
        "No": 916,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis."
    },
    {
        "No": 917,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 918,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 919,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 920,
        "FunctionPython": "def StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "FunctionC++": "ECAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 921,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 922,
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)\u00a0",
        "FunctionC++": "ECAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 923,
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
    },
    {
        "No": 924,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int slaveId, int chnlId, wchar_t *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 925,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int slaveId, int chnlId, char *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 926,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC CloseSerialChannel(int slaveId, int chnlId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Close an opened serial channel for the specified slave."
    },
    {
        "No": 927,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ScanNetwork(int masterId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Scan the network topology."
    },
    {
        "No": 928,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ChangeSlaveState(int masterId, int slaveId, EcStateMachine::T state, int *errorCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Change the specified slave state."
    },
    {
        "No": 929,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartHotconnect(int masterId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start hot connect."
    },
    {
        "No": 930,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ResetRefClockInfo(int masterId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Reset the reference clock information."
    },
    {
        "No": 931,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ResetTransmitStatisticsInfo(int masterId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Reset the transmission statistics information."
    },
    {
        "No": 932,
        "FunctionPython": "def SetUpdatePeriod(period)\u00a0",
        "FunctionC++": "ECAPIFUNC SetUpdatePeriod(unsigned int period)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "Ecat Class",
        "Instruction": "Set the master info update period."
    },
    {
        "No": 933,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetMasterInfo(int masterId, EcMasterInfo *master)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read the specified master information from the engine."
    },
    {
        "No": 934,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetMasterInfoList(EcMasterInfoList *masters)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read the master list information from the engine."
    },
    {
        "No": 935,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int masterId, int slaveId, char *path, unsigned char oneshot=1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 936,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetEniFilePath(int masterId, int slaveId, wchar_t *path, unsigned char oneshot=1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the ENI file path for specified slave."
    },
    {
        "No": 937,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int masterId, int slaveId, int regAddr, int len, unsigned char *data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address."
    },
    {
        "No": 938,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterRead(int masterId, int slaveId, int regAddr, int len, unsigned char *buff)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 939,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterWrite(int masterId, int slaveId, int regAddr, int len, unsigned char *data, EcRegisterWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave register address."
    },
    {
        "No": 940,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterRead(int masterId, int slaveId, int regAddr, int len, EcRegisterReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave register address."
    },
    {
        "No": 941,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int masterId, int regAddr, int len, unsigned char *data, unsigned short *wkc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 942,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int masterId, int regAddr, int len, unsigned char *buff, unsigned short *wkc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses. "
    },
    {
        "No": 943,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastWrite(int masterId, int regAddr, int len, unsigned char *data, EcRegisterBroadcastWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast write data to all slaves' register addresses."
    },
    {
        "No": 944,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC RegisterBroadcastRead(int masterId, int regAddr, int len, EcRegisterBroadcastReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Broadcast read data from all slaves' register addresses."
    },
    {
        "No": 945,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 946,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO. "
    },
    {
        "No": 947,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO. "
    },
    {
        "No": 948,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoUploadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 949,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 950,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 951,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoDownload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, int sdoDataSize, unsigned char *sdoData, EcSdoDownloadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Download data to the specified slave SDO."
    },
    {
        "No": 952,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SdoUpload(int masterId, int slaveId, int index, int subindex, EcSdoType::T sdoType, EcSdoUploadCallBack callbackFunc, unsigned int waitTime, BOOL complete=FALSE)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Upload data from the specified slave SDO."
    },
    {
        "No": 953,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int masterId, int slaveId, EcObjectDescriptionListType::T type, EcSlaveSdoInfoObjectDescriptionList *list)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 954,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int masterId, int slaveId, int index, EcSlaveSdoInfoEntryDescriptionList *list)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index. "
    },
    {
        "No": 955,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoODList(int masterId, int slaveId, EcObjectDescriptionListType::T type, EcSdoInfoGetODListCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the OD list from the specified slave."
    },
    {
        "No": 956,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetSdoInfoEDList(int masterId, int slaveId, int index, EcSdoInfoGetEDListCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the ED list from the specified slave's OD index. "
    },
    {
        "No": 957,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC TxPdoWrite(int masterId, int slaveId, int index, int subindex, int pdoDataSize, unsigned char *pdoData, unsigned int mask=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's Tx PDO. "
    },
    {
        "No": 958,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC ClearTxPdoWrite(int masterId, int slaveId, int index, int subindex)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Clear the data which is being written to Tx PDO."
    },
    {
        "No": 959,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC PdoRead(int masterId, int slaveId, int index, int subindex, int pdoBuffSize, unsigned char *pdoBuff, unsigned int *actualSize)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's Rx or Tx PDO."
    },
    {
        "No": 960,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBit(int masterId, int slaveId, int byte, int bit, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output bit for a slave. "
    },
    {
        "No": 961,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputByte(int masterId, int slaveId, int byte, unsigned char data)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of an output byte for a slave."
    },
    {
        "No": 962,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bytes for a slave."
    },
    {
        "No": 963,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetOutputBits(int masterId, int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the value of multiple output bits for a slave. "
    },
    {
        "No": 964,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputBit(int masterId, int slaveId, int byte, int bit, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input bit from a slave."
    },
    {
        "No": 965,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputByte(int masterId, int slaveId, int byte, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an input byte from a slave."
    },
    {
        "No": 966,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetInputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple input bytes from a slave."
    },
    {
        "No": 967,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputBit(int masterId, int slaveId, int byte, int bit, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output bit from a slave."
    },
    {
        "No": 968,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputByte(int masterId, int slaveId, int byte, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of an output byte from a slave. "
    },
    {
        "No": 969,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC GetOutputBytes(int masterId, int slaveId, int byte, int size, unsigned char *pData)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Get the value of multiple output bytes from a slave."
    },
    {
        "No": 970,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 971,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 972,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 973,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, wchar_t *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 974,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave"
    },
    {
        "No": 975,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, unsigned int *errCode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave."
    },
    {
        "No": 976,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoERead(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read FoE data from the specified slave."
    },
    {
        "No": 977,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC FoEWrite(int masterId, int slaveId, char *filePath, char *fileName, unsigned int password, EcFoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write FoE data to the specified slave. "
    },
    {
        "No": 978,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIWrite(int masterId, int slaveId, int siiAddr, int len, unsigned char *data, bool checkSum=false)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 979,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIRead(int masterId, int slaveId, int siiAddr, int len, unsigned char *buff)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM."
    },
    {
        "No": 980,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIWrite(int masterId, int slaveId, int siiAddr, int len, unsigned char *data, EcSIIWriteCallBack callbackFunc, unsigned int waitTime, bool checkSum=false)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write data to the specified slave's SII EEPROM."
    },
    {
        "No": 981,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SIIRead(int masterId, int slaveId, int siiAddr, int len, EcSIIReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read data from the specified slave's SII EEPROM. "
    },
    {
        "No": 982,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoERead(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 983,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave."
    },
    {
        "No": 984,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave."
    },
    {
        "No": 985,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned char *readAoEBuff, unsigned int writeLength, unsigned char *writeAoEData, unsigned int *errCode, unsigned int waitTime=0, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 986,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoERead(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read AoE data from the specified slave."
    },
    {
        "No": 987,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE data to the specified slave. "
    },
    {
        "No": 988,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEWriteControl(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned short aoeState, unsigned short deviceState, unsigned int writeLength, unsigned char *writeAoEData, EcAoEWriteControlCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write AoE control data to the specified slave. "
    },
    {
        "No": 989,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC AoEReadWrite(int masterId, int slaveId, unsigned char targetNetId[6], unsigned short targetPort, unsigned int indexGroup, unsigned int indexOffset, unsigned int readLength, unsigned int writeLength, unsigned char *writeAoEData, EcAoEReadCallBack callbackFunc, unsigned int waitTime, EcAoESender *sender=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read and write AoE data from and to the specified slave. "
    },
    {
        "No": 990,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoERead(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int buffSize, unsigned char *readSoEBuffer, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 991,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoEWrite(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, unsigned int *errCode, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave."
    },
    {
        "No": 992,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoERead(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, EcSoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read SoE data from the specified slave. "
    },
    {
        "No": 993,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SoEWrite(int masterId, int slaveId, unsigned char driveNo, unsigned char elementFlags, unsigned short idn, unsigned int dataSize, unsigned char *writeSoEData, EcSoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write SoE data to the specified slave. "
    },
    {
        "No": 994,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoERead(int masterId, int slaveId, unsigned int *vendorId, unsigned short *vendorType, unsigned int buffSize, unsigned char *readVoEBuffer, unsigned int *actualSize, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave."
    },
    {
        "No": 995,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoEWrite(int masterId, int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, unsigned int waitTime=0)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 996,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoERead(int masterId, int slaveId, EcVoEReadCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Read VoE data from the specified slave. "
    },
    {
        "No": 997,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC VoEWrite(int masterId, int slaveId, unsigned int vendorId, unsigned short vendorType, unsigned int dataSize, unsigned char *writeVoEData, EcVoEWriteCallBack callbackFunc, unsigned int waitTime)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Write VoE data to the specified slave."
    },
    {
        "No": 998,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC SetAxisMode(int masterId, int slaveId, int axisIndex, EcOperationMode::T mode)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Set the axis operation mode for a specified slave axis."
    },
    {
        "No": 999,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisPP(int masterId, int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the PP operation for a specified slave axis. "
    },
    {
        "No": 1000,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int masterId, int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 1001,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisPV(int masterId, int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the PV operation for a specified slave axis. "
    },
    {
        "No": 1002,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int masterId, int slaveId, int axisIndex, short targetTrq)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 1003,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisTQ(int masterId, int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the TQ operation for a specified slave axis. "
    },
    {
        "No": 1004,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int masterId, int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 1005,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC StartAxisHM(int masterId, int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Start the HM operation for a specified slave axis."
    },
    {
        "No": 1006,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC HaltAxis(int masterId, int slaveId, int axisIndex)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 1007,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int masterId, int slaveId, int axisIndex)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
    },
    {
        "No": 1008,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int masterId, int slaveId, int chnlId, wchar_t *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 1009,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC OpenSerialChannel(int masterId, int slaveId, int chnlId, char *comName, DCB *dcb, COMMTIMEOUTS *timeout, unsigned int *error=NULL)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Open a serial channel to the specified slave."
    },
    {
        "No": 1010,
        "FunctionPython": NaN,
        "FunctionC++": "ECAPIFUNC CloseSerialChannel(int masterId, int slaveId, int chnlId)",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "Ecat Class",
        "Instruction": "Close an opened serial channel for the specified slave."
    },
    {
        "No": 1011,
        "FunctionPython": "def ErrorToString(errCode)\u00a0",
        "FunctionC++": "static CCLINKAPIFUNC ErrorToString(int errCode, char *pString, unsigned int size)\u00a0",
        "Parameters": "[in] errCode The error code to get the string representation of. \n[in] pString A char array that will contain the string representation of the error. \n[in] size The size of the char array in number of characters. \n",
        "Remarks": "This function returns a string representation of the specified error code. The error code must be defined in the ErrorCode enum. All errors returned by functions in class WMX3Api will be defined in this enum. Errors returned by functions in other classes may not be defined in this enum, and when such errors are passed to this function, an ErrorCodeNotDefined error will be returned and pString will contain the string representation of this error.\n\nIf pString is too small to contain the entire string representation of the error code, pString will be set to an empty string. An array size of 256 characters will be enough to hold all string representations.\n\nThis function is static, and may be called without declaring an instance of the WMX3Api class or creating a device.",
        "ReturnType": "string\u00a0",
        "ReturnValue": "error string\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 1012,
        "FunctionPython": NaN,
        "FunctionC++": "static CCLINKAPIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 1013,
        "FunctionPython": NaN,
        "FunctionC++": "static CCLINKAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 1014,
        "FunctionPython": NaN,
        "FunctionC++": "static CCLINKAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get a string representation of the raw data of an API log."
    },
    {
        "No": 1015,
        "FunctionPython": "def GetLibVersion()\u00a0",
        "FunctionC++": "static CCLINKAPIFUNC GetLibVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)\u00a0",
        "Parameters": "[out] pMajorVersion The major version number. \n[out] pMinorVersion The minor version number. \n[out] pRevisionVersion The revision version number. \n[out] pFixVersion The fix version number. \n",
        "Remarks": "This function is static, and may be called without declaring an instance of this class or creating a device.",
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the version of the module library."
    },
    {
        "No": 1016,
        "FunctionPython": "def IsDeviceValid()\u00a0",
        "FunctionC++": "bool IsDeviceValid()\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "bool\u00a0",
        "ReturnValue": "Whether the device is alive\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 1017,
        "FunctionPython": "def GetVersion()\u00a0",
        "FunctionC++": "CCLINKAPIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the version of the module rtdll in CCLINK."
    },
    {
        "No": 1018,
        "FunctionPython": "def ResetSlaveError(slaveId)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC ResetSlaveError(int slaveId)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Reset the salve's error in CCLINK."
    },
    {
        "No": 1019,
        "FunctionPython": "def SetUpdatePeriod(period)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC SetUpdatePeriod(unsigned int period)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the master info update period in CCLINK."
    },
    {
        "No": 1020,
        "FunctionPython": "def GetMasterInfo()\u00a0",
        "FunctionC++": "CCLINKAPIFUNC GetMasterInfo(CCLinkMasterInfo *master)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Read the current master information from the engine in CCLINK."
    },
    {
        "No": 1021,
        "FunctionPython": "def ScanNetwork()\u00a0",
        "FunctionC++": "CCLINKAPIFUNC ScanNetwork()\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Scan the network topology in CCLINK."
    },
    {
        "No": 1022,
        "FunctionPython": "def StartHotconnect()\u00a0",
        "FunctionC++": "CCLINKAPIFUNC StartHotconnect()\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start hot connect in CCLINK. "
    },
    {
        "No": 1023,
        "FunctionPython": "def ResetSyncStatisticsInfo()\u00a0",
        "FunctionC++": "CCLINKAPIFUNC ResetSyncStatisticsInfo()\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Reset the synchronization statistics information in CCLINK."
    },
    {
        "No": 1024,
        "FunctionPython": "def SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)",
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1025,
        "FunctionPython": "def SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)",
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1026,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, int sdoDataSize, unsigned char *sdoData, CCLinkSdoDownloadCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1027,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoUploadCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1028,
        "FunctionPython": "def SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)",
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoDataSize, unsigned char *sdoData, unsigned int *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1029,
        "FunctionPython": "def SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1030,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SdoDownload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoDataSize, unsigned char *sdoData, CCLinkSdoDownloadCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Download data to the specified slave SDO in CCLINK."
    },
    {
        "No": 1031,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, CCLinkSdoUploadCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
    },
    {
        "No": 1032,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBit(int slaveId, int byte, int bit, unsigned char data)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the value of an output bit for a slave in CCLINK. "
    },
    {
        "No": 1033,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SetOutputByte(int slaveId, int byte, unsigned char data)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the value of an output byte for a slave in CCLINK."
    },
    {
        "No": 1034,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the value of multiple output bytes for a slave in CCLINK."
    },
    {
        "No": 1035,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SetOutputBits(int slaveId, int *pByte, int *pBit, unsigned char *pData, int count)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the value of multiple output bits for a slave in CCLINK. "
    },
    {
        "No": 1036,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetInputBit(int slaveId, int byte, int bit, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of an input bit from a slave in CCLINK."
    },
    {
        "No": 1037,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetInputByte(int slaveId, int byte, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of an input byte from a slav in CCLINKe."
    },
    {
        "No": 1038,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetInputBytes(int slaveId, int byte, int size, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of multiple input bytes from a slave in CCLINK."
    },
    {
        "No": 1039,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetOutputBit(int slaveId, int byte, int bit, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of an output bit from a slave in CCLINK."
    },
    {
        "No": 1040,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetOutputByte(int slaveId, int byte, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of an output byte from a slave in CCLINK. "
    },
    {
        "No": 1041,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC GetOutputBytes(int slaveId, int byte, int size, unsigned char *pData)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Get the value of multiple output bytes from a slave in CCLINK."
    },
    {
        "No": 1042,
        "FunctionPython": "def SetAxisMode(slaveId, axisIndex, mode)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC SetAxisMode(int slaveId, int axisIndex, CCLinkOperationMode::T mode)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Set the axis operation mode for a specified slave axis in CCLINK."
    },
    {
        "No": 1043,
        "FunctionPython": "def StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)",
        "FunctionC++": "CCLINKAPIFUNC StartAxisPP(int slaveId, int axisIndex, int targetPos, unsigned int profileVel, unsigned int profileAcc, unsigned int profileDec, char immediately=-1, char relative=-1)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the PP operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1044,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the PV operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1045,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC StartAxisPV(int slaveId, int axisIndex, int targetVel, unsigned int profileAcc, unsigned int profileDec, unsigned short maxTorque)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the PV operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1046,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the TQ operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1047,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC StartAxisTQ(int slaveId, int axisIndex, short targetTrq, unsigned int maxMotorSpeed)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the TQ operation for a specified slave axis in CCLINK. "
    },
    {
        "No": 1048,
        "FunctionPython": "def StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1049,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1050,
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC HaltAxis(int slaveId, int axisIndex)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Halt the specified slave axis in CCLINK."
    },
    {
        "No": 1051,
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)\u00a0",
        "FunctionC++": "CCLINKAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "int\u00a0",
        "ReturnValue": "error code\u00a0",
        "Class": "CCLink Class\u00a0",
        "Instruction": "Release the halt state for a specified slave axis in CCLINK."
    },
    {
        "No": 1052,
        "FunctionPython": "def SlmpSendBySlaveId(slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "FunctionC++": "CCLINKAPIFUNC SlmpSendBySlaveId(int slaveId, unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, int buffSize, unsigned char *buff, unsigned int *actualSize, unsigned short *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 1053,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendBySlaveId(int slaveId, unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, CCLinkSlmpSendBySlaveIdCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 1054,
        "FunctionPython": "def SlmpSendByMacIpAddr(macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize)",
        "FunctionC++": "CCLINKAPIFUNC SlmpSendByMacIpAddr(unsigned char macAddr[6], unsigned char ipAddr[4], unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, int buffSize, unsigned char *buff, unsigned int *actualSize, unsigned short *errCode, unsigned int waitTime=0)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": "tuple\u00a0",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class\u00a0",
        "Instruction": NaN
    },
    {
        "No": 1055,
        "FunctionPython": NaN,
        "FunctionC++": "CCLINKAPIFUNC SlmpSendByMacIpAddr(unsigned char macAddr[6], unsigned char ipAddr[4], unsigned short port, int dropNo, unsigned short command, unsigned short subCommand, int dataSize, unsigned char *data, CCLinkSlmpSendByMacIpAddrCallBack callbackFunc, unsigned int waitTime)\u00a0",
        "Parameters": NaN,
        "Remarks": NaN,
        "ReturnType": NaN,
        "ReturnValue": NaN,
        "Class": "CCLink Class\u00a0",
        "Instruction": NaN
    }
]