Processing Question 1:
1. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
1. Instruction: Get a string representation of the raw data of an API log.
A: ApiLogDataToString(pLogData, logDataSize)
B: ApiLogToString(pLogData, logDataSize)
C: GetPlannedVelOverrideStatus(channel)
D: Clear(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
1. Model's answer: B
1. Correct answer: B
1. Result: Correct



Processing Question 2:
2. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t
--------------------------------------------
Function C++ *pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion); 
Python def GetVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
Function C++ 
WMX3APIFUNC 
StartLog(unsigned int 
channel); 
Python def StartLog(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopLog(unsigned int 
channel); 
Python def StopLog(channel) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
ResetLog(unsigned int
-----------------------------------------------------------------------------------
2. Instruction: Get the version of the module library.
A: GetLibVersion()
B: GetLibraryVersion()
C: GetStatus(channel)
D: SetLogOption(channel, pOption)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
2. Model's answer: A
2. Correct answer: A
2. Result: Correct



Processing Question 3:
3. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
3. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid()
B: EndRecordBufferChannel()
C: OverridePos(pPosCommand)
D: IsValidDevice()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
3. Model's answer: A
3. Correct answer: A
3. Result: Correct



Processing Question 4:
4. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll.
-----------------------------------------------------------------------------------
4. Instruction: Get the version of the module rtdll.
A: FlowIf(condition)
B: FetchVersionInfo()
C: GetApiLogData_ApiLogInfo(pFile, buffSize)
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
4. Model's answer: D
4. Correct answer: D
4. Result: Correct



Processing Question 5:
5. Context:
 Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel 

Up to maxApiBufferChannel API buffer channels can independently store and execute 
API functions. 

After starting the WMX3 engine, buffer memory to store API function call data must be 
allocated to an API channel before that channel can be used. The CreateApiBuffer 
function allocates buffer memory to an API channel. This function should be called 
during the initialization of the application, as allocation of memory can fail. All memory 
that a API buffer channel uses will be pre-allocated with this function, and the API buffer 
channel will not dynamically request any additional memory. This guarantees that the 
memory usage of the API buffer channel will be determinsitic. For additional 
information, see Function Calls related Memory Allocation.
--------------------------------------------
},
    {
        "No": 7,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size)",
        "FunctionPython": "def CreateApiBuffer(channel, size)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer. This function must be called before the API buffer functions can be used."
    },
    {
        "No": 8,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel)",
        "FunctionPython": "def CreateApiBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer using the default memory size."
--------------------------------------------
The minimum size of the memory space is 262216 bytes. Specifying a smaller size 
will cause this function to return the RequestedBufferTooSmall error. 

The maximum size of the memory space is 2GB-1Byte (2147483647 bytes). 
Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

The created memory space can be closed using FreeApiBuffer. It is not necessary 
to call the FreeApiBuffer function when closing the engine, as any open API buffer 
memory spaces are automatically closed when the engine closes. 

See also 

API Buffer 

◆ 
CreateApiBuffer() [2/3] 



WMX3APIFU 
NC 
CreateApiBuf 
WMX3APIFU 
NC 
CreateApiBuf 
fer ( 
unsigned int channel ) 
Create a memory space for use with the API buffer using the default memory size. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆CreateApiBuffer() [1/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size 
) 
Create a memory space for use with the API buffer. This function must be called 
before the API buffer functions can be used. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 


between 0 and 
maxApiBufferChannel1. 


[in] 
size The size of the API 
buffer channel memory 
space in bytes. 

Remarks
-----------------------------------------------------------------------------------
5. Instruction: Create a memory space for use with the API buffer. This function must be called before the API buffer functions can be used.
A: CreateApiBuffer(channel, size)
B: FreeApiBuffer(channel)
C: FlowElse()
D: InitializeApiBuffer(channel_name, buffer_size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
5. Model's answer: A
5. Correct answer: A
5. Result: Correct



Processing Question 6:
6. Context:
 Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel 

Up to maxApiBufferChannel API buffer channels can independently store and execute 
API functions. 

After starting the WMX3 engine, buffer memory to store API function call data must be 
allocated to an API channel before that channel can be used. The CreateApiBuffer 
function allocates buffer memory to an API channel. This function should be called 
during the initialization of the application, as allocation of memory can fail. All memory 
that a API buffer channel uses will be pre-allocated with this function, and the API buffer 
channel will not dynamically request any additional memory. This guarantees that the 
memory usage of the API buffer channel will be determinsitic. For additional 
information, see Function Calls related Memory Allocation.
--------------------------------------------
Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

This function creates a memory space for use with the API buffer. See 
CreateApiBuffer for more information regarding the memory space of an API buffer 
channel. 

Compared to CreateApiBuffer, this function creates a memory space with size 
equal to maxDefaultApiBufferSize. 

◆CreateApiBuffer() [3/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size, 
SizeUnit::T sizeUnit 
) 
Create a memory space for use with the API buffer. The size of the memory space 
can be specified in one of several units. 

Parameters 


[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 
[in] 
size The size of the API 
buffer channel memory 
space. The units of the 
size is specified by the 
sizeUnit argument. 
[in] 
sizeUnit The units of the size 
argument. The available 
options are Byte, 
Kilobyte, and 
Megabyte.
--------------------------------------------
The amount of buffer memory space required to store the data of one API function 
depends on the function. A simple StartPos function might require less than 200 bytes, 
whereas the SetParam function that sets all parameters might require over 80KB. If 
there is insufficient space in the buffer, the CommandQueueIsFull error is returned. 
The amount of buffer space that is required by an API function can be approximated by 
the size of the function arguments. 

Opening a Channel Example 

The following code allocates 3MB of buffer memory for API buffer channel 0. 

wmxlib_ApiBuffer->CreateApiBuffer(0, 3, SizeUnit::Megabyte); 

 

Adding Functions to the API Buffer
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆CreateApiBuffer() [1/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size 
) 
Create a memory space for use with the API buffer. This function must be called 
before the API buffer functions can be used. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 


between 0 and 
maxApiBufferChannel1. 


[in] 
size The size of the API 
buffer channel memory 
space in bytes. 

Remarks
-----------------------------------------------------------------------------------
6. Instruction: Create a memory space for use with the API buffer using the default memory size.
A: GetOutputData(buff, buffSize, dataSize)
B: FreeSplineBuffer(channel)
C: ModifyApiBuffer(channel)
D: CreateApiBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
6. Model's answer: D
6. Correct answer: D
6. Result: Correct



Processing Question 7:
7. Context:
 Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

This function creates a memory space for use with the API buffer. See 
CreateApiBuffer for more information regarding the memory space of an API buffer 
channel. 

Compared to CreateApiBuffer, this function creates a memory space with size 
equal to maxDefaultApiBufferSize. 

◆CreateApiBuffer() [3/3]
WMX3APIFUNC 
CreateApiBuffer ( unsigned int channel, 
unsigned int size, 
SizeUnit::T sizeUnit 
) 
Create a memory space for use with the API buffer. The size of the memory space 
can be specified in one of several units. 

Parameters 


[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 
[in] 
size The size of the API 
buffer channel memory 
space. The units of the 
size is specified by the 
sizeUnit argument. 
[in] 
sizeUnit The units of the size 
argument. The available 
options are Byte, 
Kilobyte, and 
Megabyte.
--------------------------------------------
},
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
--------------------------------------------
},
    {
        "No": 9,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size, SizeUnit::T sizeUnit)",
        "FunctionPython": "def CreateApiBuffer(channel, size, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 10,
        "FunctionC++": "WMX3APIFUNC FreeApiBuffer(unsigned int channel)",
        "FunctionPython": "def FreeApiBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Close an API buffer memory space"
--------------------------------------------
Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel 

Up to maxApiBufferChannel API buffer channels can independently store and execute 
API functions. 

After starting the WMX3 engine, buffer memory to store API function call data must be 
allocated to an API channel before that channel can be used. The CreateApiBuffer 
function allocates buffer memory to an API channel. This function should be called 
during the initialization of the application, as allocation of memory can fail. All memory 
that a API buffer channel uses will be pre-allocated with this function, and the API buffer 
channel will not dynamically request any additional memory. This guarantees that the 
memory usage of the API buffer channel will be determinsitic. For additional 
information, see Function Calls related Memory Allocation.
-----------------------------------------------------------------------------------
7. Instruction: Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units.
A: Wait_AxisSel(pAxisSelection)
B: UpdateApiBufferParameters(endpoint, bufferSize, units)
C: CreateApiBuffer(channel, size, sizeUnit)
D: CreateApiBuffer(channel, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
7. Model's answer: C
7. Correct answer: C
7. Result: Correct



Processing Question 8:
8. Context:
 Remarks 

This function creates a memory space for use with the API buffer. See 
CreateApiBuffer for more information regarding the memory space of an API buffer 
channel. 

Compared to CreateApiBuffer, the size of the memory space can be specified in 
one of several units. The units of the memory space has no effect on the API buffer 
operation. The minimum size of the memory space is 262144 bytes (or the 
equivalent in kilobytes or megabytes). 

◆FreeApiBuffer() 

WMX3APIFU 
NC 
FreeApiBuffe 
WMX3APIFU 
NC 
FreeApiBuffe 
r ( 
unsigned int channel ) 
Close an API buffer memory space. 

Remarks 

This function closes an API buffer memory space created by CreateApiBuffer. API 
buffer memory spaces that remain open when the engine is closed will automatically 
be closed. An error will be returned if this function is called while the API buffer is 
executing.
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
--------------------------------------------
Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel 

Up to maxApiBufferChannel API buffer channels can independently store and execute 
API functions. 

After starting the WMX3 engine, buffer memory to store API function call data must be 
allocated to an API channel before that channel can be used. The CreateApiBuffer 
function allocates buffer memory to an API channel. This function should be called 
during the initialization of the application, as allocation of memory can fail. All memory 
that a API buffer channel uses will be pre-allocated with this function, and the API buffer 
channel will not dynamically request any additional memory. This guarantees that the 
memory usage of the API buffer channel will be determinsitic. For additional 
information, see Function Calls related Memory Allocation.
--------------------------------------------
},
    {
        "No": 9,
        "FunctionC++": "WMX3APIFUNC CreateApiBuffer(unsigned int channel, unsigned int size, SizeUnit::T sizeUnit)",
        "FunctionPython": "def CreateApiBuffer(channel, size, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Create a memory space for use with the API buffer. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 10,
        "FunctionC++": "WMX3APIFUNC FreeApiBuffer(unsigned int channel)",
        "FunctionPython": "def FreeApiBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Close an API buffer memory space"
-----------------------------------------------------------------------------------
8. Instruction: Close an API buffer memory space
A: FreeChannelBuffer(api)
B: FreeApiBuffer(channel)
C: CreateApiBuffer(channel)
D: CreateApiBuffer(channel, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
8. Model's answer: B
8. Correct answer: B
8. Result: Correct



Processing Question 9:
9. Context:
 ◆StartRecordBufferChannel() 
WMX3APIFU 
NC 
StartRecordB 
ufferChannel ( unsigned int channel ) 
Start recording APIs to the API buffer channel. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will cause the API to be stored in the API buffer 
instead of being executed immediately. The recorded API sequence can be 
executed using the Execute function. 


WMX3 APIs related to API buffer control will not be stored in the API buffer. These 

APIs include: 


CreateApiBuffer 
FreeApiBuffer 
StartRecordBufferChannel 
EndRecordBufferChannel 
GetRecordingBufferChannel 
Execute 
Halt 
Clear 
Rewind 
ApiBuffer::GetStatus 


Certain WMX3 APIs related to engine control or using a different data flow channel 
will not be stored in the API buffer while recording. These APIs include:
--------------------------------------------
The following code allocates 3MB of buffer memory for API buffer channel 0. 

wmxlib_ApiBuffer->CreateApiBuffer(0, 3, SizeUnit::Megabyte); 

 

Adding Functions to the API Buffer 

To add a function to the API buffer, call the StartRecordBufferChannel function 
passing in the channel of the API buffer. After this function succeeds, subsequent API 
calls from the device that called this function will be added to the API buffer instead of 
being executed. API calls from other devices (other WMX3Api objects that called the 
CreateDevice function) are not affected. Often, a device dedicated solely for adding 
functions to the API buffer should be created, as devices that are also used for other 
purposes may inadvertently add function data to the API buffer if they call API functions 
while recording.
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
--------------------------------------------
},
    {
        "No": 11,
        "FunctionC++": "WMX3APIFUNC StartRecordBufferChannel(unsigned int channel)",
        "FunctionPython": "def StartRecordBufferChannel(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": " Start recording APIs to the API buffer channel.  "
    },
    {
        "No": 12,
        "FunctionC++": "WMX3APIFUNC EndRecordBufferChannel()",
        "FunctionPython": "def EndRecordBufferChannel()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "End recording APIs to the API buffer channel."
-----------------------------------------------------------------------------------
9. Instruction: Start recording APIs to the API buffer channel.
A: StartChannelBufferRecording(channel)
B: Sleep(milliseconds)
C: StartRecordBufferChannel(channel)
D: CloseMemoryLogBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
9. Model's answer: C
9. Correct answer: C
9. Result: Correct



Processing Question 10:
10. Context:
 See also 

API Buffer 

◆EndRecordBufferChannel() 
WMX3APIFUNC 
EndRecordBuffe 
rChannel ( ) 
End recording APIs to the API buffer channel. 

Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will be executed normally. 

To resume recording APIs to the API buffer channel for this device, call the 
StartRecordBufferChannel function. 

If this function is called while not recording API functions to an API buffer channel, 
this function will return the NotRecording error. 

◆GetRecordingBufferChannel() 

WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
channel, 
unsigned char * enable 
) 
Get the currently recording API buffer channel, if any.
--------------------------------------------
If other threads are using the same device, API functions called by the other threads 
will also be appended to the API buffer instead of being executed. To prevent this, 
create a separate device that will be used to append API functions to the API buffer. 
A new device can be created using the CreateDevice function. 


To stop recording APIs to the API buffer channel for this device, call the 
EndRecordBufferChannel function. 

If this function is called while already recording API functions to the specified API 
buffer channel, this function will return the 
AlreadyRecordingForSpecifiedChannel error. If this function is called while 
recording API functions to a different API buffer channel, this function will change 
the recording channel to the specified channel. 

See also 

API Buffer 

◆EndRecordBufferChannel() 
WMX3APIFUNC 
EndRecordBuffe 
rChannel ( ) 
End recording APIs to the API buffer channel. 

Remarks
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
--------------------------------------------
},
    {
        "No": 11,
        "FunctionC++": "WMX3APIFUNC StartRecordBufferChannel(unsigned int channel)",
        "FunctionPython": "def StartRecordBufferChannel(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": " Start recording APIs to the API buffer channel.  "
    },
    {
        "No": 12,
        "FunctionC++": "WMX3APIFUNC EndRecordBufferChannel()",
        "FunctionPython": "def EndRecordBufferChannel()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "End recording APIs to the API buffer channel."
-----------------------------------------------------------------------------------
10. Instruction: End recording APIs to the API buffer channel.
A: Clear(channel)
B: EndRecordBufferChannel()
C: OpenMemoryLogBuffer(channel)
D: EndRecordBufferChannelV2()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
10. Model's answer: B
10. Correct answer: B
10. Result: Correct



Processing Question 11:
11. Context:
 See also 

API Buffer 

◆EndRecordBufferChannel() 
WMX3APIFUNC 
EndRecordBuffe 
rChannel ( ) 
End recording APIs to the API buffer channel. 

Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will be executed normally. 

To resume recording APIs to the API buffer channel for this device, call the 
StartRecordBufferChannel function. 

If this function is called while not recording API functions to an API buffer channel, 
this function will return the NotRecording error. 

◆GetRecordingBufferChannel() 

WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
channel, 
unsigned char * enable 
) 
Get the currently recording API buffer channel, if any.
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
--------------------------------------------
◆StartRecordBufferChannel() 
WMX3APIFU 
NC 
StartRecordB 
ufferChannel ( unsigned int channel ) 
Start recording APIs to the API buffer channel. 

Parameters 
[in] 
channel The API buffer channel. 
This value must be 
between 0 and 
maxApiBufferChannel1. 


Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will cause the API to be stored in the API buffer 
instead of being executed immediately. The recorded API sequence can be 
executed using the Execute function. 


WMX3 APIs related to API buffer control will not be stored in the API buffer. These 

APIs include: 


CreateApiBuffer 
FreeApiBuffer 
StartRecordBufferChannel 
EndRecordBufferChannel 
GetRecordingBufferChannel 
Execute 
Halt 
Clear 
Rewind 
ApiBuffer::GetStatus 


Certain WMX3 APIs related to engine control or using a different data flow channel 
will not be stored in the API buffer while recording. These APIs include:
--------------------------------------------
},
    {
        "No": 11,
        "FunctionC++": "WMX3APIFUNC StartRecordBufferChannel(unsigned int channel)",
        "FunctionPython": "def StartRecordBufferChannel(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": " Start recording APIs to the API buffer channel.  "
    },
    {
        "No": 12,
        "FunctionC++": "WMX3APIFUNC EndRecordBufferChannel()",
        "FunctionPython": "def EndRecordBufferChannel()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "End recording APIs to the API buffer channel."
-----------------------------------------------------------------------------------
11. Instruction: Get the currently recording API buffer channel, if any
A: OpenMemoryLogBuffer(channel)
B: EndRecordBufferChannel()
C: GetRecordingBufferChannel()
D: GetRecordingBufferChannel(int channelIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
11. Model's answer: C
11. Correct answer: C
11. Result: Correct



Processing Question 12:
12. Context:
 ◆Execute() 

WMX3APIFU WMX3APIFU 
NC Execute ( 
unsigned int channel ) 
Execute an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to execute. 

Remarks 

This function starts the execution an API buffer channel. APIs in the API buffer 
channel will be executed in the order that they were added to the buffer. Functions 
such as Wait can delay the execution of APIs, which may be useful if the API buffer 
contains several motions that must be executed one after the other after each 
motion completes. 

It is possible to dynamically add more APIs to the API buffer as it executes. As long 
as there is a steady flow of new APIs, the API buffer can continue executing 
indefinitely. As the memory used to store APIs in the API buffer is limited, 
dynamically adding API functions to the API buffer can cause older APIs that have 
already executed to be overwritten. If this occurs, the API buffer cannot be rewound 
with Rewind.
--------------------------------------------
Overview 

The API buffer can store most API function calls from the WMX3 library and execute 
them sequentially in a nearly deterministic manner. 

If API functions are called directly from a Windows application, there may be slight to 
moderate delays in the execution timing because Windows is not a real time operating 
system (these delays can be avoided by developing applications that run under the 
RTX operating system: Support for user application development running only on 
a real-time OS). By storing API function calls beforehand in the API buffer, these 
delays can be avoided and API functions executed sequentially at timings that are 
precise to the communication cycle. 

 

Basic Operation 

The following pages discuss the basic operation of the API buffer: 


Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel
--------------------------------------------
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
channel, 
unsigned char * enable 
) 
Get the currently recording API buffer channel, if any. 

Parameters 
[out] 
channel A pointer to an int that 
will contain the API 
buffer channel that is 
currently recording APIs 
through the device 
calling this function. This 
will contain -1 if this 
device is not recording 
APIs to an API buffer 
channel. 
[out] 
enable A pointer to an unsigned 
char that will contain 1 if 
the device calling this 
function is currently 
recording APIs to an API 
buffer channel and 0 if 
not. 

Remarks 

This function can be used to obtain whether a device is currently recording APIs to 
the API buffer or executing them normally. 

◆Execute() 

WMX3APIFU WMX3APIFU 
NC Execute ( 
unsigned int channel ) 
Execute an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to execute. 

Remarks
--------------------------------------------
Opening an API Buffer Channel 
Adding Functions to the API Buffer 
Executing Functions in the API Buffer 
Halting Execution 
 


Opening an API Buffer Channel 

Up to maxApiBufferChannel API buffer channels can independently store and execute 
API functions. 

After starting the WMX3 engine, buffer memory to store API function call data must be 
allocated to an API channel before that channel can be used. The CreateApiBuffer 
function allocates buffer memory to an API channel. This function should be called 
during the initialization of the application, as allocation of memory can fail. All memory 
that a API buffer channel uses will be pre-allocated with this function, and the API buffer 
channel will not dynamically request any additional memory. This guarantees that the 
memory usage of the API buffer channel will be determinsitic. For additional 
information, see Function Calls related Memory Allocation.
-----------------------------------------------------------------------------------
12. Instruction: Execute an API buffer.
A: GetECAM(channel)
B: performTask(task_channel)
C: Execute(channel)
D: Wait_ApiBufferCondition(condition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
12. Model's answer: C
12. Correct answer: C
12. Result: Correct



Processing Question 13:
13. Context:
 wmxlib_ApiBuffer->EndRecordBufferChannel(); 

wmxlib_ApiBuffer->Execute(0); 

 

Halting Execution 

After all functions in the API buffer have been executed, the API buffer will remain in the 
Active state and will immediately continue executing functions as they are later added 
to the buffer. To return the API buffer to Stop state so that API functions in the buffer 
are not executed until the next time the Execute function is called, call the Halt 
function. 

The Halt function can also be called while the API buffer is still executing functions, in 
which case the API buffer will stop execution. Any remaining functions in the buffer will 
be executed the next time the Execute function is called. The Halt function will not stop 
the operation of any functions that have already been executed by the API buffer; for 
example, an axis that has started a motion command will not be stopped.
--------------------------------------------
This function will block until the API buffer channel starts (typically for 1ms). At the 
time that this function returns without any errors, any other function in this class can 
be called assuming that the API buffer channel has started executing APIs. 

See also 

API Buffer 

◆Halt() 

WMX3APIFU 
NC Halt ( unsigned int channel ) 
WMX3APIFU 
NC Halt ( unsigned int channel ) 
Halt an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to halt. 

Remarks 

Stops the execution of an API buffer. This function will stop the API buffer from 
further calling API functions from the buffer, but it will not stop the effects of APIs 
that have already been executed. For example, if this function is called after a 
motion API is executed from the API buffer, the motion will run to completion and will 
not stop. 

After stopping an API buffer using this function, execution can be resumed from the 
next API function in the API buffer by calling the Execute API function again.
--------------------------------------------
WMX3APIFUNC HaltMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Halt multiple API buffer channels. More... 

WMX3APIFUNC ClearMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Clear multiple API buffer channels. 
More... 

WMX3APIFUNC RewindMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Rewind multiple API buffer channels. 
More... 

WMX3APIFUNC GetStatus (unsigned int channel, 

ApiBufferStatus *pStatus) 

Get the current status of an API buffer. 


More... 

WMX3APIFUNC SetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 
Set options for an API buffer. More... 

WMX3APIFUNC GetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 

Get the currently applied options for an 
API buffer. More... 

WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More...
--------------------------------------------
State Description 
Idle 
The API buffer is not created yet. All API buffer channels are in this 
state when the WMX3 engine is started. 
Active 
The API buffer is executing APIs. The API buffer channel will change to 
this state when the Execute function is called while in the Stop state. 
While in this state, the API functions in the API buffer will be executed 
sequentially. API functions will be executed with as fast as possible; to 
add a delay between the execution of API functions, add the 
ApiBuffer::Wait or ApiBuffer::Sleep functions to the API buffer. 
The API buffer channel will remain in this state after the last API 
function in the buffer is executed. As long as the API buffer channel 
remains in this state, API functions that are added to the buffer will be 
executed. If the stopOnLastBlock option is enabled using the 
SetOptions function, the API buffer channel state will change to Stop 
when the last API function in the buffer is executed. 


Stop 

Delay
-----------------------------------------------------------------------------------
13. Instruction: Halt an API buffer.
A: FlowIf(condition)
B: Terminate(channel)
C: StartLog(channel)
D: Halt(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
13. Model's answer: D
13. Correct answer: D
13. Result: Correct



Processing Question 14:
14. Context:
 Parameters 
[in] 
channel The API buffer channel 
to clear. 
Remarks 

This function clears all APIs in the API buffer. 

This function will block until the API buffer channel is cleared (typically for 1ms). At 
the time that this function returns without any errors, any other function in this class 
can be called assuming that the API buffer channel has been cleared. 

◆Rewind() 

WMX3APIFU 
NC Rewind ( unsigned int channel ) 
WMX3APIFU 
NC Rewind ( unsigned int channel ) 
Rewind an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to rewind. 

Remarks 

If ApiBufferState is Active, this function rewinds the API buffer to the beginning 
and executes it as if Execute had been called. 

If ApiBufferState is Stop, this function rewinds the API buffer to the beginning so 
that it may be executed again using Execute. 

Also see API Buffer Statuses section for state transitions.
--------------------------------------------
After stopping an API buffer using this function, execution can be resumed from the 
next API function in the API buffer by calling the Execute API function again. 

This function will block until the API buffer channel stops (typically for 1ms). At the 
time that this function returns without any errors, any other function in this class can 
be called assuming that the API buffer channel has stopped executing APIs. 

If this function is called for an API buffer that is executing the Motion::Wait function, 
the API buffer will be stopped after the wait completes. For more information, see 
Halting Execution. 

◆Clear() 

WMX3APIFU WMX3APIFU 
NC Clear ( 
unsigned int channel ) 
Clear an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to clear. 
Remarks 

This function clears all APIs in the API buffer.
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
Clear(unsigned int 
channel); 
Python def Clear(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Rewind(unsigned int 
channel); 
Python def Rewind(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetStatus(unsigned int 
channel, 
ApiBufferStatus* 
pStatus); 
Python def GetStatus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : ApiBufferStatus status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOptions(unsigned int 
channel, 
ApiBufferOptions
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
-----------------------------------------------------------------------------------
14. Instruction: Clear an API buffer.
A: Clear(channel)
B: Rewind(channel)
C: ClearChannel(channel)
D: Halt(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
14. Model's answer: A
14. Correct answer: A
14. Result: Correct



Processing Question 15:
15. Context:
 Parameters 
[in] 
channel The API buffer channel 
to clear. 
Remarks 

This function clears all APIs in the API buffer. 

This function will block until the API buffer channel is cleared (typically for 1ms). At 
the time that this function returns without any errors, any other function in this class 
can be called assuming that the API buffer channel has been cleared. 

◆Rewind() 

WMX3APIFU 
NC Rewind ( unsigned int channel ) 
WMX3APIFU 
NC Rewind ( unsigned int channel ) 
Rewind an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to rewind. 

Remarks 

If ApiBufferState is Active, this function rewinds the API buffer to the beginning 
and executes it as if Execute had been called. 

If ApiBufferState is Stop, this function rewinds the API buffer to the beginning so 
that it may be executed again using Execute. 

Also see API Buffer Statuses section for state transitions.
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
Clear(unsigned int 
channel); 
Python def Clear(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Rewind(unsigned int 
channel); 
Python def Rewind(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetStatus(unsigned int 
channel, 
ApiBufferStatus* 
pStatus); 
Python def GetStatus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : ApiBufferStatus status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOptions(unsigned int 
channel, 
ApiBufferOptions
--------------------------------------------
wmxlib_ApiBuffer->Execute(0); 

The following plots show the position and velocity of the axis when the above code is 
executed. 


 


Rewinding the API Buffer 

After an API function in the API buffer has been executed, the buffer memory occupied 
by that function can be overwritten by other functions that are subsequently added to 
the buffer. If no functions have been added to the buffer after calling Execute, then all 
executed API functions will remain in the buffer memory and the same functions can be 
executed again with the Rewind function. 

Rewind Example 

The following code will rewind the API buffer after executing, and then execute the 
buffer again. 

wmx3Api::ApiBufferStatus st;
wmx3Api::Motion::PosCommand pos;
int counter; 

wmxlib_ApiBuffer->StartRecordBufferChannel(0);
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
-----------------------------------------------------------------------------------
15. Instruction: Rewind an API buffer.
A: Rewind(channel)
B: ReplayPrevious(channel)
C: SetOutputData(moduleId, data, dataSize)
D: GetOptions(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
15. Model's answer: A
15. Correct answer: A
15. Result: Correct



Processing Question 16:
16. Context:
 class ApiBufferStatus 
This class contains the current status of 
an API buffer channnel. Also see API 
Buffer Statuses. More... 
class 
class 
ApiBufferOptions 
This class contains options for an API 
buffer channel. Also see API Buffer 
Options. More... 
ApiBufferWatch 
This class contains watch options for an 
API buffer channel. More... 
class ApiBufferChannelSelection 
This class contains a selection of API 
buffer channels. More... 
class ApiBufferEventOutput 
This class defines event output functions 
that can be processed by the ApiBuffer 
module. Also see API Buffer Outputs. 
More... 
union ApiBufferEventOutput::OutputFunction 
Arguments 
This union defines the structs containing 
arguments for each output function. 
More... 
struct 
struct 
ApiBufferEventOutput::OutputFunction 
Arguments::StartAPIBuffer 
This structure contains arguments for the 
StartAPIBuffer output function. More... 
ApiBufferEventOutput::OutputFunction 
Arguments::HaltAPIBuffer
--------------------------------------------
◆GetStatus() 

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
unsigned int channel, 
ApiBufferStatus * pStatus 
Get the current status of an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the status. 
[out] 
pStatus A pointer to a 
ApiBufferStatus that 
will contain the current 
status of the API buffer. 

Remarks 

This function will obtain the current status of an API buffer channel. This function 
should be called cyclically to continuously check the operation of the API buffer 
channel. 

◆SetOptions() 

WMX3APIFUNC 
SetOptions ( 
) 
WMX3APIFUNC 
SetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Set options for an API buffer. 
Parameters 
[in] 
channel The API buffer channel 
to set the options. 
[in] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that contains 
execution options for the 
API buffer. 

Remarks
--------------------------------------------
When an watch error occurs, the API buffer will stop executing additional API 
functions, but the motion from API functions that have already been executed will 
not stop. 

The watch options can be configured to execute another API buffer channel when 
an watch error occurs. The API buffer channel that is executed this way typically 
contains an error handling routine, such as stopping all axes or generating an 
emergency stop. 

Watch function statuses, such as whether the watch error has occurred, the error 
code of the watch error, and the axis that triggered the watch error, can be obtained 
using the GetStatus function. 

The watch function is disabled by default. 

◆GetWatch() 

WMX3APIFUNC 
GetWatch ( 
) 
WMX3APIFUNC 
GetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Get watch options for an API buffer. The watch function will stop the buffer 
execution when an error is detected.
--------------------------------------------
WMX3APIFUNC HaltMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Halt multiple API buffer channels. More... 

WMX3APIFUNC ClearMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Clear multiple API buffer channels. 
More... 

WMX3APIFUNC RewindMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Rewind multiple API buffer channels. 
More... 

WMX3APIFUNC GetStatus (unsigned int channel, 

ApiBufferStatus *pStatus) 

Get the current status of an API buffer. 


More... 

WMX3APIFUNC SetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 
Set options for an API buffer. More... 

WMX3APIFUNC GetOptions (unsigned int channel, 
ApiBufferOptions *pOptions) 

Get the currently applied options for an 
API buffer. More... 

WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More...
-----------------------------------------------------------------------------------
16. Instruction: Get the current status of an API buffer.
A: GetWatch(channel)
B: GetOutputModuleId()
C: CheckChannelStatus(channel_id)
D: GetStatus(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
16. Model's answer: D
16. Correct answer: D
16. Result: Correct



Processing Question 17:
17. Context:
 Remarks 

This function will set the execution options of an API buffer channel. The execution 
options affect how the API buffer will be executed. See ApiBufferOptions for 
additional information regarding each available option. 

If this function is not called, the default execution options will be used. 

◆ 
GetOptions() 

WMX3APIFUNC 
GetOptions ( 
) 
WMX3APIFUNC 
GetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Get the currently applied options for an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the options. 
[out] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that will contain the 
execution options for the 
API buffer. 

Remarks 

This function will get the currently applied execution options of an API buffer 
channel. The execution options are set using the SetOptions function. 

If this function is called before calling the SetOptions function, the default execution 
options will be returned.
--------------------------------------------
◆GetStatus() 

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
unsigned int channel, 
ApiBufferStatus * pStatus 
Get the current status of an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the status. 
[out] 
pStatus A pointer to a 
ApiBufferStatus that 
will contain the current 
status of the API buffer. 

Remarks 

This function will obtain the current status of an API buffer channel. This function 
should be called cyclically to continuously check the operation of the API buffer 
channel. 

◆SetOptions() 

WMX3APIFUNC 
SetOptions ( 
) 
WMX3APIFUNC 
SetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Set options for an API buffer. 
Parameters 
[in] 
channel The API buffer channel 
to set the options. 
[in] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that contains 
execution options for the 
API buffer. 

Remarks
--------------------------------------------
*pOptions); 
Python 
def SetOptions(channel, 
pOptions) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetOptions(unsigned int 
channel, 
ApiBufferOptions 
*pOptions); 
Python def GetOptions(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : ApiBufferOptions 
-options 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetWatch(unsigned int 
channel, ApiBufferWatch 
*pWatch); 
Python 
def SetWatch(channel, 
pWatch) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
GetWatch(unsigned int 
channel, ApiBufferWatch 
*pWatch); 
def GetWatch(channel)
--------------------------------------------
},
    {
        "No": 19,
        "FunctionC++": "WMX3APIFUNC SetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def SetOptions(channel, pOptions)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set options for an API buffer."
    },
    {
        "No": 20,
        "FunctionC++": "WMX3APIFUNC GetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def GetOptions(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the currently applied options for an API buffer."
-----------------------------------------------------------------------------------
17. Instruction: Set options for an API buffer.
A: SetOptions(channel, pOptions)
B: SetChannelOptions(channel, options)
C: Execute(channel)
D: SetLogOption(channel, pOption)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
17. Model's answer: A
17. Correct answer: A
17. Result: Correct



Processing Question 18:
18. Context:
 Remarks 

This function will set the execution options of an API buffer channel. The execution 
options affect how the API buffer will be executed. See ApiBufferOptions for 
additional information regarding each available option. 

If this function is not called, the default execution options will be used. 

◆ 
GetOptions() 

WMX3APIFUNC 
GetOptions ( 
) 
WMX3APIFUNC 
GetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Get the currently applied options for an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the options. 
[out] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that will contain the 
execution options for the 
API buffer. 

Remarks 

This function will get the currently applied execution options of an API buffer 
channel. The execution options are set using the SetOptions function. 

If this function is called before calling the SetOptions function, the default execution 
options will be returned.
--------------------------------------------
},
    {
        "No": 19,
        "FunctionC++": "WMX3APIFUNC SetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def SetOptions(channel, pOptions)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set options for an API buffer."
    },
    {
        "No": 20,
        "FunctionC++": "WMX3APIFUNC GetOptions(unsigned int channel, ApiBufferOptions *pOptions)",
        "FunctionPython": "def GetOptions(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the currently applied options for an API buffer."
--------------------------------------------
◆GetStatus() 

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
unsigned int channel, 
ApiBufferStatus * pStatus 
Get the current status of an API buffer. 

Parameters 
[in] 
channel The API buffer channel 
to get the status. 
[out] 
pStatus A pointer to a 
ApiBufferStatus that 
will contain the current 
status of the API buffer. 

Remarks 

This function will obtain the current status of an API buffer channel. This function 
should be called cyclically to continuously check the operation of the API buffer 
channel. 

◆SetOptions() 

WMX3APIFUNC 
SetOptions ( 
) 
WMX3APIFUNC 
SetOptions ( 
) 
unsigned int channel, 
ApiBufferOptions * pOptions 
Set options for an API buffer. 
Parameters 
[in] 
channel The API buffer channel 
to set the options. 
[in] 
pOptions A pointer to an object of 
the ApiBufferOptions 
class that contains 
execution options for the 
API buffer. 

Remarks
--------------------------------------------
See also 

API Buffer 

◆EndRecordBufferChannel() 
WMX3APIFUNC 
EndRecordBuffe 
rChannel ( ) 
End recording APIs to the API buffer channel. 

Remarks 

After calling this function, subsequent calls to WMX3 APIs (from any WMX3 library) 
from the device calling this function will be executed normally. 

To resume recording APIs to the API buffer channel for this device, call the 
StartRecordBufferChannel function. 

If this function is called while not recording API functions to an API buffer channel, 
this function will return the NotRecording error. 

◆GetRecordingBufferChannel() 

WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
WMX3APIFUNC 
GetRecordingBuffer 
Channel 
( int * 
channel, 
unsigned char * enable 
) 
Get the currently recording API buffer channel, if any.
-----------------------------------------------------------------------------------
18. Instruction: Get the currently applied options for an API buffer.
A: GetChannelOptions(channel_id)
B: GetOptions(channel)
C: StartRecordBufferChannel(channel)
D: GetLogOption(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
18. Model's answer: B
18. Correct answer: B
18. Result: Correct



Processing Question 19:
19. Context:
 If this function is called before calling the SetOptions function, the default execution 
options will be returned. 

◆SetWatch() 
WMX3APIFUNC 
SetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Set watch options for an API buffer. The watch function will stop the buffer execution 
when an error is detected. 

Parameters 


[in] 
channel The API buffer channel 
to set the watch options. 

[in] 
pWatch A pointer to an object of 
the ApiBufferWatch that 
contains the watch 
options for the API 
buffer. 

Remarks 

This function will set the watch options of an API buffer channel. When the watch 
function is enabled, the API buffer will stop execution of API functions in the buffer 
when one of the watched axes are in the servo off, offline, amp alarm, or limit switch 
triggered states. The watched axes are checked for these states every 
communication cycle.
--------------------------------------------
WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC GetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Get watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC Sleep (unsigned int milliseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC USleep (unsigned int microseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC Wait (int axis) 
Add a wait command to an API buffer. 
More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Add a wait command to an API buffer. 
More... 

WMX3APIFUNC Wait (ApiBufferCondition *condition) 

Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More...
--------------------------------------------
},
    {
        "No": 21,
        "FunctionC++": "WMX3APIFUNC SetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def SetWatch(channel, pWatch)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 22,
        "FunctionC++": "WMX3APIFUNC GetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def GetWatch(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
--------------------------------------------
When an watch error occurs, the API buffer will stop executing additional API 
functions, but the motion from API functions that have already been executed will 
not stop. 

The watch options can be configured to execute another API buffer channel when 
an watch error occurs. The API buffer channel that is executed this way typically 
contains an error handling routine, such as stopping all axes or generating an 
emergency stop. 

Watch function statuses, such as whether the watch error has occurred, the error 
code of the watch error, and the axis that triggered the watch error, can be obtained 
using the GetStatus function. 

The watch function is disabled by default. 

◆GetWatch() 

WMX3APIFUNC 
GetWatch ( 
) 
WMX3APIFUNC 
GetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Get watch options for an API buffer. The watch function will stop the buffer 
execution when an error is detected.
-----------------------------------------------------------------------------------
19. Instruction: Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected.
A: SetWatchChannel(channelID, watchObject)
B: SetWatchdog(deviceId, watchdog)
C: SetWatch(channel, pWatch)
D: EndRecordBufferChannel()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
19. Model's answer: C
19. Correct answer: C
19. Result: Correct



Processing Question 20:
20. Context:
 When an watch error occurs, the API buffer will stop executing additional API 
functions, but the motion from API functions that have already been executed will 
not stop. 

The watch options can be configured to execute another API buffer channel when 
an watch error occurs. The API buffer channel that is executed this way typically 
contains an error handling routine, such as stopping all axes or generating an 
emergency stop. 

Watch function statuses, such as whether the watch error has occurred, the error 
code of the watch error, and the axis that triggered the watch error, can be obtained 
using the GetStatus function. 

The watch function is disabled by default. 

◆GetWatch() 

WMX3APIFUNC 
GetWatch ( 
) 
WMX3APIFUNC 
GetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Get watch options for an API buffer. The watch function will stop the buffer 
execution when an error is detected.
--------------------------------------------
If this function is called before calling the SetOptions function, the default execution 
options will be returned. 

◆SetWatch() 
WMX3APIFUNC 
SetWatch ( 
) 
unsigned int channel, 
ApiBufferWatch * pWatch 
Set watch options for an API buffer. The watch function will stop the buffer execution 
when an error is detected. 

Parameters 


[in] 
channel The API buffer channel 
to set the watch options. 

[in] 
pWatch A pointer to an object of 
the ApiBufferWatch that 
contains the watch 
options for the API 
buffer. 

Remarks 

This function will set the watch options of an API buffer channel. When the watch 
function is enabled, the API buffer will stop execution of API functions in the buffer 
when one of the watched axes are in the servo off, offline, amp alarm, or limit switch 
triggered states. The watched axes are checked for these states every 
communication cycle.
--------------------------------------------
WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC GetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Get watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC Sleep (unsigned int milliseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC USleep (unsigned int microseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC Wait (int axis) 
Add a wait command to an API buffer. 
More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Add a wait command to an API buffer. 
More... 

WMX3APIFUNC Wait (ApiBufferCondition *condition) 

Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More...
--------------------------------------------
},
    {
        "No": 21,
        "FunctionC++": "WMX3APIFUNC SetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def SetWatch(channel, pWatch)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Set watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
    },
    {
        "No": 22,
        "FunctionC++": "WMX3APIFUNC GetWatch(unsigned int channel, ApiBufferWatch *pWatch)",
        "FunctionPython": "def GetWatch(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected."
-----------------------------------------------------------------------------------
20. Instruction: Get watch options for an API buffer. The watch function will stop the buffer execution when an error is detected.
A: CreateApiBuffer(channel)
B: GetECAM(channel)
C: GetChannelWatch(channel_id)
D: GetWatch(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
20. Model's answer: D
20. Correct answer: D
20. Result: Correct



Processing Question 21:
21. Context:
 Returns 
Type tuple 
Value 
0 : int -error code 
1 : ApiBufferWatch watch 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Sleep(unsigned int 
milliseconds); 
Python def Sleep(milliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Wait(int 
axis); 
Python def Wait(int axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Wait(AxisSelection 
*pAxisSelection); 
Python 
def 
Wait_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
Wait(ApiBufferCondition 
* condition);
--------------------------------------------
When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time. 

This function can add delays in between API functions in the API buffer. 

◆USleep() 
WMX3APIFU 
NC USleep ( 
unsigned int microseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
microseconds The length of the sleep 
command in 
microseconds. 

Remarks 

This function is similar to the Sleep function, except the sleep time is specified in 
units of microseconds. 


◆ 
Wait() [1/3] 


WMX3APIFU 
NC Wait ( int axis ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
axis The axis to wait to for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state.
--------------------------------------------
Parameters 
[in] 
channel The API buffer channel 
to get the watch options. 
[out] 
pWatch A pointer to an object of 
the ApiBufferWatch that 
will contain the watch 
options for the API 
buffer. 

Remarks 

This function will get the currently applied watch options of an API buffer channel. 
The watch options are set using the SetWatch function. 

If this function is called before calling the SetWatch function, the default watch 
options will be returned. 

◆Sleep() 

WMX3APIFU WMX3APIFU 
NC Sleep ( 
unsigned int milliseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
milliseconds The length of the sleep 
command in 
milliseconds. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time.
--------------------------------------------
},
    {
        "No": 23,
        "FunctionC++": "WMX3APIFUNC Sleep(unsigned int milliseconds)",
        "FunctionPython": "def Sleep(milliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a sleep command to an API buffer."
    },
    {
        "No": 24,
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "FunctionPython": "def Wait(int axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 25,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer."
-----------------------------------------------------------------------------------
21. Instruction: Add a sleep command to an API buffer.
A: Wait_ApiBufferCondition(condition)
B: SleepForDuration(duration)
C: SimulatePos(pSimulatePosCommand)
D: Sleep(milliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
21. Model's answer: D
21. Correct answer: D
21. Result: Correct



Processing Question 22:
22. Context:
 When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time. 

This function can add delays in between API functions in the API buffer. 

◆USleep() 
WMX3APIFU 
NC USleep ( 
unsigned int microseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
microseconds The length of the sleep 
command in 
microseconds. 

Remarks 

This function is similar to the Sleep function, except the sleep time is specified in 
units of microseconds. 


◆ 
Wait() [1/3] 


WMX3APIFU 
NC Wait ( int axis ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
axis The axis to wait to for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state.
--------------------------------------------
},
    {
        "No": 178,
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "FunctionPython": "def Wait(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 179,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer."
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
Using the Wait Function 

In addition to the single axis Wait function that was discussed in Basic Operation, 
there are two other Wait functions that pause the execution of the API buffer. 

The Wait function with a AxisSelection argument will pause the execution of the API 
buffer until the specified set of axes are all in the Idle operation state at the same time. 

The Wait function with a ApiBufferCondition argument will pause the execution of the 
API buffer until a more complex condition has been satisfied. One common application 
of this Wait function is to wait until the axis has almost finished the execution of its 
current motion command, and then override the motion command with another motion 
command so that the axis does not stop between the two motion commands. The 
ApiBufferCondition in this case might have the RemainingTime condition with a time 
of 2~4ms. 

Wait Example
-----------------------------------------------------------------------------------
22. Instruction: Add a wait command to an API buffer.
A: Wait(axis)
B: IsDeviceValid()
C: WaitForAxis(int axis)
D: Wait(int axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
22. Model's answer: D
22. Correct answer: D
22. Result: Correct



Processing Question 23:
23. Context:
 WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
◆Wait() [2/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
AxisSelection pAxisSelection ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
pAxisSelection A set of axes to wait for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until all the axes in the specified set of axes are in the Idle operation state. 

This function can delay the execution of the next API in the API buffer until the 
motion commands of multiple axes complete. 

This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified set of 
axes.
--------------------------------------------
Using the Wait Function 

In addition to the single axis Wait function that was discussed in Basic Operation, 
there are two other Wait functions that pause the execution of the API buffer. 

The Wait function with a AxisSelection argument will pause the execution of the API 
buffer until the specified set of axes are all in the Idle operation state at the same time. 

The Wait function with a ApiBufferCondition argument will pause the execution of the 
API buffer until a more complex condition has been satisfied. One common application 
of this Wait function is to wait until the axis has almost finished the execution of its 
current motion command, and then override the motion command with another motion 
command so that the axis does not stop between the two motion commands. The 
ApiBufferCondition in this case might have the RemainingTime condition with a time 
of 2~4ms. 

Wait Example
--------------------------------------------
When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state. 

This function can delay the execution of the next API in the API buffer until the 
motion command of an axis completes. 

This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified axis. 

If the specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, 
AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be 
generated and logged in the ApiBufferStatus. If the stopOnError option was set to 
1 when calling the Execute function, the API buffer execution will stop when this 
occurs. 

◆Wait() [2/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
AxisSelection pAxisSelection ) 
Add a wait command to an API buffer.
-----------------------------------------------------------------------------------
23. Instruction: Add a wait command to an API buffer.
A: Wait_AxisSel(pAxisSelection)
B: GetOutputModuleId()
C: Pause_AxisSel(pAxisSelection)
D: Wait_AxisSelection(pAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
23. Model's answer: D
23. Correct answer: A
23. Result: Wrong



Processing Question 24:
24. Context:
 This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified set of 
axes. 

If any specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, 
AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be 
generated and logged in the ApiBufferStatus. If the stopOnError option was set to 
1 when calling the Execute function, the API buffer execution will stop when this 
occurs. 

◆Wait() [3/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( ApiBufferCon condition ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the wait 
condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel.
--------------------------------------------
},
    {
        "No": 26,
        "FunctionC++": "WMX3APIFUNC Wait(ApiBufferCondition *condition)",
        "FunctionPython": "def Wait_ApiBufferCondition(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add a wait command to an API buffer."
    },
    {
        "No": 27,
        "FunctionC++": "WMX3APIFUNC FlowIf(ApiBufferCondition *condition, ApiBufferCondition *wait=NULL)",
        "FunctionPython": "def FlowIf(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"If\" command to an API buffer."
--------------------------------------------
Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More... 

WMX3APIFUNC FlowElseIf (ApiBufferCondition 
*condition) 

Add an "Else If" command to an API 
buffer. More... 

WMX3APIFUNC FlowElse () 
Add an "Else" command to an API buffer. 
More... 
WMX3APIFUNC FlowEndIf () 
Add an "End If" command to an API 
buffer. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
WMX3APIFUNC SetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Set watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC GetWatch (unsigned int channel, 
ApiBufferWatch *pWatch) 

Get watch options for an API buffer. The 
watch function will stop the buffer 
execution when an error is detected. 

More... 

WMX3APIFUNC Sleep (unsigned int milliseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC USleep (unsigned int microseconds) 
Add a sleep command to an API buffer. 
More... 
WMX3APIFUNC Wait (int axis) 
Add a wait command to an API buffer. 
More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Add a wait command to an API buffer. 
More... 

WMX3APIFUNC Wait (ApiBufferCondition *condition) 

Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More...
-----------------------------------------------------------------------------------
24. Instruction: Add a wait command to an API buffer.
A: Wait_ApiBufferConditionWithTimeout(condition, timeout)
B: Wait_ApiBufferCondition(condition)
C: CreateApiBuffer(channel, size, sizeUnit)
D: Wait_WaitCondition(pWaitCondition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
24. Model's answer: B
24. Correct answer: B
24. Result: Correct



Processing Question 25:
25. Context:
 Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More... 

WMX3APIFUNC FlowElseIf (ApiBufferCondition 
*condition) 

Add an "Else If" command to an API 
buffer. More... 

WMX3APIFUNC FlowElse () 
Add an "Else" command to an API buffer. 
More... 
WMX3APIFUNC FlowEndIf () 
Add an "End If" command to an API 
buffer. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
◆FlowIf() 
WMX3APIFUNC 
FlowIf ( ApiBufferCondition condition, 
ApiBufferCondition wait = NULL

) ) 
Add an "If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "If" 
condition. 
[in] 
wait An optional parameter 
that specifies the 
condition at which the 
"If" condition is 
evaluated. If not 
specified, or if set to the 
default value of NULL, 
the condition will be 
evaluated immediately 
when the "If" command 
is encountered during 
the execution of the API 
buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel.
--------------------------------------------
For ApiBufferCondition types with one or more axis parameters, this function will 
monitor the specified axes for errors. If any specified axis goes offline, generates an 
amp alarm, triggers a limit switch, or changes to servo off state, an ServoOffline, 
AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code will be generated and logged in the 
ApiBufferStatus. If the stopOnError option is set to 1 and passed to the Execute 
function, the API buffer execution will stop when this occurs. 

◆FlowIf() 
WMX3APIFUNC 
FlowIf ( ApiBufferCondition condition, 
ApiBufferCondition wait = NULL

) ) 
Add an "If" command to an API buffer.
--------------------------------------------
"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf 



An additional "wait" condition may be specified. If a "wait" condition is specified, the 
condition for the "If" command is only evaluated when the "wait" condition becomes 
TRUE. While the "wait" condition is FALSE, the execution of the API buffer 
sequence will stop and the evaluation of the "If" condition will be deferred. 

◆FlowElseIf() 
WMX3APIFU 
NC 
FlowElseIf ( ApiBufferCon condition ) 
Add an "Else If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "Else 
If" condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands.
-----------------------------------------------------------------------------------
25. Instruction: Add an If command to an API buffer.
A: FlowIf(condition)
B: ApiLogToString(pLogData, logDataSize)
C: StopCommunication()
D: CheckConditionFlowIf(condition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
25. Model's answer: A
25. Correct answer: A
25. Result: Correct



Processing Question 26:
26. Context:
 This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else" or "End If" command will be skipped. If the condition 
evaluates to TRUE, all APIs in the API buffer sequence until the next "Else" or "End 
If" command will be executed normally. 

◆FlowElse() 

WMX3APIFUNC WMX3APIFUNC 
FlowElse ( 
) 
Add an "Else" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command.
--------------------------------------------
"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf 



An additional "wait" condition may be specified. If a "wait" condition is specified, the 
condition for the "If" command is only evaluated when the "wait" condition becomes 
TRUE. While the "wait" condition is FALSE, the execution of the API buffer 
sequence will stop and the evaluation of the "If" condition will be deferred. 

◆FlowElseIf() 
WMX3APIFU 
NC 
FlowElseIf ( ApiBufferCon condition ) 
Add an "Else If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "Else 
If" condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands.
--------------------------------------------
Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More... 

WMX3APIFUNC FlowElseIf (ApiBufferCondition 
*condition) 

Add an "Else If" command to an API 
buffer. More... 

WMX3APIFUNC FlowElse () 
Add an "Else" command to an API buffer. 
More... 
WMX3APIFUNC FlowEndIf () 
Add an "End If" command to an API 
buffer. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
},
    {
        "No": 28,
        "FunctionC++": "WMX3APIFUNC FlowElseIf(ApiBufferCondition *condition)",
        "FunctionPython": "def FlowElseIf(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else If\" command to an API buffer."
    },
    {
        "No": 29,
        "FunctionC++": "WMX3APIFUNC FlowElse()",
        "FunctionPython": "def FlowElse()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else\" command to an API buffer. "
    },
    {
        "No": 30,
        "FunctionC++": "WMX3APIFUNC FlowEndIf()",
        "FunctionPython": "def FlowEndIf()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"End If\" command to an API buffer."
-----------------------------------------------------------------------------------
26. Instruction: Add an Else If command to an API buffer.
A: FlowElseIf(condition)
B: GetOutputModuleId()
C: FlowIfElse(condition)
D: FlowEndIf()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
26. Model's answer: A
26. Correct answer: A
26. Result: Correct



Processing Question 27:
27. Context:
 This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else" or "End If" command will be skipped. If the condition 
evaluates to TRUE, all APIs in the API buffer sequence until the next "Else" or "End 
If" command will be executed normally. 

◆FlowElse() 

WMX3APIFUNC WMX3APIFUNC 
FlowElse ( 
) 
Add an "Else" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command.
--------------------------------------------
"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf 



An additional "wait" condition may be specified. If a "wait" condition is specified, the 
condition for the "If" command is only evaluated when the "wait" condition becomes 
TRUE. While the "wait" condition is FALSE, the execution of the API buffer 
sequence will stop and the evaluation of the "If" condition will be deferred. 

◆FlowElseIf() 
WMX3APIFU 
NC 
FlowElseIf ( ApiBufferCon condition ) 
Add an "Else If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "Else 
If" condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands.
--------------------------------------------
Add a wait command to an API buffer. 


More... 

WMX3APIFUNC FlowIf (ApiBufferCondition *condition, 
ApiBufferCondition *wait=NULL) 

Add an "If" command to an API buffer. 

More... 

WMX3APIFUNC FlowElseIf (ApiBufferCondition 
*condition) 

Add an "Else If" command to an API 
buffer. More... 

WMX3APIFUNC FlowElse () 
Add an "Else" command to an API buffer. 
More... 
WMX3APIFUNC FlowEndIf () 
Add an "End If" command to an API 
buffer. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
},
    {
        "No": 28,
        "FunctionC++": "WMX3APIFUNC FlowElseIf(ApiBufferCondition *condition)",
        "FunctionPython": "def FlowElseIf(condition)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else If\" command to an API buffer."
    },
    {
        "No": 29,
        "FunctionC++": "WMX3APIFUNC FlowElse()",
        "FunctionPython": "def FlowElse()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"Else\" command to an API buffer. "
    },
    {
        "No": 30,
        "FunctionC++": "WMX3APIFUNC FlowEndIf()",
        "FunctionPython": "def FlowEndIf()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Add an \"End If\" command to an API buffer."
-----------------------------------------------------------------------------------
27. Instruction: Add an Else command to an API buffer.
A: ReleaseEStop()
B: FlowIfElse()
C: FlowElse()
D: Sleep(milliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
27. Model's answer: C
27. Correct answer: C
27. Result: Correct



Processing Question 28:
28. Context:
 This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else" or "End If" command will be skipped. If the condition 
evaluates to TRUE, all APIs in the API buffer sequence until the next "Else" or "End 
If" command will be executed normally. 

◆FlowElse() 

WMX3APIFUNC WMX3APIFUNC 
FlowElse ( 
) 
Add an "Else" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command.
--------------------------------------------
"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf 



An additional "wait" condition may be specified. If a "wait" condition is specified, the 
condition for the "If" command is only evaluated when the "wait" condition becomes 
TRUE. While the "wait" condition is FALSE, the execution of the API buffer 
sequence will stop and the evaluation of the "If" condition will be deferred. 

◆FlowElseIf() 
WMX3APIFU 
NC 
FlowElseIf ( ApiBufferCon condition ) 
Add an "Else If" command to an API buffer. 

Parameters 
[in] 
condition A pointer to a 
ApiBufferCondition 
that specifies the "Else 
If" condition. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command can be added between an "If" command and an "End If" command, 
and before any "Else" commands.
--------------------------------------------
This command can be added between an "If" command and an "End If" command. 

When this function is executed from inside an API buffer, all APIs between this 
command and the next "End If" command will be executed only if the preceding "If" 
or "Else If" command evaluates to FALSE. If the preceding "If" or "Else If" command 
evaluates to TRUE, then all APIs between this command and the next "End If" 
command will be skipped. 

◆FlowEndIf() 
WMX3APIFUNC 
lowEndIf 
F 

( 
) 
Add an "End If" command to an API buffer. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

This command designates the end of an "If"..."Else If"..."Else"..."End If" sequence. 
APIs in the API buffer after this command will be executed normally. 

 

Compensation Class Reference 

This class contains compensation functions. 

Public Member Functions 

Compensation (WMX3Api *f)
--------------------------------------------
Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the specified condition will 
be evaluated. If the condition evaluates to FALSE, all APIs in the API buffer 
sequence until the next "Else", "Else If", or "End If" command will be skipped. If the 
condition evaluates to TRUE, all APIs in the API buffer sequence until the next 
"Else", "Else If", or "End If" command will be executed normally. 

"If" commands may be nested up to 100 levels. For example, the following 
sequence is allowed: 

If If If Else EndIf Else If Else EndIf EndIf EndIf
-----------------------------------------------------------------------------------
28. Instruction: Add an End If command to an API buffer.
A: FlowElseIf(condition)
B: Execute(channel)
C: FlowEndIf()
D: FlowEndIf(condition: bool)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
28. Model's answer: C
28. Correct answer: C
28. Result: Correct



Processing Question 29:
29. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
},
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the ErrorCode enum. All errors returned by functions in 
class WMX3Api will be defined in this enum. Errors returned by functions in other 
classes may not be defined in this enum, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
WMX3Api class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code.
-----------------------------------------------------------------------------------
29. Instruction: Get a string representation of the specified error code.
A: ErrorToString(errCode)
B: IsDeviceValid()
C: ConvertErrorCodeToString(code)
D: EnablePitchErrorCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
29. Model's answer: A
29. Correct answer: A
29. Result: Correct



Processing Question 30:
30. Context:
 See also 

Extracting the API Log Information 

◆ 
ApiLogToString() [2/2] 



◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion()
--------------------------------------------
},
    {
        "No": 536,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "EventControl Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 537,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "EventControl Class",
        "Instruction": "Get a string representation of the raw data of an API log."
--------------------------------------------
See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion()
--------------------------------------------
See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion()
-----------------------------------------------------------------------------------
30. Instruction: Get a string representation of the raw data of an API log.
A: SetEventInput(id, pEventInput)
B: ApiLogDataToString(logData, dataSize)
C: GetLibVersion()
D: ApiLogToString(pLogData, logDataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
30. Model's answer: D
30. Correct answer: D
30. Result: Correct



Processing Question 31:
31. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
SetAxisMode() : Ecat 
SetAxisParam() : Config 
SetAxisPolarity() : Config 
SetAxisUnit() : Config 
SetBacklashCompensation() : Compensation 
SetCommandPos() : Home 
SetCommandPosToFeedbackPos() : Home 
SetConstantLinearVel() : AdvVelocity 
SetCustomEvent() : EventControl 
SetCustomEventConfigureOfModule() : EventControl 
SetCustomEventInput() : EventControl 
SetCustomEventOutput() : EventControl 
SetCustomLog() : Log 
SetDeviceEventFailed : ErrorCode 
SetDeviceName() : WMX3Api 
SetDeviceNameTimeout : ErrorCode 
SetDeviceWaitEvent() : WMX3Api 
SetEmergencyStopParam() : Config 
SetEncoderRange() : Config 
SetEniFilePath() : Ecat 
SetEvent() : EventControl 
SetEventInput() : EventControl 
SetEventOutput() : EventControl 
SetFeedbackParam() : Config 
SetFeedbackPos() : Home 
SetFlightRecorderParam() : Config 
SetFlightRecorderPath() : Config 
SetGearRatio() : Config 
SetHardwareTouchProbe() : EventControl 
SetHomeDone() : Home 
SetHomeParam() : Config 
SetHomeProfile() : PMAxisControl
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 


Get the version of the module library. 

More... 

Public Attributes 

PMAxisControl * axisControl 
PMAxisMotion * motion 
PMAxisHome * home 
PMAxisVelocity * velocity 
PMAxisTorque * torque 
PMAxisControl::HomeProfiles * homeProfiles 
PMAxisControl::VelocityProfiles * velProfiles 
PMAxisControl::TorqueProfiles * trqProfiles 

Friends 

class PMAxisControl 
class PMAxisMotion 
class PMAxisHome 
class PMAxisVelocity 
class PMAxisTorque 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code.
-----------------------------------------------------------------------------------
31. Instruction: Get the version of the module library.
A: GetLibVersion()
B: GetLibraryVersion()
C: SetBacklashCompensation(axis, pBacklashCompData)
D: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
31. Model's answer: A
31. Correct answer: A
31. Result: Correct



Processing Question 32:
32. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
32. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: EnableBacklashCompensation(axis)
B: IsDeviceValid()
C: SetOutBytesEx(addr, size, pData)
D: isValidDevice()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
32. Model's answer: B
32. Correct answer: B
32. Result: Correct



Processing Question 33:
33. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 


More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
-----------------------------------------------------------------------------------
33. Instruction: Get the version of the module rtdll.
A: GetVersion()
B: ErrorToString(errCode)
C: Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)
D: GetSoftwareVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
33. Model's answer: A
33. Correct answer: A
33. Result: Correct



Processing Question 34:
34. Context:
 WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
SetPitchErrorCompensatio 
n_FreePosition(axis, 
pitchErrCompData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
Data 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationData pitchErrCompData 
Remarks 
WMX3APIFUNC 
GetPitchErrorCompensa
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
-----------------------------------------------------------------------------------
34. Instruction: Set pitch error compensation parameters.
A: SetPitchErrorCompensation(axis, pitchErrCompData)
B: GetPitchErrorCompensationAtPosition(axis, pos)
C: SetPitchErrorCompensationParameters(axis, pitchErrCompData)
D: Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
34. Model's answer: A
34. Correct answer: A
34. Result: Correct



Processing Question 35:
35. Context:
 WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
SetPitchErrorCompensatio 
n_FreePosition(axis, 
pitchErrCompData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
Data 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationData pitchErrCompData 
Remarks 
WMX3APIFUNC 
GetPitchErrorCompensa
-----------------------------------------------------------------------------------
35. Instruction: Set free position mode pitch error compensation parameters.
A: EnablePitchErrorCompensation(axis)
B: SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)
C: GetPitchErrorCompensation_FreePosition(axis)
D: SetPitchErrorCompensation(axis, pitchErrorCompensationData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
35. Model's answer: B
35. Correct answer: B
35. Result: Correct



Processing Question 36:
36. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
SetPitchErrorCompensatio 
n_FreePosition(axis, 
pitchErrCompData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPitchErrorCompensa 
tion(int axis, 
PitchErrorCompensation 
Data 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationData pitchErrCompData 
Remarks 
WMX3APIFUNC 
GetPitchErrorCompensa
-----------------------------------------------------------------------------------
36. Instruction: Get pitch error compensation parameters.
A: GetLibVersion()
B: DisablePitchErrorCompensation(axis)
C: GetPitchErrorCompensation(axis)
D: GetPitchErrorCompensation(axis_name)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
36. Model's answer: C
36. Correct answer: C
36. Result: Correct



Processing Question 37:
37. Context:
 Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
-----------------------------------------------------------------------------------
37. Instruction: Get free position mode pitch error compensation parameters.
A: Get2DPitchErrorCompensation_FreePosition(channel)
B: DisableBacklashCompensation(axis)
C: GetPitchErrorCompensation_FreePosition(axis)
D: EstimatePitchErrorCompensation_AxisPosition(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
37. Model's answer: C
37. Correct answer: C
37. Result: Correct



Processing Question 38:
38. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
◆EnablePitchErrorCompensation() 

WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
Enable pitch error compensation. 
Parameters 
[in] 
axis The axis to enable pitch 
error compensation. 
Remarks 

This function enables pitch error compensation for an axis. Pitch error 
compensation parameters must be set beforehand using the 
SetPitchErrorCompensation function. 

◆DisablePitchErrorCompensation() 

WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
Disable pitch error compensation. 
Parameters 
[in] 
axis The axis to disable pitch 
error compensation. 
Remarks 

This function disables pitch error compensation for an axis. Pitch error 
compensation can be enabled again using the EnablePitchErrorCompensation 
function. 

◆GetPitchErrorCompensationAtPosition()
-----------------------------------------------------------------------------------
38. Instruction: Enable pitch error compensation.
A: RenewPitchErrorCorrection(axis)
B: Disable2DPitchErrorCompensation(channel)
C: EnablePitchErrorCompensation(axis)
D: EnableBacklashCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
38. Model's answer: C
38. Correct answer: C
38. Result: Correct



Processing Question 39:
39. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
◆EnablePitchErrorCompensation() 

WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
EnablePitchE 
rrorCompens 
ation ( int axis ) 
Enable pitch error compensation. 
Parameters 
[in] 
axis The axis to enable pitch 
error compensation. 
Remarks 

This function enables pitch error compensation for an axis. Pitch error 
compensation parameters must be set beforehand using the 
SetPitchErrorCompensation function. 

◆DisablePitchErrorCompensation() 

WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
WMX3APIFU 
NC 
DisablePitch 
ErrorCompen 
sation ( int axis ) 
Disable pitch error compensation. 
Parameters 
[in] 
axis The axis to disable pitch 
error compensation. 
Remarks 

This function disables pitch error compensation for an axis. Pitch error 
compensation can be enabled again using the EnablePitchErrorCompensation 
function. 

◆GetPitchErrorCompensationAtPosition()
-----------------------------------------------------------------------------------
39. Instruction: Disable pitch error compensation.
A: DisablePitchCompensation(axis)
B: EnablePitchErrorCompensation(axis)
C: EnablePitchErrorCompensation(axis)
D: DisablePitchErrorCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
39. Model's answer: D
39. Correct answer: D
39. Result: Correct



Processing Question 40:
40. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPitchErrorCompensa 
tionAtPosition(int axis, 
double pos, double 
*pCompensation); 
Python 
def 
GetPitchErrorCompensati 
onAtPosition(axis, pos) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double pCompensation 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Set2DPitchErrorCompen 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationData 
*pitchErrCompData2D); 
Python 
def 
Set2DPitchErrorCompens 
ation(channel, 
pitchErrCompData2D) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
Set2DPitchErrorCompen
--------------------------------------------
◆GetPitchErrorCompensationAtPosition() 

WMX3APIFUNC 
GetPitchErrorCompe 
nsationAtPosition ( 
) 
WMX3APIFUNC 
GetPitchErrorCompe 
nsationAtPosition ( 
) 
int 
double 
axis, 
pos, 
double * pCompensation 
Obtain the pitch error compensation amount at the specified position. 

Parameters 
[in] 
axis The axis to get the pitch 
error compensation 
amount. 
[in] 
pos The position to get the 
pitch error compensation 
amount at. 
[out] 
pCompensation A pointer to a double 
type variable that returns 
the pitch error 
compensation amount at 
the specified position. 
Remarks 

This function returns the pitch error compensation amount that would be applied if 
the axis is at the specified position. 

Even if pitch error compensation is disabled, this function returns the pitch error 
compensation amount based on the last set pitch error compensation data. 

◆Set2DPitchErrorCompensation() [1/2]
WMX3APIFUNC 
Set2DPitchErrorCom 
pensation ( unsigned int channel,
-----------------------------------------------------------------------------------
40. Instruction: Obtain the pitch error compensation amount at the specified position.
A: Get2DPitchErrorCompensation_FreePosition(channel)
B: GetPitchErrorCompensationAtPosition(axis, pos)
C: GetPitchErrorCompensationValue(axis, position)
D: ErrorToString(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
40. Model's answer: B
40. Correct answer: B
40. Result: Correct



Processing Question 41:
41. Context:
 WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
Function 
C++ 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationFreePositionData 
*pitchErrCompData2D); 
Python 
def 
Set2DPitchErrorCompens 
ation_FreePosition(chann 
el, pitchErrCompData2D) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationData 
*pitchErrCompData2D); 
Python 
def 
Get2DPitchErrorCompens 
ation(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
TwoDPitchErrorCo 
mpensationData 2D 
pitch error comp 
data 
Remarks 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int
--------------------------------------------
◆Set2DPitchErrorCompensation() [1/2]
WMX3APIFUNC 
Set2DPitchErrorCom 
pensation ( unsigned int channel, 

TwoDPitchErrorCom pitchErrCompData2D 
) 
Set two-dimensional (2D) pitch error compensation parameters. 

Parameters 
[in] 
channel The channel to set the 
two-dimensional pitch 
error compensation 
parameters. Up to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
[in] 
pitchErrCompData2D A pointer to a 
TwoDPitchErrorCompe 
nsationData object that 
contains the two-
dimensional pitch error 
compensation 
parameters. 
Remarks 

Two-Dimensional (2D) pitch error compensation is a more flexible and powerful 
version of pitch error compensation in which the offset amount is determined from 
the positions of two reference axes instead of just one axis. The offset is added to 
the position command of either of the two reference axes or to a third axis.
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
-----------------------------------------------------------------------------------
41. Instruction: Set two-dimensional (2D) pitch error compensation parameters.
A: Set2DPitchErrorCompensation(channel, pitchErrCompData2D)
B: ApiLogToString(pLogData, logDataSize)
C: Set2DPitchErrorCompensation(channelNumber, pitchErrorDataMatrix)
D: SetPitchErrorCompensation(axis, pitchErrCompData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
41. Model's answer: A
41. Correct answer: A
41. Result: Correct



Processing Question 42:
42. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
--------------------------------------------
Function 
C++ 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationFreePositionData 
*pitchErrCompData2D); 
Python 
def 
Set2DPitchErrorCompens 
ation_FreePosition(chann 
el, pitchErrCompData2D) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationData 
*pitchErrCompData2D); 
Python 
def 
Get2DPitchErrorCompens 
ation(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
TwoDPitchErrorCo 
mpensationData 2D 
pitch error comp 
data 
Remarks 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int
-----------------------------------------------------------------------------------
42. Instruction: Set free position two-dimensional (2D) pitch error compensation parameters.
A: GetPitchErrorCompensation(axis)
B: Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)
C: Set2DPitchErrorCompensationByPosition(channel, pitchErrCompData2D)
D: SetPitchErrorCompensation_FreePosition(axis, pitchErrCompData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
42. Model's answer: B
42. Correct answer: B
42. Result: Correct



Processing Question 43:
43. Context:
 ensation(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sationAtPosition(unsign 
ed int channel, double 
refPos1, double refPos2, 
double 
*pCompensation); 
Python 
def 
Get2DPitchErrorCompens 
ationAtPosition(channel, 
refPos1, refPos2) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double pCompensation 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetBacklashCompensati 
on(int axis, 
BacklashCompensation 
Data 
*pBacklashCompData); 
Python 
def 
SetBacklashCompensatio 
n(axis, 
pBacklashCompData) 
Returns 
Type int 
Value error code
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
The current offset applied by two-dimensional pitch error compensation to an axis is 
stored in compensation in the CoreMotionStatus structure obtained by the 
GetStatus function. 

When two-dimensional pitch error compensation is disabled for an axis, all other 
two-dimensional pitch error compensation channels for which that axis is one of the 
reference axes are also disabled to prevent any axes from moving. 

Two-dimensional pitch error compensation is automatically disabled after 
starting any homing operation, as the pitch error is invalid if the home 
position is not known. 

See also 
Two-Dimensional (2D) Pitch Error Compensation, Free Position Mode 

◆Get2DPitchErrorCompensation() [1/2]
WMX3APIFUNC 
Get2DPitchErrorCo 
mpensation ( unsigned int channel, 
TwoDPitchErrorCom pitchErrCompData2D 
) 
Get two-dimensional (2D) pitch error compensation parameters.
-----------------------------------------------------------------------------------
43. Instruction: Get two-dimensional (2D) pitch error compensation parameters.
A: DisableBacklashCompensation(axis)
B: Disable2DPitchErrorCompensation(channel)
C: Get2DPitchErrorCorrection(channel)
D: Get2DPitchErrorCompensation(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
43. Model's answer: D
43. Correct answer: D
43. Result: Correct



Processing Question 44:
44. Context:
 WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
--------------------------------------------
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPitchErrorCompensa 
tionAtPosition(int axis, 
double pos, double 
*pCompensation); 
Python 
def 
GetPitchErrorCompensati 
onAtPosition(axis, pos) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double pCompensation 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Set2DPitchErrorCompen 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationData 
*pitchErrCompData2D); 
Python 
def 
Set2DPitchErrorCompens 
ation(channel, 
pitchErrCompData2D) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
Set2DPitchErrorCompen
-----------------------------------------------------------------------------------
44. Instruction: Get free position two-dimensional (2D) pitch error compensation parameters.
A: GetPitchErrorCompensation(axis)
B: Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)
C: Get2DPitchErrorCompensation_FreePosition(channel)
D: Get2DPitchErrorCompensation(channel, position)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
44. Model's answer: C
44. Correct answer: C
44. Result: Correct



Processing Question 45:
45. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
◆Enable2DPitchErrorCompensation() 

WMX3APIFU 
NC 
Enable2DPitc 
hErrorCompe 
WMX3APIFU 
NC 
Enable2DPitc 
hErrorCompe 
nsation ( 
unsigned int channel ) 
Enable two-dimensional (2D) pitch error compensation. 
Parameters 
[in] 
channel The channel to enable 
two-dimensional pitch 
error compensation. Up 
to 
max2dPitchErrorComp 
Channel channels may 
be defined. 

Remarks 

This function enables the specified two-dimensional pitch error compensation 
channel. Two-dimensional pitch error compensation parameters must be set 
beforehand using the SetPitchErrorCompensation function. 

◆Disable2DPitchErrorCompensation() 

WMX3APIFU 
NC 
Disable2DPit 
chErrorComp 
WMX3APIFU 
NC 
Disable2DPit 
chErrorComp 
ensation ( 
unsigned int channel ) 
Disable two-dimensional (2D) pitch error compensation. 
Parameters 
[in] 
channel The channel to disable 
two-dimensional pitch 
error compensation. Up 
to 
max2dPitchErrorComp 
Channel channels may 
be defined. 
Remarks
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
Function 
C++ channel, 
TwoDPitchErrorCompen 
sationFreePositionData 
*pitchErrCompData2D); 
Python 
def 
Get2DPitchErrorCompens 
ation_FreePosition(chann 
el) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
TwoDPitchErrorCo 
mpensationFreePos 
itionData -2D pitch 
error comp data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Enable2DPitchErrorCom 
pensation(unsigned int 
channel); 
Python 
def 
Enable2DPitchErrorComp 
ensation(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
Disable2DPitchErrorCo 
mpensation(unsigned 
int channel); 
def 
Disable2DPitchErrorComp
-----------------------------------------------------------------------------------
45. Instruction: Enable two-dimensional (2D) pitch error compensation.
A: Disable2DPitchErrorCompensation(channel)
B: Disable2DPitchErrorCompensation(channel)
C: Update2DPitchErrorCompensation(channel)
D: Enable2DPitchErrorCompensation(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
45. Model's answer: D
45. Correct answer: D
45. Result: Correct



Processing Question 46:
46. Context:
 WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
Function 
C++ channel, 
TwoDPitchErrorCompen 
sationFreePositionData 
*pitchErrCompData2D); 
Python 
def 
Get2DPitchErrorCompens 
ation_FreePosition(chann 
el) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
TwoDPitchErrorCo 
mpensationFreePos 
itionData -2D pitch 
error comp data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Enable2DPitchErrorCom 
pensation(unsigned int 
channel); 
Python 
def 
Enable2DPitchErrorComp 
ensation(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
Disable2DPitchErrorCo 
mpensation(unsigned 
int channel); 
def 
Disable2DPitchErrorComp
--------------------------------------------
Function 
C++ 
tion(int axis, 
PitchErrorCompensation 
FreePositionData 
*pitchErrCompData); 
Python 
def 
GetPitchErrorCompensati 
on_FreePosition(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
PitchErrorCompens 
ationFreePositionD 
ata pitchErrCompData 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnablePitchErrorCompe 
nsation(int axis); 
Python 
def 
EnablePitchErrorCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
DisablePitchErrorCompe 
nsation(int axis); 
Python 
def 
DisablePitchErrorCompen 
sation(axis) 
Returns 
Type int
-----------------------------------------------------------------------------------
46. Instruction: Disable two-dimensional (2D) pitch error compensation.
A: GetPitchErrorCompensationAtPosition(axis, pos)
B: Disable2DPitchErrorCompensation(channel)
C: Get2DPitchErrorCompensation_FreePosition(channel)
D: disable_2d_pitch_error_compensation(channel_id):
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
46. Model's answer: B
46. Correct answer: B
46. Result: Correct



Processing Question 47:
47. Context:
 WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Get free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Enable2DPitchErrorCompensation 

(unsigned int channel) 

Enable two-dimensional (2D) pitch error 


compensation. More... 

WMX3APIFUNC Disable2DPitchErrorCompensation 
(unsigned int channel) 

Disable two-dimensional (2D) pitch error 
compensation. More... 

WMX3APIFUNC Get2DPitchErrorCompensationAtPositi 
on (unsigned int channel, double refPos1, 
double refPos2, double *pCompensation) 
Obtain the two-dimensional (2D) pitch 
error compensation amount at the 
specified position. More...
--------------------------------------------
This function disables the specified two-dimensional pitch error compensation 
channel. Two-dimensional pitch error compensation can be enabled again using the 
Enable2DPitchErrorCompensation function. 

◆Get2DPitchErrorCompensationAtPosition() 
WMX3APIFUNC 
Get2DPitchErrorCo 
mpensationAtPositio 
n ( unsigned int channel, 
double refPos1, 
double refPos2, 
double * pCompensation 
) 
Obtain the two-dimensional (2D) pitch error compensation amount at the specified
--------------------------------------------
WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More... 

WMX3APIFUNC GetPitchErrorCompensationAtPosition 
(int axis, double pos, double 
*pCompensation) 
Obtain the pitch error compensation 
amount at the specified position. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Set two-dimensional (2D) pitch error 
compensation parameters. More... 

WMX3APIFUNC Set2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationFreePosi 
tionData *pitchErrCompData2D) 

Set free position two-dimensional (2D) 
pitch error compensation parameters. 

More... 

WMX3APIFUNC Get2DPitchErrorCompensation 
(unsigned int channel, 

TwoDPitchErrorCompensationData 

*pitchErrCompData2D) 

Get two-dimensional (2D) pitch error 
compensation parameters. More...
--------------------------------------------
Function 
C++ 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationFreePositionData 
*pitchErrCompData2D); 
Python 
def 
Set2DPitchErrorCompens 
ation_FreePosition(chann 
el, pitchErrCompData2D) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int 
channel, 
TwoDPitchErrorCompen 
sationData 
*pitchErrCompData2D); 
Python 
def 
Get2DPitchErrorCompens 
ation(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
TwoDPitchErrorCo 
mpensationData 2D 
pitch error comp 
data 
Remarks 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sation(unsigned int
-----------------------------------------------------------------------------------
47. Instruction: Obtain the two-dimensional (2D) pitch error compensation amount at the specified position.
A: Get2DPitchErrorAtPosition(channel, position1, position2)
B: Get2DPitchErrorCompensationAtPosition(channel, refPos1, refPos2)
C: Get2DPitchErrorCompensation(channel)
D: Disable2DPitchErrorCompensation(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
47. Model's answer: B
47. Correct answer: B
47. Result: Correct



Processing Question 48:
48. Context:
 WMX3APIFUNC SetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Set backlash compensation parameters. 

More... 

WMX3APIFUNC GetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Get backlash compensation parameters. 

More... 

WMX3APIFUNC EnableBacklashCompensation (int axis) 
Enable backlash compensation. More... 
WMX3APIFUNC DisableBacklashCompensation (int 
axis) 
Disable backlash compensation. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More...
--------------------------------------------
◆ 
SetBacklashCompensation() 

◆SetBacklashCompensation() 
WMX3APIFUNC 
SetBacklashCompen 
sation ( int axis, 
BacklashCompensa pBacklashCompData 
) 
Set backlash compensation parameters. 

Parameters 
[in] 
axis The axis to set the 
backlash compensation 
parameters. 
[in] 
pBacklashCompData A pointer to a 

BacklashCompensatio 
nData object that 
contains the backlash 
compensation 
parameters. 

Remarks 

Backlash compensation will apply an offset based on the direction of motion. 
Parameters determine whether this offset is applied immediately upon changing 
direction, or if it is applied more gradually over a short distance after changing 
direction. 

If backlash compensation is currently enabled, it must be disabled with the 
DisableBacklashCompensation function before the backlash compensation 
parameters can be changed with this function.
--------------------------------------------
ensation(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sationAtPosition(unsign 
ed int channel, double 
refPos1, double refPos2, 
double 
*pCompensation); 
Python 
def 
Get2DPitchErrorCompens 
ationAtPosition(channel, 
refPos1, refPos2) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double pCompensation 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetBacklashCompensati 
on(int axis, 
BacklashCompensation 
Data 
*pBacklashCompData); 
Python 
def 
SetBacklashCompensatio 
n(axis, 
pBacklashCompData) 
Returns 
Type int 
Value error code
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
-----------------------------------------------------------------------------------
48. Instruction: Set backlash compensation parameters.
A: SetBacklashCompensationParams(axis, pBacklashCompData)
B: SetBacklashCompensation(axis, pBacklashCompData)
C: Set2DPitchErrorCompensation(channel, pitchErrCompData2D)
D: DisableBacklashCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
48. Model's answer: B
48. Correct answer: B
48. Result: Correct



Processing Question 49:
49. Context:
 WMX3APIFUNC SetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Set backlash compensation parameters. 

More... 

WMX3APIFUNC GetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Get backlash compensation parameters. 

More... 

WMX3APIFUNC EnableBacklashCompensation (int axis) 
Enable backlash compensation. More... 
WMX3APIFUNC DisableBacklashCompensation (int 
axis) 
Disable backlash compensation. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More...
--------------------------------------------
ensation(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Get2DPitchErrorCompen 
sationAtPosition(unsign 
ed int channel, double 
refPos1, double refPos2, 
double 
*pCompensation); 
Python 
def 
Get2DPitchErrorCompens 
ationAtPosition(channel, 
refPos1, refPos2) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double pCompensation 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetBacklashCompensati 
on(int axis, 
BacklashCompensation 
Data 
*pBacklashCompData); 
Python 
def 
SetBacklashCompensatio 
n(axis, 
pBacklashCompData) 
Returns 
Type int 
Value error code
--------------------------------------------
This function obtains the backlash compensation parameters and whether or not 
backlash compensation is enabled for an axis. 

◆EnableBacklashCompensation() 

WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
Enable backlash compensation. 

Parameters 
[in] 
axis The axis to enable 
backlash compensation. 
Remarks 

This function enables backlash compensation for an axis. Backlash compensation 
parameters must be set beforehand using the SetBacklashCompensation 
function. 

◆DisableBacklashCompensation() 

WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
Disable backlash compensation. 
Parameters 
[in] 
axis The axis to disable 
backlash compensation. 
Remarks 

This function disables backlash compensation for an axis. Backlash compensation 
can be enabled again using the EnableBacklashCompensation function. 

 

CoreMotion Class Reference
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
-----------------------------------------------------------------------------------
49. Instruction: Get backlash compensation parameters.
A: Set2DPitchErrorCompensation_FreePosition(channel, pitchErrCompData2D)
B: EnableBacklashCompensation(axis)
C: ApplyBacklashCompensation(axis)
D: GetBacklashCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
49. Model's answer: D
49. Correct answer: D
49. Result: Correct



Processing Question 50:
50. Context:
 WMX3APIFUNC SetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Set backlash compensation parameters. 

More... 

WMX3APIFUNC GetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Get backlash compensation parameters. 

More... 

WMX3APIFUNC EnableBacklashCompensation (int axis) 
Enable backlash compensation. More... 
WMX3APIFUNC DisableBacklashCompensation (int 
axis) 
Disable backlash compensation. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More...
--------------------------------------------
This function obtains the backlash compensation parameters and whether or not 
backlash compensation is enabled for an axis. 

◆EnableBacklashCompensation() 

WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
Enable backlash compensation. 

Parameters 
[in] 
axis The axis to enable 
backlash compensation. 
Remarks 

This function enables backlash compensation for an axis. Backlash compensation 
parameters must be set beforehand using the SetBacklashCompensation 
function. 

◆DisableBacklashCompensation() 

WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
Disable backlash compensation. 
Parameters 
[in] 
axis The axis to disable 
backlash compensation. 
Remarks 

This function disables backlash compensation for an axis. Backlash compensation 
can be enabled again using the EnableBacklashCompensation function. 

 

CoreMotion Class Reference
--------------------------------------------
◆ 
SetBacklashCompensation() 

◆SetBacklashCompensation() 
WMX3APIFUNC 
SetBacklashCompen 
sation ( int axis, 
BacklashCompensa pBacklashCompData 
) 
Set backlash compensation parameters. 

Parameters 
[in] 
axis The axis to set the 
backlash compensation 
parameters. 
[in] 
pBacklashCompData A pointer to a 

BacklashCompensatio 
nData object that 
contains the backlash 
compensation 
parameters. 

Remarks 

Backlash compensation will apply an offset based on the direction of motion. 
Parameters determine whether this offset is applied immediately upon changing 
direction, or if it is applied more gradually over a short distance after changing 
direction. 

If backlash compensation is currently enabled, it must be disabled with the 
DisableBacklashCompensation function before the backlash compensation 
parameters can be changed with this function.
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetBacklashCompensati 
on(int axis, 
BacklashCompensation 
Data 
*pBacklashCompData); 
Python 
def 
GetBacklashCompensatio 
n(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
BacklashCompensa 
tionData -backlash 
comp data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnableBacklashCompen 
sation(int axis); 
Python 
def 
EnableBacklashCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
DisableBacklashCompe 
nsation(int axis); 
def 
DisableBacklashCompens 


ation(axis) 
Returns 
Type 
Value 
int 
error code 
Remarks 

 



CoreMotion Class
-----------------------------------------------------------------------------------
50. Instruction: Enable backlash compensation.
A: EnableCompensateBacklash(axis)
B: SetBacklashCompensation(axis, pBacklashCompData)
C: EnableBacklashCompensation(axis)
D: DisableBacklashCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
50. Model's answer: C
50. Correct answer: C
50. Result: Correct



Processing Question 51:
51. Context:
 WMX3APIFUNC SetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Set backlash compensation parameters. 

More... 

WMX3APIFUNC GetBacklashCompensation (int axis, 
BacklashCompensationData 

*pBacklashCompData) 

Get backlash compensation parameters. 

More... 

WMX3APIFUNC EnableBacklashCompensation (int axis) 
Enable backlash compensation. More... 
WMX3APIFUNC DisableBacklashCompensation (int 
axis) 
Disable backlash compensation. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More...
--------------------------------------------
This function obtains the backlash compensation parameters and whether or not 
backlash compensation is enabled for an axis. 

◆EnableBacklashCompensation() 

WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
WMX3APIFU 
NC 
EnableBackla 
shCompensa 
tion ( int axis ) 
Enable backlash compensation. 

Parameters 
[in] 
axis The axis to enable 
backlash compensation. 
Remarks 

This function enables backlash compensation for an axis. Backlash compensation 
parameters must be set beforehand using the SetBacklashCompensation 
function. 

◆DisableBacklashCompensation() 

WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
WMX3APIFU 
NC 
DisableBackl 
ashCompens 
ation ( int axis ) 
Disable backlash compensation. 
Parameters 
[in] 
axis The axis to disable 
backlash compensation. 
Remarks 

This function disables backlash compensation for an axis. Backlash compensation 
can be enabled again using the EnableBacklashCompensation function. 

 

CoreMotion Class Reference
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetBacklashCompensati 
on(int axis, 
BacklashCompensation 
Data 
*pBacklashCompData); 
Python 
def 
GetBacklashCompensatio 
n(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
BacklashCompensa 
tionData -backlash 
comp data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnableBacklashCompen 
sation(int axis); 
Python 
def 
EnableBacklashCompens 
ation(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
DisableBacklashCompe 
nsation(int axis); 
def 
DisableBacklashCompens 


ation(axis) 
Returns 
Type 
Value 
int 
error code 
Remarks 

 



CoreMotion Class
--------------------------------------------
WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Set pitch error compensation 
parameters. More... 

WMX3APIFUNC SetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 
Set free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationData 

*pitchErrCompData) 

Get pitch error compensation 
parameters. More... 

WMX3APIFUNC GetPitchErrorCompensation (int axis, 
PitchErrorCompensationFreePositionD 
ata *pitchErrCompData) 

Get free position mode pitch error 
compensation parameters. More... 

WMX3APIFUNC EnablePitchErrorCompensation (int 
axis) 

Enable pitch error compensation. More... 

WMX3APIFUNC DisablePitchErrorCompensation (int 
axis) 


Disable pitch error compensation. More...
-----------------------------------------------------------------------------------
51. Instruction: Disable backlash compensation.
A: CancelBacklashCompensation(axis)
B: ErrorToString(errCode)
C: DisableBacklashCompensation(axis)
D: EnablePitchErrorCompensation(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
51. Model's answer: C
51. Correct answer: C
51. Result: Correct



Processing Question 52:
52. Context:
 },
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
},
    {
        "No": 779,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 780,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the specified error code. "
-----------------------------------------------------------------------------------
52. Instruction: Get a string representation of the specified error code.
A: StartVT(pVTCommand)
B: Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)
C: ErrorMessage(errCode)
D: ErrorToString(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
52. Model's answer: D
52. Correct answer: D
52. Result: Correct



Processing Question 53:
53. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
53. Instruction: Get a string representation of the raw data of an API log.
A: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
B: ApiLogDataToString(logData, dataSize)
C: ApiLogToString(pLogData, logDataSize)
D: OverrideDec(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
53. Model's answer: C
53. Correct answer: C
53. Result: Correct



Processing Question 54:
54. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 


Get the version of the module library. 

More... 

Public Attributes 

PMAxisControl * axisControl 
PMAxisMotion * motion 
PMAxisHome * home 
PMAxisVelocity * velocity 
PMAxisTorque * torque 
PMAxisControl::HomeProfiles * homeProfiles 
PMAxisControl::VelocityProfiles * velProfiles 
PMAxisControl::TorqueProfiles * trqProfiles 

Friends 

class PMAxisControl 
class PMAxisMotion 
class PMAxisHome 
class PMAxisVelocity 
class PMAxisTorque 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code.
-----------------------------------------------------------------------------------
54. Instruction: Get the version of the module library.
A: GetLibVersionInfo()
B: StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)
C: ClearAxisAlarm(axis)
D: GetLibVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
54. Model's answer: D
54. Correct answer: D
54. Result: Correct



Processing Question 55:
55. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
55. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: RemoveAxisFromSyncGroup(groupId, axis)
B: IsDeviceValid(device_id)
C: GetOutByteEx(addr)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
55. Model's answer: D
55. Correct answer: D
55. Result: Correct



Processing Question 56:
56. Context:
 ◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetOutBit()
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetMBit()
-----------------------------------------------------------------------------------
56. Instruction: Get the version of the module rtdll.
A: GetVersion()
B: SetOutBits(pByte, pBit, pData, count)
C: StartMov(pPosCommand)
D: FetchVersionInfo()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
56. Model's answer: A
56. Correct answer: A
56. Result: Correct



Processing Question 57:
57. Context:
 WMX3. 


Overview 
System Status 


Axis Status 
 

Overview 

The main statuses can be read with the GetStatus function. 
Statuses for the entire system are explained in System Status. 
Statuses of each axis are explained in Axis Status. 
Both of the above types of statuses are read when the GetStatus function is called. 
Other specialized statuses are read by other API functions. For example, several 

specialized homing related statuses are obtained with the GetHomeData function. 
I/O data is read with the Get- functions in the Io class. User memory data is read with 
the Get- functions in the UserMemory class. 

Status Update Timing
--------------------------------------------
If the API Wait Until Motion Start parameter is enabled for an axis (this parameter is 
enabled by default), motion functions for that axis will not return until after the end of the 
communication cycle that the motion begins. When the motion function returns, Cyclic 
statuses would have already updated based on the first cycle of motion. Therefore, the 
GetStatus function can be called immediately after a motion function returns and still 
be guaranteed to contain Cyclic statuses that are updated based on the commanded 
motion. See Function Calls to blocking for the list of motion functions that are 
affected by the API Wait Until Motion Start parameter. 

Tutorials 

The tutorial at Tutorial 1-7: Reading the status and executing motion contains an 
example of how to obtain the status. 

 

System Status 

This page contains explanations for the following statuses that apply to the entire 
system:
--------------------------------------------
◆GetStatus() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
GetStatus ( 
PMMotionSta status ) 
Read the system status of PM motion from the engine. 

Parameters 
[out] 
status A pointer to an object of 
the PMMotionStatus 
class that will be filled in 
with the current PM 
motion system status. 
Remarks 

This function obtains the system status of PM motion. This function is typically 
called at regular intervals using a timer loop in order to monitor the status of the 
system and update the user interface. 

Statuses will be taken from a snapshot from the last communication cycle. This 
ensures that the statuses are not taken from two different communication cycles, 

e.g. the position data of axis 0 is from one cycle and the position data of axis 1 is 
from the next cycle. 
This function has a comparatively low execution overhead, as the statuses are read 
directly from memory without communicating with the engine. 

 

PMAxisControl Class Reference
--------------------------------------------
WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
-----------------------------------------------------------------------------------
57. Instruction: Read the current system status from the engine.
A: SetAbsoluteEncoderHomeOffset(axis, offset)
B: CheckConnectionStatus()
C: GetStatistic()
D: GetStatus()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
57. Model's answer: D
57. Correct answer: D
57. Result: Correct



Processing Question 58:
58. Context:
 ◆ExecEStop() 

) ) 
WMX3APIFU 
NC 
ExecEStop ( 
EStopLevel::T level 
Initiate an emergency stop to stop the motion of all axes. 

Parameters 
[in] 
level The level of the 
emergency stop. 

Remarks 

This function is used to stop all axes in emergency situations. 

The exact effect of the emergency stop will depend on the specified emergency stop 
"level". It is possible to call this function while the system is already in emergency 
stop state to increase the "level" of the emergency stop to a higher level. However, 
this function cannot be used to reduce the "level" of the emergency stop to a lower 
level.
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis); 
Python def Stop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(AxisSele 
ction *pAxisSelection); 
Python 
def 
ExecQuickStop_AxisSel(p 
AxisSelection) 
Type int
--------------------------------------------
WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More...
-----------------------------------------------------------------------------------
58. Instruction: Initiate an emergency stop to stop the motion of all axes.
A: ExecStartEmergencyStop(priorityLevel)
B: StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)
C: ExecEStop(level)
D: ExecQuickStop(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
58. Model's answer: C
58. Correct answer: C
58. Result: Correct



Processing Question 59:
59. Context:
 More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More...
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of a paused 
position command or interpolation 
command for multiple axes. More... 

WMX3APIFUNC OverridePos (PosCommand 
*pPosCommand) 
Override the target position of an axis 
currently executing a position command. 
The target position is specified as an 
absolute position. More... 

WMX3APIFUNC OverrideMov (PosCommand 
*pPosCommand) 

Override the target position of an axis 
currently executing a position command. 
The target position is specified as a 
relative position. More... 

WMX3APIFUNC OverrideVel (PosCommand 
*pPosCommand) 

Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand)
-----------------------------------------------------------------------------------
59. Instruction: Clear the emergency stop state to allow the axes to be controlled again.
A: ReleaseStdOut()
B: ReleaseEStop()
C: ReleaseSafetyStop()
D: StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
59. Model's answer: B
59. Correct answer: B
59. Result: Correct



Processing Question 60:
60. Context:
 Remarks 

This function clears the emergency stop state that is set by the ExecEStop function. 
See ExecEStop for additional information. 

◆TriggerFlightRecorder() 
WMX3APIFUNC 
TriggerFlightRec 
order ( ) 
Trigger the flight recorder to write the flight recorder data to file. 

Remarks 

This function will immediately trigger the flight recorder to write the flight recorder 
data to file, regardless of the flight recorder conditions specified in 
FlightRecorderParam. 

◆ResetFlightRecorder() 

WMX3APIFUNC 
ResetFlightReco 
rder ( 
WMX3APIFUNC 
ResetFlightReco 
rder ( 
) 
Reset the flight recorder so that it may be triggered again. 

Remarks
--------------------------------------------
◆ResetFlightRecorder() 

WMX3APIFUNC 
ResetFlightReco 
rder ( 
WMX3APIFUNC 
ResetFlightReco 
rder ( 
) 
Reset the flight recorder so that it may be triggered again. 

Remarks 

Once the flight recorder is triggered, it can normally not be triggered again until the 
engine is restarted to prevent the flight recorder file from being overwritten. When 
this function is called after the flight recorder has been triggered, the flight recorder 
will be reset so that it may be triggered again. When the flight recorder is triggered 
again, the previous flight recorder file will be overwritten unless it has been moved 
to a different directory or the Flight Recorder Time Stamp parameter is set to 
enabled. 

 

AxisControl Class Reference 

This class contains axis control functions. 

Public Member Functions 

AxisControl (CoreMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC SetServoOn (int axis, int newStatus) 
Turn a servo drive in the servo network 
on or off. More...
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
TriggerFlightRecorder(); 
Python 
def 
TriggerFlightRecorder() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResetFlightRecorder(); 
Python def ResetFlightRecorder() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ bool IsDeviceValid(); 
Python def IsDeviceValid() 
Returns 
Type bool 
Value 
Whether the device is 
alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPos(PosCommand 
*pPosCommand); 
Python 
def 
StartPos(pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMov(PosCommand 
*pPosCommand);
--------------------------------------------
This parameter determines whether flight recorder data should be saved to disk when 
one of the conditions for triggering the flight recorder is satisfied. The flight recorder 
data contains the position command and position feedback data of the axes for the last 
5000 cycles (5 seconds for a 1ms Cycle Time Milliseconds) from when the flight 
recorder is triggered. The flight recorder is stored in the path specified by the user with 
SetFlightRecorderPath, or "C:\" by default, and has the file name 
"wmx_flight_recorder_ipt0.txt". 

An additional "wmx_flight_recorder_ipt1.txt" is generated when using an additional 
interrupt (see Functions Calls affected by Interrupts). 

Once the flight recorder is triggered, it will not trigger again until the engine is restarted 
to avoid overwriting the existing flight recorder file. To allow the flight recorder to be 
triggered again without restarting the engine, call the ResetFlightRecorder function.
-----------------------------------------------------------------------------------
60. Instruction: Trigger the flight recorder to write the flight recorder data to file.
A: RecordFlightData()
B: TriggerFlightRecorder()
C: GetFlightRecorderParam()
D: Resume_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
60. Model's answer: B
60. Correct answer: B
60. Result: Correct



Processing Question 61:
61. Context:
 ◆ResetFlightRecorder() 

WMX3APIFUNC 
ResetFlightReco 
rder ( 
WMX3APIFUNC 
ResetFlightReco 
rder ( 
) 
Reset the flight recorder so that it may be triggered again. 

Remarks 

Once the flight recorder is triggered, it can normally not be triggered again until the 
engine is restarted to prevent the flight recorder file from being overwritten. When 
this function is called after the flight recorder has been triggered, the flight recorder 
will be reset so that it may be triggered again. When the flight recorder is triggered 
again, the previous flight recorder file will be overwritten unless it has been moved 
to a different directory or the Flight Recorder Time Stamp parameter is set to 
enabled. 

 

AxisControl Class Reference 

This class contains axis control functions. 

Public Member Functions 

AxisControl (CoreMotion *f) 
bool IsDeviceValid () 
WMX3APIFUNC SetServoOn (int axis, int newStatus) 
Turn a servo drive in the servo network 
on or off. More...
--------------------------------------------
Remarks 

This function clears the emergency stop state that is set by the ExecEStop function. 
See ExecEStop for additional information. 

◆TriggerFlightRecorder() 
WMX3APIFUNC 
TriggerFlightRec 
order ( ) 
Trigger the flight recorder to write the flight recorder data to file. 

Remarks 

This function will immediately trigger the flight recorder to write the flight recorder 
data to file, regardless of the flight recorder conditions specified in 
FlightRecorderParam. 

◆ResetFlightRecorder() 

WMX3APIFUNC 
ResetFlightReco 
rder ( 
WMX3APIFUNC 
ResetFlightReco 
rder ( 
) 
Reset the flight recorder so that it may be triggered again. 

Remarks
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
TriggerFlightRecorder(); 
Python 
def 
TriggerFlightRecorder() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResetFlightRecorder(); 
Python def ResetFlightRecorder() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ bool IsDeviceValid(); 
Python def IsDeviceValid() 
Returns 
Type bool 
Value 
Whether the device is 
alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPos(PosCommand 
*pPosCommand); 
Python 
def 
StartPos(pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMov(PosCommand 
*pPosCommand);
--------------------------------------------
WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL) 

Set flight recorder parameters. More... 

WMX3APIFUNC SetFlightRecorderPath (char *pPath) 
Set the file path to save the flight 
recorder data to. More... 
WMX3APIFUNC SetFlightRecorderPath (wchar_t *pPath) 
Set the file path to save the flight 
recorder data to. More... 

WMX3APIFUNC SetEmergencyStopParam 
(EmergencyStopParam *pParam, 
EmergencyStopParam 
*pParamError=NULL) 
Set emergency stop parameters. More... 

WMX3APIFUNC GetFeedbackParam (int axis, 
FeedbackParam *pParam) 

Get feedback parameter settings for an 
axis. More... 

WMX3APIFUNC GetHomeParam (int axis, HomeParam 

*pParam) 

Get home parameter settings for an axis. 

More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam)
-----------------------------------------------------------------------------------
61. Instruction: Reset the flight recorder so that it may be triggered again.
A: ClearFlightDataRecorder()
B: SetFlightRecorderParam(axis, pParam)
C: ResetFlightRecorder()
D: StartMov_Trigger(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
61. Model's answer: C
61. Correct answer: C
61. Result: Correct



Processing Question 62:
62. Context:
 },
    {
        "No": 1016,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CCLink Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 1017,
        "FunctionC++": "CCLINKAPIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Get the version of the module rtdll in CCLINK."
--------------------------------------------
WMX3APIFUNC 
Function 
C++ 
StartHelicalIntplPos(Heli 
calIntplCommand 
*pHelicalIntplCommand, 
Trigger *pTrigger); 
def 
Python 
StartHelicalIntplPos_Trigg 
er(pHelicalIntplCommand, 
pTrigger) 
Returns 
Type 
Value 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ 
StartHelicalIntplMov(Heli 
calIntplCommand 
*pHelicalIntplCommand, 
Trigger *pTrigger); 
def 
Python 
StartHelicalIntplMov_Trigg 
er(pHelicalIntplCommand, 
pTrigger) 
Returns 
Type 
Value 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ 
StartHelicalIntplPos(Heli 
calIntplCommand 
*pHelicalIntplCommand, 
TriggerEvents 
*pTriggerEvents); 
def 
Python 
StartHelicalIntplPos_Trigg 
erEvents(pHelicalIntplCom
--------------------------------------------
},
    {
        "No": 139,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplPos(HelicalIntplCommand *pHelicalIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis."
--------------------------------------------
},
    {
        "No": 121,
        "FunctionC++": "WMX3APIFUNC StartCircularIntplPos(ThroughAndEnd3DCircularIntplCommand *pCircularIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a triggered three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc. "
-----------------------------------------------------------------------------------
62. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: CheckDeviceValidity()
B: StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)
C: IsDeviceValid()
D: GetInputModuleId()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
62. Model's answer: C
62. Correct answer: C
62. Result: Correct



Processing Question 63:
63. Context:
 Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 

*pPosCommand, bool immediately=true) 

Start an absolute position PP mode 

motion command. More... 


WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, bool immediately=true) 

Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start an absolute position PP mode 
motion command. More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start a relative position PP mode motion 
command. More...
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
CoreMotion * cmApi 


Member Function Documentation 

◆StartPos() [1/6]
WMX3APIFU 
NC StartPos ( PosCommand pPosComman ) 
Start an absolute position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the motion 
command. 
Remarks 

This function moves the specified axis to the specified absolute position using a 
motion profile that is calculated by the specified parameters. 

See also 

Tutorial 3: Basic Motion Functions 

◆StartMov() [1/6]

WMX3APIFU 
NC StartMov ( 
PosCommand pPosComman ) 
Start a relative position command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
parameters of the 
motion. 

Remarks
-----------------------------------------------------------------------------------
63. Instruction: Start an absolute position command.
A: StartPos(pPosCommand)
B: OverrideDec(pPosCommand)
C: StartPosition(pPositionCommand)
D: StopJogAtPos(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
63. Model's answer: A
63. Correct answer: A
63. Result: Correct



Processing Question 64:
64. Context:
 WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
StartLinearIntplMov(LinearI Motion 
StartLinearIntplMov(LinearI Motion 
StartLinearIntplMov(LinearI Motion 
StartLinearIntplPos(LinearIn Motion 
StartLinearIntplPos(LinearIn Motion 
StartLinearIntplPos(LinearIn Motion 
StartMov(PosCommand *pPMotion 
StartMov(TriggerPosComma Motion 
StartMov(PosCommand *pPMotion 
StartMov(unsigned int numC Motion 
StartMov(unsigned int numC Motion 
StartMov(unsigned int numC Motion 
StartMovToJog(PosToJogCo Motion 
StartMovToJog(unsigned int Motion 
StartPos(PosCommand *pPo Motion 
StartPos(TriggerPosComma Motion 
StartPos(PosCommand *pPo Motion
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
Function 
C++ PosCommand 
*pPosCommand, 
TriggerEvents 
*pTriggerEvents); 
Python 
def 
StartPos_TriggerEvents(n 
umCommands, 
pPosCommand, 
pTriggerEvents) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMov(unsigned int 
numCommands, 
PosCommand 
*pPosCommand, 
TriggerEvents 
*pTriggerEvents); 
Python 
def 
StartMov_TriggerEvents(n 
umCommands, 
pPosCommand, 
pTriggerEvents) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
StartLinearIntplPos(Line 
arIntplCommand 
*pLinearIntplCommand); 
def 
StartLinearIntplPos(pLinea 
rIntplCommand)
-----------------------------------------------------------------------------------
64. Instruction: Start a relative position command.
A: StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)
B: StartMovToJog(pPosToJogCommand)
C: MoveStart(pStartPosition)
D: StartMov(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
64. Model's answer: D
64. Correct answer: D
64. Result: Correct



Processing Question 65:
65. Context:
 WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
*pPosCommand); 
Python 
def 
StartMov(numCommands, 
pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPos(unsigned int 
numCommands, 
TriggerPosCommand 
*pPosCommand); 
Python 
def 
StartPos_Trigger(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMov(unsigned int 
numCommands, 
TriggerPosCommand 
*pPosCommand); 
Python 
def 
StartMov_Trigger(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
StartPos(unsigned int 
numCommands,
-----------------------------------------------------------------------------------
65. Instruction: Start an absolute triggered position command.
A: newStartPos_Trigger(pCmdPosition)
B: StartPos_Trigger(pPosCommand)
C: StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)
D: StartMov_Trigger(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
65. Model's answer: B
65. Correct answer: B
65. Result: Correct



Processing Question 66:
66. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
-----------------------------------------------------------------------------------
66. Instruction: Start a relative triggered position command.
A: StartVelToMov(pTriggerPosCommand)
B: ActionTrigger_Start(pCommandPos)
C: StartMov_Trigger(pPosCommand)
D: StartVel_TimedVel(numCommands, pTimedVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
66. Model's answer: A
66. Correct answer: C
66. Result: Wrong



Processing Question 67:
67. Context:
 WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
67. Instruction: Start an absolute triggered position command with multiple trigger events.
A: Initialize_PositionAndTrigger(pPositionCommand, pTriggerEvents)
B: Stop(axis)
C: StartPos_TriggerEvents(pPosCommand, pTriggerEvents)
D: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
67. Model's answer: C
67. Correct answer: C
67. Result: Correct



Processing Question 68:
68. Context:
 WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
68. Instruction: Start a relative triggered position command with multiple trigger events.
A: OverrideJerkAcc(pPosCommand)
B: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
C: StartMov_TriggerEvents(pPosCommand, pTriggerEvents)
D: TriggerEventsOnMovement(pMovementCommand, pTriggerEvents).
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
68. Model's answer: C
68. Correct answer: C
68. Result: Correct



Processing Question 69:
69. Context:
 WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartCoordinatedPos (unsigned int 
numCommands, CoordinatedPosCommand 
*pPosCommand) 
Start multiple interpolations, each between pairs 
of two axes, where one axis executes a normal 
position command and the second axis travels a 
specified distance in the same amount of time. 
More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedJerkRatioPosCommand 
*pPosCommand) 
Start an interpolation between two or more axes, 
where one axis executes a normal position 
command and the remaining axes travel the 
specified distances in the same amount of time. 
More... 

WMX3APIFUNC StartTwoLinkLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
69. Instruction: Start absolute position commands for multiple axes.
A: StartCommandExecution(numCommands, initialPosition)
B: StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
C: StartPos(numCommands, pPosCommand)
D: StartCoordinatedPos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
69. Model's answer: C
69. Correct answer: C
69. Result: Correct



Processing Question 70:
70. Context:
 WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
-----------------------------------------------------------------------------------
70. Instruction: Start relative position commands for multiple axes.
A: StopJogAtPos(numCommands, pPosCommand)
B: OverrideJerkAcc(pPosCommand)
C: StartMov(numCommands, pPosCommand)
D: StartMoving(numCommands, playerPosition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
70. Model's answer: C
70. Correct answer: C
70. Result: Correct



Processing Question 71:
71. Context:
 WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
71. Instruction: Start absolute triggered position commands for multiple axes.
A: StartPos_Trigger(numCommands, pPosCommand)
B: SetInitialPosition(triggerCount, initialPositionCommand)
C: StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
D: StopJogAtPos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
71. Model's answer: C
71. Correct answer: A
71. Result: Wrong



Processing Question 72:
72. Context:
 WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
-----------------------------------------------------------------------------------
72. Instruction: Start relative triggered position commands for multiple axes.
A: StopMovementTrigger(numCommands, pausePositionCommand)
B: StartMov_Trigger(numCommands, pPosCommand)
C: AddRelativeSyncPhase(slaveAxis, phase, pProfile)
D: StartMov(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
72. Model's answer: D
72. Correct answer: B
72. Result: Wrong



Processing Question 73:
73. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
-----------------------------------------------------------------------------------
73. Instruction: Start absolute triggered position commands with multiple trigger events for multiple axes.
A: UpdateStartPositionTriggerEvents(numCommands, startingPosCommand, triggerEventsList)
B: StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
C: StopTrq(axis)
D: StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
73. Model's answer: B
73. Correct answer: B
73. Result: Correct



Processing Question 74:
74. Context:
 WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
74. Instruction: Start relative triggered position commands with multiple trigger events for multiple axes.
A: StartModifiedMov_TriggerEvents(numMovCommands, pPosCommandList, pTriggerEvents)
B: StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
C: OverridePos(pPosCommand)
D: StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
74. Model's answer: D
74. Correct answer: D
74. Result: Correct



Processing Question 75:
75. Context:
 WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
75. Instruction: Start an absolute position linear interpolation motion command.
A: StartHelicalIntplMov(pHelicalIntplCommand)
B: GetEmergencyStopParam()
C: StartLinearInterpolationPosition(p_linear_interpolation_command)
D: StartLinearIntplPos(pLinearIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
75. Model's answer: D
75. Correct answer: D
75. Result: Correct



Processing Question 76:
76. Context:
 WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 
Start an absolute position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 

Start a relative position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 


*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
76. Instruction: Start a relative position linear interpolation motion command.
A: StartLinearIntplMov(pLinearIntplCommand)
B: StartHelicalIntplMov(pHelicalIntplCommand)
C: StartLinearInterpolatedMovement(pLinearIntplCommand)
D: StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
76. Model's answer: A
76. Correct answer: A
76. Result: Correct



Processing Question 77:
77. Context:
 WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 
Start an absolute position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 

Start a relative position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 


*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
See also 
Linear Interpolation, Trigger Motion 

◆StartLinearIntplMov() [2/3]

WMX3APIFUNC 
StartLinearIntplMov ( 
) 
LinearIntplCommand 
Trigger * 
pLinearIntplCommand 
pTrigger 
Start a relative position triggered linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves any number of axes to the specified relative target positions 
(relative to the command positions of the axes at the time that this function is 
executed). The motion will only begin when the specified trigger condition is 
satisfied. The motion is interpolated so that the axes move together in a straight 
line. 

See also 
Linear Interpolation, Trigger Motion 

◆StartLinearIntplPos() [3/3]
--------------------------------------------
See also 

Linear Interpolation 

◆ 
StartLinearIntplPos() [2/3] 



WMX3APIFUNC 
StartLinearIntplPos ( 
) 
LinearIntplCommand 
Trigger * 
pLinearIntplCommand 
pTrigger 
Start an absolute position triggered linear interpolation motion command. 

Parameters 
[in] 
pLinearIntplCommand A pointer to an object of 
the 

LinearIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function moves any number of axes to the specified absolute target positions. 
The motion will only begin when the specified trigger condition is satisfied. The 
motion is interpolated so that the axes move together in a straight line. 

See also 
Linear Interpolation, Trigger Motion 

◆StartLinearIntplMov() [2/3]
-----------------------------------------------------------------------------------
77. Instruction: Start an absolute position triggered linear interpolation motion command.
A: StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)
B: StartLinearIntplPos_TriggerWithDelay(pLinearIntplCommand, pTrigger, delayTime)
C: StartPosToTrq(numCommands, pTriggerTrqCommand)
D: StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
77. Model's answer: A
77. Correct answer: A
77. Result: Correct



Processing Question 78:
78. Context:
 WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 
Start an absolute position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 

Start a relative position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 


*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
-----------------------------------------------------------------------------------
78. Instruction: Start a relative position triggered linear interpolation motion command.
A: StartMov(pPosCommand)
B: StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)
C: StartLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)
D: EditLinearIntplMov_Trigger(pLinearIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
78. Model's answer: C
78. Correct answer: C
78. Result: Correct



Processing Question 79:
79. Context:
 WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 
Start an absolute position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, Trigger 
*pTrigger) 

Start a relative position triggered linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand, TriggerEvents 


*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
*pTriggerEvents) 

Start a relative position triggered linear 
interpolation motion command with 
multiple trigger events. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
absolute center and end positions of the 
arc. More...
-----------------------------------------------------------------------------------
79. Instruction: Start an absolute position triggered linear interpolation motion command with multiple trigger events.
A: StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
B: StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
C: SuperimposeMov(pPosCommand)
D: StopLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
79. Model's answer: A
79. Correct answer: A
79. Result: Correct



Processing Question 80:
80. Context:
 WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
-----------------------------------------------------------------------------------
80. Instruction: Start a relative position triggered linear interpolation motion command with multiple trigger events.
A: StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
B: RespondToLinearIntplMov_TriggeredEvents(pLinearIntplCmd, pTriggeredEvents)
C: StartPos(pPosCommand)
D: StartLinearIntplMov_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
80. Model's answer: D
80. Correct answer: D
80. Result: Correct



Processing Question 81:
81. Context:
 WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
81. Instruction: Start a circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length.
A: StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)
B: StartPosToJog_Trigger(pTriggerJogCommand)
C: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
D: StartCircularIntplPos_CenterAndRadius(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
81. Model's answer: A
81. Correct answer: A
81. Result: Correct



Processing Question 82:
82. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
82. Instruction: Start a circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length.
A: StopCircularIntplMov_CenterAndLength(pCircularIntplCommand)
B: GetSingleTurn(axis)
C: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
D: StartCircularIntplMov_CenterAndLength(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
82. Model's answer: D
82. Correct answer: D
82. Result: Correct



Processing Question 83:
83. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
See also 
Linear Interpolation, Trigger Events 

◆StartCircularIntplPos() [1/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
CenterAndLe pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the absolute 
center position of the arc and the arc length. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the arc length are specified. 

See also 

Center and Length 

◆StartCircularIntplMov() [1/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplMov ( 
CenterAndLe pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the relative 
center position of the arc and the arc length.
--------------------------------------------
Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndLengthCircu 
larIntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The relative center position of the arc 
(relative to the command positions of the axes at the time that this function is 
executed) and the arc length are specified. 

See also 

Center and Length 

◆StartCircularIntplPos() [2/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
CenterAndEn pCircularIntplC ) 
Start a circular interpolation motion command. The arc is specified by the absolute 
center and end positions of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
CenterAndEndCircularI 
ntplCommand class 
that contains the 
interpolation parameters. 
Remarks 

This function moves two axes in a circular arc. The absolute center position of the 
arc and the absolute end position of the arc are specified. 

See also
-----------------------------------------------------------------------------------
83. Instruction: Start a circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc.
A: StartCircularIntplPos_CenterAndEnd(pCircularIntplSegment)
B: StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)
C: OverrideAcc(pPosCommand)
D: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
83. Model's answer: B
83. Correct answer: B
83. Result: Correct



Processing Question 84:
84. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
84. Instruction: Start a circular interpolation motion command. The arc is specified by the relative center and end positions of the arc.
A: StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)
B: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
C: StartMovToJog(pPosToJogCommand)
D: UpdateCircularIntplMov_CenterAndEnd(pUpdatedCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
84. Model's answer: B
84. Correct answer: B
84. Result: Correct



Processing Question 85:
85. Context:
 Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
-----------------------------------------------------------------------------------
85. Instruction: Start a circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: EndCircularInterpolation_PositionThroughTo(pCircularInterpolationCommand)
B: StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)
C: StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
85. Model's answer: D
85. Correct answer: D
85. Result: Correct



Processing Question 86:
86. Context:
 Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
86. Instruction: Start a circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplMotion_ThroughAndUpdate(pCircularIntplCommand)
B: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
C: SimulateLinearIntplPos(pSimulateLinearIntplCommand)
D: StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
86. Model's answer: D
86. Correct answer: D
86. Result: Correct



Processing Question 87:
87. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
87. Instruction: Start a circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc.
A: StartPVT(AdvMotion_PVTCommand pPVTCommand)
B: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
C: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
D: EndCircularIntplPos_LengthAndStart(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
87. Model's answer: C
87. Correct answer: C
87. Result: Correct



Processing Question 88:
88. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
88. Instruction: Start a circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc.
A: ReleaseEStop()
B: StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)
C: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
D: ExecuteCircularIntplMov_WithCommandOptions(commandOptions)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
88. Model's answer: B
88. Correct answer: B
88. Result: Correct



Processing Question 89:
89. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
89. Instruction: Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.
A: StopCircularIntplPos_SpeedAndDuration(pCircularIntplCommand)
B: StartVel_MaxTrq(pVelCommand, maxTrqLimit)
C: StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)
D: StartCircularIntplPos_RadiusAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
89. Model's answer: D
89. Correct answer: D
89. Result: Correct



Processing Question 90:
90. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
90. Instruction: Start a circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.
A: StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)
B: Import_AxisPrm(pPath)
C: StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)
D: EndCircularIntplMov_RadiusAndFinish(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
90. Model's answer: A
90. Correct answer: A
90. Result: Correct



Processing Question 91:
91. Context:
 Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
See also 

Radius and End 

◆StartCircularIntplPos() [6/18]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartCircularI 
ntplPos ( 
ThroughAndEn pCircularIntplC ) 
Start a three-dimensional circular interpolation motion command. The arc is 
specified by an absolute through point on the arc that the axes pass through during 
the interpolation, and the absolute end position of the arc. 

Parameters 
[in] 
pCircularIntplCommand A pointer to an object of 
the 
ThroughAndEnd3DCirc 
ularIntplCommand 
class that contains the 
interpolation parameters. 
Remarks 

This function moves three axes in a circular arc in three dimensional space. An 
absolute through position (a position on the arc that the axes pass through) and the 
absolute end position of the arc are specified. 

See also 

3D Through and End 

◆StartCircularIntplMov() [6/18]
-----------------------------------------------------------------------------------
91. Instruction: Start a three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)
B: StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)
C: InitiateCircularInterpolationAroundEnd3D(pCircularInterpolationCommand)
D: OverridePos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
91. Model's answer: B
91. Correct answer: B
91. Result: Correct



Processing Question 92:
92. Context:
 Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by an absolute through point 
on the arc that the axes pass through 
during the interpolation, and the absolute 
end position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand) 
Start a three-dimensional circular 
interpolation motion command. The arc 
is specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand) 

Start a circular interpolation motion 
command. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
92. Instruction: Start a three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)
B: InitiateCircularInterpolatedMoveIn3D(pCircularInterpolationSettings)
C: GetInputModuleId()
D: StartCircularIntplMov_LengthAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
92. Model's answer: A
92. Correct answer: A
92. Result: Correct



Processing Question 93:
93. Context:
 WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
93. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the absolute center position of the arc and the arc length.
A: StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplPos_CenterAndLength_Target(pCircularIntplCommand, pTarget)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
93. Model's answer: A
93. Correct answer: A
93. Result: Correct



Processing Question 94:
94. Context:
 WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
94. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the relative center position of the arc and the arc length.
A: StartCircularIntplPos_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)
B: StartPosToJog_Trigger(pTriggerJogCommand)
C: StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplMov_CenterLength_Trigger(pCircularIntplData, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
94. Model's answer: C
94. Correct answer: C
94. Result: Correct



Processing Question 95:
95. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
95. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the absolute center and end positions of the arc.
A: StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularInterpolationWithCenterAndEndTrigger(pCircularInterpolationCommand, pTrigger)
C: StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
95. Model's answer: A
95. Correct answer: A
95. Result: Correct



Processing Question 96:
96. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
96. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the relative center and end positions of the arc.
A: StartCircularIntplPos_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularIntplMov_CenterAndEnd(pCircularIntplCommand)
C: StartCircularIntplMov_CenterAndEnd_Trigger(pCircularCommand, pEndTrigger)
D: StartCircularIntplMov_CenterAndEnd_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
96. Model's answer: D
96. Correct answer: D
96. Result: Correct



Processing Question 97:
97. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
-----------------------------------------------------------------------------------
97. Instruction: Start a triggered circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularIntplPos_ThroughAndEnd_Trigger(pCommand, pTrigger)
C: OverrideJerkDec(numCommands, pPosCommand)
D: StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
97. Model's answer: D
97. Correct answer: D
97. Result: Correct



Processing Question 98:
98. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
-----------------------------------------------------------------------------------
98. Instruction: Start a triggered circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)
B: StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)
C: StartCircularIntplMov_StopAtEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
98. Model's answer: B
98. Correct answer: B
98. Result: Correct



Processing Question 99:
99. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
99. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the arc length and the absolute end position of the arc.
A: StartCircularIntplPos_LengthAndEnd_Trigger(pCmd, pTrig)
B: StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
C: StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartRampRateTrq(pTrqCommand, rampRate)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
99. Model's answer: C
99. Correct answer: C
99. Result: Correct



Processing Question 100:
100. Context:
 WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
100. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the arc length and the relative end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularIntplMov_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)
C: StartCircularInterpolatedMovement_LengthAndEnd_Trigger(pCircularInterpolatedCommand, pTrigger)
D: StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
100. Model's answer: B
100. Correct answer: B
100. Result: Correct



Processing Question 101:
101. Context:
 WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
-----------------------------------------------------------------------------------
101. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the absolute end position of the arc.
A: StartCircularIntplPos_RadiusAndEnd_Trigger(pCircleInterpolationCmd, pTriggerSignal)
B: GetPosFeedback(axis)
C: StartCircularIntplPos_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
101. Model's answer: D
101. Correct answer: D
101. Result: Correct



Processing Question 102:
102. Context:
 WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
102. Instruction: Start a triggered circular interpolation motion command. The arc is specified by the arc radius and the relative end position of the arc.
A: StartCircularInterpolationWithinRadiusAndEndOnTrigger(pCommand, pTrigger)
B: StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)
C: StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: StartCircularIntplPos_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
102. Model's answer: C
102. Correct answer: C
102. Result: Correct



Processing Question 103:
103. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
-----------------------------------------------------------------------------------
103. Instruction: Start a triggered three-dimensional circular interpolation motion command. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)
B: EndCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
C: StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
D: GetSyncGroup(groupId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
103. Model's answer: C
103. Correct answer: C
103. Result: Correct



Processing Question 104:
104. Context:
 WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 


the arc radius and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by an absolute 
through point on the arc that the axes 
pass through during the interpolation, 
and the absolute end position of the arc. 
More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered three-dimensional 
circular interpolation motion command. 
The arc is specified by a relative through 
point on the arc that the axes pass 
through during the interpolation, and the 
relative end position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
-----------------------------------------------------------------------------------
104. Instruction: Start a triggered three-dimensional circular interpolation motion command. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
B: StartCircularInterpolationMovement_ThroughEndTrigger(pCircularInterpolationCmd, pEndTrigger).
C: StartCircularIntplPos_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
D: SetFeedbackParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
104. Model's answer: A
104. Correct answer: A
104. Result: Correct



Processing Question 105:
105. Context:
 WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
105. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center position of the arc and the arc length.
A: SetParam(pParam)
B: StartCircularIntplPos_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: StartCircularInterpolation_CenterLength_TriggerEvents(pInterpolationCommand, pTriggerEvents)
D: StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
105. Model's answer: B
105. Correct answer: B
105. Result: Correct



Processing Question 106:
106. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
106. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center position of the arc and the arc length.
A: StartCircularIntplPos_CenterAndEnd(pCircularIntplCommand)
B: StartCircularIntplMov_CenterAndLength_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: UpdateCircularIntplMov_CenterAndLength_TriggerEvents(pCommand, pEvents)
D: StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
106. Model's answer: B
106. Correct answer: B
106. Result: Correct



Processing Question 107:
107. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
107. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the absolute center and end positions of the arc.
A: StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: ReleaseEStop()
C: StartCircularIntplPos_CenterAndEnd_TriggerEvents(command, triggerEvents)
D: StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
107. Model's answer: D
107. Correct answer: D
107. Result: Correct



Processing Question 108:
108. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
108. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the relative center and end positions of the arc.
A: StartCircularIntplMov_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: StartCircularIntplMov_TriggerEventsCenterAndEnd(pCircularIntplCommand, pTriggerEvents)
C: IsDeviceValid()
D: StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
108. Model's answer: A
108. Correct answer: A
108. Result: Correct



Processing Question 109:
109. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
-----------------------------------------------------------------------------------
109. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: StartJog(pJogCommand)
B: StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: UpdateCircularIntplPos_WithTriggerEvents(pCircularIntplCommand, pTriggerEvents)
D: StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
109. Model's answer: B
109. Correct answer: B
109. Result: Correct



Processing Question 110:
110. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
110. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: SetHomeDone(axis, value)
D: StartCircularInterpolationWithTriggerEvents(commandParameters, triggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
110. Model's answer: A
110. Correct answer: A
110. Result: Correct



Processing Question 111:
111. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
-----------------------------------------------------------------------------------
111. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the absolute end position of the arc.
A: StartCircularInterpolation_LoopAndExecute_TriggerEvents(pCircularInterpolation, pTriggerEvents)
B: StartJog_TimedJog(numCommands, pTimedJogCommand)
C: StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
D: StartCircularIntplPos_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
111. Model's answer: C
111. Correct answer: C
111. Result: Correct



Processing Question 112:
112. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
112. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc length and the relative end position of the arc.
A: StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: BeginCircularInterpolatedMovement_WithLengthAndStopTrigger(pCircularInterpolationCommand, pStopTriggerEvents)
C: StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
D: StartPosToVel_TriggerVel(pTriggerVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
112. Model's answer: C
112. Correct answer: C
112. Result: Correct



Processing Question 113:
113. Context:
 Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center position of the arc 
and the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 


nd *pCircularIntplCommand, Trigger 
*pTrigger) 

Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the absolute center and end positions of 
the arc. More...
-----------------------------------------------------------------------------------
113. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the absolute end position of the arc.
A: StartCircularIntplPos_CenterAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: StartCircularInterpolation_Pos_Radius_AndEnd_WatchdogEvents(pCircularInterpolationCommand, pWatchdogEvents)
D: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
113. Model's answer: B
113. Correct answer: B
113. Result: Correct



Processing Question 114:
114. Context:
 WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center position of the arc and 
the arc length. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndLengthCircularIntplComma 
nd *pCircularIntplCommand, 


TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center position of the arc and the 
arc length. More... 

WMX3APIFUNC StartCircularIntplPos 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc length and the relative end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the arc radius and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by
-----------------------------------------------------------------------------------
114. Instruction: Start a triggered circular interpolation motion command with multiple trigger events. The arc is specified by the arc radius and the relative end position of the arc.
A: StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: ExecTimedStop_TimeCmd(numCommands, pTimeCommand)
C: startCircularInterpolationWithRadiusAndTriggers(pCircularInterpolationCommand, pTriggerEvents)
D: StartCircularIntplMov_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
114. Model's answer: D
114. Correct answer: D
114. Result: Correct



Processing Question 115:
115. Context:
 WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
the relative center and end positions of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 
Start a triggered circular interpolation 
motion command. The arc is specified by 
an absolute through point on the arc that 
the axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, Trigger 
*pTrigger) 


Start a triggered circular interpolation 
motion command. The arc is specified by 
a relative through point on the arc that 
the axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
115. Instruction: Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by an absolute through point on the arc that the axes pass through during the interpolation, and the absolute end position of the arc.
A: StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: StartIntplPos_ThroughEnd3D_TriggerEvents(pInterpolatedPosCommand, pEventTriggers)
C: SetAxisParam_Axis(axis, pParam)
D: StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
115. Model's answer: A
115. Correct answer: A
115. Result: Correct



Processing Question 116:
116. Context:
 WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by a relative 
through point on the arc that the axes 
pass through during the interpolation, 
and the relative end position of the arc. 

More... 

WMX3APIFUNC StartCircularIntplPos 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the absolute end position of 
the arc. More...
--------------------------------------------
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
absolute center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 


WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(LengthAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
length and the relative end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered circular interpolation 
motion command with multiple trigger 


events. The arc is specified by the arc 
radius and the absolute end position of 
the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(RadiusAndEndCircularIntplCommand 
*pCircularIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered circular interpolation 
motion command with multiple trigger 
events. The arc is specified by the arc 
radius and the relative end position of 
the arc. More...
-----------------------------------------------------------------------------------
116. Instruction: Start a three-dimensional triggered circular interpolation motion command with multiple trigger events. The arc is specified by a relative through point on the arc that the axes pass through during the interpolation, and the relative end position of the arc.
A: StartCircularIntplMov_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
B: StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: Stop_Dec(axis, dec)
D: StartCircularIntplMov_WithEvents3D_Trigger(pCircularIntplCommand, pEventsTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
116. Model's answer: B
116. Correct answer: B
116. Result: Correct



Processing Question 117:
117. Context:
 WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
--------------------------------------------
WMX3APIFUNC StartCircularIntplMov 
(CenterAndEndCircularIntplCommand 
*pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by the 
relative center and end positions of the 
arc. More... 

WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 


Start a circular interpolation motion 
command. The arc is specified by an 
absolute through point on the arc that the 
axes pass through during the 
interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEndCircularIntplComman 
d *pCircularIntplCommand) 
Start a circular interpolation motion 
command. The arc is specified by a 
relative through point on the arc that the 
axes pass through during the 
interpolation, and the relative end 
position of the arc. More...
-----------------------------------------------------------------------------------
117. Instruction: Start a helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.
A: StartLinearIntplPos(pLinearIntplCommand)
B: StartTrq(numCommands, pTrqCommand)
C: StartHelicalInterpolationPosition(pHelicalInterpolationParams)
D: StartHelicalIntplPos(pHelicalIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
117. Model's answer: D
117. Correct answer: D
117. Result: Correct



Processing Question 118:
118. Context:
 WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
},
    {
        "No": 136,
        "FunctionC++": "WMX3APIFUNC StartHelicalIntplMov(HelicalIntplCommand *pHelicalIntplCommand)",
        "FunctionPython": "def StartHelicalIntplMov(pHelicalIntplCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis. "
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
-----------------------------------------------------------------------------------
118. Instruction: Start a helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.
A: SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)
B: StartHelicalInterpolatedMovement(helical_interpolation_command):
C: StartLinearIntplMov(pLinearIntplCommand)
D: StartHelicalIntplMov(pHelicalIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
118. Model's answer: D
118. Correct answer: D
118. Result: Correct



Processing Question 119:
119. Context:
 WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplMov() [2/3]

WMX3APIFUNC 
StartHelicalIntplMov ( 
WMX3APIFUNC 
StartHelicalIntplMov ( HelicalIntplComman pHelicalIntplComman 
Trigger * pTrigger 
) 
Start a triggered helical interpolation motion command. The helix is specified by the 
relative center position of the helix, the rotation amount in degrees, and the relative 
end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function is the same as the StartHelicalIntplMov function, except a trigger 
condition is specified. The motion will only begin when the specified trigger condition 
is satisfied. 

See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplPos() [3/3]
-----------------------------------------------------------------------------------
119. Instruction: Start a triggered helical interpolation motion command. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.
A: StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)
B: SetupHelicalIntplPos(pHelicalIntplConfig, pTriggerSource)
C: StartHelicalIntplPos_Trigger(pHelicalIntplCommand, pTrigger)
D: StartMovToJog(pPosToJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
119. Model's answer: C
119. Correct answer: C
119. Result: Correct



Processing Question 120:
120. Context:
 WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplMov() [2/3]

WMX3APIFUNC 
StartHelicalIntplMov ( 
WMX3APIFUNC 
StartHelicalIntplMov ( HelicalIntplComman pHelicalIntplComman 
Trigger * pTrigger 
) 
Start a triggered helical interpolation motion command. The helix is specified by the 
relative center position of the helix, the rotation amount in degrees, and the relative 
end position of the linear axis. 

Parameters 
[in] 
pHelicalIntplCommand A pointer to an object of 
the 

HelicalIntplCommand 

class that contains the 
interpolation parameters. 

[in] 
pTrigger A pointer to an object of 
the Trigger class that 
specifies the trigger 
condition. 

Remarks 

This function is the same as the StartHelicalIntplMov function, except a trigger 
condition is specified. The motion will only begin when the specified trigger condition 
is satisfied. 

See also 
Helical Interpolation, Trigger Motion 

◆StartHelicalIntplPos() [3/3]
-----------------------------------------------------------------------------------
120. Instruction: Start a triggered helical interpolation motion command. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.
A: OverrideDec(numCommands, pPosCommand)
B: StartHelicalIntplMov_Trigger(pHelicalIntplCommand, pTrigger)
C: TriggerHelicalMovement(pHelicalCommand, pTrigger)
D: StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
120. Model's answer: B
120. Correct answer: B
120. Result: Correct



Processing Question 121:
121. Context:
 WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
-----------------------------------------------------------------------------------
121. Instruction: Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the absolute center position of the helix, the rotation amount in degrees, and the absolute end position of the linear axis.
A: StartMov_Trigger(numCommands, pPosCommand)
B: StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
C: StartHelicalInterpolationWithTriggers(pHelicalInterpolationCommand, pTriggerEvents)
D: StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
121. Model's answer: B
121. Correct answer: B
121. Result: Correct



Processing Question 122:
122. Context:
 WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the relative center position of the 
helix, the rotation amount in degrees, 
and the relative end position of the linear 


axis. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 
More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered helical interpolation 
motion command with multiple trigger 
events. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartVelToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, TriggerPosCommand 


*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More...
--------------------------------------------
WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand) 

Start a helical interpolation motion 
command. The helix is specified by the 
absolute center position of the helix, the 
rotation amount in degrees, and the 
absolute end position of the linear axis. 

More... 

WMX3APIFUNC StartHelicalIntplMov 
(HelicalIntplCommand 
*pHelicalIntplCommand) 
Start a helical interpolation motion 
command. The helix is specified by the 
relative center position of the helix, the 
rotation amount in degrees, and the 
relative end position of the linear axis. 
More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 
*pHelicalIntplCommand, Trigger 
*pTrigger) 
Start a triggered helical interpolation 
motion command. The helix is specified 
by the absolute center position of the 
helix, the rotation amount in degrees, 
and the absolute end position of the 
linear axis. More...
--------------------------------------------
WMX3APIFUNC StartCircularIntplPos 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by an absolute through point on 
the arc that the axes pass through during 
the interpolation, and the absolute end 
position of the arc. More... 

WMX3APIFUNC StartCircularIntplMov 
(ThroughAndEnd3DCircularIntplComm 
and *pCircularIntplCommand, 
TriggerEvents *pTriggerEvents) 
Start a three-dimensional triggered 
circular interpolation motion command 
with multiple trigger events. The arc is 
specified by a relative through point on 
the arc that the axes pass through during 
the interpolation, and the relative end 
position of the arc. More... 

WMX3APIFUNC StartHelicalIntplPos 
(HelicalIntplCommand 


*pHelicalIntplCommand)
-----------------------------------------------------------------------------------
122. Instruction: Start a triggered helical interpolation motion command with multiple trigger events. The helix is specified by the relative center position of the helix, the rotation amount in degrees, and the relative end position of the linear axis.
A: StartHelicalInterpolatedMovementWithTriggers(pInterpolatedMovementCommand, pTriggerEvents)
B: StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
C: Export_AxisPrm_Axis(pPath, pAxisParam, axis)
D: StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
122. Model's answer: B
122. Correct answer: B
122. Result: Correct



Processing Question 123:
123. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
-----------------------------------------------------------------------------------
123. Instruction: Start an absolute triggered position command for an axis that is currently executing a velocity command.
A: StartTrqToPos(pTriggerPosCommand)
B: StartVelToPos(pTriggerPosCommand)
C: StartTrqToPos(pTriggerPosCommand)
D: UpdateTriggerPosition(pTriggerPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
123. Model's answer: B
123. Correct answer: B
123. Result: Correct



Processing Question 124:
124. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
-----------------------------------------------------------------------------------
124. Instruction: Start a relative triggered position command for an axis that is currently executing a velocity command.
A: IsDeviceValid()
B: StartMov_Trigger(pPosCommand)
C: UpdateCommandedMovement(pTriggerPosition)
D: StartVelToMov(pTriggerPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
124. Model's answer: D
124. Correct answer: D
124. Result: Correct



Processing Question 125:
125. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
-----------------------------------------------------------------------------------
125. Instruction: Start absolute triggered position commands for multiple axes that are currently executing velocity commands.
A: StartVelToMov(numCommands, pTriggerPosCommand)
B: UpdateStartVelToPos(numCommands, pStartingPosCmd)
C: StartVelToPos(numCommands, pTriggerPosCommand)
D: Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
125. Model's answer: C
125. Correct answer: C
125. Result: Correct



Processing Question 126:
126. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
--------------------------------------------
pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the OverrideVel API function for multiple axes. 

◆StartPosToVel() [1/4]

WMX3APIFU 
NC 
StartPosToVe 
l ( 
WMX3APIFU 
NC 
StartPosToVe 
l ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 
Remarks
-----------------------------------------------------------------------------------
126. Instruction: Start relative triggered position commands for multiple axes that are currently executing velocity commands.
A: OverrideVel(numCommands, pVelCommand)
B: StartVelToMov(numCommands, pTriggerPosCommand)
C: StartVelToPos(numCommands, pTriggerPosCommand)
D: StartMovementFromVelocity(numCommands, triggerPositionCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
126. Model's answer: B
126. Correct answer: B
126. Result: Correct



Processing Question 127:
127. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
-----------------------------------------------------------------------------------
127. Instruction: Start an absolute triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.
A: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
B: ClearAxisAlarm(axis)
C: StartVelToPos_TriggerEvents(pPosCommand, pTriggerEvents)
D: ConvertPosToVel_withTriggers(posCommand, triggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
127. Model's answer: C
127. Correct answer: C
127. Result: Correct



Processing Question 128:
128. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
128. Instruction: Start a relative triggered position command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.
A: StartPos_TriggerEvents(pPosCommand, pTriggerEvents)
B: InitializeMotionWithTriggers(pStartPosition, pTriggerEvents)
C: StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)
D: StartCircularIntplPos_LengthAndEnd_Trigger(pCircularIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
128. Model's answer: C
128. Correct answer: C
128. Result: Correct



Processing Question 129:
129. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
-----------------------------------------------------------------------------------
129. Instruction: Start absolute triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.
A: StartMov_Trigger(pPosCommand)
B: TransformVelToPos_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
C: StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
D: StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
129. Model's answer: C
129. Correct answer: C
129. Result: Correct



Processing Question 130:
130. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
-----------------------------------------------------------------------------------
130. Instruction: Start relative triggered position commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.
A: StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
B: StartMov(pPosCommand)
C: StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
D: StartVelToMov_TriggerEventsV2(numCommands, posCommands, triggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
130. Model's answer: A
130. Correct answer: A
130. Result: Correct



Processing Question 131:
131. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
131. Instruction: Start an absolute triggered position command for an axis that is currently executing a torque command.
A: GetFeedbackParam(axis)
B: StartTrqToPos(pTriggerPosCommand)
C: ConvertStartTrqToPos(triggerPosition)
D: StartVelToMov(pTriggerPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
131. Model's answer: B
131. Correct answer: B
131. Result: Correct



Processing Question 132:
132. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
This function executes the StartVelToMov API function for multiple axes. All 
commanded axes share the same trigger events. 


◆StartTrqToPos() [1/4]
WMX3APIFU 
NC 
StartTrqToPo 
s ( TriggerPosCo pTriggerPosCo ) 
Start an absolute triggered position command for an axis that is currently executing 
a torque command. 

Parameters 
[in] 
pTriggerPosCommand A pointer to an object of 
the 

TriggerPosCommand 

class that contains the 
position command 
parameters. 

Remarks 

This function will override a torque command with a position command to an 
absolute position when the trigger condition is satisfied. The axis command mode 
will automatically change from Torque mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToMov() [1/4]
-----------------------------------------------------------------------------------
132. Instruction: Start a relative triggered position command for an axis that is currently executing a torque command.
A: UpdateTrqForMovement(pTriggerPosition)
B: StartMov_Trigger(pPosCommand)
C: Export_SysPrm(pPath, pParam)
D: StartTrqToMov(pTriggerPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
132. Model's answer: D
132. Correct answer: D
132. Result: Correct



Processing Question 133:
133. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
See also 

Command Mode 

◆StartTrqToPos() [2/4]

WMX3APIFUNC 
StartTrqToPos ( 
) 
WMX3APIFUNC 
StartTrqToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing torque commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartTrqToPos API function for multiple axes. 

◆StartTrqToMov() [2/4]

WMX3APIFUNC 
StartTrqToMov ( 
) 
WMX3APIFUNC 
StartTrqToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
-----------------------------------------------------------------------------------
133. Instruction: Start absolute triggered position commands for multiple axes that are currently executing torque commands.
A: StartTrqToPos(numCommands, pTriggerPosCommand)
B: StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)
C: StartVelToPos(numCommands, pTriggerPosCommand)
D: StartTrqToPosition(numCommands, initialPositionCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
133. Model's answer: A
133. Correct answer: A
133. Result: Correct



Processing Question 134:
134. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
-----------------------------------------------------------------------------------
134. Instruction: Start relative triggered position commands for multiple axes that are currently executing torque commands.
A: StartMov(numCommands, pPosCommand)
B: StartTrqToMov(numCommands, pTriggerPosCommand)
C: InitializeMovementFromPosition(numCommands, initialTriggerPosition)
D: SetAxisUnit(axis, unit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
134. Model's answer: B
134. Correct answer: B
134. Result: Correct



Processing Question 135:
135. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
135. Instruction: Start an absolute triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.
A: StartPos_TriggerEvents(pPosCommand, pTriggerEvents)
B: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
C: StartVel_MaxTrq(pVelCommand, maxTrqLimit)
D: SetPositionAndTriggerEvents(positionValue, triggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
135. Model's answer: B
135. Correct answer: B
135. Result: Correct



Processing Question 136:
136. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
This function will override a torque command with a position command to an 
absolute position when the multiple event trigger condition is satisfied. The axis 
command mode will automatically change from Torque mode to Position mode. 

This function does not support the SameTimeCompletion, 
StaggeredTimeCompletion, and StaggeredDistanceCompletion trigger types. 
Specifying these trigger types will cause the TriggerTypeNotSupported error to be 
returned. 

See also 

Command Mode 

◆StartTrqToMov() [3/4]

pPosCommand, pPosCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartTrqToMov ( 
) 
PosCommand * 
TriggerEvents * 
Start a relative triggered position command for an axis that is currently executing a 
torque command. The trigger condition can have multiple trigger events.
-----------------------------------------------------------------------------------
136. Instruction: Start a relative triggered position command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.
A: StopTrq(axis)
B: StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)
C: StartPos_TriggerEvents(pPosCommand, pTriggerEvents)
D: DetectMovementandTriggerEvents(pNewPosition, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
136. Model's answer: B
136. Correct answer: B
136. Result: Correct



Processing Question 137:
137. Context:
 WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
137. Instruction: Start absolute triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.
A: StartMovToJog(numCommands, pPosToJogCommand)
B: StartTrqToPoint_TriggerEvents(numInputs, pPointInput, pTriggerEvents)
C: StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
D: StartTrqToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
137. Model's answer: D
137. Correct answer: D
137. Result: Correct



Processing Question 138:
138. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
138. Instruction: Start relative triggered position commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.
A: StartTorqueToMovement_TriggerEvents(numCommands, positionCommands, triggerEvents)
B: StartTrqToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
C: Cancel(axis)
D: StartVelToMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
138. Model's answer: B
138. Correct answer: B
138. Result: Correct



Processing Question 139:
139. Context:
 WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More... 

WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand) 
Start a timed jog command. More... 
WMX3APIFUNC StartJog (TriggerJogCommand 
*pJogCommand) 
Start a triggered jog command. More... 

WMX3APIFUNC StartJog (TriggerTimedJogCommand 

*pTimedJogCommand) 

Start a triggered timed jog command. 

More... 

WMX3APIFUNC StartJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command with 
multiple trigger events. More... 
WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed jog command with 
multiple trigger events. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 

JogCommand *pJogCommand) 

Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More...
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
Python StartJog_TimedJog(pTime 
dJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
JogCommand 
*pJogCommand); 
Python 
def 
StartJog(numCommands, 
pJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
TimedJogCommand 
*pTimedJogCommand); 
Python 
def 
StartJog_TimedJog(numC 
ommands, 
pTimedJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(TriggerJ 
ogCommand 
*pTriggerJogCommand);
--------------------------------------------
},
    {
        "No": 158,
        "FunctionC++": "WMX3APIFUNC StartJog(TimedJogCommand *pTimedJogCommand)",
        "FunctionPython": "def StartJog_TimedJog(pTimedJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a timed jog command."
    },
    {
        "No": 159,
        "FunctionC++": "WMX3APIFUNC StartJog(unsigned int numCommands, JogCommand *pJogCommand)",
        "FunctionPython": "def StartJog(numCommands, pJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start jog commands for multiple axes. "
-----------------------------------------------------------------------------------
139. Instruction: Start a jog command.
A: StartJog(pJogCommand)
B: StartJog(numCommands, pJogCommand)
C: GetHomeParam(axis)
D: BeginRunning(pRunningCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
139. Model's answer: A
139. Correct answer: A
139. Result: Correct



Processing Question 140:
140. Context:
 WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More... 

WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand) 
Start a timed jog command. More... 
WMX3APIFUNC StartJog (TriggerJogCommand 
*pJogCommand) 
Start a triggered jog command. More... 

WMX3APIFUNC StartJog (TriggerTimedJogCommand 

*pTimedJogCommand) 

Start a triggered timed jog command. 

More... 

WMX3APIFUNC StartJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command with 
multiple trigger events. More... 
WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed jog command with 
multiple trigger events. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 

JogCommand *pJogCommand) 

Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More...
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
Python StartJog_TimedJog(pTime 
dJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
JogCommand 
*pJogCommand); 
Python 
def 
StartJog(numCommands, 
pJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
TimedJogCommand 
*pTimedJogCommand); 
Python 
def 
StartJog_TimedJog(numC 
ommands, 
pTimedJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(TriggerJ 
ogCommand 
*pTriggerJogCommand);
--------------------------------------------
Position commands executed by StartPos (and equivalent events) can be 
overridden by jog commands. Jog commands can also be overridden by StartPos 
(and equivalent events). However, an axis that is executing trigger motion cannot be 
overridden by jog commands until after the trigger condition has been satisfied. 
Similarly, an axis that is paused with the Pause function cannot be overridden by jog 
commands until after it is resumed with the Resume function. 

◆StartJog() [2/12]
WMX3APIFU 
NC StartJog ( TimedJogCom pTimedJogComma ) 
Start a timed jog command. 
Parameters 

[in] 
pTimedJogCommand A pointer to an object of 
the 
TimedJogCommand 
class that contains the 
timed jog command 
parameters. 
Remarks
-----------------------------------------------------------------------------------
140. Instruction: Start a timed jog command.
A: Export_AxisPrm(pPath, pAxisParam)
B: StartJog_TimedJog_v2(pTimedJogCommand)
C: StartJog_TimedJog(pTimedJogCommand)
D: StartVel_TimedVel(pTimedVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
140. Model's answer: C
140. Correct answer: C
140. Result: Correct



Processing Question 141:
141. Context:
 Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More... 

WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand) 
Start a timed jog command. More... 
WMX3APIFUNC StartJog (TriggerJogCommand 
*pJogCommand) 
Start a triggered jog command. More... 

WMX3APIFUNC StartJog (TriggerTimedJogCommand 

*pTimedJogCommand) 

Start a triggered timed jog command. 

More... 

WMX3APIFUNC StartJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command with 
multiple trigger events. More... 
WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed jog command with 
multiple trigger events. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 

JogCommand *pJogCommand) 

Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
141. Instruction: Start jog commands for multiple axes.
A: StartMovToJog(numCommands, pPosToJogCommand)
B: BeginJog(numCommands, jogSettings)
C: StartPosToJog_Trigger(pTriggerJogCommand)
D: StartJog(numCommands, pJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
141. Model's answer: D
141. Correct answer: D
141. Result: Correct



Processing Question 142:
142. Context:
 Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More... 

WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand) 
Start a timed jog command. More... 
WMX3APIFUNC StartJog (TriggerJogCommand 
*pJogCommand) 
Start a triggered jog command. More... 

WMX3APIFUNC StartJog (TriggerTimedJogCommand 

*pTimedJogCommand) 

Start a triggered timed jog command. 

More... 

WMX3APIFUNC StartJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command with 
multiple trigger events. More... 
WMX3APIFUNC StartJog (TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed jog command with 
multiple trigger events. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 

JogCommand *pJogCommand) 

Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
WMX3APIFUNC 
StartJog ( unsigned int numCommands, 
TimedJogCommand pTimedJogCommand 
) 
Start timed jog commands for multiple axes. 

Parameters 
[in] 
numCommands The number of timed jog 
commands. Each 
command controls a 
single axis. 
[in] 
pTimedJogCommand A pointer to an array of 
objects of the 

TimedJogCommand 

class that contain the 
parameters of the jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This command executes the StartJog function for multiple axes. 

◆StartJog() [9/12]

WMX3APIFUNC 
StartJog ( 
WMX3APIFUNC 
StartJog ( 
unsigned int numCommands, 
TriggerJogComman pJogCommand 
) 
Start triggered jog commands for multiple axes.
--------------------------------------------
Python StartJog_TimedJog(pTime 
dJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
JogCommand 
*pJogCommand); 
Python 
def 
StartJog(numCommands, 
pJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartJog(unsigned int 
numCommands, 
TimedJogCommand 
*pTimedJogCommand); 
Python 
def 
StartJog_TimedJog(numC 
ommands, 
pTimedJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(TriggerJ 
ogCommand 
*pTriggerJogCommand);
-----------------------------------------------------------------------------------
142. Instruction: Start timed jog commands for multiple axes.
A: Pause_AxisSel(pAxisSelection)
B: StartJog_TimedJog(numCommands, pTimedJogCommand)
C: StartTimedJog(numCommands, timedJogCommandList)
D: StartPosToJog_Trigger(numCommands, pTriggerJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
142. Model's answer: B
142. Correct answer: B
142. Result: Correct



Processing Question 143:
143. Context:
 WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
-----------------------------------------------------------------------------------
143. Instruction: Start a triggered jog command for an axis that is currently executing a position command.
A: SendStartPosToJogTrigger(pJogStartPosCommand)
B: StartPosToJog_Trigger(pTriggerJogCommand)
C: StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)
D: StartTrqToVel_TriggerVel(pTriggerVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
143. Model's answer: B
143. Correct answer: B
143. Result: Correct



Processing Question 144:
144. Context:
 WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
-----------------------------------------------------------------------------------
144. Instruction: Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.
A: Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)
B: StartPos_Trigger(numCommands, pPosCommand)
C: StartPosToJog_Trigger(numCommands, pTriggerJogCommand)
D: StartJog_Trigger(numCommands, pJogTriggerCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
144. Model's answer: C
144. Correct answer: C
144. Result: Correct



Processing Question 145:
145. Context:
 WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
Function 
C++ int numCommands, 
JogCommand 
*pJogCommand, 
TriggerEvents 
*pTriggerEvents); 
Python 
def 
StartPosToJog_TriggerEv 
ents(numCommands, 
pJogCommand, 
pTriggerEvents) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(PosToJo 
gCommand 
*pPosToJogCommand); 
Python 
def 
StartPosToJog_PosToJog( 
pPosToJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(unsigned 
int numCommands, 
PosToJogCommand 
*pPosToJogCommand); 
Python 
def 
StartPosToJog_PosToJog( 
numCommands, 
pPosToJogCommand) 
Type int
-----------------------------------------------------------------------------------
145. Instruction: Start triggered jog commands for multiple axes that are currently executing position commands.
A: StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)
B: StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)
C: SetNegativeTrqLimit(axis, torque)
D: InitiateJogWithTriggers(pJogCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
145. Model's answer: B
145. Correct answer: A
145. Result: Wrong



Processing Question 146:
146. Context:
 WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
Function 
C++ int numCommands, 
JogCommand 
*pJogCommand, 
TriggerEvents 
*pTriggerEvents); 
Python 
def 
StartPosToJog_TriggerEv 
ents(numCommands, 
pJogCommand, 
pTriggerEvents) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(PosToJo 
gCommand 
*pPosToJogCommand); 
Python 
def 
StartPosToJog_PosToJog( 
pPosToJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPosToJog(unsigned 
int numCommands, 
PosToJogCommand 
*pPosToJogCommand); 
Python 
def 
StartPosToJog_PosToJog( 
numCommands, 
pPosToJogCommand) 
Type int
--------------------------------------------
◆StartPosToJog() [2/6]
WMX3APIFUNC 
StartPosToJog ( unsigned int numCommands, 
TriggerJogComman pTriggerJogCommand 
) 
Start triggered jog commands for multiple axes that are currently executing position 
commands. 

Parameters 
[in] 
numCommands The number of position 
to jog commands. Each 
command controls a 
single axis. 

[in] 
pTriggerJogCommand A pointer to an array of 
objects of the 

PosToJogCommand 

class that contain the 
parameters of the 
position to jog 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 

This function executes the StartPosToJog API function for multiple axes. 

◆StartPosToJog() [3/6]

pJogCommand, pJogCommand, 
pTriggerEvents 
WMX3APIFUNC 
StartPosToJog ( 
) 
JogCommand * 
TriggerEvents * 
Start a triggered jog command for an axis that is currently executing a position 
command. The trigger condition can have multiple trigger events.
-----------------------------------------------------------------------------------
146. Instruction: Start a triggered jog command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.
A: StartPosToJog_TriggerEvents(numJogCommands, pJogCommands, pTriggerEvents)
B: StartPosToJog_TriggerEvents(numCommands, pJogCommand, pTriggerEvents)
C: StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
D: ResolveSync(slaveAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
146. Model's answer: B
146. Correct answer: B
146. Result: Correct



Processing Question 147:
147. Context:
 WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
},
    {
        "No": 165,
        "FunctionC++": "WMX3APIFUNC StartPosToJog(PosToJogCommand *pPosToJogCommand)",
        "FunctionPython": "def StartPosToJog_PosToJog(pPosToJogCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start an absolute position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied. "
-----------------------------------------------------------------------------------
147. Instruction: Start an absolute position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied.
A: PosToJog_StartPosToJog(pPosToJogCommand)
B: StartCircularIntplPos_CenterAndLength(pCircularIntplCommand)
C: StartPosToJog_Trigger(pTriggerJogCommand)
D: StartPosToJog_PosToJog(pPosToJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
147. Model's answer: D
147. Correct answer: D
147. Result: Correct



Processing Question 148:
148. Context:
 WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
-----------------------------------------------------------------------------------
148. Instruction: Start an absolute position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied.
A: StartPosToJog_PosToJogCommands(numCommands, pPosToJogCommands)
B: StartPosToJog_PosToJog(numCommands, pPosToJogCommand)
C: StartPosToJog_Trigger(numCommands, pTriggerJogCommand)
D: SimulateLinearIntplPos(pSimulateLinearIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
148. Model's answer: B
148. Correct answer: B
148. Result: Correct



Processing Question 149:
149. Context:
 WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
-----------------------------------------------------------------------------------
149. Instruction: Start a relative position command and a triggered jog command simultaneously. The position command will be overridden by the jog command when the trigger condition is satisfied.
A: StartMovToJog(pPosToJogCommand)
B: StartHelicalIntplPos_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
C: MoveToJogStartPosition(pStartPositionToJog)
D: StartMov_Trigger(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
149. Model's answer: A
149. Correct answer: A
149. Result: Correct



Processing Question 150:
150. Context:
 WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
-----------------------------------------------------------------------------------
150. Instruction: Start a relative position command and a triggered jog command simultaneously for multiple axes. The position command will be overridden by the jog command when the trigger condition is satisfied.
A: StartMovToJog(numCommands, pPosToJogCommand)
B: StartJog(numCommands, pJogCommand)
C: StartMovementToJog(numCommands, initialPositionToJogFrom)
D: SyncToJog(slaveAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
150. Model's answer: A
150. Correct answer: A
150. Result: Correct



Processing Question 151:
151. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis); 
Python def Stop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(AxisSele 
ction *pAxisSelection); 
Python 
def 
ExecQuickStop_AxisSel(p 
AxisSelection) 
Type int
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the motion of an axis that is executing a position command, jog 
command, interpolation command, or home command. 

This function will only stop axes running in Position command mode. To stop axes 
running in Velocity command mode, use the Stop function. To stop axes running in 
Torque command mode, use the StopTrq function. 

If the axis was executing a position command or jog command, it will decelerate to 
rest using the profile, deceleration, and jerk deceleration parameters of the position 
or jog command. 

If the axis was executing a home command, it will decelerate to rest using the 
Homing Velocity Slow Dec parameter, using a trapezoidal motion profile.
-----------------------------------------------------------------------------------
151. Instruction: Stop the motion of an axis.
A: SetParam_Axis(axis, pParam)
B: StopEngine(axis)
C: Stop(axis)
D: StartHome(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
151. Model's answer: C
151. Correct answer: C
151. Result: Correct



Processing Question 152:
152. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More...
--------------------------------------------
*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
-----------------------------------------------------------------------------------
152. Instruction: Stop the motion of multiple axes.
A: StartHome_AxisSel(pAxisSelection)
B: Stop_AxisSel(pAxisSelection)
C: StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)
D: Stop_AxisSelection(pSelectedAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
152. Model's answer: B
152. Correct answer: B
152. Result: Correct



Processing Question 153:
153. Context:
 Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

This function executes the Stop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆Stop() [3/4]

WMX3APIFUNC 
Stop ( 
) 
WMX3APIFUNC 
Stop ( 
) 
int 
axis, 
double dec 
Stop the motion of an axis using the specified deceleration and a trapezoidal profile. 

Parameters 
[in] 
[in] 
axis 
dec 
The axis to stop. 
The deceleration to stop 
at. 
Remarks 

This function stops the motion of an axis using the specified deceleration. The axis 
stops using a trapezoidal profile regardless of the motion the axis was previously 
executing.
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
},
    {
        "No": 170,
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
    },
    {
        "No": 171,
        "FunctionC++": "WMX3APIFUNC Stop(int axis, double dec)",
        "FunctionPython": "def Stop_Dec(axis, dec)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis using the specified deceleration and a trapezoidal profile."
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
-----------------------------------------------------------------------------------
153. Instruction: Stop the motion of an axis using the specified deceleration and a trapezoidal profile.
A: Stop_Deceleration(axis, dec)
B: StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)
C: SetHomeDone(axis, value)
D: Stop_Dec(axis, dec)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
153. Model's answer: D
153. Correct answer: D
153. Result: Correct



Processing Question 154:
154. Context:
 WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
--------------------------------------------
◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
This function stops the motion of an axis using the specified deceleration. The axis 
stops using a trapezoidal profile regardless of the motion the axis was previously 
executing. 

This function will only stop axes running in Position command mode. To stop axes 
running in Velocity command mode, use the Stop function. To stop axes running in 
Torque command mode, use the StopTrq function. 

If the commanded axis is in Idle state, this function will return no error. 

◆Stop() [4/4]

WMX3APIFUNC 
Stop ( 
) 
WMX3APIFUNC 
Stop ( 
) 
unsigned int numCommands, 
StopCommand * pStopCommand 
Stop the motion of multiple axes using the specified decelerations and trapezoidal 
profiles. 

Parameters 

[in] 
numCommands The number of stop 
motions. Each stop 
motion commands a 
single axis.
--------------------------------------------
When this function commands a single turn axis and the target position is between 0 
and the single turn encoder count, then the axis will continue rotating in the current 
direction of rotation and start stopping at the position at which the axis would finish 
movement at the target position given the specified profile parameters. 

◆StopJogAtPos() [2/2]

WMX3APIFUNC 
StopJogAtPos ( 
WMX3APIFUNC 
StopJogAtPos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Stop multiple axes executing jog commands at timing that wil cause the axes to stop 
at exactly the specified positions. 

Parameters 
[in] 
numCommands The number of stop jog 
at pos motion 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
coordinated position 
commands. The number 
of objects in the array 
must be equal to 
numCommands.
-----------------------------------------------------------------------------------
154. Instruction: Stop the motion of multiple axes using the specified decelerations and trapezoidal profiles.
A: StartMovToJog(numCommands, pPosToJogCommand)
B: Stop_StopCommand(numCommands, pStopCommand)
C: StopCommand(numCommands, stopCommandParameters)
D: StartCircularIntplPos_ThroughAndEnd3D(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
154. Model's answer: B
154. Correct answer: B
154. Result: Correct



Processing Question 155:
155. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
int axis 
) 
Stop execution of the cyclic position command buffer of an axis and decelerate the 
axis to a stop using the quick stop deceleration. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 
Remarks 

The specified axis will stop executing the cyclic position command and decelerate 
from its current velocity using the Quick Stop Dec parameter. After the quick stop 
finishes, the axis will be in the Idle state. 

Any remaining position commands in the buffer will be cleared. 

◆ExecQuickStop() [2/2]
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]
-----------------------------------------------------------------------------------
155. Instruction: Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration.
A: Stop(axis)
B: ExecQuickStop(axis)
C: ExecQuickStopCommand(axis)
D: Stop_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
155. Model's answer: B
155. Correct answer: B
155. Result: Correct



Processing Question 156:
156. Context:
 WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More...
-----------------------------------------------------------------------------------
156. Instruction: Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration.
A: Stop_AxisSel(pAxisSelection)
B: ExecQuickStop_AxisSel(pAxisSelection)
C: StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)
D: ExecuteQuickStop_AxisSelection(axisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
156. Model's answer: B
156. Correct answer: B
156. Result: Correct



Processing Question 157:
157. Context:
 WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in.
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecTimedStop(int axis, 
double 
timeMilliseconds); 
Python 
def 
ExecTimedStop_TimeMilli( 
axis, timeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecTimedStop(AxisSel 
ection *pAxisSelection, 
double 
timeMilliseconds); 
Python 
def 
ExecTimedStop_AxisSel(p 
AxisSelection, 
timeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
ExecTimedStop(unsigne 
d int numCommands, 
TimeCommand 
*pTimeCommand); 
def 
ExecTimedStop_TimeCm 
d(numCommands,
-----------------------------------------------------------------------------------
157. Instruction: Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile.
A: Export_SysPrm_Axis(pPath, pParam, axis)
B: ExecuteWithTimeout(axis, timeoutMillis)
C: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
D: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
157. Model's answer: C
157. Correct answer: C
157. Result: Correct



Processing Question 158:
158. Context:
 WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks
--------------------------------------------
WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in.
-----------------------------------------------------------------------------------
158. Instruction: Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile
A: ExecQuickStop_AxisSel(pAxisSelection)
B: ExecTimedOperation_AxisSelection(pSelectedAxis, nTimeMs)
C: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
D: GetPVTBytesPerPoint(pBytes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
158. Model's answer: C
158. Correct answer: C
158. Result: Correct



Processing Question 159:
159. Context:
 *pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More...
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
},
    {
        "No": 176,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 177,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
-----------------------------------------------------------------------------------
159. Instruction: Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile.
A: IsDeviceValid()
B: ExecTimedStop_TimeCmd(numCommands, pTimeCommand)
C: StartVel_TimedVel(numCommands, pTimedVelCommand)
D: ExecuteWithTimeout(numCommands, commandExecutionTime)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
159. Model's answer: B
159. Correct answer: B
159. Result: Correct



Processing Question 160:
160. Context:
 When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time. 

This function can add delays in between API functions in the API buffer. 

◆USleep() 
WMX3APIFU 
NC USleep ( 
unsigned int microseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
microseconds The length of the sleep 
command in 
microseconds. 

Remarks 

This function is similar to the Sleep function, except the sleep time is specified in 
units of microseconds. 


◆ 
Wait() [1/3] 


WMX3APIFU 
NC Wait ( int axis ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
axis The axis to wait to for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state.
--------------------------------------------
},
    {
        "No": 178,
        "FunctionC++": "WMX3APIFUNC Wait(int axis)",
        "FunctionPython": "def Wait(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer. "
    },
    {
        "No": 179,
        "FunctionC++": "WMX3APIFUNC Wait(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Wait_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Add a wait command to an API buffer."
--------------------------------------------
Using the Wait Function 

In addition to the single axis Wait function that was discussed in Basic Operation, 
there are two other Wait functions that pause the execution of the API buffer. 

The Wait function with a AxisSelection argument will pause the execution of the API 
buffer until the specified set of axes are all in the Idle operation state at the same time. 

The Wait function with a ApiBufferCondition argument will pause the execution of the 
API buffer until a more complex condition has been satisfied. One common application 
of this Wait function is to wait until the axis has almost finished the execution of its 
current motion command, and then override the motion command with another motion 
command so that the axis does not stop between the two motion commands. The 
ApiBufferCondition in this case might have the RemainingTime condition with a time 
of 2~4ms. 

Wait Example
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
-----------------------------------------------------------------------------------
160. Instruction: Add a wait command to an API buffer.
A: Wait(axis)
B: Await(axis_to_wait)
C: GetOutputData(buff, buffSize, dataSize)
D: GetAxisUnit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
160. Model's answer: A
160. Correct answer: A
160. Result: Correct



Processing Question 161:
161. Context:
 WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state. 

This function can delay the execution of the next API in the API buffer until the 
motion command of an axis completes. 

This function has the same effect as when the Wait(ApiBufferCondition* 
condition) function is called with the AxisIdle condition with the specified axis. 

If the specified axis goes offline, generates an amp alarm, triggers a limit switch, or 
changes to servo off state, an ServoOffline, AxisAmpAlarm, AxisSoftLimit, 
AxisNearLimit, AxisExternalLimit, AxisHardLimit, or ServoOff error code will be 
generated and logged in the ApiBufferStatus. If the stopOnError option was set to 
1 when calling the Execute function, the API buffer execution will stop when this 
occurs. 

◆Wait() [2/3]

WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
AxisSelection pAxisSelection ) 
Add a wait command to an API buffer.
--------------------------------------------
Using the Wait Function 

In addition to the single axis Wait function that was discussed in Basic Operation, 
there are two other Wait functions that pause the execution of the API buffer. 

The Wait function with a AxisSelection argument will pause the execution of the API 
buffer until the specified set of axes are all in the Idle operation state at the same time. 

The Wait function with a ApiBufferCondition argument will pause the execution of the 
API buffer until a more complex condition has been satisfied. One common application 
of this Wait function is to wait until the axis has almost finished the execution of its 
current motion command, and then override the motion command with another motion 
command so that the axis does not stop between the two motion commands. The 
ApiBufferCondition in this case might have the RemainingTime condition with a time 
of 2~4ms. 

Wait Example
--------------------------------------------
When this function is executed from inside an API buffer, the execution of the API 
buffer will stop for the specified amount of time. 

This function can add delays in between API functions in the API buffer. 

◆USleep() 
WMX3APIFU 
NC USleep ( 
unsigned int microseconds ) 
Add a sleep command to an API buffer. 

Parameters 
[in] 
microseconds The length of the sleep 
command in 
microseconds. 

Remarks 

This function is similar to the Sleep function, except the sleep time is specified in 
units of microseconds. 


◆ 
Wait() [1/3] 


WMX3APIFU 
NC Wait ( int axis ) 
Add a wait command to an API buffer. 

Parameters 
[in] 
axis The axis to wait to for. 

Remarks 

This API may be added to an API buffer that is recording. This API will not have any 
effect when called while the device is not recording to an API buffer channel. 

When this function is executed from inside an API buffer, the execution of APIs will 
stop until the specified axis is in the Idle operation state.
-----------------------------------------------------------------------------------
161. Instruction: Add a wait command to an API buffer.
A: Wait_ForAxisSelection(pAxisSelection)
B: Wait_AxisSel(pAxisSelection)
C: SetVelocityFeedforwardGain(axis, gain)
D: Stop_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
161. Model's answer: A
161. Correct answer: B
161. Result: Wrong



Processing Question 162:
162. Context:
 Each Device can only process one Wait function at one time. If multiple 
threads call the Wait function, the timings at which execution is returned to 
the calling threads is undefined. As explained in CreateDevice, each thread 
should create its own device. 

◆ 
Wait() [3/6] 



WMX3APIFU 
NC Wait ( 
WMX3APIFU 
NC Wait ( 
WaitCondition pWaitCondition ) 
Start a blocking wait command, returning only when the specified wait condition 
becomes true. 

Parameters 
[in] 
pWaitCondition A pointer to a 
WaitCondition that 
describes the wait 
condition. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified wait condition becomes true. See WaitCondition for information 
regarding the available wait conditions.
--------------------------------------------
Function *pWaitCondition); 
Python 
def 
Wait_WaitCondition(pWait 
Condition) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Wait(int 
axis, unsigned int 
waitTimeMilliseconds); 
Python 
def Wait_TimeMilli(axis, 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Wait(AxisSelection 
*pAxisSelection, 
unsigned int 
waitTimeMilliseconds); 
Python 
def 
Wait_AxisSel_TimeMilli(p 
AxisSelection, 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Wait(WaitCondition 
*pWaitCondition, 
unsigned int 
waitTimeMilliseconds);
--------------------------------------------
◆Wait() [6/6]

WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
WaitCondition * pWaitCondition, 
unsigned int waitTimeMilliseconds 
Start a blocking wait command, returning only when the specified wait condition 
becomes true. 

Parameters 
[in] 
pWaitCondition A pointer to a 
WaitCondition that 
describes the wait 
condition. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axes 
become Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axes become idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified wait condition becomes true. If the 
specified wait condition is not true when this function returns, it will return the 
WaitTimeout error.
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
-----------------------------------------------------------------------------------
162. Instruction: Start a blocking wait command, returning only when the specified wait condition becomes true.
A: Wait_ForCondition(pWaitCondition)
B: WaitForDeviceWaitEvent(waitTime, errCode)
C: Wait_WaitCondition(pWaitCondition)
D: Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
162. Model's answer: C
162. Correct answer: C
162. Result: Correct



Processing Question 163:
163. Context:
 *pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
Remarks 

This function executes the ExecTimedStop function for multiple axes. A separate 
stop time is specified for each axis. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ 
Wait() [1/6] 



WMX3APIFU 
NC Wait ( int axis ) 
WMX3APIFU 
NC Wait ( int axis ) 
Start a blocking wait command, returning only when the axis becomes idle. 

Parameters 
[in] 
axis The axis to wait for. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified axis enters the Idle operation state.
--------------------------------------------
If the specified WaitConditionType is AxisIdle, MotionStarted, or 
MotionStartedOverrideReady, this function will monitor the specified axes for 
errors. If any specified axis goes offline, generates an amp alarm, triggers a limit 
switch, or changes to servo off state, this function will stop blocking and return the 
ServoOffline, AxisAmpAlarm, AxisSoftLimit, AxisNearLimit, AxisExternalLimit, 
AxisHardLimit, or ServoOff error code. 

Each Device can only process one Wait function at one time. If multiple 
threads call the Wait function, the timings at which execution is returned to 
the calling threads is undefined. As explained in CreateDevice, each thread 
should create its own device. 

◆ 
Wait() [4/6] 



WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
int 
unsigned int 
axis, 
waitTimeMilliseconds 
Start a blocking wait command, returning only when the axis becomes idle or the
-----------------------------------------------------------------------------------
163. Instruction: Start a blocking wait command, returning only when the axis becomes idle or the wait time elapses.
A: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
B: Export_SysPrm_Axis(pPath, pParam, axis)
C: Wait_TimeMilli(axis, waitTimeMilliseconds)
D: Wait_TimeMs(axis, delayMs)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
163. Model's answer: C
163. Correct answer: C
163. Result: Correct



Processing Question 164:
164. Context:
 *pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
◆Wait() [5/6]

WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
AxisSelection * pAxisSelection, 
unsigned int waitTimeMilliseconds 
Start a blocking wait command, returning only when the axes become idle. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to wait for. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axes 
become Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axes become idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified axis becomes Idle. If any of the 
specified axes is not Idle when this function returns, it will return the WaitTimeout 
error. 

◆Wait() [6/6]
--------------------------------------------
Remarks 

This function executes the ExecTimedStop function for multiple axes. A separate 
stop time is specified for each axis. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ 
Wait() [1/6] 



WMX3APIFU 
NC Wait ( int axis ) 
WMX3APIFU 
NC Wait ( int axis ) 
Start a blocking wait command, returning only when the axis becomes idle. 

Parameters 
[in] 
axis The axis to wait for. 

Remarks 

This function will block execution and will return execution to the calling thread only 
when the specified axis enters the Idle operation state.
-----------------------------------------------------------------------------------
164. Instruction: Start a blocking wait command, returning only when the axes become idle.
A: Wait_AxisSel_TimeMilli(pAxisSelection, waitTimeMilliseconds)
B: Wait_For_Axis_Selection_Time_in_Milliseconds(AXS_Selection, time_in_ms)
C: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
D: StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
164. Model's answer: A
164. Correct answer: A
164. Result: Correct



Processing Question 165:
165. Context:
 *pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
◆Wait() [6/6]

WMX3APIFUNC 
Wait ( 
) 
WMX3APIFUNC 
Wait ( 
) 
WaitCondition * pWaitCondition, 
unsigned int waitTimeMilliseconds 
Start a blocking wait command, returning only when the specified wait condition 
becomes true. 

Parameters 
[in] 
pWaitCondition A pointer to a 
WaitCondition that 
describes the wait 
condition. 
[in] 
waitTimeMilliseconds The maximum amount of 
time to wait before 
returning. If the 
waitTimeMilliseconds 
elapses before the axes 
become Idle, a 
WaitTimeout error will 
be returned. To specify 
no maximum wait time 
and wait indefinitely until 
the axes become idle, 
set this value to the 
constant INFINITE 
(0xFFFFFFFF). 
Remarks 

This function is similar to Wait, except it returns execution to the calling thread if the 
specified wait time elapses before the specified wait condition becomes true. If the 
specified wait condition is not true when this function returns, it will return the 
WaitTimeout error.
--------------------------------------------
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecTimedStop(unsigne 
d int numCommands, 
TimeCommand 
*pTimeCommand); 
Python 
def 
ExecTimedStop_TimeCm 
d(numCommands, 
pTimeCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Wait(int 
axis); 
Python def Wait(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Wait(AxisSelection 
*pAxisSelection); 
Python 
def 
Wait_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
Wait(WaitCondition
-----------------------------------------------------------------------------------
165. Instruction: Start a blocking wait command, returning only when the specified wait condition becomes true.
A: StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
B: WaitForConditionTimeout(pConditionToWaitFor, timeoutMilliseconds)
C: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
D: Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
165. Model's answer: D
165. Correct answer: D
165. Result: Correct



Processing Question 166:
166. Context:
 ◆Pause() [1/2]
WMX3APIFU 
NC Pause ( int axis ) 
Pause the execution of a position command or interpolation command. 

Parameters 
[in] 
axis The axis to pause. 

Remarks 

This function pauses the execution of a position command or interpolation 
command for one axis. The axis will decelerate to rest at the deceleration rate that 
was specified for the position command or interpolation command. 

For interpolation commands, all interpolating axes will decelerate to a stop. Only 
one of the interpolating axes needs to be specified to this function. 

Once at rest, the axis will remain in the Pos or Intpl operation state. 

The position command or interpolation command may be resumed after the axis is 
at rest, or while the axis is decelerating. To resume the axis, call the Resume 
function. 

A paused or pausing axis may also be stopped using Stop, or be overridden by 
another position command function.
--------------------------------------------
WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of a paused 
position command or interpolation 
command for multiple axes. More... 

WMX3APIFUNC OverridePos (PosCommand 
*pPosCommand) 
Override the target position of an axis 
currently executing a position command. 
The target position is specified as an 
absolute position. More... 

WMX3APIFUNC OverrideMov (PosCommand 
*pPosCommand) 

Override the target position of an axis 
currently executing a position command. 
The target position is specified as a 
relative position. More... 

WMX3APIFUNC OverrideVel (PosCommand 
*pPosCommand) 

Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand)
--------------------------------------------
},
    {
        "No": 184,
        "FunctionC++": "WMX3APIFUNC Pause(int axis)",
        "FunctionPython": "def Pause(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command. "
    },
    {
        "No": 185,
        "FunctionC++": "WMX3APIFUNC Pause(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Pause_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Pause the execution of a position command or interpolation command for multiple axes. "
--------------------------------------------
This function pauses the execution of a PP mode position command for one axis. 
The axis will decelerate to rest. 

To resume the axis, call the Resume function. 

◆Pause() [2/2]

◆ 
Pause() [2/2] 


WMX3APIFU 
NC Pause ( AxisSelection pAxisSelection ) 
Pause the execution of PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 
Remarks 

This function executes Pause for multiple axes. 

◆Resume() [1/2]
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused PP mode position command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a PP mode position command that was 
paused by the Pause function. 

◆Resume() [2/2]

WMX3APIFU WMX3APIFU 
NC Resume ( 
AxisSelection pAxisSelection ) 
Resume the execution of paused PP mode position commands for multiple axes.
-----------------------------------------------------------------------------------
166. Instruction: Pause the execution of a position command or interpolation command.
A: StartPT(pPTCommand)
B: Execute(axis)
C: Pause(axis)
D: PauseAxis(axis_to_pause)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
166. Model's answer: C
166. Correct answer: C
166. Result: Correct



Processing Question 167:
167. Context:
 A paused or pausing axis may also be stopped using Stop, or be overridden by 
another position command function. 

The Pause and Resume functions are compatible with the following motion 
functions: 


StartPos 
StartMov 
StartLinearIntplPos 
StartLinearIntplMov 
StartCircularIntplPos 
StartCircularIntplMov 
StartHelicalIntplPos 
StartHelicalIntplMov 



◆Pause() [2/2]
WMX3APIFU 
NC Pause ( 
StartPathIntplPos 
StartPathIntplMov 
StartPathIntpl3DPos 
StartPathIntpl3DMov 
StartPathIntplWithRotation 

AxisSelection pAxisSelection ) 
Pause the execution of a position command or interpolation command for multiple 
axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 

Remarks 

This function executes Pause for multiple axes.
--------------------------------------------
WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More... 

WMX3APIFUNC Wait (AxisSelection *pAxisSelection, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition, 
unsigned int waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 


WMX3APIFUNC Pause (int axis) 
Pause the execution of a position 
command or interpolation command. 
More... 
WMX3APIFUNC Pause (AxisSelection *pAxisSelection) 
Pause the execution of a position 
command or interpolation command for 
multiple axes. More... 

WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More...
--------------------------------------------
This function pauses the execution of a PP mode position command for one axis. 
The axis will decelerate to rest. 

To resume the axis, call the Resume function. 

◆Pause() [2/2]

◆ 
Pause() [2/2] 


WMX3APIFU 
NC Pause ( AxisSelection pAxisSelection ) 
Pause the execution of PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 
Remarks 

This function executes Pause for multiple axes. 

◆Resume() [1/2]
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused PP mode position command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a PP mode position command that was 
paused by the Pause function. 

◆Resume() [2/2]

WMX3APIFU WMX3APIFU 
NC Resume ( 
AxisSelection pAxisSelection ) 
Resume the execution of paused PP mode position commands for multiple axes.
--------------------------------------------
◆Pause() [1/2]
WMX3APIFU 
NC Pause ( int axis ) 
Pause the execution of a position command or interpolation command. 

Parameters 
[in] 
axis The axis to pause. 

Remarks 

This function pauses the execution of a position command or interpolation 
command for one axis. The axis will decelerate to rest at the deceleration rate that 
was specified for the position command or interpolation command. 

For interpolation commands, all interpolating axes will decelerate to a stop. Only 
one of the interpolating axes needs to be specified to this function. 

Once at rest, the axis will remain in the Pos or Intpl operation state. 

The position command or interpolation command may be resumed after the axis is 
at rest, or while the axis is decelerating. To resume the axis, call the Resume 
function. 

A paused or pausing axis may also be stopped using Stop, or be overridden by 
another position command function.
-----------------------------------------------------------------------------------
167. Instruction: Pause the execution of a position command or interpolation command for multiple axes.
A: Pause_AxisSel(pAxisSelection)
B: Wait_AxisSel(pAxisSelection)
C: StartCircularIntplMov_ThroughAndEnd3D_Trigger(pCircularIntplCommand, pTrigger)
D: Pause_AxisSel(pSelectedAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
167. Model's answer: A
167. Correct answer: A
167. Result: Correct



Processing Question 168:
168. Context:
 WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of a paused 
position command or interpolation 
command for multiple axes. More... 

WMX3APIFUNC OverridePos (PosCommand 
*pPosCommand) 
Override the target position of an axis 
currently executing a position command. 
The target position is specified as an 
absolute position. More... 

WMX3APIFUNC OverrideMov (PosCommand 
*pPosCommand) 

Override the target position of an axis 
currently executing a position command. 
The target position is specified as a 
relative position. More... 

WMX3APIFUNC OverrideVel (PosCommand 
*pPosCommand) 

Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand)
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 

Remarks 

This function executes Pause for multiple axes. 

All specified axes must be executing a position command or interpolation command. 
If one or more specified axes are not executing a position command or interpolation 
command, then this function will return an error. 

◆Resume() [1/2]

WMX3APIFU 
NC Resume ( int axis ) 
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused position command or interpolation command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a position command or interpolation 
command that was paused by the Pause function. 

For interpolation commands, all interpolating axes will resume motion. Only one of 
the interpolating axes needs to be specified to this function.
--------------------------------------------
},
    {
        "No": 186,
        "FunctionC++": "WMX3APIFUNC Resume(int axis)",
        "FunctionPython": "def Resume(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command."
    },
    {
        "No": 187,
        "FunctionC++": "WMX3APIFUNC Resume(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Resume_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command for multiple axes."
--------------------------------------------
This function pauses the execution of a PP mode position command for one axis. 
The axis will decelerate to rest. 

To resume the axis, call the Resume function. 

◆Pause() [2/2]

◆ 
Pause() [2/2] 


WMX3APIFU 
NC Pause ( AxisSelection pAxisSelection ) 
Pause the execution of PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 
Remarks 

This function executes Pause for multiple axes. 

◆Resume() [1/2]
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused PP mode position command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a PP mode position command that was 
paused by the Pause function. 

◆Resume() [2/2]

WMX3APIFU WMX3APIFU 
NC Resume ( 
AxisSelection pAxisSelection ) 
Resume the execution of paused PP mode position commands for multiple axes.
-----------------------------------------------------------------------------------
168. Instruction: Resume the execution of a paused position command or interpolation command.
A: GetGearRatio(axis)
B: ResumeProcessingOnAxis(axis)
C: Execute(axis)
D: Resume(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
168. Model's answer: D
168. Correct answer: D
168. Result: Correct



Processing Question 169:
169. Context:
 Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to pause. 

Remarks 

This function executes Pause for multiple axes. 

All specified axes must be executing a position command or interpolation command. 
If one or more specified axes are not executing a position command or interpolation 
command, then this function will return an error. 

◆Resume() [1/2]

WMX3APIFU 
NC Resume ( int axis ) 
WMX3APIFU 
NC Resume ( int axis ) 
Resume the execution of a paused position command or interpolation command. 

Parameters 
[in] 
axis The axis to resume. 

Remarks 

This function resumes the execution of a position command or interpolation 
command that was paused by the Pause function. 

For interpolation commands, all interpolating axes will resume motion. Only one of 
the interpolating axes needs to be specified to this function.
--------------------------------------------
WMX3APIFUNC Resume (int axis) 
Resume the execution of a paused 
position command or interpolation 
command. More... 

WMX3APIFUNC Resume (AxisSelection *pAxisSelection) 
Resume the execution of a paused 
position command or interpolation 
command for multiple axes. More... 

WMX3APIFUNC OverridePos (PosCommand 
*pPosCommand) 
Override the target position of an axis 
currently executing a position command. 
The target position is specified as an 
absolute position. More... 

WMX3APIFUNC OverrideMov (PosCommand 
*pPosCommand) 

Override the target position of an axis 
currently executing a position command. 
The target position is specified as a 
relative position. More... 

WMX3APIFUNC OverrideVel (PosCommand 
*pPosCommand) 

Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand)
--------------------------------------------
◆Resume() [2/2]

WMX3APIFU WMX3APIFU 
NC Resume ( 
AxisSelection pAxisSelection ) 
Resume the execution of paused PP mode position commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to resume. 

Remarks 
This function executes Resume for multiple axes. 

 

PMAxisVelocity Class Reference 

This class contains PV mode velocity command functions for PM motion. 

Classes 

class VelCommand 
This class contains data for a velocity 
command. More... 

Public Member Functions 

bool 
WMX3APIFUNC 
PMAxisVelocity (PMMotion *f) 
IsDeviceValid () 
StartVel (int axis) 
Start a PV mode velocity command. 
More... 
WMX3APIFUNC StartVel (int axis, long maxTrqLimit) 
Start a PV mode velocity command. 
More... 
WMX3APIFUNC StartVel (VelCommand *pVelCommand) 
Start a PV mode velocity command. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
long maxTrqLimit)
--------------------------------------------
},
    {
        "No": 186,
        "FunctionC++": "WMX3APIFUNC Resume(int axis)",
        "FunctionPython": "def Resume(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command."
    },
    {
        "No": 187,
        "FunctionC++": "WMX3APIFUNC Resume(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Resume_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resume the execution of a paused position command or interpolation command for multiple axes."
-----------------------------------------------------------------------------------
169. Instruction: Resume the execution of a paused position command or interpolation command for multiple axes.
A: Resume_AxisSelection(pSelectedAxis)
B: StopSuperimpose_AxisSel(pAxisSelection)
C: Resume_AxisSel(pAxisSelection)
D: Execute_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
169. Model's answer: C
169. Correct answer: C
169. Result: Correct



Processing Question 170:
170. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
◆OverrideMov() [1/2]

WMX3APIFU 
NC 
OverrideMov ( 
PosCommand pPosComman ) 
Override the target position of an axis currently executing a position command. The 

target position is specified as a relative position. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override position. 
Parameters other than 
axis and target are 
ignored. 
Remarks 

This function overrides the target position of an axis that is executing one of the 
following position commands: 

StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

The new target position is specified as a relative position (relative to the target 
position of the position command that is overridden). 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideVel() [1/2]
-----------------------------------------------------------------------------------
170. Instruction: Override the target position of an axis currently executing a position command. The target position is specified as an absolute position
A: OverridePosition(pPosInput)
B: OverridePos(pPosCommand)
C: SetSingleTurn(axis, enable. encoderCount)
D: OverrideVel(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
170. Model's answer: B
170. Correct answer: B
170. Result: Correct



Processing Question 171:
171. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
◆OverrideMov() [1/2]

WMX3APIFU 
NC 
OverrideMov ( 
PosCommand pPosComman ) 
Override the target position of an axis currently executing a position command. The 

target position is specified as a relative position. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override position. 
Parameters other than 
axis and target are 
ignored. 
Remarks 

This function overrides the target position of an axis that is executing one of the 
following position commands: 

StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

The new target position is specified as a relative position (relative to the target 
position of the position command that is overridden). 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideVel() [1/2]
--------------------------------------------
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override position. 
Parameters other than 
axis and target are 
ignored. 

Remarks 

This function overrides the target position of an axis that is executing one of the 
following position commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 

The new target position is specified as an absolute position. 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideMov() [1/2]

WMX3APIFU 
NC 
OverrideMov ( 
PosCommand pPosComman ) 
Override the target position of an axis currently executing a position command. The
-----------------------------------------------------------------------------------
171. Instruction: Override the target position of an axis currently executing a position command. The target position is specified as a relative position.
A: ExecEStop(level)
B: OverrideMovCommand(pPosCommand)
C: OverrideVel(pPosCommand)
D: OverrideMov(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
171. Model's answer: D
171. Correct answer: D
171. Result: Correct



Processing Question 172:
172. Context:
 Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the OverrideVel API function for multiple axes. 

◆StartPosToVel() [1/4]

WMX3APIFU 
NC 
StartPosToVe 
l ( 
WMX3APIFU 
NC 
StartPosToVe 
l ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 
Remarks
--------------------------------------------
WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
-----------------------------------------------------------------------------------
172. Instruction: Override the velocity of an axis currently executing a position, jog, or velocity command.
A: StartLinearIntplPos_Trigger(pLinearIntplCommand, pTrigger)
B: OverridePos(pPosCommand)
C: OverrideVel(pPosCommand)
D: UpdateVel(pPosCommand):
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
172. Model's answer: C
172. Correct answer: C
172. Result: Correct



Processing Question 173:
173. Context:
 Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

For jog and velocity commands, the target velocity may be a negative value. 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideAcc() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideAcc ( 
PosCommand pPosComman ) 
Override the acceleration of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override acceleration. 
Parameters other than 
axis and acc in profile 
are ignored. 
Remarks 

This function overrides the acceleration of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel
--------------------------------------------
WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
-----------------------------------------------------------------------------------
173. Instruction: Override the acceleration of an axis currently executing a position, jog, or velocity command
A: OverrideAcc(pPosCommand)
B: OverrideMov(pPosCommand)
C: StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)
D: OverrideAccessPointCommand(pAccessPointCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
173. Model's answer: A
173. Correct answer: A
173. Result: Correct



Processing Question 174:
174. Context:
 Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideDec() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideDec ( 
PosCommand pPosComman ) 
Override the deceleration of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override deceleration. 
Parameters other than 
axis and dec in profile 
are ignored. 
Remarks 

This function overrides the deceleration of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel
--------------------------------------------
Function 
C++ 
OverrideDec(unsigned 
int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideDec(numComma 
nds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkAcc(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkAcc(numCom 
mands, pPosCommand) 
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkDec(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkDec(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks
-----------------------------------------------------------------------------------
174. Instruction: Override the deceleration of an axis currently executing a position, jog, or velocity command.
A: GetAxisParam_Axis(axis)
B: UpdateDec(pUpdatedCommand)
C: OverrideDec(pPosCommand)
D: OverrideVel(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
174. Model's answer: C
174. Correct answer: C
174. Result: Correct



Processing Question 175:
175. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideJerkAcc() [1/2]

WMX3APIFU 
NC 
OverrideJerk 
WMX3APIFU 
NC 
OverrideJerk 
Acc ( 
PosCommand pPosComman ) 
Override the acceleration jerk of an axis currently executing a position, jog, or 

velocity command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override acceleration 
jerk. Parameters other 
than axis and jerkAcc in 
profile are ignored. 
Remarks 

This function overrides the acceleration jerk of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]
-----------------------------------------------------------------------------------
175. Instruction: Override the acceleration jerk of an axis currently executing a position, jog, or velocity command.
A: OverrideVel(pPosCommand)
B: AdjustJerkAcceleration(pTargetPosition)
C: OverrideJerkAcc(pPosCommand)
D: StartHelicalIntplMov_TriggerEvents(pHelicalIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
175. Model's answer: C
175. Correct answer: C
175. Result: Correct



Processing Question 176:
176. Context:
 StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideJerkDec() [1/2]

WMX3APIFU 
NC 
OverrideJerk 
WMX3APIFU 
NC 
OverrideJerk 
Dec ( 
PosCommand pPosComman ) 
Override the deceleration jerk of an axis currently executing a position, jog, or 

velocity command. 
Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override deceleration 
jerk. Parameters other 
than axis and jerkDec in 
profile are ignored. 
Remarks 

This function overrides the deceleration jerk of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideDec() [2/2]

WMX3APIFUNC 
OverrideDec ( 
WMX3APIFUNC 
OverrideDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the decelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
-----------------------------------------------------------------------------------
176. Instruction: Override the deceleration jerk of an axis currently executing a position, jog, or velocity command.
A: OverrideJerkDec(pPosCommand)
B: OverrideJerkDec(pPositionCommand)
C: OverrideDec(pPosCommand)
D: StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
176. Model's answer: A
176. Correct answer: A
176. Result: Correct



Processing Question 177:
177. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
StartPos / StartMov 
Pause (when pausing a StartPos / StartMov command) 
StartJog 
StartVel 

The profile of the command will remain unchanged, except the starting velocity of 
the profile will be ignored and the override will be executed from the current velocity. 

◆OverrideProfile() [1/2]

WMX3APIFU 
NC 
OverrideProfil 
WMX3APIFU 
NC 
OverrideProfil 
e ( 
PosCommand pPosComman ) 
Override the entire profile of an axis currently executing a position, jog, or velocity 
command. 

Parameters 
[in] 
pPosCommand A pointer to an object of 
the PosCommand class 
that contains the 
override profile. 
Remarks 

This function overrides the entire profile of an axis that is executing one of the 
following position, jog, or velocity commands: 

StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

StartJog 

StartVel
--------------------------------------------
WMX3APIFUNC OverrideProfile (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the entire profiles of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC StopJogAtPos (PosCommand 
*pPosCommand) 

Stop an axis executing a jog command 
at a timing that will cause the axis to stop 
at exactly the specified position. More... 

WMX3APIFUNC StopJogAtPos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Stop multiple axes executing jog 
commands at timing that wil cause the 
axes to stop at exactly the specified 
positions. More... 

WMX3APIFUNC SuperimposeMov (PosCommand 
*pPosCommand) 
Start a relative position superimposed 
motion command. The superimposed 
motion command will execute on top of 
any other motion that the axis may 
already be executing. More...
-----------------------------------------------------------------------------------
177. Instruction: Override the entire profile of an axis currently executing a position, jog, or velocity command.
A: OverrideProfile(pPosCommand)
B: UpdateUserProfile(userProfileData)
C: OverrideMov(pPosCommand)
D: OverrideJerkDec(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
177. Model's answer: A
177. Correct answer: A
177. Result: Correct



Processing Question 178:
178. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

StartJog 

StartVel 

Only the profile is overridden. The target position for axes executing position 
commands or the target velocity for axes executing jog or velocity commands are 
not changed. 

◆OverridePos() [2/2]

WMX3APIFUNC 
OverridePos ( 
WMX3APIFUNC 
OverridePos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the target positions of multiple axes currently executing position 
commands. The target positions are specified as absolute positions. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands.
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
-----------------------------------------------------------------------------------
178. Instruction: Override the target positions of multiple axes currently executing position commands. The target positions are specified as absolute positions.
A: OverridePosition(numCommands, newPositionCommand)
B: Continue(axis)
C: OverridePos(numCommands, pPosCommand)
D: OverrideVel(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
178. Model's answer: C
178. Correct answer: C
178. Result: Correct



Processing Question 179:
179. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
StartPos / StartMov 

Pause (when pausing a StartPos / StartMov command) 

StartJog 

StartVel 

Only the profile is overridden. The target position for axes executing position 
commands or the target velocity for axes executing jog or velocity commands are 
not changed. 

◆OverridePos() [2/2]

WMX3APIFUNC 
OverridePos ( 
WMX3APIFUNC 
OverridePos ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the target positions of multiple axes currently executing position 
commands. The target positions are specified as absolute positions. 

Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands.
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
WMX3APIFUNC OverrideProfile (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the entire profiles of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC StopJogAtPos (PosCommand 
*pPosCommand) 

Stop an axis executing a jog command 
at a timing that will cause the axis to stop 
at exactly the specified position. More... 

WMX3APIFUNC StopJogAtPos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Stop multiple axes executing jog 
commands at timing that wil cause the 
axes to stop at exactly the specified 
positions. More... 

WMX3APIFUNC SuperimposeMov (PosCommand 
*pPosCommand) 
Start a relative position superimposed 
motion command. The superimposed 
motion command will execute on top of 
any other motion that the axis may 
already be executing. More...
-----------------------------------------------------------------------------------
179. Instruction: Override the target positions of multiple axes currently executing position commands. The target positions are specified as relative positions.
A: OverridePos(numCommands, pPosCommand)
B: OverrideMov(numCommands, pPosCommand)
C: StartPosToJog_PosToJog(numCommands, pPosToJogCommand)
D: ModifyMove(numCommands, newPosition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
179. Model's answer: B
179. Correct answer: B
179. Result: Correct



Processing Question 180:
180. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
WMX3APIFUNC OverrideProfile (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the entire profiles of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC StopJogAtPos (PosCommand 
*pPosCommand) 

Stop an axis executing a jog command 
at a timing that will cause the axis to stop 
at exactly the specified position. More... 

WMX3APIFUNC StopJogAtPos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Stop multiple axes executing jog 
commands at timing that wil cause the 
axes to stop at exactly the specified 
positions. More... 

WMX3APIFUNC SuperimposeMov (PosCommand 
*pPosCommand) 
Start a relative position superimposed 
motion command. The superimposed 
motion command will execute on top of 
any other motion that the axis may 
already be executing. More...
-----------------------------------------------------------------------------------
180. Instruction: Override the velocities of multiple axes currently executing position, jog, or velocity commands.
A: SetMovingAverageProfileTime(axis, milliseconds)
B: UpdateVel(numOfCommands, pPositionCommand)
C: OverrideMov(numCommands, pPosCommand)
D: OverrideVel(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
180. Model's answer: D
180. Correct answer: D
180. Result: Correct



Processing Question 181:
181. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
Function 
C++ int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideMov(numComma 
nds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideVel(unsigned int 
numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideVel(numComman 
ds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideAcc(unsigned 
int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideAcc(numComman 
ds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
-----------------------------------------------------------------------------------
181. Instruction: Override the accelerations of multiple axes currently executing position, jog, or velocity commands.
A: OverrideAccumulator(numCommands, positionAtIndex)
B: OverrideMov(numCommands, pPosCommand)
C: OverrideAcc(numCommands, pPosCommand)
D: StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
181. Model's answer: C
181. Correct answer: C
181. Result: Correct



Processing Question 182:
182. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Function 
C++ 
OverrideDec(unsigned 
int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideDec(numComma 
nds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkAcc(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkAcc(numCom 
mands, pPosCommand) 
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkDec(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkDec(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideDec() [2/2]

WMX3APIFUNC 
OverrideDec ( 
WMX3APIFUNC 
OverrideDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the decelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]
-----------------------------------------------------------------------------------
182. Instruction: Override the decelerations of multiple axes currently executing position, jog, or velocity commands.
A: OverrideDec(numCommands, pPosCommand)
B: OverrideDecr(numCommands, firstPositiveCommand)
C: Stop_StopCommand(numCommands, pStopCommand)
D: OverrideVel(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
182. Model's answer: A
182. Correct answer: A
182. Result: Correct



Processing Question 183:
183. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideDec() [2/2]

WMX3APIFUNC 
OverrideDec ( 
WMX3APIFUNC 
OverrideDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the decelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
-----------------------------------------------------------------------------------
183. Instruction: Override the acceleration jerks of multiple axes currently executing position, jog, or velocity commands.
A: updateJerkAcceleration(numUpdates, newJerkValues):
B: OverrideJerkAcc(numCommands, pPosCommand)
C: OverridePos(numCommands, pPosCommand)
D: StopJogAtPos(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
183. Model's answer: B
183. Correct answer: B
183. Result: Correct



Processing Question 184:
184. Context:
 override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideDec() [2/2]

WMX3APIFUNC 
OverrideDec ( 
WMX3APIFUNC 
OverrideDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the decelerations of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkAcc() [2/2]

WMX3APIFUNC 
OverrideJerkAcc ( 
WMX3APIFUNC 
OverrideJerkAcc ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the acceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkAcc function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]
--------------------------------------------
WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Function 
C++ 
OverrideDec(unsigned 
int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideDec(numComma 
nds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkAcc(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkAcc(numCom 
mands, pPosCommand) 
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideJerkDec(unsign 
ed int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideJerkDec(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks
-----------------------------------------------------------------------------------
184. Instruction: Override the deceleration jerks of multiple axes currently executing position, jog, or velocity commands.
A: ClearAmpAlarm(axis)
B: UpdateJerkDec(numCommands, pPosCommand)
C: OverrideJerkDec(numCommands, pPosCommand)
D: OverridePos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
184. Model's answer: C
184. Correct answer: C
184. Result: Correct



Processing Question 185:
185. Context:
 WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverridePos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 
axes currently executing position 
commands. The target positions are 
specified as absolute positions. More... 

WMX3APIFUNC OverrideMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the target positions of multiple 


axes currently executing position 
commands. The target positions are 
specified as relative positions. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More...
--------------------------------------------
override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideJerkDec() [2/2]

WMX3APIFUNC 
OverrideJerkDec ( 
WMX3APIFUNC 
OverrideJerkDec ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Override the deceleration jerks of multiple axes currently executing position, jog, or 

velocity commands. 
Parameters 
[in] 
numCommands The number of 
overrides. Each override 
commands a single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
override. The number of 
objects in the array must 
be equal to 
numCommands. 

Remarks 
This command executes the OverrideJerkDec function for multiple axes. 
This function returns an error if any of the commanded axes cannot execute the 

override. An error is returned if any of the commanded axes are in Idle state. 

◆OverrideProfile() [2/2]
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
WMX3APIFUNC OverrideProfile (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the entire profiles of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC StopJogAtPos (PosCommand 
*pPosCommand) 

Stop an axis executing a jog command 
at a timing that will cause the axis to stop 
at exactly the specified position. More... 

WMX3APIFUNC StopJogAtPos (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Stop multiple axes executing jog 
commands at timing that wil cause the 
axes to stop at exactly the specified 
positions. More... 

WMX3APIFUNC SuperimposeMov (PosCommand 
*pPosCommand) 
Start a relative position superimposed 
motion command. The superimposed 
motion command will execute on top of 
any other motion that the axis may 
already be executing. More...
-----------------------------------------------------------------------------------
185. Instruction: Override the entire profiles of multiple axes currently executing position, jog, or velocity commands.
A: OverrideProfile(numCommands, pPosCommand)
B: OverrideJerkDec(numCommands, pPosCommand)
C: OverrideProfile(numCommands, positionToOverride)
D: StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
185. Model's answer: A
185. Correct answer: A
185. Result: Correct



Processing Question 186:
186. Context:
 ◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
--------------------------------------------
This function returns an error if any of the commanded axes cannot execute the 
override. An error is returned if any of the commanded axes are in Idle state. 

◆StopJogAtPos() [1/2]

WMX3APIFU 
NC 
StopJogAtPo 
WMX3APIFU 
NC 
StopJogAtPo 
s ( 
PosCommand pPosComman ) 
Stop an axis executing a jog command at a timing that will cause the axis to stop at 

exactly the specified position. 
Parameters 
[in] 
pPosCommand A pointer to a 
PosCommand that 
contains the stop jog at 
pos motion command 
parameters. 
Remarks 

This function operates on an axis currently executing a jog command. The axis will 
smoothly transition from executing a jog command to executing a stop command. 
The final position of the axis after stopping will be at the specified target position.
--------------------------------------------
},
    {
        "No": 204,
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(PosCommand *pPosCommand)",
        "FunctionPython": "def StopJogAtPos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop an axis executing a jog command at a timing that will cause the axis to stop at exactly the specified position."
    },
    {
        "No": 205,
        "FunctionC++": "WMX3APIFUNC StopJogAtPos(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def StopJogAtPos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes executing jog commands at timing that wil cause the axes to stop at exactly the specified positions. "
-----------------------------------------------------------------------------------
186. Instruction: Stop an axis executing a jog command at a timing that will cause the axis to stop at exactly the specified position.
A: StopJogAtPos(pPosCommand)
B: PauseRunningAtPosition(pPositionCommand)
C: StopJogAtPos(numCommands, pPosCommand)
D: ClearAxisAlarm_AxisSel(axisSel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
186. Model's answer: A
186. Correct answer: A
186. Result: Correct



Processing Question 187:
187. Context:
 WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
--------------------------------------------
Start jog commands for multiple axes. 

More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 

*pTimedJogCommand) 

Start timed jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerJogCommand *pJogCommand) 


Start triggered jog commands for multiple 
axes. More... 

WMX3APIFUNC StartJog (unsigned int numCommands, 
TriggerTimedJogCommand 
*pTimedJogCommand) 
Start triggered timed jog commands for 
multiple axes. More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
JogCommand *pJogCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered jog commands with 
multiple trigger events for multiple axes. 
More... 
WMX3APIFUNC StartJog (unsigned int numCommands, 
TimedJogCommand 
*pTimedJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed jog commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand)
--------------------------------------------
◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
WMX3APIFUNC StartPosToJog (PosToJogCommand 
*pPosToJogCommand) 
Start an absolute position command and 
a triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start an absolute position command and 
a triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC StartMovToJog (PosToJogCommand 
*pPosToJogCommand) 
Start a relative position command and a 
triggered jog command simultaneously. 
The position command will be overridden 
by the jog command when the trigger 
condition is satisfied. More... 

WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand)
-----------------------------------------------------------------------------------
187. Instruction: Stop multiple axes executing jog commands at timing that wil cause the axes to stop at exactly the specified positions.
A: StopJogAtPos(numCommands, pPosCommand)
B: StartPos_Trigger(numCommands, pPosCommand)
C: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
D: StopJogAtPosition(numCommands, targetPosition)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
187. Model's answer: D
187. Correct answer: A
187. Result: Wrong



Processing Question 188:
188. Context:
 WMX3APIFUNC SuperimposeMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Start superimposed relative position 
commands for multiple axes. The 
superimposed motion commands will 
execute on top of any other motion that 
the axes may already be executing. 
More... 


WMX3APIFUNC StopSuperimpose (int axis) 
Stop a superimposed motion. More... 

WMX3APIFUNC 

WMX3APIFUNC 

WMX3APIFUNC 

StopSuperimpose (AxisSelection 
*pAxisSelection) 

Stop the superimposed motion of 
multiple axes. More... 

SimulatePos (SimulatePosCommand 
*pSimulatePosCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a position command without 
moving any axes. The peak velocity, 
acceleration time, cruise time (the time 
the axis velocity is constant), 
deceleration time, and total profile time 
of the position command are returned. 

More...
--------------------------------------------
},
    {
        "No": 206,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing. "
    },
    {
        "No": 207,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing. "
--------------------------------------------
The motion caused by this command does not affect the axis OperationState. For 
example, if this function is called while the axis is Idle, the axis will move, but 
remain in the idle operation state. To check whether an axis is executing 
superimposed motion, see the Exec Superimposed Motion status. 

The motion caused by this command cannot be stopped using normal Stop 
functions. To stop superimposed motion, use the StopSuperimpose function. 

This function currently supports superimposing axes in Idle, Pos, or Jog 
operation states. If this function is called for axes in other operation states, an 
error will be returned. 

◆SuperimposeMov() [2/2]

WMX3APIFUNC 
SuperimposeMov ( 
WMX3APIFUNC 
SuperimposeMov ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Start superimposed relative position commands for multiple axes. The 
superimposed motion commands will execute on top of any other motion that the 
axes may already be executing.
--------------------------------------------
Function 
C++ SuperimposeMov(PosCo 
mmand 
*pPosCommand); 
Python 
def 
SuperimposeMov(pPosCo 
mmand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SuperimposeMov(unsig 
ned int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
SuperimposeMov(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopSuperimpose(int 
axis); 
Python 
def 
StopSuperimpose(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopSuperimpose(AxisS 
election 
*pAxisSelection);
-----------------------------------------------------------------------------------
188. Instruction: Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing.
A: EnableSyncGroup(groupId, enable)
B: SuperimposeMovWithOffset(pPosCommand, offset)
C: SuperimposeMov(numCommands, pPosCommand)
D: SuperimposeMov(pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
188. Model's answer: D
188. Correct answer: D
188. Result: Correct



Processing Question 189:
189. Context:
 WMX3APIFUNC SuperimposeMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Start superimposed relative position 
commands for multiple axes. The 
superimposed motion commands will 
execute on top of any other motion that 
the axes may already be executing. 
More... 


WMX3APIFUNC StopSuperimpose (int axis) 
Stop a superimposed motion. More... 

WMX3APIFUNC 

WMX3APIFUNC 

WMX3APIFUNC 

StopSuperimpose (AxisSelection 
*pAxisSelection) 

Stop the superimposed motion of 
multiple axes. More... 

SimulatePos (SimulatePosCommand 
*pSimulatePosCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a position command without 
moving any axes. The peak velocity, 
acceleration time, cruise time (the time 
the axis velocity is constant), 
deceleration time, and total profile time 
of the position command are returned. 

More...
--------------------------------------------
Function 
C++ SuperimposeMov(PosCo 
mmand 
*pPosCommand); 
Python 
def 
SuperimposeMov(pPosCo 
mmand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SuperimposeMov(unsig 
ned int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
SuperimposeMov(numCo 
mmands, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopSuperimpose(int 
axis); 
Python 
def 
StopSuperimpose(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopSuperimpose(AxisS 
election 
*pAxisSelection);
--------------------------------------------
},
    {
        "No": 206,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a relative position superimposed motion command. The superimposed motion command will execute on top of any other motion that the axis may already be executing. "
    },
    {
        "No": 207,
        "FunctionC++": "WMX3APIFUNC SuperimposeMov(unsigned int numCommands, PosCommand *pPosCommand)",
        "FunctionPython": "def SuperimposeMov(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing. "
--------------------------------------------
The motion caused by this command does not affect the axis OperationState. For 
example, if this function is called while the axis is Idle, the axis will move, but 
remain in the idle operation state. To check whether an axis is executing 
superimposed motion, see the Exec Superimposed Motion status. 

The motion caused by this command cannot be stopped using normal Stop 
functions. To stop superimposed motion, use the StopSuperimpose function. 

This function currently supports superimposing axes in Idle, Pos, or Jog 
operation states. If this function is called for axes in other operation states, an 
error will be returned. 

◆SuperimposeMov() [2/2]

WMX3APIFUNC 
SuperimposeMov ( 
WMX3APIFUNC 
SuperimposeMov ( 
unsigned int numCommands, 
PosCommand * pPosCommand 
) 
Start superimposed relative position commands for multiple axes. The 
superimposed motion commands will execute on top of any other motion that the 
axes may already be executing.
-----------------------------------------------------------------------------------
189. Instruction: Start superimposed relative position commands for multiple axes. The superimposed motion commands will execute on top of any other motion that the axes may already be executing.
A: OverrideMov(numCommands, pPosCommand)
B: SuperimposeMov(numCommands, pPosCommand)
C: SuperimposeMovement(numCommands, playerPositionCommand)
D: SetFlightRecorderParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
189. Model's answer: B
189. Correct answer: B
189. Result: Correct



Processing Question 190:
190. Context:
 },
    {
        "No": 208,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(int axis)",
        "FunctionPython": "def StopSuperimpose(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a superimposed motion."
    },
    {
        "No": 209,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopSuperimpose_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the superimposed motion of multiple axes."
--------------------------------------------
◆StopSuperimpose() [1/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
int axis 
) 
Stop a superimposed motion. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the superimposed motion of an axis before it completes. The 
superimposed motion will decelerate to a stop using the deceleration specified for 
the profile of the superimposed motion. Any motion that the axis was already 
executing under the superimposed motion will remain unaffected. The axis will still 
travel an extra distance equal to the distance traveled due to the superimposed 
motion before the superimposed motion is stopped. 

◆StopSuperimpose() [2/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
AxisSelection pAxisSelection ) 
Stop the superimposed motion of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
Remarks
--------------------------------------------
Parameters 
[in] 
numCommands The number of 
superimposed motion 
commands. Each 
command controls a 
single axis. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
PosCommand class 
that contain the 
parameters of the 
superimposed motion 
commands. 

Remarks 

This command executes the SuperimposeMov function for multiple axes. 

This function currently supports superimposing axes in Idle, Pos, or Jog 
operation states. If this function is called for axes in other operation states, an 
error will be returned. 

◆StopSuperimpose() [1/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
int axis 
) 
Stop a superimposed motion. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
-----------------------------------------------------------------------------------
190. Instruction: Stop a superimposed motion.
A: GetParam()
B: Stop(axis)
C: StopSuperimpose(axis)
D: StopSuperimposeOnAxis(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
190. Model's answer: C
190. Correct answer: C
190. Result: Correct



Processing Question 191:
191. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
},
    {
        "No": 208,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(int axis)",
        "FunctionPython": "def StopSuperimpose(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a superimposed motion."
    },
    {
        "No": 209,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopSuperimpose_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the superimposed motion of multiple axes."
--------------------------------------------
◆StopSuperimpose() [1/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
int axis 
) 
Stop a superimposed motion. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function stops the superimposed motion of an axis before it completes. The 
superimposed motion will decelerate to a stop using the deceleration specified for 
the profile of the superimposed motion. Any motion that the axis was already 
executing under the superimposed motion will remain unaffected. The axis will still 
travel an extra distance equal to the distance traveled due to the superimposed 
motion before the superimposed motion is stopped. 

◆StopSuperimpose() [2/2]

WMX3APIFU 
NC 
StopSuperim 
WMX3APIFU 
NC 
StopSuperim 
pose ( 
AxisSelection pAxisSelection ) 
Stop the superimposed motion of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
Remarks
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
-----------------------------------------------------------------------------------
191. Instruction: Stop the superimposed motion of multiple axes.
A: StopSuperimpose_AxisSel(pAxisSelection)
B: Stop_AxisSel(pAxisSelection)
C: StopSuperimpose_AxisSel(virtualAxisSelection)
D: StartRampRateTrq(pTrqCommand, rampRate)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
191. Model's answer: A
191. Correct answer: A
191. Result: Correct



Processing Question 192:
192. Context:
 More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More...
--------------------------------------------
WMX3APIFUNC SuperimposeMov (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Start superimposed relative position 
commands for multiple axes. The 
superimposed motion commands will 
execute on top of any other motion that 
the axes may already be executing. 
More... 


WMX3APIFUNC StopSuperimpose (int axis) 
Stop a superimposed motion. More... 

WMX3APIFUNC 

WMX3APIFUNC 

WMX3APIFUNC 

StopSuperimpose (AxisSelection 
*pAxisSelection) 

Stop the superimposed motion of 
multiple axes. More... 

SimulatePos (SimulatePosCommand 
*pSimulatePosCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a position command without 
moving any axes. The peak velocity, 
acceleration time, cruise time (the time 
the axis velocity is constant), 
deceleration time, and total profile time 
of the position command are returned. 

More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
Remarks 

This command executes the StopSuperimpose function for multiple axes. 

◆SimulatePos() 
WMX3APIFUNC 
SimulatePos ( SimulatePosComma pSimulatePosComma 
double * pPeakVelocity, 
double * pTotalTimeMillisecond 
double * pAccelerationTimeMil 
double * pCruiseTimeMilliseco 
double * pDecelerationTimeMil 
) 
Simulate a position command without moving any axes. The peak velocity, 
acceleration time, cruise time (the time the axis velocity is constant), deceleration 
time, and total profile time of the position command are returned. 

Parameters 
[in] 
pSimulatePosCommand A pointer to a 

SimulatePosCommand 


that contains the 
simulated position 
command parameters.
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
-----------------------------------------------------------------------------------
192. Instruction: Simulate a position command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the position command are returned.
A: StopJogAtPos(pPosCommand)
B: SimulatePos(pSimulatePosCommand)
C: Stop(axis)
D: SimulatePosition(pSimulatePositionCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
192. Model's answer: B
192. Correct answer: B
192. Result: Correct



Processing Question 193:
193. Context:
 More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More...
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
--------------------------------------------
[out] 
pDecelerationTimeMillis A pointer to a double 
variable that will contain 


the time that the axis 
spends decelerating 
during the motion 
command. If the axis 
changes direction during 
the motion command, 
the deceleration time 
does not include the time 
spent decelerating 
before changing 
direction. This value is in 
units of milliseconds. 

◆SimulateLinearIntplPos() 
WMX3APIFUNC 
SimulateLinearIntplP 
os ( SimulateLinearIntplC pSimulateLinearIntplC 
double * pPeakVelocity, 
double * pTotalTimeMillisecond 
double * pAccelerationTimeMil 
double * pCruiseTimeMilliseco 
double * pDecelerationTimeMil 
) 
Simulate a linear interpolation motion command without moving any axes. The peak 
velocity, acceleration time, cruise time (the time the axis velocity is constant), 
deceleration time, and total profile time of the linear interpolation motion command 
are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 
SimulateLinearIntplCo 
mmand that contains
--------------------------------------------
Function 
C++ 
d 
*pSimulateLinearIntplCo 
mmand, double 
timeMilliseconds, 
double *pPosArray, 
double *pMoveDistance, 
double 
*pRemainDistance, 
double *pTotalDistance); 
Python 
def 
SimulatePosAtTime_Linea 
rIntpl(pSimulateLinearIntpl 
Command, 
timeMilliseconds) 
Returns 
Type tuple 
Value 
0 : int -error code 
1: double -
PosArray 
2: double -
MoveDistance 
3: double -
RemainDistance 
4: double -
TotalDistance 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SimulateTimeAtPos(Sim 
ulatePosCommand 
*pSimulatePosComman 
d, double specificPos, 
double 
*pMoveTimeMillisecond 
s, double 
*pRemainTimeMillisecon
-----------------------------------------------------------------------------------
193. Instruction: Simulate a linear interpolation motion command without moving any axes. The peak velocity, acceleration time, cruise time (the time the axis velocity is constant), deceleration time, and total profile time of the linear interpolation motion command are returned.
A: SimulateLinearInterpolatedPosition(simulationCommand)
B: SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)
C: StartCircularIntplMov_ThroughAndEnd_Trigger(pCircularIntplCommand, pTrigger)
D: SimulateLinearIntplPos(pSimulateLinearIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
193. Model's answer: D
193. Correct answer: D
193. Result: Correct



Processing Question 194:
194. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
--------------------------------------------
More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More...
--------------------------------------------
[out] 
pDecelerationTimeMillis A pointer to an int 
variable that will contain 
the time that the axis 


spends decelerating 
during the motion 
command. If the axis 
changes direction during 
the motion command, 
the deceleration time 
does not include the time 
spent decelerating 
before changing 
direction. This value is in 
units of milliseconds. 

◆SimulatePosAtTime() [1/2]
WMX3APIFUNC 
SimulatePosAtTime ( SimulatePosComma pSimulatePosComma 
int returnType, 
double timeMilliseconds, 
double * pCalculatedPos, 
double * pCalculatedVel 
) 
Simulate a position command without moving any axes. The position and velocity of 
the axis after the motion command runs for the specified time are returned. 

Parameters 
[in] 
pSimulatePosCommand A pointer to a 

SimulatePosCommand 

that contains the 
simulated position 
command parameters. 

[in] 
returnType Determines whether the 
value specified for the 
"timeMilliseconds"
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
-----------------------------------------------------------------------------------
194. Instruction: Simulate a position command without moving any axes. The position and velocity of the axis after the motion command runs for the specified time are returned.
A: SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)
B: Stop_Dec(axis, dec)
C: SimulatePosAtTimeExtended(pExtendedSimulatePosCommand, int extendedReturnType, double newTimeMilliseconds)
D: SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
194. Model's answer: A
194. Correct answer: A
194. Result: Correct



Processing Question 195:
195. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
--------------------------------------------
Function 
C++ 
d 
*pSimulateLinearIntplCo 
mmand, double 
timeMilliseconds, 
double *pPosArray, 
double *pMoveDistance, 
double 
*pRemainDistance, 
double *pTotalDistance); 
Python 
def 
SimulatePosAtTime_Linea 
rIntpl(pSimulateLinearIntpl 
Command, 
timeMilliseconds) 
Returns 
Type tuple 
Value 
0 : int -error code 
1: double -
PosArray 
2: double -
MoveDistance 
3: double -
RemainDistance 
4: double -
TotalDistance 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SimulateTimeAtPos(Sim 
ulatePosCommand 
*pSimulatePosComman 
d, double specificPos, 
double 
*pMoveTimeMillisecond 
s, double 
*pRemainTimeMillisecon
--------------------------------------------
More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More...
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
-----------------------------------------------------------------------------------
195. Instruction: Simulate a linear interpolation motion command without moving any axes. The move distance, remain distance, and total distance after the linear interpolation runs for a specified amount of time are returned.
A: GetParam()
B: SimulateLinearIntplPos(pSimulateLinearIntplCommand)
C: SimulatePositionAtTime_LinearInterpolation(pLinearInterpolationSimulationCommand, timeMilliseconds)
D: SimulatePosAtTime_LinearIntpl(pSimulateLinearIntplCommand, timeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
195. Model's answer: D
195. Correct answer: D
195. Result: Correct



Processing Question 196:
196. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
--------------------------------------------
More... 

SimulateLinearIntplPos 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
*pPeakVelocity, double 
*pTotalTimeMilliseconds, double 
*pAccelerationTimeMilliseconds, double 
*pCruiseTimeMilliseconds, double 
*pDecelerationTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
peak velocity, acceleration time, cruise 
time (the time the axis velocity is 
constant), deceleration time, and total 
profile time of the linear interpolation 
motion command are returned. More... 


WMX3APIFUNC SimulatePosAtTime 
(SimulatePosCommand 
*pSimulatePosCommand, int returnType, 
double timeMilliseconds, double 
*pCalculatedPos, double *pCalculatedVel) 
Simulate a position command without 
moving any axes. The position and 
velocity of the axis after the motion 
command runs for the specified time are 
returned. More...
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
},
    {
        "No": 214,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePosCommand *pSimulatePosCommand, double specificPos, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos(pSimulatePosCommand, specificPos)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Simulate a position command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned. "
-----------------------------------------------------------------------------------
196. Instruction: Simulate a position command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned.
A: SimulateLinearIntplPos(pSimulateLinearIntplCommand)
B: SimulateTimeAtPos(pSimulatePosCommand, specificPos)
C: SetCommandPos(axis, position)
D: SimulateTimeAtSpecificPos(specificPos)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
196. Model's answer: B
196. Correct answer: B
196. Result: Correct



Processing Question 197:
197. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
--------------------------------------------
◆SimulateTimeAtDist() 
WMX3APIFUNC 
SimulateTimeAtDist ( SimulateLinearIntplC pSimulateLinearIntplC 
double specificDistance, 

double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
Simulate a linear interpolation motion command without moving any axes. The 
move time, remain time, and total time after the linear interpolation runs for a 
specified distance are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 
SimulateLinearIntplCo 
mmand that contains 
the simulated linear 
interpolation motion 
command parameters. 

[in] 
specificDistance The distance along the 
linear interpolation at 
which to calculate the 
move time, remain time, 
and total time of the 
linear interpolation 
command. This is the 
distance in N 
dimensions, where N is 
the number of axes in 
the interpolation.
--------------------------------------------
◆SimulateTimeAtDist() [1/2]
WMX3APIFUNC 

SimulateTimeAtDist ( SimulateTimeAtDist ( SimulatePathIntplComm pPathIntplCommand, 
double specificDistance, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 
Simulate a path interpolation command without moving any axes. The move time, remain time, and 
total time after the path interpolation runs for the specified distance are returned.
--------------------------------------------
},
    {
        "No": 491,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntplCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned."
-----------------------------------------------------------------------------------
197. Instruction: Simulate a linear interpolation motion command without moving any axes. The move time, remain time, and total time after the linear interpolation runs for a specified distance are returned.
A: SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)
B: SimulateTimeAtDist(pPathIntplCommand, specificDistance)
C: SimulateTimeAtDistance_LinearInterpolation(pLinearInterpolationSimulationCommand, distance)
D: AddRelativeSyncPhase(slaveAxis, phase, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
197. Model's answer: A
197. Correct answer: A
197. Result: Correct



Processing Question 198:
198. Context:
 ◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands. 

Parameters 
[in] 
axis The axis to allocate the 
buffer memory. 
[in] 
points The number of points to 
allocate memory for. 
Each PVT, PT, VT, or AT 


point occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of PVT 
motion commands. This function allocates memory to execute the following PVT 
motion commands: 


StartPVT 
StartPVT (Interpolation) 


StartPT 


StartVT 


StartAT
--------------------------------------------
[out] 
pMoveTimeMilliseconds A pointer to a double 
type variable that will 
contain the amount of 
time elapsed when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 


[out] 
pRemainTimeMillisecon A pointer to a double 
type variable that will 
contain the amount of 
time remaining when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 

[out] 
pTotalTimeMilliseconds A pointer to a double 
type variable that will 
contain the total time 
that the linear 
interpolation takes to 
complete. This value is 
always equal to the sum 
of the values returned by 
pMoveTime and 
pRemainTime. The units 
are milliseconds. 

◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands.
--------------------------------------------
specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
move time, remain time, and total time 
after the linear interpolation runs for a 
specified distance are returned. More... 

WMX3APIFUNC CreatePVTBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of PVT motion commands. 

More... 

WMX3APIFUNC FreePVTBuffer (int axis) 
Free PVT buffer memory for an axis. 
More... 
WMX3APIFUNC GetPVTBufferPoints (int axis, unsigned 
int *pPoints) 
Get the amount of PVT buffer memory 
currently allocated to an axis. More... 

WMX3APIFUNC GetPVTBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per 
point data in the PVT buffer memory. 

More...
--------------------------------------------
Returns 
Value 
0 : int -error code 
1: double -
MoveTimeMilliseco 
nds 
2: double -
RemainTimeMillisec 
onds 
3: double -
TotalTimeMillisecon 
ds 
Remarks 
Function 
C++ 
WMX3APIFUNC 
CreatePVTBuffer(int 
axis, unsigned int 
points); 
Python 
def CreatePVTBuffer(axis, 
points) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
FreePVTBuffer(int axis); 
Python def FreePVTBuffer(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
GetPVTBufferPoints(int 
axis, unsigned int 
*pPoints); 
def 
GetPVTBufferPoints(axis,
-----------------------------------------------------------------------------------
198. Instruction: Allocate buffer memory to an axis for the execution of PVT motion commands.
A: CalculatePVTProfile(axis, points):
B: CreatePVTBuffer(axis, points)
C: SetMovingAverageProfileTime(axis, milliseconds)
D: FreePVTBuffer(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
198. Model's answer: B
198. Correct answer: B
198. Result: Correct



Processing Question 199:
199. Context:
 The GetPVTBufferPoints function can be used to find the amount of PVT buffer 
memory currently allocated to an axis. 

The GetPVTBytesPerPoint function can be used to convert the buffer memory size 
from points to bytes. 

See also 

PVT Command 

◆ 
FreePVTBuffer() 

WMX3APIFU 
NC 
FreePVTBuff 
WMX3APIFU 
NC 
FreePVTBuff 
er ( 
int axis 
) 
Free PVT buffer memory for an axis. 

Parameters 
[in] 
axis The axis to free the 
buffer memory. 
Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePVTBuffer function. This allows CreatePVTBuffer to be called again to 
allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated 
memory is automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use 
for another purpose. 

◆ 
GetPVTBufferPoints()
--------------------------------------------
The following functions free memory dynamically. 


WMX3Api::CloseDevice 


ApiBuffer::FreeApiBuffer 
Log::CloseMemoryLogBuffer 
Log::SetApiLog (both allocates and frees memory) 
AdvMotion::FreeSplineBuffer 
Motion::FreePVTBuffer 
AdvMotion::FreePathIntplBuffer 
AdvMotion::FreePathIntplWithRotationBuffer 
AdvMotion::FreePathIntplLookaheadBuffer 
CyclicBuffer::CloseCyclicBuffer 


 


Motion Programming Guideline 

The motion functions of WMX3 can be accessed through its libraries. 

The following sections contain explanations of the motion functions. 


Axis Configuration 
Homing 
Basic Motion 
Advanced Motion 
PM (Profile mode) Motion 
Other Functions 
Parameters 
Status 
Error Codes 
Constants 
The following is a link to the API Reference for the libraries. 


API Reference 

 

Axis Configuration 

The following sections cover axis configuration topics. 


Overview 
Command Mode 


Gear Ratio 
Single Turn 
 


Overview
--------------------------------------------
The freed memory, after a brief delay, will become available for the system to use 
for another purpose. 

◆ 
GetPVTBufferPoints() 

WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
int 
axis, 
unsigned int * pPoints 
Get the amount of PVT buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the 
buffer memory size. 
[out] 
pPoints A pointer to an unsigned 
int that will contain the 
number of points that 
can be stored in the 
buffer memory. 
Remarks 

This function obtains the amount of PVT buffer memory currently allocated to an 
axis, in units of points. 

To convert the buffer memory size from the number of points to bytes, use the 
GetPVTBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will 
return 0 in the pPoints parameter. 

◆GetPVTBytesPerPoint()
--------------------------------------------
specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a linear interpolation motion 
command without moving any axes. The 
move time, remain time, and total time 
after the linear interpolation runs for a 
specified distance are returned. More... 

WMX3APIFUNC CreatePVTBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of PVT motion commands. 

More... 

WMX3APIFUNC FreePVTBuffer (int axis) 
Free PVT buffer memory for an axis. 
More... 
WMX3APIFUNC GetPVTBufferPoints (int axis, unsigned 
int *pPoints) 
Get the amount of PVT buffer memory 
currently allocated to an axis. More... 

WMX3APIFUNC GetPVTBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per 
point data in the PVT buffer memory. 

More...
-----------------------------------------------------------------------------------
199. Instruction: Free PVT buffer memory for an axis.
A: FreePVTBuffer(axis)
B: StartCircularIntplMov_RadiusAndEnd_Trigger(pCircularIntplCommand, pTrigger)
C: FreePrivateBuffer(device)
D: FreePathIntplBuffer(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
199. Model's answer: A
199. Correct answer: A
199. Result: Correct



Processing Question 200:
200. Context:
 The freed memory, after a brief delay, will become available for the system to use 
for another purpose. 

◆ 
GetPVTBufferPoints() 

WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
WMX3APIFUNC 
GetPVTBufferPoints ( 
) 
int 
axis, 
unsigned int * pPoints 
Get the amount of PVT buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the 
buffer memory size. 
[out] 
pPoints A pointer to an unsigned 
int that will contain the 
number of points that 
can be stored in the 
buffer memory. 
Remarks 

This function obtains the amount of PVT buffer memory currently allocated to an 
axis, in units of points. 

To convert the buffer memory size from the number of points to bytes, use the 
GetPVTBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will 
return 0 in the pPoints parameter. 

◆GetPVTBytesPerPoint()
--------------------------------------------
The GetPVTBufferPoints function can be used to find the amount of PVT buffer 
memory currently allocated to an axis. 

The GetPVTBytesPerPoint function can be used to convert the buffer memory size 
from points to bytes. 

See also 

PVT Command 

◆ 
FreePVTBuffer() 

WMX3APIFU 
NC 
FreePVTBuff 
WMX3APIFU 
NC 
FreePVTBuff 
er ( 
int axis 
) 
Free PVT buffer memory for an axis. 

Parameters 
[in] 
axis The axis to free the 
buffer memory. 
Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePVTBuffer function. This allows CreatePVTBuffer to be called again to 
allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated 
memory is automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use 
for another purpose. 

◆ 
GetPVTBufferPoints()
--------------------------------------------
◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands. 

Parameters 
[in] 
axis The axis to allocate the 
buffer memory. 
[in] 
points The number of points to 
allocate memory for. 
Each PVT, PT, VT, or AT 


point occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of PVT 
motion commands. This function allocates memory to execute the following PVT 
motion commands: 


StartPVT 
StartPVT (Interpolation) 


StartPT 


StartVT 


StartAT
--------------------------------------------
It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplBufferPoints() 

WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
Get the amount of path interpolation buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the buffer 
memory size. 
[out] 
pPoints A pointer to an unsigned int 
that will contain the number of 
points that can be stored in 
the buffer memory. 
Remarks 

This function obtains the amount of path interpolation buffer memory currently allocated to an axis, 
in units of points (interpolation segments). 

To convert the buffer memory size from the number of points to bytes, use the 
GetPathIntplBytesPerPoint function.
-----------------------------------------------------------------------------------
200. Instruction: Get the amount of PVT buffer memory currently allocated to an axis.
A: GetPathIntplBufferPoints(axis, pPoints)
B: FetchPVTBufferPoints(axis, pPoints)
C: StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)
D: GetPVTBufferPoints(axis, pPoints)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
200. Model's answer: D
200. Correct answer: D
200. Result: Correct



Processing Question 201:
201. Context:
 WMX3APIFUNC GetPVTBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per 
point data in the PVT buffer memory. 

More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, unsigned int 
numAddlCommands=0, 
PVTAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a PVT motion command. 
More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, Trigger *pTrigger, 


unsigned int numAddlCommands=0, 

PVTAdditionalCommand 

*pPVTAddlCommand=NULL) 

Start executing a triggered PVT motion 
command. More... 

WMX3APIFUNC StartPVT (PVTCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT motion 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a PVT interpolation 
motion command. More...
--------------------------------------------
pPoints) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPVTBytesPerPoint(u 
nsigned int *pBytes); 
Python 
def 
GetPVTBytesPerPoint(pB 
ytes) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPVT(PVTCommand 
*pPVTCommand); 
Python 
def 
StartPVT(AdvMotion_PVT 
Command 
pPVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPVT(PVTIntplComma 
nd *pPVTCommand); 
Python 
def 
StartPVT_Intpl(pPVTCom 
mand) 
Returns 
Type int 
Value error code
--------------------------------------------
If no buffer memory has been allocated to the specified channel yet, this function will 
return 0 in the pPoints parameter. 

◆GetPVTBytesPerPoint() 

WMX3APIFU 
NC 
GetPVTBytes 
WMX3APIFU 
NC 
GetPVTBytes 
PerPoint ( 
unsigned int * pBytes ) 
Get the number of bytes required per point data in the PVT buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned 
int that will contain the 
number of bytes of 
memory required per 
point data. 

Remarks 

This function obtains the number of bytes of memory required to store one point 
data in the PVT buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this 
function returns 48, the number of bytes required to store 100000 points is 
48*100000 = 4800000, or approximately 4.8MB.
--------------------------------------------
To convert the buffer memory size from the number of points to bytes, use the 
GetPathIntplBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will return 0 in the 
pPoints parameter. 

◆GetPathIntplBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks
-----------------------------------------------------------------------------------
201. Instruction: Get the number of bytes required per point data in the PVT buffer memory.
A: GetPVTBytesPerPoint(pBytes)
B: GetPathIntplLookaheadBytesPerPoint()
C: GetPVTBytesPerPoint(pvtBytes)
D: StartCircularIntplMov_RadiusAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
201. Model's answer: A
201. Correct answer: A
201. Result: Correct



Processing Question 202:
202. Context:
 ◆StartPVT() [1/6]
WMX3APIFUNC 
StartPVT ( PVTCommand * pPVTCommand, 
unsigned int numAddlCommands = 
PVTAdditionalComm pPVTAddlCommand = 
) 
Start executing a PVT motion command. 
Parameters 
[in]pPVTCommand A pointer to a 
PVTCommand that 

contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTAdditionalComman 
d objects. The size of 
the array should be 
equal to 
numAddlCommands. 

Remarks 

A PVT motion command consists of a sequence of position-velocity-time points. The 
axis will travel through each point position at the specified time and velocity. The 
acceleration is linear between two points, but may not be continuous at the interface 
of each point.
--------------------------------------------
WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 

Start executing a triggered PVT 
interpolation motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT 
interpolation motion command with 


multiple trigger events. More...
--------------------------------------------
},
    {
        "No": 220,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT(AdvMotion_PVTCommand pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 221,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT_Intpl(pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
--------------------------------------------
Function 
C++ 
*pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand 
*pPVTAddlCommand = 
NULL);" 
Python 
StartPVT(pPVTCommand, 
numAddlCommands, 
pPVTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
wmx3Api::Motion::Start 
PVT(PVTIntplCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTIntplComma 
nd *pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL);" 
StartPVT_Intpl(pPVTCom 
mand, 
numAddlCommands, 
PyObject 
*pPVTAddlCommand)
-----------------------------------------------------------------------------------
202. Instruction: Start executing a PVT motion command.
A: StartPVT(AdvMotion_PVTCommand pPVTCommand)
B: StartTrq(numCommands, pTrqCommand)
C: UpdatePVT(AdvancedMotion_Command pCommand)
D: SetFeedbackParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
202. Model's answer: A
202. Correct answer: A
202. Result: Correct



Processing Question 203:
203. Context:
 WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 

Start executing a triggered PVT 
interpolation motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT 
interpolation motion command with 


multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
},
    {
        "No": 220,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT(AdvMotion_PVTCommand pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 221,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT_Intpl(pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
--------------------------------------------
//Start PVT motionwmxlib_CoreMotion->motion->StartPVT(&pvt); 

The following plots show the position, velocity, and acceleration when the above code is 
executed. 



 


PVT Interpolation Command 

PVT interpolation synchronizes the motion of up to maxPvtInterpolateAxes. Each 
interpolating axis will execute its own PVT point sequence, but they will all start motion 
in the same communication cycle. 

PVT Interpolation Example 

The following code executes a PVT interpolation command. 

Motion::PVTIntplCommand pvti; 

pvti.axisCount = 2;
pvti.axis[0] = 0;
pvti.axis[1] = 1;
pvti.pointCount[0] = 4;
pvti.pointCount[1] = 4; 

//Define point datapvti.points[0][0].pos = 0;
pvti.points[0][0].velocity = 0;
pvti.points[0][0].timeMilliseconds = 0;
pvti.points[1][0].pos = 0;
pvti.points[1][0].velocity = 0;
pvti.points[1][0].timeMilliseconds = 0;
-----------------------------------------------------------------------------------
203. Instruction: Start executing a PVT interpolation motion command.
A: Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)
B: StartPVT_Interpolation(pPVTCommand)
C: StartPVT_Intpl(pPVTCommand)
D: StartVT(pVTCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
203. Model's answer: C
203. Correct answer: C
203. Result: Correct



Processing Question 204:
204. Context:
 Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand); 
Python 
def 
StartPT(pPTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand); 
Python 
def 
StartVT(pVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand); 
Python 
def 
StartAT(pATCommand) 
Returns 
Type int 
Value error code 
Remarks 
wmx3Api::Motion::Start 
PVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
PT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL);" 
Python 
StartPT(pPTCommand, 
numAddlCommands, 
pPTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
VT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand =
--------------------------------------------
◆StartPT() [1/3]
WMX3APIFUNC 
StartPT ( PTCommand * pPTCommand, 
unsigned int numAddlCommands = 
PTAdditionalComma pPTAddlCommand = 
) 
Start executing a PT motion command. 
Parameters 


[in] 
pPTCommand A pointer to a 
PTCommand that 
contains the PT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPTAddlCommand An optional argument 
that is a pointer to an 
array of 
PTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
Remarks 

A PT motion command consists of a sequence of position-time points. The axis will 
travel through each point position at the specified time. The velocity between two 
points is constant, but may not be continuous at the interface of each point.
--------------------------------------------
},
    {
        "No": 227,
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand, unsigned int numAddlCommands=0, PTAdditionalCommand *pPTAddlCommand=NULL)",
        "FunctionPython": "StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 228,
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand, unsigned int numAddlCommands=0, VTAdditionalCommand *pVTAddlCommand=NULL)",
        "FunctionPython": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command."
-----------------------------------------------------------------------------------
204. Instruction: Start executing a PT motion command.
A: SetFlightRecorderParam(axis, pParam)
B: StartPT(pPTCommand)
C: StartPTCommand(pPTCommand: PTCommand)
D: StartAT(pATCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
204. Model's answer: B
204. Correct answer: B
204. Result: Correct



Processing Question 205:
205. Context:
 Start executing a triggered VT motion 
command. More... 


Public Attributes 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a triggered VT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
unsigned int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a AT motion command. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command. More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command with multiple trigger events. 
More... 

CoreMotion * cmApi 


Member Function Documentation
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand); 
Python 
def 
StartPT(pPTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand); 
Python 
def 
StartVT(pVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand); 
Python 
def 
StartAT(pATCommand) 
Returns 
Type int 
Value error code 
Remarks 
wmx3Api::Motion::Start 
PVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
PT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL);" 
Python 
StartPT(pPTCommand, 
numAddlCommands, 
pPTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
VT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand =
--------------------------------------------
The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 

◆StartAT() [1/3]
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a AT motion command. 
Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 


that specifies the 
number of additional 
commands to append 
after pPVTCommand. 

[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 

ATAdditionalCommand 

objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point.
-----------------------------------------------------------------------------------
205. Instruction: Start executing a VT motion command.
A: StartVTCommand(pVTCommand, configuration)
B: StartAT(pATCommand)
C: StartVT(pVTCommand)
D: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
205. Model's answer: C
205. Correct answer: C
205. Result: Correct



Processing Question 206:
206. Context:
 },
    {
        "No": 229,
        "FunctionC++": "WMX3APIFUNC StartAT(ATCommand *pATCommand, unsigned int numAddlCommands=0, ATAdditionalCommand *pATAddlCommand=NULL)",
        "FunctionPython": "StartAT(pATCommand, numAddlCommands, pATAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a AT motion command. "
--------------------------------------------
NULL);" 
Python 
StartVT(pVTCommand, 
numAddlCommands, 
pVTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
AT(ATCommand 
*pATCommand, unsigned 
int numAddlCommands = 
0, ATAdditionalCommand 
*pATAddlCommand = 
NULL) "WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand, unsigned 
int numAddlCommands = 
0, ATAdditionalCommand 
*pATAddlCommand = 
NULL);" 
Python 
StartAT(pATCommand, 
numAddlCommands, 
pATAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ bool IsDeviceValid(); 
Python def IsDeviceValid() 
Returns 
Type bool 
Value 
Whether the device is 
alive 
Remarks
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand); 
Python 
def 
StartPT(pPTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand); 
Python 
def 
StartVT(pVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand); 
Python 
def 
StartAT(pATCommand) 
Returns 
Type int 
Value error code 
Remarks 
wmx3Api::Motion::Start 
PVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand
--------------------------------------------
Start executing a triggered VT motion 
command. More... 


Public Attributes 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a triggered VT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
unsigned int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a AT motion command. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command. More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command with multiple trigger events. 
More... 

CoreMotion * cmApi 


Member Function Documentation
-----------------------------------------------------------------------------------
206. Instruction: Start executing a AT motion command.
A: StartAT(pATCommand)
B: StartATCommand(pATCommand)
C: StartMov(pPosCommand)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
206. Model's answer: A
206. Correct answer: A
206. Result: Correct



Processing Question 207:
207. Context:
 ◆StartPVT() [1/6]
WMX3APIFUNC 
StartPVT ( PVTCommand * pPVTCommand, 
unsigned int numAddlCommands = 
PVTAdditionalComm pPVTAddlCommand = 
) 
Start executing a PVT motion command. 
Parameters 
[in]pPVTCommand A pointer to a 
PVTCommand that 

contains the PVT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPVTAddlCommand An optional argument 
that is a pointer to an 
array of 
PVTAdditionalComman 
d objects. The size of 
the array should be 
equal to 
numAddlCommands. 

Remarks 

A PVT motion command consists of a sequence of position-velocity-time points. The 
axis will travel through each point position at the specified time and velocity. The 
acceleration is linear between two points, but may not be continuous at the interface 
of each point.
--------------------------------------------
WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 

Start executing a triggered PVT 
interpolation motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT 
interpolation motion command with 


multiple trigger events. More...
--------------------------------------------
Function 
C++ 
*pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand 
*pPVTAddlCommand = 
NULL);" 
Python 
StartPVT(pPVTCommand, 
numAddlCommands, 
pPVTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
wmx3Api::Motion::Start 
PVT(PVTIntplCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTIntplComma 
nd *pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL);" 
StartPVT_Intpl(pPVTCom 
mand, 
numAddlCommands, 
PyObject 
*pPVTAddlCommand)
--------------------------------------------
},
    {
        "No": 225,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 226,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTIntplAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
-----------------------------------------------------------------------------------
207. Instruction: Start executing a PVT motion command.
A: StartPVTExecution(pInitialCommand, numAdditionalCommands, pAdditionalCommands)
B: StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)
C: StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
D: GetAxisUnit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
207. Model's answer: B
207. Correct answer: B
207. Result: Correct



Processing Question 208:
208. Context:
 WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 

Start executing a triggered PVT 
interpolation motion command. More... 

WMX3APIFUNC StartPVT (PVTIntplCommand 
*pPVTCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PVTIntplAdditionalCommand 
*pPVTAddlCommand=NULL) 
Start executing a triggered PVT 
interpolation motion command with 


multiple trigger events. More...
--------------------------------------------
},
    {
        "No": 225,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT(pPVTCommand, numAddlCommands, pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 226,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand, unsigned int numAddlCommands=0, PVTIntplAdditionalCommand *pPVTAddlCommand=NULL)",
        "FunctionPython": "StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
--------------------------------------------
},
    {
        "No": 220,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT(AdvMotion_PVTCommand pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT motion command. "
    },
    {
        "No": 221,
        "FunctionC++": "WMX3APIFUNC StartPVT(PVTIntplCommand *pPVTCommand)",
        "FunctionPython": "def StartPVT_Intpl(pPVTCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PVT interpolation motion command."
--------------------------------------------
Function 
C++ 
*pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand 
*pPVTAddlCommand = 
NULL);" 
Python 
StartPVT(pPVTCommand, 
numAddlCommands, 
pPVTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
wmx3Api::Motion::Start 
PVT(PVTIntplCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPVT(PVTIntplComma 
nd *pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTIntplAdditionalComma 
nd *pPVTAddlCommand = 
NULL);" 
StartPVT_Intpl(pPVTCom 
mand, 
numAddlCommands, 
PyObject 
*pPVTAddlCommand)
-----------------------------------------------------------------------------------
208. Instruction: Start executing a PVT interpolation motion command.
A: StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)
B: StartPVT_Interpolate(pPVTCommand, numAdditionalCommands, PyObject *pPVTAdditionalCommand)
C: StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
D: SetMaxTrqLimit(axis, torque)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
208. Model's answer: A
208. Correct answer: A
208. Result: Correct



Processing Question 209:
209. Context:
 ◆StartPT() [1/3]
WMX3APIFUNC 
StartPT ( PTCommand * pPTCommand, 
unsigned int numAddlCommands = 
PTAdditionalComma pPTAddlCommand = 
) 
Start executing a PT motion command. 
Parameters 


[in] 
pPTCommand A pointer to a 
PTCommand that 
contains the PT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pPTAddlCommand An optional argument 
that is a pointer to an 
array of 
PTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
Remarks 

A PT motion command consists of a sequence of position-time points. The axis will 
travel through each point position at the specified time. The velocity between two 
points is constant, but may not be continuous at the interface of each point.
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
PT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL);" 
Python 
StartPT(pPTCommand, 
numAddlCommands, 
pPTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
VT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand =
--------------------------------------------
multiple trigger events. More... 

WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
unsigned int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a PT motion command. 
More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command. More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
unsigned int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a VT motion command. 
More... 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL)
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand); 
Python 
def 
StartPT(pPTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand); 
Python 
def 
StartVT(pVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand); 
Python 
def 
StartAT(pATCommand) 
Returns 
Type int 
Value error code 
Remarks 
wmx3Api::Motion::Start 
PVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand
-----------------------------------------------------------------------------------
209. Instruction: Start executing a PT motion command.
A: StartPTWithAdditionalCommands(pPTCommand, numAdditionalCommands, pPTAdditionalCommand)
B: StartAT(pATCommand, numAddlCommands, pATAddlCommand)
C: StartLinearIntplPos(pLinearIntplCommand)
D: StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
209. Model's answer: D
209. Correct answer: D
209. Result: Correct



Processing Question 210:
210. Context:
 Start executing a triggered VT motion 
command. More... 


Public Attributes 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a triggered VT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
unsigned int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a AT motion command. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command. More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command with multiple trigger events. 
More... 

CoreMotion * cmApi 


Member Function Documentation
--------------------------------------------
multiple trigger events. More... 

WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
unsigned int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a PT motion command. 
More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command. More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
unsigned int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a VT motion command. 
More... 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL)
--------------------------------------------
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 

Start executing a triggered VT motion 
command. More... 


Public Attributes
--------------------------------------------
The motion will begin when the specified trigger condition is satisfied. 

See also 
PVT Command, Trigger Motion 

◆StartVT() [3/3]
WMX3APIFUNC 
StartVT ( VTCommand * pVTCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 
VTAdditionalComma pVTAddlCommand = 
) 
Start executing a triggered VT motion command with multiple trigger events. 
Parameters 

[in] 
pVTCommand A pointer to a 
VTCommand that 
contains the VT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pVTAddlCommand An optional argument 
that is a pointer to an 
array of 
VTAdditionalCommand 
objects. The size of the 
array should be equal to 
numAddlCommands. 
[in] 
pTriggerEvents A pointer to an object of 
the TriggerEvents class 
that contains the trigger 
events. 

Remarks
-----------------------------------------------------------------------------------
210. Instruction: Start executing a VT motion command.
A: StartPos_TriggerEvents(pPosCommand, pTriggerEvents)
B: StartVirtualTerminal(pVTCommand, numAdditionalCommands, pVTAdditionalCommand)
C: StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)
D: StartAT(pATCommand, numAddlCommands, pATAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
210. Model's answer: C
210. Correct answer: C
210. Result: Correct



Processing Question 211:
211. Context:
 Start executing a triggered VT motion 
command. More... 


Public Attributes 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a triggered VT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
unsigned int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a AT motion command. 
More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command. More... 
WMX3APIFUNC StartAT (ATCommand *pATCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
ATAdditionalCommand 
*pATAddlCommand=NULL) 
Start executing a triggered AT motion 
command with multiple trigger events. 
More... 

CoreMotion * cmApi 


Member Function Documentation
--------------------------------------------
multiple trigger events. More... 

WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
unsigned int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a PT motion command. 
More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command. More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
unsigned int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a VT motion command. 
More... 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL)
--------------------------------------------
The motion will begin when the specified multi-event trigger condition is satisfied. 

See also 
PVT Command, Trigger Events 

◆StartAT() [1/3]
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a AT motion command. 
Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 


that specifies the 
number of additional 
commands to append 
after pPVTCommand. 

[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 

ATAdditionalCommand 

objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point.
--------------------------------------------
See also 

PVT Command 

◆StartAT() [2/3]
WMX3APIFUNC 
StartAT ( ATCommand * pATCommand, 
Trigger * pTrigger, 
unsigned int numAddlCommands = 
ATAdditionalComma pATAddlCommand = 
) 
Start executing a triggered AT motion command. 
Parameters 
[in] 
pATCommand A pointer to a 
ATCommand that 
contains the AT 
parameters. 
[in] 
numAddlCommands An optional argument 
that specifies the 
number of additional 
commands to append 
after pPVTCommand. 
[in] 
pATAddlCommand An optional argument 
that is a pointer to an 
array of 
ATAdditionalCommand 
objects. The size of the 
array should be equal to 


numAddlCommands. 

[in] 
pTrigger A pointer to an object of 

the Trigger class that 

specifies the trigger 

condition. 

Remarks 

An AT motion command consists of a sequence of acceleration-time points. The 
acceleration between two points is constant, and is equal to the acceleration of the 
latter point.
-----------------------------------------------------------------------------------
211. Instruction: Start executing a AT motion command.
A: StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)
B: StartAT(pATCommand, numAddlCommands, pATAddlCommand)
C: StartATCommand(pATCommand, numAdditionalCommands, pATAddlCommand)
D: StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
211. Model's answer: B
211. Correct answer: B
211. Result: Correct



Processing Question 212:
212. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
212. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid()
B: GetMByteEx(addr)
C: CheckDeviceValidity()
D: Stop_StopCommand(numCommands, pStopCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
212. Model's answer: A
212. Correct answer: A
212. Result: Correct



Processing Question 213:
213. Context:
 Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More... 

WMX3APIFUNC SetCommandPosToFeedbackPos (int 
axis, double posChangePerCycle=0) 

Set the current cyclic command position 
equal to the feedback position. More... 

WMX3APIFUNC GetHomeData (HomeData *pHomeData) 

Get the homing related data for all axes. 

More... 

CoreMotion * cmApi 


Member Function Documentation 

◆StartHome() [1/2]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start homing an axis. The axis will search for the home position. If found, the home 
position will become the zero position for that axis. 

Parameters 
[in] 
axis The axis to home. 

Remarks 

This function searches for the home position as described by the HomeParam 
parameters.
--------------------------------------------
WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 

Resume HM mode homing for multiple 
axes that have been stopped. More... 

WMX3APIFUNC Cancel (int axis) 
Stop HM mode homing. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 


Stop HM mode homing for multiple axes. 

More... 

Public Attributes 

PMMotion * pmApi 

Member Function Documentation 

◆StartHome() [1/3]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start HM mode homing. 

Parameters 
[in] 
axis The axis to start homing. 

Remarks 

This function searches for the home position of the axis. 
The home profile must be first set with the SetHomeProfile function. 

◆StartHome() [2/3]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
HomeCommapHomeComma ) 
Start HM mode homing. 
Parameters 
[in] 
pHomeCommand A pointer to an object of 
the HomeCommand 
class that contains the 
parameters of the home 
command. 

Remarks
--------------------------------------------
},
    {
        "No": 230,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 231,
        "FunctionC++": "WMX3APIFUNC StartHome(int axis)",
        "FunctionPython": "def StartHome(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start homing an axis. The axis will search for the home position. If found, the home position will become the zero position for that axis."
--------------------------------------------
Function 
C++ WMX3APIFUNC 
StartHome(int axis); 
Python def StartHome(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartHome(AxisSelectio 
n *pAxisSelection); 
Python 
def 
StartHome_AxisSel(pAxis 
Selection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(int axis); 
Python def Continue(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(AxisSelection 
*pAxisSelection); 
Python 
def 
Continue_AxisSel(pAxisS 
election) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
213. Instruction: Start homing an axis. The axis will search for the home position. If found, the home position will become the zero position for that axis.
A: GetHomeParam(axis)
B: IsDeviceValid()
C: InitializeHome(axis)
D: StartHome(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
213. Model's answer: D
213. Correct answer: D
213. Result: Correct



Processing Question 214:
214. Context:
 WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 

Resume HM mode homing for multiple 
axes that have been stopped. More... 

WMX3APIFUNC Cancel (int axis) 
Stop HM mode homing. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 


Stop HM mode homing for multiple axes. 

More... 

Public Attributes 

PMMotion * pmApi 

Member Function Documentation 

◆StartHome() [1/3]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start HM mode homing. 

Parameters 
[in] 
axis The axis to start homing. 

Remarks 

This function searches for the home position of the axis. 
The home profile must be first set with the SetHomeProfile function. 

◆StartHome() [2/3]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
HomeCommapHomeComma ) 
Start HM mode homing. 
Parameters 
[in] 
pHomeCommand A pointer to an object of 
the HomeCommand 
class that contains the 
parameters of the home 
command. 

Remarks
--------------------------------------------
Function 
C++ WMX3APIFUNC 
StartHome(int axis); 
Python def StartHome(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartHome(AxisSelectio 
n *pAxisSelection); 
Python 
def 
StartHome_AxisSel(pAxis 
Selection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(int axis); 
Python def Continue(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(AxisSelection 
*pAxisSelection); 
Python 
def 
Continue_AxisSel(pAxisS 
election) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More... 

WMX3APIFUNC SetCommandPosToFeedbackPos (int 
axis, double posChangePerCycle=0) 

Set the current cyclic command position 
equal to the feedback position. More... 

WMX3APIFUNC GetHomeData (HomeData *pHomeData) 

Get the homing related data for all axes. 

More... 

CoreMotion * cmApi 


Member Function Documentation 

◆StartHome() [1/2]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start homing an axis. The axis will search for the home position. If found, the home 
position will become the zero position for that axis. 

Parameters 
[in] 
axis The axis to home. 

Remarks 

This function searches for the home position as described by the HomeParam 
parameters.
--------------------------------------------
Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

◆ 
Continue() [1/2] 



int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Resume HM mode homing for an axis that has been stopped. 

Parameters 
[in] 
axis The axis to resume 
homing. 

Remarks 

This function resumes the HM mode homing operation of an axis that has been 
stopped with the Cancel function. 

◆Continue() [2/2]
WMX3APIFU 
NC Continue ( AxisSelection pAxisSelection ) 
Resume HM mode homing for multiple axes that have been stopped. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to resume 
homing. 
Remarks 

This function is an overloaded function of Continue that resumes the stopped HM 
mode homing procedure for multiple axes. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks
-----------------------------------------------------------------------------------
214. Instruction: Start homing multiple axes. The axes will search for the home positions. If found, the home position will become the zero position for that axis
A: StartHome_AxisSel(pAxisSelection)
B: GetVelCommand(axis)
C: StartHome_AxisSelect(pAxis)
D: Stop_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
214. Model's answer: A
214. Correct answer: A
214. Result: Correct



Processing Question 215:
215. Context:
 See also 
Homing , Tutorial 4-1: Homing 

◆StartHome() [2/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
AxisSelection pAxisSelection ) 
Start homing multiple axes. The axes will search for the home positions. If found, 
the home position will become the zero position for that axis. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to home. 

Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

See also 
Homing , Tutorial 4-1: Homing 

◆Continue() [1/2]

int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Continue homing an axis that has been paused during the homing operation. 

Parameters 
[in] 
axis The axis to continue 
homing. 

Remarks
--------------------------------------------
int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Continue homing an axis that has been paused during the homing operation. 

Parameters 
[in] 
axis The axis to continue 
homing. 

Remarks 

This function continues the homing operation of an axis that has been paused 
during homing. An axis will pause during homing only if the Pause Mode parameter 
is set to TRUE for that axis. See Homing for information regarding the points at 
which pauses are inserted for each home type. 

Pause mode can be useful when experimenting with the homing routine. Pause 
mode is typically not used in deployed applications. 

This function will return an error if the specified axis is not paused while homing. 

◆Continue() [2/2]

WMX3APIFU 
NC Continue ( 
AxisSelection pAxisSelection ) 
Continue homing multiple axes that have been paused during the homing operation. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to continue 
homing. 
Remarks
--------------------------------------------
WMX3APIFUNC Continue (int axis) 
Continue homing an axis that has been 
paused during the homing operation. 
More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 


Public Attributes 

Continue homing multiple axes that have 
been paused during the homing 
operation. More... 

WMX3APIFUNC Cancel (int axis) 
Cancel the homing operation for an axis 
that has been paused during homing 
operation. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 
Cancel the homing procedure for 
multiple axes that have been paused 
during homing operation. More... 

WMX3APIFUNC SetCommandPos (int axis, double 
position) 

Set the current command position of the 
axis to the specified value. More... 

WMX3APIFUNC SetFeedbackPos (int axis, double 
position) 

Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More...
--------------------------------------------
Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

◆ 
Continue() [1/2] 



int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Resume HM mode homing for an axis that has been stopped. 

Parameters 
[in] 
axis The axis to resume 
homing. 

Remarks 

This function resumes the HM mode homing operation of an axis that has been 
stopped with the Cancel function. 

◆Continue() [2/2]
WMX3APIFU 
NC Continue ( AxisSelection pAxisSelection ) 
Resume HM mode homing for multiple axes that have been stopped. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to resume 
homing. 
Remarks 

This function is an overloaded function of Continue that resumes the stopped HM 
mode homing procedure for multiple axes. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks
-----------------------------------------------------------------------------------
215. Instruction: Continue homing an axis that has been paused during the homing operation.
A: Resume(axis)
B: ContinueAxis(axis):
C: StartTrq(pTrqCommand)
D: Continue(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
215. Model's answer: D
215. Correct answer: D
215. Result: Correct



Processing Question 216:
216. Context:
 int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Continue homing an axis that has been paused during the homing operation. 

Parameters 
[in] 
axis The axis to continue 
homing. 

Remarks 

This function continues the homing operation of an axis that has been paused 
during homing. An axis will pause during homing only if the Pause Mode parameter 
is set to TRUE for that axis. See Homing for information regarding the points at 
which pauses are inserted for each home type. 

Pause mode can be useful when experimenting with the homing routine. Pause 
mode is typically not used in deployed applications. 

This function will return an error if the specified axis is not paused while homing. 

◆Continue() [2/2]

WMX3APIFU 
NC Continue ( 
AxisSelection pAxisSelection ) 
Continue homing multiple axes that have been paused during the homing operation. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to continue 
homing. 
Remarks
--------------------------------------------
See also 
Homing , Tutorial 4-1: Homing 

◆StartHome() [2/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
StartHome ( 
AxisSelection pAxisSelection ) 
Start homing multiple axes. The axes will search for the home positions. If found, 
the home position will become the zero position for that axis. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to home. 

Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

See also 
Homing , Tutorial 4-1: Homing 

◆Continue() [1/2]

int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Continue homing an axis that has been paused during the homing operation. 

Parameters 
[in] 
axis The axis to continue 
homing. 

Remarks
--------------------------------------------
WMX3APIFUNC Continue (int axis) 
Continue homing an axis that has been 
paused during the homing operation. 
More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 


Public Attributes 

Continue homing multiple axes that have 
been paused during the homing 
operation. More... 

WMX3APIFUNC Cancel (int axis) 
Cancel the homing operation for an axis 
that has been paused during homing 
operation. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 
Cancel the homing procedure for 
multiple axes that have been paused 
during homing operation. More... 

WMX3APIFUNC SetCommandPos (int axis, double 
position) 

Set the current command position of the 
axis to the specified value. More... 

WMX3APIFUNC SetFeedbackPos (int axis, double 
position) 

Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More...
--------------------------------------------
Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

◆ 
Continue() [1/2] 



int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Resume HM mode homing for an axis that has been stopped. 

Parameters 
[in] 
axis The axis to resume 
homing. 

Remarks 

This function resumes the HM mode homing operation of an axis that has been 
stopped with the Cancel function. 

◆Continue() [2/2]
WMX3APIFU 
NC Continue ( AxisSelection pAxisSelection ) 
Resume HM mode homing for multiple axes that have been stopped. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to resume 
homing. 
Remarks 

This function is an overloaded function of Continue that resumes the stopped HM 
mode homing procedure for multiple axes. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks
-----------------------------------------------------------------------------------
216. Instruction: Continue homing multiple axes that have been paused during the homing operation.
A: SetSyncMasterSlave(masterAxis, slaveAxis)
B: Revise_AxisSelParams(pAxisSelection)
C: Pause_AxisSel(pAxisSelection)
D: Continue_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
216. Model's answer: D
216. Correct answer: D
216. Result: Correct



Processing Question 217:
217. Context:
 WMX3APIFUNC Continue (int axis) 
Continue homing an axis that has been 
paused during the homing operation. 
More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 


Public Attributes 

Continue homing multiple axes that have 
been paused during the homing 
operation. More... 

WMX3APIFUNC Cancel (int axis) 
Cancel the homing operation for an axis 
that has been paused during homing 
operation. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 
Cancel the homing procedure for 
multiple axes that have been paused 
during homing operation. More... 

WMX3APIFUNC SetCommandPos (int axis, double 
position) 

Set the current command position of the 
axis to the specified value. More... 

WMX3APIFUNC SetFeedbackPos (int axis, double 
position) 

Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More...
--------------------------------------------
◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks 

This function stops the HM mode homing operation that has been started with the 
StartHome function. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆Cancel() [2/2]
WMX3APIFU 
NC Cancel ( AxisSelection pAxisSelection ) 
Stop HM mode homing for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to stop 
homing. 

Remarks 

This function is an overloaded function of Cancel that stops the HM mode homing 
procedure for multiple axes. 


 


PMAxisMotion Class Reference 

This class contains PP mode position command functions for PM motion. 

Classes 

class PosCommand 
This class contains data for a position 
command. More... 

Public Member Functions
--------------------------------------------
◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to continue 
homing. 
Remarks 

This function is an overloaded function of Continue that continues the paused 
homing procedure for multiple axes. 

This function will return an error if any of the specified axes are not paused while 
homing. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Cancel the homing operation for an axis that has been paused during homing 
operation. 

Parameters 
[in] 
axis The axis to cancel 
homing. 

Remarks 

This function cancels the homing operation of an axis that has been paused during 
homing. See Continue for additional information regarding pause mode in homing. 

This function will return an error if the specified axis is not paused while homing. 

◆Cancel() [2/2]
-----------------------------------------------------------------------------------
217. Instruction: Cancel the homing operation for an axis that has been paused during homing operation.
A: StartMov_TriggerEvents(pPosCommand, pTriggerEvents)
B: Cancel(axis)
C: Wait(axis)
D: Stop(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
217. Model's answer: B
217. Correct answer: B
217. Result: Correct



Processing Question 218:
218. Context:
 WMX3APIFUNC Continue (int axis) 
Continue homing an axis that has been 
paused during the homing operation. 
More... 

WMX3APIFUNC Continue (AxisSelection 
*pAxisSelection) 


Public Attributes 

Continue homing multiple axes that have 
been paused during the homing 
operation. More... 

WMX3APIFUNC Cancel (int axis) 
Cancel the homing operation for an axis 
that has been paused during homing 
operation. More... 

WMX3APIFUNC Cancel (AxisSelection *pAxisSelection) 
Cancel the homing procedure for 
multiple axes that have been paused 
during homing operation. More... 

WMX3APIFUNC SetCommandPos (int axis, double 
position) 

Set the current command position of the 
axis to the specified value. More... 

WMX3APIFUNC SetFeedbackPos (int axis, double 
position) 

Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to continue 
homing. 
Remarks 

This function is an overloaded function of Continue that continues the paused 
homing procedure for multiple axes. 

This function will return an error if any of the specified axes are not paused while 
homing. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Cancel the homing operation for an axis that has been paused during homing 
operation. 

Parameters 
[in] 
axis The axis to cancel 
homing. 

Remarks 

This function cancels the homing operation of an axis that has been paused during 
homing. See Continue for additional information regarding pause mode in homing. 

This function will return an error if the specified axis is not paused while homing. 

◆Cancel() [2/2]
--------------------------------------------
Remarks 

This function is an overloaded function of StartHome that starts the homing 
procedure for multiple axes. 

◆ 
Continue() [1/2] 



int int 
WMX3APIFU 
NC Continue ( 
axis ) 
Resume HM mode homing for an axis that has been stopped. 

Parameters 
[in] 
axis The axis to resume 
homing. 

Remarks 

This function resumes the HM mode homing operation of an axis that has been 
stopped with the Cancel function. 

◆Continue() [2/2]
WMX3APIFU 
NC Continue ( AxisSelection pAxisSelection ) 
Resume HM mode homing for multiple axes that have been stopped. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to resume 
homing. 
Remarks 

This function is an overloaded function of Continue that resumes the stopped HM 
mode homing procedure for multiple axes. 

◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks
--------------------------------------------
◆Cancel() [1/2]

WMX3APIFU 
NC Cancel ( int axis ) 
WMX3APIFU 
NC Cancel ( int axis ) 
Stop HM mode homing. 

Parameters 
[in] 
axis The axis to stop homing. 

Remarks 

This function stops the HM mode homing operation that has been started with the 
StartHome function. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆Cancel() [2/2]
WMX3APIFU 
NC Cancel ( AxisSelection pAxisSelection ) 
Stop HM mode homing for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies 
which axes to stop 
homing. 

Remarks 

This function is an overloaded function of Cancel that stops the HM mode homing 
procedure for multiple axes. 


 


PMAxisMotion Class Reference 

This class contains PP mode position command functions for PM motion. 

Classes 

class PosCommand 
This class contains data for a position 
command. More... 

Public Member Functions
-----------------------------------------------------------------------------------
218. Instruction: Cancel the homing procedure for multiple axes that have been paused during homing operation
A: Cancel_AxisSel(pAxisSelection)
B: Update_AxisSelection(pUpdatedSelection)
C: Wait_AxisSel(pAxisSelection)
D: StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
218. Model's answer: A
218. Correct answer: A
218. Result: Correct



Processing Question 219:
219. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 


Start an absolute triggered position 
command with multiple trigger events. 

More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command with multiple trigger events. 
More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start absolute position commands for 
multiple axes. More... 
WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand) 
Start relative position commands for 
multiple axes. More... 
WMX3APIFUNC StartPos (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 
Start absolute triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
219. Instruction: Set the current command position of the axis to the specified value.
A: StartMov_TriggerEvents(pPosCommand, pTriggerEvents)
B: SetCommandPos(axis, position)
C: UpdateCommandLocation(axis, new_position)
D: GetVelCommand(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
219. Model's answer: B
219. Correct answer: B
219. Result: Correct



Processing Question 220:
220. Context:
 If the API Wait Until Motion Start parameter is enabled, this function will not return 
until after the next cycle, when the home position has been updated. Motion 
functions can be called after this function returns, and the target positions will be 
calculated correctly based on the updated home position. If the API Wait Until 
Motion Start parameter is disabled, the user must wait until the next cycle and 
verify that the home position has been updated using the GetStatus function before 
calling motion functions. See Function Calls to blocking for additional information. 

See also 

Tutorial 4-2: Set coordinates 

◆SetFeedbackPos() 

WMX3APIFUNC 
SetFeedbackPos ( 
) 
WMX3APIFUNC 
SetFeedbackPos ( 
) 
int 
axis, 
double position 
Set the current feedback position of the axis to the specified value. 

Parameters 
[in] 
axis The axis to set the 
feedback position of. 
[in] 
position The value to set the axis 
feedback position to. 
Remarks
--------------------------------------------
This function can be used to manually override the Home Done state that is 
normally set or reset as described above. This may be useful if the user implements 
a custom homing routine. 

The Home Done state affects several operations. The software limit (set with Soft 
Limit Type parameter) only triggers while the Home Done state is TRUE. 

◆SetCommandPosToFeedbackPos() 

WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
Set the current cyclic command position equal to the feedback position. 

Parameters 
[in] 
axis The axis to set the 
command position to 
feedback position. 
[in] 
posChangePerCycle An optional argument 
that limits the rate at 
which this function 
causes the command 
position to change every 
cycle. If this value is set, 
the command position 
will cchange by at most 
this number of user units 
every cycle. 
Remarks
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetFeedbackParam(int 
axis, FeedbackParam 
*pParam, 
FeedbackParam 
*pParamError = NULL); 
Python 
def 
SetFeedbackParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetHomeParam(int axis, 
HomeParam *pParam, 
HomeParam 
*pParamError = NULL); 
Python 
def SetHomeParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m param error 
Remarks 
C++ 
WMX3APIFUNC 
SetLimitParam(int axis, 
LimitParam *pParam,
--------------------------------------------
WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL)
-----------------------------------------------------------------------------------
220. Instruction: Set the current feedback position of the axis to the specified value.
A: SetFeedbackPosition(axis, newPosition)
B: SetFeedbackParam(axis, pParam)
C: SetFeedbackPos(axis, position)
D: StartPosToJog_Trigger(pTriggerJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
220. Model's answer: C
220. Correct answer: C
220. Result: Correct



Processing Question 221:
221. Context:
 Function 
Returns Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetHomeDone(int axis, 
unsigned char value); 
def SetHomeDone(axis, 
value) 
int 
error code 
Remarks 
WMX3APIFUNC 
C++ 
SetCommandPosToFeed 
backPos(int axis, double 
posChangePerCycle = 
0); 
Function 
Python 
def 
SetCommandPosTo 
FeedbackPos(axis) 
def 
SetCommandPosTo 
FeedbackPos(axis, 
posChangePerCycl 
e) 
Returns 
Type 
Value 
int 
error code 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetHomeData(HomeDat 
a *pHomeData); 
def GetHomeData() 
tuple 
Returns 
0 : int -error code 
1 :
--------------------------------------------
If the API Wait Until Motion Start parameter is enabled, this function will not return 
until after the next cycle, when the home position has been updated. Motion 
functions can be called after this function returns, and the target positions will be 
calculated correctly based on the updated home position. If the API Wait Until 
Motion Start parameter is disabled, the user must wait until the next cycle and 
verify that the home position has been updated using the GetStatus function before 
calling motion functions. See Function Calls to blocking for additional information. 

See also 

Tutorial 4-2: Set coordinates 

◆SetHomeDone() 

WMX3APIFUNC 
SetHomeDone ( 
) 
WMX3APIFUNC 
SetHomeDone ( 
) 
int 
axis, 
unsigned char value 
Set the "home done" state. 

Parameters 
[in] 
axis The axis to set the 
"home done" state. 
[in] 
value Specify 0 to set the 
"home done" state to 
FALSE or 1 to set the 
"home done" state to 
TRUE. 
Remarks
--------------------------------------------
Function 
C++ WMX3APIFUNC 
StartHome(int axis); 
Python def StartHome(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartHome(AxisSelectio 
n *pAxisSelection); 
Python 
def 
StartHome_AxisSel(pAxis 
Selection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(int axis); 
Python def Continue(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(AxisSelection 
*pAxisSelection); 
Python 
def 
Continue_AxisSel(pAxisS 
election) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
Set the current feedback position of the 
axis to the specified value. More... 

WMX3APIFUNC SetHomeDone (int axis, unsigned char 

value) 

Set the "home done" state. More... 

WMX3APIFUNC SetCommandPosToFeedbackPos (int 
axis, double posChangePerCycle=0) 

Set the current cyclic command position 
equal to the feedback position. More... 

WMX3APIFUNC GetHomeData (HomeData *pHomeData) 

Get the homing related data for all axes. 

More... 

CoreMotion * cmApi 


Member Function Documentation 

◆StartHome() [1/2]
WMX3APIFU 
NC 
StartHome ( int axis ) 
Start homing an axis. The axis will search for the home position. If found, the home 
position will become the zero position for that axis. 

Parameters 
[in] 
axis The axis to home. 

Remarks 

This function searches for the home position as described by the HomeParam 
parameters.
-----------------------------------------------------------------------------------
221. Instruction: Set the home done state.
A: SetHomeDoneV2(axis_number, is_complete)
B: SetAxisCommandMode(axis, mode)
C: SetHomeDone(axis, value)
D: StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
221. Model's answer: C
221. Correct answer: C
221. Result: Correct



Processing Question 222:
222. Context:
 ◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand()
--------------------------------------------
This function can be used to manually override the Home Done state that is 
normally set or reset as described above. This may be useful if the user implements 
a custom homing routine. 

The Home Done state affects several operations. The software limit (set with Soft 
Limit Type parameter) only triggers while the Home Done state is TRUE. 

◆SetCommandPosToFeedbackPos() 

WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
WMX3APIFUNC 
SetCommandPosTo 
FeedbackPos ( int axis, 
double posChangePerCycle 
) 
Set the current cyclic command position equal to the feedback position. 

Parameters 
[in] 
axis The axis to set the 
command position to 
feedback position. 
[in] 
posChangePerCycle An optional argument 
that limits the rate at 
which this function 
causes the command 
position to change every 
cycle. If this value is set, 
the command position 
will cchange by at most 
this number of user units 
every cycle. 
Remarks
--------------------------------------------
This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the velocityCmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks
--------------------------------------------
This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks
-----------------------------------------------------------------------------------
222. Instruction: Set the current cyclic command position equal to the feedback position.
A: StartVel(pVelCommand)
B: SetCommandPos(axis, position)
C: SetCommandPosToFeedbackPos(axis)
D: SetCommandPositionToFeedbackPosition(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
222. Model's answer: C
222. Correct answer: C
222. Result: Correct



Processing Question 223:
223. Context:
 boundary (taking care that the output torque is small enough as to not damage the 

machine). When the axis touches the physical boundary, the feedback position will 
stop changing even as the command position continues increasing (or decreasing) 
to positions beyond the boundary. After this point, this function can be called to 
return the command position back to the position where the feedback position 
stopped changing, which is exactly at the physical boundary. The 
posChangePerCycle argument might be set to a nonzero value if the servo 
generates an alarm from changing the position command too rapidly during this 
operation. 

◆GetHomeData() 
WMX3APIFU 
NC 
GetHomeDat 
a ( HomeData * pHomeData ) 
Get the homing related data for all axes. 
Parameters 
[out] 
pHomeData A pointer to a HomeData 
object that will contain 
the homing related data 
for all axes. 

 

Motion Class Reference 

This class contains position command functions. 

Classes
--------------------------------------------
},
    {
        "No": 240,
        "FunctionC++": "WMX3APIFUNC SetCommandPosToFeedbackPos(int axis, double posChangePerCycle=0)",
        "FunctionPython": "def SetCommandPosToFeedbackPos(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the current cyclic command position equal to the feedback position."
    },
    {
        "No": 241,
        "FunctionC++": "WMX3APIFUNC GetHomeData(HomeData *pHomeData)",
        "FunctionPython": "def GetHomeData()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the homing related data for all axes. "
--------------------------------------------
Function 
Returns Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetHomeDone(int axis, 
unsigned char value); 
def SetHomeDone(axis, 
value) 
int 
error code 
Remarks 
WMX3APIFUNC 
C++ 
SetCommandPosToFeed 
backPos(int axis, double 
posChangePerCycle = 
0); 
Function 
Python 
def 
SetCommandPosTo 
FeedbackPos(axis) 
def 
SetCommandPosTo 
FeedbackPos(axis, 
posChangePerCycl 
e) 
Returns 
Type 
Value 
int 
error code 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetHomeData(HomeDat 
a *pHomeData); 
def GetHomeData() 
tuple 
Returns 
0 : int -error code 
1 :
--------------------------------------------
Function 
C++ WMX3APIFUNC 
StartHome(int axis); 
Python def StartHome(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartHome(AxisSelectio 
n *pAxisSelection); 
Python 
def 
StartHome_AxisSel(pAxis 
Selection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(int axis); 
Python def Continue(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Continue(AxisSelection 
*pAxisSelection); 
Python 
def 
Continue_AxisSel(pAxisS 
election) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
223. Instruction: Get the homing related data for all axes.
A: GetUserData()
B: GetHomeData()
C: GetModuleId()
D: GetSyncParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
223. Model's answer: B
223. Correct answer: B
223. Result: Correct



Processing Question 224:
224. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
224. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: isDeviceValid(device: Device)
B: StartJog(pJogCommand)
C: IsDeviceValid()
D: ClearSyncGroupError(groupId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
224. Model's answer: C
224. Correct answer: C
224. Result: Correct



Processing Question 225:
225. Context:
 WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis. 

Parameters 
[in] 
masterAxis The master axis. 
[in] 
slaveAxis The slave axis. 
[in] 
pSyncOptions An optional argument 
that is used to specify 
additional options for the 
sync control. 

Remarks 

This function starts sync control between a master axis and a slave axis. The 
command position of the slave axis at the time that this function is executed 
becomes synchronized to the command position of the master axis at the time that 
this function is executed. Any subsequent changes to the master axis command 
position will also be added to the slave axis command position. 

A slave axis will follow the movements of the master axis. 

When this function returns, sync control is already established. The master axis can 
be moved immediately.
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
--------------------------------------------
WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
-----------------------------------------------------------------------------------
225. Instruction: Establish synchronous control between a master axis and a slave axis.
A: SetFeedbackParam(axis, pParam)
B: SetSyncMasterSlave(masterAxis, slaveAxis)
C: SetSynchronizationMasterSlave(masterAxis, slaveAxis)
D: SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
225. Model's answer: B
225. Correct answer: B
225. Result: Correct



Processing Question 226:
226. Context:
 WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
The Master Desync Type and Slave Desync Type parameters can be set to 
automatically stop or turn off the axis servo when synchronization is broken. 

The Single Turn Mode parameter must be set to the same value for the master and 
slave axes (this parameter must be enabled or disabled for both axes). If the Single 
Turn Mode parameter is set to enabled, then the master and slave axes must have 
the same Single Turn Encoder Count. 

When the slave servo turns off (Servo On becomes FALSE), synchronous control is 
resolved for that slave axis. This function must be called again to reestablish 
synchronous control for that axis. 

See also 

Synchronization 

◆SetSyncCombine() 
WMX3APIFUNC 
SetSyncCombine ( int masterAxis1, 
int masterAxis2, 
int slaveAxis, 
SyncCombineOption pSyncCombineOption 
) 
Combine the position commands of two master axes and set it as the position 
command of a slave axis.
--------------------------------------------
Function 
slaveAxis, 
SyncCombineOptions 
*pSyncCombineOptions 
= NULL); 
Python 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis) 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis, 
pSyncCombineOpti 
ons) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteSyncPhase(i 
nt slaveAxis, double 
phase, Profile *pProfile); 
Python 
def 
SetAbsoluteSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
AddRelativeSyncPhase(i 
nt slaveAxis, double
--------------------------------------------
Parameters 
[in] 
masterAxis1 The first master axis. 
[in] 
masterAxis2 The second master axis. 
[in] 
slaveAxis The slave axis. 


[in] 
pSyncCombineOptions An optional argument 
that is used to specify 
additional options for the 
sync control. 

Remarks 

Combine sync is a special type of sync control in which two master axes control a 
slave axis. The cyclic position command of the slave axis will be set equal to the 
sum of the cyclic position commands of the two master axes. 

Upon initiating combine sync control, a single offset to the slave axis will be 
calculated so that the current position command of the slave axis equals the sum of 
the position commands of the two master axes. 

When this function returns, sync control is already established. The master axes 
can be moved immediately. 

Both master axes and the slave axis must not be in motion (must be in Idle 
operation state) when this function is called.
-----------------------------------------------------------------------------------
226. Instruction: Combine the position commands of two master axes and set it as the position command of a slave axis.
A: SetSyncCombineWithDelay(masterAxis1, masterAxis2, slaveAxis, delayTime)
B: StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: CloseCyclicBuffer_AxisSel(pAxisSelection)
D: SetSyncCombine(masterAxis1, masterAxis2, slaveAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
226. Model's answer: D
226. Correct answer: D
226. Result: Correct



Processing Question 227:
227. Context:
 See also 

Combine Sync 

◆SetAbsoluteSyncPhase() 
WMX3APIFUNC 
SetAbsoluteSyncPh 
ase ( int slaveAxis, 
double phase, 
Profile * pProfile 
) 
Set the absolute sync phase of a slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync phase. 
[in] 
phase The absolute sync phase 
to apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
phase. 

Remarks 

This function sets the absolute sync phase of a slave axis. The sync phase is an 


additional offset that is applied to the sync slave axis but not the master axis. 

The sync phase is 0 when sync control is started. 

The slave will shift from the master axis by the sync phase amount using the 
specified profile. The time taken for the slave to completely shift by the sync phase 
amount will depend on the specified profile type, velocity, acceleration, etc. 

The sync phase may be changed while the master and slave axes are in motion.
--------------------------------------------
Function 
slaveAxis, 
SyncCombineOptions 
*pSyncCombineOptions 
= NULL); 
Python 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis) 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis, 
pSyncCombineOpti 
ons) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteSyncPhase(i 
nt slaveAxis, double 
phase, Profile *pProfile); 
Python 
def 
SetAbsoluteSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
AddRelativeSyncPhase(i 
nt slaveAxis, double
--------------------------------------------
Homing is not supported in combine sync control. Attempting to start homing for 
combine sync axes will cause the homing function to return an error. 

The ResolveSync function can be used resolve combine sync control and regular 
sync control. 

Slave axes which are controlled with combine sync will have an operation state of 


Sync in the Op State status returned by the GetStatus function. The axis numbers 
of the two master axes can be found in the Master Axis and Second Master Axis 
statuses returned by the GetStatus function. 

When the slave servo turns off (Servo On becomes FALSE), synchronous control is 
resolved for that slave axis. This function must be called again to reestablish 
synchronous control for that axis. 

See also 

Combine Sync 

◆SetAbsoluteSyncPhase() 
WMX3APIFUNC 
SetAbsoluteSyncPh 
ase ( int slaveAxis, 
double phase, 
Profile * pProfile 
) 
Set the absolute sync phase of a slave axis.
--------------------------------------------
WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
-----------------------------------------------------------------------------------
227. Instruction: Set the absolute sync phase of a slave axis.
A: SetSyncPhaseAbsolute(slaveAxis, phase, profileParams)
B: SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)
C: ExecQuickStop_AxisSel(pAxisSelection)
D: SyncToJog(slaveAxis, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
227. Model's answer: B
227. Correct answer: B
227. Result: Correct



Processing Question 228:
228. Context:
 Function phase, Profile *pProfile); 
Python 
def 
AddRelativeSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGearRatio(int 
slaveAxis, double 
gearRatio, Profile 
*pProfile); 
Python 
def 
SetSyncGearRatio(slaveA 
xis, gearRatio, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGearRatio(int 
masterAxis, int 
slaveAxis, double 
gearRatio, Profile 
*pProfile); 
Python 
def 
SetSyncGearRatio(master 
Axis, slaveAxis, gearRatio, 
pProfile) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
Function 
slaveAxis, 
SyncCombineOptions 
*pSyncCombineOptions 
= NULL); 
Python 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis) 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis, 
pSyncCombineOpti 
ons) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteSyncPhase(i 
nt slaveAxis, double 
phase, Profile *pProfile); 
Python 
def 
SetAbsoluteSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
AddRelativeSyncPhase(i 
nt slaveAxis, double
--------------------------------------------
WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
See also 

Sync Phase Offset 

◆AddRelativeSyncPhase() 
WMX3APIFUNC 
AddRelativeSyncPh 
ase ( int slaveAxis, 
double phase, 
Profile * pProfile 
) 
Add a relative sync phase to a slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync phase. 
[in] 
phase The relative sync phase 
to apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
phase. 
Remarks 

This function adds a relative sync phase to a slave axis. The sync phase is an 
additional offset that is applied to the sync slave axis but not the master axis. 

The sync phase is 0 when sync control is started. 

The slave will shift from the master axis by the sync phase amount using the 
specified profile. The time taken for the slave to completely shift by the sync phase 
amount will depend on the specified profile type, velocity, acceleration, etc. 

The sync phase may be changed while the master and slave axes are in motion.
-----------------------------------------------------------------------------------
228. Instruction: Add a relative sync phase to a slave axis.
A: AddRelativeSyncPhase(slaveAxis, phase, pProfile)
B: SetSyncGroup(groupId, pSyncGroup)
C: SetSyncGearRatio(slaveAxis, gearRatio, pProfile)
D: UpdateRelativeSyncPhase(slaveAxis, newPhase, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
228. Model's answer: A
228. Correct answer: A
228. Result: Correct



Processing Question 229:
229. Context:
 WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
The sync phase may be changed while the master and slave axes are in motion. 

The sync phase may not be changed while the axis has still only partially applied a 
previous sync phase shift or a sync gear shift. Whether a sync axis is currently in 
the middle of applying a sync phase shift or sync gear shift can be checked with the 
Detail Op State status. An axis executing phase shift will be in the 
Sync_PhaseShift state and an axis executing gear shift will be in the 
Sync_GearShift state. 

The currently applied sync phase can be obtained by checking the Sync Phase 
Offset status. A positive relative sync phase will cause the slave to shift in the 
positive direction. A negative relative sync phase will cause the slave to shift in the 
negative direction. 

See also 

Sync Phase Offset 


◆SetSyncGearRatio() [1/2]
WMX3APIFUNC 
SetSyncGearRatio ( int slaveAxis, 
double gearRatio, 
Profile * pProfile 
) 
Set the sync gear ratio between a sync slave axis and the master axis.
--------------------------------------------
◆SetSyncGearRatio() [1/2]
WMX3APIFUNC 
SetSyncGearRatio ( int slaveAxis, 
double gearRatio, 
Profile * pProfile 
) 
Set the sync gear ratio between a sync slave axis and the master axis. 

Parameters 
[in] 
slaveAxis The slave axis to apply 
the sync gear ratio. 
[in] 
gearRatio The sync gear ratio to 
apply. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile to 
use when applying the 
sync gear ratio. 

Remarks 

The sync gear ratio is the ratio between the slave axis position command and the 
master axis position command. The amount that the master axis moves during one 
cycle is multiplied by the sync gear ratio to calculate the amount that the slave axis 
moves during that cycle. 

The sync gear ratio can be any value between 0.000001 and 2147483647, or any 
value between -0.000001 and -2147483647. A negative sync gear ratio will cause 
the slave axis to move in the opposite direction as the master axis.
--------------------------------------------
},
    {
        "No": 247,
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int slaveAxis, double gearRatio, Profile *pProfile)",
        "FunctionPython": "def SetSyncGearRatio(slaveAxis, gearRatio, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the sync gear ratio between a sync slave axis and the master axis. "
    },
    {
        "No": 248,
        "FunctionC++": "WMX3APIFUNC SetSyncGearRatio(int masterAxis, int slaveAxis, double gearRatio, Profile *pProfile)",
        "FunctionPython": "def SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Establish sync control between two axes, and set the sync gear ratio between a sync slave axis and the master axis."
-----------------------------------------------------------------------------------
229. Instruction: Set the sync gear ratio between a sync slave axis and the master axis.
A: SetSyncGearRatioV2(slaveAxis, updatedGearRatio, motionProfile)
B: SetMaxTrqLimit(axis, torque)
C: SetSyncGearRatio(slaveAxis, gearRatio, pProfile)
D: SyncToJog(slaveAxis, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
229. Model's answer: C
229. Correct answer: C
229. Result: Correct



Processing Question 230:
230. Context:
 WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
Function 
slaveAxis, 
SyncCombineOptions 
*pSyncCombineOptions 
= NULL); 
Python 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis) 
def 
SetSyncCombine(m 
asterAxis1, 
masterAxis2, 
slaveAxis, 
pSyncCombineOpti 
ons) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteSyncPhase(i 
nt slaveAxis, double 
phase, Profile *pProfile); 
Python 
def 
SetAbsoluteSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
AddRelativeSyncPhase(i 
nt slaveAxis, double
--------------------------------------------
Function phase, Profile *pProfile); 
Python 
def 
AddRelativeSyncPhase(sl 
aveAxis, phase, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGearRatio(int 
slaveAxis, double 
gearRatio, Profile 
*pProfile); 
Python 
def 
SetSyncGearRatio(slaveA 
xis, gearRatio, pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGearRatio(int 
masterAxis, int 
slaveAxis, double 
gearRatio, Profile 
*pProfile); 
Python 
def 
SetSyncGearRatio(master 
Axis, slaveAxis, gearRatio, 
pProfile) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
The sync phase may be changed while the master and slave axes are in motion. 

The sync phase may not be changed while the axis has still only partially applied a 
previous sync phase shift or a sync gear shift. Whether a sync axis is currently in 
the middle of applying a sync phase shift or sync gear shift can be checked with the 
Detail Op State status. An axis executing phase shift will be in the 
Sync_PhaseShift state and an axis executing gear shift will be in the 
Sync_GearShift state. 

The currently applied sync phase can be obtained by checking the Sync Phase 
Offset status. A positive relative sync phase will cause the slave to shift in the 
positive direction. A negative relative sync phase will cause the slave to shift in the 
negative direction. 

See also 

Sync Phase Offset 


◆SetSyncGearRatio() [1/2]
WMX3APIFUNC 
SetSyncGearRatio ( int slaveAxis, 
double gearRatio, 
Profile * pProfile 
) 
Set the sync gear ratio between a sync slave axis and the master axis.
-----------------------------------------------------------------------------------
230. Instruction: Establish sync control between two axes, and set the sync gear ratio between a sync slave axis and the master axis.
A: SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)
B: SetSyncGearRatioWithProfile(masterAxis, slaveAxis, gearRatio, pProfile)
C: SetSyncGearRatio(masterAxis, slaveAxis, gearRatio, pProfile)
D: Export_SysPrm(pPath, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
230. Model's answer: C
230. Correct answer: C
230. Result: Correct



Processing Question 231:
231. Context:
 WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
--------------------------------------------
Function 
C++ SyncToJog(int 
slaveAxis, Profile 
*pProfile); 
Python 
def SyncToJog(slaveAxis, 
pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SyncToJog(int 
slaveAxis); 
Python def SyncToJog(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResolveSync(int 
slaveAxis); 
Python 
def 
ResolveSync(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGroup(int 
groupId, SyncGroup 
syncGroup); 
Python 
def 
SetSyncGroup(groupId, 
pSyncGroup) 
Type int
--------------------------------------------
Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile 
parameters for the jog 
command. 

Remarks 

This function resolves sync control for a slave axis, and immediately starts a jog 
command for the slave axis. If the slave axis was in motion when this function is 
called, the initial velocity of the jog command will be the velocity of the slave axis 
when this function is called (unless a non-zero startingVelocity is specified in the 
profile argument of this function, in which case that starting velocity will take 
precedence). 

◆SyncToJog() [2/2]

WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
Resolve sync control for a slave axis, and immediately start a jog command for the 
slave axis with the velocity equal to the velocity that the slave axis was moving at. 

Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 

Remarks
--------------------------------------------
If the specified slave axis has already established sync control with the specified 
master axis, this function behaves the same as SetSyncGearRatio. If the specified 
slave axis is synchronized to a different master axis, an error will be returned. 

See also 

Sync Gear Ratio 

◆ 
SyncToJog() [1/2] 



WMX3APIFUNC 
SyncToJog ( 
WMX3APIFUNC 
SyncToJog ( 
int 
slaveAxis, 
Profile * pProfile 
) 
Resolve sync control for a slave axis, and immediately start a jog command for the 
slave axis. 

Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile 
parameters for the jog 
command. 

Remarks
-----------------------------------------------------------------------------------
231. Instruction: Resolve sync control for a slave axis, and immediately start a jog command for the slave axis.
A: SyncToJog(slaveAxis, pProfile)
B: SyncToJog(slaveAxisID, jogProfile)
C: AddRelativeSyncPhase(slaveAxis, phase, pProfile)
D: SetEmergencyStopParam(pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
231. Model's answer: A
231. Correct answer: A
231. Result: Correct



Processing Question 232:
232. Context:
 WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
--------------------------------------------
Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 
[in] 
pProfile A pointer to a Profile 
class object that 
contains the profile 
parameters for the jog 
command. 

Remarks 

This function resolves sync control for a slave axis, and immediately starts a jog 
command for the slave axis. If the slave axis was in motion when this function is 
called, the initial velocity of the jog command will be the velocity of the slave axis 
when this function is called (unless a non-zero startingVelocity is specified in the 
profile argument of this function, in which case that starting velocity will take 
precedence). 

◆SyncToJog() [2/2]

WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
WMX3APIFU 
NC 
SyncToJog ( int slaveAxis ) 
Resolve sync control for a slave axis, and immediately start a jog command for the 
slave axis with the velocity equal to the velocity that the slave axis was moving at. 

Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 

Remarks
--------------------------------------------
Function 
C++ SyncToJog(int 
slaveAxis, Profile 
*pProfile); 
Python 
def SyncToJog(slaveAxis, 
pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SyncToJog(int 
slaveAxis); 
Python def SyncToJog(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResolveSync(int 
slaveAxis); 
Python 
def 
ResolveSync(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGroup(int 
groupId, SyncGroup 
syncGroup); 
Python 
def 
SetSyncGroup(groupId, 
pSyncGroup) 
Type int
--------------------------------------------
},
    {
        "No": 249,
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis, Profile *pProfile)",
        "FunctionPython": "def SyncToJog(slaveAxis, pProfile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis. "
    },
    {
        "No": 250,
        "FunctionC++": "WMX3APIFUNC SyncToJog(int slaveAxis)",
        "FunctionPython": "def SyncToJog(slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Resolve sync control for a slave axis, and immediately start a jog command for the slave axis with the velocity equal to the velocity that the slave axis was moving at"
-----------------------------------------------------------------------------------
232. Instruction: Resolve sync control for a slave axis, and immediately start a jog command for the slave axis with the velocity equal to the velocity that the slave axis was moving at
A: SyncToJog(slaveAxis)
B: StartVelToPos(pTriggerPosCommand)
C: SyncToJogController(joggingAxis)
D: StopTrq(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
232. Model's answer: A
232. Correct answer: A
232. Result: Correct



Processing Question 233:
233. Context:
 Parameters 
[in] 
slaveAxis The slave axis to resolve 
sync. 

Remarks 

This function resolves sync control for a slave axis, and immediately starts a jog 
command for the slave axis. The velocity of the jog command will equal the velocity 
of the slave axis when this function is called. 

Because the deceleration is not specified for the jog command, attempting to stop 
the jog command using the Stop function will cause the default deceleration (10000 
user units per second) to be used. For most applications, the default deceleration is 
not suitable, so the Stop function with a deceleration argument should be used 
instead. 

◆ResolveSync() 
WMX3APIFU 
NC 
ResolveSync ( int slaveAxis ) 
Release the specified slave axis from synchronous control. 

Parameters 
[in] 
slaveAxis The slave axis to release 
synchronous control. 


◆SetSyncGroup() 
WMX3APIFUNC 
SetSyncGroup ( int groupId, 
SyncGroup syncGroup 
) 
Set the axes and parameters of a synchronization group.
--------------------------------------------
WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
--------------------------------------------
Remarks 

This function adds an axis to a sync group. A slave axis or a master axis can be 
added, depending on the value of the isMaster argument. 

Adding a master axis will remove any existing master axis from the sync group. A 
sync group may only have one master axis at any time. 

If a master axis is added, but the axis is already one of the slave axes in the sync 
group, the axis will become the master axis and no longer be a slave axis. 

If a slave axis is added, but the axis is already the master axis of the sync group, 
the axis will become a slave axis and the sync group will have no master axis (until 
a new master axis is added). 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 


◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group.
-----------------------------------------------------------------------------------
233. Instruction: Release the specified slave axis from synchronous control.
A: RemoveAxisFromSyncGroup(groupId, axis)
B: ResolveSlaveAxisSync(slaveAxis)
C: ResolveSync(slaveAxis)
D: Resume(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
233. Model's answer: C
233. Correct answer: C
233. Result: Correct



Processing Question 234:
234. Context:
 ◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pSyncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function gets the settings of a particular sync group. To get for the statuses of 
the sync group, including whether the sync group is enabled, use the 
GetSyncGroupStatus function. 

◆AddAxisToSyncGroup() 

WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
int 
int 
groupId, 
axis, 
unsigned char isMaster 
Add another axis to an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to add to the 
sync group. 
[in] 
isMaster 0: The axis is a slave 
axis; 1: The axis is a 
master axis. 

Remarks
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
--------------------------------------------
◆SetSyncGroup() 
WMX3APIFUNC 
SetSyncGroup ( int groupId, 
SyncGroup syncGroup 
) 
Set the axes and parameters of a synchronization group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
syncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function sets the settings of a sync group. The maximum number of sync 
groups that can be defined at once is equal to maxSyncGroup. 

A sync group consists of one sync master axis and any number of slave axes. The 
sync group tracks the home done status of the sync group and any errors 
encountered during the sync operation. These statuses can be checked using the 
GetSyncGroupStatus function.
-----------------------------------------------------------------------------------
234. Instruction: Set the axes and parameters of a synchronization group.
A: OverrideMov(pPosCommand)
B: GetSyncGroupStatus(groupId)
C: SetSyncGroup(groupId, pSyncGroup)
D: SetSyncGroupById(groupId, syncGroupId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
234. Model's answer: C
234. Correct answer: C
234. Result: Correct



Processing Question 235:
235. Context:
 ◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncGroup(int 
groupId, SyncGroup 
*pSyncGroup); 
Python 
def 
GetSyncGroup(groupId) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Sync_SyncGroup syncGroup 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddAxisToSyncGroup(in 
t groupId, int axis, 
unsigned char isMaster); 
Python 
def 
AddAxisToSyncGroup(gro 
upId, axis, isMaster) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
RemoveAxisFromSyncG 
roup(int groupId, int 
axis); 
Python 
def 
RemoveAxisFromSyncGro 
up(groupId, axis)
--------------------------------------------
See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pSyncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function gets the settings of a particular sync group. To get for the statuses of 
the sync group, including whether the sync group is enabled, use the 
GetSyncGroupStatus function. 

◆AddAxisToSyncGroup() 

WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
int 
int 
groupId, 
axis, 
unsigned char isMaster 
Add another axis to an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to add to the 
sync group. 
[in] 
isMaster 0: The axis is a slave 
axis; 1: The axis is a 
master axis. 

Remarks
--------------------------------------------
A sync group must first be enabled using the EnableSyncGroup function before it 
has any effect. Once enabled, a sync group will automatically start sync control for 
the defined slave axes while they are in servo on (Servo On is TRUE) state. 

If this function is called to redefine a sync group that is currently enabled, the sync 
group will return to disabled state and must be enabled again using the 
EnableSyncGroup function. 

There are several sync group functions that cannot be replicated with normal sync 


control. For example, sync groups can be configured to turn all sync axis servos on 
or off together with the servoOnOffSynchronization option. Using the CatchUp 
startup type, sync groups are able to execute catch up motion to restore the 
previous sync offset after sync is broken. 

See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group.
-----------------------------------------------------------------------------------
235. Instruction: Get the axes and parameters of a sync group.
A: GetSyncGroupStatus(groupId)
B: GetSyncGroup(groupId)
C: GetSyncGroupInfo(GroupID)
D: StopTrq_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
235. Model's answer: B
235. Correct answer: B
235. Result: Correct



Processing Question 236:
236. Context:
 See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pSyncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function gets the settings of a particular sync group. To get for the statuses of 
the sync group, including whether the sync group is enabled, use the 
GetSyncGroupStatus function. 

◆AddAxisToSyncGroup() 

WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
int 
int 
groupId, 
axis, 
unsigned char isMaster 
Add another axis to an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to add to the 
sync group. 
[in] 
isMaster 0: The axis is a slave 
axis; 1: The axis is a 
master axis. 

Remarks
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
--------------------------------------------
Remarks 

This function adds an axis to a sync group. A slave axis or a master axis can be 
added, depending on the value of the isMaster argument. 

Adding a master axis will remove any existing master axis from the sync group. A 
sync group may only have one master axis at any time. 

If a master axis is added, but the axis is already one of the slave axes in the sync 
group, the axis will become the master axis and no longer be a slave axis. 

If a slave axis is added, but the axis is already the master axis of the sync group, 
the axis will become a slave axis and the sync group will have no master axis (until 
a new master axis is added). 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 


◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group.
--------------------------------------------
◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
-----------------------------------------------------------------------------------
236. Instruction: Add another axis to an existing sync group.
A: AddAxisToSyncGroup(groupId, axis, isMaster)
B: AddAxisToSyncGroupV2(groupId, axis, isMaster)
C: OverrideJerkAcc(pPosCommand)
D: SetSyncGroup(groupId, pSyncGroup)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
236. Model's answer: A
236. Correct answer: A
236. Result: Correct



Processing Question 237:
237. Context:
 Remarks 

This function adds an axis to a sync group. A slave axis or a master axis can be 
added, depending on the value of the isMaster argument. 

Adding a master axis will remove any existing master axis from the sync group. A 
sync group may only have one master axis at any time. 

If a master axis is added, but the axis is already one of the slave axes in the sync 
group, the axis will become the master axis and no longer be a slave axis. 

If a slave axis is added, but the axis is already the master axis of the sync group, 
the axis will become a slave axis and the sync group will have no master axis (until 
a new master axis is added). 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 


◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group.
--------------------------------------------
◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
},
    {
        "No": 255,
        "FunctionC++": "WMX3APIFUNC RemoveAxisFromSyncGroup(int groupId, int axis)",
        "FunctionPython": "def RemoveAxisFromSyncGroup(groupId, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Remove an axis from an existing sync group. "
    },
    {
        "No": 256,
        "FunctionC++": "WMX3APIFUNC EnableSyncGroup(int groupId, unsigned char enable)",
        "FunctionPython": "def EnableSyncGroup(groupId, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Enable or disable a sync group. "
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
-----------------------------------------------------------------------------------
237. Instruction: Remove an axis from an existing sync group.
A: Pause_AxisSel(pAxisSelection)
B: RemoveAxisFromSyncGroup(groupId, axis)
C: ClearSyncGroupError(groupId)
D: ChangeAxisInSyncGroup(groupId, currentAxis, newAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
237. Model's answer: B
237. Correct answer: B
237. Result: Correct



Processing Question 238:
238. Context:
 ◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
},
    {
        "No": 255,
        "FunctionC++": "WMX3APIFUNC RemoveAxisFromSyncGroup(int groupId, int axis)",
        "FunctionPython": "def RemoveAxisFromSyncGroup(groupId, axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Remove an axis from an existing sync group. "
    },
    {
        "No": 256,
        "FunctionC++": "WMX3APIFUNC EnableSyncGroup(int groupId, unsigned char enable)",
        "FunctionPython": "def EnableSyncGroup(groupId, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Enable or disable a sync group. "
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnableSyncGroup(int 
groupId, unsigned char 
enable); 
Python 
def 
EnableSyncGroup(groupId 
, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncGroupStatus(int 
groupId, 
SyncGroupStatus 
*pStatus); 
Python 
def 
GetSyncGroupStatus(grou 
pId) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Sync_SyncGroupSt 
atus -status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearSyncGroupError(in 
t groupId); 
def
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncGroup(int 
groupId, SyncGroup 
*pSyncGroup); 
Python 
def 
GetSyncGroup(groupId) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Sync_SyncGroup syncGroup 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddAxisToSyncGroup(in 
t groupId, int axis, 
unsigned char isMaster); 
Python 
def 
AddAxisToSyncGroup(gro 
upId, axis, isMaster) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
RemoveAxisFromSyncG 
roup(int groupId, int 
axis); 
Python 
def 
RemoveAxisFromSyncGro 
up(groupId, axis)
-----------------------------------------------------------------------------------
238. Instruction: Enable or disable a sync group.
A: GetSyncGroup(groupId)
B: EnableGroupSync(groupId, isEnabled)
C: EnableSyncGroup(groupId, enable)
D: SetMovingAverageProfileTime(axis, milliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
238. Model's answer: C
238. Correct answer: C
238. Result: Correct



Processing Question 239:
239. Context:
 ◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
The following functions are used to control sync groups. 


SetSyncGroup 
GetSyncGroup 
AddAxisToSyncGroup 
RemoveAxisFromSyncGroup 
EnableSyncGroup 
GetSyncGroupStatus 


Defining a Sync Group 

A sync group is defined using the SetSyncGroup function. 
The sync group parameters are specified using the SyncGroup class. 
The basic parameters are as follows. 
masterAxis -The master axis of the sync group. 


slaveAxisCount -The number of slave axes in the sync group. 
slaveAxis -An array whose first slaveAxisCount indices are used to specify the 
slave axes of the sync group. 
More advanced sync group parameters are discussed below. 

Servo On/Off Synchronization 

The following parameter is used to specify whether to synchronize the servo on and 
servo off signals of sync group axes. 


servoOnOffSynchronization 

If 1 is specified for this parameter, when a servo on signal is sent to any axis in the sync
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncGroup(int 
groupId, SyncGroup 
*pSyncGroup); 
Python 
def 
GetSyncGroup(groupId) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Sync_SyncGroup syncGroup 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddAxisToSyncGroup(in 
t groupId, int axis, 
unsigned char isMaster); 
Python 
def 
AddAxisToSyncGroup(gro 
upId, axis, isMaster) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
RemoveAxisFromSyncG 
roup(int groupId, int 
axis); 
Python 
def 
RemoveAxisFromSyncGro 
up(groupId, axis)
--------------------------------------------
See also 

Sync Group 

◆GetSyncGroup() 
WMX3APIFUNC 
GetSyncGroup ( 
) 
int 
groupId, 
SyncGroup * pSyncGroup 
Get the axes and parameters of a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pSyncGroup A pointer to a 
SyncGroup class object 
that specifies the sync 
group parameters. 

Remarks 

This function gets the settings of a particular sync group. To get for the statuses of 
the sync group, including whether the sync group is enabled, use the 
GetSyncGroupStatus function. 

◆AddAxisToSyncGroup() 

WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
WMX3APIFUNC 
AddAxisToSyncGrou 
p ( 
) 
int 
int 
groupId, 
axis, 
unsigned char isMaster 
Add another axis to an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to add to the 
sync group. 
[in] 
isMaster 0: The axis is a slave 
axis; 1: The axis is a 
master axis. 

Remarks
-----------------------------------------------------------------------------------
239. Instruction: Read the current status of the specified sync group.
A: RemoveAxisFromSyncGroup(groupId, axis)
B: SetServoOn(axis, newStatus)
C: GetSyncGroupStatus(groupId)
D: GetSyncGroupInfo(groupID)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
239. Model's answer: C
239. Correct answer: C
239. Result: Correct



Processing Question 240:
240. Context:
 This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus() 

WMX3APIFUNC 
GetSyncGroupStatu 
s ( 
) 
WMX3APIFUNC 
GetSyncGroupStatu 
s ( 
) 
int 
groupId, 
SyncGroupStatus * pStatus 
Read the current status of the specified sync group. 
Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[out] 
pStatus A pointer to an object of 
the class 
SyncGroupStatus that 
contains the sync group 
status. 
Remarks 
This function gets the current status of a sync group. 

◆ClearSyncGroupError() 

WMX3APIFU 
NC 
ClearSyncGr 
oupError ( int groupId ) 
WMX3APIFU 
NC 
ClearSyncGr 
oupError ( int groupId ) 
Clear all sync group errors of the specified sync group. 
Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
Remarks
--------------------------------------------
},
    {
        "No": 257,
        "FunctionC++": "WMX3APIFUNC GetSyncGroupStatus(int groupId, SyncGroupStatus *pStatus)",
        "FunctionPython": "def GetSyncGroupStatus(groupId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current status of the specified sync group."
    },
    {
        "No": 258,
        "FunctionC++": "WMX3APIFUNC ClearSyncGroupError(int groupId)",
        "FunctionPython": "def ClearSyncGroupError(groupId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear all sync group errors of the specified sync group. "
--------------------------------------------
◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
EnableSyncGroup(int 
groupId, unsigned char 
enable); 
Python 
def 
EnableSyncGroup(groupId 
, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncGroupStatus(int 
groupId, 
SyncGroupStatus 
*pStatus); 
Python 
def 
GetSyncGroupStatus(grou 
pId) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Sync_SyncGroupSt 
atus -status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearSyncGroupError(in 
t groupId); 
def
-----------------------------------------------------------------------------------
240. Instruction: Clear all sync group errors of the specified sync group.
A: GetSyncGroupStatus(groupId)
B: Stop(axis)
C: UpdateSyncGroupError(groupId)
D: ClearSyncGroupError(groupId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
240. Model's answer: D
240. Correct answer: D
240. Result: Correct



Processing Question 241:
241. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
},
    {
        "No": 242,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
-----------------------------------------------------------------------------------
241. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid(device_id: str)
B: CompareWindowsUpdates()
C: GetHomeData()
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
241. Model's answer: D
241. Correct answer: D
241. Result: Correct



Processing Question 242:
242. Context:
 WMX3APIFUNC GetVelFeedback (int axis, double 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to turn 
on or off. Even after this function returns no error, the servo may take a few cycles 
to turn on or off, or may fail to turn on or off. The Servo On status (obtained with 
GetStatus) should be checked to verify that the axis servo has turned on or off 
before continuing with operations that require the servo to be on or off. 

◆SetServoOn() [2/2]
--------------------------------------------
WMX3APIFUNC SetTrqProfiles (TorqueProfiles 

*pTrqProfiles) 

Set the torque profile for multiple axes. 

More... 

WMX3APIFUNC GetPosCommand (int axis, long 
*pPosition) 

Get the current cycle position command 
of the axis. More... 


Public Attributes 

WMX3APIFUNC GetPosFeedback (int axis, long 
*pPosition) 

Get the current cycle position feedback 
of the axis. More... 

WMX3APIFUNC GetVelCommand (int axis, long 
*pVelocity) 

Get the current cycle velocity command 
of the axis. More... 

WMX3APIFUNC GetVelFeedback (int axis, long 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

PMMotion * pmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks
--------------------------------------------
Turn multiple servo drives in the servo 
network on or off. More... 

WMX3APIFUNC ClearAmpAlarm (int axis) 
Clear the servo drive amp alarm on the 
specified axis. More... 
WMX3APIFUNC ClearAmpAlarm (AxisSelection 
*axisSel) 
Clear the servo drive amp alarms on 
multiple axes. More... 
WMX3APIFUNC SetHomeProfile (HomeProfile 
*pHomeProfile) 
Set the home profile. More... 

WMX3APIFUNC SetHomeProfiles (HomeProfiles 

*pHomeProfiles) 

Set the home profile for multiple axes. 

More... 

WMX3APIFUNC SetVelProfile (VelocityProfile 
*pVelProfile) 

Set the velocity profile. More... 

WMX3APIFUNC SetVelProfiles (VelocityProfiles 
*pVelProfiles) 

Set the velocity profile for multiple axes. 

More... 

WMX3APIFUNC SetTrqProfile (TorqueProfile 

*pTrqProfile) 

Set the torque profile. More... 

WMX3APIFUNC SetTrqProfiles (TorqueProfiles 

*pTrqProfiles) 

Set the torque profile for multiple axes. 

More... 

WMX3APIFUNC GetPosCommand (int axis, long 
*pPosition)
--------------------------------------------
◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * pAxisSelection, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks
-----------------------------------------------------------------------------------
242. Instruction: Turn a servo drive in the servo network on or off.
A: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
B: GetEngineStatus()
C: SetServoOn(axis, newStatus)
D: SetAxisServoStatus(axisNumber, isEnabled)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
242. Model's answer: C
242. Correct answer: C
242. Result: Correct



Processing Question 243:
243. Context:
 Turn multiple servo drives in the servo 
network on or off. More... 

WMX3APIFUNC ClearAmpAlarm (int axis) 
Clear the servo drive amp alarm on the 
specified axis. More... 
WMX3APIFUNC ClearAmpAlarm (AxisSelection 
*axisSel) 
Clear the servo drive amp alarms on 
multiple axes. More... 
WMX3APIFUNC SetHomeProfile (HomeProfile 
*pHomeProfile) 
Set the home profile. More... 

WMX3APIFUNC SetHomeProfiles (HomeProfiles 

*pHomeProfiles) 

Set the home profile for multiple axes. 

More... 

WMX3APIFUNC SetVelProfile (VelocityProfile 
*pVelProfile) 

Set the velocity profile. More... 

WMX3APIFUNC SetVelProfiles (VelocityProfiles 
*pVelProfiles) 

Set the velocity profile for multiple axes. 

More... 

WMX3APIFUNC SetTrqProfile (TorqueProfile 

*pTrqProfile) 

Set the torque profile. More... 

WMX3APIFUNC SetTrqProfiles (TorqueProfiles 

*pTrqProfiles) 

Set the torque profile for multiple axes. 

More... 

WMX3APIFUNC GetPosCommand (int axis, long 
*pPosition)
--------------------------------------------
WMX3APIFUNC SetTrqProfiles (TorqueProfiles 

*pTrqProfiles) 

Set the torque profile for multiple axes. 

More... 

WMX3APIFUNC GetPosCommand (int axis, long 
*pPosition) 

Get the current cycle position command 
of the axis. More... 


Public Attributes 

WMX3APIFUNC GetPosFeedback (int axis, long 
*pPosition) 

Get the current cycle position feedback 
of the axis. More... 

WMX3APIFUNC GetVelCommand (int axis, long 
*pVelocity) 

Get the current cycle velocity command 
of the axis. More... 

WMX3APIFUNC GetVelFeedback (int axis, long 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

PMMotion * pmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks
--------------------------------------------
◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * pAxisSelection, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks
--------------------------------------------
WMX3APIFUNC GetVelFeedback (int axis, double 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to turn 
on or off. Even after this function returns no error, the servo may take a few cycles 
to turn on or off, or may fail to turn on or off. The Servo On status (obtained with 
GetStatus) should be checked to verify that the axis servo has turned on or off 
before continuing with operations that require the servo to be on or off. 

◆SetServoOn() [2/2]
-----------------------------------------------------------------------------------
243. Instruction: Turn multiple servo drives in the servo network on or off.
A: StopTrq_AxisSel(pAxisSelection)
B: SetServoStatus(axisSelection, isEnabled)
C: SetServoOn_AxisSel(axisSel, newStatus)
D: StartCircularIntplPos_RadiusAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
243. Model's answer: C
243. Correct answer: C
243. Result: Correct



Processing Question 244:
244. Context:
 Function axis); 
Python def ClearAmpAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAmpAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAmpAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(int 
axis); 
Python def ClearAxisAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAxisAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to 
clear the amp alarm. Even after this function returns no error, the servo may take a 
few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp 
Alarm status (obtained with GetStatus) can be checked to verify whether the amp 
alarm has been cleared. 

◆ClearAmpAlarm() [2/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
AxisSelection pAxisSelection ) 
Clear the servo drive amp alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]
--------------------------------------------
◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * pAxisSelection, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks
--------------------------------------------
Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

The servoOn status (obtained with GetStatus) should be checked to verify that the 
axis servo has turned on or off before continuing with operations that require the 
servo to be on or off. 

◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * axisSel, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
axisSel A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis.
-----------------------------------------------------------------------------------
244. Instruction: Clear the servo drive amp alarm on the specified axis.
A: ClearAmpAlarm(axis)
B: SetAxisUnit(axis, unit)
C: GetAlarmParam(axis)
D: ClearAmpAlarm(axis, alarm_id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
244. Model's answer: A
244. Correct answer: A
244. Result: Correct



Processing Question 245:
245. Context:
 WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to 
clear the amp alarm. Even after this function returns no error, the servo may take a 
few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp 
Alarm status (obtained with GetStatus) can be checked to verify whether the amp 
alarm has been cleared. 

◆ClearAmpAlarm() [2/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
AxisSelection pAxisSelection ) 
Clear the servo drive amp alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]
--------------------------------------------
Function axis); 
Python def ClearAmpAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAmpAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAmpAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(int 
axis); 
Python def ClearAxisAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAxisAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
◆SetServoOn() [2/2]

WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
AxisSelection * pAxisSelection, 
int newStatus 
Turn multiple servo drives in the servo network on or off. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function is a variation of the SetServoOn function that operates on multiple 
axes at the same time. 

◆ClearAmpAlarm() [1/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks
--------------------------------------------
This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
int axis 
) 
Clear any axis alarms on the specified axis. 
Parameters 
[in] 
axis The axis to clear the axis 
alarm. 

Remarks 

This function clears the axis alarms for the specified axis. Axis alarms are software-
based alarms generated by WMX3 such as following error. These alarms are not 
generated by the hardware. 

To clear hardware-generated amp alarms, use the ClearAmpAlarm function. 

◆ClearAxisAlarm() [2/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
AxisSelection pAxisSelection ) 
Clear any axis alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the axis alarm. 

Remarks
-----------------------------------------------------------------------------------
245. Instruction: Clear the servo drive amp alarms on multiple axes.
A: ClearAmpAlarm_Axis(axisNum)
B: ClearAmpAlarm_AxisSel(axisSel)
C: GetParam_Axis(axis)
D: AddAxisToSyncGroup(groupId, axis, isMaster)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
245. Model's answer: B
245. Correct answer: B
245. Result: Correct



Processing Question 246:
246. Context:
 Function axis); 
Python def ClearAmpAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAmpAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAmpAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(int 
axis); 
Python def ClearAxisAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAxisAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
int axis 
) 
Clear any axis alarms on the specified axis. 
Parameters 
[in] 
axis The axis to clear the axis 
alarm. 

Remarks 

This function clears the axis alarms for the specified axis. Axis alarms are software-
based alarms generated by WMX3 such as following error. These alarms are not 
generated by the hardware. 

To clear hardware-generated amp alarms, use the ClearAmpAlarm function. 

◆ClearAxisAlarm() [2/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
AxisSelection pAxisSelection ) 
Clear any axis alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the axis alarm. 

Remarks
--------------------------------------------
WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to 
clear the amp alarm. Even after this function returns no error, the servo may take a 
few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp 
Alarm status (obtained with GetStatus) can be checked to verify whether the amp 
alarm has been cleared. 

◆ClearAmpAlarm() [2/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
AxisSelection pAxisSelection ) 
Clear the servo drive amp alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]
--------------------------------------------
},
    {
        "No": 263,
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(AxisSelection *axisSel)",
        "FunctionPython": "def ClearAmpAlarm_AxisSel(axisSel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarms on multiple axes."
    },
    {
        "No": 264,
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(int axis)",
        "FunctionPython": "def ClearAxisAlarm(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on the specified axis."
-----------------------------------------------------------------------------------
246. Instruction: Clear any axis alarms on the specified axis.
A: Wait_TimeMilli(axis, waitTimeMilliseconds)
B: ResetAxisAlarm(axis)
C: ClearAxisAlarm(axis)
D: GetParam_Axis(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
246. Model's answer: C
246. Correct answer: C
246. Result: Correct



Processing Question 247:
247. Context:
 Function axis); 
Python def ClearAmpAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAmpAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAmpAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(int 
axis); 
Python def ClearAxisAlarm(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAxisAlarm(AxisSel 
ection* axisSel); 
Python 
def 
ClearAxisAlarm_AxisSel(a 
xisSel) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
int axis 
) 
Clear any axis alarms on the specified axis. 
Parameters 
[in] 
axis The axis to clear the axis 
alarm. 

Remarks 

This function clears the axis alarms for the specified axis. Axis alarms are software-
based alarms generated by WMX3 such as following error. These alarms are not 
generated by the hardware. 

To clear hardware-generated amp alarms, use the ClearAmpAlarm function. 

◆ClearAxisAlarm() [2/2]

WMX3APIFU 
NC 
ClearAxisAlar 
WMX3APIFU 
NC 
ClearAxisAlar 
m ( 
AxisSelection pAxisSelection ) 
Clear any axis alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the axis alarm. 

Remarks
--------------------------------------------
WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
int axis 
) 
Clear the servo drive amp alarm on the specified axis. 
Parameters 
[in] 
axis The axis to clear the 
amp alarm. 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to 
clear the amp alarm. Even after this function returns no error, the servo may take a 
few cycles to clear the amp alarm, or may fail to clear the amp alarm. The Amp 
Alarm status (obtained with GetStatus) can be checked to verify whether the amp 
alarm has been cleared. 

◆ClearAmpAlarm() [2/2]

WMX3APIFU 
NC 
ClearAmpAla 
WMX3APIFU 
NC 
ClearAmpAla 
rm ( 
AxisSelection pAxisSelection ) 
Clear the servo drive amp alarms on multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
clear the amp alarm. 
Remarks 

This function is a variation of the ClearAmpAlarm function that operates on multiple 
axes at the same time. 

◆ClearAxisAlarm() [1/2]
--------------------------------------------
},
    {
        "No": 263,
        "FunctionC++": "WMX3APIFUNC ClearAmpAlarm(AxisSelection *axisSel)",
        "FunctionPython": "def ClearAmpAlarm_AxisSel(axisSel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear the servo drive amp alarms on multiple axes."
    },
    {
        "No": 264,
        "FunctionC++": "WMX3APIFUNC ClearAxisAlarm(int axis)",
        "FunctionPython": "def ClearAxisAlarm(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Clear any axis alarms on the specified axis."
-----------------------------------------------------------------------------------
247. Instruction: Clear any axis alarms on multiple axes.
A: GetAxisParam_Axis(axis)
B: ClearAxisAlarm_AxisSel(axisSel)
C: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
D: ResetAxisAlarm_SelectedAxis(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
247. Model's answer: B
247. Correct answer: B
247. Result: Correct



Processing Question 248:
248. Context:
 Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode(i 
nt axis, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode(a 
xis, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode( 
AxisSelection* axisSel, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode_A 
xisSel(axisSel, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisCommandMode( 
int axis, 
AxisCommandMode::T 
*pMode); 
Python 
def 
GetAxisCommandMode(a 
xis) 
Returns 
Type tuple 
0 : int -error code
--------------------------------------------
Command Mode 

The Axis Command Mode of the axis is a parameter that determines how the axis is 
controlled. 

The available options are Position (CSP, or Cyclic Synchronous Position), Velocity 
(CSV, or Cyclic Synchronous Velocity), and Torque (CST, or Cyclic Synchronous 
Torque). The command mode determines whether the axis receives a position 
command, velocity command, or torque command every communication cycle. 

This parameter is set using one of the following functions. 


SetAxisCommandMode 
SetAxisParam 
ImportAndSetAll 


When the engine is started, all axes are set to Position command mode by default. 

The command mode of an axis normally cannot be changed unless the axis is in Idle 
operation state. Several functions are available for changing the command mode 
dynamically without stopping the axis. See the table later in this section for additional 
information.
--------------------------------------------
Remarks 

This function is a variation of the ClearAxisAlarm function that operates on multiple 
axes at the same time. 

◆SetAxisCommandMode() [1/2]

WMX3APIFUNC 
SetAxisCommandM 
ode ( 
WMX3APIFUNC 
SetAxisCommandM 
ode ( 
int 
axis, 
AxisCommandMode mode 
) 
Set the command mode of the axis. 

Parameters 
[in] 
axis The axis to set the 
command mode. 
[in] 
mode The command mode to 
set the axis to. 

Remarks 

The AxisCommandMode of an axis determines how the axis is commanded. An 
axis operating in Position mode will be controlled by position, an axis operating in 
Velocity mode will be controlled by velocity, and an axis operating in Torque mode 
will be controlled by torque. Most motion commands can only be executed by an 
axis in a particular mode.
--------------------------------------------
},
    {
        "No": 267,
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(AxisSelection *pAxisSelection, AxisCommandMode::T mode)",
        "FunctionPython": "def SetAxisCommandMode_AxisSel(axisSel, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of multiple axes. "
    },
    {
        "No": 268,
        "FunctionC++": "WMX3APIFUNC GetAxisCommandMode(int axis, AxisCommandMode::T *pMode)",
        "FunctionPython": "def GetAxisCommandMode(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the command mode of the axis. "
-----------------------------------------------------------------------------------
248. Instruction: Set the command mode of the axis.
A: SetAxisCommandMode(axis, mode)
B: SetAxisControlMode(axis, control_mode)
C: GetPVTBufferPoints(axis, pPoints)
D: AddCommand(axis, pCmd)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
248. Model's answer: A
248. Correct answer: A
248. Result: Correct



Processing Question 249:
249. Context:
 Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode(i 
nt axis, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode(a 
xis, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode( 
AxisSelection* axisSel, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode_A 
xisSel(axisSel, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisCommandMode( 
int axis, 
AxisCommandMode::T 
*pMode); 
Python 
def 
GetAxisCommandMode(a 
xis) 
Returns 
Type tuple 
0 : int -error code
--------------------------------------------
Remarks 

This function is a variation of the ClearAxisAlarm function that operates on multiple 
axes at the same time. 

◆SetAxisCommandMode() [1/2]

WMX3APIFUNC 
SetAxisCommandM 
ode ( 
WMX3APIFUNC 
SetAxisCommandM 
ode ( 
int 
axis, 
AxisCommandMode mode 
) 
Set the command mode of the axis. 

Parameters 
[in] 
axis The axis to set the 
command mode. 
[in] 
mode The command mode to 
set the axis to. 

Remarks 

The AxisCommandMode of an axis determines how the axis is commanded. An 
axis operating in Position mode will be controlled by position, an axis operating in 
Velocity mode will be controlled by velocity, and an axis operating in Torque mode 
will be controlled by torque. Most motion commands can only be executed by an 
axis in a particular mode.
--------------------------------------------
The axis command mode can only be changed while the axis is in the Idle operation 
state or when the engine is not communicating with the axes (the engine is not in 
Communicating state). Calling this function while the axis is not in Idle operation 
state will cause the NotIdleState error to be returned. 

See also 

Tutorial 3-7: Axis modes 

◆SetAxisCommandMode() [2/2]

WMX3APIFUNC 
SetAxisCommandM 
WMX3APIFUNC 
SetAxisCommandM 
ode ( 
) 
AxisSelection * pAxisSelection, 
AxisCommandMode mode 
Set the command mode of multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies which axes to 
set the command mode. 
[in] 
mode The command mode to 
set the axis to. 

Remarks 

This function is a variation of the SetAxisCommandMode function that operates on 
multiple axes at the same time.
--------------------------------------------
},
    {
        "No": 267,
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(AxisSelection *pAxisSelection, AxisCommandMode::T mode)",
        "FunctionPython": "def SetAxisCommandMode_AxisSel(axisSel, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of multiple axes. "
    },
    {
        "No": 268,
        "FunctionC++": "WMX3APIFUNC GetAxisCommandMode(int axis, AxisCommandMode::T *pMode)",
        "FunctionPython": "def GetAxisCommandMode(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the command mode of the axis. "
-----------------------------------------------------------------------------------
249. Instruction: Set the command mode of multiple axes.
A: SetAxisCommandMode_AxisSel(axisSel, mode)
B: Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)
C: AddCommand_AxisSel(pAxisSelection, pCmds)
D: SetAxisCommandMode_SelectedAxis(axis, commandMode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
249. Model's answer: A
249. Correct answer: A
249. Result: Correct



Processing Question 250:
250. Context:
 Command Mode 

The Axis Command Mode of the axis is a parameter that determines how the axis is 
controlled. 

The available options are Position (CSP, or Cyclic Synchronous Position), Velocity 
(CSV, or Cyclic Synchronous Velocity), and Torque (CST, or Cyclic Synchronous 
Torque). The command mode determines whether the axis receives a position 
command, velocity command, or torque command every communication cycle. 

This parameter is set using one of the following functions. 


SetAxisCommandMode 
SetAxisParam 
ImportAndSetAll 


When the engine is started, all axes are set to Position command mode by default. 

The command mode of an axis normally cannot be changed unless the axis is in Idle 
operation state. Several functions are available for changing the command mode 
dynamically without stopping the axis. See the table later in this section for additional 
information.
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
command mode. 
[out] 
pMode A pointer to a 
AxisCommandMode 
variable that will contain 
the command mode of 
the axis. 

Remarks 

This function obtains that current AxisCommandMode of an axis. This value is 
identical to the Axis Command Mode status obtained with the GetStatus function. 
See also 

Tutorial 3-7: Axis modes 

◆GetPosCommand() 

WMX3APIFUNC 
GetPosCommand ( 
WMX3APIFUNC 
GetPosCommand ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 
Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback()
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode(i 
nt axis, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode(a 
xis, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisCommandMode( 
AxisSelection* axisSel, 
AxisCommandMode::T 
mode); 
Python 
def 
SetAxisCommandMode_A 
xisSel(axisSel, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisCommandMode( 
int axis, 
AxisCommandMode::T 
*pMode); 
Python 
def 
GetAxisCommandMode(a 
xis) 
Returns 
Type tuple 
0 : int -error code
--------------------------------------------
},
    {
        "No": 267,
        "FunctionC++": "WMX3APIFUNC SetAxisCommandMode(AxisSelection *pAxisSelection, AxisCommandMode::T mode)",
        "FunctionPython": "def SetAxisCommandMode_AxisSel(axisSel, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the command mode of multiple axes. "
    },
    {
        "No": 268,
        "FunctionC++": "WMX3APIFUNC GetAxisCommandMode(int axis, AxisCommandMode::T *pMode)",
        "FunctionPython": "def GetAxisCommandMode(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get the command mode of the axis. "
-----------------------------------------------------------------------------------
250. Instruction: Get the command mode of the axis.
A: GetAxisCommandMode(axis)
B: GetAxisState(axis)
C: GetPosCommand(axis)
D: StartCircularIntplMov_ThroughAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
250. Model's answer: A
250. Correct answer: A
250. Result: Correct



Processing Question 251:
251. Context:
 Parameters 
[in] 
axis The axis to get the 
command mode. 
[out] 
pMode A pointer to a 
AxisCommandMode 
variable that will contain 
the command mode of 
the axis. 

Remarks 

This function obtains that current AxisCommandMode of an axis. This value is 
identical to the Axis Command Mode status obtained with the GetStatus function. 
See also 

Tutorial 3-7: Axis modes 

◆GetPosCommand() 

WMX3APIFUNC 
GetPosCommand ( 
WMX3APIFUNC 
GetPosCommand ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 
Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback()
--------------------------------------------
◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand()
--------------------------------------------
Clear any axis alarms on multiple axes. 

More... 

WMX3APIFUNC SetAxisCommandMode (int axis, 
AxisCommandMode::T mode) 

Set the command mode of the axis. 

More... 


Public Attributes 

WMX3APIFUNC SetAxisCommandMode (AxisSelection 
*pAxisSelection, AxisCommandMode::T 
mode) 
Set the command mode of multiple axes. 
More... 

WMX3APIFUNC GetAxisCommandMode (int axis, 
AxisCommandMode::T *pMode) 

Get the command mode of the axis. 

More... 

WMX3APIFUNC GetPosCommand (int axis, double 
*pPosition) 

Get the current cycle position command 
of the axis. More... 

WMX3APIFUNC GetPosFeedback (int axis, double 
*pPosition) 

Get the current cycle position feedback 
of the axis. More... 

WMX3APIFUNC GetVelCommand (int axis, double 
*pVelocity) 

Get the current cycle velocity command 
of the axis. More... 

WMX3APIFUNC GetVelFeedback (int axis, double 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

CoreMotion * cmApi 

Member Function Documentation
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
251. Instruction: Get the current cycle position command of the axis.
A: GetPosCommand(axis)
B: SetAxisCommandMode(axis, mode)
C: GetPositionCommand(axis)
D: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
251. Model's answer: A
251. Correct answer: A
251. Result: Correct



Processing Question 252:
252. Context:
 This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks
--------------------------------------------
◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand()
--------------------------------------------
This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the velocityCmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
command mode. 
[out] 
pMode A pointer to a 
AxisCommandMode 
variable that will contain 
the command mode of 
the axis. 

Remarks 

This function obtains that current AxisCommandMode of an axis. This value is 
identical to the Axis Command Mode status obtained with the GetStatus function. 
See also 

Tutorial 3-7: Axis modes 

◆GetPosCommand() 

WMX3APIFUNC 
GetPosCommand ( 
WMX3APIFUNC 
GetPosCommand ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 
Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback()
-----------------------------------------------------------------------------------
252. Instruction: Get the current cycle position feedback of the axis.
A: StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)
B: GetPosCommand(axis)
C: GetPosFeedback(axis)
D: GetAxisPosFeedback(axis_name)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
252. Model's answer: C
252. Correct answer: C
252. Result: Correct



Processing Question 253:
253. Context:
 This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the velocityCmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks
--------------------------------------------
◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand()
--------------------------------------------
Parameters 
[in] 
pVelProfiles A pointer to the velocity 
profiles. 
Remarks 

The velocity profile set by this function is used for position commands and velocity 
commands executed by the axis. 


◆SetTrqProfile() 
WMX3APIFU 
NC 
SetTrqProfile ( TorqueProfile pTrqProfile ) 
Set the torque profile. 

Parameters 
[in] 
pTrqProfile A pointer to the torque 
profile. 
Remarks 

The torque profile set by this function is used for torque commands executed by the 
axis. 

◆SetTrqProfiles() 
WMX3APIFU 
NC 
SetTrqProfile 
s ( TorqueProfile pTrqProfiles ) 
Set the torque profile for multiple axes. 

Parameters 
[in] 
pTrqProfiles A pointer to the torque 
profiles. 
Remarks 

The torque profile set by this function is used for torque commands executed by the 
axis. 


◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis.
--------------------------------------------
This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks
-----------------------------------------------------------------------------------
253. Instruction: Get the current cycle velocity command of the axis
A: AddCommand(axis, pCmd)
B: GetVelocityCommand(axis):
C: GetVelCommand(axis)
D: SyncToJog(slaveAxis, pProfile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
253. Model's answer: C
253. Correct answer: C
253. Result: Correct



Processing Question 254:
254. Context:
 This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks
--------------------------------------------
This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks 

This function obtains the current cycle velocity command of an axis. This value is 
identical to the velocityCmd status obtained with the GetStatus function. 

◆GetVelFeedback() 

WMX3APIFUNC 
GetVelFeedback ( 
) 
WMX3APIFUNC 
GetVelFeedback ( 
) 
int 
axis, 
long * pVelocity 
Get the current cycle velocity feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity feedback. 
[out] 
pVelocity A pointer that will contain 
the velocity feedback. 
Remarks
--------------------------------------------
◆GetPosCommand() 
WMX3APIFUNC 
GetPosCommand ( 
) 
int 
axis, 
long * pPosition 
Get the current cycle position command of the axis. 

Parameters 
[in] 
axis The axis to get the 
position command. 
[out] 
pPosition A pointer that will contain 
the position command. 

Remarks 

This function obtains the current cycle position command of an axis. This value is 
identical to the posCmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
long * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the actualPos status obtained with the GetStatus function. 

◆GetVelCommand()
--------------------------------------------
WMX3APIFUNC GetVelFeedback (int axis, double 
*pVelocity) 

Get the current cycle velocity feedback of 
the axis. More... 

CoreMotion * cmApi 

Member Function Documentation 

◆ 
SetServoOn() [1/2] 



WMX3APIFUNC 
SetServoOn ( 
) 
WMX3APIFUNC 
SetServoOn ( 
) 
int 
axis, 
int newStatus 
Turn a servo drive in the servo network on or off. 

Parameters 
[in] 
axis The axis of the servo 
drive to turn on or off. 
[in] 
newStatus 1: Turn on the servo, 0: 
Turn off the servo 
Remarks 

This function will return ErrorCode::None after sending a signal to the servo to turn 
on or off. Even after this function returns no error, the servo may take a few cycles 
to turn on or off, or may fail to turn on or off. The Servo On status (obtained with 
GetStatus) should be checked to verify that the axis servo has turned on or off 
before continuing with operations that require the servo to be on or off. 

◆SetServoOn() [2/2]
-----------------------------------------------------------------------------------
254. Instruction: Get the current cycle velocity feedback of the axis
A: GetPosFeedback(axis)
B: SetServoOn_AxisSel(axisSel, newStatus)
C: GetVelFeedback(axis)
D: GetAxisVelFeedback(axis_id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
254. Model's answer: C
254. Correct answer: C
254. Result: Correct



Processing Question 255:
255. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without 
declaring an instance of the Simu class or creating a device. The function 
GetVersion is used to retrieve the version information of the loaded 
SimuPlatform.rtdll, which could be different from the library. The version of the 
SimuPlatform.rtdll is determined by the rtdll file that is loaded by 
WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
-----------------------------------------------------------------------------------
255. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetSingleTurn(axis)
B: SetOutputData(moduleId, data, dataSize)
C: IsDeviceValid()
D: IsDeviceConnectionValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
255. Model's answer: C
255. Correct answer: C
255. Result: Correct



Processing Question 256:
256. Context:
 Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand); 
Python 
def 
StartPT(pPTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand); 
Python 
def 
StartVT(pVTCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartAT(ATCommand 
*pATCommand); 
Python 
def 
StartAT(pATCommand) 
Returns 
Type int 
Value error code 
Remarks 
wmx3Api::Motion::Start 
PVT(PVTCommand 
*pPVTCommand, 
unsigned int 
numAddlCommands = 0, 
PVTAdditionalCommand
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
PT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL) "WMX3APIFUNC 
StartPT(PTCommand 
*pPTCommand, unsigned 
int numAddlCommands = 
0, PTAdditionalCommand 
*pPTAddlCommand = 
NULL);" 
Python 
StartPT(pPTCommand, 
numAddlCommands, 
pPTAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::Motion::Start 
VT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand = 
NULL) "WMX3APIFUNC 
StartVT(VTCommand 
*pVTCommand, unsigned 
int numAddlCommands = 
0, VTAdditionalCommand 
*pVTAddlCommand =
--------------------------------------------
multiple trigger events. More... 

WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
unsigned int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a PT motion command. 
More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command. More... 
WMX3APIFUNC StartPT (PTCommand *pPTCommand, 
TriggerEvents *pTriggerEvents, unsigned 
int numAddlCommands=0, 
PTAdditionalCommand 
*pPTAddlCommand=NULL) 
Start executing a triggered PT motion 
command with multiple trigger events. 
More... 
WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
unsigned int numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL) 
Start executing a VT motion command. 
More... 

WMX3APIFUNC StartVT (VTCommand *pVTCommand, 
Trigger *pTrigger, unsigned int 
numAddlCommands=0, 
VTAdditionalCommand 
*pVTAddlCommand=NULL)
--------------------------------------------
},
    {
        "No": 227,
        "FunctionC++": "WMX3APIFUNC StartPT(PTCommand *pPTCommand, unsigned int numAddlCommands=0, PTAdditionalCommand *pPTAddlCommand=NULL)",
        "FunctionPython": "StartPT(pPTCommand, numAddlCommands, pPTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a PT motion command. "
    },
    {
        "No": 228,
        "FunctionC++": "WMX3APIFUNC StartVT(VTCommand *pVTCommand, unsigned int numAddlCommands=0, VTAdditionalCommand *pVTAddlCommand=NULL)",
        "FunctionPython": "StartVT(pVTCommand, numAddlCommands, pVTAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start executing a VT motion command."
-----------------------------------------------------------------------------------
256. Instruction: Start a velocity command.
A: StartPT(pPTCommand)
B: InitiateVelocity(previousVelocity_command)
C: StartVel(pVelCommand)
D: StartAT(pATCommand, numAddlCommands, pATAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
256. Model's answer: C
256. Correct answer: C
256. Result: Correct



Processing Question 257:
257. Context:
 WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand) 

Start a triggered velocity command. 


More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand) 

Start a triggered timed velocity 
command. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
double maxTrqLimit) 

Start a velocity command and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a timed velocity command and set 
the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit)
--------------------------------------------
Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand) 

Start timed velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand) 

Start triggered velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand) 

Start triggered timed velocity commands 
for multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered velocity commands with 


multiple trigger events for multiple axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
with multiple trigger events for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit) 

Start a triggered velocity command and 
set the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a triggered timed velocity command 
and set the maximum torque limit. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 


double maxTrqLimit, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand) 

Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand)
-----------------------------------------------------------------------------------
257. Instruction: Start a timed velocity command.
A: StartTrqToPos_TriggerEvents(pPosCommand, pTriggerEvents)
B: StartTrqToVel_TriggerVel(pTriggerVelCommand)
C: StartVel_TimedVel(pTimedVelCommand)
D: EndVel_TimedVel(pTimedVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
257. Model's answer: C
257. Correct answer: C
257. Result: Correct



Processing Question 258:
258. Context:
 WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, double 
*pMaxTrqLimit) 
Start velocity commands for multiple 
axes and set the maximum torque limits 
of the commanded axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit) 
Start timed velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand, 
double *pMaxTrqLimit) 
Start triggered velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand, double 
*pMaxTrqLimit) 

Start triggered timed velocity commands 


for multiple axes and set the maximum 
torque limits of the commanded axes. 

More...
--------------------------------------------
WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit) 

Start a triggered velocity command and 
set the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a triggered timed velocity command 
and set the maximum torque limit. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 


double maxTrqLimit, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand) 

Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand)
--------------------------------------------
WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand) 

Start a triggered velocity command. 


More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand) 

Start a triggered timed velocity 
command. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events. More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 
double maxTrqLimit) 

Start a velocity command and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a timed velocity command and set 
the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit)
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More...
-----------------------------------------------------------------------------------
258. Instruction: Start a velocity command and set the maximum torque limit.
A: StartVel_MaxTrq(pVelCommand, maxTrqLimit)
B: StopSuperimpose(axis)
C: StartVelocity_MaxTorque(velocityCommand, maxTorqueLimit)
D: StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
258. Model's answer: A
258. Correct answer: A
258. Result: Correct



Processing Question 259:
259. Context:
 Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand) 

Start timed velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand) 

Start triggered velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand) 

Start triggered timed velocity commands 
for multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered velocity commands with 


multiple trigger events for multiple axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
with multiple trigger events for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, double 
*pMaxTrqLimit) 
Start velocity commands for multiple 
axes and set the maximum torque limits 
of the commanded axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit) 
Start timed velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand, 
double *pMaxTrqLimit) 
Start triggered velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand, double 
*pMaxTrqLimit) 

Start triggered timed velocity commands 


for multiple axes and set the maximum 
torque limits of the commanded axes. 

More...
--------------------------------------------
WMX3APIFUNC StartVel (TriggerVelCommand 
*pVelCommand, double maxTrqLimit) 

Start a triggered velocity command and 
set the maximum torque limit. More... 

WMX3APIFUNC StartVel (TriggerTimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit) 
Start a triggered timed velocity command 
and set the maximum torque limit. 
More... 

WMX3APIFUNC StartVel (VelCommand *pVelCommand, 


double maxTrqLimit, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command with 
multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (TimedVelCommand 
*pTimedVelCommand, double 
maxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start a triggered timed velocity command 
with multiple trigger events and set the 
maximum torque limit. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand) 

Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand)
--------------------------------------------
◆ 
StartVel() [13/24] 



WMX3APIFUNC 
StartVel ( 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
VelCommand * pVelCommand 
) 
Start velocity commands for multiple axes. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 

Remarks 
This function executes the StartVel API function for multiple axes. 
If the specified arguments are invalid for any of the commanded axes, the motion 

will be canceled for all axes and the API function will return an error. 

◆StartVel() [14/24]

imedVelCommand imedVelCommand 
WMX3APIFUNC 
StartVel ( 
unsigned int numCommands, 
TimedVelCommand pT) 
Start timed velocity commands for multiple axes.
-----------------------------------------------------------------------------------
259. Instruction: Start velocity commands for multiple axes.
A: StartVel(numCommands, pVelCommand)
B: LaunchSequence(numEvents, launchCommands)
C: IsDeviceValid()
D: StartVel_TimedVel(numCommands, pTimedVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
259. Model's answer: A
259. Correct answer: A
259. Result: Correct



Processing Question 260:
260. Context:
 Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand) 

Start timed velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand) 

Start triggered velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand) 

Start triggered timed velocity commands 
for multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered velocity commands with 


multiple trigger events for multiple axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
with multiple trigger events for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
for multiple axes with multiple trigger 
events and set the maximum torque 
limits of the commanded axes. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
Stop (int axis) 
Stop the motion of an axis executing a 
velocity command. More... 
Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes 
executing velocity commands. More... 
ExecQuickStop (int axis) 
Stop the motion of an axis executing a 
velocity command using the quick stop 
deceleration system parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More...
-----------------------------------------------------------------------------------
260. Instruction: Start timed velocity commands for multiple axes
A: StartVel_TimedVel(numCommands, pTimedVelCommand)
B: StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)
C: SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)
D: InitiateMotion(TotalCommands, arrayMotionCommands)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
260. Model's answer: A
260. Correct answer: A
260. Result: Correct



Processing Question 261:
261. Context:
 ◆StartMovToJog() [2/2]

WMX3APIFUNC 
StartMovToJog ( 
) 
WMX3APIFUNC 
StartMovToJog ( 
) 
unsigned int numCommands, 
PosToJogCommand pPosToJogCommand 
Start a relative position command and a triggered jog command simulataneously for 
multiple axes. The position command will be overridden by the jog command when 
the trigger condition is satisfied. 

Parameters 
[in] 
numCommands The number of position 
and jog commands. 
Each command controls 
a single axis. 
[in] 
pPosToJogCommand A pointer to an array of 
objects of the 
PosToJogCommand 
class that contain the 
parameters of the motion 
commands. The number 
of objects in the array 
must be equal to 
numCommands. 

Remarks 
This function executes the StartMovToJog function for multiple axes. 

◆Stop() [1/4]
WMX3APIFU 
NC Stop ( int axis ) 
Stop the motion of an axis. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
WMX3APIFUNC StartMovToJog (unsigned int 


numCommands, PosToJogCommand 
*pPosToJogCommand) 

Start a relative position command and a 
triggered jog command simultaneously 
for multiple axes. The position command 
will be overridden by the jog command 
when the trigger condition is satisfied. 

More... 

WMX3APIFUNC Stop (int axis) 
Stop the motion of an axis. More... 

WMX3APIFUNC Stop (AxisSelection *pAxisSelection) 
Stop the motion of multiple axes. More... 

WMX3APIFUNC Stop (int axis, double dec) 
Stop the motion of an axis using the 
specified deceleration and a trapezoidal 
profile. More... 

WMX3APIFUNC Stop (unsigned int numCommands, 
StopCommand *pStopCommand) 

Stop the motion of multiple axes using 
the specified decelerations and 
trapezoidal profiles. More... 

WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection)
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMovToJog(PosToJo 
gCommand 
*pPosToJogCommand); 
Python 
def 
StartMovToJog(pPosToJo 
gCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartMovToJog(unsigne 
d int numCommands, 
PosToJogCommand 
*pPosToJogCommand); 
Python 
def 
StartMovToJog(numCom 
mands, 
pPosToJogCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis); 
Python def Stop(axis) 
Returns 
Type int 
Value error code 
Remarks
-----------------------------------------------------------------------------------
261. Instruction: Stop the motion of an axis.
A: StartMovToJog(pPosToJogCommand)
B: Halt(axis):
C: Stop_Dec(axis, dec)
D: Stop(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
261. Model's answer: D
261. Correct answer: D
261. Result: Correct



Processing Question 262:
262. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
},
    {
        "No": 279,
        "FunctionC++": "WMX3APIFUNC Stop(int axis)",
        "FunctionPython": "def Stop(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of an axis."
    },
    {
        "No": 280,
        "FunctionC++": "WMX3APIFUNC Stop(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Stop_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the motion of multiple axes."
--------------------------------------------
},
    {
        "No": 208,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(int axis)",
        "FunctionPython": "def StopSuperimpose(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a superimposed motion."
    },
    {
        "No": 209,
        "FunctionC++": "WMX3APIFUNC StopSuperimpose(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopSuperimpose_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop the superimposed motion of multiple axes."
-----------------------------------------------------------------------------------
262. Instruction: Stop the motion of multiple axes.
A: Stop_AxisSel(pAxisSelection)
B: Stop_AxisSelection(pSelectedAxis)
C: Wait_AxisSel(pAxisSelection)
D: StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
262. Model's answer: A
262. Correct answer: A
262. Result: Correct



Processing Question 263:
263. Context:
 This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
int axis 
) 
Stop execution of the cyclic position command buffer of an axis and decelerate the 
axis to a stop using the quick stop deceleration. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 
Remarks 

The specified axis will stop executing the cyclic position command and decelerate 
from its current velocity using the Quick Stop Dec parameter. After the quick stop 
finishes, the axis will be in the Idle state. 

Any remaining position commands in the buffer will be cleared. 

◆ExecQuickStop() [2/2]
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
-----------------------------------------------------------------------------------
263. Instruction: Stop execution of the cyclic position command buffer of an axis and decelerate the axis to a stop using the quick stop deceleration.
A: Stop(axis)
B: ExecQuickStop(axis)
C: StopAxisQuickly(axis)
D: StartCircularIntplPos_LengthAndEnd_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
263. Model's answer: B
263. Correct answer: B
263. Result: Correct



Processing Question 264:
264. Context:
 WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]
--------------------------------------------
More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More...
-----------------------------------------------------------------------------------
264. Instruction: Stop execution of the cyclic position command buffer of multiple axes and decelerate the axes to a stop using the quick stop deceleration.
A: ExecQuickStop_AxisSel(pAxisSelection)
B: Execute_AxisSel(pAxisSelection)
C: ExecCriticalStop_AxisSel(pSelectedAxis)
D: SyncToJog(slaveAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
264. Model's answer: A
264. Correct answer: A
264. Result: Correct



Processing Question 265:
265. Context:
 WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in.
--------------------------------------------
WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes 
executing velocity commands using the 
quick stop deceleration system 


parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 
Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (AxisSelection 
*pAxisSelection, double timeMilliseconds) 
Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 
WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 

WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More...
-----------------------------------------------------------------------------------
265. Instruction: Stop an axis that is currently in motion in the specified amount of time using a trapezoidal profile.
A: SetServoOn(axis, newStatus)
B: ExecTimedStop_TimeLimit(axis, timeLimitMilliseconds)
C: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
D: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
265. Model's answer: D
265. Correct answer: D
265. Result: Correct



Processing Question 266:
266. Context:
 Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

This function uses the Quick Stop Dec parameter to decelerate the axis to a stop. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in.
--------------------------------------------
Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks 

This function is identical to the Stop function, except the deceleration rate is set so 
that the axis stops in the specified time, and the motion profile is trapezoidal. 
If the commanded axis is in Idle state, this function will return no error. 

◆ExecTimedStop() [2/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
AxisSelection * pAxisSelection, 
double timeMilliseconds 
Stop multiple axes that are currently in motion in the specified amount of time using 

a trapezoidal profile. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 
Remarks 

This function executes the ExecTimedStop function for multiple axes. One stop 
time is specified for all axes.
-----------------------------------------------------------------------------------
266. Instruction: Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile
A: ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)
B: ExecTimedStop_AxisSel(pSelectedAxis, durationMs)
C: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
D: StartCircularIntplPos_LengthAndEnd(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
266. Model's answer: A
266. Correct answer: A
266. Result: Correct



Processing Question 267:
267. Context:
 *pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (unsigned int 
numCommands, TimeCommand 
*pTimeCommand) 
Stop multiple axes that are currently in 
motion in the specified amounts of time 
using a trapezoidal profile. More... 
WMX3APIFUNC Wait (int axis) 
Start a blocking wait command, returning 
only when the axis becomes idle. More... 
WMX3APIFUNC Wait (AxisSelection *pAxisSelection) 
Start a blocking wait command, returning 
only when the axes become idle. More... 

WMX3APIFUNC Wait (WaitCondition *pWaitCondition) 
Start a blocking wait command, returning 
only when the specified wait condition 
becomes true. More... 

WMX3APIFUNC Wait (int axis, unsigned int 
waitTimeMilliseconds) 

Start a blocking wait command, returning 
only when the axis becomes idle or the 
wait time elapses. More...
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecTimedStop(int axis, 
double 
timeMilliseconds); 
Python 
def 
ExecTimedStop_TimeMilli( 
axis, timeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecTimedStop(AxisSel 
ection *pAxisSelection, 
double 
timeMilliseconds); 
Python 
def 
ExecTimedStop_AxisSel(p 
AxisSelection, 
timeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
ExecTimedStop(unsigne 
d int numCommands, 
TimeCommand 
*pTimeCommand); 
def 
ExecTimedStop_TimeCm 
d(numCommands,
--------------------------------------------
},
    {
        "No": 176,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(AxisSelection *pAxisSelection, double timeMilliseconds)",
        "FunctionPython": "def ExecTimedStop_AxisSel(pAxisSelection, timeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amount of time using a trapezoidal profile"
    },
    {
        "No": 177,
        "FunctionC++": "WMX3APIFUNC ExecTimedStop(unsigned int numCommands, TimeCommand *pTimeCommand)",
        "FunctionPython": "def ExecTimedStop_TimeCmd(numCommands, pTimeCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile."
--------------------------------------------
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class 
object that specifies the 
axes to stop. 

Remarks 

This function executes the ExecQuickStop function for multiple axes. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Position, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ExecTimedStop() [1/3]

WMX3APIFUNC 
ExecTimedStop ( 
) 
WMX3APIFUNC 
ExecTimedStop ( 
) 
int 
axis, 
double timeMilliseconds 
Stop an axis that is currently in motion in the specified amount of time using a 
trapezoidal profile. 

Parameters 
[in] 
axis The axis to stop. 
[in] 
timeMilliseconds The time in milliseconds 
to stop the axis in. 

Remarks
-----------------------------------------------------------------------------------
267. Instruction: Stop multiple axes that are currently in motion in the specified amounts of time using a trapezoidal profile.
A: ExecTimedStop_CommandTime(numCommands, pTimeCommand)
B: OverridePos(numCommands, pPosCommand)
C: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
D: ExecTimedStop_TimeCmd(numCommands, pTimeCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
267. Model's answer: D
267. Correct answer: D
267. Result: Correct



Processing Question 268:
268. Context:
 WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More... 

WMX3APIFUNC GetMaxMotorSpeed (int axis, double 
*pSpeed) 
Get the maximum motor speed of an 
axis. More... 
WMX3APIFUNC OverrideVel (VelCommand 
*pVelCommand) 
Set an override velocity for a single axis 
that is currently executing a velocity 
command. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, VelCommand 
*pVelCommand) 
Set override velocities for multiple axes 


that are currently executing velocity 
commands. More... 

WMX3APIFUNC StartPosToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. More...
--------------------------------------------
pTimeCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMaxMotorSpeed(int 
axis, double speed); 
Python 
def 
SetMaxMotorSpeed(axis, 
speed) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMaxMotorSpeed(int 
axis, double *pSpeed); 
Python 
def 
GetMaxMotorSpeed(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -speed 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideVel(VelComman 
d *pVelCommand); 
Python 
def 
OverrideVel(pVelComman 
d) 
Returns 
Type int
--------------------------------------------
Remarks 

This function executes the ExecTimedStop function for multiple axes. A separate 
stop time is specified for each axis. 

If any of the commanded axes are in an invalid state, this function will return an 
error but the remainder of the commanded axes will be stopped. An axis is in an 
invalid state if the axis servo is not on, if the axis command mode is not Velocity, or 
if the axis is receiving or has received a new motion command to be started on the 
next communication cycle. 

◆ 
SetMaxMotorSpeed() 

WMX3APIFUNC 
SetMaxMotorSpeed ( int 
WMX3APIFUNC 
SetMaxMotorSpeed ( int 
axis, 
double speed 
) 
Set the maximum motor speed of an axis. 

Parameters 
[in] 
axis The axis to set the 
maximum motor speed 
of. 
[in] 
speed The maximum motor 
speed. 
Remarks 

This function sets the maximum motor speed of an axis. The speed of the axis in 
either direction during all motions will be limited to this value.
--------------------------------------------
WMX3APIFUNC StartVelToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 


Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

Public Attributes 

CoreMotion * cmApi 

Member Function Documentation 

◆SetMaxTrqLimit() 

WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %.
-----------------------------------------------------------------------------------
268. Instruction: Set the maximum motor speed of an axis.
A: StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)
B: SetMotorLimit(axis, max_speed)
C: GetFlightRecorderParam()
D: SetMaxMotorSpeed(axis, speed)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
268. Model's answer: D
268. Correct answer: D
268. Result: Correct



Processing Question 269:
269. Context:
 WMX3APIFUNC SetMaxMotorSpeed (int axis, double 
speed) 

Set the maximum motor speed of an 
axis. More... 

WMX3APIFUNC GetMaxMotorSpeed (int axis, double 
*pSpeed) 
Get the maximum motor speed of an 
axis. More... 
WMX3APIFUNC OverrideVel (VelCommand 
*pVelCommand) 
Set an override velocity for a single axis 
that is currently executing a velocity 
command. More... 

WMX3APIFUNC OverrideVel (unsigned int 
numCommands, VelCommand 
*pVelCommand) 
Set override velocities for multiple axes 


that are currently executing velocity 
commands. More... 

WMX3APIFUNC StartPosToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. More...
--------------------------------------------
pTimeCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMaxMotorSpeed(int 
axis, double speed); 
Python 
def 
SetMaxMotorSpeed(axis, 
speed) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMaxMotorSpeed(int 
axis, double *pSpeed); 
Python 
def 
GetMaxMotorSpeed(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -speed 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideVel(VelComman 
d *pVelCommand); 
Python 
def 
OverrideVel(pVelComman 
d) 
Returns 
Type int
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
-----------------------------------------------------------------------------------
269. Instruction: Get the maximum motor speed of an axis.
A: SetParam(pParam)
B: GetMotionParam(axis)
C: GetMaxMotorSpeed(axis)
D: GetMaxMotorRPM(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
269. Model's answer: C
269. Correct answer: C
269. Result: Correct



Processing Question 270:
270. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
◆OverrideVel() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideVel ( 
VelCommand pVelCommand ) 
Set an override velocity for a single axis that is currently executing a velocity 
command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
Remarks 

This function will override just the velocity of the axis. The axis will retain the profile 
type, acceleration, deceleration, jerk acceleration, jerk deceleration, and all other 
motion parameters. 

◆OverrideVel() [2/2]

pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands.
--------------------------------------------
pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the OverrideVel API function for multiple axes. 

◆StartPosToVel() [1/4]

WMX3APIFU 
NC 
StartPosToVe 
l ( 
WMX3APIFU 
NC 
StartPosToVe 
l ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 
Remarks
-----------------------------------------------------------------------------------
270. Instruction: Set an override velocity for a single axis that is currently executing a velocity command.
A: AdjustVelocity(pVelocityCommand)
B: OverrideVel(pVelCommand)
C: OverrideVel(pPosCommand)
D: StartLinearIntplPos_TriggerEvents(pLinearIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
270. Model's answer: B
270. Correct answer: B
270. Result: Correct



Processing Question 271:
271. Context:
 WMX3APIFUNC OverrideVel (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the velocities of multiple axes 
currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the accelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the decelerations of multiple 
axes currently executing position, jog, or 
velocity commands. More... 

WMX3APIFUNC OverrideJerkAcc (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the acceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More... 

WMX3APIFUNC OverrideJerkDec (unsigned int 
numCommands, PosCommand 
*pPosCommand) 
Override the deceleration jerks of 
multiple axes currently executing 
position, jog, or velocity commands. 
More...
--------------------------------------------
◆OverrideVel() [1/2]

WMX3APIFU 
NC 
WMX3APIFU 
NC 
OverrideVel ( 
VelCommand pVelCommand ) 
Set an override velocity for a single axis that is currently executing a velocity 
command. 

Parameters 
[in] 
pVelCommand A pointer to an object of 
the VelCommand class 
that contains the velocity 
command parameters. 
Remarks 

This function will override just the velocity of the axis. The axis will retain the profile 
type, acceleration, deceleration, jerk acceleration, jerk deceleration, and all other 
motion parameters. 

◆OverrideVel() [2/2]

pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands.
--------------------------------------------
Override the velocity of an axis currently 
executing a position, jog, or velocity 
command. More... 

WMX3APIFUNC OverrideAcc (PosCommand 


*pPosCommand) 

Override the acceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideDec (PosCommand 
*pPosCommand) 
Override the deceleration of an axis 
currently executing a position, jog, or 
velocity command. More... 
WMX3APIFUNC OverrideJerkAcc (PosCommand 
*pPosCommand) 
Override the acceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideJerkDec (PosCommand 
*pPosCommand) 

Override the deceleration jerk of an axis 
currently executing a position, jog, or 
velocity command. More... 

WMX3APIFUNC OverrideProfile (PosCommand 
*pPosCommand) 

Override the entire profile of an axis 
currently executing a position, jog, or 
velocity command. More...
--------------------------------------------
Function 
C++ int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideMov(numComma 
nds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideVel(unsigned int 
numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideVel(numComman 
ds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OverrideAcc(unsigned 
int numCommands, 
PosCommand 
*pPosCommand); 
Python 
def 
OverrideAcc(numComman 
ds, pPosCommand) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
271. Instruction: Set override velocities for multiple axes that are currently executing velocity commands.
A: OverrideVel(numCommands, pVelCommand)
B: OverrideVel(numCommands, pPosCommand)
C: RevisedOverrideVel(numCommands, newVelCommand)
D: GetMaxTrqLimit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
271. Model's answer: B
271. Correct answer: A
271. Result: Wrong



Processing Question 272:
272. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
pVelCommand pVelCommand 
WMX3APIFUNC 
OverrideVel ( 
) 
unsigned int numCommands, 
VelCommand * 
Set override velocities for multiple axes that are currently executing velocity 
commands. 

Parameters 
[in] 
numCommands The number of velocity 
commands. Each 
command controls a 
single axis. 
[in] 
pVelCommand A pointer to an array of 
objects of the 
VelCommand class that 
contain the parameters 
of the velocity 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the OverrideVel API function for multiple axes. 

◆StartPosToVel() [1/4]

WMX3APIFU 
NC 
StartPosToVe 
l ( 
WMX3APIFU 
NC 
StartPosToVe 
l ( TriggerVelCom pTriggerVelCo ) 
Start a triggered velocity command for an axis that is currently executing a position 
command. 

Parameters 
[in] 
pTriggerVelCommand A pointer to an object of 
the 
TriggerVelCommand 
class that contains the 
velocity command 
parameters. 
Remarks
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
272. Instruction: Start a triggered velocity command for an axis that is currently executing a position command.
A: StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)
B: SetHomeParam(axis, pParam)
C: StartPosToVel_TriggerVel(pTriggerVelCommand)
D: SetInitialPosition_And_TriggerVelocity(pTriggerVelocityCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
272. Model's answer: C
272. Correct answer: C
272. Result: Correct



Processing Question 273:
273. Context:
 *pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
See also 

Command Mode 

◆StartVelToPos() [2/4]

WMX3APIFUNC 
StartVelToPos ( 
) 
WMX3APIFUNC 
StartVelToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing velocity commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartVelToPos API function for multiple axes. 

◆StartVelToMov() [2/4]

WMX3APIFUNC 
StartVelToMov ( 
) 
WMX3APIFUNC 
StartVelToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
-----------------------------------------------------------------------------------
273. Instruction: Start triggered velocity commands for multiple axes that are currently executing position commands.
A: ResetFlightRecorder()
B: StartPosToVel_PulseVel(numCommands, pPulseVelCommand)
C: StartPosToVel_TriggerVel(pTriggerVelCommand)
D: StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
273. Model's answer: D
273. Correct answer: D
273. Result: Correct



Processing Question 274:
274. Context:
 WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
274. Instruction: Start a triggered velocity command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.
A: StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)
B: StartPosToVel_TriggerEvents(pVelocityCommand, pEventTriggers)
C: SetSyncParam(axis, pParam)
D: StartPosToVel_TriggerEvents(pVelCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
274. Model's answer: D
274. Correct answer: D
274. Result: Correct



Processing Question 275:
275. Context:
 WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
275. Instruction: Start triggered velocity commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events
A: GetInputModuleId()
B: StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
C: StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
D: UpdatePosToVel_TriggerEvents(numChanges, pUpdatedVelCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
275. Model's answer: C
275. Correct answer: C
275. Result: Correct



Processing Question 276:
276. Context:
 WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
276. Instruction: Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.
A: GetVelFeedback(axis)
B: StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)
C: StartTrqToVel_TriggerVel(pTriggerVelCommand)
D: StartTrqToVel_CheckForTriggerVelCommand(triggerVelocity)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
276. Model's answer: C
276. Correct answer: C
276. Result: Correct



Processing Question 277:
277. Context:
 WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
277. Instruction: Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.
A: StartTrqToVel_TriggerVel(numCommands, pTriggerVelCommand)
B: StopJogAtPos(numCommands, pPosCommand)
C: StartTrqToVel_TriggerVel(numTriggerVelCommands, pTriggerVelCommands)
D: StartPosToVel_TriggerVel(numCommands, pTriggerVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
277. Model's answer: A
277. Correct answer: A
277. Result: Correct



Processing Question 278:
278. Context:
 WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
*pTriggerPosCommand) 

Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 

More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
More... 

WMX3APIFUNC StartVelToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 

Start an absolute triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartVelToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a velocity command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
278. Instruction: Start a triggered velocity command for an axis that is currently executing a torque command. The trigger condition can have multiple trigger events.
A: StartPos_Trigger(pPosCommand)
B: StartTrqToVel_TriggerEvents(pVelCommand, pTriggerEvents)
C: StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)
D: UpdateTrqToVel_TriggerEvents(pVelSetpoint, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
278. Model's answer: B
278. Correct answer: B
278. Result: Correct



Processing Question 279:
279. Context:
 WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPosToVel (VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start a triggered velocity command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToVel (unsigned int 
numCommands, VelCommand 
*pVelCommand, TriggerEvents 
*pTriggerEvents) 

Start triggered velocity commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More... 

WMX3APIFUNC StartTrqToVel (TriggerVelCommand 
*pTriggerVelCommand) 

Start a triggered velocity command for an 
axis that is currently executing a torque 
command. More... 


Public Attributes 

WMX3APIFUNC StartTrqToVel (unsigned int 
numCommands, TriggerVelCommand 
*pTriggerVelCommand) 
Start triggered velocity commands for 
multiple axes that are currently executing 
torque commands. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. The trigger 
conditions can have multiple trigger 
events. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. More... 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command in
-----------------------------------------------------------------------------------
279. Instruction: Start triggered velocity commands for multiple axes that are currently executing torque commands. The trigger conditions can have multiple trigger events.
A: ModifyTrqToVel_TriggerEvents(numCommands, pVelCommands, pTriggerEvents)
B: GetAxisParam_Axis(axis)
C: StartTrqToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
D: StartPosToVel_TriggerEvents(numCommands, pVelCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
279. Model's answer: C
279. Correct answer: C
279. Result: Correct



Processing Question 280:
280. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
280. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: ValidateDevice()
B: SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)
C: IsDeviceValid()
D: GetFlightRecorderParam()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
280. Model's answer: C
280. Correct answer: C
280. Result: Correct



Processing Question 281:
281. Context:
 WMX3APIFUNC GetPositiveTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC SetNegativeTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC GetNegativeTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a torque command. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 

*pTrqCommand) 

Start a triggered torque command. 

More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered torque command with 
multiple trigger events. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 

TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand)
--------------------------------------------
Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit()
--------------------------------------------
WMX3APIFUNC StartVelToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 


Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

Public Attributes 

CoreMotion * cmApi 

Member Function Documentation 

◆SetMaxTrqLimit() 

WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %.
--------------------------------------------
See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit() 

WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the positive 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis.
-----------------------------------------------------------------------------------
281. Instruction: Set the maximum torque limit of an axis.
A: SetMaximumTorqueLimit(axis, max_torque)
B: StartCircularIntplMov_CenterAndLength_Trigger(pCircularIntplCommand, pTrigger)
C: SetAxisUnit(axis, unit)
D: SetMaxTrqLimit(axis, torque)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
281. Model's answer: D
281. Correct answer: D
281. Result: Correct



Processing Question 282:
282. Context:
 WMX3APIFUNC GetPositiveTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC SetNegativeTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC GetNegativeTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a torque command. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 

*pTrqCommand) 

Start a triggered torque command. 

More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered torque command with 
multiple trigger events. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 

TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand)
--------------------------------------------
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetNegativeTrqLimit(int 
axis, double *pTorque); 
Python 
def 
GetNegativeTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartTrq(TrqCommand 
*pTrqCommand); 
Python 
def 
StartTrq(pTrqCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartTrq(unsigned int 
numCommands, 
TrqCommand 
*pTrqCommand); 
Python 
def 
StartTrq(numCommands, 
pTrqCommand) 
Returns 
Type int 
Value error code
--------------------------------------------
WMX3APIFUNC StartVelToRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate for an axis that is currently 
executing a velocity command. More... 

WMX3APIFUNC StartVelToRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 


Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

Public Attributes 

CoreMotion * cmApi 

Member Function Documentation 

◆SetMaxTrqLimit() 

WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
WMX3APIFUNC 
SetMaxTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %.
--------------------------------------------
Python def GetMaxTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPositiveTrqLimit(int 
axis, double torque); 
Python 
def 
SetPositiveTrqLimit(axis, 
torque) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPositiveTrqLimit(int 
axis, double *pTorque); 
Python 
def 
GetPositiveTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetNegativeTrqLimit(int 
axis, double torque); 
Python 
def 
SetNegativeTrqLimit(axis, 
torque)
-----------------------------------------------------------------------------------
282. Instruction: Get the maximum torque limit of an axis.
A: GetMaxTrqLimit(axis)
B: GetMaxTorqueLimit(axis_id)
C: GetNegativeTrqLimit(axis)
D: StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
282. Model's answer: C
282. Correct answer: A
282. Result: Wrong



Processing Question 283:
283. Context:
 Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit()
--------------------------------------------
See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit() 

WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the positive direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the positive direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit()
--------------------------------------------
See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit() 

WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the positive 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis.
--------------------------------------------
Python def GetMaxTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPositiveTrqLimit(int 
axis, double torque); 
Python 
def 
SetPositiveTrqLimit(axis, 
torque) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPositiveTrqLimit(int 
axis, double *pTorque); 
Python 
def 
GetPositiveTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetNegativeTrqLimit(int 
axis, double torque); 
Python 
def 
SetNegativeTrqLimit(axis, 
torque)
-----------------------------------------------------------------------------------
283. Instruction: Set the maximum torque limit in the positive direction of an axis.
A: SetGearRatio(axis, numerator, denominator)
B: SetPositiveTrqLimit(axis, torque)
C: SetMaxTorqueLimit(axis, max_torque)
D: SetNegativeTrqLimit(axis, torque)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
283. Model's answer: B
283. Correct answer: B
283. Result: Correct



Processing Question 284:
284. Context:
 See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit() 

WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the positive direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the positive direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit()
--------------------------------------------
Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit()
--------------------------------------------
WMX3APIFUNC GetPositiveTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC SetNegativeTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC GetNegativeTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a torque command. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 

*pTrqCommand) 

Start a triggered torque command. 

More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered torque command with 
multiple trigger events. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 

TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand)
--------------------------------------------
Python def GetMaxTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPositiveTrqLimit(int 
axis, double torque); 
Python 
def 
SetPositiveTrqLimit(axis, 
torque) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPositiveTrqLimit(int 
axis, double *pTorque); 
Python 
def 
GetPositiveTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetNegativeTrqLimit(int 
axis, double torque); 
Python 
def 
SetNegativeTrqLimit(axis, 
torque)
-----------------------------------------------------------------------------------
284. Instruction: Get the maximum torque limit in the positive direction of an axis.
A: GetPositiveTrqLimit(axis)
B: GetMaxPositiveTorqueLimit(axis)
C: Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)
D: SetPositiveTrqLimit(axis, torque)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
284. Model's answer: A
284. Correct answer: A
284. Result: Correct



Processing Question 285:
285. Context:
 See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit() 

WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the positive 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis.
--------------------------------------------
◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the negative direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the negative direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the negative direction. 

See the discussion under Negative Trq Limit for additional information regarding 
the parameter set by this function. 

◆GetNegativeTrqLimit() 

WMX3APIFUNC 
GetNegativeTrqLimit ( int 
WMX3APIFUNC 
GetNegativeTrqLimit ( int 
axis, 
double * pTorque 
) 
Get the maximum torque limit in the negative direction of an axis.
--------------------------------------------
Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit()
--------------------------------------------
See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit() 

WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
SetPositiveTrqLimit ( 
) 
int 
axis, 
double torque 
Set the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the positive direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the positive direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit()
-----------------------------------------------------------------------------------
285. Instruction: Set the maximum torque limit in the negative direction of an axis.
A: SetPositiveTrqLimit(axis, torque)
B: Export_AxisPrm(pPath, pAxisParam)
C: SetNegativeTrqLimit(axis, torque)
D: SetNegativeTorqueLimit(axis, limit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
285. Model's answer: C
285. Correct answer: C
285. Result: Correct



Processing Question 286:
286. Context:
 ◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis. 

Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply in 
the negative direction, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis in the negative direction. 
The axis servo will only apply up to the maximum torque limit set using this function 
in the negative direction. 

See the discussion under Negative Trq Limit for additional information regarding 
the parameter set by this function. 

◆GetNegativeTrqLimit() 

WMX3APIFUNC 
GetNegativeTrqLimit ( int 
WMX3APIFUNC 
GetNegativeTrqLimit ( int 
axis, 
double * pTorque 
) 
Get the maximum torque limit in the negative direction of an axis.
--------------------------------------------
See the discussion under Positive Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetPositiveTrqLimit() 

WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
WMX3APIFUNC 
GetPositiveTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit in the positive direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the positive 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the positive direction. 

See the discussion under Positive Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetNegativeTrqLimit() 

WMX3APIFUNC 
SetNegativeTrqLimit ( int 
WMX3APIFUNC 
SetNegativeTrqLimit ( int 
axis, 
double torque 
) 
Set the maximum torque limit in the negative direction of an axis.
--------------------------------------------
Python def GetMaxTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPositiveTrqLimit(int 
axis, double torque); 
Python 
def 
SetPositiveTrqLimit(axis, 
torque) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPositiveTrqLimit(int 
axis, double *pTorque); 
Python 
def 
GetPositiveTrqLimit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -torque 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetNegativeTrqLimit(int 
axis, double torque); 
Python 
def 
SetNegativeTrqLimit(axis, 
torque)
--------------------------------------------
Parameters 
[in] 
axis The axis to set the 
torque limit. 
[in] 
torque The maximum torque 
that the axis will apply, in 
units of %. 

Remarks 

This function sets the maximum torque output of an axis. The axis servo will only 
apply up to the maximum torque limit set using this function. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter set by this function. 

◆GetMaxTrqLimit() 

WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
WMX3APIFUNC 
GetMaxTrqLimit ( 
) 
int 
axis, 
double * pTorque 
Get the maximum torque limit of an axis. 
Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the 
maximum torque limit, in 
units of %. 

Remarks 

This function gets the maximum torque output of an axis. 

See the discussion under Max Trq Limit for additional information regarding the 
parameter obtained by this function. 

◆SetPositiveTrqLimit()
-----------------------------------------------------------------------------------
286. Instruction: Get the maximum torque limit in the negative direction of an axis.
A: GetNegativeTrqLimit(axis)
B: SetMaxTrqLimit(axis, torque)
C: GetVelFeedback(axis)
D: GetNegativeTorqueLimit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
286. Model's answer: A
286. Correct answer: A
286. Result: Correct



Processing Question 287:
287. Context:
 TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand) 


Start triggered torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed) 

Start a torque command and set the 
maximum motor speed. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC GetPositiveTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
positive direction of an axis. More... 

WMX3APIFUNC SetNegativeTrqLimit (int axis, double 
torque) 

Set the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC GetNegativeTrqLimit (int axis, double 
*pTorque) 

Get the maximum torque limit in the 
negative direction of an axis. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand) 
Start a torque command. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 

*pTrqCommand) 

Start a triggered torque command. 

More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start a triggered torque command with 
multiple trigger events. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 

TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand)
--------------------------------------------
WMX3APIFUNC 
GetNegativeTrqLimit ( int 
WMX3APIFUNC 
GetNegativeTrqLimit ( int 
axis, 
double * pTorque 
) 
Get the maximum torque limit in the negative direction of an axis. 

Parameters 
[in] 
axis The axis to get the 
torque limit. 
[out] 
pTorque A pointer to a double that 
will contain the negative 
torque limit, in units of 
%. 

Remarks 

This function gets the maximum torque output of an axis in the negative direction. 

See the discussion under Negative Trq Limit for additional information regarding 
the parameter obtained by this function. 

◆StartTrq() [1/12]

WMX3APIFU 
NC StartTrq ( 
WMX3APIFU 
NC StartTrq ( TrqCommand pTrqCommand ) 
Start a torque command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 

Remarks 

This function will start a torque command. The OperationState of the axis will 
become Trq.
-----------------------------------------------------------------------------------
287. Instruction: Start a torque command.
A: StartTorque(pCommand)
B: StartTrq(pTrqCommand)
C: SetAxisPolarity(axis, polarity)
D: StartVelToTrq(pTriggerTrqCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
287. Model's answer: B
287. Correct answer: B
287. Result: Correct



Processing Question 288:
288. Context:
 TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand) 


Start triggered torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed) 

Start a torque command and set the 
maximum motor speed. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More...
--------------------------------------------
See also 

Command Mode 

◆StartTrqToPos() [2/4]

WMX3APIFUNC 
StartTrqToPos ( 
) 
WMX3APIFUNC 
StartTrqToPos ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start absolute triggered position commands for multiple axes that are currently 

executing torque commands. 
Parameters 
[in] 
numCommands The number of position 
commands. Each 
command controls a 
single axis. 

[in] 
pTriggerPosCommand A pointer to an array of 
objects of the 

TriggerPosCommand 

class that contain the 
parameters of the 
position commands. The 
number of elements in 
the array must equal 
numCommands. 

Remarks 

This function executes the StartTrqToPos API function for multiple axes. 

◆StartTrqToMov() [2/4]

WMX3APIFUNC 
StartTrqToMov ( 
) 
WMX3APIFUNC 
StartTrqToMov ( 
) 
unsigned int numCommands, 
TriggerPosComman pTriggerPosComman 
Start relative triggered position commands for multiple axes that are currently
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
-----------------------------------------------------------------------------------
288. Instruction: Start torque commands for multiple axes.
A: StartTrq(numCommands, pTrqCommand)
B: Export_AxisPrm(pPath, pAxisParam)
C: StartTrqToPos(numCommands, pTriggerPosCommand)
D: ExecuteCommands(numCommands, commandsList)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
288. Model's answer: A
288. Correct answer: A
288. Result: Correct



Processing Question 289:
289. Context:
 WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events and set the 
maximum motor speed. More... 
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, double 
*pMaxMotorSpeed) 
Start torque commands for multiple axes 
and set the maximum motor speeds of 
the commanded axes. More... 
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand, 
double *pMaxMotorSpeed) 
Start triggered torque commands for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More...
--------------------------------------------
Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 

Remarks 

This function will start a torque command. The axis will apply a constant torque in 
the specified direction. Depending on the load on the axis, the axis may move 
during a torque command. 

◆StartTrq() [4/6]

WMX3APIFUNC 
StartTrq ( 
) 
WMX3APIFUNC 
StartTrq ( 
) 
TrqCommand * pTrqCommand, 
long maxMotorSpeed 
Start a TQ mode torque command and set the maximum motor speed. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

For EtherCAT
--------------------------------------------
◆StartTrq() [6/6]

WMX3APIFUNC 
StartTrq ( 
WMX3APIFUNC 
StartTrq ( 
unsigned int numCommands, 
TrqCommand * pTrqCommand, 
long * maxMotorSpeeds 
) 
Start TQ mode torque commands for multiple axes. 

Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTrqCommand A pointer to an array of 
objects of the 
TrqCommand class that 
contain the parameters 
of the torque commands. 
The number of elements 
in the array must equal 
numCommands. 
[in] 
maxMotorSpeeds The maximum motor 
speeds to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

◆StopTrq() [1/2]

WMX3APIFU 
NC StopTrq ( int axis ) 
WMX3APIFU 
NC StopTrq ( int axis ) 
Stop a TQ mode torque command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks
--------------------------------------------
The torque profile must be first set with the SetTrqProfile function. 


◆StartTrq() [2/6]
WMX3APIFUNC 
StartTrq ( 
) 
int 
axis, 
long maxMotorSpeed 
Start a TQ mode torque command. 

Parameters 
[in] 
axis The axis to command. 
[in] 
maxMotorSpeed The maximum motor 
speed to apply, in units 
of rpm. 
Remarks 

This function is an overloaded function of StartTrq that also sets the max motor 
speed. After the torque command is stopped or overridden, the max motor speed 
will remain at the specified value until modified by another function. 

The torque profile must be first set with the SetTrqProfile function. 

◆StartTrq() [3/6]

WMX3APIFU WMX3APIFU 
NC StartTrq ( 
TrqCommand pTrqCommand ) 
Start a TQ mode torque command. 

Parameters 
[in] 
pTrqCommand A pointer to an object of 
the TrqCommand class 
that contains the 
parameters of the torque 
command. 

Remarks
-----------------------------------------------------------------------------------
289. Instruction: Start a torque command and set the maximum motor speed.
A: EnduranceMode_SetMaxSpeed(pTrqCommand, maxMotorSpeed)
B: Stop(axis)
C: StartTrq_MaxMotorSpeed(pTrqCommand, maxMotorSpeed)
D: StartVel_MaxTrq(pVelCommand, maxTrqLimit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
289. Model's answer: C
289. Correct answer: C
289. Result: Correct



Processing Question 290:
290. Context:
 WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 

RampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start torque commands in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 


TriggerRampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start triggered torque commands in 
which the torque is changed over time 
for multiple axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed) 
Start a torque command in which the 
torque is changed over time and set the 
maximum motor speed. More...
--------------------------------------------
WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed over time 
and set the maximum motor speed. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time and set the 


maximum motor speed. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 

Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More...
--------------------------------------------
Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More...
--------------------------------------------
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes 
and set the maximum motor speeds of 
the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime) 
Start a torque command in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime) 
Start a triggered torque command in 
which the torque is changed over time. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 

RampTimeTrqCommand 

*pRampTimeTrqCommand)
-----------------------------------------------------------------------------------
290. Instruction: Start a triggered torque command in which the torque is changed over time
A: StartRampTimeTrq(pTrqCommand, rampCycleTime)
B: StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)
C: SetAbsoluteSyncPhase(slaveAxis, phase, pProfile)
D: UpdateRampTimeTrq(pTrqCommand, newRampCycleTime)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
290. Model's answer: A
290. Correct answer: A
290. Result: Correct



Processing Question 291:
291. Context:
 Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More...
--------------------------------------------
WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes 
and set the maximum motor speeds of 
the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime) 
Start a torque command in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime) 
Start a triggered torque command in 
which the torque is changed over time. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 

RampTimeTrqCommand 

*pRampTimeTrqCommand)
--------------------------------------------
WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 

RampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start torque commands in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 


TriggerRampTimeTrqCommand 

*pRampTimeTrqCommand) 

Start triggered torque commands in 
which the torque is changed over time 
for multiple axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes. More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed) 
Start a torque command in which the 
torque is changed over time and set the 
maximum motor speed. More...
--------------------------------------------
WMX3APIFUNC StartRampTimeTrq 
(TriggerTrqCommand *pTrqCommand, 
unsigned int rampCycleTime, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed over time 
and set the maximum motor speed. 
More... 

WMX3APIFUNC StartRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, double maxMotorSpeed, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed over time and set the 


maximum motor speed. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 

Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More...
-----------------------------------------------------------------------------------
291. Instruction: Start a torque command in which the torque is changed over time and set the maximum motor speed.
A: StartRampTimeTrq(pTrqOutput, rampTime, maxTorque)
B: StartJog_TimedJog(numCommands, pTimedJogCommand)
C: StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)
D: SetAxisPolarity(axis, polarity)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
291. Model's answer: C
291. Correct answer: C
291. Result: Correct



Processing Question 292:
292. Context:
 WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand) 

Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand)
--------------------------------------------
WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 


torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed) 
Start a torque command in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate and set the maximum 
motor speed. More...
--------------------------------------------
Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More...
--------------------------------------------
WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 
RampRateTrqCommand 
*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 
Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 


numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes and set 
the maximum motor speeds of the 
commanded axes. More...
-----------------------------------------------------------------------------------
292. Instruction: Start a torque command in which the torque is changed at a specified rate.
A: StartChangingRampTrq(pTrqSetpoint, rampRate)
B: StartTrq(pTrqCommand)
C: StartRampRateTrq(pTrqCommand, rampRate)
D: StartCircularIntplMov_ThroughAndEnd3D(pCircularIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
292. Model's answer: C
292. Correct answer: C
292. Result: Correct



Processing Question 293:
293. Context:
 Start torque commands in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampTimeTrq (unsigned int 
numCommands, 
RampTimeTrqCommand 
*pRampTimeTrqCommand, double 
*pMaxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events in which the 
torque is changed over time for multiple 
axes and set the maximum motor speeds 
of the commanded axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More...
--------------------------------------------
WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand, 
TriggerEvents *pTriggerEvents) 

Start triggered torque commands with 
multiple trigger events in which the 


torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed) 
Start a torque command in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate, double 
maxMotorSpeed) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate and set the maximum 
motor speed. More...
--------------------------------------------
WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, double 
maxMotorSpeed, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate and 
set the maximum motor speed. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 
RampRateTrqCommand 
*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 
Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes and set the maximum 
motor speeds of the commanded axes. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 


numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand, double 
*pMaxMotorSpeed) 

Start triggered torque commands in 
which the torque is changed at a 
specified rate for multiple axes and set 
the maximum motor speeds of the 
commanded axes. More...
--------------------------------------------
WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate) 

Start a torque command in which the 
torque is changed at a specified rate. 


More... 

WMX3APIFUNC StartRampRateTrq 
(TriggerTrqCommand *pTrqCommand, 
double rampRate) 
Start a triggered torque command in 
which the torque is changed at a 
specified rate. More... 

WMX3APIFUNC StartRampRateTrq (TrqCommand 
*pTrqCommand, double rampRate, 
TriggerEvents *pTriggerEvents) 
Start a triggered torque command with 
multiple trigger events in which the 
torque is changed at a specified rate. 
More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

RampRateTrqCommand 

*pRampRateTrqCommand) 

Start torque commands in which the 
torque is changed at a specified rate for 
multiple axes. More... 

WMX3APIFUNC StartRampRateTrq (unsigned int 
numCommands, 

TriggerRampRateTrqCommand 

*pRampRateTrqCommand)
-----------------------------------------------------------------------------------
293. Instruction: Start a torque command in which the torque is changed at a specified rate and set the maximum motor speed.
A: SetMovingAverageProfileTime(axis, milliseconds)
B: StartRampRateTrq(pTrqCommand, rampRate, maxMotorSpeed)
C: UpdateRampRateTrq(pTrqCommand, newRampRate, maxMotorSpeed)
D: StartRampTimeTrq(pTrqCommand, rampCycleTime, maxMotorSpeed)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
293. Model's answer: B
293. Correct answer: B
293. Result: Correct



Processing Question 294:
294. Context:
 },
    {
        "No": 312,
        "FunctionC++": "WMX3APIFUNC StopTrq(int axis)",
        "FunctionPython": "def StopTrq(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a torque command. "
    },
    {
        "No": 313,
        "FunctionC++": "WMX3APIFUNC StopTrq(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopTrq_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop torque commands for multiple axes. "
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
◆StopTrq() [1/2]

WMX3APIFU 
NC StopTrq ( int axis ) 
WMX3APIFU 
NC StopTrq ( int axis ) 
Stop a TQ mode torque command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a TQ mode torque 
command. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆StopTrq() [2/2]
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop TQ mode torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 
Remarks 

This function is an overloaded function of StopTrq API function that stops TQ mode 
torque commands for multiple axes. 


 


WMX3Api Class Reference 

This class contains core functions. 

Public Member Functions 

WMX3Api () 

Default constructor for this class. 

~WMX3Api () 

Destructor for this class.
--------------------------------------------
Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a torque 
command. 

This function will only stop axes running in Torque command mode. To stop axes 
running in Position command mode, use the Stop function. To stop axes running in 
Velocity command mode, use the Stop function. 

If the commanded axis is in Idle state, this function will return no error. 

◆StopTrq() [2/2]

WMX3APIFU 
NC StopTrq ( 
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 

Remarks 

This function is an overloaded function of StopTrq API function that stops torque 
commands for multiple axes.
-----------------------------------------------------------------------------------
294. Instruction: Stop a torque command.
A: StopSuperimpose(axis)
B: SimulateTimeAtPos(pSimulatePosCommand, specificPos)
C: StopTrq(axis)
D: PauseTorque(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
294. Model's answer: C
294. Correct answer: C
294. Result: Correct



Processing Question 295:
295. Context:
 Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a torque 
command. 

This function will only stop axes running in Torque command mode. To stop axes 
running in Position command mode, use the Stop function. To stop axes running in 
Velocity command mode, use the Stop function. 

If the commanded axis is in Idle state, this function will return no error. 

◆StopTrq() [2/2]

WMX3APIFU 
NC StopTrq ( 
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 

Remarks 

This function is an overloaded function of StopTrq API function that stops torque 
commands for multiple axes.
--------------------------------------------
Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
◆StopTrq() [1/2]

WMX3APIFU 
NC StopTrq ( int axis ) 
WMX3APIFU 
NC StopTrq ( int axis ) 
Stop a TQ mode torque command. 

Parameters 
[in] 
axis The axis to stop. 

Remarks 

This function will stop the torque command for an axis executing a TQ mode torque 
command. 

For EtherCAT 

This function sends a halt signal to the servo. PP, HM, PV, and TQ mode motion will 
be halted. 

◆StopTrq() [2/2]
WMX3APIFU 
NC StopTrq ( AxisSelection pAxisSelection ) 
Stop TQ mode torque commands for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to an 
AxisSelection class that 
specifies the axes to 
stop. 
Remarks 

This function is an overloaded function of StopTrq API function that stops TQ mode 
torque commands for multiple axes. 


 


WMX3Api Class Reference 

This class contains core functions. 

Public Member Functions 

WMX3Api () 

Default constructor for this class. 

~WMX3Api () 

Destructor for this class.
--------------------------------------------
},
    {
        "No": 312,
        "FunctionC++": "WMX3APIFUNC StopTrq(int axis)",
        "FunctionPython": "def StopTrq(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop a torque command. "
    },
    {
        "No": 313,
        "FunctionC++": "WMX3APIFUNC StopTrq(AxisSelection *pAxisSelection)",
        "FunctionPython": "def StopTrq_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Stop torque commands for multiple axes. "
-----------------------------------------------------------------------------------
295. Instruction: Stop torque commands for multiple axes.
A: StopTrq_AxisSel(pAxisSelection)
B: StopTrq(axis)
C: Stop_AxisSel(pAxisSelection)
D: StopAxisSelect: (axisToStop)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
295. Model's answer: A
295. Correct answer: A
295. Result: Correct



Processing Question 296:
296. Context:
 More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
296. Instruction: Start a triggered torque command for an axis that is currently executing a position command.
A: SetTrqStartPos(pCmdTriggerTrq)
B: GetAbsoluteEncoderHomeOffset(axis)
C: StartVelToTrq(pTriggerTrqCommand)
D: StartPosToTrq(pTriggerTrqCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
296. Model's answer: D
296. Correct answer: D
296. Result: Correct



Processing Question 297:
297. Context:
 More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
297. Instruction: Start triggered torque commands for multiple axes that are currently executing position commands.
A: StartVelToTrq(pTriggerTrqCommand)
B: StartPosToTrq(numCommands, pTriggerTrqCommand)
C: StartVelToTrq(numCommands, pTriggerTrqCommand)
D: UpdatePosToTrq(numFunctions, pDetectedTrqCmd)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
297. Model's answer: B
297. Correct answer: B
297. Result: Correct



Processing Question 298:
298. Context:
 WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartPosToJog (TriggerJogCommand 
*pTriggerJogCommand) 

Start a triggered jog command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, TriggerJogCommand 
*pTriggerJogCommand) 

Start triggered jog commands for multiple 
axes that are currently executing position 
commands. More... 

WMX3APIFUNC StartPosToJog (JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered jog command for an 


axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToJog (unsigned int 
numCommands, JogCommand 
*pJogCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered jog commands for multiple 
axes that are currently executing position 
commands. The trigger conditions can 
have multiple trigger events. More...
-----------------------------------------------------------------------------------
298. Instruction: Start a triggered torque command for an axis that is currently executing a position command. The trigger condition can have multiple trigger events.
A: GetHomeData()
B: UpdateStartPosToTrq_TriggerEvents(pTrqCmd, pTrigEvents)
C: StartPosToJog_TriggerEvents(pJogCommand, pTriggerEvents)
D: StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
298. Model's answer: D
298. Correct answer: D
298. Result: Correct



Processing Question 299:
299. Context:
 WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
-----------------------------------------------------------------------------------
299. Instruction: Start triggered torque commands for multiple axes that are currently executing position commands. The trigger conditions can have multiple trigger events.
A: GetOutputData(buff, buffSize, dataSize)
B: UpdateTrqTrigEvent(numCommands, trqCommands, triggerEvents)
C: StartPosToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)
D: StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
299. Model's answer: C
299. Correct answer: C
299. Result: Correct



Processing Question 300:
300. Context:
 WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. The trigger 
conditions can have multiple trigger 
events. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. More... 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command in
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand) 


Start triggered torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed) 

Start a torque command and set the 
maximum motor speed. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More...
-----------------------------------------------------------------------------------
300. Instruction: Start a triggered torque command for an axis that is currently executing a velocity command.
A: StartVelToTrqWithOverride(pOverrideTriggerTrq)
B: SetFlightRecorderParam(axis, pParam)
C: StartTrq(pTrqCommand)
D: StartVelToTrq(pTriggerTrqCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
300. Model's answer: D
300. Correct answer: D
300. Result: Correct



Processing Question 301:
301. Context:
 WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. The trigger 
conditions can have multiple trigger 
events. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. More... 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command in
--------------------------------------------
See also 

Command Mode 

◆ 
StartVelToTrq() [2/4] 



WMX3APIFUNC 
StartVelToTrq ( unsigned int numCommands, 
WMX3APIFUNC 
StartVelToTrq ( unsigned int numCommands, 
TriggerTrqCommand pTriggerTrqCommand 
) 
Start triggered torque commands for multiple axes that are currently executing 

velocity commands. 
Parameters 
[in] 
numCommands The number of torque 
commands. Each 
command controls a 
single axis. 
[in] 
pTriggerTrqCommand A pointer to an array of 
objects of the 
TriggerTrqCommand 
class that contain the 
parameters of the torque 
commands. The number 
of elements in the array 
must equal 
numCommands. 
Remarks 

This function executes the StartVelToTrq API function for multiple axes. 

◆StartVelToTrq() [3/4]
WMX3APIFUNC 
StartVelToTrq ( TrqCommand * pTrqCommand, 
TriggerEvents * pTriggerEvents 
) 
Start a triggered torque command for an axis that is currently executing a velocity 

command. The trigger condition can have multiple trigger events.
--------------------------------------------
TrqCommand *pTrqCommand) 

Start torque commands for multiple axes. 

More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TriggerTrqCommand *pTrqCommand) 


Start triggered torque commands for 
multiple axes. More... 

WMX3APIFUNC StartTrq (unsigned int numCommands, 
TrqCommand *pTrqCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered torque commands with 
multiple trigger events for multiple axes. 
More... 

WMX3APIFUNC StartTrq (TrqCommand *pTrqCommand, 
double maxMotorSpeed) 

Start a torque command and set the 
maximum motor speed. More... 

WMX3APIFUNC StartTrq (TriggerTrqCommand 
*pTrqCommand, double maxMotorSpeed) 

Start a triggered torque command and 
set the maximum motor speed. More...
-----------------------------------------------------------------------------------
301. Instruction: Start triggered torque commands for multiple axes that are currently executing velocity commands.
A: StartVelToTrq(numCommands, triggerTorqueCommand)
B: StartVelToTrq(numCommands, pTriggerTrqCommand)
C: GetSyncParam(axis)
D: StartVelToTrq(pTriggerTrqCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
301. Model's answer: B
301. Correct answer: B
301. Result: Correct



Processing Question 302:
302. Context:
 WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
More... 

WMX3APIFUNC StartPosToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a position 
command. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 


multiple axes that are currently executing 
position commands. More... 

WMX3APIFUNC StartPosToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a position 
command. The trigger condition can 
have multiple trigger events. More... 

WMX3APIFUNC StartPosToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
position commands. The trigger 
conditions can have multiple trigger 
events. More...
--------------------------------------------
WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, TriggerPosCommand 
*pTriggerPosCommand) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
More... 


WMX3APIFUNC StartTrqToPos (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
-----------------------------------------------------------------------------------
302. Instruction: Start a triggered torque command for an axis that is currently executing a velocity command. The trigger condition can have multiple trigger events.
A: Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)
B: StartVelToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)
C: SetTrqCmdAndTriggerEvents(pTrqCmd, pEvents)
D: StartVelToMov_TriggerEvents(pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
302. Model's answer: B
302. Correct answer: B
302. Result: Correct



Processing Question 303:
303. Context:
 WMX3APIFUNC StartTrqToMov (PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start a relative triggered position 
command for an axis that is currently 
executing a torque command. The 
trigger condition can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing torque commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartJog (JogCommand 


*pJogCommand) 

Start a jog command. More...
--------------------------------------------
WMX3APIFUNC StartVelToPos (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start absolute triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 


trigger events. More... 

WMX3APIFUNC StartVelToMov (unsigned int 
numCommands, PosCommand 
*pPosCommand, TriggerEvents 
*pTriggerEvents) 
Start relative triggered position 
commands for multiple axes that are 
currently executing velocity commands. 
The trigger conditions can have multiple 
trigger events. More... 

WMX3APIFUNC StartTrqToPos (TriggerPosCommand 
*pTriggerPosCommand) 

Start an absolute triggered position 
command for an axis that is currently 
executing a torque command. More... 

WMX3APIFUNC StartTrqToMov (TriggerPosCommand 
*pTriggerPosCommand) 

Start a relative triggered position 
command for an axis that is currently 
executing a torque command. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (TriggerTrqCommand 
*pTriggerTrqCommand) 

Start a triggered torque command for an 
axis that is currently executing a velocity 
command. More... 

WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TriggerTrqCommand 
*pTriggerTrqCommand) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. More... 

WMX3APIFUNC StartVelToTrq (TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command for an 
axis that is currently executing a velocity 
command. The trigger condition can 
have multiple trigger events. More...
--------------------------------------------
WMX3APIFUNC StartVelToTrq (unsigned int 
numCommands, TrqCommand 
*pTrqCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered torque commands for 
multiple axes that are currently executing 
velocity commands. The trigger 
conditions can have multiple trigger 
events. More... 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, Trigger *pTrigger) 
Start a triggered torque command in 
which the torque is changed over time 
for an axis that is currently executing a 
velocity command. More... 
StartVelToRampTimeTrq (unsigned int 
numCommands, 
TriggerRampTimeTrqCommand 
*pTriggerRampTimeTrqCommand) 
Start triggered torque commands in 
which the torque is changed over time 
for multiple axes that are currently 
executing velocity commands. More... 
StartVelToRampTimeTrq (TrqCommand 
*pTrqCommand, unsigned int 
rampCycleTime, TriggerEvents 
*pTriggerEvents) 
Start a triggered torque command in
-----------------------------------------------------------------------------------
303. Instruction: Start triggered torque commands for multiple axes that are currently executing velocity commands. The trigger conditions can have multiple trigger events.
A: StartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)
B: AdjustStartVelToTrq_TriggerEvents(numCommands, pTrqCommand, pTriggerEvents)
C: StartMovToJog(pPosToJogCommand)
D: StartVelToPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
303. Model's answer: A
303. Correct answer: A
303. Result: Correct



Processing Question 304:
304. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
304. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid()
B: IsDeviceValidCheck()
C: GetMasterInfo()
D: StartVelToPos(pTriggerPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
304. Model's answer: A
304. Correct answer: A
304. Result: Correct



Processing Question 305:
305. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
-----------------------------------------------------------------------------------
305. Instruction: Set system parameter settings for all axes.
A: GetDefaultParam(pParam)
B: UpdateParam(pUpdatedParam)
C: ApiLogToString(pLogData, logDataSize)
D: SetParam(pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
305. Model's answer: D
305. Correct answer: D
305. Result: Correct



Processing Question 306:
306. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
-----------------------------------------------------------------------------------
306. Instruction: Get system parameter settings for all axes.
A: FetchParameter()
B: GetParam()
C: StartRampTimeTrq(pTrqCommand, rampCycleTime)
D: GetSyncParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
306. Model's answer: B
306. Correct answer: B
306. Result: Correct



Processing Question 307:
307. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisParam(AxisPara 
m *pParam, AxisParam 
*pParamError = NULL); 
Python 
def 
SetAxisParam(pParam) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AxisParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisParam(AxisPara 
m *pParam); 
Python def GetAxisParam() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AxisParam 
param 
Remarks 
C++ 
WMX3APIFUNC 
SetAxisParam(int axis, 
AxisParam *pParam,
--------------------------------------------
◆SetParam() [2/2]
WMX3APIFUNC 
SetParam ( 
) 
pParamError = NULL
int 
axis, 
SystemParam * 
SystemParam * 
Set system parameter settings for a single axis. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 


settings for every axis, 
only the parameters of 
the specified axis will be 
applied. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. Only the 
parameter values 
corresponding to the 
specified axis will be 
modified this way. 
Remarks
-----------------------------------------------------------------------------------
307. Instruction: Set system parameter settings for a single axis.
A: GetParam_Axis(axis)
B: SetParam_Axis(axis, pParam)
C: SetParam_Axis(axis_index, param_value)
D: SetHomeParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
307. Model's answer: B
307. Correct answer: B
307. Result: Correct



Processing Question 308:
308. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
-----------------------------------------------------------------------------------
308. Instruction: Get system parameter settings for a single axis.
A: StartPVT(AdvMotion_PVTCommand pPVTCommand)
B: GetSyncParam(axis)
C: GetParam_Axis(axis)
D: AccessAxisParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
308. Model's answer: C
308. Correct answer: C
308. Result: Correct



Processing Question 309:
309. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
◆GetAxisParam() [1/2]

pParam ) pParam ) 
WMX3APIFU 
NC 
GetAxisPara 
m ( 
AxisParam * 
Get axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetAxisParam() [2/2]
WMX3APIFUNC 
SetAxisParam ( int axis, 
AxisParam * pParam, 
AxisParam * pParamError = NULL) 
Set axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 


the AxisParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 
settings for every axis, 
only the parameters of 
the specified axis will be 
applied.
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL)
-----------------------------------------------------------------------------------
309. Instruction: Set axis parameters for all axes.
A: SetParam(pParam)
B: SetAxisParam(pParam)
C: SetPositiveTrqLimit(axis, torque)
D: SetParamAxis(pAxisParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
309. Model's answer: B
309. Correct answer: B
309. Result: Correct



Processing Question 310:
310. Context:
 Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
◆GetAxisParam() [1/2]

pParam ) pParam ) 
WMX3APIFU 
NC 
GetAxisPara 
m ( 
AxisParam * 
Get axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetAxisParam() [2/2]
WMX3APIFUNC 
SetAxisParam ( int axis, 
AxisParam * pParam, 
AxisParam * pParamError = NULL) 
Set axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 


the AxisParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 
settings for every axis, 
only the parameters of 
the specified axis will be 
applied.
-----------------------------------------------------------------------------------
310. Instruction: Get axis parameters for all axes.
A: GetAxisParameters()
B: GetVersion()
C: GetAxisParam()
D: GetDefaultAxisParam()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
310. Model's answer: C
310. Correct answer: C
310. Result: Correct



Processing Question 311:
311. Context:
 ◆SetMotionParam() 

WMX3APIFUNC 
SetMotionParam 
( int axis, WMX3APIFUNC 
SetMotionParam 
( int axis, 
MotionParam * pParam, 
MotionParam * pParamError = NULL) 
Set motion parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
motion parameters. 
[in] 
pParam A pointer to an object of 
the MotionParam class 
that contains the motion 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
MotionParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetAlarmParam()
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
◆SetAlarmParam() 

WMX3APIFUNC 
SetAlarmParam ( int axis, 
WMX3APIFUNC 
SetAlarmParam ( int axis, 
AlarmParam * pParam, 
AlarmParam * pParamError = NULL) 
Set alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the alarm 
parameters. 
[in] 
pParam A pointer to an object of 
the AlarmParam class 
that contains the alarm 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AlarmParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetSyncParam()
--------------------------------------------
◆GetAxisParam() [1/2]

pParam ) pParam ) 
WMX3APIFU 
NC 
GetAxisPara 
m ( 
AxisParam * 
Get axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetAxisParam() [2/2]
WMX3APIFUNC 
SetAxisParam ( int axis, 
AxisParam * pParam, 
AxisParam * pParamError = NULL) 
Set axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 


the AxisParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 
settings for every axis, 
only the parameters of 
the specified axis will be 
applied.
-----------------------------------------------------------------------------------
311. Instruction: Set axis parameters for a single axis.
A: SetAxisParam_Axis(axis, pParam)
B: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
C: SetAlarmParam(axis, pParam)
D: SetAxisParameter(axis, parameter)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
311. Model's answer: A
311. Correct answer: A
311. Result: Correct



Processing Question 312:
312. Context:
 Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
},
    {
        "No": 326,
        "FunctionC++": "WMX3APIFUNC GetParam(int axis, SystemParam *pParam)",
        "FunctionPython": "def GetParam_Axis(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for a single axis."
    },
    {
        "No": 327,
        "FunctionC++": "WMX3APIFUNC SetAxisParam(AxisParam *pParam, AxisParam *pParamError=NULL)",
        "FunctionPython": "def SetAxisParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for all axes. "
--------------------------------------------
◆GetAxisParam() [1/2]

pParam ) pParam ) 
WMX3APIFU 
NC 
GetAxisPara 
m ( 
AxisParam * 
Get axis parameters for all axes. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. 
See also 
Parameters -Overview 

◆SetAxisParam() [2/2]
WMX3APIFUNC 
SetAxisParam ( int axis, 
AxisParam * pParam, 
AxisParam * pParamError = NULL) 
Set axis parameters for a single axis. 
Axis parameters are parameters that are defined in the AxisParam class. 

Parameters 
[in] 
axis The axis to set the 
parameters. 
[in] 
pParam A pointer to an object of 


the AxisParam class 
that contains the 
parameter settings to 
set. Although this object 
contains parameter 
settings for every axis, 
only the parameters of 
the specified axis will be 
applied.
-----------------------------------------------------------------------------------
312. Instruction: Get axis parameters for a single axis.
A: GetAxisParam_Axis(axis)
B: SetParam_Axis(axis, pParam)
C: StartVel(numCommands, pVelCommand)
D: GetAxisInfo_Axis(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
312. Model's answer: A
312. Correct answer: A
312. Result: Correct



Processing Question 313:
313. Context:
 *pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More... 

WMX3APIFUNC SetSingleTurn (int axis, bool enable, 
unsigned int encoderCount) 

Set the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC SetMovingAverageProfileTime (int axis, 
double milliseconds) 

Set the moving average profile time 
parameter for an axis. More... 

WMX3APIFUNC SetAxisUnit (int axis, double unit) 
Set the axis unit parameter for an axis. 
More... 
WMX3APIFUNC SetVelocityFeedforwardGain (int axis, 
double gain) 
Set the velocity feedforward gain 
parameter for an axis. More... 
WMX3APIFUNC SetAxisPolarity (int axis, char polarity) 
Set the axis polarity for an axis. More... 

WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More...
--------------------------------------------
Gear Ratio 

The gear ratio of an axis is set using the Gear Ratio Numerator and Gear Ratio 
Denominator parameters. The gear ratio applies a multiplier between the unit of 
position inside WMX3 and the pulse unit of the commands that are sent to the servo 
and the feedbacks that are received from the servo. 

The unit of position inside WMX3 is called the user unit, and is discussed in Axis 
Position and User Units. The relation between the user unit and the pulse is 
expressed with the following equation. 

Pulse = User Unit * Gear Ratio 

For example, if the Gear Ratio is 2, each user unit equals 2 pulses. In this case, a 
motion from position 0 to position 10000 in WMX3 causes the command position that is 
sent to the servo to change by +20000. Similarly, a velocity command of 10000 in 
WMX3 causes the command velocity that is sent to the servo to be 20000 pulses per 
second.
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
parameters. 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. Although this 
object contains 
parameter settings for 
every axis, only the 
parameter values 
corresponding to the 
specified axis will be 
modified by this function. 
See also 
Parameters -Overview 

◆SetGearRatio() 

WMX3APIFUNC 
SetGearRatio ( 
WMX3APIFUNC 
SetGearRatio ( 
int 
double 
axis, 
numerator, 
double denominator 
) 
Set the gear ratio of the axis. 
This function sets the Gear Ratio Numerator and Gear Ratio Denominator 

parameters. 
Parameters 
[in] 
axis The axis to set the gear 
ratio. 
[in] 
[in] 
numerator 
denominator 
The numerator of the 
gear ratio. 
The denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆SetSingleTurn()
--------------------------------------------
Function 
AxisParam 
*pParamError = NULL); 
Python 
def 
SetAxisParam_Axis(axis, 
pParam) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AxisParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisParam(int axis, 
AxisParam *pParam); 
Python 
def 
GetAxisParam_Axis(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AxisParam 
param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetGearRatio(int axis, 
double numerator, 
double denominator); 
Python 
def SetGearRatio(axis, 
numerator, denominator) 
Returns 
Type int 
Value error code
-----------------------------------------------------------------------------------
313. Instruction: Set the gear ratio of the axis.
A: SetServoOn(axis, newStatus)
B: SetGearRatio(axis, numerator, denominator)
C: SetGearRatio(axisIndex, newNumerator, newDenominator)
D: GetOutputData(buff, buffSize, dataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
313. Model's answer: B
313. Correct answer: B
313. Result: Correct



Processing Question 314:
314. Context:
 WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
--------------------------------------------
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
WMX3APIFUNC 
SetSingleTurn(int axis, 
bool enable, unsigned 
int encoderCount); 
def SetSingleTurn(axis, 
enable. encoderCount) 
int 
error code 
WMX3APIFUNC 
SetMovingAverageProfil 
eTime(int axis, double 
milliseconds); 
def 
SetMovingAverageProfile 
Time(axis, milliseconds) 
int 
error code 
WMX3APIFUNC 
SetAxisUnit(int axis, 
double unit); 
def SetAxisUnit(axis, unit) 
int 
error code 
WMX3APIFUNC 
SetVelocityFeedforward 
Gain(int axis, double 
gain);
--------------------------------------------
Configuring an axis as a Single Turn Mode axis will have the following effects: 


If the axis position would increase beyond Single Turn Encoder Count, the 
position loops back to 0. This includes both the Command Position and 
Feedback Position. 
If the axis position would decrease beyond 0, the position loops back to Single 
Turn Encoder Count 
If the Single Turn Reduce To Half Turn parameter is set to TRUE, the travel 
direction of absolute position commands between 0 and Single Turn Encoder 
Count will be adjusted so that the travel distance is equal to or less than half of 
the Single Turn Encoder Count. 
The following code sets an axis to single turn mode, and executes some position 
commands. 

Motion::PosCommand pos; 

//Set single turn modeerr = wmxlib_cm.config->SetSingleTurn(0, true, 5000);
if (err != ErrorCode::None) {

wmxlib_cm.ErrorToString(err, errString, sizeof(errString));
printf("Failed to set single turn. Error=%d (%s)\n", err, errString);
goto exit;

}
--------------------------------------------
◆SetSingleTurn() 

WMX3APIFUNC 
SetSingleTurn ( 
WMX3APIFUNC 
SetSingleTurn ( 
int 
bool 
axis, 
enable, 
unsigned int encoderCount 
) 
Set the single turn mode and single turn encoder count of an axis. 
This function sets the Single Turn Mode and Single Turn Encoder Count 

parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[in] 
enable If FALSE, single turn 
mode will be disabled for 
the axis. If TRUE, single 
turn mode will be 
enabled for the axis. 
[in] 
encoderCount If single turn mode is 
enabled, the number of 
encoder counts (pulses) 
in one turn. 

See also 

Tutorial 4-4: Single turn 

◆SetMovingAverageProfileTime() 

WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis.
-----------------------------------------------------------------------------------
314. Instruction: Set the single turn mode and single turn encoder count of an axis.
A: StartMovToJog(pPosToJogCommand)
B: SetAbsoluteEncoderMode(axis, enable)
C: SetSingleTurn(axis, enable. encoderCount)
D: SetSingleTurn(axis, enable, encoderCount)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
314. Model's answer: D
314. Correct answer: C
314. Result: Wrong



Processing Question 315:
315. Context:
 WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis. 

This function sets the Global Moving Average Profile Time Milliseconds 
parameter. This parameter will have no effect unless the Enable Global Moving 
Average Profile Time Milliseconds parameter is set to TRUE for the axis (using a 
function such as SetParam or SetMotionParam). This parameter affects motion 
using the TrapezoidalMAT profile type. 

Parameters 
[in] 
axis The axis to set the 
moving average profile 
time. 
[in] 
milliseconds The averaging time of 
the moving average filter 
in milliseconds. 

◆SetAxisUnit() 

WMX3APIFUNC 
SetAxisUnit ( 
) 
WMX3APIFUNC 
SetAxisUnit ( 
) 
int 
axis, 
double unit 
Set the axis unit parameter for an axis. 
This function sets the Axis Unit parameter. 
Parameters 
[in] 
axis The axis to set the axis 
unit. 
[in] 
unit The specified axis unit.
--------------------------------------------
◆SetSingleTurn() 

WMX3APIFUNC 
SetSingleTurn ( 
WMX3APIFUNC 
SetSingleTurn ( 
int 
bool 
axis, 
enable, 
unsigned int encoderCount 
) 
Set the single turn mode and single turn encoder count of an axis. 
This function sets the Single Turn Mode and Single Turn Encoder Count 

parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[in] 
enable If FALSE, single turn 
mode will be disabled for 
the axis. If TRUE, single 
turn mode will be 
enabled for the axis. 
[in] 
encoderCount If single turn mode is 
enabled, the number of 
encoder counts (pulses) 
in one turn. 

See also 

Tutorial 4-4: Single turn 

◆SetMovingAverageProfileTime() 

WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis.
--------------------------------------------
parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[out] 
pEnable A pointer to an bool 
variable that will contain 
FALSE if single turn 
mode is disabled for the 
axis and TRUE if single 
turn mode is enabled for 
the axis. 
[out] 
pEncoderCount A pointer to an unsigned 
int variable that will 
contain the number of 
encoder counts that 
comprise one turn if 
single turn mode is 
enabled. 

See also 

Tutorial 4-4: Single turn 

◆ 
GetMovingAverageProfileTime() 

GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double * pMilliseconds 
Get the moving average profile time parameter of an axis. 

This function gets the Global Moving Average Profile Time Milliseconds 
parameter.
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
-----------------------------------------------------------------------------------
315. Instruction: Set the moving average profile time parameter for an axis.
A: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
B: SimulatePos(pSimulatePosCommand)
C: SetRealTimeMovingAverageProfile(axis, milliseconds)
D: SetMovingAverageProfileTime(axis, milliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
315. Model's answer: D
315. Correct answer: D
315. Result: Correct



Processing Question 316:
316. Context:
 Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More... 

WMX3APIFUNC GetVelocityFeedforwardGain (int axis, 
double *pGain) 

Get the velocity feedforward gain of an 
axis. More... 

WMX3APIFUNC GetAxisPolarity (int axis, char *pPolarity) 
Get the axis polarity of an axis. More... 

WMX3APIFUNC GetAbsoluteEncoderMode (int axis, bool 
*pEnable) 


Get the absolute encoder mode of an 
axis. More... 

WMX3APIFUNC GetAbsoluteEncoderHomeOffset (int 
axis, double *pOffset) 

Get the absolute encoder home offset of 
an axis. More... 

WMX3APIFUNC GetEncoderRange (int axis, bool 
*pEnable, int *pEncoderRangeLow, int 
*pEncoderRangeHigh) 
Get the encoder range mode and 
encoder range of an axis. More... 

WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More...
--------------------------------------------
*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More... 

WMX3APIFUNC SetSingleTurn (int axis, bool enable, 
unsigned int encoderCount) 

Set the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC SetMovingAverageProfileTime (int axis, 
double milliseconds) 

Set the moving average profile time 
parameter for an axis. More... 

WMX3APIFUNC SetAxisUnit (int axis, double unit) 
Set the axis unit parameter for an axis. 
More... 
WMX3APIFUNC SetVelocityFeedforwardGain (int axis, 
double gain) 
Set the velocity feedforward gain 
parameter for an axis. More... 
WMX3APIFUNC SetAxisPolarity (int axis, char polarity) 
Set the axis polarity for an axis. More... 

WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More...
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
-----------------------------------------------------------------------------------
316. Instruction: Set the axis unit parameter for an axis.
A: GetSyncParam(axis)
B: SetAxisUnit(axis, unit)
C: SetAxisMeasureUnit(axis, unit)
D: GetAxisPolatity(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
316. Model's answer: B
316. Correct answer: B
316. Result: Correct



Processing Question 317:
317. Context:
 SetVelocityFeedforwardGain(int axis, 
double gain) 
AxisParam.velocityFeedforwardG 
ain 
1 
SetAxisPolarity(int axis, char polarity) AxisParam.axisPolarity 1 
SetAbsoluteEncoderMode(int axis, bool AxisParam.absoluteEncoderMode 1
--------------------------------------------
Python 
def 
SetVelocityFeedforwardG 
ain(axis, gain) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisPolarity(int axis, 
char polarity); 
Python 
def SetAxisPolarity(axis, 
polarity) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteEncoderMo 
de(int axis, bool enable); 
Python 
def 
SetAbsoluteEncoderMode 
(axis, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteEncoderHo 
meOffset(int axis, 
double offset); 
Python 
def 
SetAbsoluteEncoderHome 
Offset(axis, offset) 
Returns 
Type int
--------------------------------------------
◆SetVelocityFeedforwardGain() 
WMX3APIFUNC 
SetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double gain 
Set the velocity feedforward gain parameter for an axis. 
This function sets the Velocity Feedforward Gain parameter. 

Parameters 
[in] 
axis The axis to set velocity 
feedforward gain. 
[in] 
gain The specified velocity 
feedforward gain. 

◆SetAxisPolarity() 

WMX3APIFUNC 
SetAxisPolarity ( 
) 
WMX3APIFUNC 
SetAxisPolarity ( 
) 
int 
axis, 
char polarity 
Set the axis polarity for an axis. 
This function sets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to set the axis 
polarity. 
[in] 
polarity If set to 1, the polarity is 
normal; if set to -1, the 
axis polarity will be 
reversed (the physical 
axis will move in the 
opposite direction). 

◆SetAbsoluteEncoderMode()
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetFeedbackParam(int 
axis, FeedbackParam 
*pParam, 
FeedbackParam 
*pParamError = NULL); 
Python 
def 
SetFeedbackParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetHomeParam(int axis, 
HomeParam *pParam, 
HomeParam 
*pParamError = NULL); 
Python 
def SetHomeParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m param error 
Remarks 
C++ 
WMX3APIFUNC 
SetLimitParam(int axis, 
LimitParam *pParam,
-----------------------------------------------------------------------------------
317. Instruction: Set the velocity feedforward gain parameter for an axis.
A: SetVelocityFeedforwardGain(axis_number, new_gain)
B: SetVelocityFeedforwardGain(axis, gain)
C: GetParam()
D: SetFeedbackParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
317. Model's answer: A
317. Correct answer: B
317. Result: Wrong



Processing Question 318:
318. Context:
 Parameters 
[in] 
axis The axis to get the 
velocity feedforward 
gain. 
[out] 
pGain A pointer to a double 
variable that will contain 
the velocity feedforward 
gain. 

◆GetAxisPolarity() 

WMX3APIFUNC 
GetAxisPolarity ( 
) 
WMX3APIFUNC 
GetAxisPolarity ( 
) 
int 
axis, 
char * pPolarity 
Get the axis polarity of an axis. 

This function gets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to get the axis 
polarity. 
[out] 
pPolarity A pointer to a char 
variable that will contain 
the axis polarity. 

◆ 
GetAbsoluteEncoderMode() 

WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool * pEnable 
Get the absolute encoder mode of an axis. 
This function gets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder mode. 
[out] 
pEnable A pointer to a bool 
variable that will contain 
the absolute encoder 
mode. 
See also 

Tutorial 4-5: Absolute encoders
--------------------------------------------
◆SetVelocityFeedforwardGain() 
WMX3APIFUNC 
SetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double gain 
Set the velocity feedforward gain parameter for an axis. 
This function sets the Velocity Feedforward Gain parameter. 

Parameters 
[in] 
axis The axis to set velocity 
feedforward gain. 
[in] 
gain The specified velocity 
feedforward gain. 

◆SetAxisPolarity() 

WMX3APIFUNC 
SetAxisPolarity ( 
) 
WMX3APIFUNC 
SetAxisPolarity ( 
) 
int 
axis, 
char polarity 
Set the axis polarity for an axis. 
This function sets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to set the axis 
polarity. 
[in] 
polarity If set to 1, the polarity is 
normal; if set to -1, the 
axis polarity will be 
reversed (the physical 
axis will move in the 
opposite direction). 

◆SetAbsoluteEncoderMode()
--------------------------------------------
Python 
Type Type 
char *pPolarity); 
def GetAxisPolatity(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -polarity 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetAbsoluteEncoderMo 
de(int axis, bool 
*pEnable); 
def 
GetAbsoluteEncoderMode 
(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : bool -enable 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAbsoluteEncoderHo 
meOffset(int axis, 
double *pOffset); 
Python 
Type 
def 
GetAbsoluteEncoderHom 
eOffset(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : double -offset 
Remarks
--------------------------------------------
},
    {
        "No": 336,
        "FunctionC++": "WMX3APIFUNC SetAxisPolarity(int axis, char polarity)",
        "FunctionPython": "def SetAxisPolarity(axis, polarity)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the axis polarity for an axis."
    },
    {
        "No": 337,
        "FunctionC++": "WMX3APIFUNC SetAbsoluteEncoderMode(int axis, bool enable)",
        "FunctionPython": "def SetAbsoluteEncoderMode(axis, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set the absolute encoder mode for an axis. "
-----------------------------------------------------------------------------------
318. Instruction: Set the axis polarity for an axis.
A: SetSyncParam(axis, pParam)
B: StartPos_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
C: SetAxisDirection(axis, direction)
D: SetAxisPolarity(axis, polarity)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
318. Model's answer: D
318. Correct answer: D
318. Result: Correct



Processing Question 319:
319. Context:
 WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
--------------------------------------------
◆SetAbsoluteEncoderMode() 

WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool enable 
Set the absolute encoder mode for an axis. 
This function sets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder mode. 
[in] 
enable If FALSE, absolute 
encoder mode will be 
disabled for the axis. If 
TRUE, absolute encoder 
mode will be enabled for 
the axis. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double offset 
Set the absolute encoder home offset for an axis. 
This function sets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder home 
offset. 
[in] 
offset The specified absolute 
encoder home offset. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetEncoderRange()
--------------------------------------------
Python 
Type Type 
char *pPolarity); 
def GetAxisPolatity(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -polarity 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetAbsoluteEncoderMo 
de(int axis, bool 
*pEnable); 
def 
GetAbsoluteEncoderMode 
(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : bool -enable 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAbsoluteEncoderHo 
meOffset(int axis, 
double *pOffset); 
Python 
Type 
def 
GetAbsoluteEncoderHom 
eOffset(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : double -offset 
Remarks
--------------------------------------------
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
WMX3APIFUNC 
SetSingleTurn(int axis, 
bool enable, unsigned 
int encoderCount); 
def SetSingleTurn(axis, 
enable. encoderCount) 
int 
error code 
WMX3APIFUNC 
SetMovingAverageProfil 
eTime(int axis, double 
milliseconds); 
def 
SetMovingAverageProfile 
Time(axis, milliseconds) 
int 
error code 
WMX3APIFUNC 
SetAxisUnit(int axis, 
double unit); 
def SetAxisUnit(axis, unit) 
int 
error code 
WMX3APIFUNC 
SetVelocityFeedforward 
Gain(int axis, double 
gain);
-----------------------------------------------------------------------------------
319. Instruction: Set the absolute encoder mode for an axis.
A: SetAbsoluteEncoderMode(axis, enable)
B: Wait(axis)
C: GetAbsoluteEncoderHomeOffset(axis)
D: SetAbsoluteEncoderEnable(axis_number, is_enabled)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
319. Model's answer: A
319. Correct answer: A
319. Result: Correct



Processing Question 320:
320. Context:
 enable) 
SetAbsoluteEncoderHomeOffset(int 
axis, double offset) 
AxisParam.absoluteEncoderHome 
Offset 
1 
SetFeedbackParam(int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError) 
FeedbackParam 1 
SetHomeParam(int axis, HomeParam 
*pParam, HomeParam *pParamError) 
HomeParam 1 
SetLimitParam(int axis, LimitParam 
*pParam, LimitParam *pParamError) 
LimitParam 1 
SetMotionParam(int axis, MotionParam 
*pParam, MotionParam *pParamError) 
MotionParam 1 
SetAlarmParam(int axis, AlarmParam 
*pParam, AlarmParam *pParamError) 
AlarmParam 1 
SetSyncParam(int axis, SyncParam 
*pParam, SyncParam *pParamError) 
SyncParam 1 
SetFlightRecorderParam(FlightRecorder 
Param *pParam, FlightRecorderParam 
*pParamError) 
FlightRecorderParam maxAxes 
SetFlightRecorderPath(char *pPath) Flight Recorder File Path -
SetFlightRecorderPath(wchar_t *pPath) Flight Recorder File Path -
SetEmergencyStopParam(EmergencySt 
opParam *pParam, 
EmergencyStopParam *pParamError) 
EmergencyStopParam maxAxes
--------------------------------------------
◆SetAbsoluteEncoderMode() 

WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool enable 
Set the absolute encoder mode for an axis. 
This function sets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder mode. 
[in] 
enable If FALSE, absolute 
encoder mode will be 
disabled for the axis. If 
TRUE, absolute encoder 
mode will be enabled for 
the axis. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double offset 
Set the absolute encoder home offset for an axis. 
This function sets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder home 
offset. 
[in] 
offset The specified absolute 
encoder home offset. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetEncoderRange()
--------------------------------------------
WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
--------------------------------------------
There are two absolute encoder parameters: Absolute Encoder Mode and Absolute 
Encoder Home Offset. The Absolute Encoder Mode parameter determines whether 
absolute encoder mode is enabled or disabled for an axis. This parameter should be set 
to TRUE. 

The Absolute Encoder Home Offset parameter stores the home offset of for the 
absolute encoder. While the Absolute Encoder Mode parameter is set to TRUE, this 
parameter determines the home position of the axis. In addition, while the Absolute 
Encoder Mode parameter is set to TRUE, this parameter is updated with the current 
home offset whenever a homing operation is completed. By storing this parameter 
when the engine is closed and reapplying it when the engine is started again, the home 
position can be preserved while the machine is powered off. 

Important
-----------------------------------------------------------------------------------
320. Instruction: Set the absolute encoder home offset for an axis.
A: GetAbsoluteEncoderMode(axis)
B: TriggerFlightRecorder()
C: SetAbsoluteEncoderHomeOffset(axis, offset)
D: SetAbsoluteEncoderHomeOffsetForAxis(axis_number, new_offset_value)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
320. Model's answer: C
320. Correct answer: C
320. Result: Correct



Processing Question 321:
321. Context:
 *pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More... 

WMX3APIFUNC SetSingleTurn (int axis, bool enable, 
unsigned int encoderCount) 

Set the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC SetMovingAverageProfileTime (int axis, 
double milliseconds) 

Set the moving average profile time 
parameter for an axis. More... 

WMX3APIFUNC SetAxisUnit (int axis, double unit) 
Set the axis unit parameter for an axis. 
More... 
WMX3APIFUNC SetVelocityFeedforwardGain (int axis, 
double gain) 
Set the velocity feedforward gain 
parameter for an axis. More... 
WMX3APIFUNC SetAxisPolarity (int axis, char polarity) 
Set the axis polarity for an axis. More... 

WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More...
--------------------------------------------
parameters. 
Parameters 
[in] 
axis The axis to get the gear 
ratio. 
[out] 
[out] 
pNumerator 
pDenominator 
A pointer to a double 
variable that will contain 
the numerator of the 
gear ratio. 
A pointer to a double 
variable that will contain 
the denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆GetSingleTurn() 

WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
Get the single turn mode and single turn encoder count of an axis. 
This function gets the Single Turn Mode and Single Turn Encoder Count
--------------------------------------------
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetGearRatio(int axis, 
double *pNumerator, 
double *pDenominator); 
Python def GetGearRatio(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double numerator 
2 : double denominator 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSingleTurn(int axis, 
bool *pEnable, unsigned 
int *pEncoderCount); 
Python def GetSingleTurn(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : bool -enable 
2 : int -encoder 
count 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMovingAverageProfil 
eTime(int axis, double 
*pMilliseconds); 
def
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
parameters. 
[out] 
pParam A pointer to an object of 
the AxisParam class 
that will contain the 
current parameter 
settings. Although this 
object contains 
parameter settings for 
every axis, only the 
parameter values 
corresponding to the 
specified axis will be 
modified by this function. 
See also 
Parameters -Overview 

◆SetGearRatio() 

WMX3APIFUNC 
SetGearRatio ( 
WMX3APIFUNC 
SetGearRatio ( 
int 
double 
axis, 
numerator, 
double denominator 
) 
Set the gear ratio of the axis. 
This function sets the Gear Ratio Numerator and Gear Ratio Denominator 

parameters. 
Parameters 
[in] 
axis The axis to set the gear 
ratio. 
[in] 
[in] 
numerator 
denominator 
The numerator of the 
gear ratio. 
The denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆SetSingleTurn()
-----------------------------------------------------------------------------------
321. Instruction: Get the gear ratio of the axis.
A: GetGearRatios(vehicle)
B: GetAlarmParam(axis)
C: GetGearRatio(axis)
D: SetSingleTurn(axis, enable. encoderCount)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
321. Model's answer: C
321. Correct answer: C
321. Result: Correct



Processing Question 322:
322. Context:
 double encoderPulsesPerRevolution = 1048576; 
double encoderUserUnitsPerRevolution = 10000; 

//Set the gear ratioerr = wmxlib_cm.config->SetGearRatio(0, encoderPulsesPerRevolution, encoderUserUnitsPerRevolution);
if (err != ErrorCode::None) {

wmxlib_cm.ErrorToString(err, errString, sizeof(errString));
printf("Failed to set gear ratio. Error=%d (%s)\n", err, errString);
goto exit;

} 

 

Tutorial 4-4: Single turn 

Some axes, such as rotary axes, may not have a linear range of movement, but rather 
can rotate in either direction indefinitely. The position command of such axes may 
become excessively large after rotating in one direction for an extended period. These 
axes should be configured as Single Turn Mode axes so that the position command 
wraps around to stay within a particular range of positions. 

Configuring an axis as a Single Turn Mode axis will have the following effects:
--------------------------------------------
parameters. 
Parameters 
[in] 
axis The axis to get the gear 
ratio. 
[out] 
[out] 
pNumerator 
pDenominator 
A pointer to a double 
variable that will contain 
the numerator of the 
gear ratio. 
A pointer to a double 
variable that will contain 
the denominator of the 
gear ratio. 
See also 
Tutorial 4-3: User units 

◆GetSingleTurn() 

WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
WMX3APIFUNC 
GetSingleTurn ( int axis, 
bool * pEnable, 
unsigned int * pEncoderCount 
) 
Get the single turn mode and single turn encoder count of an axis. 
This function gets the Single Turn Mode and Single Turn Encoder Count
--------------------------------------------
Configuring an axis as a Single Turn Mode axis will have the following effects: 


If the axis position would increase beyond Single Turn Encoder Count, the 
position loops back to 0. This includes both the Command Position and 
Feedback Position. 
If the axis position would decrease beyond 0, the position loops back to Single 
Turn Encoder Count 
If the Single Turn Reduce To Half Turn parameter is set to TRUE, the travel 
direction of absolute position commands between 0 and Single Turn Encoder 
Count will be adjusted so that the travel distance is equal to or less than half of 
the Single Turn Encoder Count. 
The following code sets an axis to single turn mode, and executes some position 
commands. 

Motion::PosCommand pos; 

//Set single turn modeerr = wmxlib_cm.config->SetSingleTurn(0, true, 5000);
if (err != ErrorCode::None) {

wmxlib_cm.ErrorToString(err, errString, sizeof(errString));
printf("Failed to set single turn. Error=%d (%s)\n", err, errString);
goto exit;

}
--------------------------------------------
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
WMX3APIFUNC 
SetSingleTurn(int axis, 
bool enable, unsigned 
int encoderCount); 
def SetSingleTurn(axis, 
enable. encoderCount) 
int 
error code 
WMX3APIFUNC 
SetMovingAverageProfil 
eTime(int axis, double 
milliseconds); 
def 
SetMovingAverageProfile 
Time(axis, milliseconds) 
int 
error code 
WMX3APIFUNC 
SetAxisUnit(int axis, 
double unit); 
def SetAxisUnit(axis, unit) 
int 
error code 
WMX3APIFUNC 
SetVelocityFeedforward 
Gain(int axis, double 
gain);
-----------------------------------------------------------------------------------
322. Instruction: Get the single turn mode and single turn encoder count of an axis.
A: StartCircularIntplPos_ThroughAndEnd(pCircularIntplCommand)
B: ReadAxisRotation()
C: GetSingleTurn(axis)
D: GetAxisUnit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
322. Model's answer: C
322. Correct answer: C
322. Result: Correct



Processing Question 323:
323. Context:
 Python GetMovingAverageProfile 
Time(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double milliseconds 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisUnit(int axis, 
double *pUnit); 
Python def GetAxisUnit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -unit 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetVelocityFeedforward 
Gain(int axis, double 
*pGain); 
Python 
def 
GetVelocityFeedforwardG 
ain(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -gain 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisPolarity(int axis,
--------------------------------------------
parameters. 
Parameters 
[in] 
axis The axis to set the single 
turn mode and encoder 
count. 
[out] 
pEnable A pointer to an bool 
variable that will contain 
FALSE if single turn 
mode is disabled for the 
axis and TRUE if single 
turn mode is enabled for 
the axis. 
[out] 
pEncoderCount A pointer to an unsigned 
int variable that will 
contain the number of 
encoder counts that 
comprise one turn if 
single turn mode is 
enabled. 

See also 

Tutorial 4-4: Single turn 

◆ 
GetMovingAverageProfileTime() 

GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
GetMovingAverageProfileTime() 
WMX3APIFUNC 
GetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double * pMilliseconds 
Get the moving average profile time parameter of an axis. 

This function gets the Global Moving Average Profile Time Milliseconds 
parameter.
--------------------------------------------
WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis. 

This function sets the Global Moving Average Profile Time Milliseconds 
parameter. This parameter will have no effect unless the Enable Global Moving 
Average Profile Time Milliseconds parameter is set to TRUE for the axis (using a 
function such as SetParam or SetMotionParam). This parameter affects motion 
using the TrapezoidalMAT profile type. 

Parameters 
[in] 
axis The axis to set the 
moving average profile 
time. 
[in] 
milliseconds The averaging time of 
the moving average filter 
in milliseconds. 

◆SetAxisUnit() 

WMX3APIFUNC 
SetAxisUnit ( 
) 
WMX3APIFUNC 
SetAxisUnit ( 
) 
int 
axis, 
double unit 
Set the axis unit parameter for an axis. 
This function sets the Axis Unit parameter. 
Parameters 
[in] 
axis The axis to set the axis 
unit. 
[in] 
unit The specified axis unit.
--------------------------------------------
This function gets the Global Moving Average Profile Time Milliseconds 
parameter. 

Parameters 
[in] 
axis The axis to get the 
moving average profile 
time. 
[out] 
pMilliseconds A pointer to a double 
variable that will contain 
the moving average 
profile time. 

◆GetAxisUnit() 

WMX3APIFUNC 
GetAxisUnit ( 
) 
WMX3APIFUNC 
GetAxisUnit ( 
) 
int 
axis, 
double * pUnit 
Get the axis unit parameter of an axis. 

This function gets the Axis Unit parameter. 

Parameters 
[in] 
axis The axis to get the axis 
unit. 
[out] 
pUnit A pointer to a double that 
will contain the axis unit. 

◆GetVelocityFeedforwardGain() 

WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double * pGain 
Get the velocity feedforward gain of an axis. 
This function gets the Velocity Feedforward Gain parameter.
-----------------------------------------------------------------------------------
323. Instruction: Get the moving average profile time parameter of an axis.
A: CalculateAverageProfileTime(axis, window_size)
B: GetMovingAverageProfileTime(axis)
C: Resume_AxisSel(pAxisSelection)
D: GetGearRatio(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
323. Model's answer: B
323. Correct answer: B
323. Result: Correct



Processing Question 324:
324. Context:
 Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More... 

WMX3APIFUNC GetVelocityFeedforwardGain (int axis, 
double *pGain) 

Get the velocity feedforward gain of an 
axis. More... 

WMX3APIFUNC GetAxisPolarity (int axis, char *pPolarity) 
Get the axis polarity of an axis. More... 

WMX3APIFUNC GetAbsoluteEncoderMode (int axis, bool 
*pEnable) 


Get the absolute encoder mode of an 
axis. More... 

WMX3APIFUNC GetAbsoluteEncoderHomeOffset (int 
axis, double *pOffset) 

Get the absolute encoder home offset of 
an axis. More... 

WMX3APIFUNC GetEncoderRange (int axis, bool 
*pEnable, int *pEncoderRangeLow, int 
*pEncoderRangeHigh) 
Get the encoder range mode and 
encoder range of an axis. More... 

WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More...
--------------------------------------------
WMX3APIFUNC 
SetMovingAverageP 
WMX3APIFUNC 
SetMovingAverageP 
rofileTime ( 
) 
int 
axis, 
double milliseconds 
Set the moving average profile time parameter for an axis. 

This function sets the Global Moving Average Profile Time Milliseconds 
parameter. This parameter will have no effect unless the Enable Global Moving 
Average Profile Time Milliseconds parameter is set to TRUE for the axis (using a 
function such as SetParam or SetMotionParam). This parameter affects motion 
using the TrapezoidalMAT profile type. 

Parameters 
[in] 
axis The axis to set the 
moving average profile 
time. 
[in] 
milliseconds The averaging time of 
the moving average filter 
in milliseconds. 

◆SetAxisUnit() 

WMX3APIFUNC 
SetAxisUnit ( 
) 
WMX3APIFUNC 
SetAxisUnit ( 
) 
int 
axis, 
double unit 
Set the axis unit parameter for an axis. 
This function sets the Axis Unit parameter. 
Parameters 
[in] 
axis The axis to set the axis 
unit. 
[in] 
unit The specified axis unit.
--------------------------------------------
This function gets the Global Moving Average Profile Time Milliseconds 
parameter. 

Parameters 
[in] 
axis The axis to get the 
moving average profile 
time. 
[out] 
pMilliseconds A pointer to a double 
variable that will contain 
the moving average 
profile time. 

◆GetAxisUnit() 

WMX3APIFUNC 
GetAxisUnit ( 
) 
WMX3APIFUNC 
GetAxisUnit ( 
) 
int 
axis, 
double * pUnit 
Get the axis unit parameter of an axis. 

This function gets the Axis Unit parameter. 

Parameters 
[in] 
axis The axis to get the axis 
unit. 
[out] 
pUnit A pointer to a double that 
will contain the axis unit. 

◆GetVelocityFeedforwardGain() 

WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double * pGain 
Get the velocity feedforward gain of an axis. 
This function gets the Velocity Feedforward Gain parameter.
--------------------------------------------
Python GetMovingAverageProfile 
Time(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double milliseconds 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisUnit(int axis, 
double *pUnit); 
Python def GetAxisUnit(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -unit 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetVelocityFeedforward 
Gain(int axis, double 
*pGain); 
Python 
def 
GetVelocityFeedforwardG 
ain(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -gain 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAxisPolarity(int axis,
-----------------------------------------------------------------------------------
324. Instruction: Get the axis unit parameter of an axis.
A: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
B: GetAxisPolatity(axis)
C: GetNormalizedAxis(axis)
D: GetAxisUnit(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
324. Model's answer: D
324. Correct answer: D
324. Result: Correct



Processing Question 325:
325. Context:
 Python 
def 
SetVelocityFeedforwardG 
ain(axis, gain) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAxisPolarity(int axis, 
char polarity); 
Python 
def SetAxisPolarity(axis, 
polarity) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteEncoderMo 
de(int axis, bool enable); 
Python 
def 
SetAbsoluteEncoderMode 
(axis, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAbsoluteEncoderHo 
meOffset(int axis, 
double offset); 
Python 
def 
SetAbsoluteEncoderHome 
Offset(axis, offset) 
Returns 
Type int
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
velocity feedforward 
gain. 
[out] 
pGain A pointer to a double 
variable that will contain 
the velocity feedforward 
gain. 

◆GetAxisPolarity() 

WMX3APIFUNC 
GetAxisPolarity ( 
) 
WMX3APIFUNC 
GetAxisPolarity ( 
) 
int 
axis, 
char * pPolarity 
Get the axis polarity of an axis. 

This function gets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to get the axis 
polarity. 
[out] 
pPolarity A pointer to a char 
variable that will contain 
the axis polarity. 

◆ 
GetAbsoluteEncoderMode() 

WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool * pEnable 
Get the absolute encoder mode of an axis. 
This function gets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder mode. 
[out] 
pEnable A pointer to a bool 
variable that will contain 
the absolute encoder 
mode. 
See also 

Tutorial 4-5: Absolute encoders
--------------------------------------------
This function gets the Global Moving Average Profile Time Milliseconds 
parameter. 

Parameters 
[in] 
axis The axis to get the 
moving average profile 
time. 
[out] 
pMilliseconds A pointer to a double 
variable that will contain 
the moving average 
profile time. 

◆GetAxisUnit() 

WMX3APIFUNC 
GetAxisUnit ( 
) 
WMX3APIFUNC 
GetAxisUnit ( 
) 
int 
axis, 
double * pUnit 
Get the axis unit parameter of an axis. 

This function gets the Axis Unit parameter. 

Parameters 
[in] 
axis The axis to get the axis 
unit. 
[out] 
pUnit A pointer to a double that 
will contain the axis unit. 

◆GetVelocityFeedforwardGain() 

WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
WMX3APIFUNC 
GetVelocityFeedforw 
ardGain ( 
) 
int 
axis, 
double * pGain 
Get the velocity feedforward gain of an axis. 
This function gets the Velocity Feedforward Gain parameter.
--------------------------------------------
This function obtains the current cycle position command of an axis. This value is 
identical to the Pos Cmd status obtained with the GetStatus function. 

◆GetPosFeedback() 

WMX3APIFUNC 
GetPosFeedback ( 
WMX3APIFUNC 
GetPosFeedback ( 
int 
axis, 
double * pPosition 
) 
Get the current cycle position feedback of the axis. 

Parameters 
[in] 
axis The axis to get the 
position feedback. 
[out] 
pPosition A pointer that will contain 
the position feedback. 
Remarks 

This function obtains the current cycle position feedback of an axis. This value is 
identical to the Actual Pos status obtained with the GetStatus function. 

◆GetVelCommand() 

WMX3APIFUNC 
GetVelCommand ( 
) 
WMX3APIFUNC 
GetVelCommand ( 
) 
int 
axis, 
double * pVelocity 
Get the current cycle velocity command of the axis. 

Parameters 
[in] 
axis The axis to get the 
velocity command. 
[out] 
pVelocity A pointer that will contain 
the velocity command. 
Remarks
-----------------------------------------------------------------------------------
325. Instruction: Get the velocity feedforward gain of an axis.
A: CalculateVelocityFeedforwardGainOnAxis(axis)
B: GetPosFeedback(axis)
C: ClearSyncGroupError(groupId)
D: GetVelocityFeedforwardGain(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
325. Model's answer: D
325. Correct answer: D
325. Result: Correct



Processing Question 326:
326. Context:
 Python 
Type Type 
char *pPolarity); 
def GetAxisPolatity(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -polarity 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetAbsoluteEncoderMo 
de(int axis, bool 
*pEnable); 
def 
GetAbsoluteEncoderMode 
(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : bool -enable 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAbsoluteEncoderHo 
meOffset(int axis, 
double *pOffset); 
Python 
Type 
def 
GetAbsoluteEncoderHom 
eOffset(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : double -offset 
Remarks
--------------------------------------------
ain 
1 
GetAxisPolarity(int axis, char *pPolarity) AxisParam.axisPolarity 1 
GetAbsoluteEncoderMode(int axis, bool 
*pEnable) 
AxisParam.absoluteEncoderMode 1 
GetAbsoluteEncoderHomeOffset(int 
axis, double *pOffset) 
AxisParam.absoluteEncoderHome 
Offset 
1 
GetFeedbackParam(int axis, 
FeedbackParam *pParam) 
FeedbackParam 1 
GetHomeParam(int axis, HomeParam 
*pParam) 
HomeParam 1 
GetLimitParam(int axis, LimitParam 
*pParam) 
LimitParam 1 
GetMotionParam(int axis, MotionParam 
*pParam) 
MotionParam 1 
GetAlarmParam(int axis, AlarmParam 
*pParam) 
AlarmParam 1 
GetSyncParam(int axis, SyncParam 
*pParam) 
SyncParam 1 
GetFlightRecorderParam(FlightRecorder 
Param *pParam) 
FlightRecorderParam maxAxes 
GetEmergencyStopParam(EmergencySt
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
Parameters 
[in] 
axis The axis to get the 
velocity feedforward 
gain. 
[out] 
pGain A pointer to a double 
variable that will contain 
the velocity feedforward 
gain. 

◆GetAxisPolarity() 

WMX3APIFUNC 
GetAxisPolarity ( 
) 
WMX3APIFUNC 
GetAxisPolarity ( 
) 
int 
axis, 
char * pPolarity 
Get the axis polarity of an axis. 

This function gets the Axis Polarity parameter. 

Parameters 
[in] 
axis The axis to get the axis 
polarity. 
[out] 
pPolarity A pointer to a char 
variable that will contain 
the axis polarity. 

◆ 
GetAbsoluteEncoderMode() 

WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool * pEnable 
Get the absolute encoder mode of an axis. 
This function gets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder mode. 
[out] 
pEnable A pointer to a bool 
variable that will contain 
the absolute encoder 
mode. 
See also 

Tutorial 4-5: Absolute encoders
-----------------------------------------------------------------------------------
326. Instruction: Get the axis polarity of an axis.
A: GetAxisParam_Axis(axis)
B: GetAxisPolarity(axis_number)
C: GetAxisPolatity(axis)
D: SetLimitParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
326. Model's answer: B
326. Correct answer: C
326. Result: Wrong



Processing Question 327:
327. Context:
 WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
--------------------------------------------
◆SetAbsoluteEncoderMode() 

WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool enable 
Set the absolute encoder mode for an axis. 
This function sets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder mode. 
[in] 
enable If FALSE, absolute 
encoder mode will be 
disabled for the axis. If 
TRUE, absolute encoder 
mode will be enabled for 
the axis. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double offset 
Set the absolute encoder home offset for an axis. 
This function sets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder home 
offset. 
[in] 
offset The specified absolute 
encoder home offset. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetEncoderRange()
--------------------------------------------
Python 
Type Type 
char *pPolarity); 
def GetAxisPolatity(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -polarity 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetAbsoluteEncoderMo 
de(int axis, bool 
*pEnable); 
def 
GetAbsoluteEncoderMode 
(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : bool -enable 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAbsoluteEncoderHo 
meOffset(int axis, 
double *pOffset); 
Python 
Type 
def 
GetAbsoluteEncoderHom 
eOffset(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : double -offset 
Remarks
--------------------------------------------
Tutorial 4-5: Absolute encoders 

◆GetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double * pOffset 
Get the absolute encoder home offset of an axis. 
This function gets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder home 
offset. 
[out] 
pOffset A pointer to a double 
variable that will contain 
the absolute encoder 
home offset. 

See also 

Tutorial 4-5: Absolute encoders 

◆GetEncoderRange() 

WMX3APIFUNC 
GetEncoderRange ( 
WMX3APIFUNC 
GetEncoderRange ( 
) 
int 
bool * 
int * 
int * 
axis, 
pEnable, 
pEncoderRangeLow, 
pEncoderRangeHigh 
Get the encoder range mode and encoder range of an axis. 
This function gets the Encoder Range Mode, Encoder Range Low, and Encoder
-----------------------------------------------------------------------------------
327. Instruction: Get the absolute encoder mode of an axis.
A: SetAbsoluteEncoderHomeOffset(axis, offset)
B: GetAbsoluteEncoderHomeOffset(axis)
C: GetAbsoluteEncoderModeForAxis(axis_id)
D: GetAbsoluteEncoderMode(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
327. Model's answer: D
327. Correct answer: D
327. Result: Correct



Processing Question 328:
328. Context:
 WMX3APIFUNC SetAbsoluteEncoderMode (int axis, bool 
enable) 


Set the absolute encoder mode for an 
axis. More... 

WMX3APIFUNC SetAbsoluteEncoderHomeOffset (int 
axis, double offset) 

Set the absolute encoder home offset for 
an axis. More... 

WMX3APIFUNC SetEncoderRange (int axis, bool enable, 
int encoderRangeLow, int 
encoderRangeHigh) 
Set the encoder range mode and 
encoder range for an axis. More... 

WMX3APIFUNC GetGearRatio (int axis, double 

*pNumerator, double *pDenominator) 

Get the gear ratio of the axis. More... 

WMX3APIFUNC GetSingleTurn (int axis, bool *pEnable, 
unsigned int *pEncoderCount) 

Get the single turn mode and single turn 
encoder count of an axis. More... 

WMX3APIFUNC GetMovingAverageProfileTime (int axis, 
double *pMilliseconds) 

Get the moving average profile time 
parameter of an axis. More... 

WMX3APIFUNC GetAxisUnit (int axis, double *pUnit) 

Get the axis unit parameter of an axis. 

More...
--------------------------------------------
enable) 
SetAbsoluteEncoderHomeOffset(int 
axis, double offset) 
AxisParam.absoluteEncoderHome 
Offset 
1 
SetFeedbackParam(int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError) 
FeedbackParam 1 
SetHomeParam(int axis, HomeParam 
*pParam, HomeParam *pParamError) 
HomeParam 1 
SetLimitParam(int axis, LimitParam 
*pParam, LimitParam *pParamError) 
LimitParam 1 
SetMotionParam(int axis, MotionParam 
*pParam, MotionParam *pParamError) 
MotionParam 1 
SetAlarmParam(int axis, AlarmParam 
*pParam, AlarmParam *pParamError) 
AlarmParam 1 
SetSyncParam(int axis, SyncParam 
*pParam, SyncParam *pParamError) 
SyncParam 1 
SetFlightRecorderParam(FlightRecorder 
Param *pParam, FlightRecorderParam 
*pParamError) 
FlightRecorderParam maxAxes 
SetFlightRecorderPath(char *pPath) Flight Recorder File Path -
SetFlightRecorderPath(wchar_t *pPath) Flight Recorder File Path -
SetEmergencyStopParam(EmergencySt 
opParam *pParam, 
EmergencyStopParam *pParamError) 
EmergencyStopParam maxAxes
--------------------------------------------
◆SetAbsoluteEncoderMode() 

WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
Mode ( 
) 
int 
axis, 
bool enable 
Set the absolute encoder mode for an axis. 
This function sets the Absolute Encoder Mode parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder mode. 
[in] 
enable If FALSE, absolute 
encoder mode will be 
disabled for the axis. If 
TRUE, absolute encoder 
mode will be enabled for 
the axis. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
SetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double offset 
Set the absolute encoder home offset for an axis. 
This function sets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to set the 
absolute encoder home 
offset. 
[in] 
offset The specified absolute 
encoder home offset. 
See also 

Tutorial 4-5: Absolute encoders 

◆SetEncoderRange()
--------------------------------------------
Tutorial 4-5: Absolute encoders 

◆GetAbsoluteEncoderHomeOffset() 

WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
WMX3APIFUNC 
GetAbsoluteEncoder 
HomeOffset ( 
) 
int 
axis, 
double * pOffset 
Get the absolute encoder home offset of an axis. 
This function gets the Absolute Encoder Home Offset parameter. 

Parameters 
[in] 
axis The axis to get the 
absolute encoder home 
offset. 
[out] 
pOffset A pointer to a double 
variable that will contain 
the absolute encoder 
home offset. 

See also 

Tutorial 4-5: Absolute encoders 

◆GetEncoderRange() 

WMX3APIFUNC 
GetEncoderRange ( 
WMX3APIFUNC 
GetEncoderRange ( 
) 
int 
bool * 
int * 
int * 
axis, 
pEnable, 
pEncoderRangeLow, 
pEncoderRangeHigh 
Get the encoder range mode and encoder range of an axis. 
This function gets the Encoder Range Mode, Encoder Range Low, and Encoder
-----------------------------------------------------------------------------------
328. Instruction: Get the absolute encoder home offset of an axis.
A: GetIntegratedEncoderZeroOffset(axis)
B: SetAbsoluteEncoderHomeOffset(axis, offset)
C: GetAbsoluteEncoderHomeOffset(axis)
D: Wait_TimeMilli(axis, waitTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
328. Model's answer: C
328. Correct answer: C
328. Result: Correct



Processing Question 329:
329. Context:
 WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL)
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetFeedbackParam(int 
axis, FeedbackParam 
*pParam, 
FeedbackParam 
*pParamError = NULL); 
Python 
def 
SetFeedbackParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetHomeParam(int axis, 
HomeParam *pParam, 
HomeParam 
*pParamError = NULL); 
Python 
def SetHomeParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m param error 
Remarks 
C++ 
WMX3APIFUNC 
SetLimitParam(int axis, 
LimitParam *pParam,
--------------------------------------------
◆SetFeedbackParam() 

WMX3APIFUNC 
SetFeedbackParam ( int axis, 
WMX3APIFUNC 
SetFeedbackParam ( int axis, 
FeedbackParam * pParam, 
FeedbackParam * pParamError = NULL) 
Set feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
feedback parameters. 
[in] 
pParam A pointer to an object of 
the FeedbackParam 
class that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
FeedbackParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetHomeParam()
--------------------------------------------
object that is passed to 
this argument will 
contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 

See also 

Parameters -Overview 

◆GetFeedbackParam() 

WMX3APIFUNC WMX3APIFUNC 
GetFeedbackParam ( int axis, 
FeedbackParam * pParam 
) 
Get feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the 
feedback parameters 
[out] 
pParam A pointer to an object of 
the FeedbackParam 
class that will contain the 
current feedback 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetHomeParam() 


WMX3APIFUNC 
GetHomeParam ( 
WMX3APIFUNC 
GetHomeParam ( 
int 
axis, 
HomeParam * pParam 
) 
Get home parameter settings for an axis. 

Parameters 
[in] 
axis The axis to get the home 
parameters 
[out] 
pParam A pointer to an object of 
the HomeParam class 
that will contain the 
current home 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetLimitParam()
-----------------------------------------------------------------------------------
329. Instruction: Set feedback parameter settings for an axis.
A: GetMotionParam(axis)
B: GetFeedbackParam(axis)
C: SetFeedbackParam(axis, pParam)
D: SetAxisParam(axis, newParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
329. Model's answer: C
329. Correct answer: C
329. Result: Correct



Processing Question 330:
330. Context:
 ◆SetHomeParam() 

WMX3APIFUNC 
SetHomeParam ( int axis, 
WMX3APIFUNC 
SetHomeParam ( int axis, 
HomeParam * pParam, 
HomeParam * pParamError = NULL) 
Set home parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the home 
parameters. 
[in] 
pParam A pointer to an object of 
the HomeParam class 
that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
HomeParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetLimitParam()
--------------------------------------------
◆SetFeedbackParam() 

WMX3APIFUNC 
SetFeedbackParam ( int axis, 
WMX3APIFUNC 
SetFeedbackParam ( int axis, 
FeedbackParam * pParam, 
FeedbackParam * pParamError = NULL) 
Set feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
feedback parameters. 
[in] 
pParam A pointer to an object of 
the FeedbackParam 
class that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
FeedbackParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetHomeParam()
--------------------------------------------
enable) 
SetAbsoluteEncoderHomeOffset(int 
axis, double offset) 
AxisParam.absoluteEncoderHome 
Offset 
1 
SetFeedbackParam(int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError) 
FeedbackParam 1 
SetHomeParam(int axis, HomeParam 
*pParam, HomeParam *pParamError) 
HomeParam 1 
SetLimitParam(int axis, LimitParam 
*pParam, LimitParam *pParamError) 
LimitParam 1 
SetMotionParam(int axis, MotionParam 
*pParam, MotionParam *pParamError) 
MotionParam 1 
SetAlarmParam(int axis, AlarmParam 
*pParam, AlarmParam *pParamError) 
AlarmParam 1 
SetSyncParam(int axis, SyncParam 
*pParam, SyncParam *pParamError) 
SyncParam 1 
SetFlightRecorderParam(FlightRecorder 
Param *pParam, FlightRecorderParam 
*pParamError) 
FlightRecorderParam maxAxes 
SetFlightRecorderPath(char *pPath) Flight Recorder File Path -
SetFlightRecorderPath(wchar_t *pPath) Flight Recorder File Path -
SetEmergencyStopParam(EmergencySt 
opParam *pParam, 
EmergencyStopParam *pParamError) 
EmergencyStopParam maxAxes
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetFeedbackParam(int 
axis, FeedbackParam 
*pParam, 
FeedbackParam 
*pParamError = NULL); 
Python 
def 
SetFeedbackParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetHomeParam(int axis, 
HomeParam *pParam, 
HomeParam 
*pParamError = NULL); 
Python 
def SetHomeParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m param error 
Remarks 
C++ 
WMX3APIFUNC 
SetLimitParam(int axis, 
LimitParam *pParam,
-----------------------------------------------------------------------------------
330. Instruction: Set home parameter settings for an axis.
A: StartCircularIntplMov_ThroughAndEnd(pCircularIntplCommand)
B: SetHomeParameter(axis, newParam)
C: SetHomeParam(axis, pParam)
D: SetParam_Axis(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
330. Model's answer: C
330. Correct answer: C
330. Result: Correct



Processing Question 331:
331. Context:
 ◆SetLimitParam() 

WMX3APIFUNC 
SetLimitParam ( int axis, 
WMX3APIFUNC 
SetLimitParam ( int axis, 
LimitParam * pParam, 
LimitParam * pParamError = NULL) 
Set limit parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the limit 
parameters. 
[in] 
pParam A pointer to an object of 
the LimitParam class 
that contains the limit 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
LimitParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetMotionParam()
--------------------------------------------
Function LimitParam 
*pParamError = NULL); 
Python 
def SetLimitParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_LimitParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMotionParam(int 
axis, MotionParam 
*pParam, MotionParam 
*pParamError = NULL); 
Python 
def SetMotionParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_MotionPara 
m param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAlarmParam(int axis, 
AlarmParam *pParam, 
AlarmParam 
*pParamError = NULL); 
Python 
def SetAlarmParam(axis, 
pParam)
--------------------------------------------
◆SetHomeParam() 

WMX3APIFUNC 
SetHomeParam ( int axis, 
WMX3APIFUNC 
SetHomeParam ( int axis, 
HomeParam * pParam, 
HomeParam * pParamError = NULL) 
Set home parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the home 
parameters. 
[in] 
pParam A pointer to an object of 
the HomeParam class 
that contains the 
feedback parameters to 
apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
HomeParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetLimitParam()
--------------------------------------------
Function LimitParam *pParam); 
Python def GetLimitParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_LimitParam 
-param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMotionParam(int 
axis, MotionParam 
*pParam); 
Python def GetMotionParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_MotionPara 
m -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAlarmParam(int axis, 
AlarmParam *pParam); 
Python def GetAlarmParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AlarmPara 
m -param
-----------------------------------------------------------------------------------
331. Instruction: Set limit parameter settings for an axis.
A: SetAxisLimitParameter(axis, newParam)
B: SuperimposeMov(pPosCommand)
C: SetLimitParam(axis, pParam)
D: SetMotionParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
331. Model's answer: C
331. Correct answer: C
331. Result: Correct



Processing Question 332:
332. Context:
 ◆SetLimitParam() 

WMX3APIFUNC 
SetLimitParam ( int axis, 
WMX3APIFUNC 
SetLimitParam ( int axis, 
LimitParam * pParam, 
LimitParam * pParamError = NULL) 
Set limit parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the limit 
parameters. 
[in] 
pParam A pointer to an object of 
the LimitParam class 
that contains the limit 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
LimitParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetMotionParam()
--------------------------------------------
Function LimitParam 
*pParamError = NULL); 
Python 
def SetLimitParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_LimitParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMotionParam(int 
axis, MotionParam 
*pParam, MotionParam 
*pParamError = NULL); 
Python 
def SetMotionParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_MotionPara 
m param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAlarmParam(int axis, 
AlarmParam *pParam, 
AlarmParam 
*pParamError = NULL); 
Python 
def SetAlarmParam(axis, 
pParam)
--------------------------------------------
WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL)
--------------------------------------------
◆SetMotionParam() 

WMX3APIFUNC 
SetMotionParam 
( int axis, WMX3APIFUNC 
SetMotionParam 
( int axis, 
MotionParam * pParam, 
MotionParam * pParamError = NULL) 
Set motion parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
motion parameters. 
[in] 
pParam A pointer to an object of 
the MotionParam class 
that contains the motion 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
MotionParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetAlarmParam()
-----------------------------------------------------------------------------------
332. Instruction: Set motion parameter settings for an axis.
A: SetMotionParam(axis, pParam)
B: SetLimitParam(axis, pParam)
C: StartPosToTrq_TriggerEvents(pTrqCommand, pTriggerEvents)
D: SetMotionParameters(axis, newParams)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
332. Model's answer: A
332. Correct answer: A
332. Result: Correct



Processing Question 333:
333. Context:
 ◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam()
--------------------------------------------
◆SetMotionParam() 

WMX3APIFUNC 
SetMotionParam 
( int axis, WMX3APIFUNC 
SetMotionParam 
( int axis, 
MotionParam * pParam, 
MotionParam * pParamError = NULL) 
Set motion parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
motion parameters. 
[in] 
pParam A pointer to an object of 
the MotionParam class 
that contains the motion 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
MotionParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetAlarmParam()
--------------------------------------------
◆SetAlarmParam() 

WMX3APIFUNC 
SetAlarmParam ( int axis, 
WMX3APIFUNC 
SetAlarmParam ( int axis, 
AlarmParam * pParam, 
AlarmParam * pParamError = NULL) 
Set alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the alarm 
parameters. 
[in] 
pParam A pointer to an object of 
the AlarmParam class 
that contains the alarm 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AlarmParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetSyncParam()
--------------------------------------------
SetAlarmParam(int axis, Ala Config 
SetAxisParam(AxisParam *p Config 
SetAxisParam(int axis, AxisPa Config 
SetAxisPolarity(int axis, cha Config 
SetAxisUnit(int axis, double Config 
SetEmergencyStopParam(EConfig 
SetEncoderRange(int axis, b Config 
SetFeedbackParam(int axis, Config 
SetFlightRecorderParam(Fl Config 
SetFlightRecorderPath(cha Config 
SetFlightRecorderPath(wch Config 
SetGearRatio(int axis, doubl Config 
SetHomeParam(int axis, Home Config 
SetLimitParam(int axis, Limi Config 
SetMotionParam(int axis, Mo Config 
SetMovingAverageProfileTiConfig 
SetParam(SystemParam *pPConfig
-----------------------------------------------------------------------------------
333. Instruction: Set alarm parameter settings for an axis.
A: IsDeviceValid()
B: SetLimitParam(axis, pParam)
C: SetAlarmConfiguration(axis, params)
D: SetAlarmParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
333. Model's answer: D
333. Correct answer: D
333. Result: Correct



Processing Question 334:
334. Context:
 ◆SetAlarmParam() 

WMX3APIFUNC 
SetAlarmParam ( int axis, 
WMX3APIFUNC 
SetAlarmParam ( int axis, 
AlarmParam * pParam, 
AlarmParam * pParamError = NULL) 
Set alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the alarm 
parameters. 
[in] 
pParam A pointer to an object of 
the AlarmParam class 
that contains the alarm 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AlarmParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetSyncParam()
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AlarmPara 
m param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncParam(int axis, 
SyncParam *pParam, 
SyncParam 
*pParamError = NULL); 
Python 
def SetSyncParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SyncParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetFlightRecorderParam 
(FlightRecorderParam 
*pParam, 
FlightRecorderParam 
*pParamError = NULL); 
Python 
def 
SetFlightRecorderParam( 
axis, pParam) 
Type tuple 
0 : int -error code
--------------------------------------------
◆SetSyncParam() 

WMX3APIFUNC 
SetSyncParam ( int axis, 
WMX3APIFUNC 
SetSyncParam ( int axis, 
SyncParam * pParam, 
SyncParam * pParamError = NULL) 
Set sync parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the sync 
parameters. 
[in] 
pParam A pointer to an object of 
the SyncParam class 
that contains the sync 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SyncParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetFlightRecorderParam()
--------------------------------------------
◆SetLimitParam() 

WMX3APIFUNC 
SetLimitParam ( int axis, 
WMX3APIFUNC 
SetLimitParam ( int axis, 
LimitParam * pParam, 
LimitParam * pParamError = NULL) 
Set limit parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the limit 
parameters. 
[in] 
pParam A pointer to an object of 
the LimitParam class 
that contains the limit 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
LimitParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetMotionParam()
-----------------------------------------------------------------------------------
334. Instruction: Set sync parameter settings for an axis.
A: SetLimitParam(axis, pParam)
B: SetAxisSyncParam(axis, newParam)
C: SetSyncParam(axis, pParam)
D: StartTrqToMov_TriggerEvents(pPosCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
334. Model's answer: C
334. Correct answer: C
334. Result: Correct



Processing Question 335:
335. Context:
 WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL) 

Set flight recorder parameters. More... 

WMX3APIFUNC SetFlightRecorderPath (char *pPath) 
Set the file path to save the flight 
recorder data to. More... 
WMX3APIFUNC SetFlightRecorderPath (wchar_t *pPath) 
Set the file path to save the flight 
recorder data to. More... 

WMX3APIFUNC SetEmergencyStopParam 
(EmergencyStopParam *pParam, 
EmergencyStopParam 
*pParamError=NULL) 
Set emergency stop parameters. More... 

WMX3APIFUNC GetFeedbackParam (int axis, 
FeedbackParam *pParam) 

Get feedback parameter settings for an 
axis. More... 

WMX3APIFUNC GetHomeParam (int axis, HomeParam 

*pParam) 

Get home parameter settings for an axis. 

More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam)
--------------------------------------------
◆SetSyncParam() 

WMX3APIFUNC 
SetSyncParam ( int axis, 
WMX3APIFUNC 
SetSyncParam ( int axis, 
SyncParam * pParam, 
SyncParam * pParamError = NULL) 
Set sync parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the sync 
parameters. 
[in] 
pParam A pointer to an object of 
the SyncParam class 
that contains the sync 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SyncParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetFlightRecorderParam()
--------------------------------------------
◆GetFlightRecorderParam() 

WMX3APIFU 
NC 
GetFlightRec 
WMX3APIFU 
NC 
GetFlightRec 
orderParam ( 
FlightRecorde pParam ) 
Get flight recorder parameters. 
Parameters 
[out] 
pParam A pointer to an object of 
the 
FlightRecorderParam 
class that will contain the 
current flight recorder 
parameters. 
See also 
Parameters -Overview 

◆GetEmergencyStopParam() 

EmergencySto pParam 
◆GetDefaultParam() 
WMX3APIFU 
NC 
GetDefaultPa 
ram ( SystemParam pParam ) 
Get the default system parameters. 
Parameters 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
default parameters. 

WMX3APIFU 
NC 
GetEmergen 
cyStopParam ( 
Get emergency stop parameters. 

Parameters 
[out] 
pParam 

See also 

Parameters -Overview 

) 
A pointer to an object of 
the 

EmergencyStopParam 

class that will contain the 
current emergency stop 
parameters. 

◆ 
GetDefaultAxisParam()
--------------------------------------------
enable) 
SetAbsoluteEncoderHomeOffset(int 
axis, double offset) 
AxisParam.absoluteEncoderHome 
Offset 
1 
SetFeedbackParam(int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError) 
FeedbackParam 1 
SetHomeParam(int axis, HomeParam 
*pParam, HomeParam *pParamError) 
HomeParam 1 
SetLimitParam(int axis, LimitParam 
*pParam, LimitParam *pParamError) 
LimitParam 1 
SetMotionParam(int axis, MotionParam 
*pParam, MotionParam *pParamError) 
MotionParam 1 
SetAlarmParam(int axis, AlarmParam 
*pParam, AlarmParam *pParamError) 
AlarmParam 1 
SetSyncParam(int axis, SyncParam 
*pParam, SyncParam *pParamError) 
SyncParam 1 
SetFlightRecorderParam(FlightRecorder 
Param *pParam, FlightRecorderParam 
*pParamError) 
FlightRecorderParam maxAxes 
SetFlightRecorderPath(char *pPath) Flight Recorder File Path -
SetFlightRecorderPath(wchar_t *pPath) Flight Recorder File Path -
SetEmergencyStopParam(EmergencySt 
opParam *pParam, 
EmergencyStopParam *pParamError) 
EmergencyStopParam maxAxes
-----------------------------------------------------------------------------------
335. Instruction: Set flight recorder parameters.
A: SetFlightRecorderParamNew(axis, newParam)
B: StartMov_TriggerEvents(numCommands, pPosCommand, pTriggerEvents)
C: SetHomeParam(axis, pParam)
D: SetFlightRecorderParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
335. Model's answer: D
335. Correct answer: D
335. Result: Correct



Processing Question 336:
336. Context:
 },
    {
        "No": 440,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 446,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 450,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0TriggerEvents*pTriggerEvents,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 441,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
-----------------------------------------------------------------------------------
336. Instruction: Set the file path to save the flight recorder data to.
A: SetFlightRecorderPath(pPath)
B: SetParam(pParam)
C: SetFlightRecorderPath(path)
D: ResetFlightRecorder()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
336. Model's answer: C
336. Correct answer: A
336. Result: Wrong



Processing Question 337:
337. Context:
 opParam *pParam) EmergencyStopParam maxAxes 
In addition to the above functions, the GetDefaultParam and GetDefaultAxisParam functions can be 
used to obtain the default values of each parameter. These functions are useful for resetting parameter 
settings to the default values. 

Saving and Loading Parameters From File 

The WMX3 engine does not save parameter settings when it is closed. To restore the parameter 
settings the next time the WMX3 engine is started, the parameter settings must be saved by the user. 

Several functions are available for facilitating saving and loading parameter settings to and from file. In 
addition to these functions, it is always possible for the user to save the parameter settings using a 
different method of their choosing. 

Export functions are used to save parameter settings to file. Parameter settings that are not specified 
as arguments to the Export function are not saved to the file.
--------------------------------------------
See also 

Parameters -Overview 

) 
A pointer to an object of 
the 

EmergencyStopParam 

class that will contain the 
current emergency stop 
parameters. 

◆ 
GetDefaultAxisParam() 

pAxisParam ) pAxisParam ) 
WMX3APIFU 
NC 
GetDefaultAx 
isParam ( 
AxisParam * 
Get the default axis parameters. 
Parameters 
[out] 
pAxisParam A pointer to an object of 
the AxisParam class 
that will contain the 
default parameters. 
◆ 
Export() [1/12] 



WMX3APIFUNC 
Export ( 
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam 
) 
Export system parameters to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. 
Remarks 

This function writes the parameter settings passed to this function to an xml file. The 
parameter settings can be read from the xml file using one of the Import functions. 

See also 

Parameters -Overview
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
-----------------------------------------------------------------------------------
337. Instruction: Set emergency stop parameters.
A: SetEmergencyStopParam(pParam)
B: Export_SysPrm_Axis(pPath, pParam, axis)
C: SetHomeParam(axis, pParam)
D: SetEmergencyStopParameter(pParameter)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
337. Model's answer: A
337. Correct answer: A
337. Result: Correct



Processing Question 338:
338. Context:
 Returns 
Value 
0 : int -error code 
1 : 
Config_Emergency 
StopParam -param 
error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetFeedbackParam(int 
axis, FeedbackParam 
*pParam); 
Python 
def 
GetFeedbackParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetHomeParam(int axis, 
HomeParam *pParam); 
Python def GetHomeParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m -param 
Remarks 
C++ 
WMX3APIFUNC 
GetLimitParam(int axis,
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
SetFeedbackParam(int 
axis, FeedbackParam 
*pParam, 
FeedbackParam 
*pParamError = NULL); 
Python 
def 
SetFeedbackParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetHomeParam(int axis, 
HomeParam *pParam, 
HomeParam 
*pParamError = NULL); 
Python 
def SetHomeParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m param error 
Remarks 
C++ 
WMX3APIFUNC 
SetLimitParam(int axis, 
LimitParam *pParam,
--------------------------------------------
WMX3APIFUNC SetFeedbackParam (int axis, 
FeedbackParam *pParam, 
FeedbackParam *pParamError=NULL) 

Set feedback parameter settings for an 
axis. More... 

WMX3APIFUNC SetHomeParam (int axis, HomeParam 
*pParam, HomeParam 
*pParamError=NULL) 
Set home parameter settings for an axis. 
More... 

WMX3APIFUNC SetLimitParam (int axis, LimitParam 
*pParam, LimitParam 
*pParamError=NULL) 
Set limit parameter settings for an axis. 
More... 

WMX3APIFUNC SetMotionParam (int axis, MotionParam 
*pParam, MotionParam 
*pParamError=NULL) 
Set motion parameter settings for an 
axis. More... 

WMX3APIFUNC SetAlarmParam (int axis, AlarmParam 
*pParam, AlarmParam 
*pParamError=NULL) 


Set alarm parameter settings for an axis. 

More... 

WMX3APIFUNC SetSyncParam (int axis, SyncParam 
*pParam, SyncParam 
*pParamError=NULL) 
Set sync parameter settings for an axis. 
More... 

WMX3APIFUNC SetFlightRecorderParam 
(FlightRecorderParam *pParam, 
FlightRecorderParam 
*pParamError=NULL)
--------------------------------------------
object that is passed to 
this argument will 
contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid. 

See also 

Parameters -Overview 

◆GetFeedbackParam() 

WMX3APIFUNC WMX3APIFUNC 
GetFeedbackParam ( int axis, 
FeedbackParam * pParam 
) 
Get feedback parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the 
feedback parameters 
[out] 
pParam A pointer to an object of 
the FeedbackParam 
class that will contain the 
current feedback 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetHomeParam() 


WMX3APIFUNC 
GetHomeParam ( 
WMX3APIFUNC 
GetHomeParam ( 
int 
axis, 
HomeParam * pParam 
) 
Get home parameter settings for an axis. 

Parameters 
[in] 
axis The axis to get the home 
parameters 
[out] 
pParam A pointer to an object of 
the HomeParam class 
that will contain the 
current home 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetLimitParam()
-----------------------------------------------------------------------------------
338. Instruction: Get feedback parameter settings for an axis.
A: GetFeedbackAxisParam(feedback_axis)
B: SetFeedbackParam(axis, pParam)
C: StartPVT_Intpl(pPVTCommand, numAddlCommands, PyObject *pPVTAddlCommand)
D: GetFeedbackParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
338. Model's answer: D
338. Correct answer: D
338. Result: Correct



Processing Question 339:
339. Context:
 ◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam()
--------------------------------------------
◆GetAlarmParam() 

WMX3APIFUNC 
GetAlarmParam ( 
WMX3APIFUNC 
GetAlarmParam ( 
int 
axis, 
AlarmParam * pParam 
) 
Get alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the alarm 
parameters 
[out] 
pParam A pointer to an object of 
the AlarmParam class 
that will contain the 
current alarm 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetSyncParam() 


WMX3APIFUNC 
GetSyncParam ( 
WMX3APIFUNC 
GetSyncParam ( 
int 
axis, 
SyncParam * pParam 
) 
Get the sync parameters of the axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the sync 
parameters 
A pointer to an object of 
the SyncParam class 
that will contain the 
current sync parameters 
of the axis. 
See also 
Parameters -Overview 

◆GetFlightRecorderParam()
--------------------------------------------
Returns 
Value 
0 : int -error code 
1 : 
Config_Emergency 
StopParam -param 
error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetFeedbackParam(int 
axis, FeedbackParam 
*pParam); 
Python 
def 
GetFeedbackParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_FeedbackP 
aram -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetHomeParam(int axis, 
HomeParam *pParam); 
Python def GetHomeParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_HomePara 
m -param 
Remarks 
C++ 
WMX3APIFUNC 
GetLimitParam(int axis,
--------------------------------------------
},
    {
        "No": 360,
        "FunctionC++": "WMX3APIFUNC GetMotionParam(int axis, MotionParam *pParam)",
        "FunctionPython": "def GetMotionParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get motion parameter settings for an axis. "
    },
    {
        "No": 361,
        "FunctionC++": "WMX3APIFUNC GetAlarmParam(int axis, AlarmParam *pParam)",
        "FunctionPython": "def GetAlarmParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get alarm parameter settings for an axis. "
-----------------------------------------------------------------------------------
339. Instruction: Get home parameter settings for an axis.
A: GetHomeParamsByAxis(axis)
B: GetAlarmParam(axis)
C: GetStatus()
D: GetHomeParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
339. Model's answer: D
339. Correct answer: D
339. Result: Correct



Processing Question 340:
340. Context:
 ◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam()
--------------------------------------------
Function LimitParam 
*pParamError = NULL); 
Python 
def SetLimitParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_LimitParam 
param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMotionParam(int 
axis, MotionParam 
*pParam, MotionParam 
*pParamError = NULL); 
Python 
def SetMotionParam(axis, 
pParam) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_MotionPara 
m param error 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetAlarmParam(int axis, 
AlarmParam *pParam, 
AlarmParam 
*pParamError = NULL); 
Python 
def SetAlarmParam(axis, 
pParam)
--------------------------------------------
More... 

WMX3APIFUNC GetLimitParam (int axis, LimitParam 

*pParam) 

Get limit switch parameter settings for an 


axis. More... 

WMX3APIFUNC GetMotionParam (int axis, MotionParam 
*pParam) 

Get motion parameter settings for an 
axis. More... 

WMX3APIFUNC GetAlarmParam (int axis, AlarmParam 

*pParam) 

Get alarm parameter settings for an axis. 

More... 

WMX3APIFUNC GetSyncParam (int axis, SyncParam 

*pParam) 

Get the sync parameters of the axis. 

More... 

WMX3APIFUNC GetFlightRecorderParam 
(FlightRecorderParam *pParam) 
Get flight recorder parameters. More... 

WMX3APIFUNC GetEmergencyStopParam 
(EmergencyStopParam *pParam) 
Get emergency stop parameters. More... 

WMX3APIFUNC GetDefaultParam (SystemParam 
*pParam) 

Get the default system parameters. 

More... 

WMX3APIFUNC GetDefaultAxisParam (AxisParam 
*pAxisParam) 

Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More...
--------------------------------------------
Function LimitParam *pParam); 
Python def GetLimitParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_LimitParam 
-param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMotionParam(int 
axis, MotionParam 
*pParam); 
Python def GetMotionParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_MotionPara 
m -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAlarmParam(int axis, 
AlarmParam *pParam); 
Python def GetAlarmParam(axis) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_AlarmPara 
m -param
-----------------------------------------------------------------------------------
340. Instruction: Get limit switch parameter settings for an axis
A: SetLimitParam(axis, pParam)
B: OverrideVel(numCommands, pVelCommand)
C: GetLimitParam(axis)
D: GetAxisLimit(axis_length)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
340. Model's answer: C
340. Correct answer: C
340. Result: Correct



Processing Question 341:
341. Context:
 },
    {
        "No": 326,
        "FunctionC++": "WMX3APIFUNC GetParam(int axis, SystemParam *pParam)",
        "FunctionPython": "def GetParam_Axis(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get system parameter settings for a single axis."
    },
    {
        "No": 327,
        "FunctionC++": "WMX3APIFUNC SetAxisParam(AxisParam *pParam, AxisParam *pParamError=NULL)",
        "FunctionPython": "def SetAxisParam(pParam)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Set axis parameters for all axes. "
--------------------------------------------
},
    {
        "No": 360,
        "FunctionC++": "WMX3APIFUNC GetMotionParam(int axis, MotionParam *pParam)",
        "FunctionPython": "def GetMotionParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get motion parameter settings for an axis. "
    },
    {
        "No": 361,
        "FunctionC++": "WMX3APIFUNC GetAlarmParam(int axis, AlarmParam *pParam)",
        "FunctionPython": "def GetAlarmParam(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Get alarm parameter settings for an axis. "
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
--------------------------------------------
◆SetLimitParam() 

WMX3APIFUNC 
SetLimitParam ( int axis, 
WMX3APIFUNC 
SetLimitParam ( int axis, 
LimitParam * pParam, 
LimitParam * pParamError = NULL) 
Set limit parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the limit 
parameters. 
[in] 
pParam A pointer to an object of 
the LimitParam class 
that contains the limit 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
LimitParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetMotionParam()
-----------------------------------------------------------------------------------
341. Instruction: Get motion parameter settings for an axis.
A: GetMotionParam(axis)
B: GetMotionParamsForAxis(axis)
C: StartPosToJog_PosToJog(numCommands, pPosToJogCommand)
D: SetMotionParam(axis, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
341. Model's answer: A
341. Correct answer: A
341. Result: Correct



Processing Question 342:
342. Context:
 ◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam()
--------------------------------------------
◆GetAlarmParam() 

WMX3APIFUNC 
GetAlarmParam ( 
WMX3APIFUNC 
GetAlarmParam ( 
int 
axis, 
AlarmParam * pParam 
) 
Get alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the alarm 
parameters 
[out] 
pParam A pointer to an object of 
the AlarmParam class 
that will contain the 
current alarm 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetSyncParam() 


WMX3APIFUNC 
GetSyncParam ( 
WMX3APIFUNC 
GetSyncParam ( 
int 
axis, 
SyncParam * pParam 
) 
Get the sync parameters of the axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the sync 
parameters 
A pointer to an object of 
the SyncParam class 
that will contain the 
current sync parameters 
of the axis. 
See also 
Parameters -Overview 

◆GetFlightRecorderParam()
--------------------------------------------
◆SetMotionParam() 

WMX3APIFUNC 
SetMotionParam 
( int axis, WMX3APIFUNC 
SetMotionParam 
( int axis, 
MotionParam * pParam, 
MotionParam * pParamError = NULL) 
Set motion parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the 
motion parameters. 
[in] 
pParam A pointer to an object of 
the MotionParam class 
that contains the motion 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
MotionParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetAlarmParam()
--------------------------------------------
◆SetAlarmParam() 

WMX3APIFUNC 
SetAlarmParam ( int axis, 
WMX3APIFUNC 
SetAlarmParam ( int axis, 
AlarmParam * pParam, 
AlarmParam * pParamError = NULL) 
Set alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to set the alarm 
parameters. 
[in] 
pParam A pointer to an object of 
the AlarmParam class 
that contains the alarm 
parameters to apply. 
[out] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AlarmParam object that 
is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
See also 
Parameters -Overview 

◆SetSyncParam()
-----------------------------------------------------------------------------------
342. Instruction: Get alarm parameter settings for an axis.
A: GetPosFeedback(axis)
B: GetAlarmParam(axis)
C: SetAlarmParam(axis, pParam)
D: DisarmAlarmParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
342. Model's answer: B
342. Correct answer: B
342. Result: Correct



Processing Question 343:
343. Context:
 Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSyncParam(int axis, 
SyncParam *pParam); 
Python 
Type 
def GetSyncParam(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SyncParam 
-param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetFlightRecorderParam 
(FlightRecorderParam 
*pParam); 
def 
GetFlightRecorderParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_FlightRecor 
derParam -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEmergencyStopPara 
m(EmergencyStopPara 
m *pParam); 
Python 
def 
GetEmergencyStopParam 
()
--------------------------------------------
◆GetAlarmParam() 

WMX3APIFUNC 
GetAlarmParam ( 
WMX3APIFUNC 
GetAlarmParam ( 
int 
axis, 
AlarmParam * pParam 
) 
Get alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the alarm 
parameters 
[out] 
pParam A pointer to an object of 
the AlarmParam class 
that will contain the 
current alarm 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetSyncParam() 


WMX3APIFUNC 
GetSyncParam ( 
WMX3APIFUNC 
GetSyncParam ( 
int 
axis, 
SyncParam * pParam 
) 
Get the sync parameters of the axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the sync 
parameters 
A pointer to an object of 
the SyncParam class 
that will contain the 
current sync parameters 
of the axis. 
See also 
Parameters -Overview 

◆GetFlightRecorderParam()
--------------------------------------------
◆RemoveAxisFromSyncGroup() 
WMX3APIFUNC 
RemoveAxisFromSy 
ncGroup ( 
) 
int 
groupId, 
int axis 
Remove an axis from an existing sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
axis The axis to remove from 
the sync group. 

Remarks 

This function removes an axis from the sync group. 

Calling this function on a sync group that is currently enabled will disable it. The 
sync group must be enabled again using the EnableSyncGroup function. 

◆EnableSyncGroup() 

WMX3APIFUNC 
EnableSyncGroup ( 
) 
WMX3APIFUNC 
EnableSyncGroup ( 
) 
int 
groupId, 
unsigned char enable 
Enable or disable a sync group. 

Parameters 
[in] 
groupId The sync group ID. This 
value must be between 0 
and maxSyncGroup -1. 
[in] 
enable 0: Disable the sync 
group; 1: Enable the 
sync group. 
Remarks 

This functions enables or disables a sync group. A sync group must be enabled 
before it has any effect. 

◆GetSyncGroupStatus()
--------------------------------------------
WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
-----------------------------------------------------------------------------------
343. Instruction: Get the sync parameters of the axis.
A: ClearSyncGroupError(groupId)
B: GetMotionParam(axis)
C: FetchSyncParam(axis)
D: GetSyncParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
343. Model's answer: D
343. Correct answer: D
343. Result: Correct



Processing Question 344:
344. Context:
 },
    {
        "No": 273,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 274,
        "FunctionC++": "WMX3APIFUNC StartVel(VelCommand *pVelCommand)",
        "FunctionPython": "def StartVel(pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start a velocity command."
--------------------------------------------
},
    {
        "No": 277,
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, VelCommand *pVelCommand)",
        "FunctionPython": "def StartVel(numCommands, pVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start velocity commands for multiple axes. "
    },
    {
        "No": 278,
        "FunctionC++": "WMX3APIFUNC StartVel(unsigned int numCommands, TimedVelCommand *pTimedVelCommand)",
        "FunctionPython": "def StartVel_TimedVel(numCommands, pTimedVelCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Start timed velocity commands for multiple axes"
--------------------------------------------
Start velocity commands for multiple 
axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 

*pTimedVelCommand) 

Start timed velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand) 

Start triggered velocity commands for 
multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand) 

Start triggered timed velocity commands 
for multiple axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, 
TriggerEvents *pTriggerEvents) 
Start triggered velocity commands with 


multiple trigger events for multiple axes. 

More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, TriggerEvents 
*pTriggerEvents) 
Start triggered timed velocity commands 
with multiple trigger events for multiple 
axes. More...
--------------------------------------------
WMX3APIFUNC StartVel (unsigned int numCommands, 
VelCommand *pVelCommand, double 
*pMaxTrqLimit) 
Start velocity commands for multiple 
axes and set the maximum torque limits 
of the commanded axes. More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TimedVelCommand 
*pTimedVelCommand, double 
*pMaxTrqLimit) 
Start timed velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerVelCommand *pVelCommand, 
double *pMaxTrqLimit) 
Start triggered velocity commands for 
multiple axes and set the maximum 
torque limits of the commanded axes. 
More... 

WMX3APIFUNC StartVel (unsigned int numCommands, 
TriggerTimedVelCommand 

*pTimedVelCommand, double 
*pMaxTrqLimit) 

Start triggered timed velocity commands 


for multiple axes and set the maximum 
torque limits of the commanded axes. 

More...
-----------------------------------------------------------------------------------
344. Instruction: Get flight recorder parameters.
A: GetFlightRecorderParam()
B: GetFlightRecorderParameters()
C: SetFlightRecorderPath(pPath)
D: StartVel(numCommands, pVelCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
344. Model's answer: B
344. Correct answer: A
344. Result: Wrong



Processing Question 345:
345. Context:
 Function 
C++ WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis, double dec); 
Python def Stop_Dec(axis, dec) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(unsigned int 
numCommands, 
StopCommand 
*pStopCommand); 
Python 
def 
Stop_StopCommand(num 
Commands, 
pStopCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Type int
--------------------------------------------
WMX3APIFUNC ExecQuickStop (int axis) 
Stop the motion of an axis using the 
Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 

Stop the motion of multiple axes using 
the Quick Stop Dec parameter. More... 

WMX3APIFUNC ExecTimedStop (int axis, double 
timeMilliseconds) 

Stop an axis that is currently in motion in 
the specified amount of time using a 
trapezoidal profile. More... 

WMX3APIFUNC ExecTimedStop (AxisSelection 


*pAxisSelection, double timeMilliseconds) 

Stop multiple axes that are currently in 
motion in the specified amount of time 
using a trapezoidal profile. More...
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Stop(int 
axis); 
Python def Stop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Stop(AxisSelection 
*pAxisSelection); 
Python 
def 
Stop_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(int axis); 
Python def ExecQuickStop(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ExecQuickStop(AxisSele 
ction *pAxisSelection); 
Python 
def 
ExecQuickStop_AxisSel(p 
AxisSelection) 
Type int
--------------------------------------------
More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
-----------------------------------------------------------------------------------
345. Instruction: Get emergency stop parameters.
A: GetEmergencyStopParams()
B: GetHomeParam(axis)
C: GetEmergencyStopParam()
D: StartLinearIntplPos(pLinearIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
345. Model's answer: C
345. Correct answer: C
345. Result: Correct



Processing Question 346:
346. Context:
 Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_Emergency 
StopParam -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDefaultParam(Syste 
mParam *pParam); 
Python 
def 
GetDefaultParam(pParam 
) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDefaultAxisParam(Ax 
isParam *pAxisParam); 
Python 
def 
GetDefaultAxisParam() 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_AxisParam default 
axis param 
Remarks
--------------------------------------------
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(SystemParam 
*pParam); 
def GetParam() 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
SetParam(int axis, 
SystemParam *pParam, 
SystemParam 
*pParamError = NULL); 
def SetParam_Axis(axis, 
pParam) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m param error 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetParam(int axis, 
SystemParam *pParam); 
def GetParam_Axis(axis) 
tuple
--------------------------------------------
Set system parameter settings for all 
axes. More... 

WMX3APIFUNC GetParam (SystemParam *pParam) 
Get system parameter settings for all 
axes. More... 

WMX3APIFUNC SetParam (int axis, SystemParam 
*pParam, SystemParam 
*pParamError=NULL) 
Set system parameter settings for a 
single axis. More... 

WMX3APIFUNC GetParam (int axis, SystemParam 
*pParam) 

Get system parameter settings for a 
single axis. More... 

WMX3APIFUNC SetAxisParam (AxisParam *pParam, 
AxisParam *pParamError=NULL) 


Set axis parameters for all axes. More... 

WMX3APIFUNC GetAxisParam (AxisParam *pParam) 
Get axis parameters for all axes. More... 

WMX3APIFUNC SetAxisParam (int axis, AxisParam 
*pParam, AxisParam 
*pParamError=NULL) 
Set axis parameters for a single axis. 
More... 

WMX3APIFUNC GetAxisParam (int axis, AxisParam 

*pParam) 

Get axis parameters for a single axis. 

More... 

WMX3APIFUNC SetGearRatio (int axis, double numerator, 

double denominator) 

Set the gear ratio of the axis. More...
-----------------------------------------------------------------------------------
346. Instruction: Get the default system parameters.
A: GetDefaultParamValue(paramName)
B: GetDefaultParam(pParam)
C: GetDefaultAxisParam()
D: Wait_WaitCondition_TimeMilli(pWaitCondition, waitTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
346. Model's answer: B
346. Correct answer: B
346. Result: Correct



Processing Question 347:
347. Context:
 Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
◆GetLimitParam() 

WMX3APIFUNC 
GetLimitParam ( 
WMX3APIFUNC 
GetLimitParam ( 
int 
axis, 
LimitParam * pParam 
) 
Get limit switch parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the limit 
parameters 
[out] 
pParam A pointer to an object of 
the LimitParam class 
that will contain the 
current limit parameters 
of the axis. 
See also 
Parameters -Overview 
◆ 
GetMotionParam() 


WMX3APIFUNC 
GetMotionParam ( 
WMX3APIFUNC 
GetMotionParam ( 
int 
axis, 
MotionParam * pParam 
) 
Get motion parameter settings for an axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the 
motion parameters 
A pointer to an object of 
the MotionParam class 
that will contain the 
current motion 
parameters of the axis. 
See also 
Parameters -Overview 

◆GetAlarmParam()
--------------------------------------------
◆GetAlarmParam() 

WMX3APIFUNC 
GetAlarmParam ( 
WMX3APIFUNC 
GetAlarmParam ( 
int 
axis, 
AlarmParam * pParam 
) 
Get alarm parameter settings for an axis. 
Parameters 
[in] 
axis The axis to get the alarm 
parameters 
[out] 
pParam A pointer to an object of 
the AlarmParam class 
that will contain the 
current alarm 
parameters of the axis. 
See also 
Parameters -Overview 
◆ 
GetSyncParam() 


WMX3APIFUNC 
GetSyncParam ( 
WMX3APIFUNC 
GetSyncParam ( 
int 
axis, 
SyncParam * pParam 
) 
Get the sync parameters of the axis. 

Parameters 
[in] 
[out] 
axis 
pParam 
The axis to get the sync 
parameters 
A pointer to an object of 
the SyncParam class 
that will contain the 
current sync parameters 
of the axis. 
See also 
Parameters -Overview 

◆GetFlightRecorderParam()
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_Emergency 
StopParam -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDefaultParam(Syste 
mParam *pParam); 
Python 
def 
GetDefaultParam(pParam 
) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m -param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDefaultAxisParam(Ax 
isParam *pAxisParam); 
Python 
def 
GetDefaultAxisParam() 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_AxisParam default 
axis param 
Remarks
-----------------------------------------------------------------------------------
347. Instruction: Get the default axis parameters.
A: GetDefaultAxisParams()
B: GetParam_Axis(axis)
C: GetDefaultAxisParam()
D: GetAlarmParam(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
347. Model's answer: C
347. Correct answer: C
347. Result: Correct



Processing Question 348:
348. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Function 
Returns Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam); 
def Export_SysPrm(pPath, 
pParam) 
int 
error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam); 
Remarks 
WMX3APIFUNC 
C++ 
Export(char *pPath, 
AxisParam 
Function 
Returns 
Python 
Type 
Value 
*pAxisParam); 
def 
Export_AxisPrm(pPath, 
pAxisParam) 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ 
Python 
Export(wchar_t *pPath, 
AxisParam 
*pAxisParam);
-----------------------------------------------------------------------------------
348. Instruction: Export system parameters to an xml file.
A: Export_SysPrm(pPath, pParam)
B: GetFeedbackParam(axis)
C: Export_SysPrm_Axis(pPath, pParam, axis)
D: Update_SysPrm(pConfigPath, pParameters)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
348. Model's answer: A
348. Correct answer: A
348. Result: Correct



Processing Question 349:
349. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
int axis); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
def 
Export_AxisPrm_Axis(pPa 
th, pAxisParam, axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
Returns 
Type 
Value 
Remarks 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam,
-----------------------------------------------------------------------------------
349. Instruction: Export axis parameters to an xml file.
A: Export_AxisParameters(path, axis_parameters)
B: SetAxisUnit(axis, unit)
C: Export_SysPrm_Axis(pPath, pParam, axis)
D: Export_AxisPrm(pPath, pAxisParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
349. Model's answer: D
349. Correct answer: D
349. Result: Correct



Processing Question 350:
350. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
◆Export() [11/12]
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis 
) 
Export system and axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 


[in] 
axis The axis to export the 
parameter settings. 

Remarks
-----------------------------------------------------------------------------------
350. Instruction: Export system and axis parameters to an xml file.
A: Export_SystemParameter_AxisParameter(filePath, paramValue, axisParameterValue)
B: StartPVT(AdvMotion_PVTCommand pPVTCommand)
C: Export_SysPrm_AxisPrm(pPath, pParam, pAxisParam)
D: Export_SysPrm(pPath, pParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
350. Model's answer: C
350. Correct answer: C
350. Result: Correct



Processing Question 351:
351. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
int axis); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
def 
Export_AxisPrm_Axis(pPa 
th, pAxisParam, axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
Returns 
Type 
Value 
Remarks 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam,
-----------------------------------------------------------------------------------
351. Instruction: Export system parameters of one axis to an xml file.
A: StartRampRateTrq(pTrqCommand, rampRate)
B: Update_SysPrm_Axis_Path(pNewPath, pParam, newAxis)
C: Export_AxisPrm_Axis(pPath, pAxisParam, axis)
D: Export_SysPrm_Axis(pPath, pParam, axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
351. Model's answer: D
351. Correct answer: D
351. Result: Correct



Processing Question 352:
352. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
int axis); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
def 
Export_AxisPrm_Axis(pPa 
th, pAxisParam, axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
AxisParam 
*pAxisParam, int axis); 
Python 
Returns 
Type 
Value 
Remarks 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam,
-----------------------------------------------------------------------------------
352. Instruction: Export axis parameters of one axis to an xml file.
A: Export_AxisParam_and_Axis_Params(path, axis_parameters, axis_value)
B: OverrideVel(pPosCommand)
C: Export_AxisPrm_Axis(pPath, pAxisParam, axis)
D: Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
352. Model's answer: C
352. Correct answer: C
352. Result: Correct



Processing Question 353:
353. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Returns Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
def 
Export_SysPrm_AxisPrm( 
pPath, pParam, 
pAxisParam) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(char *pPath, 
SystemParam *pParam, 
int axis); 
Python 
def 
Export_SysPrm_Axis(pPat 
h, pParam, axis) 
Type int
--------------------------------------------
Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
◆Export() [11/12]
WMX3APIFUNC 
Export ( 
char * 
pPath, 
SystemParam * pParam, 
AxisParam * pAxisParam, 
int axis 
) 
Export system and axis parameters of one axis to an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
save the parameter file 
to. 
[in] 
pParam A pointer to an object of 
the SystemParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 
[in] 
pAxisParam A pointer to an object of 
the AxisParam class 
that contains the 
parameters to be 
exported. Although this 
class contains parameter 
settings for all axes, only 
the parameter settings 
for the specified axis will 
be exported. 


[in] 
axis The axis to export the 
parameter settings. 

Remarks
-----------------------------------------------------------------------------------
353. Instruction: Export system parameters to an xml file.
A: ExecTimedStop_TimeMilli(axis, timeMilliseconds)
B: Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)
C: Export_SysPrm_AxisPrm_ByAxis(pPath, pParam, pAxisParam, axis)
D: Export_AxisPrm(pPath, pAxisParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
353. Model's answer: B
353. Correct answer: B
353. Result: Correct



Processing Question 354:
354. Context:
 WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [2/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
wchar_t * 
pPath, 
SystemParam * pParam 
) 
Import system parameters from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. 
Remarks 

This function is a variation of Import that accepts a wchar_t array for the file path 
string. Use this function when using Unicode character sets. 

The imported file itself is read using the same character set as Import. A file that is 
compatible with either version of this function is also compatible with the other. 

See also 

Parameters -Overview 

◆Import() [3/12]

WMX3APIFUNC 
Import ( 
WMX3APIFUNC 
Import ( 
char * 
pPath, 
AxisParam * pAxisParam 
) 
Import parameters from an xml file.
-----------------------------------------------------------------------------------
354. Instruction: Import system parameters from an xml file.
A: Export_SysPrm(pPath, pParam)
B: Import_SysPrm(pPath)
C: StartJog_TimedJog(pTimedJogCommand)
D: Load_System_Params(path_name)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
354. Model's answer: B
354. Correct answer: B
354. Result: Correct



Processing Question 355:
355. Context:
 WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file.
-----------------------------------------------------------------------------------
355. Instruction: Import axis parameters from an xml file.
A: SetFlightRecorderParam(axis, pParam)
B: Import_AxisPrm(pPath)
C: Update_AxisParms(path)
D: Export_AxisPrm(pPath, pAxisParam)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
355. Model's answer: B
355. Correct answer: B
355. Result: Correct



Processing Question 356:
356. Context:
 WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file.
-----------------------------------------------------------------------------------
356. Instruction: Import system and axis parameters from an xml file.
A: GetFeedbackParam(axis)
B: Import_SysPrm_AxisPrm(pPath)
C: Export_SysParam_AxisParam(pPath)
D: Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
356. Model's answer: B
356. Correct answer: B
356. Result: Correct



Processing Question 357:
357. Context:
 Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
Function 
AxisParam 
*pAxisParam, int axis); 
Python 
def 
Export_SysPrm_AxisPrm_ 
Axis(pPath, pParam, 
pAxisParam, axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Export(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam, int axis); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Import(char *pPath, 
SystemParam *pParam); 
Python def Import_SysPrm(pPath) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m -system param 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Import(wchar_t *pPath, 
SystemParam *pParam);
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
-----------------------------------------------------------------------------------
357. Instruction: Import system parameters of one axis from an xml file.
A: Update_SysPrm_Axis(pPath, axisName, newParamValues)
B: ReleaseEStop()
C: Export_SysPrm_Axis(pPath, pParam, axis)
D: Import_SysPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
357. Model's answer: D
357. Correct answer: D
357. Result: Correct



Processing Question 358:
358. Context:
 WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file.
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
Import(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam, int axis, 
AxisSelection 
*copyParamToAxes = 
NULL); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAndExportAll(char 
*pPath); 
Python 
def 
GetAndExportAll(pPath) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAndExportAll(wchar_ 
t *pPath); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ImportAndSetAll(char 
*pPath, SystemParam 
*pParamError = NULL, 
AxisParam 


Python 
Type Type 
*pAxisParamError = 
NULL); 
def ImportAndSetAll(path) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m -param error 
2 : 
Config_AxisParam param 
error 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
ImportAndSetAll(wchar_ 
t *pPath, SystemParam 
*pParamError = NULL, 
AxisParam 
*pAxisParamError = 
NULL); 
Remarks 

 


AdvancedMotion Class
-----------------------------------------------------------------------------------
358. Instruction: Import axis parameters of one axis from an xml file.
A: Export_AxisPrm_Axis(pPath, axis, updateParamOnAxes):
B: Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)
C: OverrideVel(pPosCommand)
D: Export_AxisPrm_Axis(pPath, pAxisParam, axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
358. Model's answer: B
358. Correct answer: B
358. Result: Correct



Processing Question 359:
359. Context:
 WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file.
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
--------------------------------------------
◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file. 

Parameters 
[in] 
pPath The absolute file path to 
load the parameter file 
from. 
[out] 
pParam A pointer to an object of 
the SystemParam class 
that will contain the 
parameters that are 
loaded. Although this 
class contains parameter 
settings for all axes, only 
the parameter values 
corresponding to the 
specified axis or axes 
will be modified by this 
function. 
[in] 
axis The axis to import the 
parameter settings. 
[in] 
copyParamToAxes An optional parameter 
that specifies a set to 
axes to copy the 
imported parameter 
settings to. The 
parameter settings 
imported for the 
specified axis will also 
be copied to the 
variables in pParam 
corresponding to the set 
of axes specified in 
copyParamToAxes. This 
can be used to apply the 
same set of parameters 
to multiple axes. 
Remarks
-----------------------------------------------------------------------------------
359. Instruction: Import system and axis parameters of one axis from an xml file.
A: Continue_AxisSel(pAxisSelection)
B: Import_System_Parameters_Axis_Parameters(axisPath, axisName, copyParametersToAllAxes)
C: Import_AxisPrm_Axis(pPath, axis, copyParamToAxes)
D: Import_SysPrm_AxisPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
359. Model's answer: D
359. Correct answer: D
359. Result: Correct



Processing Question 360:
360. Context:
 Get the default axis parameters. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 

*pParam) 

Export system parameters to an xml file. 


More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 

*pAxisParam) 

Export axis parameters to an xml file. 

More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Export system and axis parameters to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis)
--------------------------------------------
Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, int axis) 

Export system parameters of one axis to 
an xml file. More... 

WMX3APIFUNC Export (char *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, AxisParam 
*pAxisParam, int axis) 

Export axis parameters of one axis to an 
xml file. More... 

WMX3APIFUNC Export (char *pPath, SystemParam 


*pParam, AxisParam *pAxisParam, int 
axis) 

Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Export (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis) 
Export system and axis parameters of 
one axis to an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam)
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
Import(wchar_t *pPath, 
SystemParam *pParam, 
AxisParam 
*pAxisParam, int axis, 
AxisSelection 
*copyParamToAxes = 
NULL); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAndExportAll(char 
*pPath); 
Python 
def 
GetAndExportAll(pPath) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAndExportAll(wchar_ 
t *pPath); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ImportAndSetAll(char 
*pPath, SystemParam 
*pParamError = NULL, 
AxisParam 


Python 
Type Type 
*pAxisParamError = 
NULL); 
def ImportAndSetAll(path) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
Config_SystemPara 
m -param error 
2 : 
Config_AxisParam param 
error 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
ImportAndSetAll(wchar_ 
t *pPath, SystemParam 
*pParamError = NULL, 
AxisParam 
*pAxisParamError = 
NULL); 
Remarks 

 


AdvancedMotion Class
--------------------------------------------
opParam *pParam) EmergencyStopParam maxAxes 
In addition to the above functions, the GetDefaultParam and GetDefaultAxisParam functions can be 
used to obtain the default values of each parameter. These functions are useful for resetting parameter 
settings to the default values. 

Saving and Loading Parameters From File 

The WMX3 engine does not save parameter settings when it is closed. To restore the parameter 
settings the next time the WMX3 engine is started, the parameter settings must be saved by the user. 

Several functions are available for facilitating saving and loading parameter settings to and from file. In 
addition to these functions, it is always possible for the user to save the parameter settings using a 
different method of their choosing. 

Export functions are used to save parameter settings to file. Parameter settings that are not specified 
as arguments to the Export function are not saved to the file.
-----------------------------------------------------------------------------------
360. Instruction: Get the current parameters for all axes and export them to an xml file.
A: FetchAndSaveAllData(pDirectory)
B: StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(pCircularIntplCommand, pTriggerEvents)
C: GetDefaultParam(pParam)
D: GetAndExportAll(pPath)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
360. Model's answer: D
360. Correct answer: D
360. Result: Correct



Processing Question 361:
361. Context:
 The exported file itself uses the same character set as GetAndExportAll. Files 
created with either version of this function are identical. 

See also 

Parameters -Overview 

◆ImportAndSetAll() [1/2]
WMX3APIFUNC 
ImportAndSetAll ( char * pPath, 
SystemParam * pParamError = NULL, 
AxisParam * pAxisParamError = NULL) 
Imports parameters from an xml file and set them as the current parameters for all 
axes. 

Parameters 
[in] 
pPath The absolute file path to 


load the parameter file 
from. 
[in] 
pParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
SystemParam object 
that is passed to this 
argument will contain 0 if 
that parameter was valid 
and 1 if that parameter 
was invalid. 
[in] 
pAxisParamError An optional argument 
that returns which 
parameters were invalid. 
Each value inside the 
AxisParam object that is 
passed to this argument 
will contain 0 if that 
parameter was valid and 
1 if that parameter was 
invalid.
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam) 

Import system parameters from an xml 
file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 

*pAxisParam) 

Import axis parameters from an xml file. 

More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, AxisParam *pAxisParam) 

Import system and axis parameters from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More...
--------------------------------------------
WMX3APIFUNC Import (char *pPath, SystemParam 


*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 

Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, SystemParam 
*pParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system parameters of one axis 
from an xml file. More... 

WMX3APIFUNC Import (char *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (wchar_t *pPath, AxisParam 
*pAxisParam, int axis, AxisSelection 
*copyParamToAxes=NULL) 
Import axis parameters of one axis from 
an xml file. More... 

WMX3APIFUNC Import (char *pPath, SystemParam 
*pParam, AxisParam *pAxisParam, int 
axis, AxisSelection 
*copyParamToAxes=NULL) 
Import system and axis parameters of 
one axis from an xml file. More...
--------------------------------------------
See also 

Parameters -Overview 

◆Import() [8/12]
WMX3APIFUNC 
Import ( wchar_t * pPath, 
SystemParam * pParam, 
int axis, 
AxisSelection * copyParamToAxes = 
) 
Import system parameters of one axis from an xml file.
-----------------------------------------------------------------------------------
361. Instruction: Imports parameters from an xml file and set them as the current parameters for all axes.
A: ImportAndSetAll(path)
B: Import_SysPrm(pPath)
C: loadAndInitializeAll(path)
D: StartPos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
361. Model's answer: A
361. Correct answer: A
361. Result: Correct



Processing Question 362:
362. Context:
 },
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
},
    {
        "No": 504,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 505,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the specified error code."
--------------------------------------------
},
    {
        "No": 606,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 607,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
Public Attributes 

Friends 

AdvMotion * advMotion 

AdvVelocity * advVelocity 

AdvSync * advSync 

class AdvMotion 

class AdvVelocity 

class AdvSync 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
-----------------------------------------------------------------------------------
362. Instruction: Get a string representation of the specified error code.
A: CreatePathIntplWithRotationBuffer(channel, points)
B: ErrorToDescription(code)
C: ErrorToString(errCode)
D: StartPosToJog_PosToJog(pPosToJogCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
362. Model's answer: C
362. Correct answer: C
362. Result: Correct



Processing Question 363:
363. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
See also 

Extracting the API Log Information 

◆ 
ApiLogToString() [2/2] 



◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion()
--------------------------------------------
This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static ECAPIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static ECAPIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
363. Instruction: Get a string representation of the raw data of an API log.
A: SetLogOption(channel, pOption)
B: ApiLogToString(pLogData, logDataSize)
C: ApiLogDataToString(pApiLogData, apiLogDataSize)
D: FreeSplineBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
363. Model's answer: B
363. Correct answer: B
363. Result: Correct



Processing Question 364:
364. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 


Get the version of the module library. 

More... 

Public Attributes 

PMAxisControl * axisControl 
PMAxisMotion * motion 
PMAxisHome * home 
PMAxisVelocity * velocity 
PMAxisTorque * torque 
PMAxisControl::HomeProfiles * homeProfiles 
PMAxisControl::VelocityProfiles * velProfiles 
PMAxisControl::TorqueProfiles * trqProfiles 

Friends 

class PMAxisControl 
class PMAxisMotion 
class PMAxisHome 
class PMAxisVelocity 
class PMAxisTorque 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( int errCode, 
char * pString, 
unsigned int size 
) 

Get a string representation of the specified error code.
-----------------------------------------------------------------------------------
364. Instruction: Get the version of the module library.
A: StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
B: GetLibVersion()
C: FetchLibraryVersion():
D: GetMaxMotorSpeed(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
364. Model's answer: B
364. Correct answer: B
364. Result: Correct



Processing Question 365:
365. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
365. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetInAnalogDataUInt(addr)
B: IsDeviceValid()
C: IsDeviceValid(deviceID: string): boolean
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
365. Model's answer: B
365. Correct answer: B
365. Result: Correct



Processing Question 366:
366. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
366. Instruction: Get the version of the module rtdll.
A: SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)
B: GetAppVersion()
C: IsDeviceValid()
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
366. Model's answer: D
366. Correct answer: D
366. Result: Correct



Processing Question 367:
367. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
367. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid(device_id)
B: StartTwoLinkLinearMov(pTwoLinkCommand)
C: SetSyncMasterSlave(masterAxis, slaveAxis)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
367. Model's answer: D
367. Correct answer: D
367. Result: Correct



Processing Question 368:
368. Context:
 ◆CreateSplineBuffer() 
WMX3APIFUNC 
CreateSplineBuffer ( int channel, 

unsigned int points 
) 
unsigned int points 
) 
Allocate buffer memory for a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 
[in] 
points The number of points to 
allocate memory for. Each 
spline point occupies one 
point in the memory. Setting 
the sampleMultiplier 
parameter of a 
VelAccLimitedSplineComm 
and to a value greater than 1 
will multiply the number of 
points occupied by one spline 
point. For example, if 
sampleMultiplier is set to 10, 
each point in the spline will 
require 10 points worth of 
buffer memory to store. 

Remarks 

When the WMX3 engine is started, no memory is allocated for execution of spline motion 
commands. This function must be called before a spline motion command can be executed.
--------------------------------------------
WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a 3D path interpolation command 
without moving any axes. The move time, 
remain time, and total time after the 3D path 
interpolation runs for the specified distance are 
returned. More... 

AdvancedMotion * amApi 

Member Function Documentation 

◆CreateSplineBuffer() 
WMX3APIFUNC 
CreateSplineBuffer ( int channel, 

unsigned int points 
) 
unsigned int points 
) 
Allocate buffer memory for a spline execution channel.
--------------------------------------------
},
    {
        "No": 403,
        "FunctionC++": "WMX3APIFUNC CreateSplineBuffer(int channel, unsigned int points)",
        "FunctionPython": "def CreateSplineBuffer(channel, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory for a spline execution channel."
    },
    {
        "No": 404,
        "FunctionC++": "WMX3APIFUNC FreeSplineBuffer(int channel)",
        "FunctionPython": "def FreeSplineBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a spline execution channel."
--------------------------------------------
Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel.
-----------------------------------------------------------------------------------
368. Instruction: Allocate buffer memory for a spline execution channel.
A: CreateSplineBuffer(channel, points)
B: CreatePathIntplWithRotationBuffer(channel, points)
C: CreateSplineStructure(channel, points)
D: GetSplineBufferPoints(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
368. Model's answer: A
368. Correct answer: A
368. Result: Correct



Processing Question 369:
369. Context:
 The GetSplineBufferPoints function can be used to find the amount of buffer memory currently 
allocated to a spline execution channel. 

The GetSplineBytesPerPoint function can be used to convert the buffer memory size from points 
to bytes. 

See also 

Spline 

◆ 
FreeSplineBuffer() 

WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
Free buffer memory for a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 

Remarks 

This function frees the buffer memory that has been allocated with the CreateSplineBuffer 
function. This allows CreateSplineBuffer to be called again to allocate a different amount of 
memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes.
--------------------------------------------
},
    {
        "No": 403,
        "FunctionC++": "WMX3APIFUNC CreateSplineBuffer(int channel, unsigned int points)",
        "FunctionPython": "def CreateSplineBuffer(channel, points)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Allocate buffer memory for a spline execution channel."
    },
    {
        "No": 404,
        "FunctionC++": "WMX3APIFUNC FreeSplineBuffer(int channel)",
        "FunctionPython": "def FreeSplineBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a spline execution channel."
--------------------------------------------
The GetPathIntplWithRotationBytesPerPoint function can be used to convert the buffer memory 
size from points to bytes. 

See also 

Path Interpolation with Rotation 


◆FreePathIntplWithRotationBuffer() 
WMX3APIFUN 
C 
FreePathIntplWi 
thRotationBuffer ( 
int channel ) 
Free buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePathIntplWithRotationBuffer function. This allows CreatePathIntplWithRotationBuffer to 
be called again to allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose.
--------------------------------------------
Python def 
CreateSplineBuffer(chann 
el, points) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
FreeSplineBuffer(int 
channel); 
Python 
def 
FreeSplineBuffer(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSplineBufferPoints(i 
nt channel, unsigned int 
*pPoints); 
Python 
def 
GetSplineBufferPoints(cha 
nnel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -point 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSplineBytesPerPoint( 
unsigned int *pBytes); 
Python 
def 
GetSplineBytesPerPoint()
-----------------------------------------------------------------------------------
369. Instruction: Free buffer memory for a spline execution channel.
A: FreeSplineBuffer(channel_id)
B: FreePathIntplWithRotationBuffer(channel)
C: CreateSplineBuffer(channel, points)
D: FreeSplineBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
369. Model's answer: D
369. Correct answer: D
369. Result: Correct



Processing Question 370:
370. Context:
 The GetSplineBufferPoints function can be used to find the amount of buffer memory currently 
allocated to a spline execution channel. 

The GetSplineBytesPerPoint function can be used to convert the buffer memory size from points 
to bytes. 

See also 

Spline 

◆ 
FreeSplineBuffer() 

WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
WMX3APIFUN 
C 
FreeSplineBuffe 
r ( int channel ) 
Free buffer memory for a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 

Remarks 

This function frees the buffer memory that has been allocated with the CreateSplineBuffer 
function. This allows CreateSplineBuffer to be called again to allocate a different amount of 
memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes.
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetSplineBufferPoints() 

WMX3APIFUNC WMX3APIFUNC 
int
GetSplineBufferPoints ( 
) 
channel, 
unsigned int * pPoints 
Get the amount of buffer memory currently allocated to a spline execution channel. 

Parameters 
[in] 
channel The spline execution channel. 
The maximum number of 
available channels is 
maxSplineChannel. 
[out] 
pPoints A pointer to an unsigned int 
that will contain the number of 
points that can be stored in 
the buffer memory. 

Remarks 

This function obtains the amount of buffer memory currently allocated to a spline execution channel, 
in units of points. 

To convert the buffer memory size from the number of points to bytes, use the 
GetSplineBytesPerPoint function.
--------------------------------------------
WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a 3D path interpolation command 
without moving any axes. The move time, 
remain time, and total time after the 3D path 
interpolation runs for the specified distance are 
returned. More... 

AdvancedMotion * amApi 

Member Function Documentation 

◆CreateSplineBuffer() 
WMX3APIFUNC 
CreateSplineBuffer ( int channel, 

unsigned int points 
) 
unsigned int points 
) 
Allocate buffer memory for a spline execution channel.
-----------------------------------------------------------------------------------
370. Instruction: Get the amount of buffer memory currently allocated to a spline execution channel.
A: AddPathIntplWithRotationCommand(channel, pCommand)
B: FreeSplineBuffer(channel)
C: GetSplineBufferPoints(channel)
D: GetSplineBufferPoints(channel_name)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
370. Model's answer: C
370. Correct answer: C
370. Result: Correct



Processing Question 371:
371. Context:
 WMX3APIFUNC GetSplineBytesPerPoint (unsigned int *pBytes) 
Get the number of bytes required per point data 
in the spline execution buffer memory. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 
More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile.
--------------------------------------------
To convert the buffer memory size from the number of points to bytes, use the 
GetSplineBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will return 0 in the 
pPoints parameter. 

◆GetSplineBytesPerPoint() 

WMX3APIFUN 
C 
GetSplineBytes 
PerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetSplineBytes 
PerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the spline execution buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
},
    {
        "No": 405,
        "FunctionC++": "WMX3APIFUNC GetSplineBufferPoints(int channel, unsigned int *pPoints)",
        "FunctionPython": "def GetSplineBufferPoints(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the amount of buffer memory currently allocated to a spline execution channel. "
    },
    {
        "No": 406,
        "FunctionC++": "WMX3APIFUNC GetSplineBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetSplineBytesPerPoint()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the spline execution buffer memory."
-----------------------------------------------------------------------------------
371. Instruction: Get the number of bytes required per point data in the spline execution buffer memory.
A: GetSplineBytesPerPointV2()
B: GetSplineBytesPerPoint()
C: StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
D: GetPathIntplWithRotationBytesPerPoint()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
371. Model's answer: B
371. Correct answer: B
371. Result: Correct



Processing Question 372:
372. Context:
 WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
--------------------------------------------
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 

Start a triggered cubic spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More...
-----------------------------------------------------------------------------------
372. Instruction: Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions.
A: StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
B: StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
C: StartTwoLinkLinearPos(pTwoLinkCommand)
D: StartCSplinePos_PointTime_v2(channel, pSplineCommand, numPoints, pPoint, pTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
372. Model's answer: A
372. Correct answer: A
372. Result: Correct



Processing Question 373:
373. Context:
 which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the time at 
each point is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the total 
time to complete the spline is specified. The 
point positions are specified as relative positions. 
More... 


WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents)
--------------------------------------------
WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 
Start a triggered cubic spline motion command in
--------------------------------------------
with multiple trigger events in which the total 
time to complete the spline is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed using a motion profile. The point 
positions are specified as absolute positions. 
More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the spline is 
traversed while staying within the specified 
velocity and acceleration limits for each axis. 
The point positions are specified as absolute 
positions. More...
-----------------------------------------------------------------------------------
373. Instruction: Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions.
A: StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
B: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
C: UpdateCSplineTotalTime(channel, pSplineCommand, numPoints, pPoint)
D: StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
373. Model's answer: D
373. Correct answer: D
373. Result: Correct



Processing Question 374:
374. Context:
 which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 
Start a triggered cubic spline motion command in
--------------------------------------------
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
-----------------------------------------------------------------------------------
374. Instruction: Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions.
A: InitiateCubicSplinePositionProfile(channel, splineCommand, numPoints, points)
B: SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)
C: StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
D: StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
374. Model's answer: C
374. Correct answer: C
374. Result: Correct



Processing Question 375:
375. Context:
 The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic spline motion command 
with multiple trigger events in which the time at 
each point is specified. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
TriggerEvents *pTriggerEvents) 
Start a triggered cubic spline motion command
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
-----------------------------------------------------------------------------------
375. Instruction: Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions.
A: StartCubicSplineWithLimitedAcc(channel, pSplineCommand, numPoints, pPoint)
B: StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
C: StartPathIntplWithRotation_Pos(channel, double pos)
D: StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
375. Model's answer: B
375. Correct answer: B
375. Result: Correct



Processing Question 376:
376. Context:
 The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
-----------------------------------------------------------------------------------
376. Instruction: Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as relative positions.
A: StartTwoLinkLinearMov(pTwoLinkCommand)
B: StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
C: StartCSplineMov_PointTimeFromPointsList (channel, pSplineCommand, numPoints, pointsList, pointsTimeMilliseconds)
D: StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
376. Model's answer: B
376. Correct answer: B
376. Result: Correct



Processing Question 377:
377. Context:
 WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
--------------------------------------------
Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger)
--------------------------------------------
which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More...
-----------------------------------------------------------------------------------
377. Instruction: Start a cubic spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions.
A: StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
B: StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
C: StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
D: CalculateCSplineMov_TimeRemaining (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
377. Model's answer: B
377. Correct answer: B
377. Result: Correct



Processing Question 378:
378. Context:
 which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
--------------------------------------------
WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 
Start a triggered cubic spline motion command in
-----------------------------------------------------------------------------------
378. Instruction: Start a cubic spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions.
A: StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
B: StartCSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
C: StartCSplineMov_ProfileChanged(channel, pSplineCommand, numPoints, pPoint)
D: CreateSplineBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
378. Model's answer: A
378. Correct answer: A
378. Result: Correct



Processing Question 379:
379. Context:
 The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
-----------------------------------------------------------------------------------
379. Instruction: Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions.
A: StartCSplineMovement_VelocityAccelerationLimited(channel, pSplineCmd, numPts, pPts)
B: StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)
C: StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
D: GetPathIntplWithRotationBytesPerPoint()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
379. Model's answer: C
379. Correct answer: C
379. Result: Correct



Processing Question 380:
380. Context:
 WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
Function 
*pSplineCommand, 
double 
*pPointTimeMilliseconds); 
Python 
def 
StartCBSplinePos_PointTi 
me (channel, 
pSplineCommand, 
numPoints, pPoint, 
pPointTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartCBSplinePos(int 
channel, 
TotalTimeSplineComma 
nd *pSplineCommand, 
unsigned int numPoints, 
SplinePoint *pPoint); 
Python 
def 
StartCBSplinePos_TotalTi 
me (channel, 
pSplineCommand, 
numPoints, pPoint) 
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartCBSplinePos(int 
channel, 
ProfileSplineCommand 
*pSplineCommand, 
unsigned int numPoints, 
SplinePoint *pPoint);
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
-----------------------------------------------------------------------------------
380. Instruction: Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as absolute positions.
A: StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
B: StartCSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
C: StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
D: StartCubicSplinePositionWithTime (channel, splineCommand, numControlPoints, controlPointCoordinates, controlPointTimeArray)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
380. Model's answer: A
380. Correct answer: A
380. Result: Correct



Processing Question 381:
381. Context:
 Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger)
--------------------------------------------
which the time at each point is specified. The 
point positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
-----------------------------------------------------------------------------------
381. Instruction: Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as absolute positions.
A: SetupCBSplineMotion_TotalDuration(channel, pSplineCommand, numPoints, pPoint)
B: StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
C: StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
D: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
381. Model's answer: C
381. Correct answer: C
381. Result: Correct



Processing Question 382:
382. Context:
 WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 

Start a triggered cubic basis spline motion 
command in which the time at each point is
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
-----------------------------------------------------------------------------------
382. Instruction: Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as absolute positions.
A: StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
B: GetPathIntplWithRotationStatus(channel)
C: InitializeCBSplinePositionProfile(channel, splineType, numPositions, positions)
D: StartCSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
382. Model's answer: A
382. Correct answer: A
382. Result: Correct



Processing Question 383:
383. Context:
 absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 

Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 


TriggerEvents *pTriggerEvents)
-----------------------------------------------------------------------------------
383. Instruction: Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions.
A: StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
B: StartCubicSplinePosVelAccLimited(channel, pSplineCommand, numPoints, pPoint)
C: StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)
D: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
383. Model's answer: C
383. Correct answer: C
383. Result: Correct



Processing Question 384:
384. Context:
 WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger)
-----------------------------------------------------------------------------------
384. Instruction: Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as relative positions.
A: UpdateCBSplineMovementTiming(channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
B: StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
C: StartCBSplineMov_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
D: StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
384. Model's answer: C
384. Correct answer: C
384. Result: Correct



Processing Question 385:
385. Context:
 WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger)
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 


absolute positions. More...
--------------------------------------------
absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
-----------------------------------------------------------------------------------
385. Instruction: Start a cubic basis spline motion command in which the total time to complete the spline is specified. The point positions are specified as relative positions.
A: StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
B: SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)
C: EndCBSplineMov_TotalTime(channel, pSplineCommand, numPoints, pPoint)
D: StartCSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
385. Model's answer: A
385. Correct answer: A
385. Result: Correct



Processing Question 386:
386. Context:
 WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
Start a triggered cubic basis spline motion 
command in which the time at each point is 


specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the total time to complete the 
spline is specified. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger)
--------------------------------------------
WMX3APIFUNC StartCSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile. 
The point positions are specified as relative 
positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 


positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
Trigger *pTrigger) 
Start a triggered cubic basis spline motion 
command in which the spline is traversed using 
a motion profile. The point positions are 
specified as absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, Trigger 
*pTrigger) 

Start a triggered cubic basis spline motion 
command in which the time at each point is
-----------------------------------------------------------------------------------
386. Instruction: Start a cubic basis spline motion command in which the spline is traversed using a motion profile. The point positions are specified as relative positions.
A: StartCubicSplineMovementWithProfile(channel, splineCommand, numPoints, pointList)
B: StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
C: StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
D: StartPathIntpl3DMov(pPathIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
386. Model's answer: B
386. Correct answer: B
386. Result: Correct



Processing Question 387:
387. Context:
 absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the total time to complete the spline is 
specified. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed using a motion 
profile. The point positions are specified as 
relative positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 

Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
relative positions. More...
--------------------------------------------
WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
-----------------------------------------------------------------------------------
387. Instruction: Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions.
A: StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)
B: StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)
C: StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
D: StartCubicSplineMovementWithLimitedVelAcc(channel, pSplineCmd, numPoints, pPoints)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
387. Model's answer: A
387. Correct answer: A
387. Result: Correct



Processing Question 388:
388. Context:
 The motion will begin when the specified multi-event trigger condition is satisfied. 



◆CreatePathIntplBuffer() 
See also 
Spline, Trigger Events 
WMX3APIFUNC 
CreatePathIntplBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of path interpolation commands. 

Parameters 
[in] 
axis The axis to allocate the buffer 
memory. 
[in] 
points The number of points to 
allocate memory for. Each 
path interpolation segment 
and each circular interpolation 
segment inserted by auto 
smoothing occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of path interpolation 
commands. This function allocates memory to execute the following path interpolation commands: 

StartPathIntplPos 
StartPathIntplMov 
StartPathIntpl3DPos 
StartPathIntpl3DMov
--------------------------------------------
◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands. 

Parameters 
[in] 
axis The axis to allocate the 
buffer memory. 
[in] 
points The number of points to 
allocate memory for. 
Each PVT, PT, VT, or AT 


point occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of PVT 
motion commands. This function allocates memory to execute the following PVT 
motion commands: 


StartPVT 
StartPVT (Interpolation) 


StartPT 


StartVT 


StartAT
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
[out] 
pMoveTimeMilliseconds A pointer to a double 
type variable that will 
contain the amount of 
time elapsed when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 


[out] 
pRemainTimeMillisecon A pointer to a double 
type variable that will 
contain the amount of 
time remaining when the 
axes travel a distance 
equal to 
specificDistance. The 
units are milliseconds. 

[out] 
pTotalTimeMilliseconds A pointer to a double 
type variable that will 
contain the total time 
that the linear 
interpolation takes to 
complete. This value is 
always equal to the sum 
of the values returned by 
pMoveTime and 
pRemainTime. The units 
are milliseconds. 

◆CreatePVTBuffer() 
WMX3APIFUNC 
CreatePVTBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of PVT motion commands.
-----------------------------------------------------------------------------------
388. Instruction: Allocate buffer memory to an axis for the execution of path interpolation commands.
A: CreatePVTBuffer(axis, points)
B: StartCBSplinePos_TotalTime (channel, pSplineCommand, numPoints, pPoint)
C: CreatePathIntplBuffer(axis, unsigned points)
D: CreatePathInterpolatorBuffer(axis, unsigned int numPoints)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
388. Model's answer: C
388. Correct answer: C
388. Result: Correct



Processing Question 389:
389. Context:
 Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel.
--------------------------------------------
The motion will begin when the specified multi-event trigger condition is satisfied. 



◆CreatePathIntplBuffer() 
See also 
Spline, Trigger Events 
WMX3APIFUNC 
CreatePathIntplBuffer ( 
) 
int 
axis, 
unsigned int points 
Allocate buffer memory to an axis for the execution of path interpolation commands. 

Parameters 
[in] 
axis The axis to allocate the buffer 
memory. 
[in] 
points The number of points to 
allocate memory for. Each 
path interpolation segment 
and each circular interpolation 
segment inserted by auto 
smoothing occupies one point 
in the memory. 

Remarks 

When the WMX3 engine is started, no memory is allocated for the execution of path interpolation 
commands. This function allocates memory to execute the following path interpolation commands: 

StartPathIntplPos 
StartPathIntplMov 
StartPathIntpl3DPos 
StartPathIntpl3DMov
--------------------------------------------
Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
It is not necessary to free allocated memory using FreePathIntplBuffer before exiting the program. 
Any allocated memory is automatically freed when the WMX3 engine is closed. 

The GetPathIntplBufferPoints function can be used to find the amount of path interpolation buffer 
memory currently allocated to an axis. 

The GetPathIntplBytesPerPoint function can be used to convert the buffer memory size from 
points to bytes. 

See also 

Path Interpolation 

◆ 
FreePathIntplBuffer() 

WMX3APIFUN 
C 
WMX3APIFUN 
C 
FreePathIntplBu 
ffer ( 
int axis 
) 
Free path interpolation buffer memory for an axis. 
Parameters 
[in] 
axis The axis to free the buffer 
memory. 
Remarks 

This function frees the buffer memory that has been allocated with the CreatePathIntplBuffer 
function. This allows CreatePathIntplBuffer to be called again to allocate a different amount of 
memory.
-----------------------------------------------------------------------------------
389. Instruction: Free path interpolation buffer memory for an axis.
A: CreatePathIntplBuffer(axis, unsigned points)
B: FreePathIntplBuffer(axis)
C: ImproveFreePathIntplBuffer(axis)
D: StartPathIntplWithRotation_Point(channel, point)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
389. Model's answer: B
389. Correct answer: B
389. Result: Correct



Processing Question 390:
390. Context:
 It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplBufferPoints() 

WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
WMX3APIFUNC 
GetPathIntplBufferPoints ( int axis, 
unsigned int * pPoints 
) 
Get the amount of path interpolation buffer memory currently allocated to an axis. 

Parameters 
[in] 
axis The axis to read the buffer 
memory size. 
[out] 
pPoints A pointer to an unsigned int 
that will contain the number of 
points that can be stored in 
the buffer memory. 
Remarks 

This function obtains the amount of path interpolation buffer memory currently allocated to an axis, 
in units of points (interpolation segments). 

To convert the buffer memory size from the number of points to bytes, use the 
GetPathIntplBytesPerPoint function.
--------------------------------------------
Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
},
    {
        "No": 425,
        "FunctionC++": "WMX3APIFUNC GetPathIntplBufferPoints(int axis, unsigned int *pPoints)",
        "FunctionPython": "GetPathIntplBufferPoints(axis, pPoints)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the amount of path interpolation buffer memory currently allocated to an axis. "
    },
    {
        "No": 426,
        "FunctionC++": "WMX3APIFUNC GetPathIntplBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "GetPathIntplBytesPerPoint(pBytes)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the path interpolation buffer memory."
-----------------------------------------------------------------------------------
390. Instruction: Get the amount of path interpolation buffer memory currently allocated to an axis.
A: GetInterpolatedBufferPoints(axis, pPoints)
B: StartCBSplinePos_Profile (channel, pSplineCommand, numPoints, pPoint)
C: GetPathIntplBufferPoints(axis, pPoints)
D: GetPVTBufferPoints(axis, pPoints)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
390. Model's answer: C
390. Correct answer: C
390. Result: Correct



Processing Question 391:
391. Context:
 Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplLookaheadBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with look ahead buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
288, the number of bytes required to store 10000 points is 288*10000 = 2880000, or about 3MB. 

◆SetPathIntplLookaheadConfiguration()
--------------------------------------------
To convert the buffer memory size from the number of points to bytes, use the 
GetPathIntplBytesPerPoint function. 

If no buffer memory has been allocated to the specified channel yet, this function will return 0 in the 
pPoints parameter. 

◆GetPathIntplBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplByt 
esPerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation buffer memory. 

Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks
--------------------------------------------
The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplWithRotationBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with rotation buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
448, the number of bytes required to store 10000 points is 448*10000 = 4480000, or about 4MB.
-----------------------------------------------------------------------------------
391. Instruction: Get the number of bytes required per point data in the path interpolation buffer memory.
A: GetPathIntplLookaheadBytesPerPoint()
B: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
C: GetPathIntplBytesPerPoint(pBytes)
D: GetPathInterpolatedBytesPerPoint(prevBytes, nextBytes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
391. Model's answer: C
391. Correct answer: C
391. Result: Correct



Processing Question 392:
392. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
392. Instruction: Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplPos(pPathIntplCommand)
B: StopECAM(channel)
C: StartPathIntplMov(pPathIntplCommand)
D: StartPathInterpolatorPosition(pInterpolatorPathCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
392. Model's answer: A
392. Correct answer: A
392. Result: Correct



Processing Question 393:
393. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
See also 

3D Path Interpolation 

◆StartPathIntpl3DMov() [1/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as relative positions 
(relative to the command 
positions at the time that this 
function is executed). 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 


mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks
-----------------------------------------------------------------------------------
393. Instruction: Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
B: StartPathInterpolateMovement(pInterpolationPathCommand)
C: StartPathIntplMov(pPathIntplCommand)
D: StartPathIntpl3DPos(pPathIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
393. Model's answer: C
393. Correct answer: C
393. Result: Correct



Processing Question 394:
394. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
394. Instruction: Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)
B: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)
C: StartPathIntplPosWithTrigger(pInterpolatorPath, pTrigger)
D: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
394. Model's answer: D
394. Correct answer: B
394. Result: Wrong



Processing Question 395:
395. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
395. Instruction: Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)
B: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)
C: InitiatePathInterpolationMovement(pCommand, pTrigger)
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
395. Model's answer: B
395. Correct answer: B
395. Result: Correct



Processing Question 396:
396. Context:
 def 


Python 
StartPathIntplPos_Trigger 
Events(pPathIntplComma 
nd, pTriggerEvents, 
numAddlCommands, 
pPathIntplAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::AdvMotion::S 
tartPathIntplMov(PathInt 
plCommand *pPathIntplCo 
mmand, TriggerEvents *p 
TriggerEvents, unsigned i 
nt numAddlCommands = 
0, PathIntplAdditionalCom 
mand *pPathIntplAddlCom 
mand = NULL) 
"WMX3APIFUNC StartPat 
hIntplMov(PathIntplComm 
and *pPathIntplCommand, 
TriggerEvents *pTriggerE 
vents, unsigned int numAd 
dlCommands = 0, PathInt 
plAdditionalCommand *pP 
athIntplAddlCommand = N 
ULL);" 
Python 
def 
StartPathIntplMov_Trigger 
Events(pPathIntplComma 
nd, pTriggerEvents, 
numAddlCommands, 
pPathIntplAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 


C++ 

Function 

Python 

Type 

Returns 

Value 

Remarks 

wmx3Api::AdvMotion::S 
tartPathIntpl3DPos(PathI 
ntpl3DCommand *pPathIn 
tplCommand, unsigned int
--------------------------------------------
},
    {
        "No": 438,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 431,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 444,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents, unsigned int numAddlCommands=0, PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
-----------------------------------------------------------------------------------
396. Instruction: Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: GetLibVersion()
B: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)
C: StartPathInterpolationWithEventTriggers(pathInterpolationCommand, triggerEvents)
D: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
396. Model's answer: D
396. Correct answer: D
396. Result: Correct



Processing Question 397:
397. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
397. Instruction: Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
B: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
C: GetLibVersion()
D: StartPathInterpolationMove_TriggerEvents(pInterpolationCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
397. Model's answer: A
397. Correct answer: A
397. Result: Correct



Processing Question 398:
398. Context:
 The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Events 

◆OverridePathIntplVelocityMultiplier() 

WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
Override a path interpolation motion using a velocity multiplier. 

Parameters 
[in] 
axis The axis executing the path 
interpolation. 
[in] 
multiplier The velocity multiplier to 
apply. 
Remarks
--------------------------------------------
See also 
3D Path Interpolation, Trigger Events 

◆OverridePathIntpl3DVelocityMultiplier() 
WMX3APIFUNC 
OverridePathIntpl3DVelo 
cityMultiplier ( int axis, 
double multiplier 
) 
Override a 3D path interpolation motion using a velocity multiplier. 

Parameters 
[in] 
axis The axis executing the 3D 
path interpolation. 
[in] 
multiplier The velocity multiplier to 
apply. 

Remarks 

This function can be called while executing a 3D path interpolation to change the profile velocity by 
the specified factor. The interpolating axes will accelerate or decelerate to the new velocity using 
the acceleration or deceleration of the 3D path interpolation command. 

This function may be called multiple times. Each time this function is called, the new velocity is 
calculated as the original profile velocity of the 3D path interpolation multiplied by the specified 
velocity multiplier.
--------------------------------------------
Function 
"WMX3APIFUNC 
OverridePathIntplVelocity 
Multiplier(int axis, double 
multiplier);" 
Python 
def 
OverridePathIntplVelocity 
Multiplier(int axis, double 
multiplier); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntpl3DPos(PathI 
ntpl3DCommand 
*pPathIntplCommand); 
Python 
def 
StartPathIntpl3DPos(pPat 
hIntplCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntpl3DMov(Path 
Intpl3DCommand 
*pPathIntplCommand); 
Python 
def 
StartPathIntpl3DMov(pPat 
hIntplCommand) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
-----------------------------------------------------------------------------------
398. Instruction: Override a path interpolation motion using a velocity multiplier.
A: OverridePathInterpolatorVelocityMultiplier(int axisIndex, double newMultiplier)
B: StartPathIntpl3DMov(pPathIntplCommand)
C: OverridePathIntplVelocityMultiplier(int axis, double multiplier)
D: GetPathIntplBufferPoints(axis, pPoints)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
398. Model's answer: C
398. Correct answer: C
398. Result: Correct



Processing Question 399:
399. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
-----------------------------------------------------------------------------------
399. Instruction: Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: InitializePathInterpolation3DPosition(pathInterpolationCmd)
B: FreePathIntplWithRotationBuffer(channel)
C: StartPathIntplMov(pPathIntplCommand)
D: StartPathIntpl3DPos(pPathIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
399. Model's answer: D
399. Correct answer: D
399. Result: Correct



Processing Question 400:
400. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
400. Instruction: Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DMov(pPathIntplCommand)
B: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntplMov(pPathIntplCommand)
D: Start3DMovementPathInterpolation(pMovementPathCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
400. Model's answer: A
400. Correct answer: A
400. Result: Correct



Processing Question 401:
401. Context:
 },
    {
        "No": 438,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 436,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
--------------------------------------------
def 


Python 
StartPathIntplPos_Trigger 
Events(pPathIntplComma 
nd, pTriggerEvents, 
numAddlCommands, 
pPathIntplAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::AdvMotion::S 
tartPathIntplMov(PathInt 
plCommand *pPathIntplCo 
mmand, TriggerEvents *p 
TriggerEvents, unsigned i 
nt numAddlCommands = 
0, PathIntplAdditionalCom 
mand *pPathIntplAddlCom 
mand = NULL) 
"WMX3APIFUNC StartPat 
hIntplMov(PathIntplComm 
and *pPathIntplCommand, 
TriggerEvents *pTriggerE 
vents, unsigned int numAd 
dlCommands = 0, PathInt 
plAdditionalCommand *pP 
athIntplAddlCommand = N 
ULL);" 
Python 
def 
StartPathIntplMov_Trigger 
Events(pPathIntplComma 
nd, pTriggerEvents, 
numAddlCommands, 
pPathIntplAddlCommand) 
Returns 
Type int 
Value error code 
Remarks 


C++ 

Function 

Python 

Type 

Returns 

Value 

Remarks 

wmx3Api::AdvMotion::S 
tartPathIntpl3DPos(PathI 
ntpl3DCommand *pPathIn 
tplCommand, unsigned int
--------------------------------------------
},
    {
        "No": 437,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DMov(PathIntpl3DCommand *pPathIntplCommand, Trigger *pTrigger)",
        "FunctionPython": "def StartPathIntpl3DMov_Trigger(pPathIntplCommand, Trigger pTrigger)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
-----------------------------------------------------------------------------------
401. Instruction: Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DPos_TriggerWithOffset(pPathCommand, pTrigger, offset)
B: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
C: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)
D: SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
401. Model's answer: C
401. Correct answer: C
401. Result: Correct



Processing Question 402:
402. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
402. Instruction: Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DMov_TriggerWithCondition(pPathIntplCommand, Trigger pTrigger, Condition pCondition)
B: StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)
C: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
D: StartPathIntpl3DMov_Trigger(pPathIntplCommand, Trigger pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
402. Model's answer: D
402. Correct answer: D
402. Result: Correct



Processing Question 403:
403. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
403. Instruction: Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
B: UpdatePathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
C: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
D: StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
403. Model's answer: C
403. Correct answer: C
403. Result: Correct



Processing Question 404:
404. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
404. Instruction: Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: StartPathInterp3DMovementWithTriggers(pPathInterpolationCommand, pTriggerEvents)
B: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
C: StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
D: StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
404. Model's answer: C
404. Correct answer: C
404. Result: Correct



Processing Question 405:
405. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
405. Instruction: Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: UpdatePathIntplCommand(pPathIntplCommand, numAddlCommands, pAddedCommands)
B: StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
405. Model's answer: D
405. Correct answer: D
405. Result: Correct



Processing Question 406:
406. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
See also 

3D Path Interpolation 

◆StartPathIntpl3DMov() [1/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as relative positions 
(relative to the command 
positions at the time that this 
function is executed). 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 


mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks
-----------------------------------------------------------------------------------
406. Instruction: Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartInterpolatedMovementWithAdditionalCommands(pStartInterpolationCommand, numAdditionalCommands, pAdditionalInterpolationCommands)
B: ErrorToString(errCode)
C: StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
406. Model's answer: C
406. Correct answer: C
406. Result: Correct



Processing Question 407:
407. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
407. Instruction: Start an absolute position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
B: SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)
C: StartNewPathTrigger(pNewPathCommand, pTrigger, numAdditionalCommands, pAdditionalPathCommand)
D: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
407. Model's answer: D
407. Correct answer: D
407. Result: Correct



Processing Question 408:
408. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
408. Instruction: Start a relative position triggered path interpolation motion command. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger)
B: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntplMov_TriggerWithDelay(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
408. Model's answer: B
408. Correct answer: B
408. Result: Correct



Processing Question 409:
409. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
409. Instruction: Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
B: StartPathIntplPos_TriggerEvents_AdditionalCommands(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DMov(pPathIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
409. Model's answer: C
409. Correct answer: C
409. Result: Correct



Processing Question 410:
410. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
410. Instruction: Start a relative position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: CreatePathIntplWithRotationBuffer(channel, points)
B: UpdatePathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEventsList, numAdditionalCommands, pPathIntplAdditionalCommands)
C: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
410. Model's answer: C
410. Correct answer: C
410. Result: Correct



Processing Question 411:
411. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
411. Instruction: Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DPosWithAdditionalCommands(pPathIntplCmd, numAddlCmds, pAddlCmd)
B: StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
411. Model's answer: B
411. Correct answer: B
411. Result: Correct



Processing Question 412:
412. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
See also 

3D Path Interpolation 

◆StartPathIntpl3DMov() [1/3]
WMX3APIFUNC 
StartPathIntpl3DMov ( PathIntpl3DCommand * pPathIntplCommand, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start a relative position 3D path interpolation motion. This motion command combines line 
interpolation and circular interpolation in one path. 

Parameters 
[in] 
pPathIntplCommand A pointer to a 
PathIntplCommand that 
contains the path interpolation 
parameters. All positions are 
specified as relative positions 
(relative to the command 
positions at the time that this 
function is executed). 
[in] 
numAddlCommands An optional argument that 
specifies the number of 
additional commands to 
append after 
pPathIntplCommand. 
[in] 
pPathIntplAddlCommand An optional argument that is a 
pointer to an array of 
PathIntpl3DAdditionalCom 


mand objects. The size of the 
array should be equal to 
numAddlCommands. 

Remarks
-----------------------------------------------------------------------------------
412. Instruction: Start a relative position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: UpdatePathIntpl3DMov(pStartCommand, numAddlCommands, pAdditionalCommands)
B: StartCoordinatedPos(numCommands, pPosCommand)
C: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
412. Model's answer: D
412. Correct answer: D
412. Result: Correct



Processing Question 413:
413. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
413. Instruction: Start an absolute position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)
B: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
C: Start3DPathIntpl_PosTrigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
413. Model's answer: B
413. Correct answer: B
413. Result: Correct



Processing Question 414:
414. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
-----------------------------------------------------------------------------------
414. Instruction: Start a relative position triggered 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path.
A: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
B: StartPathIntplMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
C: StartPathIntpl3DMov_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DMov_Trigger(pPathCommand, pTriggerData, numAdditionalCmds, pAdditionalPathCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
414. Model's answer: C
414. Correct answer: C
414. Result: Correct



Processing Question 415:
415. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
See also 
3D Path Interpolation, Trigger Motion 

◆StartPathIntpl3DPos() [3/3]

WMX3APIFUNC 
StartPathIntpl3DPos 
( 
PathIntpl3DCommand * pPathIntplCommand, 
TriggerEvents * pTriggerEvents, 
unsigned int numAddlCommands = 0, 
PathIntpl3DAdditionalC pPathIntplAddlCommand 
) 
Start an absolute position triggered 3D path interpolation motion command with multiple trigger 
events. This motion combines line interpolation and circular interpolation in one path.
-----------------------------------------------------------------------------------
415. Instruction: Start an absolute position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: UpdatePathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAdditionalCommands, pPathIntplAdditionalCommand)
B: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
C: StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)
D: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
415. Model's answer: B
415. Correct answer: B
415. Result: Correct



Processing Question 416:
416. Context:
 Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered path 
interpolation motion command. This motion 
combines line interpolation and circular 
interpolation in one path. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position triggered path 
interpolation motion command with multiple
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
416. Instruction: Start a relative position triggered 3D path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path.
A: StartPathIntplPos_Trigger(pPathIntplCommand, pTrigger)
B: StartPathIntpl3DMov_TriggerEvents(pPathCommand, pEventsToTrigger, numAdditionalCommands, pAdditionalPathCommand)
C: StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
D: StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
416. Model's answer: D
416. Correct answer: D
416. Result: Correct



Processing Question 417:
417. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
--------------------------------------------
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 

Start a relative position triggered path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntplVelocityMultiplier (int axis, 
double multiplier) 

Override a path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start an absolute position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
Function 
"WMX3APIFUNC 
OverridePathIntplVelocity 
Multiplier(int axis, double 
multiplier);" 
Python 
def 
OverridePathIntplVelocity 
Multiplier(int axis, double 
multiplier); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntpl3DPos(PathI 
ntpl3DCommand 
*pPathIntplCommand); 
Python 
def 
StartPathIntpl3DPos(pPat 
hIntplCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntpl3DMov(Path 
Intpl3DCommand 
*pPathIntplCommand); 
Python 
def 
StartPathIntpl3DMov(pPat 
hIntplCommand) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
The numAddlCommands and pPathIntplAddlCommand optional arguments can be specified to 
append additional segments to the path interpolation command after the segments defined in 
pPathIntplCommand. The pPathIntplAddlCommand argument is specified as a pointer to an 
array, and any number of additional commands may be specified as long as the path interpolation 
memory buffer for the commanded axis (created with CreatePathIntplBuffer) is large enough to 
hold all segments that are defined in pPathIntplCommand and pPathIntplAddlCommand. 

See also 
Path Interpolation, Trigger Events 

◆OverridePathIntplVelocityMultiplier() 

WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
WMX3APIFUNC 
OverridePathIntplVelocit 
yMultiplier ( int axis, 
double multiplier 
) 
Override a path interpolation motion using a velocity multiplier. 

Parameters 
[in] 
axis The axis executing the path 
interpolation. 
[in] 
multiplier The velocity multiplier to 
apply. 
Remarks
-----------------------------------------------------------------------------------
417. Instruction: Override a 3D path interpolation motion using a velocity multiplier.
A: GetPathIntplLookaheadStatus(channel)
B: OverridePathIntpl3DVelocityMultiplier(int axis, double multiplier)
C: AdjustPathInterpolation3DVelocityMultiplier(int axisToAdjust, double newMultiplier)
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
417. Model's answer: B
417. Correct answer: B
417. Result: Correct



Processing Question 418:
418. Context:
 Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel.
--------------------------------------------
Function 
C++ 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer(int channel, 
unsigned int points); 
Python 
def 
CreatePathIntplWithRotati 
onBuffer(channel, points) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
FreePathIntplWithRotati 
onBuffer(int channel); 
Python 
def 
FreePathIntplWithRotation 
Buffer(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nBytesPerPoint(unsigne 
d int *pBytes); 
Python 
def 
GetPathIntplWithRotation 
BytesPerPoint() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -bytes 
Remarks 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
--------------------------------------------
Note that the center of rotation does not have to be at the center of the shape of the path. It 
can be anywhere inside or outside the shape of the path. 

Sequence of Function Calls 

To execute path interpolation with rotation, four functions must be called in the following 
order: 

1. CreatePathIntplWithRotationBuffer 
This function allocates the buffer memory space that stores the command data for 
path interpolation with rotation. Once buffer memory space is allocated for a path 
interpolation with rotation channel with this function, this function does not need to be 
called again until the engine is restarted. This function may fail if contiguous memory
-----------------------------------------------------------------------------------
418. Instruction: Allocate buffer memory for a path interpolation with rotation channel.
A: CreatePathWithRotationBufferAndWaypoints(channel, waypoints)
B: CreatePathIntplWithRotationBuffer(channel, points)
C: StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
D: ClearPathIntplWithRotation(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
418. Model's answer: B
418. Correct answer: B
418. Result: Correct



Processing Question 419:
419. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
The GetPathIntplWithRotationBytesPerPoint function can be used to convert the buffer memory 
size from points to bytes. 

See also 

Path Interpolation with Rotation 


◆FreePathIntplWithRotationBuffer() 
WMX3APIFUN 
C 
FreePathIntplWi 
thRotationBuffer ( 
int channel ) 
Free buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePathIntplWithRotationBuffer function. This allows CreatePathIntplWithRotationBuffer to 
be called again to allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose.
--------------------------------------------
Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel.
-----------------------------------------------------------------------------------
419. Instruction: Free buffer memory for a path interpolation with rotation channel.
A: StartPathIntplWithRotation(channel)
B: FreePathIntplWithRotationBuffer(channel)
C: FreePathIntplWithRotationBuffer(channel, interpolation_type)
D: StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
419. Model's answer: B
419. Correct answer: B
419. Result: Correct



Processing Question 420:
420. Context:
 WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with rotation buffer 
memory. More... 

WMX3APIFUNC SetPathIntplWithRotationConfiguration (int 
channel, PathIntplWithRotationConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC AddPathIntplWithRotationCommand (int 
channel, PathIntplWithRotationCommand 
*pCommand) 
Add interpolation commands to a path 
interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel) 
Execute motion for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, Trigger 
*pTrigger) 

Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More...
--------------------------------------------
Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplWithRotationBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplWit 
hRotationBytes 
PerPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with rotation buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
448, the number of bytes required to store 10000 points is 448*10000 = 4480000, or about 4MB.
--------------------------------------------
},
    {
        "No": 454,
        "FunctionC++": "WMX3APIFUNC FreePathIntplWithRotationBuffer(int channel)",
        "FunctionPython": "def FreePathIntplWithRotationBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Free buffer memory for a path interpolation with rotation channel."
    },
    {
        "No": 455,
        "FunctionC++": "WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint(unsigned int *pBytes)",
        "FunctionPython": "def GetPathIntplWithRotationBytesPerPoint()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the number of bytes required per point data in the path interpolation with rotation buffer memory."
-----------------------------------------------------------------------------------
420. Instruction: Get the number of bytes required per point data in the path interpolation with rotation buffer memory.
A: GetPathInterpolationWithRotationBytesPerPoint()
B: FreePathIntplWithRotationBuffer(channel)
C: GetPathIntplWithRotationBytesPerPoint()
D: ResolveConstantLinearVel(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
420. Model's answer: C
420. Correct answer: C
420. Result: Correct



Processing Question 421:
421. Context:
 Function 
C++ 
SetPathIntplWithRotatio 
nConfiguration(int 
channel, 
PathIntplWithRotationCo 
nfiguration *pConfig); 
Python 
def 
SetPathIntplWithRotation 
Configuration(channel, 
AdvMotion_PathIntplWith 
RotationConfiguration 
pConfig) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddPathIntplWithRotatio 
nCommand(int channel, 
PathIntplWithRotationCo 
mmand *pCommand); 
Python 
def 
AddPathIntplWithRotation 
Command(channel, 
pCommand) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntplWithRotati 
on(int channel); 
Python 
def 
StartPathIntplWithRotation 
(channel) 
Type int
--------------------------------------------
WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with rotation buffer 
memory. More... 

WMX3APIFUNC SetPathIntplWithRotationConfiguration (int 
channel, PathIntplWithRotationConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC AddPathIntplWithRotationCommand (int 
channel, PathIntplWithRotationCommand 
*pCommand) 
Add interpolation commands to a path 
interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel) 
Execute motion for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, Trigger 
*pTrigger) 

Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More...
--------------------------------------------
◆SetPathIntplWithRotationConfiguration() 

WMX3APIFUNC 
SetPathIntplWithRotatio 
nConfiguration ( int channel, 
WMX3APIFUNC 
SetPathIntplWithRotatio 
nConfiguration ( int channel, 
PathIntplWithRotationC pConfig 
) 
Set the configuration data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pConfig A pointer to an 
PathIntplWithRotationConfi 
guration object that contains 
the path interpolation with 
rotation configuration data. 
Remarks 

This function configures a path interpolation with rotation channel with data required for operation, 
such as the commanded axes. 

This function must be called before interpolation commands can be added to the path interpolation 
with rotation channel with the AddPathIntplWithRotationCommand function.
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
-----------------------------------------------------------------------------------
421. Instruction: Set the configuration data for a path interpolation with rotation channel.
A: SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)
B: SetPathIntplAndRotateConfiguration(channel, AdvMotion_PathIntplAndRotateConfiguration pConfig)
C: StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)
D: SetPathIntplWithRotationConfiguration(channel, AdvMotion_PathIntplWithRotationConfiguration pConfig)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
421. Model's answer: D
421. Correct answer: D
421. Result: Correct



Processing Question 422:
422. Context:
 WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
This function must be called before interpolation commands can be added to the path interpolation 
with rotation channel with the AddPathIntplWithRotationCommand function. 

Before configuring a path interpolation with rotation channel, buffer memory for path interpolation 
with rotation must be allocated using the CreatePathIntplWithRotationBuffer function. 

◆AddPathIntplWithRotationCommand() 

WMX3APIFUNC 
AddPathIntplWithRotatio 
nCommand ( int channel, 
WMX3APIFUNC 
AddPathIntplWithRotatio 
nCommand ( int channel, 
PathIntplWithRotationC pCommand 
) 
Add interpolation commands to a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pCommand A pointer to a 
PathIntplWithRotationCom 
mand object that contains the 
path interpolation with rotation 
command data. 

Remarks
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
422. Instruction: Add interpolation commands to a path interpolation with rotation channel.
A: StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
B: AddPathIntplWithRotationCommand(channel, pCommand)
C: AddPathWithRotationIntplCommand(channel, pCommand)
D: CreatePathIntplWithRotationBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
422. Model's answer: B
422. Correct answer: B
422. Result: Correct



Processing Question 423:
423. Context:
 Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, TriggerEvents 
*pTriggerEvents, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position triggered 3D path 
interpolation motion command with multiple 
trigger events. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC OverridePathIntpl3DVelocityMultiplier (int axis, 
double multiplier) 

Override a 3D path interpolation motion using a 
velocity multiplier. More... 

WMX3APIFUNC CreatePathIntplWithRotationBuffer (int channel, 
unsigned int points) 


Allocate buffer memory for a path interpolation 
with rotation channel. More... 

WMX3APIFUNC FreePathIntplWithRotationBuffer (int channel) 
Free buffer memory for a path interpolation with 
rotation channel. More... 

WMX3APIFUNC GetPathIntplWithRotationBytesPerPoint 
(unsigned int *pBytes)
-----------------------------------------------------------------------------------
423. Instruction: Execute motion for a path interpolation with rotation channel.
A: SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)
B: StartPathWithRotation(channel, rotation_angle)
C: ClearPathIntplWithRotation(channel)
D: StartPathIntplWithRotation(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
423. Model's answer: D
423. Correct answer: D
423. Result: Correct



Processing Question 424:
424. Context:
 Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
If a path interpolation with rotation is executed partway, and then a commanded axis is moved using 
a different function, this function will return an error. If the path interpolation with rotation is stopped 
with another function such as ExecQuickStop, this function will return an error. In this case, the 
path must be reset by calling ClearPathIntplWithRotation and then the path must be defined 
again. 

Point segment commands must be added to the path interpolation with rotation channel using the 
AddPathIntplWithRotationCommand function before this function is called. This function can be 
executed as long as the path contains at least one point segment. 

See also 

Path Interpolation with Rotation 

◆StartPathIntplWithRotation() [2/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
Trigger * pTrigger 
) 
Execute triggered motion for a path interpolation with rotation channel. The motion starts when the
--------------------------------------------
},
    {
        "No": 463,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
-----------------------------------------------------------------------------------
424. Instruction: Execute triggered motion for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.
A: StartPathIntplWithRotation_Trigger(channel_id, trigger_point)
B: StartPathIntplWithRotation_Trigger(channel, pTrigger)
C: StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)
D: StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
424. Model's answer: B
424. Correct answer: B
424. Result: Correct



Processing Question 425:
425. Context:
 Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
trigger condition is satisfied. 
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation 
will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [3/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is satisfied.
--------------------------------------------
},
    {
        "No": 463,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, double pos, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
-----------------------------------------------------------------------------------
425. Instruction: Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.
A: StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents triggerEvents)
B: ApiLogToString(pLogData, logDataSize)
C: StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)
D: StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
425. Model's answer: D
425. Correct answer: D
425. Result: Correct



Processing Question 426:
426. Context:
 Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation 
will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆StartPathIntplWithRotation() [4/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos 
) 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos 
) 
Execute motion to the specified position for a path interpolation with rotation channel.
--------------------------------------------
This function is able to move the axes to any position along the path, even positions that are 
partway along segments. 

It is not trivial to convert a specific X and Y position along the path to a distance that can be passed 
to this function. This function should mostly be used to move relative distances from the current 
position along the path (this position can be obtained from the PathIntplWithRotationStatus.pos 
status). To move to a specific point, use the StartPathIntplWithRotation(int channel, unsigned 
int point) function instead. 

See also 

Path Interpolation with Rotation 


◆StartPathIntplWithRotation() [5/9]
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( 
int 
double 
Trigger * 
channel, 
pos, 
pTrigger 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel. The 
motion starts when the trigger condition is satisfied.
-----------------------------------------------------------------------------------
426. Instruction: Execute motion to the specified position for a path interpolation with rotation channel.
A: GetLibVersion()
B: StartPathIntplWithRotation_Pos(channel, double pos)
C: InitializePathInterpolationWithRotation_Pos(channel, double initialPos)
D: StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
426. Model's answer: B
426. Correct answer: B
426. Result: Correct



Processing Question 427:
427. Context:
 WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
This function is able to move the axes to any position along the path, even positions that are 
partway along segments. 

It is not trivial to convert a specific X and Y position along the path to a distance that can be passed 
to this function. This function should mostly be used to move relative distances from the current 
position along the path (this position can be obtained from the PathIntplWithRotationStatus.pos 
status). To move to a specific point, use the StartPathIntplWithRotation(int channel, unsigned 
int point) function instead. 

See also 

Path Interpolation with Rotation 


◆StartPathIntplWithRotation() [5/9]
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( 
int 
double 
Trigger * 
channel, 
pos, 
pTrigger 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel. The 
motion starts when the trigger condition is satisfied.
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [6/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when the trigger condition is satisfied.
-----------------------------------------------------------------------------------
427. Instruction: Execute triggered motion to the specified position for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.
A: PathIntplWithRotation_Pos_Trigger(channel, double targetPos, Trigger pTrigger)
B: StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)
C: SimulateTimeAtDist(pPathIntplCommand, specificDistance)
D: StartPathIntplWithRotation_Pos_Trigger(channel, double pos, Trigger pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
427. Model's answer: D
427. Correct answer: D
427. Result: Correct



Processing Question 428:
428. Context:
 Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [6/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
double pos, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion to the specified position for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when the trigger condition is satisfied.
--------------------------------------------
trigger condition is satisfied. 
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel), except the path interpolation 
will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [3/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion for a path interpolation with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is satisfied.
-----------------------------------------------------------------------------------
428. Instruction: Execute triggered motion to the specified position for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.
A: StartPathIntplWithRotation_TriggerEvents(channel, TriggerEvents pTriggerEvents)
B: ResolveConstantLinearVel(axis)
C: StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)
D: UpdatePathIntplWithRotation_Pos_TriggerEvents(channel, double position, TriggerEvents triggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
428. Model's answer: C
428. Correct answer: C
428. Result: Correct



Processing Question 429:
429. Context:
 WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
Function 
C++ StartPathIntplWithRotati 
on(int channel, unsigned 
int point); 
Python 
def 
StartPathIntplWithRotation 
_Point(channel, point) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntplWithRotati 
on(int channel, unsigned 
int point, Trigger 
*pTrigger); 
Python 
def 
StartPathIntplWithRotation 
_Point_Trigger(channel, 
point, Trigger pTrigger) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPathIntplWithRotati 
on(int channel, unsigned 
int point, TriggerEvents 
*pTriggerEvents); 
Python 
def 
StartPathIntplWithRotation 
_Point_TriggerEvents(cha 
nnel, point, TriggerEvents 
pTriggerEvents) 
Returns 
Type int 
Value error code
--------------------------------------------
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when 
the trigger condition is satisfied. More... 
WMX3APIFUNC ClearPathIntplWithRotation (int channel) 
Clear all data for a path interpolation with 
rotation channel. More... 
WMX3APIFUNC GetPathIntplWithRotationStatus (int channel, 
PathIntplWithRotationStatus *pStatus) 
Get the current status for a path inteprolation 
with rotation channel. More... 
WMX3APIFUNC CreatePathIntplLookaheadBuffer (int channel, 
unsigned int points) 
Allocate buffer memory for a path interpolation 
with look ahead channel. More...
-----------------------------------------------------------------------------------
429. Instruction: Execute motion to the specified point for a path interpolation with rotation channel.
A: StartPathIntplWithRotation_Trigger(channel, pTrigger)
B: StartPathIntplWithRotation_Point(channel, point)
C: EndPathIntplWithRotation_Point(channel, endpoint)
D: ErrorToString(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
429. Model's answer: B
429. Correct answer: B
429. Result: Correct



Processing Question 430:
430. Context:
 WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆StartPathIntplWithRotation() [7/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
Execute motion to the specified point for a path interpolation with rotation channel.
--------------------------------------------
See also 

Path Interpolation with Rotation 

◆StartPathIntplWithRotation() [8/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
Trigger * pTrigger 
) 
Execute triggered motion to the specified point for a path interpolation with rotation channel. The 
motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
point The target point to move to. 
[in] 
pTrigger A pointer to an Trigger object 
that defines the trigger 
condition. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except 
the path interpolation will start executing after the specified trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Motion
-----------------------------------------------------------------------------------
430. Instruction: Execute triggered motion to the specified point for a path interpolation with rotation channel. The motion starts when the trigger condition is satisfied.
A: InitiatePathInterpolationWithRotation_Point_Activate(channel, point, Trigger pTrigger)
B: ErrorToString(errCode)
C: StartPathIntplWithRotation_Point_Trigger(channel, point, Trigger pTrigger)
D: StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
430. Model's answer: C
430. Correct answer: C
430. Result: Correct



Processing Question 431:
431. Context:
 WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
pos The target position along the 
path to move to. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, double pos), except the path 
interpolation will start executing after the specified multi-event trigger condition is satisfied. 

See also 
Path Interpolation with Rotation, Trigger Events 

◆StartPathIntplWithRotation() [7/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point 
) 
Execute motion to the specified point for a path interpolation with rotation channel.
--------------------------------------------
See also 
Path Interpolation with Rotation, Trigger Motion 

◆StartPathIntplWithRotation() [9/9]

WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
WMX3APIFUNC 
StartPathIntplWithRotati 
on ( int channel, 
unsigned int point, 
TriggerEvents * pTriggerEvents 
) 
Execute triggered motion to the specified point for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when the trigger condition is satisfied. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[in] 
point The target point to move to. 
[in] 
pTriggerEvents A pointer to an TriggerEvents 
object that defines the trigger 
events. 

Remarks 

This function is similar to StartPathIntplWithRotation(int channel, unsigned int point), except 
the path interpolation will start executing after the specified multi-event trigger condition is satisfied.
-----------------------------------------------------------------------------------
431. Instruction: Execute triggered motion to the specified point for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied.
A: StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)
B: StartInterpolatorWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)
C: StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)
D: CreatePathIntplLookaheadBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
431. Model's answer: A
431. Correct answer: A
431. Result: Correct



Processing Question 432:
432. Context:
 Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
WMX3APIFUNC 
ClearPathIntplWithRotati 
on(int channel); 
def 
ClearPathIntplWithRotatio 
n(channel) 
int 
error code 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus(int channel, 
PathIntplWithRotationSt 
atus *pStatus); 
def 
GetPathIntplWithRotation 
Status(channel) 
tuple 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plWithRotationStatu 
s -status 
WMX3APIFUNC 
CreatePathIntplLookahe 
adBuffer(int channel, 
unsigned int points); 
def 
CreatePathIntplLookahea
--------------------------------------------
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when 
the trigger condition is satisfied. More... 
WMX3APIFUNC ClearPathIntplWithRotation (int channel) 
Clear all data for a path interpolation with 
rotation channel. More... 
WMX3APIFUNC GetPathIntplWithRotationStatus (int channel, 
PathIntplWithRotationStatus *pStatus) 
Get the current status for a path inteprolation 
with rotation channel. More... 
WMX3APIFUNC CreatePathIntplLookaheadBuffer (int channel, 
unsigned int points) 
Allocate buffer memory for a path interpolation 
with look ahead channel. More...
--------------------------------------------
See also 
Path Interpolation with Rotation, Trigger Events 

◆ClearPathIntplWithRotation() 

WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
Clear all data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function clears all data for a path interpolation with rotation channel, including any existing 
point segment commands and configuration settings. Use this function if a path interpolation with 
rotation channel must be reset. 

◆GetPathIntplWithRotationStatus() 

WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
PathIntplWithRotationSpStatus 
) 
Get the current status for a path inteprolation with rotation channel.
--------------------------------------------
},
    {
        "No": 466,
        "FunctionC++": "WMX3APIFUNC StartPathIntplWithRotation(int channel, unsigned int point, TriggerEvents *pTriggerEvents)",
        "FunctionPython": "def StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Execute triggered motion to the specified point for a path interpolation with rotation channel with multiple trigger events. The motion starts when the trigger condition is satisfied."
    },
    {
        "No": 467,
        "FunctionC++": "WMX3APIFUNC ClearPathIntplWithRotation(int channel)",
        "FunctionPython": "def ClearPathIntplWithRotation(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Clear all data for a path interpolation with rotation channel."
-----------------------------------------------------------------------------------
432. Instruction: Clear all data for a path interpolation with rotation channel.
A: ClearPathIntplWithRotation(channel, enableRotation)
B: ClearPathIntplWithRotation(channel)
C: FreePathIntplWithRotationBuffer(channel)
D: StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
432. Model's answer: B
432. Correct answer: B
432. Result: Correct



Processing Question 433:
433. Context:
 See also 
Path Interpolation with Rotation, Trigger Events 

◆ClearPathIntplWithRotation() 

WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
Clear all data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function clears all data for a path interpolation with rotation channel, including any existing 
point segment commands and configuration settings. Use this function if a path interpolation with 
rotation channel must be reset. 

◆GetPathIntplWithRotationStatus() 

WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
PathIntplWithRotationSpStatus 
) 
Get the current status for a path inteprolation with rotation channel.
--------------------------------------------
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when 
the trigger condition is satisfied. More... 
WMX3APIFUNC ClearPathIntplWithRotation (int channel) 
Clear all data for a path interpolation with 
rotation channel. More... 
WMX3APIFUNC GetPathIntplWithRotationStatus (int channel, 
PathIntplWithRotationStatus *pStatus) 
Get the current status for a path inteprolation 
with rotation channel. More... 
WMX3APIFUNC CreatePathIntplLookaheadBuffer (int channel, 
unsigned int points) 
Allocate buffer memory for a path interpolation 
with look ahead channel. More...
--------------------------------------------
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
WMX3APIFUNC 
ClearPathIntplWithRotati 
on(int channel); 
def 
ClearPathIntplWithRotatio 
n(channel) 
int 
error code 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus(int channel, 
PathIntplWithRotationSt 
atus *pStatus); 
def 
GetPathIntplWithRotation 
Status(channel) 
tuple 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plWithRotationStatu 
s -status 
WMX3APIFUNC 
CreatePathIntplLookahe 
adBuffer(int channel, 
unsigned int points); 
def 
CreatePathIntplLookahea
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
-----------------------------------------------------------------------------------
433. Instruction: Get the current status for a path inteprolation with rotation channel.
A: GetPathIntplWithRotationStatusAndTimestamp(channel, timestamp)
B: GetPathIntplWithRotationStatus(channel)
C: ClearPathIntplWithRotation(channel)
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
433. Model's answer: B
433. Correct answer: B
433. Result: Correct



Processing Question 434:
434. Context:
 WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 


maxPathIntplLookaheadCh 
annel. 
[in] 
points The number of points to 
allocate memory for. Each 
linear or circular interpolation 
segment in the path occupies 
at least two points, and more 
if the segment distance is 
greater than the sample 
distance. For example, a 
linear interpolation with a 
length of 500 user units and a 
sample distance of 10 user 
units will occupy 500 / 10 = 50 
points. 
Remarks 

When the WMX3 engine is started, no memory is allocated for execution of path interpolation with 
look ahead. This function must be called before a path interpolation with look ahead channel can 
execute motion commands. 

Each channel has a separate buffer memory space. This function must be called for each path 
interpolation channel before that channel can execute motion commands.
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 
[out] 
pStatus A pointer to a 
PathIntplWithRotationStatu 
s class object that will contain 
the status of the path 
interpolation with rotation 
channel. 

Remarks 

Use this function to get the status of a path interpolation with rotation channel. 

◆CreatePathIntplLookaheadBuffer() 
WMX3APIFUNC 
CreatePathIntplLookahe 
adBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is
--------------------------------------------
Any of the three axes executing 3D path interpolation can be passed to the axis argument. The 
operation of this function will be the same regardless of which of the axes is specified. 

When this function is called, the profile of the 3D path interpolation will be recalculated. The 
standard behavior of overrides apply (see Acceleration Reset). 

If the specified axis is not executing a 3D path interpolation command started with 
StartPathIntpl3DPos or StartPathIntpl3DMov, this function will return an error. 

◆ 
CreatePathIntplWithRotationBuffer() 
WMX3APIFUNC 
CreatePathIntplWithRota 
tionBuffer ( int channel, 
unsigned int points 
) 
Allocate buffer memory for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 


channels is 

maxPathIntplWithRotationC 
hannel.
-----------------------------------------------------------------------------------
434. Instruction: Allocate buffer memory for a path interpolation with look ahead channel.
A: CreatePathIntplLookaheadBuffer(channel, points)
B: GetECAM(channel)
C: CreatePathIntplWithRotationBuffer(channel, points)
D: UpdatePathInterpolationWithLookaheadBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
434. Model's answer: A
434. Correct answer: A
434. Result: Correct



Processing Question 435:
435. Context:
 WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More...
--------------------------------------------
The GetPathIntplLookaheadBytesPerPoint function can be used to convert the buffer memory 
size from points to bytes. 

See also 

Path Interpolation with Look Ahead 

◆FreePathIntplLookaheadBuffer() 
WMX3APIFUN 
C 
FreePathIntplLo 
okaheadBuffer ( int channel ) 
Free buffer memory for a path interpolation with lookahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function frees the buffer memory that has been allocated with the 
CreatePathIntplLookaheadBuffer function. This allows CreatePathIntplLookaheadBuffer to be 
called again to allocate a different amount of memory. 

It is not necessary to call this function before exiting the program, as any allocated memory is 
automatically freed when the WMX3 engine closes. 

The freed memory, after a brief delay, will become available for the system to use for another 
purpose.
--------------------------------------------
dBuffer(channel, points) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
FreePathIntplLookahead 
Buffer(int channel); 
Python 
def 
FreePathIntplLookaheadB 
uffer(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplLookahead 
BytesPerPoint(unsigned 
int *pBytes); 
Python 
def 
GetPathIntplLookaheadBy 
tesPerPoint() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -bytes 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPathIntplLookaheadC 
onfiguration(int channel, 
PathIntplLookaheadConf 
iguration *pConfig); 
def 
SetPathIntplLookaheadCo
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function stops the motion for a path interpolation with look ahead channel. The axes will 
decelerate along the commanded path using the compositeAcc specified for the path interpolation. 

After the axes stop, the path interpolation can be resumed by calling the StartPathIntplLookahead 
function again. The velocity and acceleration profiles along the path will be recalculated. 

◆ClearPathIntplLookahead() 

WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
Clear all data for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks
-----------------------------------------------------------------------------------
435. Instruction: Free buffer memory for a path interpolation with lookahead channel.
A: FreePathIntplLookaheadBuffer_V2(channel_id)
B: ClearPathIntplLookahead(channel)
C: StartPathIntplLookahead(channel)
D: FreePathIntplLookaheadBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
435. Model's answer: D
435. Correct answer: D
435. Result: Correct



Processing Question 436:
436. Context:
 Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes) 

Get the number of bytes required per point data 
in the path interpolation buffer memory. More... 

WMX3APIFUNC StartPathIntplPos (PathIntplCommand 
*pPathIntplCommand, unsigned int 


numAddlCommands=0, 

PathIntplAdditionalCommand 

*pPathIntplAddlCommand=NULL) 

Start an absolute position path interpolation 
motion command. This motion combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntplMov (PathIntplCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntplAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position path interpolation motion 
command. This motion combines line 
interpolation and circular interpolation in one 
path. More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
WMX3APIFUNC GetSplineBytesPerPoint (unsigned int *pBytes) 
Get the number of bytes required per point data 
in the spline execution buffer memory. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 
More... 

WMX3APIFUNC StartCSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the total time to complete the spline is specified. 
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
ProfileSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed using a motion profile.
--------------------------------------------
The freed memory, after a brief delay, will become available for the system to use for another 
purpose. 

◆GetPathIntplLookaheadBytesPerPoint() 

WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
WMX3APIFUN 
C 
GetPathIntplLoo 
kaheadBytesPe 
rPoint ( unsigned int * pBytes ) 
Get the number of bytes required per point data in the path interpolation with look ahead buffer 

memory. 
Parameters 
[out] 
pBytes A pointer to an unsigned int 
that will contain the number of 
bytes of memory required per 
point data. 
Remarks 

This function obtains the number of bytes of memory required to store one point data in the path 
interpolation with rotation buffer memory. This can be used to calculate the number of bytes of 
buffer memory required to store a particular number of points. For example, if this function returns 
288, the number of bytes required to store 10000 points is 288*10000 = 2880000, or about 3MB. 

◆SetPathIntplLookaheadConfiguration()
-----------------------------------------------------------------------------------
436. Instruction: Get the number of bytes required per point data in the path interpolation with look ahead buffer memory.
A: GetPathInterpolatedLookaheadBytesPerPoint()
B: GetSplineBytesPerPoint()
C: GetPathIntplLookaheadBytesPerPoint()
D: StartPathIntpl3DPos_Trigger(pPathIntplCommand, pTrigger)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
436. Model's answer: C
436. Correct answer: C
436. Result: Correct



Processing Question 437:
437. Context:
 ◆SetPathIntplLookaheadConfiguration() 

WMX3APIFUNC 
SetPathIntplLookahead 
Configuration ( int channel, 
WMX3APIFUNC 
SetPathIntplLookahead 
Configuration ( int channel, 
PathIntplLookaheadCon pConfig 
) 
Set the configuration data for a path interpolation with lookahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
pConfig A pointer to an 
PathIntplLookaheadConfigu 
ration object that contains the 
path interpolation with look 
ahead configuration data. 

Remarks 

This function configures a path interpolation with look ahead channel with data required for 
operation, such as the commanded axes and the axis velocity and acceleration limits. 

This function must be called before interpolation commands can be added to the path interpolation 
with look ahead channel with the AddPathIntplLookaheadCommand function.
--------------------------------------------
WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More...
--------------------------------------------
1. CreatePathIntplLookaheadBuffer 
This function creates the buffer memory space that will be used to store path 
interpolation commands. This function only needs to be called once (per path 
interpolation with look ahead execution channel) after starting the engine. This 
function may fail if contiguous memory of the specified size could not be obtained 
from the system. For deterministic behavior, this function should be called during 
the initialization of the user application, and not immediately before using the 
path interpolation with look ahead execution channel. For additional information, 
see Function Calls related Memory Allocation. 

2. SetPathIntplLookaheadConfiguration 
This function configures the options for path interpolation with look ahead. This 


function must be called to at least set the velocity and acceleration along the 
path.
--------------------------------------------
This function must be called before interpolation commands can be added to the path interpolation 
with look ahead channel with the AddPathIntplLookaheadCommand function. 

After points are added to the path interpolation with look ahead channel, the configuration cannot 
be changed with this function until the channel is cleared with the ClearPathIntplLookahead 
function or the channel buffer is freed and then reallocated with the 
FreePathIntplLookaheadBuffer and CreatePathIntplLookaheadBuffer functions. 

Before configuring a path interpolation with look ahead channel, buffer memory for path 
interpolation with look ahead must be allocated using the CreatePathIntplLookaheadBuffer 
function. 

See also 

Path Interpolation with Look Ahead 

◆AddPathIntplLookaheadCommand() [1/2]
-----------------------------------------------------------------------------------
437. Instruction: Set the configuration data for a path interpolation with lookahead channel.
A: SetPathIntplLookaheadConfigurationV2(channel, pConfig)
B: SetPathIntplLookaheadConfiguration(channel, pConfig)
C: CreatePathIntplLookaheadBuffer(channel, points)
D: StartPathIntpl3DMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
437. Model's answer: B
437. Correct answer: B
437. Result: Correct



Processing Question 438:
438. Context:
 See also 

Path Interpolation with Look Ahead 

◆AddPathIntplLookaheadCommand() [1/2]

WMX3APIFUNC 
AddPathIntplLookahead 
Command ( channel, 
) 
WMX3APIFUNC 
AddPathIntplLookahead 
Command ( channel, 
) 
int 
PathIntplLookaheadCom pCommand 
Add interpolation commands to a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
pCommand A pointer to a 
PathIntplLookaheadComma 
nd object that contains the 
path interpolation with look 
ahead command data. 

Remarks 

This function adds interpolation commands to a path interpolation with look ahead channel. The 
added commands are not executed until the StartPathIntplLookahead function is called.
--------------------------------------------
WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More...
--------------------------------------------
◆AddPathIntplLookaheadCommand() [2/2]
See also 
Path Interpolation with Look Ahead 

WMX3APIFUNC 
AddPathIntplLookahead 
Command ( int channel, 
unsigned int numCommands, 
WMX3APIFUNC 
AddPathIntplLookahead 
Command ( int channel, 
unsigned int numCommands, 
PathIntplLookaheadCom pCommand 
) 
Add multiple interpolation commands to a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 
[in] 
numCommands The number of commands 
that will be specified. This is 
the size of the 
PathIntplLookaheadComma 
nd array passed to the 
pCommand argument. This 
must be greater than or equal 
to 1. 
[in] 
pCommand A pointer to an array of 
PathIntplLookaheadComma 
nd objects that contains the 
path interpolation with look 
ahead command data. 

Remarks
-----------------------------------------------------------------------------------
438. Instruction: Add interpolation commands to a path interpolation with look ahead channel.
A: AddPathIntplLookaheadCommand(channel, pCommand)
B: StartPathIntplLookahead(channel)
C: AddPathIntplLookaheadCommandWithOffset(channel, pCommand, offset)
D: FreePathIntplWithRotationBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
438. Model's answer: A
438. Correct answer: A
438. Result: Correct



Processing Question 439:
439. Context:
 WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More...
--------------------------------------------
Execute triggered motion for a path interpolation 
with rotation channel. The motion starts when 
the trigger condition is satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, 
TriggerEvents *pTriggerEvents) 
Execute triggered motion for a path interpolation 
with rotation channel with multiple trigger events. 
The motion starts when the trigger condition is 
satisfied. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos) 

Execute motion to the specified position for a 
path interpolation with rotation channel. More... 

WMX3APIFUNC StartPathIntplWithRotation (int channel, double 

pos, Trigger *pTrigger) 

Execute triggered motion to the specified 


position for a path interpolation with rotation 
channel. The motion starts when the trigger 
condition is satisfied. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplWithRotation (int channel, double 
pos, TriggerEvents *pTriggerEvents) 
Execute triggered motion to the specified 
position for a path interpolation with rotation 
channel with multiple trigger events. The motion 
starts when the trigger condition is satisfied. 
More... 
WMX3APIFUNC 
WMX3APIFUNC 
StartPathIntplWithRotation (int channel, 
unsigned int point) 
Execute motion to the specified point for a path 
interpolation with rotation channel. More... 
StartPathIntplWithRotation (int channel, 
unsigned int point, Trigger *pTrigger) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel. The 
motion starts when the trigger condition is 
satisfied. More... 
WMX3APIFUNC StartPathIntplWithRotation (int channel, 
unsigned int point, TriggerEvents 
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when
--------------------------------------------
*pTriggerEvents) 
Execute triggered motion to the specified point 
for a path interpolation with rotation channel with 
multiple trigger events. The motion starts when 
the trigger condition is satisfied. More... 
WMX3APIFUNC ClearPathIntplWithRotation (int channel) 
Clear all data for a path interpolation with 
rotation channel. More... 
WMX3APIFUNC GetPathIntplWithRotationStatus (int channel, 
PathIntplWithRotationStatus *pStatus) 
Get the current status for a path inteprolation 
with rotation channel. More... 
WMX3APIFUNC CreatePathIntplLookaheadBuffer (int channel, 
unsigned int points) 
Allocate buffer memory for a path interpolation 
with look ahead channel. More...
-----------------------------------------------------------------------------------
439. Instruction: Start the motion for a path interpolation with look ahead channel.
A: StartPathIntplWithRotation(channel)
B: IsDeviceValid()
C: StartPathIntplLookahead(channel)
D: InitializePathIntplLookahead(channel, options)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
439. Model's answer: C
439. Correct answer: C
439. Result: Correct



Processing Question 440:
440. Context:
 Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

Point segment commands must be added to the path interpolation with look ahead channel using 
the AddPathIntplLookaheadCommand function before this function is called. This function can be 
executed as long as the path contains at least one point segment. 

See also 

Path Interpolation with Look Ahead 

◆StopPathIntplLookahead() 

WMX3APIFUN 
C 
StopPathIntplLo 
okahead ( int channel ) 
WMX3APIFUN 
C 
StopPathIntplLo 
okahead ( int channel ) 
Stop the motion for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks
--------------------------------------------
Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function stops the motion for a path interpolation with look ahead channel. The axes will 
decelerate along the commanded path using the compositeAcc specified for the path interpolation. 

After the axes stop, the path interpolation can be resumed by calling the StartPathIntplLookahead 
function again. The velocity and acceleration profiles along the path will be recalculated. 

◆ClearPathIntplLookahead() 

WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
Clear all data for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks
--------------------------------------------
WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More...
--------------------------------------------
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearPathIntplLookahea 
d(int channel); 
Python 
def 
ClearPathIntplLookahead( 
channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplLookahead 
Status(int channel, 
PathIntplLookaheadStat 
us *pStatus); 
Python 
def 
GetPathIntplLookaheadSt 
atus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plLookaheadStatus 
-status 
Remarks 
C++ 
WMX3APIFUNC 
StartCoordinatedPos(Co 
ordinatedPosCommand
-----------------------------------------------------------------------------------
440. Instruction: Stop the motion for a path interpolation with look ahead channel.
A: ClearPathIntplLookahead(channel)
B: StopPathInterpolationLookAhead(channel)
C: StopPathIntplLookahead(channel)
D: StartPathIntplPos(pPathIntplCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
440. Model's answer: C
440. Correct answer: C
440. Result: Correct



Processing Question 441:
441. Context:
 Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks 

This function stops the motion for a path interpolation with look ahead channel. The axes will 
decelerate along the commanded path using the compositeAcc specified for the path interpolation. 

After the axes stop, the path interpolation can be resumed by calling the StartPathIntplLookahead 
function again. The velocity and acceleration profiles along the path will be recalculated. 

◆ClearPathIntplLookahead() 

WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplL 
ookahead ( int channel ) 
Clear all data for a path interpolation with look ahead channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with look ahead. 
The maximum number of 
available channels is 
maxPathIntplLookaheadCh 
annel. 

Remarks
--------------------------------------------
WMX3APIFUNC FreePathIntplLookaheadBuffer (int channel) 

Free buffer memory for a path interpolation with 


lookahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadBytesPerPoint 
(unsigned int *pBytes) 

Get the number of bytes required per point data 
in the path interpolation with look ahead buffer 
memory. More... 

WMX3APIFUNC SetPathIntplLookaheadConfiguration (int 
channel, PathIntplLookaheadConfiguration 
*pConfig) 
Set the configuration data for a path interpolation 
with lookahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
PathIntplLookaheadCommand *pCommand) 

Add interpolation commands to a path 
interpolation with look ahead channel. More... 

WMX3APIFUNC AddPathIntplLookaheadCommand (int channel, 
unsigned int numCommands, 
PathIntplLookaheadCommand *pCommand) 
Add multiple interpolation commands to a path 
interpolation with look ahead channel. More...
--------------------------------------------
dBuffer(channel, points) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
FreePathIntplLookahead 
Buffer(int channel); 
Python 
def 
FreePathIntplLookaheadB 
uffer(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplLookahead 
BytesPerPoint(unsigned 
int *pBytes); 
Python 
def 
GetPathIntplLookaheadBy 
tesPerPoint() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -bytes 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPathIntplLookaheadC 
onfiguration(int channel, 
PathIntplLookaheadConf 
iguration *pConfig); 
def 
SetPathIntplLookaheadCo
--------------------------------------------
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearPathIntplLookahea 
d(int channel); 
Python 
def 
ClearPathIntplLookahead( 
channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplLookahead 
Status(int channel, 
PathIntplLookaheadStat 
us *pStatus); 
Python 
def 
GetPathIntplLookaheadSt 
atus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plLookaheadStatus 
-status 
Remarks 
C++ 
WMX3APIFUNC 
StartCoordinatedPos(Co 
ordinatedPosCommand
-----------------------------------------------------------------------------------
441. Instruction: Clear all data for a path interpolation with look ahead channel.
A: GetPathIntplBufferPoints(axis, pPoints)
B: ClearPathIntplLookahead(channel)
C: ClearPathIntplLookaheadWithPrediction(channel)
D: CreatePathIntplLookaheadBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
441. Model's answer: B
441. Correct answer: B
441. Result: Correct



Processing Question 442:
442. Context:
 Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
WMX3APIFUNC 
ClearPathIntplWithRotati 
on(int channel); 
def 
ClearPathIntplWithRotatio 
n(channel) 
int 
error code 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus(int channel, 
PathIntplWithRotationSt 
atus *pStatus); 
def 
GetPathIntplWithRotation 
Status(channel) 
tuple 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plWithRotationStatu 
s -status 
WMX3APIFUNC 
CreatePathIntplLookahe 
adBuffer(int channel, 
unsigned int points); 
def 
CreatePathIntplLookahea
--------------------------------------------
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearPathIntplLookahea 
d(int channel); 
Python 
def 
ClearPathIntplLookahead( 
channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPathIntplLookahead 
Status(int channel, 
PathIntplLookaheadStat 
us *pStatus); 
Python 
def 
GetPathIntplLookaheadSt 
atus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvMotion_PathInt 
plLookaheadStatus 
-status 
Remarks 
C++ 
WMX3APIFUNC 
StartCoordinatedPos(Co 
ordinatedPosCommand
--------------------------------------------
See also 
Path Interpolation with Rotation, Trigger Events 

◆ClearPathIntplWithRotation() 

WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
WMX3APIFUN 
C 
ClearPathIntplW 
ithRotation ( int channel ) 
Clear all data for a path interpolation with rotation channel. 

Parameters 
[in] 
channel The channel of the path 
interpolation with rotation. The 
maximum number of available 
channels is 
maxPathIntplWithRotationC 
hannel. 

Remarks 

This function clears all data for a path interpolation with rotation channel, including any existing 
point segment commands and configuration settings. Use this function if a path interpolation with 
rotation channel must be reset. 

◆GetPathIntplWithRotationStatus() 

WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
WMX3APIFUNC 
GetPathIntplWithRotatio 
nStatus ( int channel, 
PathIntplWithRotationSpStatus 
) 
Get the current status for a path inteprolation with rotation channel.
--------------------------------------------
WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More...
-----------------------------------------------------------------------------------
442. Instruction: Get the current status for a path interpolation with look ahead channel.
A: FreePathIntplWithRotationBuffer(channel)
B: GetPathIntplWithRotationStatus(channel)
C: GetNextPathPrediction(channel)
D: GetPathIntplLookaheadStatus(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
442. Model's answer: D
442. Correct answer: D
442. Result: Correct



Processing Question 443:
443. Context:
 WMX3APIFUNC StartCoordinatedPos (unsigned int 
numCommands, CoordinatedPosCommand 
*pPosCommand) 
Start multiple interpolations, each between pairs 
of two axes, where one axis executes a normal 
position command and the second axis travels a 
specified distance in the same amount of time. 
More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedJerkRatioPosCommand 
*pPosCommand) 
Start an interpolation between two or more axes, 
where one axis executes a normal position 
command and the remaining axes travel the 
specified distances in the same amount of time. 
More... 

WMX3APIFUNC StartTwoLinkLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
},
    {
        "No": 478,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an interpolation between two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time."
--------------------------------------------
This command executes the StartCoordinatedPos function for multiple axes. 


◆StartCoordinatedPos() [3/3]
WMX3APIFUN 
C 
StartCoordinate 
dPos ( CoordinatedJer pPosCommand ) 
Start an interpolation between two or more axes, where one axis executes a normal position 
command and the remaining axes travel the specified distances in the same amount of time. 

Parameters 
[in] 
pPosCommand A pointer to a 
CoordinatedJerkRatioPosC 
ommand that contains the 
coordinated position 
command parameters. 

Remarks
--------------------------------------------
},
    {
        "No": 479,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(unsigned int numCommands, CoordinatedPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos(numCommands, pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start multiple interpolations, each between pairs of two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time. "
-----------------------------------------------------------------------------------
443. Instruction: Start an interpolation between two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time.
A: StartCoordinatedPos(pPosCommand)
B: StartPos(pPosCommand)
C: StartCoordinatedPosition(pCoordinates)
D: ApiLogToString(pLogData, logDataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
443. Model's answer: A
443. Correct answer: A
443. Result: Correct



Processing Question 444:
444. Context:
 WMX3APIFUNC StartCoordinatedPos (unsigned int 
numCommands, CoordinatedPosCommand 
*pPosCommand) 
Start multiple interpolations, each between pairs 
of two axes, where one axis executes a normal 
position command and the second axis travels a 
specified distance in the same amount of time. 
More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedJerkRatioPosCommand 
*pPosCommand) 
Start an interpolation between two or more axes, 
where one axis executes a normal position 
command and the remaining axes travel the 
specified distances in the same amount of time. 
More... 

WMX3APIFUNC StartTwoLinkLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartPathIntplLookahead (int channel) 
Start the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC StopPathIntplLookahead (int channel) 
Stop the motion for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC ClearPathIntplLookahead (int channel) 
Clear all data for a path interpolation with look 
ahead channel. More... 

WMX3APIFUNC GetPathIntplLookaheadStatus (int channel, 
PathIntplLookaheadStatus *pStatus) 

Get the current status for a path interpolation 
with look ahead channel. More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedPosCommand *pPosCommand) 
Start an interpolation between two axes, where 
one axis executes a normal position command 
and the second axis travels a specified distance 
in the same amount of time. More...
--------------------------------------------
WMX3APIFUNC StartMov (unsigned int numCommands, 
TriggerPosCommand *pPosCommand) 

Start relative triggered position 
commands for multiple axes. More... 

WMX3APIFUNC StartPos (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 

Start absolute triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartMov (unsigned int numCommands, 
PosCommand *pPosCommand, 
TriggerEvents *pTriggerEvents) 


Start relative triggered position 
commands with multiple trigger events 
for multiple axes. More... 

WMX3APIFUNC StartLinearIntplPos 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start an absolute position linear 
interpolation motion command. More... 

WMX3APIFUNC StartLinearIntplMov 
(LinearIntplCommand 
*pLinearIntplCommand) 
Start a relative position linear 
interpolation motion command. More...
--------------------------------------------
WMX3APIFUNC StartPathIntpl3DMov (PathIntpl3DCommand 
*pPathIntplCommand, unsigned int 
numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 
Start a relative position 3D path interpolation 
motion. This motion command combines line 
interpolation and circular interpolation in one 
path. More... 

WMX3APIFUNC StartPathIntpl3DPos (PathIntpl3DCommand 
*pPathIntplCommand, Trigger *pTrigger, 
unsigned int numAddlCommands=0, 
PathIntpl3DAdditionalCommand 
*pPathIntplAddlCommand=NULL) 


Start an absolute position triggered 3D path 
interpolation motion. This motion command 
combines line interpolation and circular 
interpolation in one path. More...
-----------------------------------------------------------------------------------
444. Instruction: Start multiple interpolations, each between pairs of two axes, where one axis executes a normal position command and the second axis travels a specified distance in the same amount of time.
A: StartCoordinatedPos(numCommands, pPosCommand)
B: StartMov_Trigger(numCommands, pPosCommand)
C: FreePathIntplLookaheadBuffer(channel)
D: InitializePosition(numCommands, positions)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
444. Model's answer: A
444. Correct answer: A
444. Result: Correct



Processing Question 445:
445. Context:
 WMX3APIFUNC StartCoordinatedPos (unsigned int 
numCommands, CoordinatedPosCommand 
*pPosCommand) 
Start multiple interpolations, each between pairs 
of two axes, where one axis executes a normal 
position command and the second axis travels a 
specified distance in the same amount of time. 
More... 

WMX3APIFUNC StartCoordinatedPos 
(CoordinatedJerkRatioPosCommand 
*pPosCommand) 
Start an interpolation between two or more axes, 
where one axis executes a normal position 
command and the remaining axes travel the 
specified distances in the same amount of time. 
More... 

WMX3APIFUNC StartTwoLinkLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
This command executes the StartCoordinatedPos function for multiple axes. 


◆StartCoordinatedPos() [3/3]
WMX3APIFUN 
C 
StartCoordinate 
dPos ( CoordinatedJer pPosCommand ) 
Start an interpolation between two or more axes, where one axis executes a normal position 
command and the remaining axes travel the specified distances in the same amount of time. 

Parameters 
[in] 
pPosCommand A pointer to a 
CoordinatedJerkRatioPosC 
ommand that contains the 
coordinated position 
command parameters. 

Remarks
--------------------------------------------
},
    {
        "No": 480,
        "FunctionC++": "WMX3APIFUNC StartCoordinatedPos(CoordinatedJerkRatioPosCommand *pPosCommand)",
        "FunctionPython": "def StartCoordinatedPos_JerkRatio(pPosCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an interpolation between two or more axes, where one axis executes a normal position command and the remaining axes travel the specified distances in the same amount of time."
--------------------------------------------
The following plot shows the second axis velocity profile when the axis2SmoothRatio is 0.5. 


The following plot shows the second axis velocity profile when the axis2SmoothRatio is 1. 


◆StartCoordinatedPos() [2/3]
WMX3APIFUNC 
StartCoordinatedPos ( 
) 
unsigned int 
numCommands, 
CoordinatedPosComma pPosCommand 
Start multiple interpolations, each between pairs of two axes, where one axis executes a normal 
position command and the second axis travels a specified distance in the same amount of time. 

Parameters 
[in] 
numCommands The number of coordinated 
position commands. Each 
command controls a pair of 
two axes. 
[in] 
pPosCommand A pointer to an array of 
objects of the 
CoordinatedPosCommand 
class that contain the 
parameters of the coordinated 
position commands. The 
number of objects in the array 
must be equal to 
numCommands. 
Remarks 

This command executes the StartCoordinatedPos function for multiple axes.
-----------------------------------------------------------------------------------
445. Instruction: Start an interpolation between two or more axes, where one axis executes a normal position command and the remaining axes travel the specified distances in the same amount of time.
A: StartCoordinatedPos_JerkRatio(pPosCommand)
B: StartCoordinatedPos_JerkRatio(pPosCommand, pVelocityProfile)
C: IsDeviceValid()
D: StartCoordinatedPos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
445. Model's answer: A
445. Correct answer: A
445. Result: Correct



Processing Question 446:
446. Context:
 coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
446. Instruction: Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates.
A: StartPathIntplWithRotation_Point_TriggerEvents(channel, point, TriggerEvents pTriggerEvents)
B: StartTwoLinkLinearPos(pTwoLinkCommand)
C: StartTwoLinkLinearPos(new_pTwoLinkCommand)
D: StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
446. Model's answer: B
446. Correct answer: B
446. Result: Correct



Processing Question 447:
447. Context:
 WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
447. Instruction: Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates.
A: StartTwoLinkLinearPos(pTwoLinkCommand)
B: StartTwoLinkRotaryMov(pTwoLinkCommand)
C: StartTwoLinkLinearMovement(pTwoLinkCommand)
D: StartTwoLinkLinearMov(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
447. Model's answer: D
447. Correct answer: D
447. Result: Correct



Processing Question 448:
448. Context:
 coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
448. Instruction: Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates.
A: StartTwoLinkRotaryPos(pTwoLinkCommand)
B: StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)
C: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
D: UpdateTwoLinkRotaryPos(pUpdatedTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
448. Model's answer: A
448. Correct answer: A
448. Result: Correct



Processing Question 449:
449. Context:
 WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 

Start a two link motion in which the profile is 
generated by simulating a linear axis connected 


to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntplCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double 
*pMoveDistance, double *pRemainDistance, 
double *pTotalDistance) 
Simulate a path interpolation command without 
moving any axes. The move distance, remain 
distance, and total distance after the path 
interpolation runs for a specified amount of time 
are returned. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
-----------------------------------------------------------------------------------
449. Instruction: Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates.
A: SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)
B: StartTwoLinkRotaryMov(pTwoLinkCommand)
C: StartTwoLinkLinearPos(pTwoLinkCommand)
D: StopTwoLinkRotaryMov(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
449. Model's answer: B
449. Correct answer: B
449. Result: Correct



Processing Question 450:
450. Context:
 WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
450. Instruction: Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in absolute coordinates.
A: StartUntetheredTwoLinkLinearPos(pLinearPosCommand)
B: StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)
C: StartTwoLinkLinearMov(pTwoLinkCommand)
D: StartCBSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
450. Model's answer: B
450. Correct answer: B
450. Result: Correct



Processing Question 451:
451. Context:
 WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
451. Instruction: Start a two link motion in which the profile is generated by simulating a rotary axis connected to a linear axis with two links. A motion profile is generated for the rotary axis, and the linear axis follows the simulated motion of the rotary axis. The target position is specified in relative coordinates.
A: StartTwoLinkUntetheredLinearMovement(pTwoLinkCmd)
B: StartTwoLinkUntetheredLinearPos(pTwoLinkCommand)
C: StartTwoLinkUntetheredLinearMov(pTwoLinkCommand)
D: ErrorToString(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
451. Model's answer: C
451. Correct answer: C
451. Result: Correct



Processing Question 452:
452. Context:
 coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
-----------------------------------------------------------------------------------
452. Instruction: Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in absolute coordinates.
A: StartTwoLinkRotaryPos(pTwoLinkCommand)
B: StartTwoLinkUntetheredRotaryPos(pTwoLinkCommand)
C: ClearPathIntplLookahead(channel)
D: StartTwoLinkUntetheredRotaryPosWithSpeed(pTwoLinkCommand, speed)
New function_str: StartTwoLinkUntetheredRotaryPosWithSpeed(pTwoLinkCommand, speed)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
452. Model's answer: A
452. Correct answer: B
452. Result: Wrong



Processing Question 453:
453. Context:
 coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredLinearPos 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in absolute 
coordinates. More...
--------------------------------------------
WMX3APIFUNC StartTwoLinkUntetheredLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 
coordinates. More... 

WMX3APIFUNC StartTwoLinkUntetheredRotaryMov 
(TwoLinkRotaryCommand *pTwoLinkCommand)
--------------------------------------------
WMX3APIFUNC StartTwoLinkLinearMov 
(TwoLinkLinearCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a rotary axis connected 
to a linear axis with two links. A motion profile is 
generated for the rotary axis, and the linear axis 
follows the simulated motion of the rotary axis. 
The target position is specified in relative 
coordinates. More... 

WMX3APIFUNC StartTwoLinkRotaryPos 
(TwoLinkRotaryCommand *pTwoLinkCommand) 
Start a two link motion in which the profile is 
generated by simulating a linear axis connected 
to a rotary axis with two links. A motion profile is 
generated for the linear axis, and the rotary axis 
follows the simulated motion of the linear axis. 
The target position is specified in absolute 


coordinates. More...
--------------------------------------------
The motion profile generated for the linear axis will decelerate to zero velocity each time the linear 
axis moves to Lmin (at R = Rspan / 2) or Lmax (at R = 0). 

◆ 
StartTwoLinkRotaryMov() 

WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( 
WMX3APIFUN 
C 
StartTwoLinkRo 
taryMov ( TwoLinkRotaryC pTwoLinkComma ) 
Start a two link motion in which the profile is generated by simulating a linear axis connected to a 
rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows 
the simulated motion of the linear axis. The target position is specified in relative coordinates. 

Parameters 
[in] 
pTwoLinkCommand A pointer to a 
TwoLinkRotaryCommand 
that contains the two link 
motion parameters. 
Remarks 

This function is similar to StartTwoLinkRotaryPos, except the target position is specified in relative 
coordinates (relative to the current position of the commanded axis). 

◆StartTwoLinkUntetheredLinearPos()
-----------------------------------------------------------------------------------
453. Instruction: Start a two link motion in which the profile is generated by simulating a linear axis connected to a rotary axis with two links. A motion profile is generated for the linear axis, and the rotary axis follows the simulated motion of the linear axis. The target position is specified in relative coordinates.
A: ClearPathIntplWithRotation(channel)
B: StartTwoLinkUntetheredRotaryMov(pTwoLinkCommand)
C: StartTwoLinkUntetheredRotaryMovement(pTwoLinkCommand)
D: StartTwoLinkLinearMov(pTwoLinkCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
453. Model's answer: B
453. Correct answer: B
453. Result: Correct



Processing Question 454:
454. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
},
    {
        "No": 492,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntpl3DCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pPos3, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned."
--------------------------------------------
WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, unsigned int 
minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a path interpolation command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a path interpolation command without 
moving any axes. The move time, remain time, 
and total time after the path interpolation runs for 
the specified distance are returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes
--------------------------------------------
},
    {
        "No": 491,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntplCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned."
-----------------------------------------------------------------------------------
454. Instruction: Simulate a path interpolation command without moving any axes. The move distance, remain distance, and total distance after the path interpolation runs for a specified amount of time are returned.
A: SimulateTimeAtDist(pPathIntplCommand, specificDistance)
B: SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)
C: SimulatePositionAtTime(self, trajectoryInterpolator, timeElapsed)
D: StartCoordinatedPos(numCommands, pPosCommand)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
454. Model's answer: B
454. Correct answer: B
454. Result: Correct



Processing Question 455:
455. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, unsigned int 
minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a path interpolation command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a path interpolation command without 
moving any axes. The move time, remain time, 
and total time after the path interpolation runs for 
the specified distance are returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes
--------------------------------------------
◆SimulateTimeAtPos() [1/2]
WMX3APIFUNC 

SimulateTimeAtPos ( SimulateTimeAtPos ( SimulatePathIntplComm pPathIntplCommand, 
double specificPos1, 
double specificPos2, 
unsigned int minimumSearchIndex, 
double * 
double * 
double * pTotalTimeMilliseconds 
) 
pMoveTimeMilliseconds, 
pRemainTimeMilliseconds 
Simulate a path interpolation command without moving any axes. The elapsed time and remaining 
time after the axis reaches the specified position are returned.
--------------------------------------------
},
    {
        "No": 493,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificPos1, double specificPos2, double specificPos3, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned"
-----------------------------------------------------------------------------------
455. Instruction: Simulate a path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned.
A: SimulateTimeAtPos(pSimulatePosCommand, specificPos)
B: SimulateTimeAtPos(pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex)
C: StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
D: InterpolateTimeAtPositionPath(pPathIntplCommand, startPos, endPos, minIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
455. Model's answer: B
455. Correct answer: B
455. Result: Correct



Processing Question 456:
456. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
},
    {
        "No": 492,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntpl3DCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pPos3, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned."
--------------------------------------------
},
    {
        "No": 491,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntplCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned."
--------------------------------------------
},
    {
        "No": 494,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtDist(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificDistance, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds, double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move time, remain time, and total time after the 3D path interpolation runs for the specified distance are returned."
-----------------------------------------------------------------------------------
456. Instruction: Simulate a path interpolation command without moving any axes. The move time, remain time, and total time after the path interpolation runs for the specified distance are returned.
A: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
B: SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)
C: SimulateTimeAtDist(pPathIntplCommand, specificDistance)
D: DisplayTimeAtDistance(pathInterpolator, targetDistance)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
456. Model's answer: C
456. Correct answer: C
456. Result: Correct



Processing Question 457:
457. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
},
    {
        "No": 492,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntpl3DCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pPos3, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned."
--------------------------------------------
WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, unsigned int 
minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a path interpolation command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a path interpolation command without 
moving any axes. The move time, remain time, 
and total time after the path interpolation runs for 
the specified distance are returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes
--------------------------------------------
},
    {
        "No": 489,
        "FunctionC++": "WMX3APIFUNC SimulatePosAtTime(SimulatePathIntplCommand *pPathIntplCommand, double timeMilliseconds, double *pPos1, double *pPos2, double *pMoveDistance, double *pRemainDistance, double *pTotalDistance)",
        "FunctionPython": "def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a path interpolation command without moving any axes. The move distance, remain distance, and total distance after the path interpolation runs for a specified amount of time are returned."
-----------------------------------------------------------------------------------
457. Instruction: Simulate a 3D path interpolation command without moving any axes. The move distance, remain distance, and total distance after the 3D path interpolation runs for a specified amount of time are returned.
A: SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds)
B: StartPathIntplWithRotation_Trigger(channel, pTrigger)
C: SimulatePositionAtGivenTime_3D(self, positionInterpolationCommand, elapsedTimeMs)
D: SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
457. Model's answer: A
457. Correct answer: A
457. Result: Correct



Processing Question 458:
458. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, unsigned int 
minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a path interpolation command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulatePathIntplCommand 
*pPathIntplCommand, double specificDistance, 
double *pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 

Simulate a path interpolation command without 
moving any axes. The move time, remain time, 
and total time after the path interpolation runs for 
the specified distance are returned. More... 

WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes
--------------------------------------------
},
    {
        "No": 493,
        "FunctionC++": "WMX3APIFUNC SimulateTimeAtPos(SimulatePathIntpl3DCommand *pPathIntplCommand, double specificPos1, double specificPos2, double specificPos3, unsigned int minimumSearchIndex, double *pMoveTimeMilliseconds, double *pRemainTimeMilliseconds,double *pTotalTimeMilliseconds)",
        "FunctionPython": "def SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned"
--------------------------------------------
WMX3APIFUNC SimulatePosAtTime 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 
timeMilliseconds, double *pPosArray, 
double *pMoveDistance, double 
*pRemainDistance, double 
*pTotalDistance) 
Simulate a linear interpolation motion 
command without moving any axes. The 
move distance, remain distance, and 
total distance after the linear 
interpolation runs for a specified amount 
of time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePosCommand 
*pSimulatePosCommand, double 
specificPos, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds) 
Simulate a position command without 
moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More... 

WMX3APIFUNC SimulateTimeAtDist 
(SimulateLinearIntplCommand 
*pSimulateLinearIntplCommand, double 


specificDistance, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds)
-----------------------------------------------------------------------------------
458. Instruction: Simulate a 3D path interpolation command without moving any axes. The elapsed time and remaining time after the axis reaches the specified position are returned
A: SimulateTimeAtPos_3D_Extended(pPathCommand, startPos, endPos, referencePos, searchIndexMin)
B: SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)
C: SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
458. Model's answer: C
458. Correct answer: C
458. Result: Correct



Processing Question 459:
459. Context:
 WMX3APIFUNC SimulatePosAtTime 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double timeMilliseconds, 
double *pPos1, double *pPos2, double *pPos3, 


Public Attributes 

double *pMoveDistance, double 
*pRemainDistance, double *pTotalDistance) 

Simulate a 3D path interpolation command 
without moving any axes. The move distance, 
remain distance, and total distance after the 3D 
path interpolation runs for a specified amount of 
time are returned. More... 

WMX3APIFUNC SimulateTimeAtPos 
(SimulatePathIntpl3DCommand 
*pPathIntplCommand, double specificPos1, 
double specificPos2, double specificPos3, 
unsigned int minimumSearchIndex, double 
*pMoveTimeMilliseconds, double 
*pRemainTimeMilliseconds, double 
*pTotalTimeMilliseconds) 
Simulate a 3D path interpolation command 
without moving any axes. The elapsed time and 
remaining time after the axis reaches the 
specified position are returned. More...
--------------------------------------------
◆SimulateTimeAtDist() [1/2]
WMX3APIFUNC 

SimulateTimeAtDist ( SimulateTimeAtDist ( SimulatePathIntplComm pPathIntplCommand, 
double specificDistance, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 
Simulate a path interpolation command without moving any axes. The move time, remain time, and 
total time after the path interpolation runs for the specified distance are returned.
--------------------------------------------
minimumSearchIndex = 3 or 4 will cause the simulation to calculate the move time, remain time, 
and total time for the third time that the path crosses the specified position. 

◆SimulateTimeAtDist() [2/2]
WMX3APIFUNC 
SimulateTimeAtDist ( SimulatePathIntpl3DCom pPathIntplCommand, 
double specificDistance, 
double * pMoveTimeMilliseconds, 
double * pRemainTimeMilliseconds 
double * pTotalTimeMilliseconds 
) 

Simulate a 3D path interpolation command without moving any axes. The move time, remain time, 
and total time after the 3D path interpolation runs for the specified distance are returned.
--------------------------------------------
◆SimulateTimeAtDist() 
WMX3APIFUNC 
SimulateTimeAtDist ( SimulateLinearIntplC pSimulateLinearIntplC 
double specificDistance, 

double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
double * pMoveTimeMillisecon 
double * pRemainTimeMilliseco 
double * pTotalTimeMillisecond 
) 
Simulate a linear interpolation motion command without moving any axes. The 
move time, remain time, and total time after the linear interpolation runs for a 
specified distance are returned. 

Parameters 
[in] 
pSimulateLinearIntplCo A pointer to a 
SimulateLinearIntplCo 
mmand that contains 
the simulated linear 
interpolation motion 
command parameters. 

[in] 
specificDistance The distance along the 
linear interpolation at 
which to calculate the 
move time, remain time, 
and total time of the 
linear interpolation 
command. This is the 
distance in N 
dimensions, where N is 
the number of axes in 
the interpolation.
-----------------------------------------------------------------------------------
459. Instruction: Simulate a 3D path interpolation command without moving any axes. The move time, remain time, and total time after the 3D path interpolation runs for the specified distance are returned.
A: SimulateTimeAtDist_LinearIntpl(pSimulateLinearIntplCommand, specificDistance)
B: EstimateTimeAtDist_3D(pPathInterpolateCmd, targetDistance)
C: SimulateTimeAtDist_3D(pPathIntplCommand, specificDistance)
D: CreatePathIntplBuffer(axis, unsigned points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
459. Model's answer: C
459. Correct answer: C
459. Result: Correct



Processing Question 460:
460. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
460. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid()
B: StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
C: GetBacklashCompensation(axis)
D: IsValidDevice()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
460. Model's answer: A
460. Correct answer: A
460. Result: Correct



Processing Question 461:
461. Context:
 Function 
C++ 
WMX3APIFUNC 
SetConstantLinearVel(in 
t masterAxis, int 
slaveAxis, double 
centerPos, double minR, 
double positiveMaxR, 
double negativeMaxR, 
double constLinVel, 
double initVelVariance); 
Python 
def 
SetConstantLinearVel(ma 
sterAxis, slaveAxis, 
centerPos, 
minR,positiveMaxR, 
negativeMaxR, 
constLinVel, 
initVelVariance) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResolveConstantLinearV 
el(int axis); 
Python 
def 
ResolveConstantLinearVel 
(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ bool IsDeviceValid(); 
Python def IsDeviceValid() 
Returns 
Type bool 
Whether the device is
--------------------------------------------
},
    {
        "No": 496,
        "FunctionC++": "WMX3APIFUNC SetConstantLinearVel(int masterAxis, int slaveAxis, double centerPos, double minR, double positiveMaxR, double negativeMaxR, double constLinVel, double initVelVariance)",
        "FunctionPython": "def SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start constant linear velocity control for an axis."
    },
    {
        "No": 497,
        "FunctionC++": "WMX3APIFUNC ResolveConstantLinearVel(int axis)",
        "FunctionPython": "def ResolveConstantLinearVel(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Resolve constant linear velocity control for an axis."
--------------------------------------------
double 
double 
double 
double 
double 
double 
positiveMaxR, 
negativeMaxR, 
constLinVel, 
double initVelVariance 
) 
Start constant linear velocity control for an axis. 

Parameters 
[in] 
masterAxis The axis controlling the 
arm. 
[in] 
slaveAxis The axis controlling the 
disc rotation. 
[in] 
centerPos The position of the 
master axis at the center 
of the disc. 
[in] 
minR The minimum radius 
below which the slave 
axis angular velocity will 
be constant and equal to 
constLinVel / minR. This 
value must be greater 
than or equal to 1. 
[in] 
positiveMaxR The maximum radius in 
the positive direction of 
the master axis at which 
the slave axis angular 
velocity should be kept 
constant. If the radius 
exceeds this value, the 
slave axis angular 
velocity will be constant 
and equal to constLinVel 
/ positiveMaxR. This 
value must be greater
--------------------------------------------
ECAPIFUNC StartAxisPV (int slaveId, int axisIndex, int 
targetVel, unsigned int profileAcc, 
unsigned int profileDec) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int masterId, int slaveId, int 
axisIndex, int targetVel, unsigned int 
profileAcc, unsigned int profileDec) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int slaveId, int axisIndex, int 
targetVel, unsigned int profileAcc, 
unsigned int profileDec, unsigned short 
maxTorque) 
Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPV (int masterId, int slaveId, int 
axisIndex, int targetVel, unsigned int 
profileAcc, unsigned int profileDec, 
unsigned short maxTorque) 

Start the PV operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisTQ (int slaveId, int axisIndex, 
short targetTrq) 

Start the TQ operation for a specified 
slave axis. More...
-----------------------------------------------------------------------------------
461. Instruction: Start constant linear velocity control for an axis.
A: SetConstantLinearVel(masterAxis, slaveAxis, centerPos, minR,positiveMaxR, negativeMaxR, constLinVel, initVelVariance)
B: SetConstantLinearVelocity(masterAxis, slaveAxis, centerPos, minRadius, posMaxRadius, negMaxRadius, constLinVel, initVelVariance)
C: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
D: CreatePathIntplLookaheadBuffer(channel, points)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
461. Model's answer: A
461. Correct answer: A
461. Result: Correct



Processing Question 462:
462. Context:
 absolute positions. More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic basis spline motion command in 
which the spline is traversed while staying within 
the specified velocity and acceleration limits for 
each axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCBSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic basis spline motion command in 
which the time at each point is specified. The 
point positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, TriggerEvents 
*pTriggerEvents) 
Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as relative 
positions. More... 

WMX3APIFUNC CreatePathIntplBuffer (int axis, unsigned int 
points) 

Allocate buffer memory to an axis for the 
execution of path interpolation commands. 

More... 

WMX3APIFUNC FreePathIntplBuffer (int axis) 
Free path interpolation buffer memory for an 
axis. More... 

WMX3APIFUNC GetPathIntplBufferPoints (int axis, unsigned int 
*pPoints) 

Get the amount of path interpolation buffer 
memory currently allocated to an axis. More... 

WMX3APIFUNC GetPathIntplBytesPerPoint (unsigned int 
*pBytes)
--------------------------------------------
The point positions are specified as absolute 
positions. More... 

WMX3APIFUNC StartCSplinePos (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint) 
Start a cubic spline motion command in which 
the spline is traversed while staying within the 
specified velocity and acceleration limits for each 
axis. The point positions are specified as 
absolute positions. More... 

WMX3APIFUNC StartCSplineMov (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds) 
Start a cubic spline motion command in which 
the time at each point is specified. The point 
positions are specified as relative positions. 
More...
--------------------------------------------
WMX3APIFUNC StartCBSplineMov (int channel, 
VelAccLimitedSplineCommand 
*pSplineCommand, unsigned int numPoints, 
SplinePoint *pPoint, Trigger *pTrigger) 

Start a triggered cubic basis spline motion 
command in which the spline is traversed while 
staying within the specified velocity and 
acceleration limits for each axis. The point 
positions are specified as relative positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
PointTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 
double *pPointTimeMilliseconds, TriggerEvents 
*pTriggerEvents) 

Start a triggered cubic basis spline motion 
command with multiple trigger events in which 
the time at each point is specified. The point 
positions are specified as absolute positions. 

More... 

WMX3APIFUNC StartCBSplinePos (int channel, 
TotalTimeSplineCommand *pSplineCommand, 
unsigned int numPoints, SplinePoint *pPoint, 


TriggerEvents *pTriggerEvents)
-----------------------------------------------------------------------------------
462. Instruction: Resolve constant linear velocity control for an axis.
A: StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
B: ResolveSync(slaveAxis)
C: ResolveConstantLinearVel(axis)
D: CalculateConstantLinearVelFromAxis(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
462. Model's answer: C
462. Correct answer: C
462. Result: Correct



Processing Question 463:
463. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
},
    {
        "No": 242,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
},
    {
        "No": 401,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get the version of the module rtdll."
    },
    {
        "No": 402,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
-----------------------------------------------------------------------------------
463. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid(deviceId: str)
B: SetAbsoluteEncoderHomeOffset(axis, offset)
C: StopPathIntplLookahead(channel)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
463. Model's answer: D
463. Correct answer: D
463. Result: Correct



Processing Question 464:
464. Context:
 Value alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartECAM(int channel, 
ECAMData 
*pECAMData); 
Python 
def StartECAM(channel, 
pECAMData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetECAM(int channel, 
ECAMData 
*pECAMData); 
Python def GetECAM(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvSync_ECAMDat 
a -ECAM data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopECAM(int channel); 
Python def StopECAM(channel) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
StartDancerControl(int
--------------------------------------------
WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆StartECAM()
WMX3APIFUNC 
StartECAM ( 
) 
int 
channel, 
ECAMData * pECAMData 
Start E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[in] 
pECAMData A pointer to an 
ECAMData class object 
that specifies the E-CAM 
control parameters. 

Remarks 

E-CAM control is a type of master-slave control in which the position command of a 
slave axis is controlled by the position of a master axis in a non-linear manner. The 
correlation between the position of the master axis and the position command of the 
slave axis is defined using an E-CAM table.
--------------------------------------------
The slave axis must be in Idle operation state when starting E-CAM control. The 
master axis may be in any state. 

Each E-CAM channel supports one slave axis. Multiple E-CAM channels may have 
the same master axis. 

Each E-CAM channel can only control one slave axis at any time. To start a different 
E-CAM control, the channel must first be stopped with the StopECAM function. 

See also 

E-CAM 

◆ 
GetECAM() 

WMX3APIFUNC 
GetECAM ( 
WMX3APIFUNC 
GetECAM ( 
int 
channel, 
ECAMData * pECAMData 
) 
Get E-CAM control parameters. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[out] 
pECAMData A pointer to an 
ECAMData class object 
that will contain the ECAM 
control parameters. 
Remarks
--------------------------------------------
CAM table. More... 

class ECAMSourceType 
This enumerator class enumerates the 
sources of the E-CAM master input. 
More... 

class ECAMType 
This enumerator class enumerates the 
types of E-CAM, which determine certain 
characteristics of E-CAM. Also see ECAM. 
More... 

Public Member Functions 

bool 
WMX3APIFUNC 
AdvSync (AdvancedMotion *f) 
IsDeviceValid () 
StartECAM (int channel, ECAMData 
*pECAMData) 
Start E-CAM control. More... 
WMX3APIFUNC GetECAM (int channel, ECAMData 
*pECAMData) 
Get E-CAM control parameters. More... 
WMX3APIFUNC StopECAM (int channel) 
Stop E-CAM control. More... 

WMX3APIFUNC StartDancerControl (int axis, 
DancerControlOptions 

*pDancerControlOptions) 

Start dancer control. More... 

WMX3APIFUNC StopDancerControl (int axis) 
Stop dancer control. More... 

WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi
-----------------------------------------------------------------------------------
464. Instruction: Start E-CAM control.
A: SetWatch(channel, pWatch)
B: StartECAM(channel, pECAMData)
C: GetPathIntplLookaheadBytesPerPoint()
D: ModifyECAM(channel, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
464. Model's answer: B
464. Correct answer: B
464. Result: Correct



Processing Question 465:
465. Context:
 Value alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartECAM(int channel, 
ECAMData 
*pECAMData); 
Python 
def StartECAM(channel, 
pECAMData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetECAM(int channel, 
ECAMData 
*pECAMData); 
Python def GetECAM(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvSync_ECAMDat 
a -ECAM data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopECAM(int channel); 
Python def StopECAM(channel) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
StartDancerControl(int
--------------------------------------------
The slave axis must be in Idle operation state when starting E-CAM control. The 
master axis may be in any state. 

Each E-CAM channel supports one slave axis. Multiple E-CAM channels may have 
the same master axis. 

Each E-CAM channel can only control one slave axis at any time. To start a different 
E-CAM control, the channel must first be stopped with the StopECAM function. 

See also 

E-CAM 

◆ 
GetECAM() 

WMX3APIFUNC 
GetECAM ( 
WMX3APIFUNC 
GetECAM ( 
int 
channel, 
ECAMData * pECAMData 
) 
Get E-CAM control parameters. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[out] 
pECAMData A pointer to an 
ECAMData class object 
that will contain the ECAM 
control parameters. 
Remarks
--------------------------------------------
WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆StartECAM()
WMX3APIFUNC 
StartECAM ( 
) 
int 
channel, 
ECAMData * pECAMData 
Start E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[in] 
pECAMData A pointer to an 
ECAMData class object 
that specifies the E-CAM 
control parameters. 

Remarks 

E-CAM control is a type of master-slave control in which the position command of a 
slave axis is controlled by the position of a master axis in a non-linear manner. The 
correlation between the position of the master axis and the position command of the 
slave axis is defined using an E-CAM table.
--------------------------------------------
CAM table. More... 

class ECAMSourceType 
This enumerator class enumerates the 
sources of the E-CAM master input. 
More... 

class ECAMType 
This enumerator class enumerates the 
types of E-CAM, which determine certain 
characteristics of E-CAM. Also see ECAM. 
More... 

Public Member Functions 

bool 
WMX3APIFUNC 
AdvSync (AdvancedMotion *f) 
IsDeviceValid () 
StartECAM (int channel, ECAMData 
*pECAMData) 
Start E-CAM control. More... 
WMX3APIFUNC GetECAM (int channel, ECAMData 
*pECAMData) 
Get E-CAM control parameters. More... 
WMX3APIFUNC StopECAM (int channel) 
Stop E-CAM control. More... 

WMX3APIFUNC StartDancerControl (int axis, 
DancerControlOptions 

*pDancerControlOptions) 

Start dancer control. More... 

WMX3APIFUNC StopDancerControl (int axis) 
Stop dancer control. More... 

WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi
-----------------------------------------------------------------------------------
465. Instruction: Get E-CAM control parameters.
A: GetECAM(channel)
B: GetECAMInfo(channel)
C: StartCBSplineMov_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)
D: GetWatch(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
465. Model's answer: A
465. Correct answer: A
465. Result: Correct



Processing Question 466:
466. Context:
 This function obtains the currently set E-CAM control parameters for an E-CAM 
channel that was started with the StartECAM API function. This function will return 
an error if the specified E-CAM channel is not currently controlling a slave axis. 

◆StopECAM()

WMX3APIFU 
NC 
StopECAM ( int channel ) 
WMX3APIFU 
NC 
StopECAM ( int channel ) 
Stop E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 

Remarks 

This function stops E-CAM control for a channel. The E-CAM channel is specified, 
and not the slave axis number. If the E-CAM channel is not enabled and controlling 
an axis, an error will be returned. 

This function is used to stop E-CAM control that was started with either the 
StartECAM API function.
--------------------------------------------
WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆StartECAM()
WMX3APIFUNC 
StartECAM ( 
) 
int 
channel, 
ECAMData * pECAMData 
Start E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[in] 
pECAMData A pointer to an 
ECAMData class object 
that specifies the E-CAM 
control parameters. 

Remarks 

E-CAM control is a type of master-slave control in which the position command of a 
slave axis is controlled by the position of a master axis in a non-linear manner. The 
correlation between the position of the master axis and the position command of the 
slave axis is defined using an E-CAM table.
--------------------------------------------
StopECAM() : AdvSync 
StopEngine() : WMX3Api 
StopJogAtPos() : Motion 
StopLog() : Log 
stopLoggingOnBufferOverflow : LogChannelOptions 
StopMemoryLog() : Log 
stopOnEmptyBuffer : AdvMotion::PathIntplLookaheadConfiguration 
stopOnError : ApiBufferOptions 
stopOnLastBlock : ApiBufferOptions 
StopPathIntplLookahead() : AdvMotion 
Stopped : AdvMotion::PathIntplLookaheadState , ApiLogState , CyclicBufferState 
Stopping : AdvMotion::PathIntplLookaheadState , ApiLogState 
StopPlannedVelOverride() : EventControl 
StopPSO() : EventControl 
StopSingleAxis : CoreMotionEventOutput , EventControl::EventOutputFunction 
StopSuperimpose() : Motion 
StopTrq() : PMAxisTorque , Torque 
StringConversionError : ErrorCode 
subIndex : EcLogInputPdo , EcLogOutputPdo , EcSlaveSdoInfoEntryDescription 
sumApiTime : DeviceStatistics 
sumFuncProcTime : DeviceStatistics 
sumRtTime : DeviceStatistics 
SuperimposeMov() : Motion 
suspend : ModuleInfoA , ModuleInfoW
--------------------------------------------
Value alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartECAM(int channel, 
ECAMData 
*pECAMData); 
Python 
def StartECAM(channel, 
pECAMData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetECAM(int channel, 
ECAMData 
*pECAMData); 
Python def GetECAM(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
AdvSync_ECAMDat 
a -ECAM data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopECAM(int channel); 
Python def StopECAM(channel) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC 
StartDancerControl(int
-----------------------------------------------------------------------------------
466. Instruction: Stop E-CAM control.
A: ResolveConstantLinearVel(axis)
B: StopLog(channel)
C: StopECAM(channel)
D: StopEcamSignal(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
466. Model's answer: C
466. Correct answer: C
466. Result: Correct



Processing Question 467:
467. Context:
 This function is used to stop E-CAM control that was started with either the 
StartECAM API function. 

◆StartDancerControl()
WMX3APIFUNC 
StartDancerControl ( int axis, 
DancerControlOptio pDancerControlOption 
) 
Start dancer control. 
Parameters 
[in]axis The axis to execute 
dancer control. 

[in] 
pDancerControlOptions A pointer to a 

DancerControlOptions 

object that contains the 
options for dancer 
control. 

Remarks 

Dancer control is a function to control a velocity mode axis using a PID loop with the 
input taken from a segment of the I/O. The velocity command of the axis is set 
according to the following equation: 

Velocity Command = P(t) * P_Gain + I(t) * I_Gain + D(t) * D_Gain 

P(t) = (input -input_zero) / (input_max -input_min) 

I(t) = sum of P(T) from T = t-nto T = t 

D(t) = (1/m) * sum of P(T) -P(T-1) from T = t to T = t-m 

= (1/m) * (P(t) -P(t-m))
--------------------------------------------
Function 
Returns Returns 
C++ 
Python 
Type 
Value 
axis, 
DancerControlOptions 
*pDancerControlOptions 
); 
def 
StartDancerControl(axis, 
AdvSync_DancerControlO 
ptions 
pDancerControlOptions) 
int 
error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
StopDancerControl(int 
axis); 
def 
StopDancerControl(axis) 
Returns 
Type 
Value 
int 
error code 
Remarks 
Function 
Returns 
Remarks 
C++ 
Python 
Type 
Value 
static WMX3APIFUNC 
ErrorToString(int 
errCode, char *pString, 
unsigned int size); 
def ErrorToString(errCode) 
string 
error string 

 


CyclicBuffer Class
--------------------------------------------
WMX3APIFUNC GetDancerControlStatus (int axis, 
DancerControlStatus 

*pDancerControlStatus) 

Get the dancer control status. More... 


Public Attributes 

AdvancedMotion * amApi 

Member Function Documentation 

◆StartECAM()
WMX3APIFUNC 
StartECAM ( 
) 
int 
channel, 
ECAMData * pECAMData 
Start E-CAM control. 

Parameters 
[in] 
channel The channel of E-CAM 
control. Each channel 
corresponds to a single 
slave axis. Up to 
maxEcamChannel 
channels may be 
operated at any time. 
[in] 
pECAMData A pointer to an 
ECAMData class object 
that specifies the E-CAM 
control parameters. 

Remarks 

E-CAM control is a type of master-slave control in which the position command of a 
slave axis is controlled by the position of a master axis in a non-linear manner. The 
correlation between the position of the master axis and the position command of the 
slave axis is defined using an E-CAM table.
--------------------------------------------
◆StopDancerControl()
WMX3APIFU 
NC 
StopDancerC 
ontrol ( int axis ) 
Stop dancer control. 

Parameters 
[in] 
axis The axis to stop dancer 
control. 
Remarks 

This function stops an axis executing dancer control. The axis will decelerate to a 
stop using the quick stop deceleration specified with Quick Stop Dec. 

◆GetDancerControlStatus()

WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
int axis, 
DancerControlStatu pDancerControlStatus 
Get the dancer control status. 

Parameters 
[in] 
axis The axis to get the 
dancer control status of. 
[out] 
pDancerControlStatus A pointer to a 

DancerControlStatus 

object that will contain 
the dancer control status 
for the specified axis. 

Remarks 

This function obtains the dancer control status of an axis executing dancer control. 
See DancerControlStatus for additional information regarding each status. 

 

AdvVelocity Class Reference 

This class contains advanced velocity command functions.
-----------------------------------------------------------------------------------
467. Instruction: Start dancer control.
A: LetsDance(axis, DancerControlSettings options)
B: StopDancerControl(axis)
C: StartDancerControl(axis, AdvSync_DancerControlOptions pDancerControlOptions)
D: StartCBSplineMov_Profile (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
467. Model's answer: C
467. Correct answer: C
467. Result: Correct



Processing Question 468:
468. Context:
 This function is used to stop E-CAM control that was started with either the 
StartECAM API function. 

◆StartDancerControl()
WMX3APIFUNC 
StartDancerControl ( int axis, 
DancerControlOptio pDancerControlOption 
) 
Start dancer control. 
Parameters 
[in]axis The axis to execute 
dancer control. 

[in] 
pDancerControlOptions A pointer to a 

DancerControlOptions 

object that contains the 
options for dancer 
control. 

Remarks 

Dancer control is a function to control a velocity mode axis using a PID loop with the 
input taken from a segment of the I/O. The velocity command of the axis is set 
according to the following equation: 

Velocity Command = P(t) * P_Gain + I(t) * I_Gain + D(t) * D_Gain 

P(t) = (input -input_zero) / (input_max -input_min) 

I(t) = sum of P(T) from T = t-nto T = t 

D(t) = (1/m) * sum of P(T) -P(T-1) from T = t to T = t-m 

= (1/m) * (P(t) -P(t-m))
--------------------------------------------
Function 
Returns Returns 
C++ 
Python 
Type 
Value 
axis, 
DancerControlOptions 
*pDancerControlOptions 
); 
def 
StartDancerControl(axis, 
AdvSync_DancerControlO 
ptions 
pDancerControlOptions) 
int 
error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
StopDancerControl(int 
axis); 
def 
StopDancerControl(axis) 
Returns 
Type 
Value 
int 
error code 
Remarks 
Function 
Returns 
Remarks 
C++ 
Python 
Type 
Value 
static WMX3APIFUNC 
ErrorToString(int 
errCode, char *pString, 
unsigned int size); 
def ErrorToString(errCode) 
string 
error string 

 


CyclicBuffer Class
--------------------------------------------
m is the derivative sample size specified by the dancer control settings. If set to 0, 
the derivative sample size will be 1. 

n is the number of time cycles to take the integral over, as specified by the dancer 
control settings. If set to 0, the integral will be taken over the entire time that the 


dancer control is in operation, after starting dancer control. 

If the above options are configured correctly, the dancer control will settle to the 
state where the input is equal to input_zero, with the desired response 
characteristics. 

Dancer control may only be executed while the axis is in Velocity mode. 

Dancer control may only be executed while the axis is in Idle or DancerControl 
operation state. 

◆StopDancerControl()
WMX3APIFU 
NC 
StopDancerC 
ontrol ( int axis ) 
Stop dancer control. 

Parameters 
[in] 
axis The axis to stop dancer 
control. 
Remarks
--------------------------------------------
◆StopDancerControl()
WMX3APIFU 
NC 
StopDancerC 
ontrol ( int axis ) 
Stop dancer control. 

Parameters 
[in] 
axis The axis to stop dancer 
control. 
Remarks 

This function stops an axis executing dancer control. The axis will decelerate to a 
stop using the quick stop deceleration specified with Quick Stop Dec. 

◆GetDancerControlStatus()

WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
WMX3APIFUNC 
GetDancerControlSt 
atus ( 
) 
int axis, 
DancerControlStatu pDancerControlStatus 
Get the dancer control status. 

Parameters 
[in] 
axis The axis to get the 
dancer control status of. 
[out] 
pDancerControlStatus A pointer to a 

DancerControlStatus 

object that will contain 
the dancer control status 
for the specified axis. 

Remarks 

This function obtains the dancer control status of an axis executing dancer control. 
See DancerControlStatus for additional information regarding each status. 

 

AdvVelocity Class Reference 

This class contains advanced velocity command functions.
-----------------------------------------------------------------------------------
468. Instruction: Stop dancer control.
A: StartPathIntpl3DPos_TriggerEvents(pPathIntplCommand, pTriggerEvents)
B: endDancerControl(axis):
C: StopSuperimpose(axis)
D: StopDancerControl(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
468. Model's answer: D
468. Correct answer: D
468. Result: Correct



Processing Question 469:
469. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 


More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
},
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
-----------------------------------------------------------------------------------
469. Instruction: Get a string representation of the specified error code.
A: GetVersion()
B: ErrorToString(errCode)
C: ClearPathIntplWithRotation(channel)
D: ErrorToMessage(errorCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
469. Model's answer: B
469. Correct answer: B
469. Result: Correct



Processing Question 470:
470. Context:
 static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 

Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 
Parameters 
[in] 
[in] 
[in] 
errCode 
pString 
size 
The error code to get the 
string representation of. 
A char array that will 
contain the string 
representation of the 
error. 
The size of the char 
array in number of 
characters. 
Remarks
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
static 
WMX3APIFUNC 
ErrorToString ( 
int 
char * 
errCode, 
pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
-----------------------------------------------------------------------------------
470. Instruction: Get a string representation of the specified error code.
A: ApiLogToString(pLogData, logDataSize)
B: ErrorToString(errCode)
C: ErrorToString_v2(errorCode)
D: GetOutAnalogDataUCharEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
470. Model's answer: B
470. Correct answer: B
470. Result: Correct



Processing Question 471:
471. Context:
 },
    {
        "No": 397,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "AdvancedMotion Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 398,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the raw data of an API log."
--------------------------------------------
},
    {
        "No": 608,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "Io Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 609,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the raw data of an API log."
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
--------------------------------------------
},
    {
        "No": 781,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "WMX3Api Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 782,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the raw data of an API log."
-----------------------------------------------------------------------------------
471. Instruction: Get a string representation of the raw data of an API log.
A: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)
B: ApiLogToString(pLogData, logDataSize)
C: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
D: ApiLogDataToFormattedString(logData, dataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
471. Model's answer: B
471. Correct answer: B
471. Result: Correct



Processing Question 472:
472. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t
-----------------------------------------------------------------------------------
472. Instruction: Get the version of the module library.
A: Execute_AxisSel(pAxisSelection)
B: FetchLibraryVersion()
C: GetLibVersion()
D: ClearTxPdoWrite(slaveId, index, subindex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
472. Model's answer: C
472. Correct answer: C
472. Result: Correct



Processing Question 473:
473. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
},
    {
        "No": 242,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "CoreMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
473. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: SetVelocityFeedforwardGain(axis, gain)
B: IsDeviceValidForUser(userId: int, deviceId: String)
C: IsDeviceValid()
D: AddCommand(axis, pCmd, count)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
473. Model's answer: C
473. Correct answer: C
473. Result: Correct



Processing Question 474:
474. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Remarks 
Function 
C++ 
static WMX3APIFUNC 
ApiLogToString(unsigne 
d char *pLogData, 
unsigned int 
logDataSize, wchar_t 
*pString, unsigned int 
size); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
GetLibVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion); 
Python def GetLibVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
C++ 
static WMX3APIFUNC 
GetIMDllVersion(int
--------------------------------------------
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library.
-----------------------------------------------------------------------------------
474. Instruction: Get the version of the module rtdll.
A: ApiLogToString(pLogData, logDataSize)
B: GetVersion()
C: GetEmergencyStopParam()
D: FetchCurrentVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
474. Model's answer: B
474. Correct answer: B
474. Result: Correct



Processing Question 475:
475. Context:
 Function 
C++ OpenCyclicBuffer(AxisS 
election 
*pAxisSelection, 
unsigned int buffSize); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(int axis, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def OpenCyclicBuffer(axis, 
buffSize, sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(AxisSel 
ection *pAxisSelection, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize, 
sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
},
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
--------------------------------------------
},
    {
        "No": 512,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis."
    },
    {
        "No": 513,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes."
-----------------------------------------------------------------------------------
475. Instruction: Create a new cyclic buffer memory space for an axis.
A: IsDeviceValid()
B: OpenCyclicBuffer(axis, buffSize)
C: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)
D: OpenCircularBuffer(axis, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
475. Model's answer: B
475. Correct answer: B
475. Result: Correct



Processing Question 476:
476. Context:
 Function 
C++ OpenCyclicBuffer(AxisS 
election 
*pAxisSelection, 
unsigned int buffSize); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(int axis, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def OpenCyclicBuffer(axis, 
buffSize, sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(AxisSel 
ection *pAxisSelection, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize, 
sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
},
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
--------------------------------------------
},
    {
        "No": 512,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis."
    },
    {
        "No": 513,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes."
-----------------------------------------------------------------------------------
476. Instruction: Create a new cyclic buffer memory space for multiple axes.
A: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)
B: OpenCyclicBuffer_SelectAxis(pSelectedAxis, bufferSize)
C: GetStatus_AxisSel(pAxisSelection)
D: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
476. Model's answer: A
476. Correct answer: D
476. Result: Wrong



Processing Question 477:
477. Context:
 Function 
C++ OpenCyclicBuffer(AxisS 
election 
*pAxisSelection, 
unsigned int buffSize); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(int axis, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def OpenCyclicBuffer(axis, 
buffSize, sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(AxisSel 
ection *pAxisSelection, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize, 
sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
},
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
--------------------------------------------
},
    {
        "No": 512,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis."
    },
    {
        "No": 513,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes."
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
-----------------------------------------------------------------------------------
477. Instruction: Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units.
A: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)
B: Abort_AxisSel(pAxisSelection)
C: OpenCyclicBuffer(axis, buffSize, sizeUnit)
D: revised_function_str = InitializeCyclicBuffer(axis, maxSize, unitSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
477. Model's answer: C
477. Correct answer: C
477. Result: Correct



Processing Question 478:
478. Context:
 Function 
C++ OpenCyclicBuffer(AxisS 
election 
*pAxisSelection, 
unsigned int buffSize); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(int axis, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def OpenCyclicBuffer(axis, 
buffSize, sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenCyclicBuffer(AxisSel 
ection *pAxisSelection, 
unsigned int buffSize, 
SizeUnit::T sizeUnit); 
Python 
def 
OpenCyclicBuffer_AxisSel 
(pAxisSelection, buffSize, 
sizeUnit) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
},
    {
        "No": 514,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(int axis, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer(axis, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for an axis. The size of the memory space can be specified in one of several units. "
    },
    {
        "No": 515,
        "FunctionC++": "WMX3APIFUNC OpenCyclicBuffer(AxisSelection *pAxisSelection, unsigned int buffSize, SizeUnit::T sizeUnit)",
        "FunctionPython": "def OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units. "
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
The maximum size of the cyclic buffer memory space is 2GB-1Byte (2147483647 
bytes). Specifying a larger size will cause this function to return the 
RequestedBufferTooLarge error. 

Opened cyclic buffer memory spaces can be closed using CloseCyclicBuffer. Any 
cyclic buffer memory spaces that remain opened when the engine closes will be 
automatically closed. 

◆ 
OpenCyclicBuffer() [2/2] 



WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
AxisSelection * pAxisSelection, 
unsigned int numOfCycles 
Create a new cyclic buffer memory space for multiple axes.
-----------------------------------------------------------------------------------
478. Instruction: Create a new cyclic buffer memory space for multiple axes. The size of the memory space can be specified in one of several units.
A: Execute(axis)
B: OpenCyclicBuffer_AxisSelection(axis, maxSize, unit)
C: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize)
D: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
478. Model's answer: D
478. Correct answer: D
478. Result: Correct



Processing Question 479:
479. Context:
 Function 
C++ CloseCyclicBuffer(int 
axis); 
Python 
def 
CloseCyclicBuffer(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
CloseCyclicBuffer(AxisS 
election 
*pAxisSelection); 
Python 
def 
CloseCyclicBuffer_AxisSel 
(pAxisSelection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(int axis, 
CyclicBufferSingleAxisC 
ommand *pCmd); 
Python 
def AddCommand(axis, 
pCmd) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(int axis, 
CyclicBufferSingleAxisC 
ommand *pCmd, int 
count);
--------------------------------------------
Cyclic buffer memory space that is opened with the OpenCyclicBuffer function can 
be closed with this function. Any cyclic buffer memory spaces that remain opened 
when the engine closes will be automatically closed. 

◆CloseCyclicBuffer() [2/2]

WMX3APIFU 
NC 
CloseCyclicB 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( 
AxisSelection pAxisSelection ) 
Close the cyclic buffer memory space of multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
close the cyclic buffer 
memory space of. 
Remarks 

This function is an overload of CloseCyclicBuffer that closes the cyclic buffer 
memory space for multiple axes. 

◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis.
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
AxisSelection * pAxisSelection, 
unsigned int numOfCycles 
Create a new cyclic buffer memory space for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
create the cyclic buffer 
memory space for. 
[in] 
numOfCycles The number of cycles of 
data that can fit in the 
cyclic buffer memory 
space. Each cycle of 
data is represented by 
the 
CyclicBufferSingleAxis 
Command class. This 
memory space is 
allocated to each axis 
specified by the 
pAxisSelection 
argument. 
Remarks 

This function is an overload of OpenCyclicBuffer that opens the cyclic buffer 
memory space for multiple axes. 

◆CloseCyclicBuffer() [1/2]

WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
Close the cyclic buffer memory space of an axis. 
Parameters 
[in] 
axis The axis to close the 
cyclic buffer memory 
space of. 
Remarks
-----------------------------------------------------------------------------------
479. Instruction: Close the cyclic buffer memory space of an axis.
A: CloseCyclicBuffer(axis)
B: UpdateAxisBufferCyclic(axis)
C: AddCommand(axis, pCmd, count)
D: CloseCyclicBuffer_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
479. Model's answer: A
479. Correct answer: A
479. Result: Correct



Processing Question 480:
480. Context:
 WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
WMX3APIFUNC 
OpenCyclicBuffer ( 
) 
AxisSelection * pAxisSelection, 
unsigned int numOfCycles 
Create a new cyclic buffer memory space for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
create the cyclic buffer 
memory space for. 
[in] 
numOfCycles The number of cycles of 
data that can fit in the 
cyclic buffer memory 
space. Each cycle of 
data is represented by 
the 
CyclicBufferSingleAxis 
Command class. This 
memory space is 
allocated to each axis 
specified by the 
pAxisSelection 
argument. 
Remarks 

This function is an overload of OpenCyclicBuffer that opens the cyclic buffer 
memory space for multiple axes. 

◆CloseCyclicBuffer() [1/2]

WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( int axis ) 
Close the cyclic buffer memory space of an axis. 
Parameters 
[in] 
axis The axis to close the 
cyclic buffer memory 
space of. 
Remarks
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
},
    {
        "No": 516,
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(int axis)",
        "FunctionPython": "def CloseCyclicBuffer(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Close the cyclic buffer memory space of an axis."
    },
    {
        "No": 517,
        "FunctionC++": "WMX3APIFUNC CloseCyclicBuffer(AxisSelection *pAxisSelection)",
        "FunctionPython": "def CloseCyclicBuffer_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Close the cyclic buffer memory space of multiple axes."
--------------------------------------------
Function 
C++ CloseCyclicBuffer(int 
axis); 
Python 
def 
CloseCyclicBuffer(axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
CloseCyclicBuffer(AxisS 
election 
*pAxisSelection); 
Python 
def 
CloseCyclicBuffer_AxisSel 
(pAxisSelection) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(int axis, 
CyclicBufferSingleAxisC 
ommand *pCmd); 
Python 
def AddCommand(axis, 
pCmd) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(int axis, 
CyclicBufferSingleAxisC 
ommand *pCmd, int 
count);
-----------------------------------------------------------------------------------
480. Instruction: Close the cyclic buffer memory space of multiple axes.
A: CloseCyclicBuffer_AxisSelection(axisSelectionParameter)
B: IsDeviceValid()
C: OpenCyclicBuffer_AxisSel(pAxisSelection, buffSize, sizeUnit)
D: CloseCyclicBuffer_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
480. Model's answer: D
480. Correct answer: D
480. Result: Correct



Processing Question 481:
481. Context:
 ◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis. 

Parameters 
[in] 
axis The axis to append the 
cyclic position command 
data to. 
[in] 
pCmd A pointer to a 
CyclicBufferSingleAxis 
Command class that 
contains the cyclic 
position command data. 
Remarks 

If the cyclic position command buffer does not have enough space remaining to 
append a point, a BufferSizeIsNotEnough error is returned and no data is 
appended to the buffer. 

◆AddCommand() [2/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd, 
int count 
) 
Add any number of position command data to the cyclic position command buffer of 
one axis.
--------------------------------------------
Cyclic buffer memory space that is opened with the OpenCyclicBuffer function can 
be closed with this function. Any cyclic buffer memory spaces that remain opened 
when the engine closes will be automatically closed. 

◆CloseCyclicBuffer() [2/2]

WMX3APIFU 
NC 
CloseCyclicB 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( 
AxisSelection pAxisSelection ) 
Close the cyclic buffer memory space of multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
close the cyclic buffer 
memory space of. 
Remarks 

This function is an overload of CloseCyclicBuffer that closes the cyclic buffer 
memory space for multiple axes. 

◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis.
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
Parameters 
[in] 
axis The axis to append the 
cyclic position command 
data to. 
[in] 
pCmd An array of objects of the 
CyclicBufferSingleAxis 
Command class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmd array. 
Remarks 

If the cyclic position command buffer does not have enough space remaining to 
append the specified number of points, a BufferSizeIsNotEnough error is returned 
and no data is appended to the buffer. 

◆AddCommand() [3/4]

WMX3APIFUNC WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds 
Add one position command data each to the cyclic position command buffer of
-----------------------------------------------------------------------------------
481. Instruction: Add one position command data to the cyclic position command buffer of one axis.
A: OpenCyclicBuffer(axis, buffSize)
B: AddCommand(axis, pCmd, count)
C: registerCommand(newAxis, command).
D: AddCommand(axis, pCmd)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
481. Model's answer: D
481. Correct answer: D
481. Result: Correct



Processing Question 482:
482. Context:
 ◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis. 

Parameters 
[in] 
axis The axis to append the 
cyclic position command 
data to. 
[in] 
pCmd A pointer to a 
CyclicBufferSingleAxis 
Command class that 
contains the cyclic 
position command data. 
Remarks 

If the cyclic position command buffer does not have enough space remaining to 
append a point, a BufferSizeIsNotEnough error is returned and no data is 
appended to the buffer. 

◆AddCommand() [2/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd, 
int count 
) 
Add any number of position command data to the cyclic position command buffer of 
one axis.
--------------------------------------------
CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More...
--------------------------------------------
WMX3APIFUNC WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds 
Add one position command data each to the cyclic position command buffer of 

multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds A pointer to a 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data 
of multiple axes. 
Remarks 

This function is a variation of the AddCommand function that appends one position 
command data each to multiple axes. 

◆AddCommand() [4/4]

WMX3APIFUNC 
AddCommand ( 
) 
WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds, 
int count 
Add any number of position command data to the cyclic position command buffer of
--------------------------------------------
Python def AddCommand(axis, 
pCmd, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(AxisSele 
ction *pAxisSelection, 
CyclicBufferMultiAxisCo 
mmands *pCmds); 
Python 
def 
AddCommand_AxisSel(pA 
xisSelection, pCmds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AddCommand(AxisSele 
ction *pAxisSelection, 
CyclicBufferMultiAxisCo 
mmands *pCmds, int 
count); 
Python 
def 
AddCommand_AxisSel(pA 
xisSelection, pCmds, 
count) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
Execute(int axis, 
CyclicBufferSingleAxisO
-----------------------------------------------------------------------------------
482. Instruction: Add any number of position command data to the cyclic position command buffer of one axis.
A: CreateCommand(axis, command, quantity)
B: Execute(axis)
C: AddCommand_AxisSel(pAxisSelection, pCmds)
D: AddCommand(axis, pCmd, count)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
482. Model's answer: D
482. Correct answer: D
482. Result: Correct



Processing Question 483:
483. Context:
 CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More...
--------------------------------------------
WMX3APIFUNC WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds 
Add one position command data each to the cyclic position command buffer of 

multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds A pointer to a 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data 
of multiple axes. 
Remarks 

This function is a variation of the AddCommand function that appends one position 
command data each to multiple axes. 

◆AddCommand() [4/4]

WMX3APIFUNC 
AddCommand ( 
) 
WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds, 
int count 
Add any number of position command data to the cyclic position command buffer of
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds An array of objects of the 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmds array. 
Remarks 

This function is a variation of the AddCommand function that appends any number 
of position command data to multiple axes. 

◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis.
-----------------------------------------------------------------------------------
483. Instruction: Add one position command data each to the cyclic position command buffer of multiple axes.
A: GetVersion()
B: AddCommand_AxisSel(pAxisSelection, pCmds)
C: UpdateFunction_AxisSelection(pSelection, pCommands)
D: Continue_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
483. Model's answer: B
483. Correct answer: B
483. Result: Correct



Processing Question 484:
484. Context:
 WMX3APIFUNC WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds 
Add one position command data each to the cyclic position command buffer of 

multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds A pointer to a 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data 
of multiple axes. 
Remarks 

This function is a variation of the AddCommand function that appends one position 
command data each to multiple axes. 

◆AddCommand() [4/4]

WMX3APIFUNC 
AddCommand ( 
) 
WMX3APIFUNC 
AddCommand ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pCmds, 
int count 
Add any number of position command data to the cyclic position command buffer of
--------------------------------------------
WMX3APIFUNC OpenCyclicBuffer (AxisSelection 
*pAxisSelection, unsigned int 
numOfCycles) 
Create a new cyclic buffer memory 
space for multiple axes. More... 

WMX3APIFUNC CloseCyclicBuffer (int axis) 
Close the cyclic buffer memory space of 
an axis. More... 
WMX3APIFUNC CloseCyclicBuffer (AxisSelection 
*pAxisSelection) 
Close the cyclic buffer memory space of 
multiple axes. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd) 

Add one position command data to the 
cyclic position command buffer of one 
axis. More... 

WMX3APIFUNC AddCommand (int axis, 
CyclicBufferSingleAxisCommand 

*pCmd, int count) 

Add any number of position command 
data to the cyclic position command 


buffer of one axis. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More...
--------------------------------------------
Cyclic buffer memory space that is opened with the OpenCyclicBuffer function can 
be closed with this function. Any cyclic buffer memory spaces that remain opened 
when the engine closes will be automatically closed. 

◆CloseCyclicBuffer() [2/2]

WMX3APIFU 
NC 
CloseCyclicB 
WMX3APIFU 
NC 
CloseCyclicB 
uffer ( 
AxisSelection pAxisSelection ) 
Close the cyclic buffer memory space of multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
close the cyclic buffer 
memory space of. 
Remarks 

This function is an overload of CloseCyclicBuffer that closes the cyclic buffer 
memory space for multiple axes. 

◆AddCommand() [1/4]

WMX3APIFUNC 
AddCommand ( 
WMX3APIFUNC 
AddCommand ( 
int 
axis, 
CyclicBufferSingleA pCmd 
) 
Add one position command data to the cyclic position command buffer of one axis.
--------------------------------------------
CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More...
-----------------------------------------------------------------------------------
484. Instruction: Add any number of position command data to the cyclic position command buffer of multiple axes.
A: UpdateAxisSelection(pAxisSelection, pCommands, count)
B: AddCommand_AxisSel(pAxisSelection, pCmds, count)
C: OpenCyclicBuffer(axis, buffSize)
D: AddCommand_AxisSel(pAxisSelection, pCmds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
484. Model's answer: B
484. Correct answer: B
484. Result: Correct



Processing Question 485:
485. Context:
 multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds An array of objects of the 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmds array. 
Remarks 

This function is a variation of the AddCommand function that appends any number 
of position command data to multiple axes. 

◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis.
--------------------------------------------
◆Execute() [2/2]

WMX3APIFUNC WMX3APIFUNC 
Execute ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pOption = NULL
Start the execution of the cyclic position command buffer for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
start the execution of 
cyclic position 
commands. 
[in] 
pOption A pointer to a 
CyclicBufferMultiAxisO 
ption class that contains 
execution options. If no 
value is specified for this 
optional argument, the 
default options will be 
applied. 
Remarks 

This function is an overloaded function of Execute that starts the execution of the 
cyclic position command buffer for multiple axes. 

◆Abort() [1/2]

WMX3APIFU 
NC Abort ( int axis ) 
WMX3APIFU 
NC Abort ( int axis ) 
Stop execution of the cyclic position command buffer of an axis and clear the buffer. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks
--------------------------------------------
◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis. 

Parameters 
[in] 
axis The axis to start 
execution of cyclic 
position commands. 
[in] 
pOption A pointer to a 
CyclicBufferSingleAxis 
Option class that 
contains execution 
options. If no value is 
specified for this optional 
argument, the default 
options will be applied. 
Remarks 

An axis that is currently executing cyclic position commands will have an 
OperationState of DirectControl. 

If the cyclic position command buffer is empty or becomes empty, execution will 
resume automatically the next time that cyclic position command data is appended 
to the buffer as long as the axis is still in DirectControl. 

◆Execute() [2/2]
--------------------------------------------
CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More...
-----------------------------------------------------------------------------------
485. Instruction: Start the execution of the cyclic position command buffer for a single axis.
A: CloseCyclicBuffer_AxisSel(pAxisSelection)
B: Pause(axis)
C: Execute(axis)
D: ExecuteAxis(axis_command)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
485. Model's answer: C
485. Correct answer: C
485. Result: Correct



Processing Question 486:
486. Context:
 ◆Execute() [2/2]

WMX3APIFUNC WMX3APIFUNC 
Execute ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pOption = NULL
Start the execution of the cyclic position command buffer for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
start the execution of 
cyclic position 
commands. 
[in] 
pOption A pointer to a 
CyclicBufferMultiAxisO 
ption class that contains 
execution options. If no 
value is specified for this 
optional argument, the 
default options will be 
applied. 
Remarks 

This function is an overloaded function of Execute that starts the execution of the 
cyclic position command buffer for multiple axes. 

◆Abort() [1/2]

WMX3APIFU 
NC Abort ( int axis ) 
WMX3APIFU 
NC Abort ( int axis ) 
Stop execution of the cyclic position command buffer of an axis and clear the buffer. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks
--------------------------------------------
multiple axes. 
Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection that 
specifies which axes to 
append the cyclic 
position command data 
to. 
[in] 
pCmds An array of objects of the 
CyclicBufferMultiAxisC 
ommands class that 
contains the cyclic 
position command data. 
The number of objects in 
the array must equal the 
"count" argument. 
[in] 
count The number of objects in 
the pCmds array. 
Remarks 

This function is a variation of the AddCommand function that appends any number 
of position command data to multiple axes. 

◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis.
--------------------------------------------
CyclicBufferMultiAxisCommands 

*pCmds) 

Add one position command data each to 
the cyclic position command buffer of 
multiple axes. More... 

WMX3APIFUNC AddCommand (AxisSelection 
*pAxisSelection, 

CyclicBufferMultiAxisCommands 

*pCmds, int count) 

Add any number of position command 
data to the cyclic position command 
buffer of multiple axes. More... 

WMX3APIFUNC Execute (int axis, 
CyclicBufferSingleAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for a single axis. More... 

WMX3APIFUNC Execute (AxisSelection *pAxisSelection, 
CyclicBufferMultiAxisOption 

*pOption=NULL) 

Start the execution of the cyclic position 
command buffer for multiple axes. 

More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More...
--------------------------------------------
◆Execute() [1/2]

WMX3APIFUNC 
Execute ( 
WMX3APIFUNC 
Execute ( 
int 
axis, 
CyclicBufferSingleA pOption = NULL
) 
Start the execution of the cyclic position command buffer for a single axis. 

Parameters 
[in] 
axis The axis to start 
execution of cyclic 
position commands. 
[in] 
pOption A pointer to a 
CyclicBufferSingleAxis 
Option class that 
contains execution 
options. If no value is 
specified for this optional 
argument, the default 
options will be applied. 
Remarks 

An axis that is currently executing cyclic position commands will have an 
OperationState of DirectControl. 

If the cyclic position command buffer is empty or becomes empty, execution will 
resume automatically the next time that cyclic position command data is appended 
to the buffer as long as the axis is still in DirectControl. 

◆Execute() [2/2]
-----------------------------------------------------------------------------------
486. Instruction: Start the execution of the cyclic position command buffer for multiple axes.
A: Execute_AxisSel(pAxisSelection)
B: IsDeviceValid()
C: Resume_AxisSel(pAxisSelection)
D: Execute_AxisSelection(pSelectedAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
486. Model's answer: A
486. Correct answer: A
486. Result: Correct



Processing Question 487:
487. Context:
 More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
},
    {
        "No": 524,
        "FunctionC++": "WMX3APIFUNC Abort(int axis)",
        "FunctionPython": "def Abort(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and clear the buffer. "
    },
    {
        "No": 525,
        "FunctionC++": "WMX3APIFUNC Abort(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Abort_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and clear the buffer. "
--------------------------------------------
◆Execute() [2/2]

WMX3APIFUNC WMX3APIFUNC 
Execute ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pOption = NULL
Start the execution of the cyclic position command buffer for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
start the execution of 
cyclic position 
commands. 
[in] 
pOption A pointer to a 
CyclicBufferMultiAxisO 
ption class that contains 
execution options. If no 
value is specified for this 
optional argument, the 
default options will be 
applied. 
Remarks 

This function is an overloaded function of Execute that starts the execution of the 
cyclic position command buffer for multiple axes. 

◆Abort() [1/2]

WMX3APIFU 
NC Abort ( int axis ) 
WMX3APIFU 
NC Abort ( int axis ) 
Stop execution of the cyclic position command buffer of an axis and clear the buffer. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks
--------------------------------------------
Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]
-----------------------------------------------------------------------------------
487. Instruction: Stop execution of the cyclic position command buffer of an axis and clear the buffer.
A: Wait(axis)
B: Terminate(axis)
C: No alternative function available
D: Abort(axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
487. Model's answer: D
487. Correct answer: D
487. Result: Correct



Processing Question 488:
488. Context:
 More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
◆Execute() [2/2]

WMX3APIFUNC WMX3APIFUNC 
Execute ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pOption = NULL
Start the execution of the cyclic position command buffer for multiple axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
start the execution of 
cyclic position 
commands. 
[in] 
pOption A pointer to a 
CyclicBufferMultiAxisO 
ption class that contains 
execution options. If no 
value is specified for this 
optional argument, the 
default options will be 
applied. 
Remarks 

This function is an overloaded function of Execute that starts the execution of the 
cyclic position command buffer for multiple axes. 

◆Abort() [1/2]

WMX3APIFU 
NC Abort ( int axis ) 
WMX3APIFU 
NC Abort ( int axis ) 
Stop execution of the cyclic position command buffer of an axis and clear the buffer. 

Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks
--------------------------------------------
},
    {
        "No": 524,
        "FunctionC++": "WMX3APIFUNC Abort(int axis)",
        "FunctionPython": "def Abort(axis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Class",
        "Instruction": "Stop execution of the cyclic position command buffer of an axis and clear the buffer. "
    },
    {
        "No": 525,
        "FunctionC++": "WMX3APIFUNC Abort(AxisSelection *pAxisSelection)",
        "FunctionPython": "def Abort_AxisSel(pAxisSelection)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CyclicBuffer Class",
        "Instruction": "Stop execution of the cyclic position command buffer of multiple axes and clear the buffer. "
--------------------------------------------
Parameters 
[in] 
axis The axis to stop the 
execution of cyclic 
position commands. 

Remarks 

An axis that stops executing cyclic position commands will return to the Idle state. 
The command velocity of the axis will suddenly become 0. 

Any remaining position commands in the buffer will be cleared. 

◆Abort() [2/2]

WMX3APIFU 
NC Abort ( 
WMX3APIFU 
NC Abort ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and clear the 
buffer. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of Abort that stops the execution of the 
cyclic position command buffer for multiple axes. 

◆ExecQuickStop() [1/2]
-----------------------------------------------------------------------------------
488. Instruction: Stop execution of the cyclic position command buffer of multiple axes and clear the buffer.
A: Abort_AxisSel(pAxisSelection)
B: Wait_AxisSel(pAxisSelection)
C: OpenCyclicBuffer(axis, buffSize)
D: Terminate_AxisSelection(pSelectedAxis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
488. Model's answer: A
488. Correct answer: A
488. Result: Correct



Processing Question 489:
489. Context:
 ◆GetStatus() [1/2]

WMX3APIFUNC 
GetStatus ( 
WMX3APIFUNC 
GetStatus ( 
int 
axis, 
CyclicBufferSingleA pStatus 
) 
Get the cyclic position command buffer status of the specified axis. 

Parameters 
[in] 
axis The axis to get the 
status of. 
[out] 
pStatus A pointer to a 
CyclicBufferSingleAxis 
Status class which will 
return the cyclic position 
command buffer status 
of the specified axis. 
Remarks 

This function retrieves the cyclic position command buffer status of one axis. 

◆GetStatus() [2/2]

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pStatus 
Get the cyclic position command buffer status of the specified axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to get 
the statuses of. 
[out] 
pStatus A pointer to a 
CyclicBufferMultiAxisS 
tatus class which will 
return the cyclic position 
command buffer 
statuses of the specified 
axes. 

Remarks
--------------------------------------------
Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 


static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
Any remaining position commands in the buffer will be cleared. 

◆ExecQuickStop() [2/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and 
decelerate the axes to a stop using the quick stop deceleration. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of ExecQuickStop that stops the execution 
of the cyclic position command buffer for multiple axes. 

◆GetStatus() [1/2]

WMX3APIFUNC 
GetStatus ( 
WMX3APIFUNC 
GetStatus ( 
int 
axis, 
CyclicBufferSingleA pStatus 
) 
Get the cyclic position command buffer status of the specified axis.
--------------------------------------------
More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
-----------------------------------------------------------------------------------
489. Instruction: Get the cyclic position command buffer status of the specified axis.
A: get_axis_status(axis):
B: GetStatus(axis)
C: GetStatus()
D: CloseCyclicBuffer_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
489. Model's answer: B
489. Correct answer: B
489. Result: Correct



Processing Question 490:
490. Context:
 More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 


static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
Any remaining position commands in the buffer will be cleared. 

◆ExecQuickStop() [2/2]

WMX3APIFU 
NC 
ExecQuickSt 
WMX3APIFU 
NC 
ExecQuickSt 
op ( 
AxisSelection pAxisSelection ) 
Stop execution of the cyclic position command buffer of multiple axes and 
decelerate the axes to a stop using the quick stop deceleration. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to 
stop the execution of 
cyclic position 
commands. 
Remarks 

This function is an overloaded function of ExecQuickStop that stops the execution 
of the cyclic position command buffer for multiple axes. 

◆GetStatus() [1/2]

WMX3APIFUNC 
GetStatus ( 
WMX3APIFUNC 
GetStatus ( 
int 
axis, 
CyclicBufferSingleA pStatus 
) 
Get the cyclic position command buffer status of the specified axis.
--------------------------------------------
◆GetStatus() [1/2]

WMX3APIFUNC 
GetStatus ( 
WMX3APIFUNC 
GetStatus ( 
int 
axis, 
CyclicBufferSingleA pStatus 
) 
Get the cyclic position command buffer status of the specified axis. 

Parameters 
[in] 
axis The axis to get the 
status of. 
[out] 
pStatus A pointer to a 
CyclicBufferSingleAxis 
Status class which will 
return the cyclic position 
command buffer status 
of the specified axis. 
Remarks 

This function retrieves the cyclic position command buffer status of one axis. 

◆GetStatus() [2/2]

WMX3APIFUNC 
GetStatus ( 
) 
WMX3APIFUNC 
GetStatus ( 
) 
AxisSelection * pAxisSelection, 
CyclicBufferMultiAx pStatus 
Get the cyclic position command buffer status of the specified axes. 

Parameters 
[in] 
pAxisSelection A pointer to a 
AxisSelection class that 
specifies the axes to get 
the statuses of. 
[out] 
pStatus A pointer to a 
CyclicBufferMultiAxisS 
tatus class which will 
return the cyclic position 
command buffer 
statuses of the specified 
axes. 

Remarks
-----------------------------------------------------------------------------------
490. Instruction: Get the cyclic position command buffer status of the specified axes.
A: GetAxisSelectionStatus(pSelectedAxis)
B: Execute_AxisSel(pAxisSelection)
C: GetStatus_AxisSel(pAxisSelection)
D: Stop_AxisSel(pAxisSelection)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
490. Model's answer: C
490. Correct answer: C
490. Result: Correct



Processing Question 491:
491. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the ErrorCode enum. All errors returned by functions in 
class WMX3Api will be defined in this enum. Errors returned by functions in other 
classes may not be defined in this enum, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
WMX3Api class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code.
--------------------------------------------
},
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
-----------------------------------------------------------------------------------
491. Instruction: Get a string representation of the specified error code.
A: ErrorCodeToString(err)
B: GetOutputData(buff, buffSize, dataSize)
C: ErrorToString(errCode)
D: StartPathIntplMov_TriggerEvents(pPathIntplCommand, pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
491. Model's answer: C
491. Correct answer: C
491. Result: Correct



Processing Question 492:
492. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
492. Instruction: Get a string representation of the raw data of an API log.
A: ApiLogToString(pLogData, logDataSize)
B: ApiLogToString(logData, dataSize)
C: SetEvent(pEventData)
D: SetOptions(channel, pOptions)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
492. Model's answer: A
492. Correct answer: A
492. Result: Correct



Processing Question 493:
493. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
--------------------------------------------
Di 
git Version Type Version Meaning What the user should do when the 
version is incremented 
A 
major version 
number 
The major version number of the product, 
fixed at 3 for WMX3. 
This number will not be updated for follow-on 
updates of the same product line. Migration 
to a new product with an update of this 
number typically requires an extensive user 
application redesign. 
B 
minor version 
number 
A number that manages the need for code 
changes in the user application. example, 
this means updates such as changing the 
argument type of a WMX3 function, deleting 
a function, changing a structure member, or 
changing the name of a variable. 
WMX3 update installations that involve an 
increment of this number may result in 
compilation errors in the user application. It 
is necessary to update the code and 
redesign the user application. 
C 
revision version 
number 
A number that manages the need to rebuild 
the user application. example, this means
-----------------------------------------------------------------------------------
493. Instruction: Get the version of the module library.
A: SetEvent(pEventData)
B: GetLibraryVersion()
C: GetLibVersion()
D: StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
493. Model's answer: C
493. Correct answer: C
493. Result: Correct



Processing Question 494:
494. Context:
 This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
},
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆StartLog()
-----------------------------------------------------------------------------------
494. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetOutputModuleId()
B: StartMemoryLog(channel)
C: IsDeviceValid()
D: IsDeviceDataValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
494. Model's answer: C
494. Correct answer: C
494. Result: Correct



Processing Question 495:
495. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
-----------------------------------------------------------------------------------
495. Instruction: Get the version of the module rtdll.
A: RetrieveVersion()
B: SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)
C: GetVersion()
D: StartPathIntplWithRotation_Pos_TriggerEvents(channel, double pos, TriggerEvents pTriggerEvents)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
495. Model's answer: C
495. Correct answer: C
495. Result: Correct



Processing Question 496:
496. Context:
 ◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
Function 
C++ 
EventOutput 
*pEventOutput, int id, 
EventOption *pOption); 
"WMX3APIFUNC 
SetEvent(int <em>pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption</em> 
pOption = NULL);" 
Python 
def 
SetEvent_ID_Option(pEve 
ntInput, pEventOutput, id, 
pOption) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventModuleId(int id, 
int* pInputModuleId, int* 
pOutputModuleId); 
Python def GetEventModuleId(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -input 
module Id 
2 : int -output 
moduleId 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
496. Instruction: Set an event.
A: RemoveEvent(id)
B: SetEvent_Option(pEventInput, pEventOutput, pOption)
C: SetEventDetails(eventInputData, eventOutputData)
D: SetEvent(pEventInput, pEventOutput)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
496. Model's answer: D
496. Correct answer: D
496. Result: Correct



Processing Question 497:
497. Context:
 Function 
C++ 
EventOutput 
*pEventOutput, int id, 
EventOption *pOption); 
"WMX3APIFUNC 
SetEvent(int <em>pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption</em> 
pOption = NULL);" 
Python 
def 
SetEvent_ID_Option(pEve 
ntInput, pEventOutput, id, 
pOption) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventModuleId(int id, 
int* pInputModuleId, int* 
pOutputModuleId); 
Python def GetEventModuleId(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -input 
module Id 
2 : int -output 
moduleId 
Remarks 
WMX3APIFUNC
--------------------------------------------
◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
Python SetEvent_Option(pEventIn 
put, pEventOutput, 
pOption) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
wmx3Api::EventControl::S 
etEvent(int <em>pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption *pOption); 
"WMX3APIFUNC 
SetEvent(int *pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption</em> 
pOption = NULL);" 
Python 
def 
SetEvent_ID(pEventInput, 
pEventOutput, id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
wmx3Api::EventControl: 
:SetEvent(int *pId, 
EventInput 
*pEventInput,
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
-----------------------------------------------------------------------------------
497. Instruction: Set an event.
A: SetEvent_Option(pEventInput, pEventOutput, pOption)
B: SetEventOutput(id, pEventOutput)
C: StopPSO(channel)
D: SetEventOption(pInputEvent, pOutputEvent, option)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
497. Model's answer: A
497. Correct answer: A
497. Result: Correct



Processing Question 498:
498. Context:
 int id); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEvent(int id, Event 
*pEventData); 
Python def GetEvent(id) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_Event 
-event data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSoftwareTouchProbe 
(unsigned int channel, 
unsigned char enable, 
int axis, int byteAddrs, 
int bitOffset, unsigned 
char logic, 
TouchProbeMode::T 
mode); 
Python 
def 
SetSoftwareTouchProbe(c 
hannel, enable, axis, 
byteAddrs, bitOffset, logic, 
mode) 
Returns 
Type int 
Value error code
--------------------------------------------
◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
Function 
C++ 
EventOutput 
*pEventOutput, int id, 
EventOption *pOption); 
"WMX3APIFUNC 
SetEvent(int <em>pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption</em> 
pOption = NULL);" 
Python 
def 
SetEvent_ID_Option(pEve 
ntInput, pEventOutput, id, 
pOption) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventModuleId(int id, 
int* pInputModuleId, int* 
pOutputModuleId); 
Python def GetEventModuleId(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -input 
module Id 
2 : int -output 
moduleId 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
498. Instruction: Set an event.
A: ModifyEventID(pInputEvent, pOutputEvent, newID)
B: SetEventOutput(id, pEventOutput)
C: SetEvent_ID(pEventInput, pEventOutput, id)
D: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
498. Model's answer: C
498. Correct answer: C
498. Result: Correct



Processing Question 499:
499. Context:
 int id); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEvent(int id, Event 
*pEventData); 
Python def GetEvent(id) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_Event 
-event data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSoftwareTouchProbe 
(unsigned int channel, 
unsigned char enable, 
int axis, int byteAddrs, 
int bitOffset, unsigned 
char logic, 
TouchProbeMode::T 
mode); 
Python 
def 
SetSoftwareTouchProbe(c 
hannel, enable, axis, 
byteAddrs, bitOffset, logic, 
mode) 
Returns 
Type int 
Value error code
--------------------------------------------
◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
Function 
C++ 
EventOutput 
*pEventOutput, int id, 
EventOption *pOption); 
"WMX3APIFUNC 
SetEvent(int <em>pId, 
EventInput *pEventInput, 
EventOutput 
*pEventOutput, int id, 
EventOption</em> 
pOption = NULL);" 
Python 
def 
SetEvent_ID_Option(pEve 
ntInput, pEventOutput, id, 
pOption) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventModuleId(int id, 
int* pInputModuleId, int* 
pOutputModuleId); 
Python def GetEventModuleId(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -input 
module Id 
2 : int -output 
moduleId 
Remarks 
WMX3APIFUNC
-----------------------------------------------------------------------------------
499. Instruction: Set an event.
A: SetEvent_ID_Option(pEventInput, pEventOutput, id, pOption)
B: SetEvent_Option_ID(pEventInput, pEventOutput, id, pOption)
C: GetSoftwareTouchProbe(channel)
D: SetEventInput(id, pEventInput)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
499. Model's answer: A
499. Correct answer: A
499. Result: Correct



Processing Question 500:
500. Context:
 },
    {
        "No": 528,
        "FunctionC++": "int GetInputModuleId()",
        "FunctionPython": "def GetInputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 529,
        "FunctionC++": "WMX3APIFUNC GetInputData(unsigned char *buff, int buffSize, int *dataSize, char *initialState)",
        "FunctionPython": "def GetInputData(buff, buffSize, dataSize, initialState)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 530,
        "FunctionC++": "WMX3APIFUNC SetInputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetInputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
--------------------------------------------
sStatus -status 
Remarks 
sStatus -status 
Remarks 
 


EventControl Class 

C++ int GetInputModuleId(); 
Function 
Python def GetInputModuleId() 
Type int 
Returns 
Value ID of the module 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
WMX3APIFUNC 
GetInputData(unsigned 
C++ char* buff, int buffSize, 
int* dataSize, char 
Function *initialState); 
def GetInputData(buff, 
Python buffSize, dataSize, 
initialState) 
Type int 
Returns 
Value error code 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
WMX3APIFUNC 
SetInputData(int 
C++ 
moduleId, unsigned 
char* data, int dataSize); Function 
def 
Python SetInputData(moduleId, 
data, dataSize) 
Type intReturns 
Value error code 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
C++ int GetOutputModuleId(); 
Function 
Python def GetOutputModuleId()
--------------------------------------------
},
    {
        "No": 531,
        "FunctionC++": "int GetOutputModuleId()",
        "FunctionPython": "def GetOutputModuleId()",
        "ReturnType": "int",
        "ReturnValue": "ID of the module",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 532,
        "FunctionC++": "WMX3APIFUNC GetOutputData(unsigned char *buff, int buffSize, int *dataSize)",
        "FunctionPython": "def GetOutputData(buff, buffSize, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
    },
    {
        "No": 533,
        "FunctionC++": "WMX3APIFUNC SetOutputData(int moduleId, unsigned char *data, int dataSize)",
        "FunctionPython": "def SetOutputData(moduleId, data, dataSize)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": null
--------------------------------------------
edVelocityStatus -
status 
Remarks 
edVelocityStatus -
status 
Remarks 
 


Io Class 

C++ int GetInputModuleId(); 
Function 
Python def GetInputModuleId() 
Type int 
Returns 
Value ID of the module 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
WMX3APIFUNC 
GetInputData(unsigned 
C++ char* buff, int buffSize, 
int* dataSize, char 
Function *initialState); 
def GetInputData(buff, 
Python buffSize, dataSize, 
initialState) 
Type int 
Returns 
Value error code 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
WMX3APIFUNC 
SetInputData(int 
C++ 
moduleId, unsigned 
char* data, int dataSize); Function 
def 
Python SetInputData(moduleId, 
data, dataSize) 
Type intReturns 
Value error code 
Remarks 􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍚􀎔􀍯6 
C++ int GetOutputModuleId(); 
Function 
Python def GetOutputModuleId()
-----------------------------------------------------------------------------------
500. Instruction: Get the input function module ID and output function module ID of an existing event.
A: GetInputModuleId()
B: SetPlannedVelOverrideSingleData(channel, sData)
C: GetEventModuleId(id)
D: GetModuleEventId(moduleId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
500. Model's answer: A
500. Correct answer: C
500. Result: Wrong



Processing Question 501:
501. Context:
 Function 
C++ 
GetEvent(int id, 
EventInput 
<em>pEventInput, 
EventOutput 
*pEventOutput, 
EventOption</em> 
pOption = NULL); 
Python def GetEvent_InOut(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventApiEventInput 
-event input 
2 : 
EventApiEventOutp 
ut -event output 
3 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventOption(int id, 
EventOption* pOption); 
Python def GetEventOption(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetEventInput(int id, 
EventInput
--------------------------------------------
},
    {
        "No": 546,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def GetEvent_InOut(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "FunctionPython": "def GetEventOption(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the option settings of an existing event. "
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
◆GetEvent() [1/2]
WMX3APIFUNC 
GetEvent ( int id, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Get the parameters of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an object of 
a class that extends the 
EventInput class that 
will contain the event 
input function. The class 
must match the class 
that was used to set the 
event input function. 
[out] 
pEventOutput A pointer to an object of 
a class that extends the 
EventOutput class that 
will contain the event 
output function. The 
class must match the 
class that was used to 
set the event output 
function. 
[out] 
pOption An optional pointer to an 
object of the 
EventOption class that 
will contain the option 
settings of the event. 
Remarks 

This function gets the parameters of an event that was defined by SetEvent and 
other functions.
-----------------------------------------------------------------------------------
501. Instruction: Get an event.
A: RetrieveEventDetailsInOut(eventId)
B: GetPSOConfig(channel)
C: GetEvent_InOut(id)
D: GetEventOption(id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
501. Model's answer: C
501. Correct answer: C
501. Result: Correct



Processing Question 502:
502. Context:
 WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
Function 
C++ 
GetEvent(int id, 
EventInput 
<em>pEventInput, 
EventOutput 
*pEventOutput, 
EventOption</em> 
pOption = NULL); 
Python def GetEvent_InOut(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventApiEventInput 
-event input 
2 : 
EventApiEventOutp 
ut -event output 
3 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventOption(int id, 
EventOption* pOption); 
Python def GetEventOption(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetEventInput(int id, 
EventInput
--------------------------------------------
◆GetEvent() [1/2]
WMX3APIFUNC 
GetEvent ( int id, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Get the parameters of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an object of 
a class that extends the 
EventInput class that 
will contain the event 
input function. The class 
must match the class 
that was used to set the 
event input function. 
[out] 
pEventOutput A pointer to an object of 
a class that extends the 
EventOutput class that 
will contain the event 
output function. The 
class must match the 
class that was used to 
set the event output 
function. 
[out] 
pOption An optional pointer to an 
object of the 
EventOption class that 
will contain the option 
settings of the event. 
Remarks 

This function gets the parameters of an event that was defined by SetEvent and 
other functions.
--------------------------------------------
},
    {
        "No": 546,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def GetEvent_InOut(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "FunctionPython": "def GetEventOption(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the option settings of an existing event. "
-----------------------------------------------------------------------------------
502. Instruction: Get the option settings of an existing event.
A: GetEventInput(id)
B: GetEvent(id)
C: GetEventDetails(event_id)
D: GetEventOption(id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
502. Model's answer: D
502. Correct answer: D
502. Result: Correct



Processing Question 503:
503. Context:
 This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent () 

Clear all existing events. More... 

WMX3APIFUNC SetCustomEvent (int *pId, int 
inputModuleId, void *pInputData, int 
inputDataSize, int outputModuleId, void 
*pOutputData, int outputDataSize, int id, 
CustomEventOption *pOption=NULL) 
Reserved. More... 

WMX3APIFUNC SetCustomEventInput (int id, int 
moduleId, void *pInputData, int 


inputDataSize) 

Reserved. More... 

WMX3APIFUNC SetCustomEventOutput (int id, int 
moduleId, void *pOutputData, int 
outputDataSize) 
Reserved. More... 

WMX3APIFUNC GetCustomEventInput (int id, void 
*pInputDataBuff, int inputDataBuffSize, int 
*pInputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC GetCustomEventOutput (int id, void 
*pOutputDataBuff, int outputDataBuffSize, 
int *pOutputDataSize, int *pModuleId) 
Reserved. More...
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
Once the output function is triggered, it cannot be triggered again until the input 
function becomes FALSE and then TRUE again. When the EnableEvent function is 
called for an event, the state of the event will be reset so that it may be triggered 
again. 

Events are evaluated every communication cycle in the order of the identification 
numbers by the module that defines the event. 

This function returns the ID number of the event. Each event has a unique ID 
number. However, once an event is deleted, the ID number of that event may be 
reused by a subsequently defined event. The event ID number is required to obtain 
the event status with the GetEvent function. 

See also 

Events 

◆SetEvent() [2/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
int id, 
EventOption * pOption = NULL 
)
-----------------------------------------------------------------------------------
503. Instruction: This function sets the input function of an event.
A: SetEvent(id, eventDetails)
B: EnableEvent(id, enable)
C: SetEvent(pEventInput, pEventOutput)
D: SetEventInput(id, pEventInput)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
503. Model's answer: D
503. Correct answer: D
503. Result: Correct



Processing Question 504:
504. Context:
 This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
Once the output function is triggered, it cannot be triggered again until the input 
function becomes FALSE and then TRUE again. When the EnableEvent function is 
called for an event, the state of the event will be reset so that it may be triggered 
again. 

Events are evaluated every communication cycle in the order of the identification 
numbers by the module that defines the event. 

This function returns the ID number of the event. Each event has a unique ID 
number. However, once an event is deleted, the ID number of that event may be 
reused by a subsequently defined event. The event ID number is required to obtain 
the event status with the GetEvent function. 

See also 

Events 

◆SetEvent() [2/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
int id, 
EventOption * pOption = NULL 
)
--------------------------------------------
◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks 

This function sets the output function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventInput() 

WMX3APIFUNC 
GetEventInput ( 
WMX3APIFUNC 
GetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function gets the input function of an event. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an 
EventInput class object 
that will contain the 
event input function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event.
-----------------------------------------------------------------------------------
504. Instruction: This function sets the output function of an event.
A: ClearAllEvent()
B: SetEvent_ID(pEventInput, pEventOutput, id)
C: SetEventOutputByEventId(eventId, eventOutput)
D: SetEventOutput(id, pEventOutput)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
504. Model's answer: D
504. Correct answer: D
504. Result: Correct



Processing Question 505:
505. Context:
 Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks 

This function sets the output function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventInput() 

WMX3APIFUNC 
GetEventInput ( 
WMX3APIFUNC 
GetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function gets the input function of an event. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an 
EventInput class object 
that will contain the 
event input function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event.
--------------------------------------------
This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
Function pInputData, int 
inputDataSize); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
SetCustomEventOutput( 
int id, int moduleId, 
void* pOutputData, int 
outputDataSize); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
GetCustomEventInput(in 
t id, void* 
pInputDataBuff, int 
inputDataBuffSize, int* 
pInputDataSize, int* 
pModuleId); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
WMX3APIFUNC 
GetCustomEventOutput( 
int id, void*
--------------------------------------------
Function 
C++ 
GetEvent(int id, 
EventInput 
<em>pEventInput, 
EventOutput 
*pEventOutput, 
EventOption</em> 
pOption = NULL); 
Python def GetEvent_InOut(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventApiEventInput 
-event input 
2 : 
EventApiEventOutp 
ut -event output 
3 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventOption(int id, 
EventOption* pOption); 
Python def GetEventOption(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetEventInput(int id, 
EventInput
-----------------------------------------------------------------------------------
505. Instruction: This function gets the input function of an event.
A: GetEventOutput(id)
B: GetEventData(id)
C: GetEventInput(id)
D: SetEvent(pEventData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
505. Model's answer: C
505. Correct answer: C
505. Result: Correct



Processing Question 506:
506. Context:
 Function 
C++ 
GetEvent(int id, 
EventInput 
<em>pEventInput, 
EventOutput 
*pEventOutput, 
EventOption</em> 
pOption = NULL); 
Python def GetEvent_InOut(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventApiEventInput 
-event input 
2 : 
EventApiEventOutp 
ut -event output 
3 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEventOption(int id, 
EventOption* pOption); 
Python def GetEventOption(id) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : EventOption event 
option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetEventInput(int id, 
EventInput
--------------------------------------------
Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks 

This function sets the output function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventInput() 

WMX3APIFUNC 
GetEventInput ( 
WMX3APIFUNC 
GetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function gets the input function of an event. 
Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventInput A pointer to an 
EventInput class object 
that will contain the 
event input function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event.
--------------------------------------------
},
    {
        "No": 550,
        "FunctionC++": "WMX3APIFUNC GetEventInput(int id, EventInput *pEventInput)",
        "FunctionPython": "def GetEventInput(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "This function gets the input function of an event. "
    },
    {
        "No": 551,
        "FunctionC++": "WMX3APIFUNC GetEventOutput(int id, EventOutput *pEventOutput)",
        "FunctionPython": "def GetEventOutput(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "This function gets the output function of an event. "
--------------------------------------------
Function pInputData, int 
inputDataSize); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
SetCustomEventOutput( 
int id, int moduleId, 
void* pOutputData, int 
outputDataSize); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
GetCustomEventInput(in 
t id, void* 
pInputDataBuff, int 
inputDataBuffSize, int* 
pInputDataSize, int* 
pModuleId); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
WMX3APIFUNC 
GetCustomEventOutput( 
int id, void*
-----------------------------------------------------------------------------------
506. Instruction: This function gets the output function of an event.
A: GetEvent_InOut(id)
B: GetEventInfo(event_id)
C: SetPlannedVelOverrideMultipleData(channel, count, pMData)
D: GetEventOutput(id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
506. Model's answer: D
506. Correct answer: D
506. Result: Correct



Processing Question 507:
507. Context:
 },
    {
        "No": 552,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
--------------------------------------------
},
    {
        "No": 554,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 555,
        "FunctionC++": "WMX3APIFUNC EnableEvent(int id, unsigned char enable)",
        "FunctionPython": "def EnableEvent(id, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Enable or disable an existing event."
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventApiEventOutp 
ut -event output 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
Python def GetAllEventID() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_AllEv 
entID -event data 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
def 
GetAllEventID_In(filterInpu
--------------------------------------------
},
    {
        "No": 546,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def GetEvent_InOut(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "FunctionPython": "def GetEventOption(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the option settings of an existing event. "
-----------------------------------------------------------------------------------
507. Instruction: Get the IDs of all existing events.
A: GetAllDevices()
B: GetAllEventIDsByCategory(category: str)
C: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
D: GetAllEventID()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
507. Model's answer: D
507. Correct answer: D
507. Result: Correct



Processing Question 508:
508. Context:
 ◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventOutput A pointer to an 
EventOutput class 
object that will contain 
the event output 
function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetAllEventID() 

WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events.
--------------------------------------------
},
    {
        "No": 552,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
--------------------------------------------
WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events. 

Parameters 
[out] 
pEventIdData A pointer to an 
AllEventID class object 
that will contain the id of 
all existing events. 
[in] 
filterInputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with input 
functions defined by the 
specified ModuleId. 
[in] 
filterOutputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with output 
functions defined by the 
specified ModuleId. 
Remarks 

This function obtains the IDs of all events that are currently defined. The IDs may be 
passed to other functions that reference event IDs. For example, an event ID may 
be passed to the GetEvent API function to obtain further information about that 
event. 

◆EnableEvent()
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventApiEventOutp 
ut -event output 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
Python def GetAllEventID() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_AllEv 
entID -event data 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
def 
GetAllEventID_In(filterInpu
-----------------------------------------------------------------------------------
508. Instruction: Get the IDs of all existing events.
A: GetInputModuleId()
B: GetAllEventID_In(filterInputModuleId)
C: GetAllEventIDByInputModuleId(filterInputModuleId)
D: GetOutputModuleId()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
508. Model's answer: B
508. Correct answer: B
508. Result: Correct



Processing Question 509:
509. Context:
 },
    {
        "No": 552,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
--------------------------------------------
◆GetEventOutput() 

WMX3APIFUNC 
GetEventOutput ( 
WMX3APIFUNC 
GetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function gets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pEventOutput A pointer to an 
EventOutput class 
object that will contain 
the event output 
function. 
Remarks 

This function gets the input function of an event. The event must be first defined 
with the SetEvent function. 

◆GetAllEventID() 

WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events.
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventApiEventOutp 
ut -event output 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
Python def GetAllEventID() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_AllEv 
entID -event data 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
GetAllEventID 
(AllEventID 
*pEventIdData, int 
filterInputModuleId=-1, 
int 
filterOutputModuleId=-1) 
; 
def 
GetAllEventID_In(filterInpu
--------------------------------------------
WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events. 

Parameters 
[out] 
pEventIdData A pointer to an 
AllEventID class object 
that will contain the id of 
all existing events. 
[in] 
filterInputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with input 
functions defined by the 
specified ModuleId. 
[in] 
filterOutputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with output 
functions defined by the 
specified ModuleId. 
Remarks 

This function obtains the IDs of all events that are currently defined. The IDs may be 
passed to other functions that reference event IDs. For example, an event ID may 
be passed to the GetEvent API function to obtain further information about that 
event. 

◆EnableEvent()
-----------------------------------------------------------------------------------
509. Instruction: Get the IDs of all existing events.
A: GetAllEventID_In(filterInputModuleId)
B: GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)
C: StartPSO(channel)
D: GetAllEventIDs(filterInputModuleID, filterOutputModuleID)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
509. Model's answer: B
509. Correct answer: B
509. Result: Correct



Processing Question 510:
510. Context:
 enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent () 

Clear all existing events. More... 

WMX3APIFUNC SetCustomEvent (int *pId, int 
inputModuleId, void *pInputData, int 
inputDataSize, int outputModuleId, void 
*pOutputData, int outputDataSize, int id, 
CustomEventOption *pOption=NULL) 
Reserved. More... 

WMX3APIFUNC SetCustomEventInput (int id, int 
moduleId, void *pInputData, int 


inputDataSize) 

Reserved. More... 

WMX3APIFUNC SetCustomEventOutput (int id, int 
moduleId, void *pOutputData, int 
outputDataSize) 
Reserved. More... 

WMX3APIFUNC GetCustomEventInput (int id, void 
*pInputDataBuff, int inputDataBuffSize, int 
*pInputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC GetCustomEventOutput (int id, void 
*pOutputDataBuff, int outputDataBuffSize, 
int *pOutputDataSize, int *pModuleId) 
Reserved. More...
--------------------------------------------
WMX3APIFUNC 
GetAllEventID ( 
WMX3APIFUNC 
GetAllEventID ( 
) 
AllEventID * pEventIdData, 
int filterInputModuleId = -1 
int filterOutputModuleId = 
Get the IDs of all existing events. 

Parameters 
[out] 
pEventIdData A pointer to an 
AllEventID class object 
that will contain the id of 
all existing events. 
[in] 
filterInputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with input 
functions defined by the 
specified ModuleId. 
[in] 
filterOutputModuleId An optional parameter 
that will modify the 
function to only obtain 
events with output 
functions defined by the 
specified ModuleId. 
Remarks 

This function obtains the IDs of all events that are currently defined. The IDs may be 
passed to other functions that reference event IDs. For example, an event ID may 
be passed to the GetEvent API function to obtain further information about that 
event. 

◆EnableEvent()
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
◆EnableEvent() 

WMX3APIFUNC 
EnableEvent ( 
) 
WMX3APIFUNC 
EnableEvent ( 
) 
int 
id, 
unsigned char enable 
Enable or disable an existing event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
enable If 0, the event will be 
disabled. If 1, the event 
will be enabled. 

Remarks 

This function enables or disables an existing event. The event is specified by the 
identification number. The event must first be created using the SetEvent API 
function. 

A disabled event will not be evaluated. A disabled event can later be enabled by 
another call to this API function. 

The initial enabled or disabled state of an event created by a call to SetEvent will 
depend on the enabled parameter of the Event object passed to SetEvent. 

◆RemoveEvent() 

WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
Remove an existing event. 
Parameters 
[in] 
id The event identification 
number of the event. 
Remarks
-----------------------------------------------------------------------------------
510. Instruction: Enable or disable an existing event.
A: SetOutputData(moduleId, data, dataSize)
B: EnableNotification(id, enabled)
C: EnableSyncGroup(groupId, enable)
D: EnableEvent(id, enable)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
510. Model's answer: D
510. Correct answer: D
510. Result: Correct



Processing Question 511:
511. Context:
 enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent () 

Clear all existing events. More... 

WMX3APIFUNC SetCustomEvent (int *pId, int 
inputModuleId, void *pInputData, int 
inputDataSize, int outputModuleId, void 
*pOutputData, int outputDataSize, int id, 
CustomEventOption *pOption=NULL) 
Reserved. More... 

WMX3APIFUNC SetCustomEventInput (int id, int 
moduleId, void *pInputData, int 


inputDataSize) 

Reserved. More... 

WMX3APIFUNC SetCustomEventOutput (int id, int 
moduleId, void *pOutputData, int 
outputDataSize) 
Reserved. More... 

WMX3APIFUNC GetCustomEventInput (int id, void 
*pInputDataBuff, int inputDataBuffSize, int 
*pInputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC GetCustomEventOutput (int id, void 
*pOutputDataBuff, int outputDataBuffSize, 
int *pOutputDataSize, int *pModuleId) 
Reserved. More...
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
RemoveEvent(int id); 
Python def RemoveEvent(id) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ClearAllEvent(); 
Python def ClearAllEvent() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetCustomEvent(int* 
pId, int inputModuleId, 
void* pInputData, int 
inputDataSize, int 
outputModuleId, void* 
pOutputData, int 
outputDataSize, int id, 
CustomEventOption* 
pOption = NULL); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
C++ 
WMX3APIFUNC 
SetCustomEventInput(in 
t id, int moduleId, void*
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
◆EnableEvent() 

WMX3APIFUNC 
EnableEvent ( 
) 
WMX3APIFUNC 
EnableEvent ( 
) 
int 
id, 
unsigned char enable 
Enable or disable an existing event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
enable If 0, the event will be 
disabled. If 1, the event 
will be enabled. 

Remarks 

This function enables or disables an existing event. The event is specified by the 
identification number. The event must first be created using the SetEvent API 
function. 

A disabled event will not be evaluated. A disabled event can later be enabled by 
another call to this API function. 

The initial enabled or disabled state of an event created by a call to SetEvent will 
depend on the enabled parameter of the Event object passed to SetEvent. 

◆RemoveEvent() 

WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
Remove an existing event. 
Parameters 
[in] 
id The event identification 
number of the event. 
Remarks
-----------------------------------------------------------------------------------
511. Instruction: Remove an existing event.
A: GetEventInput(id)
B: GetPlannedVelOverrideConfig(channel)
C: UpdateEvent(id)
D: RemoveEvent(id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
511. Model's answer: D
511. Correct answer: D
511. Result: Correct



Processing Question 512:
512. Context:
 WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
WMX3APIFU 
NC 
RemoveEven 
t ( int id ) 
Remove an existing event. 
Parameters 
[in] 
id The event identification 
number of the event. 
Remarks 

This function removes an existing event. The event is specified by the identification 
number. 

This function will permanently remove an event. The event identification number of 
the event will be freed, and may be assigned to events defined later. 

This function blocks execution and will return at the end of the next cyclic interrupt. 
If communication is stopped (and events are not being processed), this function is 
non-blocking and will remove the event immediately. 

◆ClearAllEvent() 

WMX3APIFUNC 
ClearAllEvent ( ) 
WMX3APIFUNC 
ClearAllEvent ( ) 
Clear all existing events. 

Remarks 

This function permanently clears all existing events. All event identification numbers 
will be freed, and may be assigned to events defined later.
--------------------------------------------
Cancel() : Home , PMAxisHome 
ChangeSlaveState() : Ecat 
Clear() : ApiBuffer 
ClearAlarm() : Simu 
ClearAllEvent() : EventControl 
ClearAmpAlarm() : AxisControl , PMAxisControl 
ClearAxisAlarm() : AxisControl 
ClearHomeSwitch() : Simu 
ClearInBit() : Simu 
ClearInBits() : Simu 
ClearInByte() : Simu 
ClearInBytes() : Simu 
ClearLimitSwitchNegative() : Simu 
ClearLimitSwitchPositive() : Simu 
ClearMultipleChannel() : ApiBuffer 
ClearPathIntplLookahead() : AdvMotion 
ClearPathIntplWithRotation() : AdvMotion 
ClearServoOnFeedback() : Simu 
ClearStdOut() : WMX3Api 
ClearSyncGroupError() : Sync 
ClearTouchProbe0Detected() : Simu 
ClearTouchProbe1Detected() : Simu 
ClearTxPdoWrite() : Ecat 
ClearVibrationStatus() : CoreMotion 
ClearWarning() : Simu 
ClearZPulse0Detected() : Simu 
ClearZPulse1Detected() : Simu 
CloseApiLogFile() : Log 
CloseCyclicBuffer() : CyclicBuffer 
CloseDevice() : WMX3Api 
CloseMemoryLogBuffer() : Log 
CloseSerialChannel() : Ecat 
CompareWindowsUpdates() : WMX3Api
--------------------------------------------
-a-


Abort() : CyclicBuffer 
AbortModuleSuspend() : WMX3Api 
AddAxisToSyncGroup() : Sync 
AddCommand() : CyclicBuffer 
AddPathIntplLookaheadCommand() : AdvMotion 
AddPathIntplWithRotationCommand() : AdvMotion 
AddRelativeSyncPhase() : Sync 
AdvancedMotion() : AdvancedMotion 
AoERead() : Ecat 
AoEReadWrite() : Ecat 
AoEWrite() : Ecat 
AoEWriteControl() : Ecat 
ApiBuffer() : ApiBuffer 
ApiLogToString() : AdvancedMotion , ApiBuffer , Compensation , CoreMotion 
, CyclicBuffer , Ecat , EventControl , Io , Log , PMMotion , Simu , 
UserMemory , WMX3Api 
AutoQuitWithoutActiveDev() : WMX3Api 
 

-~ 


~AdvancedMotion() : AdvancedMotion 
~ApiBuffer() : ApiBuffer 
~Compensation() : Compensation 
~CoreMotion() : CoreMotion 
~CyclicBuffer() : CyclicBuffer 
~Ecat() : Ecat 
~EventControl() : EventControl 
~Io() : Io 
~Log() : Log 
~PMMotion() : PMMotion 
~Simu() : Simu 
~UserMemory() : UserMemory 
~WMX3Api() : WMX3Api 
 

-c-
--------------------------------------------
enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent () 

Clear all existing events. More... 

WMX3APIFUNC SetCustomEvent (int *pId, int 
inputModuleId, void *pInputData, int 
inputDataSize, int outputModuleId, void 
*pOutputData, int outputDataSize, int id, 
CustomEventOption *pOption=NULL) 
Reserved. More... 

WMX3APIFUNC SetCustomEventInput (int id, int 
moduleId, void *pInputData, int 


inputDataSize) 

Reserved. More... 

WMX3APIFUNC SetCustomEventOutput (int id, int 
moduleId, void *pOutputData, int 
outputDataSize) 
Reserved. More... 

WMX3APIFUNC GetCustomEventInput (int id, void 
*pInputDataBuff, int inputDataBuffSize, int 
*pInputDataSize, int *pModuleId) 
Reserved. More... 

WMX3APIFUNC GetCustomEventOutput (int id, void 
*pOutputDataBuff, int outputDataBuffSize, 
int *pOutputDataSize, int *pModuleId) 
Reserved. More...
-----------------------------------------------------------------------------------
512. Instruction: Clear all existing events.
A: ClearAllEvent()
B: GetAllEventID()
C: ClearAllEvents()
D: GetPlannedVelOverrideDataCount(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
512. Model's answer: A
512. Correct answer: A
512. Result: Correct



Processing Question 513:
513. Context:
 Function C++ pOutputDataBuff, int 
outputDataBuffSize, int* 
pOutputDataSize, int* 
pModuleId); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
SetCustomEventConfigu 
reOfModule(int 
moduleId, void* 
pSetEventData, int 
setEventDataSize); 
Python 
Returns 
Type 
Value 
Remarks 
􀍩􀎄C++􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI􀍽􀎅Z 
􀏂􀏪􀐄􀏕􀍽􀍯6 
Function 
C++ 
WMX3APIFUNC 
SetEvent(int *pId, Event 
*pEventData); 
Python def SetEvent(pEventData) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -event id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetEvent(int *pId, Event 
*pEventData, unsigned
--------------------------------------------
◆SetEvent() [1/4]
WMX3APIFUNC 
SetEvent ( int * pId, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Set an event. 
Parameters 

[out] 
pId 

[in] 
pEventInput 

[in] 
pEventOutput 

[in] 
pOption 

A pointer to an int 
variable that will contain 
the event identification 
number of the new event 
if the new event is 
successfully created. 
The event identification 
number identifies an 
event and is passed as 
arguments to several 
event command APIs. 
No two events will have 
the same event 
identification number. 

A pointer to an object of 
a class that extends the 
EventInput class that 
defines the event input 
function. 

A pointer to an object of 
a class that extends the 
EventOutput class that 
defines the event output 
function. 

An optional parameter 
that is a pointer to an 
object of the 
EventOption class and 
specifies additional 
options to apply to the 
event. 

Remarks
--------------------------------------------
This function reads the option settings of an event. The event is specified by the 
identification number. 

◆SetEventInput() 

WMX3APIFUNC 
SetEventInput ( 
WMX3APIFUNC 
SetEventInput ( 
int 
id, 
EventInput * pEventInput 
) 
This function sets the input function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventInput A pointer to an 
EventInput class object 
that defines the event 
input function. 
Remarks 

This function sets the input function of an event. The event must be first defined with 
the SetEvent function. 

◆SetEventOutput() 

WMX3APIFUNC 
SetEventOutput ( 
WMX3APIFUNC 
SetEventOutput ( 
int 
id, 
EventOutput * pEventOutput 
) 
This function sets the output function of an event. 

Parameters 
[in] 
id The event identification 
number of the event. 
[in] 
pEventOutput A pointer to an 
EventOutput class 
object that defines the 
event output function. 
Remarks
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
-----------------------------------------------------------------------------------
513. Instruction: Set an event.
A: ModifyEvent(pEventData)
B: SetEventInput(id, pEventInput)
C: SetEvent(pEventData)
D: GetPSOConfig(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
513. Model's answer: C
513. Correct answer: C
513. Result: Correct



Processing Question 514:
514. Context:
 Parameters 
[in] 
id The event identification 
number of the event. 
[out] 
pInputModuleId A pointer to an int that 
will contain the module 
ID of the input function. 
[out] 
pOutputModuleId A pointer to an int that 
will contain the module 
ID of the output function. 
Remarks 

This function reads the input function module ID and output function module ID of 
an event. The event is specified by the identification number. 

◆GetEvent() [1/2]
WMX3APIFUNC 
GetEvent ( int id, 
EventInput * pEventInput, 
EventOutput * pEventOutput, 
EventOption * pOption = NULL 
) 
Get the parameters of an event.
--------------------------------------------
WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption) 

Get the option settings of an existing 
event. More... 

WMX3APIFUNC SetEventInput (int id, EventInput 
*pEventInput) 


This function sets the input function of an 
event. More... 

WMX3APIFUNC SetEventOutput (int id, EventOutput 
*pEventOutput) 

This function sets the output function of 
an event. More... 

WMX3APIFUNC GetEventInput (int id, EventInput 
*pEventInput) 

This function gets the input function of an 
event. More... 

WMX3APIFUNC GetEventOutput (int id, EventOutput 
*pEventOutput) 

This function gets the output function of 
an event. More... 

WMX3APIFUNC GetAllEventID (AllEventID 
*pEventIdData, int filterInputModuleId=-1, 
int filterOutputModuleId=-1) 
Get the IDs of all existing events. More... 

WMX3APIFUNC EnableEvent (int id, unsigned char 

enable) 

Enable or disable an existing event. 

More... 

WMX3APIFUNC RemoveEvent (int id) 
Remove an existing event. More... 

WMX3APIFUNC ClearAllEvent ()
--------------------------------------------
},
    {
        "No": 552,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
    },
    {
        "No": 553,
        "FunctionC++": "WMX3APIFUNC GetAllEventID(AllEventID *pEventIdData, int filterInputModuleId=-1, int filterOutputModuleId=-1)",
        "FunctionPython": "def GetAllEventID_In(filterInputModuleId)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the IDs of all existing events."
--------------------------------------------
},
    {
        "No": 546,
        "FunctionC++": "WMX3APIFUNC GetEvent(int id, EventInput *pEventInput, EventOutput *pEventOutput, EventOption *pOption=NULL)",
        "FunctionPython": "def GetEvent_InOut(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get an event."
    },
    {
        "No": 547,
        "FunctionC++": "WMX3APIFUNC GetEventOption(int id, EventOption *pOption)",
        "FunctionPython": "def GetEventOption(id)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the option settings of an existing event. "
-----------------------------------------------------------------------------------
514. Instruction: Get the parameters of an event.
A: GetEvent(id)
B: GetAllEventID()
C: RetrieveEventByID(eventID)
D: GetEventModuleId(id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
514. Model's answer: A
514. Correct answer: A
514. Result: Correct



Processing Question 515:
515. Context:
 Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More...
--------------------------------------------
◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel.
--------------------------------------------
The structs in the input and output unions of the returned Event class that contain 
the event parameters are determined by the values of inputFunction and 
outputFunction of Event. 

◆SetSoftwareTouchProbe() 
WMX3APIFUNC 
SetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char enable, 
int axis, 
int byteAddrs, 
int bitOffset, 

unsigned char logic, unsigned char logic, 
TouchProbeMode::T mode 
) 
Set parameters for a software touch probe channel. A software touch probe channel 
is able to latch onto the encoder data of an axis when a particular input signal is 

detected. 

Parameters 
[in] 
channel 

[in] 
enable 

[in] 
axis 
[in] 
byteAddrs 

The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 

maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel. 

Whether the software 
touch probe is enabled 
or not. The API function
--------------------------------------------
Get the parameters of an existing event. 

This function is deprecated and is 
replaced by the GetEvent function. 
This function will be removed in a 
future version. More... 


WMX3APIFUNC SetSoftwareTouchProbe (unsigned int 
channel, unsigned char enable, int axis, 
int byteAddrs, int bitOffset, unsigned char 
logic, TouchProbeMode::T mode) 
Set parameters for a software touch 
probe channel. A software touch probe 
channel is able to latch onto the encoder 
data of an axis when a particular input 
signal is detected. More... 

WMX3APIFUNC EnableSoftwareTouchProbe (unsigned 
int channel, unsigned char enable) 
Enable a software touch probe channel. 
A software touch probe channel will only 
latch encoder data when enabled. 
More... 

WMX3APIFUNC GetSoftwareTouchProbe (unsigned int 
channel, unsigned char *pEnabled, int 
*pAxis, int *pByteAddrs, int *pBitOffset, 
unsigned char *pLogic, 
TouchProbeMode::T *pMode) 

Get parameters of a software touch 
probe channel. More...
-----------------------------------------------------------------------------------
515. Instruction: Set parameters for a software touch probe channel. A software touch probe channel is able to latch onto the encoder data of an axis when a particular input signal is detected.
A: IsSoftwareTouchProbeLatched(channel)
B: SetPSOSingleData(channel, sData)
C: SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)
D: SetSoftwareTouchProbeConfiguration(channel, enable, axis, byteAddrs, bitOffset, logic, mode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
515. Model's answer: C
515. Correct answer: C
515. Result: Correct



Processing Question 516:
516. Context:
 Remarks 
Function 
C++ 
WMX3APIFUNC 
EnableSoftwareTouchPr 
obe(unsigned int 
channel, unsigned char 
enable); 
Python 
def 
EnableSoftwareTouchProb 
e(channel, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSoftwareTouchProbe 
(unsigned int channel, 
unsigned char 
*pEnabled, int *pAxis, int 
*pByteAddrs, int 
*pBitOffset, unsigned 
char *pLogic, 
TouchProbeMode::T 
*pMode); 
Python 
def 
GetSoftwareTouchProbe(c 
hannel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -enabled 
2 : int -axis 
3 : int -byte 
address 
4 : int -bit offset 
5 : unsigned int
--------------------------------------------
◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel.
--------------------------------------------
Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More...
--------------------------------------------
},
    {
        "No": 567,
        "FunctionC++": "WMX3APIFUNC SetSoftwareTouchProbe(unsigned int channel, unsigned char enable, int axis, int byteAddrs, int bitOffset, unsigned char logic, TouchProbeMode::T mode)",
        "FunctionPython": "def SetSoftwareTouchProbe(channel, enable, axis, byteAddrs, bitOffset, logic, mode)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a software touch probe channel. A software touch probe channel is able to latch onto the encoder data of an axis when a particular input signal is detected."
-----------------------------------------------------------------------------------
516. Instruction: Enable a software touch probe channel. A software touch probe channel will only latch encoder data when enabled.
A: SetPlannedVelOverrideMultipleData(channel, count, pMData)
B: EnableHardwareTouchProbe(axis, enable)
C: EnableSoftwareTouchProbe(channel, enable)
D: python
EnableTouchProbeSoftware(channel, enable)

Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
516. Model's answer: C
516. Correct answer: C
516. Result: Correct



Processing Question 517:
517. Context:
 Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More...
--------------------------------------------
Get the parameters of an existing event. 

This function is deprecated and is 
replaced by the GetEvent function. 
This function will be removed in a 
future version. More... 


WMX3APIFUNC SetSoftwareTouchProbe (unsigned int 
channel, unsigned char enable, int axis, 
int byteAddrs, int bitOffset, unsigned char 
logic, TouchProbeMode::T mode) 
Set parameters for a software touch 
probe channel. A software touch probe 
channel is able to latch onto the encoder 
data of an axis when a particular input 
signal is detected. More... 

WMX3APIFUNC EnableSoftwareTouchProbe (unsigned 
int channel, unsigned char enable) 
Enable a software touch probe channel. 
A software touch probe channel will only 
latch encoder data when enabled. 
More... 

WMX3APIFUNC GetSoftwareTouchProbe (unsigned int 
channel, unsigned char *pEnabled, int 
*pAxis, int *pByteAddrs, int *pBitOffset, 
unsigned char *pLogic, 
TouchProbeMode::T *pMode) 

Get parameters of a software touch 
probe channel. More...
--------------------------------------------
◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel.
--------------------------------------------
int id); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetEvent(int id, Event 
*pEventData); 
Python def GetEvent(id) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_Event 
-event data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSoftwareTouchProbe 
(unsigned int channel, 
unsigned char enable, 
int axis, int byteAddrs, 
int bitOffset, unsigned 
char logic, 
TouchProbeMode::T 
mode); 
Python 
def 
SetSoftwareTouchProbe(c 
hannel, enable, axis, 
byteAddrs, bitOffset, logic, 
mode) 
Returns 
Type int 
Value error code
-----------------------------------------------------------------------------------
517. Instruction: Get parameters of a software touch probe channel.
A: GetSoftwareTouchProbe(channel)
B: GetHardwareTouchProbe(channel)
C: SetEvent(pEventInput, pEventOutput)
D: GetStatus(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
517. Model's answer: A
517. Correct answer: A
517. Result: Correct



Processing Question 518:
518. Context:
 Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More...
--------------------------------------------
logic 
6 : int -mode 
Remarks 
Function 
C++ 
WMX3APIFUNC 
IsSoftwareTouchProbeL 
atched(unsigned int 
channel, unsigned char 
*pLatched); 
Python 
def 
IsSoftwareTouchProbeLat 
ched(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -lached 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSoftwareTouchProbe 
CounterValue(unsigned 
int channel, unsigned 
char *pLatched, double 
*pCounterValue); 
Python 
def 
GetSoftwareTouchProbeC 
ounterValue(channel, 
pLatched, pCounterValue) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -lached 
2 : double -counter 
value
--------------------------------------------
◆IsSoftwareTouchProbeLatched() 
LatchLast, latched 
encoder data will be 
overwritten when there 
are subsequent input 
signal triggers. 
WMX3APIFUNC 
IsSoftwareTouchPro 
beLatched ( unsigned int channel, 
unsigned char * pLatched 
) 
Check whether a software touch probe channel has latched data. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

◆GetSoftwareTouchProbeCounterValue() 

WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
) 
unsigned int channel, 
unsigned char * pLatched, 
double * pCounterValue 
Get latched data of software touch probe.
--------------------------------------------
◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel.
-----------------------------------------------------------------------------------
518. Instruction: Check whether a software touch probe channel has latched data.
A: IsTouchProbeLatched(channelNumber)
B: IsSoftwareTouchProbeLatched(channel)
C: StartPlannedVelOverride(channel)
D: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
518. Model's answer: B
518. Correct answer: B
518. Result: Correct



Processing Question 519:
519. Context:
 Get parameters of a software touch 
probe channel. More... 

WMX3APIFUNC IsSoftwareTouchProbeLatched 
(unsigned int channel, unsigned char 
*pLatched) 
Check whether a software touch probe 
channel has latched data. More... 
WMX3APIFUNC GetSoftwareTouchProbeCounterValue 
(unsigned int channel, unsigned char 
*pLatched, double *pCounterValue) 
Get latched data of software touch 
probe. More... 

WMX3APIFUNC SetHardwareTouchProbe (int axis, 
unsigned char enable, 
TouchProbeMode::T mode, 


TouchProbeSource::T triggerSource, 
unsigned int channel) 

Set parameters for the hardware touch 
probe of an axis. A hardware touch 
probe latches the encoder data of the 
axis when the touch probe input signal is 
detected. More... 

WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More...
--------------------------------------------
logic 
6 : int -mode 
Remarks 
Function 
C++ 
WMX3APIFUNC 
IsSoftwareTouchProbeL 
atched(unsigned int 
channel, unsigned char 
*pLatched); 
Python 
def 
IsSoftwareTouchProbeLat 
ched(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -lached 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetSoftwareTouchProbe 
CounterValue(unsigned 
int channel, unsigned 
char *pLatched, double 
*pCounterValue); 
Python 
def 
GetSoftwareTouchProbeC 
ounterValue(channel, 
pLatched, pCounterValue) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -lached 
2 : double -counter 
value
--------------------------------------------
◆IsSoftwareTouchProbeLatched() 
LatchLast, latched 
encoder data will be 
overwritten when there 
are subsequent input 
signal triggers. 
WMX3APIFUNC 
IsSoftwareTouchPro 
beLatched ( unsigned int channel, 
unsigned char * pLatched 
) 
Check whether a software touch probe channel has latched data. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

◆GetSoftwareTouchProbeCounterValue() 

WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
WMX3APIFUNC 
GetSoftwareTouchPr 
obeCounterValue ( 
) 
unsigned int channel, 
unsigned char * pLatched, 
double * pCounterValue 
Get latched data of software touch probe.
--------------------------------------------
◆EnableSoftwareTouchProbe() 
Software Touch Probe 
WMX3APIFUNC 
EnableSoftwareTouc 
hProbe ( unsigned int channel, 
unsigned char enable 
) 
Enable a software touch probe channel. A software touch probe channel will only 
latch encoder data when enabled. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
[in] 
enable Set to 0 to disable the 
software touch probe 
and 1 to enable the 
software touch probe. 

◆GetSoftwareTouchProbe() 
WMX3APIFUNC 
GetSoftwareTouchPr 
obe ( unsigned int channel, 
unsigned char * pEnabled, 
int * pAxis, 
int * pByteAddrs, 
int * pBitOffset, 
unsigned char * pLogic, 
TouchProbeMode::T pMode 

) ) 
Get parameters of a software touch probe channel. 

Parameters 
[in] 
channel The channel of the 
software touch probe. 
The number of available 
channels is contained in 
the 
maxTouchprobeChann 
el constant. Touch probe 
parameters are unique 
to each channel.
-----------------------------------------------------------------------------------
519. Instruction: Get latched data of software touch probe.
A: EnableSoftwareTouchProbe(channel, enable)
B: CaptureTouchProbeCounterValue(channel, latched, counterValue)
C: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
D: ErrorToString(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
519. Model's answer: C
519. Correct answer: C
519. Result: Correct



Processing Question 520:
520. Context:
 Parameters 
[in] 
axis 

[in] 
enable 

[in] 
mode 

The axis of the hardware 

touch probe. 
This value determines 
the initial state of the 
hardware touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

The mode of the touch 
probe. If set to 
LatchFirst, the 
hardware touch probe 
will latch the encoder 
data when the next 
touch probe input signal 
is detected, but will not 
latch the encoder data 
for any subsequent 
touch probe input 
signals. If set to 
LatchLast, the hardware 
touch probe will latch the 
encoder data each time 
the touch probe input 
signal is detected.
--------------------------------------------
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetHardwareTouchProb 
e(int axis, unsigned char 
enable, 
TouchProbeMode::T 
mode, 
TouchProbeSource::T 
triggerSource, unsigned 
int channel); 
def 
SetHardwareTouchProbe( 
axis, enable, mode, 
triggerSource, channel) 
int 
error code 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetHardwareTouchProb 
eStatus(int axis, 
HardwareTouchProbeSt 
atus *pStatus); 
def 
GetHardwareTouchProbe 
Status(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventControl_Hard 
wareTouchProbeSt 
atus -status 
Remarks
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

[out] 
pCounterValue The encoder data 
latched by the software 
touch probe. 

◆SetHardwareTouchProbe() 
WMX3APIFUNC 
SetHardwareTouchP 
robe ( int axis, 
unsigned char enable, 

TouchProbeMode::T mode, 
TouchProbeSource:triggerSource, 
unsigned int channel 
) 
Set parameters for the hardware touch probe of an axis. A hardware touch probe 
latches the encoder data of the axis when the touch probe input signal is detected. 

Parameters 
[in] 
axis 

[in] 
enable 

[in] 
mode 

The axis of the hardware
--------------------------------------------
WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More...
-----------------------------------------------------------------------------------
520. Instruction: Set parameters for the hardware touch probe of an axis. A hardware touch probe latches the encoder data of the axis when the touch probe input signal is detected.
A: EnableHardwareTouchProbe(axis, enable)
B: SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)
C: GetEvent_InOut(id)
D: SetHardwareTouchProbeConfig(axis, enabled, operationMode, triggerInput, channelNumber)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
520. Model's answer: B
520. Correct answer: B
520. Result: Correct



Processing Question 521:
521. Context:
 WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More...
--------------------------------------------
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetHardwareTouchProb 
e(int axis, unsigned char 
enable, 
TouchProbeMode::T 
mode, 
TouchProbeSource::T 
triggerSource, unsigned 
int channel); 
def 
SetHardwareTouchProbe( 
axis, enable, mode, 
triggerSource, channel) 
int 
error code 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetHardwareTouchProb 
eStatus(int axis, 
HardwareTouchProbeSt 
atus *pStatus); 
def 
GetHardwareTouchProbe 
Status(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventControl_Hard 
wareTouchProbeSt 
atus -status 
Remarks
--------------------------------------------
},
    {
        "No": 573,
        "FunctionC++": "WMX3APIFUNC GetHardwareTouchProbeStatus(int axis, HardwareTouchProbeStatus *pStatus)",
        "FunctionPython": "def GetHardwareTouchProbeStatus(axis)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get parameters and current state of the hardware touch probe of an axis. "
    },
    {
        "No": 574,
        "FunctionC++": "WMX3APIFUNC EnableHardwareTouchProbe(int axis, unsigned char enable)",
        "FunctionPython": "def EnableHardwareTouchProbe(axis, enable)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Enable or disable the hardware touch probe of an axis."
--------------------------------------------
[in] 
[in] 
triggerSource 
channel 
The trigger source of the 
touch probe. If set to 
ZPulse, the Z-pulse 
(index pulse) signal will 
trigger the touch probe. 
If set to TouchProbe, 
the touch probe signal 
will trigger the touch 
probe. The touch probe 
signal specifications will 
be dependent on the 
servo drive, and can 
often be configured to 
one of several inputs. 
The channel of the touch 
probe. The allowed 
values are 0 or 1. 
See also 
Hardware Touch Probe 
◆ 
GetHardwareTouchProbeStatus() 


WMX3APIFUNC 
GetHardwareTouchP 
robeStatus ( 
WMX3APIFUNC 
GetHardwareTouchP 
robeStatus ( 
int 
axis, 
HardwareTouchProb pStatus 
) 
Get parameters and current state of the hardware touch probe of an axis. 

Parameters 
[in] 
axis The axis of the hardware 
touch probe. 
[out] 
pStatus A pointer to a 
HardwareTouchProbeS 
tatus class object that 
contains the parameters 
and current state of the 
hardware touch probe. 

◆EnableHardwareTouchProbe()
-----------------------------------------------------------------------------------
521. Instruction: Get parameters and current state of the hardware touch probe of an axis.
A: GetHardwareTouchProbeStatus(axis)
B: CheckHardwareTouchProbeStatus(input_axis)
C: SetEvent(pEventData)
D: EnableHardwareTouchProbe(axis, enable)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
521. Model's answer: A
521. Correct answer: A
521. Result: Correct



Processing Question 522:
522. Context:
 WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More...
--------------------------------------------
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetHardwareTouchProb 
e(int axis, unsigned char 
enable, 
TouchProbeMode::T 
mode, 
TouchProbeSource::T 
triggerSource, unsigned 
int channel); 
def 
SetHardwareTouchProbe( 
axis, enable, mode, 
triggerSource, channel) 
int 
error code 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetHardwareTouchProb 
eStatus(int axis, 
HardwareTouchProbeSt 
atus *pStatus); 
def 
GetHardwareTouchProbe 
Status(axis) 
tuple 
Returns 
Value 
0 : int -error code 
1 : 
EventControl_Hard 
wareTouchProbeSt 
atus -status 
Remarks
--------------------------------------------
Parameters 
[in] 
axis 

[in] 
enable 

[in] 
mode 

The axis of the hardware 

touch probe. 
This value determines 
the initial state of the 
hardware touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

The mode of the touch 
probe. If set to 
LatchFirst, the 
hardware touch probe 
will latch the encoder 
data when the next 
touch probe input signal 
is detected, but will not 
latch the encoder data 
for any subsequent 
touch probe input 
signals. If set to 
LatchLast, the hardware 
touch probe will latch the 
encoder data each time 
the touch probe input 
signal is detected.
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
software touch probe. 
[out] 
pLatched A pointer to an unsigned 
char that will contain 
whether the software 
touch probe channel has 
latched data. This value 
is set to 1 if encoder 
data has been latched. 
This value is reset to 0 
whenever the 
GetSoftwareTouchProb 
eCounterValue API 
function is called. 

[out] 
pCounterValue The encoder data 
latched by the software 
touch probe. 

◆SetHardwareTouchProbe() 
WMX3APIFUNC 
SetHardwareTouchP 
robe ( int axis, 
unsigned char enable, 

TouchProbeMode::T mode, 
TouchProbeSource:triggerSource, 
unsigned int channel 
) 
Set parameters for the hardware touch probe of an axis. A hardware touch probe 
latches the encoder data of the axis when the touch probe input signal is detected. 

Parameters 
[in] 
axis 

[in] 
enable 

[in] 
mode 

The axis of the hardware
-----------------------------------------------------------------------------------
522. Instruction: Enable or disable the hardware touch probe of an axis.
A: SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)
B: StartPSO(channel)
C: ToggleHardwareTouchProbe(axis, enabled)
D: EnableHardwareTouchProbe(axis, enable)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
522. Model's answer: D
522. Correct answer: D
522. Result: Correct



Processing Question 523:
523. Context:
 },
    {
        "No": 576,
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
--------------------------------------------
},
    {
        "No": 575,
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def SetPSOConfig(channel, pType, pMinDurationMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
--------------------------------------------
◆EnableHardwareTouchProbe() 

pOption = NULL 
WMX3APIFUNC 
EnableHardwareTou 
chProbe ( 
) 
int 
axis, 
unsigned char enable 
Enable or disable the hardware touch probe of an axis. 
Parameters 
[in] 
[in] 
axis 
enable 
The axis of the hardware 
touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

◆SetPSOConfig() 
WMX3APIFUNC 
SetPSOConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double minDurationMillisecon 
PSOOption * 
) 
Set parameters for a position synchronous output channel. A position synchronous 
output channel is able to output an output signal when certain conditions, such as 
an axis reaching a certain position, are met. 

Parameters 
[in] 
channel The channel of the 


position synchronous 
output. The number of 
available channels is 
contained in the 

maxPsoChannel 

constant. 

[in] 
type The type of comparison 
to perform.
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
523. Instruction: Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met.
A: SetOptions(channel, pOptions)
B: SetPSOConfig(channel, pType, pMinDurationMilliseconds)
C: GetEventOutput(id)
D: SetPSOConfiguration(channelName, parameterType, minDurationMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
523. Model's answer: B
523. Correct answer: B
523. Result: Correct



Processing Question 524:
524. Context:
 synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
},
    {
        "No": 576,
        "FunctionC++": "WMX3APIFUNC SetPSOConfig(unsigned int channel, ComparisonType::T type, ComparatorSource *pSource, PSOOutput *pOutput, double minDurationMilliseconds, PSOOption *pOption=NULL)",
        "FunctionPython": "def SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met. "
--------------------------------------------
◆EnableHardwareTouchProbe() 

pOption = NULL 
WMX3APIFUNC 
EnableHardwareTou 
chProbe ( 
) 
int 
axis, 
unsigned char enable 
Enable or disable the hardware touch probe of an axis. 
Parameters 
[in] 
[in] 
axis 
enable 
The axis of the hardware 
touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

◆SetPSOConfig() 
WMX3APIFUNC 
SetPSOConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double minDurationMillisecon 
PSOOption * 
) 
Set parameters for a position synchronous output channel. A position synchronous 
output channel is able to output an output signal when certain conditions, such as 
an axis reaching a certain position, are met. 

Parameters 
[in] 
channel The channel of the 


position synchronous 
output. The number of 
available channels is 
contained in the 

maxPsoChannel 

constant. 

[in] 
type The type of comparison 
to perform.
--------------------------------------------
WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
524. Instruction: Set parameters for a position synchronous output channel. A position synchronous output channel is able to output an output signal when certain conditions, such as an axis reaching a certain position, are met.
A: SetOptions(channel, pOptions)
B: GetPSOIntervalData(channel)
C: SetPSOConfig_Option(channel, pType, pMinDurationMilliseconds, pOption)
D: SetPSOConfigOption(channelId, optionType, minDurationMs, specificOption)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
524. Model's answer: C
524. Correct answer: C
524. Result: Correct



Processing Question 525:
525. Context:
 WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
See also 

Position Synchronous Output (PSO) 

◆StopPSO() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC StopPSO ( 
Stop a position synchronous output channel. A stopped position synchronous output 

channel will stop controlling any outputs. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

◆GetPSOStatus() 

WMX3APIFUNC 
GetPSOStatus ( 
WMX3APIFUNC 
GetPSOStatus ( 
unsigned int channel, 
PSOStatus * pStatus 
) 
Get the state of a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant.
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
[in] 
pOption An optional argument 
that is a pointer to a 
class containing 
additional position 
synchronous output 
options. 



◆GetPSOConfig() 
See also 
Position Synchronous Output (PSO) 
WMX3APIFUNC 
GetPSOConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double * pMinDurationMilliseco 
PSOOption * pOption = NULL 
) 
Get parameters for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 


[out] 
pOutput A pointer to an 
PSOOutput class object 
that specifies the type 
and address of the 
output to set based on 
the result of the 
comparison.
-----------------------------------------------------------------------------------
525. Instruction: Get parameters for a position synchronous output channel.
A: GetPSOConfigDetails(clientId, channelType)
B: StopPSO(channel)
C: GetLogOption(channel)
D: GetPSOConfig(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
525. Model's answer: D
525. Correct answer: D
525. Result: Correct



Processing Question 526:
526. Context:
 ◆EnableHardwareTouchProbe() 

pOption = NULL 
WMX3APIFUNC 
EnableHardwareTou 
chProbe ( 
) 
int 
axis, 
unsigned char enable 
Enable or disable the hardware touch probe of an axis. 
Parameters 
[in] 
[in] 
axis 
enable 
The axis of the hardware 
touch probe. 
Set to 0 to disable the 
hardware touch probe 
and 1 to enable the 
hardware touch probe. 

◆SetPSOConfig() 
WMX3APIFUNC 
SetPSOConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
PSOOutput * pOutput, 
double minDurationMillisecon 
PSOOption * 
) 
Set parameters for a position synchronous output channel. A position synchronous 
output channel is able to output an output signal when certain conditions, such as 
an axis reaching a certain position, are met. 

Parameters 
[in] 
channel The channel of the 


position synchronous 
output. The number of 
available channels is 
contained in the 

maxPsoChannel 

constant. 

[in] 
type The type of comparison 
to perform.
--------------------------------------------
WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More...
--------------------------------------------
WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More... 

WMX3APIFUNC SetPlannedVelOverrideConfig (unsigned 
int channel, ComparisonType::T type, 
ComparatorSource *pSource, int axis) 
Set parameters for a planned velocity 
override channel. A planned velocity 
override channel is able to override the 
velocity of an axis when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPlannedVelOverrideConfig 
(unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, int *pAxis) 

Get parameters for a planned velocity 
override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More...
--------------------------------------------
WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
526. Instruction: Get parameters for a position synchronous output channel.
A: GetPSOConfig(channel)
B: SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)
C: GetPSOConfig_Option(channel)
D: GetPSOConfig_Options(channel_id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
526. Model's answer: A
526. Correct answer: C
526. Result: Wrong



Processing Question 527:
527. Context:
 synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
[out] 
pOutput A pointer to an 
PSOOutput class object 
that specifies the type 
and address of the 
output to set based on 
the result of the 
comparison. 

[out] 
pMinDurationMillisecon A pointer to a double that 
will contain the duration 
to keep the output set 
when the comparison 
changes from true to 
false, in units of 
milliseconds. 

[out] 
pOption An optional argument 
that is a pointer to a 
class that will return 
additional position 
synchronous output 
options. 

◆SetPSOSingleData() 

WMX3APIFUNC 
SetPSOSingleData ( 
) 
WMX3APIFUNC 
SetPSOSingleData ( 
) 
unsigned int channel, 
double sData 
Set a single data point for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
sData The data point. 

Remarks
--------------------------------------------
Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
527. Instruction: Set a single data point for a position synchronous output channel.
A: SetLogFilePath(channel, pPath)
B: SetPSOSingleData(channel, sData)
C: GetHardwareTouchProbeStatus(axis)
D: SetSinglePSOData(sData, channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
527. Model's answer: B
527. Correct answer: B
527. Result: Correct



Processing Question 528:
528. Context:
 synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
def 
GetPSOConfig_Option(ch 
annel) 

tuple 


0 : int -error code 
1 : int -type 
2 : 
EventControl_Com 
paratorSource source 
3 : 
EventControl_PSO 
Output -pso output 
4 : double -min 
duration 
milliseconds 
5 : 
EventControl_PSO 

Option -pso option 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPSOSingleData(unsig 
ned int channel, double 
sData); 
Python 
def 
SetPSOSingleData(chann 
el, sData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPSOMultipleData(uns 
igned int channel, int 
count, double *pMData); 
Python 
def 
SetPSOMultipleData(chan 
nel, count, pMData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPSOIntervalData(unsi 
gned int channel, double 
rangeStart, double 
rangeEnd, double 
interval); 
Python 
def 
SetPSOIntervalData(chan 
nel, rangeStart, rangeEnd, 
interval)
--------------------------------------------
},
    {
        "No": 579,
        "FunctionC++": "WMX3APIFUNC SetPSOSingleData(unsigned int channel, double sData)",
        "FunctionPython": "def SetPSOSingleData(channel, sData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set a single data point for a position synchronous output channel."
    },
    {
        "No": 580,
        "FunctionC++": "WMX3APIFUNC SetPSOMultipleData(unsigned int channel, int count, double *pMData)",
        "FunctionPython": "def SetPSOMultipleData(channel, count, pMData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set multiple data points for a position synchronous output channel."
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
sData The data point. 

Remarks 

This function sets a single data point for a position synchronous output channel. Any 
data points that have been previously set by the SetPSOSingleData, 
SetPSOMultipleData, or SetPSOIntervalData functions are cleared. 

See also 

Position Synchronous Output (PSO) 

◆SetPSOMultipleData() 

WMX3APIFUNC 
SetPSOMultipleData ( unsigned int channel, 
WMX3APIFUNC 
SetPSOMultipleData ( unsigned int channel, 
int 
count, 
double * pMData 
) 
Set multiple data points for a position synchronous output channel.
-----------------------------------------------------------------------------------
528. Instruction: Set multiple data points for a position synchronous output channel.
A: GetEventOption(id)
B: SetPSOMultipleData(channel_id, num_readings, data_array)
C: SetPSOMultipleData(channel, count, pMData)
D: SetPlannedVelOverrideSingleData(channel, sData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
528. Model's answer: C
528. Correct answer: C
528. Result: Correct



Processing Question 529:
529. Context:
 WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
},
    {
        "No": 581,
        "FunctionC++": "WMX3APIFUNC SetPSOIntervalData(unsigned int channel, double rangeStart, double rangeEnd, double interval)",
        "FunctionPython": "def SetPSOIntervalData(channel, rangeStart, rangeEnd, interval)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set data points over a range for a position synchronous output channel."
    },
    {
        "No": 582,
        "FunctionC++": "WMX3APIFUNC GetPSOData(unsigned int channel, int *pCount, double *pMData, int maxCount)",
        "FunctionPython": "def GetPSOData(channel, maxCount)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get all data points that are currently set for a position synchronous output channel."
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[in] 
count The number of data 
points at the memory 
location pointed by 
mData. The maximum 
number of data points is 
contained in the 
maxPsoData constant. 
[in] 
pMData A pointer to memory 
location containing a 
sequence of data points. 
Remarks 

This function sets multiple data points for a position synchronous output channel. 
Any data points that have been previously set by the SetPSOSingleData, 
SetPSOMultipleData, or SetPSOIntervalData functions are cleared. 

See also 

Position Synchronous Output (PSO) 


◆SetPSOIntervalData() 
WMX3APIFUNC 
SetPSOIntervalData ( unsigned int channel, 
double 
double 
rangeStart, 
rangeEnd, 
double interval 
) 
Set data points over a range for a position synchronous output channel.
-----------------------------------------------------------------------------------
529. Instruction: Set data points over a range for a position synchronous output channel.
A: SetPSODataInterval(channelId, startTimestamp, endTimestamp, samplingInterval)
B: GetSoftwareTouchProbeCounterValue(channel, pLatched, pCounterValue)
C: SetPSOIntervalData(channel, rangeStart, rangeEnd, interval)
D: GetAllEventID_InOut(filterInputModuleId, filterOutputModuleId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
529. Model's answer: C
529. Correct answer: C
529. Result: Correct



Processing Question 530:
530. Context:
 synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
The activeDataIndex status will return n when the output is set by the nth point. For 
example, in the above example, activeDataIndex will be set to 1 when the output is 
set by position 1000, 2 when the output is set by position 2000, 3 when the output is 
set by position 3000, 4 when the output is set by position 4000, and 5 when the 
output is set by position 5000. 

The number of points p that are generated by this function is unlimited, and may 
exceed maxPsoData. 

See also 

Position Synchronous Output (PSO) 

◆GetPSOData() 
WMX3APIFUNC 
GetPSOData ( 
unsigned int channel, 
int * 
double * 
pCount, 
pMData, 
int maxCount 
) 
Get all data points that are currently set for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 


maxPsoChannel 

constant.
--------------------------------------------
WMX3APIFUNC GetHardwareTouchProbeStatus (int 
axis, HardwareTouchProbeStatus 
*pStatus) 
Get parameters and current state of the 
hardware touch probe of an axis. More... 

WMX3APIFUNC EnableHardwareTouchProbe (int axis, 
unsigned char enable) 
Enable or disable the hardware touch 
probe of an axis. More... 

WMX3APIFUNC SetPSOConfig (unsigned int channel, 
ComparisonType::T type, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
minDurationMilliseconds, PSOOption 
*pOption=NULL) 
Set parameters for a position 
synchronous output channel. A position 
synchronous output channel is able to 
output an output signal when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPSOConfig (unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, 
PSOOutput *pOutput, double 
*pMinDurationMilliseconds, PSOOption 
*pOption=NULL) 
Get parameters for a position 


synchronous output channel. More...
-----------------------------------------------------------------------------------
530. Instruction: Get all data points that are currently set for a position synchronous output channel.
A: SetHardwareTouchProbe(axis, enable, mode, triggerSource, channel)
B: GetPSOData(channel, maxCount)
C: RetrievePSOData(channelName, numberOfRecords)
D: SetPSOSingleData(channel, sData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
530. Model's answer: B
530. Correct answer: B
530. Result: Correct



Processing Question 531:
531. Context:
 WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
Remarks 

This function obtains the data points that have been set for a position synchronous 
output channel using the SetPSOSingleData or SetPSOMultipleData functions. 

The GetFunctionDoesNotMatchSetFunction error is returned if the data for the 
position synchronous output channel has been set by the SetPSOIntervalData 
function. 

◆ 
GetPSODataCount() 

WMX3APIFUNC 
GetPSODataCount ( 
) 
WMX3APIFUNC 
GetPSODataCount ( 
) 
unsigned int 
channel, 
int * pCount 
Get the number of data points that are currently set for a position synchronous 

output channel. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
[out] 
pCount A pointer to an int that 
will contain the number 
of data points that are 
set for the position 
synchronous output 
channel. The maximum 
number of data points is 
contained in the 
maxPsoData constant. 

Remarks
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
The activeDataIndex status will return n when the output is set by the nth point. For 
example, in the above example, activeDataIndex will be set to 1 when the output is 
set by position 1000, 2 when the output is set by position 2000, 3 when the output is 
set by position 3000, 4 when the output is set by position 4000, and 5 when the 
output is set by position 5000. 

The number of points p that are generated by this function is unlimited, and may 
exceed maxPsoData. 

See also 

Position Synchronous Output (PSO) 

◆GetPSOData() 
WMX3APIFUNC 
GetPSOData ( 
unsigned int channel, 
int * 
double * 
pCount, 
pMData, 
int maxCount 
) 
Get all data points that are currently set for a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 


maxPsoChannel 

constant.
-----------------------------------------------------------------------------------
531. Instruction: Get the number of data points that are currently set for a position synchronous output channel.
A: FetchPSODataCount(channel)
B: GetEventModuleId(id)
C: GetPSOIntervalData(channel)
D: GetPSODataCount(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
531. Model's answer: D
531. Correct answer: D
531. Result: Correct



Processing Question 532:
532. Context:
 WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
--------------------------------------------
WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More... 

WMX3APIFUNC SetPlannedVelOverrideConfig (unsigned 
int channel, ComparisonType::T type, 
ComparatorSource *pSource, int axis) 
Set parameters for a planned velocity 
override channel. A planned velocity 
override channel is able to override the 
velocity of an axis when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPlannedVelOverrideConfig 
(unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, int *pAxis) 

Get parameters for a planned velocity 
override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More...
--------------------------------------------
Function double *pRangeEnd, 
double *pInterval); 
Python 
def 
GetPSOIntervalData(chan 
nel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : double -range 
start 
2 : double -range 
end 
3 : double -interval 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPSO(unsigned int 
channel); 
Python def StartPSO(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopPSO(unsigned int 
channel); 
Python def StopPSO(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPSOStatus(unsigned 
int channel, PSOStatus
-----------------------------------------------------------------------------------
532. Instruction: Get the range and interval of a position synchronous output channel.
A: GetPSOChannelData(channel_id)
B: GetPlannedVelOverrideStatus(channel)
C: GetPSODataCount(channel)
D: GetPSOIntervalData(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
532. Model's answer: D
532. Correct answer: D
532. Result: Correct



Processing Question 533:
533. Context:
 StartCircularIntplPos() : Motion 
StartCommunication() : WMX3Api 
StartCoordinatedPos() : AdvMotion 
StartCSplineMov() : AdvMotion 
StartCSplinePos() : AdvMotion 
StartDancerControl() : AdvSync 
StartECAM() : AdvSync 
StartEngine() : WMX3Api
--------------------------------------------
Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 

*pPosCommand, bool immediately=true) 

Start an absolute position PP mode 

motion command. More... 


WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, bool immediately=true) 

Start a relative position PP mode motion 
command. More... 

WMX3APIFUNC StartPos (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start an absolute position PP mode 
motion command. More... 

WMX3APIFUNC StartMov (PosCommand 
*pPosCommand, long maxTrqLimit, bool 
immediately=true) 
Start a relative position PP mode motion 
command. More...
--------------------------------------------
},
    {
        "No": 407,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
--------------------------------------------
},
    {
        "No": 415,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCBSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
-----------------------------------------------------------------------------------
533. Instruction: Start a position synchronous output channel. A position synchronous output channel must be started before it controls the output.
A: StartPSO(channel)
B: GetPSOConfig(channel)
C: StartLog(channel)
D: InitiatePSO(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
533. Model's answer: A
533. Correct answer: A
533. Result: Correct



Processing Question 534:
534. Context:
 Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
See also 

Position Synchronous Output (PSO) 

◆StopPSO() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC StopPSO ( 
Stop a position synchronous output channel. A stopped position synchronous output 

channel will stop controlling any outputs. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

◆GetPSOStatus() 

WMX3APIFUNC 
GetPSOStatus ( 
WMX3APIFUNC 
GetPSOStatus ( 
unsigned int channel, 
PSOStatus * pStatus 
) 
Get the state of a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant.
--------------------------------------------
},
    {
        "No": 585,
        "FunctionC++": "WMX3APIFUNC StartPSO(unsigned int channel)",
        "FunctionPython": "def StartPSO(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Start a position synchronous output channel. A position synchronous output channel must be started before it controls the output."
    },
    {
        "No": 586,
        "FunctionC++": "WMX3APIFUNC StopPSO(unsigned int channel)",
        "FunctionPython": "def StopPSO(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Stop a position synchronous output channel. A stopped position synchronous output channel will stop controlling any outputs. "
--------------------------------------------
WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
534. Instruction: Stop a position synchronous output channel. A stopped position synchronous output channel will stop controlling any outputs.
A: SetEventInput(id, pEventInput)
B: StopPSO(channel)
C: GetOptions(channel)
D: StopProcessing(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
534. Model's answer: B
534. Correct answer: B
534. Result: Correct



Processing Question 535:
535. Context:
 WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More... 

WMX3APIFUNC GetPSOIntervalData (unsigned int 
channel, double *pRangeStart, double 
*pRangeEnd, double *pInterval) 
Get the range and interval of a position 
synchronous output channel. More... 

WMX3APIFUNC StartPSO (unsigned int channel) 
Start a position synchronous output 
channel. A position synchronous output 
channel must be started before it 


controls the output. More... 

WMX3APIFUNC StopPSO (unsigned int channel) 
Stop a position synchronous output 
channel. A stopped position synchronous 
output channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 
See also 

Position Synchronous Output (PSO) 

◆StopPSO() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC StopPSO ( 
Stop a position synchronous output channel. A stopped position synchronous output 

channel will stop controlling any outputs. 
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

◆GetPSOStatus() 

WMX3APIFUNC 
GetPSOStatus ( 
WMX3APIFUNC 
GetPSOStatus ( 
unsigned int channel, 
PSOStatus * pStatus 
) 
Get the state of a position synchronous output channel. 

Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant.
--------------------------------------------
WMX3APIFUNC GetPSOStatus (unsigned int channel, 
PSOStatus *pStatus) 

Get the state of a position synchronous 
output channel. More... 

WMX3APIFUNC SetPlannedVelOverrideConfig (unsigned 
int channel, ComparisonType::T type, 
ComparatorSource *pSource, int axis) 
Set parameters for a planned velocity 
override channel. A planned velocity 
override channel is able to override the 
velocity of an axis when certain 
conditions, such as an axis reaching a 
certain position, are met. More... 

WMX3APIFUNC GetPlannedVelOverrideConfig 
(unsigned int channel, 
ComparisonType::T *pType, 
ComparatorSource *pSource, int *pAxis) 

Get parameters for a planned velocity 
override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More...
--------------------------------------------
synchronous output channel. More... 

WMX3APIFUNC SetPSOSingleData (unsigned int 
channel, double sData) 

Set a single data point for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOMultipleData (unsigned int 
channel, int count, double *pMData) 

Set multiple data points for a position 
synchronous output channel. More... 

WMX3APIFUNC SetPSOIntervalData (unsigned int 
channel, double rangeStart, double 
rangeEnd, double interval) 
Set data points over a range for a 
position synchronous output channel. 
More... 

WMX3APIFUNC GetPSOData (unsigned int channel, int 
*pCount, double *pMData, int maxCount) 

Get all data points that are currently set 
for a position synchronous output 
channel. More... 

WMX3APIFUNC GetPSODataCount (unsigned int 
channel, int *pCount) 

Get the number of data points that are 
currently set for a position synchronous 
output channel. More...
-----------------------------------------------------------------------------------
535. Instruction: Get the state of a position synchronous output channel.
A: GetPSOStatus(channel)
B: GetPowerStatus(channel_id)
C: GetPSODataCount(channel)
D: StartPSO(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
535. Model's answer: A
535. Correct answer: A
535. Result: Correct



Processing Question 536:
536. Context:
 WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
Planned Velocity Override 


◆GetPlannedVelOverrideConfig() 
WMX3APIFUNC 
GetPlannedVelOverr 
ideConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
int * pAxis 
) 
Get parameters for a planned velocity override channel. 
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[out] 
pAxis A pointer to an int that 
will contain the axis to 
override the velocity of 
when the condition 
yields true. 


◆SetPlannedVelOverrideSingleData() 
WMX3APIFUNC 
SetPlannedVelOverri 
deSingleData ( unsigned int channel, 
PlannedVelocityData sData 
) 
Set a single data point for a planned velocity override channel.
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
position synchronous 
output. The number of 
available channels is 
contained in the 
maxPsoChannel 
constant. 

[out] 
pStatus A pointer to a 
PSOStatus class object 
that contains the state of 
the position synchronous 
output channel. 

◆SetPlannedVelOverrideConfig() 

WMX3APIFUNC 
SetPlannedVelOverri 
deConfig ( 
WMX3APIFUNC 
SetPlannedVelOverri 
deConfig ( 
unsigned int channel, 
ComparisonType::T type, 
ComparatorSource * pSource, 
int axis 
) 
Set parameters for a planned velocity override channel. A planned velocity override 
channel is able to override the velocity of an axis when certain conditions, such as 

an axis reaching a certain position, are met.
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
sData The data point as 
represented by a 
PlannedVelocityData 
class object. 

Remarks 

This function sets a single data point for a planned velocity override channel. Any 
data points that have been previously set by the 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 

See also 

Planned Velocity Override 

◆SetPlannedVelOverrideMultipleData() 

WMX3APIFUNC WMX3APIFUNC 
SetPlannedVelOverri 
channel, 
count, 
PlannedVelocityData pMData 
) 
deMultipleData 
( 
unsigned int 
int 
Set multiple data points for a planned velocity override channel.
-----------------------------------------------------------------------------------
536. Instruction: Set parameters for a planned velocity override channel. A planned velocity override channel is able to override the velocity of an axis when certain conditions, such as an axis reaching a certain position, are met.
A: SetPlannedVelOverrideMultipleData(channel, count, pMData)
B: SetPlannedVelOverrideConfigWithAxis(channel, type, source, axisNumber)
C: StartPlannedVelOverride(channel)
D: SetPlannedVelOverrideConfig(channel, type, pSource, axis)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
536. Model's answer: D
536. Correct answer: D
536. Result: Correct



Processing Question 537:
537. Context:
 WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ata(unsigned int 
channel, int *pCount, 
PlannedVelocityData 
*pMData, int maxCount); 
Python 
def 
GetPlannedVelOverrideDa 
ta(channel, maxCount) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count 
2 : 
EventControl_Plann 
edVelocityData mdata 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ataCount(unsigned int 
channel, int *pCount); 
Python 
def 
GetPlannedVelOverrideDa 
taCount(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count
--------------------------------------------
Planned Velocity Override 


◆GetPlannedVelOverrideConfig() 
WMX3APIFUNC 
GetPlannedVelOverr 
ideConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
int * pAxis 
) 
Get parameters for a planned velocity override channel. 
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[out] 
pAxis A pointer to an int that 
will contain the axis to 
override the velocity of 
when the condition 
yields true. 


◆SetPlannedVelOverrideSingleData() 
WMX3APIFUNC 
SetPlannedVelOverri 
deSingleData ( unsigned int channel, 
PlannedVelocityData sData 
) 
Set a single data point for a planned velocity override channel.
--------------------------------------------
Python GetPlannedVelOverrideCo 
nfig(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -type 
2 : 
EventControl_Com 
paratorSource source 
3 : int -axis 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPlannedVelOverrideS 
ingleData(unsigned int 
channel, 
PlannedVelocityData 
sData); 
Python 
def 
SetPlannedVelOverrideSin 
gleData(channel, sData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
SetPlannedVelOverrideM 
ultipleData(unsigned int 
channel, int count, 
PlannedVelocityData 
*pMData); 
def 
SetPlannedVelOverrideMu 
ltipleData(channel, count, 
pMData)
-----------------------------------------------------------------------------------
537. Instruction: Get parameters for a planned velocity override channel.
A: GetPlannedVelOverrideConfig(channel)
B: GetPlannedVelOverrideConfigData(channel_id)
C: GetPlannedVelOverrideDataCount(channel)
D: GetPSODataCount(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
537. Model's answer: A
537. Correct answer: A
537. Result: Correct



Processing Question 538:
538. Context:
 WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
Planned Velocity Override 


◆GetPlannedVelOverrideConfig() 
WMX3APIFUNC 
GetPlannedVelOverr 
ideConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
int * pAxis 
) 
Get parameters for a planned velocity override channel. 
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[out] 
pAxis A pointer to an int that 
will contain the axis to 
override the velocity of 
when the condition 
yields true. 


◆SetPlannedVelOverrideSingleData() 
WMX3APIFUNC 
SetPlannedVelOverri 
deSingleData ( unsigned int channel, 
PlannedVelocityData sData 
) 
Set a single data point for a planned velocity override channel.
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
sData The data point as 
represented by a 
PlannedVelocityData 
class object. 

Remarks 

This function sets a single data point for a planned velocity override channel. Any 
data points that have been previously set by the 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 

See also 

Planned Velocity Override 

◆SetPlannedVelOverrideMultipleData() 

WMX3APIFUNC WMX3APIFUNC 
SetPlannedVelOverri 
channel, 
count, 
PlannedVelocityData pMData 
) 
deMultipleData 
( 
unsigned int 
int 
Set multiple data points for a planned velocity override channel.
--------------------------------------------
Python GetPlannedVelOverrideCo 
nfig(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -type 
2 : 
EventControl_Com 
paratorSource source 
3 : int -axis 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPlannedVelOverrideS 
ingleData(unsigned int 
channel, 
PlannedVelocityData 
sData); 
Python 
def 
SetPlannedVelOverrideSin 
gleData(channel, sData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
SetPlannedVelOverrideM 
ultipleData(unsigned int 
channel, int count, 
PlannedVelocityData 
*pMData); 
def 
SetPlannedVelOverrideMu 
ltipleData(channel, count, 
pMData)
-----------------------------------------------------------------------------------
538. Instruction: Set a single data point for a planned velocity override channel.
A: GetPlannedVelOverrideData(channel, maxCount)
B: GetEvent(id)
C: SetPlannedVelocityOverrideData(channel, data)
D: SetPlannedVelOverrideSingleData(channel, sData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
538. Model's answer: D
538. Correct answer: D
538. Result: Correct



Processing Question 539:
539. Context:
 WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
sData The data point as 
represented by a 
PlannedVelocityData 
class object. 

Remarks 

This function sets a single data point for a planned velocity override channel. Any 
data points that have been previously set by the 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 

See also 

Planned Velocity Override 

◆SetPlannedVelOverrideMultipleData() 

WMX3APIFUNC WMX3APIFUNC 
SetPlannedVelOverri 
channel, 
count, 
PlannedVelocityData pMData 
) 
deMultipleData 
( 
unsigned int 
int 
Set multiple data points for a planned velocity override channel.
--------------------------------------------
Planned Velocity Override 


◆GetPlannedVelOverrideConfig() 
WMX3APIFUNC 
GetPlannedVelOverr 
ideConfig ( unsigned int channel, 
ComparisonType::T pType, 
ComparatorSource * pSource, 
int * pAxis 
) 
Get parameters for a planned velocity override channel. 
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pType A pointer to a 
ComparisonType that 
will contain the type of 
comparison to perform. 
[out] 
pSource A pointer to a 
ComparatorSource 
class object that 
specifies the source to 
use for the comparison. 
[out] 
pAxis A pointer to an int that 
will contain the axis to 
override the velocity of 
when the condition 
yields true. 


◆SetPlannedVelOverrideSingleData() 
WMX3APIFUNC 
SetPlannedVelOverri 
deSingleData ( unsigned int channel, 
PlannedVelocityData sData 
) 
Set a single data point for a planned velocity override channel.
--------------------------------------------
Python GetPlannedVelOverrideCo 
nfig(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -type 
2 : 
EventControl_Com 
paratorSource source 
3 : int -axis 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetPlannedVelOverrideS 
ingleData(unsigned int 
channel, 
PlannedVelocityData 
sData); 
Python 
def 
SetPlannedVelOverrideSin 
gleData(channel, sData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
WMX3APIFUNC 
SetPlannedVelOverrideM 
ultipleData(unsigned int 
channel, int count, 
PlannedVelocityData 
*pMData); 
def 
SetPlannedVelOverrideMu 
ltipleData(channel, count, 
pMData)
-----------------------------------------------------------------------------------
539. Instruction: Set multiple data points for a planned velocity override channel.
A: SetPlannedVelOverrideSingleData(channel, sData)
B: SetPlannedVelOverrideMultipleData(channel, count, pMData)
C: SetEvent(pEventInput, pEventOutput)
D: SetPlannedVelOverridesBulkData(channel, num_overrides, overrides_data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
539. Model's answer: B
539. Correct answer: B
539. Result: Correct



Processing Question 540:
540. Context:
 WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ata(unsigned int 
channel, int *pCount, 
PlannedVelocityData 
*pMData, int maxCount); 
Python 
def 
GetPlannedVelOverrideDa 
ta(channel, maxCount) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count 
2 : 
EventControl_Plann 
edVelocityData mdata 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ataCount(unsigned int 
channel, int *pCount); 
Python 
def 
GetPlannedVelOverrideDa 
taCount(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[in] 
sData The data point as 
represented by a 
PlannedVelocityData 
class object. 

Remarks 

This function sets a single data point for a planned velocity override channel. Any 
data points that have been previously set by the 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 

See also 

Planned Velocity Override 

◆SetPlannedVelOverrideMultipleData() 

WMX3APIFUNC WMX3APIFUNC 
SetPlannedVelOverri 
channel, 
count, 
PlannedVelocityData pMData 
) 
deMultipleData 
( 
unsigned int 
int 
Set multiple data points for a planned velocity override channel.
--------------------------------------------
This function sets multiple data points for a position synchronous output channel. 
Any data points that have been previously set by the 



◆GetPlannedVelOverrideData() 
SetPlannedVelOverrideSingleData or SetPlannedVelOverrideMultipleData 
functions are cleared. 
See also 
Planned Velocity Override 
WMX3APIFUNC 
GetPlannedVelOverr 
ideData ( unsigned int channel, 
int * pCount, 
PlannedVelocityData pMData, 
int maxCount 
) 
Get all data points that are currently set for a planned velocity override channel. 

Parameters 
[in] 
channel 

[out] 
pCount 

The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 
A pointer to an int that 
will contain the number 
of data points at the 
memory location pointed 
by mData. The 
maximum number of 
data points is contained 
in the maxPveloData 
constant.
-----------------------------------------------------------------------------------
540. Instruction: Get all data points that are currently set for a planned velocity override channel.
A: GetPlannedVelOverrideData(channel, maxCount)
B: SetPlannedVelOverrideMultipleData(channel, count, pMData)
C: GetPlannedVelOverrideDataCount(channel)
D: GetPlannedVelOverrideDataWithLimit(channelName, maxItems)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
540. Model's answer: A
540. Correct answer: A
540. Result: Correct



Processing Question 541:
541. Context:
 Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ata(unsigned int 
channel, int *pCount, 
PlannedVelocityData 
*pMData, int maxCount); 
Python 
def 
GetPlannedVelOverrideDa 
ta(channel, maxCount) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count 
2 : 
EventControl_Plann 
edVelocityData mdata 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideD 
ataCount(unsigned int 
channel, int *pCount); 
Python 
def 
GetPlannedVelOverrideDa 
taCount(channel) 
Type tuple 
Returns 
Value 
0 : int -error code 
1 : int -count
--------------------------------------------
WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
},
    {
        "No": 591,
        "FunctionC++": "WMX3APIFUNC SetPlannedVelOverrideMultipleData(unsigned int channel, int count, PlannedVelocityData *pMData)",
        "FunctionPython": "def SetPlannedVelOverrideMultipleData(channel, count, pMData)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Set multiple data points for a planned velocity override channel."
    },
    {
        "No": 592,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideData(unsigned int channel, int *pCount, PlannedVelocityData *pMData, int maxCount)",
        "FunctionPython": "def GetPlannedVelOverrideData(channel, maxCount)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get all data points that are currently set for a planned velocity override channel."
--------------------------------------------
},
    {
        "No": 593,
        "FunctionC++": "WMX3APIFUNC GetPlannedVelOverrideDataCount(unsigned int channel, int *pCount)",
        "FunctionPython": "def GetPlannedVelOverrideDataCount(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "EventControl Class",
        "Instruction": "Get the number of data points that are currently set for a planned velocity override channel. "
    },
    {
        "No": 594,
        "FunctionC++": "WMX3APIFUNC StartPlannedVelOverride(unsigned int channel)",
        "FunctionPython": "def StartPlannedVelOverride(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "EventControl Class",
        "Instruction": "Start a planned velocity override channel. A planned velocity override channel must be started before it controls the output. "
-----------------------------------------------------------------------------------
541. Instruction: Get the number of data points that are currently set for a planned velocity override channel.
A: RemoveEvent(id)
B: GetPlannedVelocityOverrideDataCount(channel_id)
C: StopPlannedVelOverride(channel)
D: GetPlannedVelOverrideDataCount(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
541. Model's answer: D
541. Correct answer: D
541. Result: Correct



Processing Question 542:
542. Context:
 },
    {
        "No": 414,
        "FunctionC++": "WMX3APIFUNC StartCSplineMov(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplineMov_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as relative positions."
--------------------------------------------
},
    {
        "No": 410,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCSplinePos_VelAccLimited (channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
--------------------------------------------
},
    {
        "No": 418,
        "FunctionC++": "WMX3APIFUNC StartCBSplinePos(int channel, VelAccLimitedSplineCommand *pSplineCommand, unsigned int numPoints, SplinePoint *pPoint)",
        "FunctionPython": "def StartCBSplinePos_VelAccLimited(channel, pSplineCommand, numPoints, pPoint)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic basis spline motion command in which the spline is traversed while staying within the specified velocity and acceleration limits for each axis. The point positions are specified as absolute positions."
--------------------------------------------
},
    {
        "No": 407,
        "FunctionC++": "WMX3APIFUNC StartCSplinePos(int channel, PointTimeSplineCommand *pSplineCommand, double *pPointTimeMilliseconds)",
        "FunctionPython": "def StartCSplinePos_PointTime (channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a cubic spline motion command in which the time at each point is specified. The point positions are specified as absolute positions."
-----------------------------------------------------------------------------------
542. Instruction: Start a planned velocity override channel. A planned velocity override channel must be started before it controls the output.
A: GetPSOIntervalData(channel)
B: StartPlannedVelOverride(channel)
C: GetPlannedVelOverrideConfig(channel)
D: BeginPlannedVelocityOverride(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
542. Model's answer: B
542. Correct answer: B
542. Result: Correct



Processing Question 543:
543. Context:
 WMX3APIFUNC StopPlannedVelOverride (unsigned int 
channel) 
Stop a planned velocity override 
channel. A stopped planned velocity 
override channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPlannedVelOverrideStatus (unsigned 
int channel, PlannedVelocityStatus 
*pStatus) 
Get the state of a planned velocity 
override channel. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 

unsigned int size) 

Get a string representation of the 


specified error code. More...
--------------------------------------------
Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
[out] 
pCount A pointer to an int that 
will contain the number 
of data points that are 
set for the planned 
velocity override 
channel. The maximum 
number of data points is 
contained in the 
constants::maxPveloD 
ata. 

◆StartPlannedVelOverride() 

WMX3APIFU 
NC 
StartPlanned 
WMX3APIFU 
NC 
StartPlanned 
VelOverride ( 
unsigned int channel ) 
Start a planned velocity override channel. A planned velocity override channel must 
be started before it controls the output. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 
maxPveloChannel 
constant. 
See also 

Planned Velocity Override 

◆StopPlannedVelOverride()
--------------------------------------------
Planned Velocity Override 

◆StopPlannedVelOverride() 

WMX3APIFU 
NC 
StopPlanned 
WMX3APIFU 
NC 
StopPlanned 
VelOverride ( 
unsigned int channel ) 
Stop a planned velocity override channel. A stopped planned velocity override 
channel will stop controlling any outputs. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 

◆GetPlannedVelOverrideStatus() 

WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
unsigned int 
channel, 
PlannedVelocityStatpStatus 
) 
Get the state of a planned velocity override channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 
[out] 
pStatus A pointer to a 

PlannedVelocityStatus 

class object that 
contains the state of the 
planned velocity override 
channel. 

 

Io Class Reference
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPlannedVelOverride 
(unsigned int channel); 
Python 
def 
StartPlannedVelOverride(c 
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopPlannedVelOverride 
(unsigned int channel); 
Python 
def 
StopPlannedVelOverride(c 
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideS 
tatus(unsigned int 
channel, 
PlannedVelocityStatus 
*pStatus); 
Python 
def 
GetPlannedVelOverrideSt 
atus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_Plann 


edVelocityStatus -
status 
Remarks 
edVelocityStatus -
status 
Remarks 
 


Io Class
-----------------------------------------------------------------------------------
543. Instruction: Stop a planned velocity override channel. A stopped planned velocity override channel will stop controlling any outputs.
A: SetPSOConfig(channel, pType, pMinDurationMilliseconds)
B: StopPlannedVelOverride(channel)
C: GetPlannedVelOverrideConfig(channel)
D: StopPlannedVelocityOverride(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
543. Model's answer: B
543. Correct answer: B
543. Result: Correct



Processing Question 544:
544. Context:
 Planned Velocity Override 

◆StopPlannedVelOverride() 

WMX3APIFU 
NC 
StopPlanned 
WMX3APIFU 
NC 
StopPlanned 
VelOverride ( 
unsigned int channel ) 
Stop a planned velocity override channel. A stopped planned velocity override 
channel will stop controlling any outputs. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 

◆GetPlannedVelOverrideStatus() 

WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
WMX3APIFUNC 
GetPlannedVelOverr 
ideStatus ( 
unsigned int 
channel, 
PlannedVelocityStatpStatus 
) 
Get the state of a planned velocity override channel. 

Parameters 
[in] 
channel The channel of the 
planned velocity 
override. The number of 
available channels is 
contained in the 

maxPveloChannel 

constant. 
[out] 
pStatus A pointer to a 

PlannedVelocityStatus 

class object that 
contains the state of the 
planned velocity override 
channel. 

 

Io Class Reference
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
StartPlannedVelOverride 
(unsigned int channel); 
Python 
def 
StartPlannedVelOverride(c 
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
StopPlannedVelOverride 
(unsigned int channel); 
Python 
def 
StopPlannedVelOverride(c 
hannel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetPlannedVelOverrideS 
tatus(unsigned int 
channel, 
PlannedVelocityStatus 
*pStatus); 
Python 
def 
GetPlannedVelOverrideSt 
atus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
EventControl_Plann 


edVelocityStatus -
status 
Remarks 
edVelocityStatus -
status 
Remarks 
 


Io Class
--------------------------------------------
WMX3APIFUNC SetPlannedVelOverrideSingleData 
(unsigned int channel, 
PlannedVelocityData sData) 
Set a single data point for a planned 
velocity override channel. More... 

WMX3APIFUNC SetPlannedVelOverrideMultipleData 
(unsigned int channel, int count, 
PlannedVelocityData *pMData) 
Set multiple data points for a planned 
velocity override channel. More... 


WMX3APIFUNC GetPlannedVelOverrideData (unsigned 
int channel, int *pCount, 
PlannedVelocityData *pMData, int 
maxCount) 
Get all data points that are currently set 
for a planned velocity override channel. 
More... 
WMX3APIFUNC GetPlannedVelOverrideDataCount 
(unsigned int channel, int *pCount) 
Get the number of data points that are 
currently set for a planned velocity 
override channel. More... 
WMX3APIFUNC StartPlannedVelOverride (unsigned int 
channel) 
Start a planned velocity override 
channel. A planned velocity override 
channel must be started before it 
controls the output. More...
--------------------------------------------
WMX3APIFUNC StopPlannedVelOverride (unsigned int 
channel) 
Stop a planned velocity override 
channel. A stopped planned velocity 
override channel will stop controlling any 
outputs. More... 

WMX3APIFUNC GetPlannedVelOverrideStatus (unsigned 
int channel, PlannedVelocityStatus 
*pStatus) 
Get the state of a planned velocity 
override channel. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 

unsigned int size) 

Get a string representation of the 


specified error code. More...
-----------------------------------------------------------------------------------
544. Instruction: Get the state of a planned velocity override channel.
A: GetPlannedVelOverrideStatus(channel)
B: GetPlannedVelOverrideStatusUpdated(vehicleChannel)
C: GetEventOption(id)
D: StartPlannedVelOverride(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
544. Model's answer: A
544. Correct answer: A
544. Result: Correct



Processing Question 545:
545. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
},
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
},
    {
        "No": 606,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 607,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code. "
-----------------------------------------------------------------------------------
545. Instruction: Get a string representation of the specified error code.
A: ErrorToString(errCode)
B: SetOutAnalogDataUInt(addr, analogData)
C: GetInitialOutBytesInterruptId(addr, size)
D: ErrorToString(code)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
545. Model's answer: A
545. Correct answer: A
545. Result: Correct



Processing Question 546:
546. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static ECAPIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static ECAPIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
546. Instruction: Get a string representation of the raw data of an API log.
A: ApiLogToString(pLogData, logDataSize)
B: GetPSOConfig_Option(channel)
C: ApiLogDataToString(logData, dataSize)
D: GetOutByteEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
546. Model's answer: A
546. Correct answer: A
546. Result: Correct



Processing Question 547:
547. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t
-----------------------------------------------------------------------------------
547. Instruction: Get the version of the module library.
A: Export_SysPrm_AxisPrm_Axis(pPath, pParam, pAxisParam, axis)
B: GetLibVersion()
C: GetLibraryVersion()
D: SetOutAnalogDataUShort(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
547. Model's answer: B
547. Correct answer: B
547. Result: Correct



Processing Question 548:
548. Context:
 This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆SetOutBit()
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
},
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
-----------------------------------------------------------------------------------
548. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetOutBitEx(addr, bit)
B: IsDeviceAuthenticationValid()
C: IsDeviceValid()
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
548. Model's answer: C
548. Correct answer: C
548. Result: Correct



Processing Question 549:
549. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
-----------------------------------------------------------------------------------
549. Instruction: Get the version of the module rtdll.
A: GetBacklashCompensation(axis)
B: GetInAnalogDataUInt(addr)
C: GetSoftwareVersion()
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
549. Model's answer: D
549. Correct answer: D
549. Result: Correct



Processing Question 550:
550. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUInt (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutBitMaskMode (bool enable) 
Set the bitmask mode of output. More... 
WMX3APIFUNC SetOutBitMaskBit (int addr, int bit, 
unsigned char data) 
Set the bitmask of output bit. More... 

WMX3APIFUNC SetOutBitMaskByte (int addr, unsigned 

char data) 

Set the bitmask of an output byte. 

More... 

WMX3APIFUNC SetOutBitMaskBytes (int addr, int size, 

unsigned char *pData) 

Set the bitmask of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitMaskBits (int *pAddr, int *pBit, 

unsigned char *pData, int count) 

Set the bitmask of multiple output bits. 

More... 

WMX3APIFUNC GetInBit (int addr, int bit, unsigned char 

*pData)
--------------------------------------------
◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks
--------------------------------------------
WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
-----------------------------------------------------------------------------------
550. Instruction: Set the value of an output bit.
A: SetOutputBit(address, bitPosition, value)
B: SetMBit(addr, bit, data)
C: GetOutAnalogDataInt(addr)
D: SetOutBit(addr, bit, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
550. Model's answer: D
550. Correct answer: D
550. Result: Correct



Processing Question 551:
551. Context:
 WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
This function has a faster response time compared to SetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutByteEx() 

WMX3APIFUNC 
SetOutByteEx ( 
) 
WMX3APIFUNC 
SetOutByteEx ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes.
--------------------------------------------
Function unsigned char data); 
Python 
def SetOutByteEx(addr, 
data) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBytesEx(int addr, 
int size, unsigned char 
*pData); 
Python 
def SetOutBytesEx(addr, 
size, pData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBitsEx(int *pAddr, 
int *pBit, unsigned char 
*pData, int count); 
Python 
def SetOutBitsEx(pByte, 
pBit, pData, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutAnalogDataCharE 
x(int addr, char 
analogData); 
Python 
def 
SetOutAnalogDataCharEx 
(addr, analogData) 
Type int
--------------------------------------------
◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBitsEx() 
WMX3APIFUNC 
SetOutBitsEx ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the value of multiple output bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks
-----------------------------------------------------------------------------------
551. Instruction: Set the value of an output byte.
A: SetOutBytesEx(addr, size, pData)
B: SetOutByte(addr, data)
C: SetOutputByte(address, value)
D: SetMByte(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
551. Model's answer: B
551. Correct answer: B
551. Result: Correct



Processing Question 552:
552. Context:
 WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBitsEx() 
WMX3APIFUNC 
SetOutBitsEx ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the value of multiple output bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks
--------------------------------------------
This function has a faster response time compared to SetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutByteEx() 

WMX3APIFUNC 
SetOutByteEx ( 
) 
WMX3APIFUNC 
SetOutByteEx ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes.
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
-----------------------------------------------------------------------------------
552. Instruction: Set the value of multiple output bytes.
A: SetOutBytesEx(addr, size, pData)
B: SetInputData(moduleId, data, dataSize)
C: SetOutBytes(addr, size, pData)
D: SetOutputBytes(address, length, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
552. Model's answer: A
552. Correct answer: C
552. Result: Wrong



Processing Question 553:
553. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
--------------------------------------------
◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks
-----------------------------------------------------------------------------------
553. Instruction: Set the value of multiple output bits.
A: SetOutBits(pByte, pBit, pData, count)
B: SetOutAnalogDataUIntEx(addr, analogData)
C: SetOutputBits(bytePointer, bitIndex, dataValue, count)
D: SetOutBit(addr, bit, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
553. Model's answer: A
553. Correct answer: A
553. Result: Correct



Processing Question 554:
554. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
-----------------------------------------------------------------------------------
554. Instruction: Set the value of output analog data spanning one byte.
A: GetOutputModuleId()
B: SetOutAnalogDataChar(addr, analogData)
C: SetOutAnalogDataCharEx(addr, analogData)
D: SetOutputVoltage(addr, voltage)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
554. Model's answer: C
554. Correct answer: B
554. Result: Wrong



Processing Question 555:
555. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
-----------------------------------------------------------------------------------
555. Instruction: Set the value of output analog data spanning one byte.
A: SetOutAnalogDataUInt16(addr, analogData)
B: SetOutAnalogDataUChar(addr, analogData)
C: GetInBytesEx(addr, size)
D: SetMAnalogDataUChar(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
555. Model's answer: B
555. Correct answer: B
555. Result: Correct



Processing Question 556:
556. Context:
 Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes.
--------------------------------------------
This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar() 

WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

◆SetOutAnalogDataShort() 

WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks
-----------------------------------------------------------------------------------
556. Instruction: Set the value of output analog data spanning two bytes.
A: SetOutAnalogDataShort(addr, analogData)
B: GetOutAnalogDataUCharEx(addr)
C: SetOutAnalogDataChar(addr, analogData)
D: SetAnalogOutputShort(address, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
556. Model's answer: A
556. Correct answer: A
556. Result: Correct



Processing Question 557:
557. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes.
--------------------------------------------
This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar() 

WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

◆SetOutAnalogDataShort() 

WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks
-----------------------------------------------------------------------------------
557. Instruction: Set the value of output analog data spanning two bytes.
A: SetOutBit(addr, bit, data)
B: SetAnalogOutputUShort(addr, data)
C: SetOutAnalogDataShortEx(addr, analogData)
D: SetOutAnalogDataUShort(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
557. Model's answer: C
557. Correct answer: D
557. Result: Wrong



Processing Question 558:
558. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified unsigned 
short type analog data value. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetOutAnalogDataInt() 

WMX3APIFUNC 
SetOutAnalogDataIn 
t ( 
) 
WMX3APIFUNC 
SetOutAnalogDataIn 
t ( 
) 
int 
addr, 
int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
-----------------------------------------------------------------------------------
558. Instruction: Set the value of output analog data spanning four bytes.
A: SetOutByte(addr, data)
B: SetOutAnalogDataInt(addr, analogData)
C: SetOutputAnalogDataInt(addrIndex, analogValue)
D: SetMAnalogDataUInt(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
558. Model's answer: B
558. Correct answer: B
558. Result: Correct



Processing Question 559:
559. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
-----------------------------------------------------------------------------------
559. Instruction: Set the value of output analog data spanning four bytes.
A: SetOutAnalogDataIntEx(addr, analogData)
B: GetInAnalogDataCharEx(addr)
C: SetOutAnalogDataUInt(addr, analogData)
D: SetAnalogOutputDataInt(addr, analogValue)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
559. Model's answer: A
559. Correct answer: C
559. Result: Wrong



Processing Question 560:
560. Context:
 Remarks 

This function is equivalent to calling the SetOutBitMaskBits function multiple times, 
but can be faster due to the reduced overhead. There is no limit to the number of 
bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first 
output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, 
and so on. The bits can be specified in any order. 

◆GetInBit() 

WMX3APIFUNC 
GetInBit ( 
) 
WMX3APIFUNC 
GetInBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInByte()
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBitMaskBits(int* 
pAddr, int* pBit, 
unsigned char* pData, 
int count); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetInBit(int addr, int bit, 
unsigned char *pData); 
Python def GetInBit(addr, bit) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetInByte(int addr, 
unsigned char *pData); 
Python def GetInByte(addr) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -data 
Remarks 
C++ 
WMX3APIFUNC 
GetInBytes(int addr, int
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified unsigned 
int type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetInBitEx() 

WMX3APIFUNC 
GetInBitEx ( 
) 
WMX3APIFUNC 
GetInBitEx ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks
--------------------------------------------
unsigned char *pData, int count) 

Set the bitmask of multiple output bits. 

More... 

WMX3APIFUNC GetInBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an input bit. More... 

WMX3APIFUNC GetInByte (int addr, unsigned char 
*pData) 


Get the value of an input byte. More... 

WMX3APIFUNC GetInBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More...
-----------------------------------------------------------------------------------
560. Instruction: Get the value of an input bit.
A: GetMBitEx(addr, bit)
B: GetInBit(addr, bit)
C: SetBit(addr, bit_num)
D: SetOutBytes(addr, size, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
560. Model's answer: B
560. Correct answer: B
560. Result: Correct



Processing Question 561:
561. Context:
 Function C++ 
Python 
Type 
GetInByteEx(int addr, 
unsigned char *pData); 
def GetInByteEx(addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInBytesEx(int addr, 
int size,unsigned char 
*pData); 
def GetInBytesEx(addr, 
size) 
tuple 
Returns 
Value 
0 : int -error code 
1 : list(int) -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInAnalogDataCharEx 
(int addr, char 
*pAnalogData); 
def 
GetInAnalogDataCharEx( 
addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
-----------------------------------------------------------------------------------
561. Instruction: Get the value of an input byte.
A: GetInAnalogDataUIntEx(addr)
B: GetByteAtAddress(memory_address)
C: GetOutByte(addr)
D: GetInByte(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
561. Model's answer: D
561. Correct answer: D
561. Result: Correct



Processing Question 562:
562. Context:
 Function C++ 
Python 
Type 
GetInByteEx(int addr, 
unsigned char *pData); 
def GetInByteEx(addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInBytesEx(int addr, 
int size,unsigned char 
*pData); 
def GetInBytesEx(addr, 
size) 
tuple 
Returns 
Value 
0 : int -error code 
1 : list(int) -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInAnalogDataCharEx 
(int addr, char 
*pAnalogData); 
def 
GetInAnalogDataCharEx( 
addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks
--------------------------------------------
GetMBytesEx 
Yes 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataCharEx 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUCharEx 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShortEx 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShortEx 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataIntEx 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUIntEx 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 

 

Expedited User Memory Functions
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInBytesEx() 

WMX3APIFUNC 
GetInBytesEx ( 
) 
WMX3APIFUNC 
GetInBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple input bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetInBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx()
-----------------------------------------------------------------------------------
562. Instruction: Get the value of multiple input bytes.
A: GetMBytesEx(addr, size)
B: GetInitialOutByteInterruptId(addr)
C: GetBytes(address, length)
D: GetInBytes(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
562. Model's answer: A
562. Correct answer: D
562. Result: Wrong



Processing Question 563:
563. Context:
 This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time (for example, if a communication interrupt 
occurs), partially updated data may be read. 

◆GetInAnalogDataChar() 

WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUChar()
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx() 

WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetInAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUCharEx()
-----------------------------------------------------------------------------------
563. Instruction: Get the value of input analog data spanning one byte.
A: GetInAnalogDataChar(addr)
B: SetOutBytes(addr, size, pData)
C: GetAnalogDataChar(addr)
D: GetInAnalogDataUCharEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
563. Model's answer: A
563. Correct answer: A
563. Result: Correct



Processing Question 564:
564. Context:
 This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time (for example, if a communication interrupt 
occurs), partially updated data may be read. 

◆GetInAnalogDataChar() 

WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
ar ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUChar()
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx() 

WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetInAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUCharEx()
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
564. Instruction: Get the value of input analog data spanning one byte.
A: GetInAnalogDataUChar(addr)
B: GetMAnalogDataUChar(addr)
C: GetInByte(addr)
D: GetAnalogDataUChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
564. Model's answer: A
564. Correct answer: A
564. Result: Correct



Processing Question 565:
565. Context:
 WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUChar() 

WMX3APIFUNC 
GetInAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetInAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an unsigned 
char that will receive the 
data. 

Remarks 

This function reads one byte of the input address space and returns the data as an 
unsigned char type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataShort() 

WMX3APIFUNC 
GetInAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetInAnalogDataSh 
ort ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of input analog data spanning two bytes.
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataShortEx() 

WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as a 
short type analog data value. 

This function has a faster response time compared to GetInAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUShortEx()
-----------------------------------------------------------------------------------
565. Instruction: Get the value of input analog data spanning two bytes.
A: GetInputData(buff, buffSize, dataSize, initialState)
B: FetchAnalogShortData(addr)
C: GetMAnalogDataShort(addr)
D: GetInAnalogDataShort(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
565. Model's answer: D
565. Correct answer: D
565. Result: Correct



Processing Question 566:
566. Context:
 Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
-----------------------------------------------------------------------------------
566. Instruction: Get the value of input analog data spanning two bytes.
A: SetOutBytesEx(addr, size, pData)
B: GetInAnalogDataUShort(addr)
C: GetInAnalogDataShortEx(addr)
D: GetAnalogDataUShort(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
566. Model's answer: B
566. Correct answer: B
566. Result: Correct



Processing Question 567:
567. Context:
 This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataIntEx() 

WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function has a faster response time compared to GetInAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataUIntEx()
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
◆GetInAnalogDataInt() 

WMX3APIFUNC 
GetInAnalogDataInt ( int 
WMX3APIFUNC 
GetInAnalogDataInt ( int 
addr, 
int * pAnalogData 
) 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an int that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time (for 
example, if a communication interrupt occurs), partially updated data may be read. 

◆GetInAnalogDataUInt()
--------------------------------------------
Returns 
Value 
0 : int -error code 
1 : listEx(int) -data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMAnalogDataCharEx 
(unsigned int addr, char 
*pAnalogData); 
Python 
def 
GetMAnalogDataCharEx( 
addr) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetMAnalogDataUCharE 
x(unsigned int addr, 
unsigned char 
*pAnalogData); 
Python 
def 
GetMAnalogDataUCharEx 
(addr) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -data 
Remarks 
C++ 
WMX3APIFUNC 
GetMAnalogDataShortE 
x(unsigned int addr, 
short *pAnalogData);
-----------------------------------------------------------------------------------
567. Instruction: Get the value of input analog data spanning four bytes.
A: GetInAnalogDataIntEx(addr)
B: GetAnalogDataIntFromAddress(addr)
C: GetInAnalogDataInt(addr)
D: GetInAnalogDataIntEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
567. Model's answer: A
567. Correct answer: C
567. Result: Wrong



Processing Question 568:
568. Context:
 Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
◆GetInAnalogDataInt() 

WMX3APIFUNC 
GetInAnalogDataInt ( int 
WMX3APIFUNC 
GetInAnalogDataInt ( int 
addr, 
int * pAnalogData 
) 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to an int that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time (for 
example, if a communication interrupt occurs), partially updated data may be read. 

◆GetInAnalogDataUInt()
-----------------------------------------------------------------------------------
568. Instruction: Get the value of input analog data spanning four bytes.
A: GetAnalogDataUInt(addr, channel)
B: GetInAnalogDataUInt(addr)
C: GetOutAnalogDataShort(addr)
D: GetInAnalogDataUIntEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
568. Model's answer: B
568. Correct answer: B
568. Result: Correct



Processing Question 569:
569. Context:
 ◆GetOutBit() 

WMX3APIFUNC 
GetOutBit ( 
) 
WMX3APIFUNC 
GetOutBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an output bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
◆ 
GetOutByte() 

WMX3APIFUNC 
GetOutByte ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetOutBytes() 
WMX3APIFUNC 
GetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBitMaskBits function multiple times, 
but can be faster due to the reduced overhead. There is no limit to the number of 
bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first 
output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, 
and so on. The bits can be specified in any order. 

◆GetInBit() 

WMX3APIFUNC 
GetInBit ( 
) 
WMX3APIFUNC 
GetInBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInByte()
--------------------------------------------
The default value for all bitmasks is enabled(1). 

◆GetOutBitMaskBit() 

WMX3APIFUNC 
GetOutBitMaskBit ( 
) 
WMX3APIFUNC 
GetOutBitMaskBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the bitmask of an output bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 

◆GetOutBitMaskByte() 
WMX3APIFUNC 
GetOutBitMaskByte ( int 
addr, 
unsigned char * pData 
) 
Get the bitmask of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetOutBitMaskBytes() 
WMX3APIFUNC 
GetOutBitMaskBytes ( int 
int 
addr, 
size, 
unsigned char * pData 
) 
Get the bitmask of multiple output bytes.
--------------------------------------------
WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More... 


WMX3APIFUNC GetOutBitMaskByte (int addr, unsigned 

char *pData) 

Get the bitmask of an output byte. 

More... 

WMX3APIFUNC GetOutBitMaskBytes (int addr, int size, 
unsigned char *pData) 

Get the bitmask of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitEx (int addr, int bit, unsigned 
char data) 
Set the value of an output bit. More... 
WMX3APIFUNC SetOutByteEx (int addr, unsigned char 
data) 
Set the value of an output byte. More... 

WMX3APIFUNC SetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitsEx (int *pAddr, int *pBit, 

unsigned char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More...
-----------------------------------------------------------------------------------
569. Instruction: Get the value of an output bit.
A: GetVersion()
B: ExtractBit(addr, bit)
C: GetOutBit(addr, bit)
D: GetInBit(addr, bit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
569. Model's answer: C
569. Correct answer: C
569. Result: Correct



Processing Question 570:
570. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId) 

Get the ID of the interrupt (cyclic handler) 
that will set the initial value of the 
specified output byte. More... 

WMX3APIFUNC GetInitialOutBytesInterruptId (int addr, 
int size, unsigned char *pInterruptId) 

Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions
--------------------------------------------
GetOutByte No 
This function reads one 
byte from the output 
address space. 
GetOutBytes 
This function reads 
multiple bytes from the 
output address space. 
GetOutAnalogDataChar 
This function reads one 
byte from the output 
address space as a 
signed integer. 
GetOutAnalogDataUChar 
No 
This function reads one 
byte from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataShort 
Yes 
This function reads two 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUShort 
This function reads two 
bytes from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataInt 
This function reads four 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUInt 
This function reads four 
bytes from the output 
address space as an 
unsigned integer. 
GetOutBitEx 
This function reads one 
bit from the output 
address space. 
GetOutByteEx No 
This function reads one 
byte from the output
-----------------------------------------------------------------------------------
570. Instruction: Get the value of an output byte.
A: RetrieveByteFromAddress(address)
B: GetInitialOutByteInterruptId(addr)
C: GetOutBytes(addr, size)
D: GetOutByte(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
570. Model's answer: D
570. Correct answer: D
570. Result: Correct



Processing Question 571:
571. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆ 
GetOutBytesEx() 

WMX3APIFUNC 
GetOutBytesEx ( 
) 
WMX3APIFUNC 
GetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx()
--------------------------------------------
Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUInt (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitMaskMode (bool *pEnable) 
Get the bitmask mode of output. More... 

WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
-----------------------------------------------------------------------------------
571. Instruction: Get the value of multiple output bytes.
A: GetOutBytesEx(addr, size)
B: GetOutAnalogDataUCharEx(addr)
C: GetOutBytes(addr, size)
D: GetOutputData(destination_addr, data_size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
571. Model's answer: A
571. Correct answer: C
571. Result: Wrong



Processing Question 572:
572. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
--------------------------------------------
Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUInt (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitMaskMode (bool *pEnable) 
Get the bitmask mode of output. More... 

WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More...
--------------------------------------------
Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx() 

WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUCharEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte.
-----------------------------------------------------------------------------------
572. Instruction: Get the value of output analog data spanning one byte.
A: GetAnalogDataCharOut(address)
B: GetOutAnalogDataChar(addr)
C: GetInAnalogDataChar(addr)
D: GetInAnalogDataChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
572. Model's answer: B
572. Correct answer: B
572. Result: Correct



Processing Question 573:
573. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
--------------------------------------------
Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx() 

WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUCharEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte.
--------------------------------------------
Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUInt (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitMaskMode (bool *pEnable) 
Get the bitmask mode of output. More... 

WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More...
-----------------------------------------------------------------------------------
573. Instruction: Get the value of output analog data spanning one byte.
A: GetOutAnalogDataUChar(addr)
B: SetOutAnalogDataUCharEx(addr, analogData)
C: GetMAnalogDataUChar(addr)
D: GetAnalogDataUChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
573. Model's answer: A
573. Correct answer: A
573. Result: Correct



Processing Question 574:
574. Context:
 WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as an 
unsigned char type analog data value. 

◆GetOutAnalogDataShort() 

WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the output address space and returns the data as a 
short type analog data value.
-----------------------------------------------------------------------------------
574. Instruction: Get the value of output analog data spanning two bytes.
A: GetInAnalogDataUShort(addr)
B: GetAnalogDataOutShort(addr)
C: GetOutAnalogDataShort(addr)
D: GetOutAnalogDataShortEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
574. Model's answer: C
574. Correct answer: C
574. Result: Correct



Processing Question 575:
575. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as an 
unsigned char type analog data value. 

◆GetOutAnalogDataShort() 

WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
WMX3APIFUNC 
GetOutAnalogDataS 
hort ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the output address space and returns the data as a 
short type analog data value.
-----------------------------------------------------------------------------------
575. Instruction: Get the value of output analog data spanning two bytes.
A: GetOutByte(addr)
B: GetAnalogDataUShort(addr)
C: GetOutAnalogDataShortEx(addr)
D: GetOutAnalogDataUShort(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
575. Model's answer: C
575. Correct answer: D
575. Result: Wrong



Processing Question 576:
576. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetOutAnalogDataInt() 

WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value.
--------------------------------------------
Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShort (int addr, short 
*pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUInt (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitMaskMode (bool *pEnable) 
Get the bitmask mode of output. More... 

WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More...
-----------------------------------------------------------------------------------
576. Instruction: Get the value of output analog data spanning four bytes.
A: GetOutAnalogDataIntEx(addr)
B: GetAnalogDataInt(addr)
C: SetOutputData(moduleId, data, dataSize)
D: GetOutAnalogDataInt(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
576. Model's answer: A
576. Correct answer: D
576. Result: Wrong



Processing Question 577:
577. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
577. Instruction: Get the value of output analog data spanning four bytes.
A: GetAnalogDataUInt(addr, channelId)
B: GetMAnalogDataUInt(addr)
C: GetInAnalogDataUShortEx(addr)
D: GetOutAnalogDataUInt(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
577. Model's answer: D
577. Correct answer: D
577. Result: Correct



Processing Question 578:
578. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBit(int addr, int 
bit, unsigned char data); 
Python 
def SetOutBit(addr, bit, 
data) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutByte(int addr, 
unsigned char data); 
Python 
def SetOutByte(addr, 
data) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBytes(int addr, int 
size, unsigned char 
*pData); 
Python 
def SetOutBytes(addr, 
size, pData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBits(int *pAddr, 
int *pBit, unsigned char 
*pData, int count); 
def SetOutBits(pByte,
--------------------------------------------
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutAnalogDataIntEx( 
int addr, int analogData); 
Python 
def 
SetOutAnalogDataIntEx(a 
ddr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutAnalogDataUIntE 
x(int addr, unsigned int 
analogData); 
Python 
def 
SetOutAnalogDataUIntEx( 
addr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetInBitEx(int addr, int 
bit, unsigned char 
*pData); 
Python def GetInBitEx(addr, bit) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -data 
Remarks 
WMX3APIFUNC
--------------------------------------------
◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks
-----------------------------------------------------------------------------------
578. Instruction: Set the value of an output bit.
A: SetOutBit(addr: int, bit_pos: int, value: bool)
B: SetOutBitEx(addr, bit, data)
C: GetInAnalogDataUIntEx(addr)
D: SetOutBit(addr, bit, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
578. Model's answer: D
578. Correct answer: B
578. Result: Wrong



Processing Question 579:
579. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks
--------------------------------------------
WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
This function has a faster response time compared to SetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutByteEx() 

WMX3APIFUNC 
SetOutByteEx ( 
) 
WMX3APIFUNC 
SetOutByteEx ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes.
-----------------------------------------------------------------------------------
579. Instruction: Set the value of an output byte.
A: SetOutputData(address, value)
B: GetInputData(buff, buffSize, dataSize)
C: SetOutBitEx(addr, bit, data)
D: SetOutByteEx(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
579. Model's answer: D
579. Correct answer: D
579. Result: Correct



Processing Question 580:
580. Context:
 WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBitsEx() 
WMX3APIFUNC 
SetOutBitsEx ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the value of multiple output bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks
--------------------------------------------
This function has a faster response time compared to SetOutBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutByteEx() 

WMX3APIFUNC 
SetOutByteEx ( 
) 
WMX3APIFUNC 
SetOutByteEx ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes.
--------------------------------------------
Function unsigned char data); 
Python 
def SetOutByteEx(addr, 
data) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBytesEx(int addr, 
int size, unsigned char 
*pData); 
Python 
def SetOutBytesEx(addr, 
size, pData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutBitsEx(int *pAddr, 
int *pBit, unsigned char 
*pData, int count); 
Python 
def SetOutBitsEx(pByte, 
pBit, pData, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetOutAnalogDataCharE 
x(int addr, char 
analogData); 
Python 
def 
SetOutAnalogDataCharEx 
(addr, analogData) 
Type int
-----------------------------------------------------------------------------------
580. Instruction: Set the value of multiple output bytes.
A: SetOutBytesEx(addr, size, pData)
B: GetInitialOutByte(addr)
C: SetOutputBytesExtended(address, byte_size, data_buffer)
D: GetOutBytesEx(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
580. Model's answer: A
580. Correct answer: A
580. Result: Correct



Processing Question 581:
581. Context:
 ◆SetOutBytesEx() 

WMX3APIFUNC 
SetOutBytesEx ( 
) 
WMX3APIFUNC 
SetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutBitsEx() 
WMX3APIFUNC 
SetOutBitsEx ( int * pAddr, 
int * pBit, 
unsigned char * pData, 
int count 

) ) 
Set the value of multiple output bits. 

Parameters 
[in] 
pAddr 

[in] 
pBit 

[in] 
pData 

[in] 
count 

Remarks
--------------------------------------------
◆SetOutBit() 

WMX3APIFUNC 
SetOutBit ( 
WMX3APIFUNC 
SetOutBit ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
[in] 
[in] 
addr 
bit 
data 
The byte address of the 
bit to set. 
The bit address of the bit 
to set. 
The value to set the bit 
to. 

◆SetOutByte() 
WMX3APIFUNC 
SetOutByte ( 
) 
int 
addr, 
unsigned char data 
Set the value of an output byte. 
Parameters 
[in] 
[in] 
addr 
data 
The address of the byte 
to set. 
The value to set the byte 
to. 

◆ 
SetOutBytes() 

WMX3APIFUNC 
SetOutBytes ( 
) 
WMX3APIFUNC 
SetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Set the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks
--------------------------------------------
WMX3APIFUNC SetOutBytes (int addr, int size, unsigned 

char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBits (int *pAddr, int *pBit, unsigned 

char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataChar (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShort (int addr, short 
analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataInt (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
-----------------------------------------------------------------------------------
581. Instruction: Set the value of multiple output bits.
A: SetOutBits(pByteData, startingBitIndex, newData, numberOfBits)
B: SetMBitsEx(pByte, pBit, pData, count)
C: SetOutByte(addr, data)
D: SetOutBitsEx(pByte, pBit, pData, count)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
581. Model's answer: D
581. Correct answer: D
581. Result: Correct



Processing Question 582:
582. Context:
 This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
-----------------------------------------------------------------------------------
582. Instruction: Set the value of output analog data spanning one byte.
A: SetOutAnalogDataCharEx(addr, analogData)
B: SetOutAnalogDataUChar(addr, analogData)
C: SetAnalogDataCharEx(addr, newData)
D: GetInputModuleId()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
582. Model's answer: A
582. Correct answer: A
582. Result: Correct



Processing Question 583:
583. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes.
-----------------------------------------------------------------------------------
583. Instruction: Set the value of output analog data spanning one byte.
A: SetOutAnalogDataIntEx(addr, analogData)
B: SetOutAnalogDataFloatEx(addr, analogData)
C: SetOutAnalogDataCharEx(addr, analogData)
D: SetOutAnalogDataUCharEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
583. Model's answer: C or D
583. Correct answer: D
583. Result: Correct



Processing Question 584:
584. Context:
 WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes.
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified unsigned 
short type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataIntEx() 

WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int analogData 
Set the value of output analog data spanning four bytes.
-----------------------------------------------------------------------------------
584. Instruction: Set the value of output analog data spanning two bytes.
A: SetOutAnalogDataShort(addr, analogData)
B: SetAnalogDataShortEx(addr, newData)
C: GetOutAnalogDataCharEx(addr)
D: SetOutAnalogDataShortEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
584. Model's answer: D
584. Correct answer: D
584. Result: Correct



Processing Question 585:
585. Context:
 Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified unsigned 
char type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataShortEx() 

WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes.
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified short type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUShortEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of output analog data spanning two bytes.
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets two bytes of the output address space to the specified unsigned 
short type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataIntEx() 

WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int analogData 
Set the value of output analog data spanning four bytes.
-----------------------------------------------------------------------------------
585. Instruction: Set the value of output analog data spanning two bytes.
A: SetOutAnalogDataUShortEx(addr, analogData)
B: SetOutAnalogDataUShort(addr, analogData)
C: GetOutAnalogDataUIntEx(addr)
D: SetOutAnalogDataShort(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
585. Model's answer: A
585. Correct answer: A
585. Result: Correct



Processing Question 586:
586. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
--------------------------------------------
This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
-----------------------------------------------------------------------------------
586. Instruction: Set the value of output analog data spanning four bytes.
A: SetOutAnalogDataUChar(addr, analogData)
B: SetAnalogDataOutput(addr, analogData)
C: SetOutAnalogDataIntEx(addr, analogData)
D: SetMAnalogDataUIntEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
586. Model's answer: C
586. Correct answer: C
586. Result: Correct



Processing Question 587:
587. Context:
 Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBit function multiple times, but can 
be faster due to the reduced overhead. There is no limit to the number of bits that 
may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first output bit 
to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, and so 
on. The bits can be specified in any order. 

◆ 
SetOutAnalogDataChar() 

WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
SetOutAnalogDataC 
har ( 
) 
int 
addr, 
char analogData 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

◆SetOutAnalogDataUChar()
-----------------------------------------------------------------------------------
587. Instruction: Set the value of output analog data spanning four bytes.
A: SetOutputAnalogDataUInt(addr, analogData)
B: SetOutAnalogDataUIntEx(addr, analogData)
C: SetOutAnalogDataUInt(addr, analogData)
D: GetOutAnalogDataChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
587. Model's answer: B
587. Correct answer: B
587. Result: Correct



Processing Question 588:
588. Context:
 WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified unsigned 
int type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetInBitEx() 

WMX3APIFUNC 
GetInBitEx ( 
) 
WMX3APIFUNC 
GetInBitEx ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
588. Instruction: Get the value of an input bit.
A: GetMBitEx(addr, bit)
B: GetInAnalogDataShortEx(addr)
C: GetBitValueAtAddress(address, position)
D: GetInBitEx(addr, bit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
588. Model's answer: D
588. Correct answer: D
588. Result: Correct



Processing Question 589:
589. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
-----------------------------------------------------------------------------------
589. Instruction: Get the value of an input byte.
A: GetMByteEx(addr)
B: SetOutAnalogDataUShortEx(addr, analogData)
C: FetchByteAt(addr)
D: GetInByteEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
589. Model's answer: D
589. Correct answer: D
589. Result: Correct



Processing Question 590:
590. Context:
 Function C++ 
Python 
Type 
GetInByteEx(int addr, 
unsigned char *pData); 
def GetInByteEx(addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInBytesEx(int addr, 
int size,unsigned char 
*pData); 
def GetInBytesEx(addr, 
size) 
tuple 
Returns 
Value 
0 : int -error code 
1 : list(int) -data 
Remarks 
Function 
C++ 
Python 
Type 
WMX3APIFUNC 
GetInAnalogDataCharEx 
(int addr, char 
*pAnalogData); 
def 
GetInAnalogDataCharEx( 
addr) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks
--------------------------------------------
GetMBytesEx 
Yes 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataCharEx 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUCharEx 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShortEx 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShortEx 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataIntEx 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUIntEx 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 

 

Expedited User Memory Functions
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInBytesEx() 

WMX3APIFUNC 
GetInBytesEx ( 
) 
WMX3APIFUNC 
GetInBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple input bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetInBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx()
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
-----------------------------------------------------------------------------------
590. Instruction: Get the value of multiple input bytes.
A: GetMemoryChunkEx(addr, length)
B: GetInBytesEx(addr, size)
C: GetInBytes(addr, size)
D: GetInAnalogDataChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
590. Model's answer: B
590. Correct answer: B
590. Result: Correct



Processing Question 591:
591. Context:
 WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataCharEx() 

WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataCh 
arEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of input analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the input address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetInAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUCharEx()
-----------------------------------------------------------------------------------
591. Instruction: Get the value of input analog data spanning one byte.
A: GetMAnalogDataUCharEx(addr)
B: RetrieveAnalogInputDataExtended(address)
C: GetInAnalogDataCharEx(addr)
D: SetOutByte(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
591. Model's answer: C
591. Correct answer: C
591. Result: Correct



Processing Question 592:
592. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
-----------------------------------------------------------------------------------
592. Instruction: Get the value of input analog data spanning one byte.
A: SetInitialOutByte(addr, data, enable)
B: GetMAnalogDataCharEx(addr)
C: GetInAnalogDataUCharEx(addr)
D: GetAnalogDataUChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
592. Model's answer: C
592. Correct answer: C
592. Result: Correct



Processing Question 593:
593. Context:
 Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
593. Instruction: Get the value of input analog data spanning two bytes
A: GetMAnalogDataUShortEx(addr)
B: GetShortAnalogDataEx(addr)
C: GetInAnalogDataShortEx(addr)
D: SetOutBytesEx(addr, size, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
593. Model's answer: C
593. Correct answer: C
593. Result: Correct



Processing Question 594:
594. Context:
 Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataShortEx() 

WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataSh 
ortEx ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as a 
short type analog data value. 

This function has a faster response time compared to GetInAnalogDataShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUShortEx()
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataUShortEx() 

WMX3APIFUNC 
GetInAnalogDataUS 
hortEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataUS 
hortEx ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of input analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the input address space and returns the data as an 
unsigned short type analog data value. 

This function has a faster response time compared to GetInAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataIntEx()
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
594. Instruction: Get the value of input analog data spanning two bytes.
A: GetInAnalogDataUShortEx(addr)
B: GetInAnalogDataUShortEx(address)
C: GetInAnalogDataShortEx(addr)
D: GetInAnalogDataUIntEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
594. Model's answer: A
594. Correct answer: A
594. Result: Correct



Processing Question 595:
595. Context:
 WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataIntEx() 

WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function has a faster response time compared to GetInAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataUIntEx()
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataUIntEx() 

WMX3APIFUNC 
GetInAnalogDataUIn 
tEx ( 
) 
WMX3APIFUNC 
GetInAnalogDataUIn 
tEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
unsigned int type analog data value. 

This function has a faster response time compared to GetInAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetOutBitEx()
-----------------------------------------------------------------------------------
595. Instruction: Get the value of input analog data spanning four bytes.
A: GetInAnalogDataIntEx(addr)
B: GetInAnalogDataUIntEx(addr)
C: GetAnalogInputDataIntEx(address)
D: GetOutByte(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
595. Model's answer: A or B
595. Correct answer: A
595. Result: Correct



Processing Question 596:
596. Context:
 WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInAnalogDataIntEx() 

WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
WMX3APIFUNC 
GetInAnalogDataInt 
Ex ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of input analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the input address space and returns the data as an 
int type analog data value. 

This function has a faster response time compared to GetInAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆ 
GetInAnalogDataUIntEx()
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
596. Instruction: Get the value of input analog data spanning four bytes.
A: GetInAnalogDataUIntEx(addr)
B: GetMAnalogDataIntEx(addr)
C: SetOutAnalogDataShort(addr, analogData)
D: GetPositionAnalogDataInt(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
596. Model's answer: A
596. Correct answer: A
596. Result: Correct



Processing Question 597:
597. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataUI 
ntEx ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 
Remarks 

This function sets four bytes of the output address space to the specified unsigned 
int type analog data value. 

This function has a faster response time compared to SetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetInBitEx() 

WMX3APIFUNC 
GetInBitEx ( 
) 
WMX3APIFUNC 
GetInBitEx ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC SetOutAnalogDataShortEx (int addr, 
short analogData) 

Set the value of output analog data 
spanning two bytes. More... 


WMX3APIFUNC SetOutAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC SetOutAnalogDataIntEx (int addr, int 
analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More...
-----------------------------------------------------------------------------------
597. Instruction: Get the value of an output bit.
A: SetOutAnalogDataShortEx(addr, analogData)
B: SetOutBitEx(addr, bit, data)
C: GetOutBitEx(addr, bit)
D: GetBitExtraction(addr, bit_position)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
597. Model's answer: C
597. Correct answer: C
597. Result: Correct



Processing Question 598:
598. Context:
 ◆GetOutBit() 

WMX3APIFUNC 
GetOutBit ( 
) 
WMX3APIFUNC 
GetOutBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an output bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
◆ 
GetOutByte() 

WMX3APIFUNC 
GetOutByte ( 
) 
int 
addr, 
unsigned char * pData 
Get the value of an output byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetOutBytes() 
WMX3APIFUNC 
GetOutBytes ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks
--------------------------------------------
WMX3APIFUNC GetOutBitMaskBit (int addr, int bit, 

unsigned char *pData) 

Get the bitmask of an output bit. More... 


WMX3APIFUNC GetOutBitMaskByte (int addr, unsigned 

char *pData) 

Get the bitmask of an output byte. 

More... 

WMX3APIFUNC GetOutBitMaskBytes (int addr, int size, 
unsigned char *pData) 

Get the bitmask of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitEx (int addr, int bit, unsigned 
char data) 
Set the value of an output bit. More... 
WMX3APIFUNC SetOutByteEx (int addr, unsigned char 
data) 
Set the value of an output byte. More... 

WMX3APIFUNC SetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Set the value of multiple output bytes. 

More... 

WMX3APIFUNC SetOutBitsEx (int *pAddr, int *pBit, 

unsigned char *pData, int count) 

Set the value of multiple output bits. 

More... 

WMX3APIFUNC SetOutAnalogDataCharEx (int addr, char 
analogData) 

Set the value of output analog data 
spanning one byte. More...
--------------------------------------------
◆GetOutBitMaskBytes() 
WMX3APIFUNC 
GetOutBitMaskBytes ( int 
int 
addr, 
size, 
unsigned char * pData 
) 
Get the bitmask of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆SetOutBitEx() 

WMX3APIFUNC 
SetOutBitEx ( 
WMX3APIFUNC 
SetOutBitEx ( 
int 
int 
addr, 
bit, 
unsigned char data 
) 
Set the value of an output bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 
Remarks 

This function has a faster response time compared to SetOutBit.
--------------------------------------------
GetOutByte No 
This function reads one 
byte from the output 
address space. 
GetOutBytes 
This function reads 
multiple bytes from the 
output address space. 
GetOutAnalogDataChar 
This function reads one 
byte from the output 
address space as a 
signed integer. 
GetOutAnalogDataUChar 
No 
This function reads one 
byte from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataShort 
Yes 
This function reads two 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUShort 
This function reads two 
bytes from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataInt 
This function reads four 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUInt 
This function reads four 
bytes from the output 
address space as an 
unsigned integer. 
GetOutBitEx 
This function reads one 
bit from the output 
address space. 
GetOutByteEx No 
This function reads one 
byte from the output
-----------------------------------------------------------------------------------
598. Instruction: Get the value of an output byte.
A: GetOutByteEx(addr)
B: SetOutBitEx(addr, bit, data)
C: GetOutputByte(addr):
D: GetOutBytesEx(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
598. Model's answer: A
598. Correct answer: A
598. Result: Correct



Processing Question 599:
599. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetOutByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆ 
GetOutBytesEx() 

WMX3APIFUNC 
GetOutBytesEx ( 
) 
WMX3APIFUNC 
GetOutBytesEx ( 
) 
int 
int 
addr, 
size, 
unsigned char * pData 
Get the value of multiple output bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 
Remarks 

This function has a faster response time compared to GetOutBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx()
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
-----------------------------------------------------------------------------------
599. Instruction: Get the value of multiple output bytes.
A: GetOutBytesEx(addr, size)
B: GetOutputData(addr_ptr, num_elements)
C: GetInAnalogDataUIntEx(addr)
D: GetMBytes(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
599. Model's answer: A
599. Correct answer: A
599. Result: Correct



Processing Question 600:
600. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx() 

WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUCharEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte.
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetOutAnalogDataChar() 

WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
har ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

◆GetOutAnalogDataUChar() 

WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
Char ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data.
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
-----------------------------------------------------------------------------------
600. Instruction: Get the value of output analog data spanning one byte.
A: GetAnalogDataCharFromAddressEx(address)
B: GetOutByte(addr)
C: GetInAnalogDataCharEx(addr)
D: GetOutAnalogDataCharEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
600. Model's answer: D
600. Correct answer: D
600. Result: Correct



Processing Question 601:
601. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataCharEx() 

WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataC 
harEx ( 
) 
int 
addr, 
char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as a 
char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUCharEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte.
--------------------------------------------
This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
-----------------------------------------------------------------------------------
601. Instruction: Get the value of output analog data spanning one byte.
A: GetAnalogDataUChar(address)
B: SetOutAnalogDataUCharEx(addr, analogData)
C: GetMAnalogDataUCharEx(addr)
D: GetOutAnalogDataUCharEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
601. Model's answer: D
601. Correct answer: D
601. Result: Correct



Processing Question 602:
602. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataIntEx() 

WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes.
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char * pAnalogData 
Get the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the output address space and returns the data as an 
unsigned char type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataShortEx() 

WMX3APIFUNC 
GetOutAnalogDataS 
hortEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataS 
hortEx ( 
) 
int 
addr, 
short * pAnalogData 
Get the value of output analog data spanning two bytes.
-----------------------------------------------------------------------------------
602. Instruction: Get the value of output analog data spanning two bytes.
A: GetOutAnalogDataShortEx(addr)
B: IsDeviceValid()
C: GetOutAnalogDataUShortEx(addr)
D: GetAnalogDataShortEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
602. Model's answer: A
602. Correct answer: A
602. Result: Correct



Processing Question 603:
603. Context:
 Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC GetInAnalogDataUShort (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataInt (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUInt (int addr, unsigned 
int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBit (int addr, int bit, unsigned char 

*pData) 

Get the value of an output bit. More... 

WMX3APIFUNC GetOutByte (int addr, unsigned char 
*pData) 


Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytes (int addr, int size, unsigned 

char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataChar (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUChar (int addr, 
unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
-----------------------------------------------------------------------------------
603. Instruction: Get the value of output analog data spanning two bytes.
A: GetOutAnalogDataUShortEx(addr)
B: GetInAnalogDataUShortEx(addr)
C: GetOutBitEx(addr, bit)
D: GetOutAnalogDataUShortEx(address)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
603. Model's answer: A
603. Correct answer: A
603. Result: Correct



Processing Question 604:
604. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetOutAnalogDataInt() 

WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
t ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value.
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
ShortEx ( 
) 
int 
addr, 
unsigned short * pAnalogData 
Get the value of output analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads two bytes of the output address space and returns the data as 
an unsigned short type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataIntEx() 

WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes.
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUIntEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes.
-----------------------------------------------------------------------------------
604. Instruction: Get the value of output analog data spanning four bytes.
A: GetOutAnalogDataInt(addr)
B: GetAnalogDataIntEx(addr)
C: GetOutAnalogDataIntEx(addr)
D: GetOutAnalogDataShortEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
604. Model's answer: C
604. Correct answer: C
604. Result: Correct



Processing Question 605:
605. Context:
 Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataIn 
tEx ( 
) 
int 
addr, 
int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the output address space and returns the data as 
an int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetOutAnalogDataUIntEx() 

WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes.
-----------------------------------------------------------------------------------
605. Instruction: Get the value of output analog data spanning four bytes.
A: GetOutAnalogDataUIntEx(addr)
B: GetOutAnalogDataUInt(addr)
C: SetOutBitEx(addr, bit, data)
D: GetOutAnalogDataUInt(addr, options)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
605. Model's answer: A
605. Correct answer: A
605. Result: Correct



Processing Question 606:
606. Context:
 Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads four bytes of the output address space and returns the data as 
an unsigned int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetInitialOutByte() 

WMX3APIFUNC 
SetInitialOutByte ( 
WMX3APIFUNC 
SetInitialOutByte ( 
int 
addr, 
unsigned char data, 
unsigned char enable 
) 
Set the initial value of an output byte that is applied when communication is started.
--------------------------------------------
Value 1 : int -data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetInitialOutByte(int 
addr, unsigned char 
data, unsigned char 
enable); 
Python 
def SetInitialOutByte(addr, 
data, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetInitialOutBytes(int 
addr, int size, unsigned 
char *pData, unsigned 
char *pEnable); 
Python 
def 
SetInitialOutBytes(addr, 
size, pData, pEnable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetInitialOutByte(int 
addr, unsigned char 
*pData, unsigned char 
*pEnable); 
Python 
def 
GetInitialOutByte(addr) 
Type tuple
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
-----------------------------------------------------------------------------------
606. Instruction: Set the initial value of an output byte that is applied when communication is started.
A: GetInAnalogDataChar(addr)
B: SetInitialOutByte(addr, data, enable)
C: GetInitialOutBytes(addr, size)
D: SetInitialOutputByte(address, value, isEnabled)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
606. Model's answer: B
606. Correct answer: B
606. Result: Correct



Processing Question 607:
607. Context:
 Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
WMX3APIFUNC 
GetOutAnalogDataU 
IntEx ( 
) 
int 
addr, 
unsigned int * pAnalogData 
Get the value of output analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads four bytes of the output address space and returns the data as 
an unsigned int type analog data value. 

This function has a faster response time compared to GetOutAnalogDataUInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetInitialOutByte() 

WMX3APIFUNC 
SetInitialOutByte ( 
WMX3APIFUNC 
SetInitialOutByte ( 
int 
addr, 
unsigned char data, 
unsigned char enable 
) 
Set the initial value of an output byte that is applied when communication is started.
--------------------------------------------
Value 1 : int -data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetInitialOutByte(int 
addr, unsigned char 
data, unsigned char 
enable); 
Python 
def SetInitialOutByte(addr, 
data, enable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetInitialOutBytes(int 
addr, int size, unsigned 
char *pData, unsigned 
char *pEnable); 
Python 
def 
SetInitialOutBytes(addr, 
size, pData, pEnable) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetInitialOutByte(int 
addr, unsigned char 
*pData, unsigned char 
*pEnable); 
Python 
def 
GetInitialOutByte(addr) 
Type tuple
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
-----------------------------------------------------------------------------------
607. Instruction: Set the initial values of multiple output bytes that are applied when communication is started.
A: SetInitialOutByte(addr, data, enable)
B: SetInitialOutboundData(addr, size, dataBuffer, enableFlag)
C: GetInAnalogDataUCharEx(addr)
D: SetInitialOutBytes(addr, size, pData, pEnable)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
607. Model's answer: D
607. Correct answer: D
607. Result: Correct



Processing Question 608:
608. Context:
 Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
Yes 
address space. 
GetOutBytesEx 
This function reads 
multiple bytes from the 
output address space. 
GetOutAnalogDataCharEx 
Yes 
This function reads one 
byte from the output 
address space as a 
signed integer. 
GetOutAnalogDataUCharE 
x 
This function reads one 
byte from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataShortEx 
This function reads two 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUShort 
Ex 
This function reads two 
bytes from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataIntEx 
This function reads four 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUIntEx 
This function reads four 
bytes from the output 
address space as an 
unsigned integer. 

 

Initial Output 

The initial output is the initial value that is contained in the output address space when 
communication is started.
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
◆GetInitialOutByte() 
WMX3APIFUNC 
GetInitialOutByte ( 
int 
addr, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial value of an output byte that is applied when communication is started. 

Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 
[out] 
pEnable A pointer to a unsigned 
char that will contain 1 if 
the initial value is set for 
the specified output byte, 
and 0 otherwise. 

Remarks 

This function gets the initial value of an output byte. The initial value is the value that 
the output byte is set to whenever communication with the servo network is started 
using the StartCommunication API function. 


◆GetInitialOutBytes() 
WMX3APIFUNC 
GetInitialOutBytes ( 
int 
int 
addr, 
size, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial values of multiple output bytes that are applied when communication
-----------------------------------------------------------------------------------
608. Instruction: Set the initial values of multiple output bytes that are applied when communication is started.
A: FetchInitialOutputByte(address)
B: GetInitialOutBytes(addr, size)
C: GetInitialOutByte(addr)
D: GetOutByteEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
608. Model's answer: B
608. Correct answer: C
608. Result: Wrong



Processing Question 609:
609. Context:
 Yes 
address space. 
GetOutBytesEx 
This function reads 
multiple bytes from the 
output address space. 
GetOutAnalogDataCharEx 
Yes 
This function reads one 
byte from the output 
address space as a 
signed integer. 
GetOutAnalogDataUCharE 
x 
This function reads one 
byte from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataShortEx 
This function reads two 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUShort 
Ex 
This function reads two 
bytes from the output 
address space as an 
unsigned integer. 
GetOutAnalogDataIntEx 
This function reads four 
bytes from the output 
address space as a 
signed integer. 
GetOutAnalogDataUIntEx 
This function reads four 
bytes from the output 
address space as an 
unsigned integer. 

 

Initial Output 

The initial output is the initial value that is contained in the output address space when 
communication is started.
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
--------------------------------------------
Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
◆GetInitialOutByte() 
WMX3APIFUNC 
GetInitialOutByte ( 
int 
addr, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial value of an output byte that is applied when communication is started. 

Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 
[out] 
pEnable A pointer to a unsigned 
char that will contain 1 if 
the initial value is set for 
the specified output byte, 
and 0 otherwise. 

Remarks 

This function gets the initial value of an output byte. The initial value is the value that 
the output byte is set to whenever communication with the servo network is started 
using the StartCommunication API function. 


◆GetInitialOutBytes() 
WMX3APIFUNC 
GetInitialOutBytes ( 
int 
int 
addr, 
size, 
unsigned char * pData, 
unsigned char * pEnable 
) 
Get the initial values of multiple output bytes that are applied when communication
-----------------------------------------------------------------------------------
609. Instruction: Get the initial values of multiple output bytes that are applied when communication is started.
A: GetOutBytesEx(addr, size)
B: GetOutBytesEx(addr, size)
C: GetInitialOutBytes(addr, size)
D: FetchInitialOutBytes(address, byte_count)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
609. Model's answer: C
609. Correct answer: C
609. Result: Correct



Processing Question 610:
610. Context:
 WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId) 

Get the ID of the interrupt (cyclic handler) 
that will set the initial value of the 
specified output byte. More... 

WMX3APIFUNC GetInitialOutBytesInterruptId (int addr, 
int size, unsigned char *pInterruptId) 

Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions
--------------------------------------------
◆GetInitialOutByteInterruptId() 
WMX3APIFUNC 
GetInitialOutByteInte 
rruptId ( 
) 
int 
addr, 
unsigned char * pInterruptId 
Get the ID of the interrupt (cyclic handler) that will set the initial value of the 
specified output byte. 

Parameters 
[in] 
addr The address of the 
output byte to check. 
[out] 
pInterruptId A pointer to an unsigned 
char that will contain the 
ID of the interrupt that 
will set the initial value of 
the specified output byte. 

Remarks 

This function gets the ID of the interrupt (cyclic handler) that will set the initial value 
of the specified output byte. The specified output byte will be set to the configured 
value (if any) when communication is started for this interrupt. 

◆GetInitialOutBytesInterruptId() 

WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
int 
int 
addr, 
size, 
unsigned char * pInterruptId 
) 
Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the
--------------------------------------------
Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
--------------------------------------------
Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of output analog data 
spanning one byte. More... 

WMX3APIFUNC GetOutAnalogDataShortEx (int addr, 

short *pAnalogData) 

Get the value of output analog data 


spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of output analog data 
spanning two bytes. More... 

WMX3APIFUNC GetOutAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable)
-----------------------------------------------------------------------------------
610. Instruction: Get the ID of the interrupt (cyclic handler) that will set the initial value of the specified output byte.
A: GetOutAnalogDataUShort(addr)
B: GetInitialOutByte(addr)
C: GetInitialOutByteInterruptId(addr)
D: GetInitialOutputByteInterruptId(address)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
610. Model's answer: C
610. Correct answer: C
610. Result: Correct



Processing Question 611:
611. Context:
 ◆GetInitialOutByteInterruptId() 
WMX3APIFUNC 
GetInitialOutByteInte 
rruptId ( 
) 
int 
addr, 
unsigned char * pInterruptId 
Get the ID of the interrupt (cyclic handler) that will set the initial value of the 
specified output byte. 

Parameters 
[in] 
addr The address of the 
output byte to check. 
[out] 
pInterruptId A pointer to an unsigned 
char that will contain the 
ID of the interrupt that 
will set the initial value of 
the specified output byte. 

Remarks 

This function gets the ID of the interrupt (cyclic handler) that will set the initial value 
of the specified output byte. The specified output byte will be set to the configured 
value (if any) when communication is started for this interrupt. 

◆GetInitialOutBytesInterruptId() 

WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
WMX3APIFUNC 
GetInitialOutBytesInt 
erruptId ( 
int 
int 
addr, 
size, 
unsigned char * pInterruptId 
) 
Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the
--------------------------------------------
WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId) 

Get the ID of the interrupt (cyclic handler) 
that will set the initial value of the 
specified output byte. More... 

WMX3APIFUNC GetInitialOutBytesInterruptId (int addr, 
int size, unsigned char *pInterruptId) 

Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions
--------------------------------------------
Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
Get the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC SetInitialOutByte (int addr, unsigned char 
data, unsigned char enable) 

Set the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC SetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 

Set the initial values of multiple output 
bytes that are applied when 
communication is started. More... 

WMX3APIFUNC GetInitialOutByte (int addr, unsigned 
char *pData, unsigned char *pEnable) 

Get the initial value of an output byte that 
is applied when communication is 
started. More... 

WMX3APIFUNC GetInitialOutBytes (int addr, int size, 
unsigned char *pData, unsigned char 
*pEnable) 
Get the initial values of multiple output 
bytes that are applied when 
communication is started. More... 


WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId)
-----------------------------------------------------------------------------------
611. Instruction: Get the IDs of the interrupts (cyclic handlers) that will set the initial values of the specified output bytes.
A: GetInitialOutBytesInterruptId(addr, size)
B: SetOutBitsEx(pByte, pBit, pData, count)
C: GetInitialOutputBytesInterruptId(address, length)
D: GetInitialOutBytes(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
611. Model's answer: A
611. Correct answer: A
611. Result: Correct



Processing Question 612:
612. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
Python def ErrorToString(errCode) 
Returns 
Type string 
Value error string 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
ErrorToString(int 
errCode, wchar_t 
*pString, unsigned int 
size); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
ApiLogToString(unsigne 
d char *pLogData, 
unsigned int 
logDataSize, char 
*pString, unsigned int 
size); 
Python 
def 
ApiLogToString(pLogData, 
logDataSize) 
Returns 
Type string 
Value API log string 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
ApiLogToString(unsigne 
d char *pLogData, 
unsigned int 
logDataSize, wchar_t 
*pString, unsigned int
--------------------------------------------
data, dataSize) 
Returns 
Type 
Value 
int 
error code 
Remarks 
􀍩􀎄Python􀏮􀏊􀏐􀏖􀎅􀔨􅤹􀍫􀎢􀍼􀍠􀎠􀌵PythonAPI} 
􀎅􀹚􀏂􀏪􀐄􀏕􀍽􀍯6 


 



Compensation Class 

static WMX3APIFUNC 
Function 
C++ 
ErrorToString(int 
errCode, char *pString, 
unsigned int size); 
Python def ErrorToString(errCode) 
Returns 
Type 
Value 
string 
error string 
Remarks 
static WMX3APIFUNC 
Function 
C++ 
ErrorToString(int 
errCode, wchar_t 
*pString, unsigned int 
size); 
Python 
Returns 
Type 
Value 
Remarks 
static WMX3APIFUNC 
Function 
C++ 
ApiLogToString(unsigne 
d char *pLogData, 
unsigned int 
logDataSize, char 
*pString, unsigned int 
size); 
def 
Python ApiLogToString(pLogData, 
logDataSize) 
Returns 
Type 
Value 
string 
API log string
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 

Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 
Parameters 
[in] 
[in] 
[in] 
errCode 
pString 
size 
The error code to get the 
string representation of. 
A char array that will 
contain the string 
representation of the 
error. 
The size of the char 
array in number of 
characters. 
Remarks
-----------------------------------------------------------------------------------
612. Instruction: Get a string representation of the specified error code.
A: ErrorToString(errCode)
B: OpenApiLogFile(pPath)
C: ErrorToMessage(errNumber)
D: Import_SysPrm_Axis(pPath, axis, copyParamToAxes)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
612. Model's answer: A
612. Correct answer: A
612. Result: Correct



Processing Question 613:
613. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
613. Instruction: Get a string representation of the raw data of an API log.
A: SetInputData(moduleId, data, dataSize)
B: ApiLogDataToString(logDataPtr, dataSize)
C: SimulateTimeAtPos_3D(pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex)
D: ApiLogToString(pLogData, logDataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
613. Model's answer: D
613. Correct answer: D
613. Result: Correct



Processing Question 614:
614. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library.
--------------------------------------------
static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log. 

Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the char 
array. This size must be 
equal to or greater than 
the size of the raw data. 
[out] 
pString A wchar_t array that will 
contain the string 
representation of the raw 
data of the API log. 
[out] 
size The size of the pString 
wchar_t array in number 
of characters. 
Remarks 

This function is a variation of ApiLogToString that accepts a wchar_t array. Use 
this function when using Unicode character sets. 

◆GetLibVersion() 

static 
WMX3APIFUNC 
GetLibVersion ( 
static 
WMX3APIFUNC 
GetLibVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module library.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
-----------------------------------------------------------------------------------
614. Instruction: Get the version of the module library.
A: ApiLogToString(pLogData, logDataSize)
B: GetLibVersion()
C: SetMAnalogDataChar(addr, analogData)
D: GetLibraryVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
614. Model's answer: B
614. Correct answer: B
614. Result: Correct



Processing Question 615:
615. Context:
 This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
-----------------------------------------------------------------------------------
615. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetLibVersion()
B: IsDeviceValid()
C: GetEventModuleId(id)
D: IsDeviceValidated()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
615. Model's answer: B
615. Correct answer: B
615. Result: Correct



Processing Question 616:
616. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
},
    {
        "No": 5,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "ApiBuffer Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
    },
    {
        "No": 6,
        "FunctionC++": "WMX3APIFUNC GetVersion(int *pMajorVersion, int *pMinorVersion, int *pRevisionVersion, int *pFixVersion)",
        "FunctionPython": "def GetVersion()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "ApiBuffer Class",
        "Instruction": "Get the version of the module rtdll."
-----------------------------------------------------------------------------------
616. Instruction: Get the version of the module rtdll.
A: GetAppVersion()
B: GetVersion()
C: GetInAnalogDataUShortEx(addr)
D: StartLog(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
616. Model's answer: B
616. Correct answer: B
616. Result: Correct



Processing Question 617:
617. Context:
 Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
1. SetLog 
This function specifies the data to log. Each type of data that may be logged is 
associated with a module. This function must be called once for each module 


containing data to be logged. For example, if axis data from the CoreMotion 
module and I/O data from the IO module will be logged, this function must be 
called twice. By default, no log data will be collected except for the cycle counter. 

2. SetLogOption 
This function specifies the options for logging. For example, the time to collect 
log data can be specified. The default log options are listed in 
LogChannelOptions. 

3. SetLogFilePath 
This function specifies the file path to save the log file. By default, the log file will 
be saved to "C:\wmx3_logfile.txt".
--------------------------------------------
Function channel); 
Python def ResetLog(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogHeader(unsigned 
int channel, char 
**ppLine, unsigned int 
numLines); 
Python 
def 
SetLogHeader(channel, 
pLogHeader) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, unsigned int 
moduleId, void *data, 
unsigned int dataSize); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, LogInput* 
input); 
Python def SetLog(channel, input) 
Type int
-----------------------------------------------------------------------------------
617. Instruction: Start logging data.
A: ResetLog(channel)
B: InitializeLogging(channel_id):
C: StartLog(channel)
D: OpenApiLogFile(pPath)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
617. Model's answer: C
617. Correct answer: C
617. Result: Correct



Processing Question 618:
618. Context:
 Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
},
    {
        "No": 700,
        "FunctionC++": "WMX3APIFUNC SetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def SetLogOption(channel, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the log options for a log channel."
    },
    {
        "No": 701,
        "FunctionC++": "WMX3APIFUNC GetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def GetLogOption(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the log options for a log channel. "
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
SetLogOption(channel, 
pOption) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
GetLogOption(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
LogChannelOptions 
-data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogFilePath(unsigne 
d int channel, 
LogFilePathA *pPath);
-----------------------------------------------------------------------------------
618. Instruction: Stop logging data.
A: GetLogOption(channel)
B: UpdateLogChannel(channel_name)
C: StopLog(channel)
D: StopECAM(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
618. Model's answer: C
618. Correct answer: C
618. Result: Correct



Processing Question 619:
619. Context:
 Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
Function channel); 
Python def ResetLog(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogHeader(unsigned 
int channel, char 
**ppLine, unsigned int 
numLines); 
Python 
def 
SetLogHeader(channel, 
pLogHeader) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, unsigned int 
moduleId, void *data, 
unsigned int dataSize); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, LogInput* 
input); 
Python def SetLog(channel, input) 
Type int
--------------------------------------------
Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
},
    {
        "No": 696,
        "FunctionC++": "WMX3APIFUNC ResetLog(unsigned int channel)",
        "FunctionPython": "def ResetLog(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Reset the log settings, options, and statuses for the specified log channel."
    },
    {
        "No": 697,
        "FunctionC++": "WMX3APIFUNC SetLogHeader(unsigned int channel, char **ppLine, unsigned int numLines)",
        "FunctionPython": "def SetLogHeader(channel, pLogHeader)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the log header string that is copied to the beginning of the log file."
-----------------------------------------------------------------------------------
619. Instruction: Reset the log settings, options, and statuses for the specified log channel.
A: UpdateLog(channel)
B: GetLibVersion()
C: GetLogOption(channel)
D: ResetLog(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
619. Model's answer: D
619. Correct answer: D
619. Result: Correct



Processing Question 620:
620. Context:
 Function channel); 
Python def ResetLog(channel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogHeader(unsigned 
int channel, char 
**ppLine, unsigned int 
numLines); 
Python 
def 
SetLogHeader(channel, 
pLogHeader) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, unsigned int 
moduleId, void *data, 
unsigned int dataSize); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLog(unsigned int 
channel, LogInput* 
input); 
Python def SetLog(channel, input) 
Type int
--------------------------------------------
◆SetLogHeader() 
WMX3APIFUNC 
SetLogHeader ( unsigned int channel, 
char ** ppLine, 
unsigned int numLines 
) 
Set the log header string that is copied to the beginning of the log file. 
Parameters 

[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
ppLine An array of pointers to 
null-terminated char 
arrays. Each null-
terminated char array 
contains one line of the 
header. 
[in] 
numLines The number of elements 
(pointers to null-
terminated char arrays) 
in the value passed to 
the "ppLine" parameter. 
Each pointer (to a null-
terminated char array) 
contains one line of the 
header string, so the 
"numLines" value 
effectively specifies the 
number of lines in the 
header. 

Remarks
--------------------------------------------
Remarks 

When this function is called, all log settings, options, and statuses are cleared for 
the specified channel. 

This function cannot be called while a logging operation is active. The state of the 
log channel obtained with the GetDetailLogStatus function must be Finished, 
WriteFail, or BufferOverflow. 

◆SetLogHeader() 
WMX3APIFUNC 
SetLogHeader ( unsigned int channel, 
char ** ppLine, 
unsigned int numLines 
) 
Set the log header string that is copied to the beginning of the log file. 
Parameters
--------------------------------------------
Remarks 

This function sets the header string that is printed at the beginning of the log file. 
This function is optional, and it is not necessary to call this function when collecting 
log data. If this function is not called, no header will be printed at the beginning of 
the log file. 

The maximum number of lines that may constitute the header is defined by the 
maxLogHeaderLines constant. The maximum number of characters total in the 



header (including the new line character at the end of each line) is defined by the 
maxLogHeaderBytes constant. 

The log header can be removed by calling the ResetLog function. All other log 
settings and options will also be cleared, and will need to be set again. 

◆SetLog() [1/3]
WMX3APIFUNC 
SetLog ( unsigned int channel, 
LogInput * input 
) 
Specify data to be collected by the logging operation.
-----------------------------------------------------------------------------------
620. Instruction: Set the log header string that is copied to the beginning of the log file.
A: SetChannelLogHeader(channelName, logHeader)
B: SetLogHeader(channel, pLogHeader)
C: SetLog(channel, input)
D: StartMemoryLog(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
620. Model's answer: B
620. Correct answer: B
620. Result: Correct



Processing Question 621:
621. Context:
 Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
WMX3APIFUNC SetMLogFormat (unsigned int channel, 
MLogFormat *pMLogFormat, unsigned 
int mFormatCount) 
Set data logging settings for logging user 
memory data in a custom format. This 
function is deprecated and is replaced 
by the SetLog function. This function 
will be removed in a future version. 
More... 

WMX3APIFUNC OpenMemoryLogBuffer (unsigned int 
channel) 
Open the memory log buffer. More... 
WMX3APIFUNC CloseMemoryLogBuffer (unsigned int 
channel) 
Close the memory log buffer. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
LogInput *input) 

Specify data to be collected by the 
memory log operation. More... 

WMX3APIFUNC SetMemoryLogOption (unsigned int 
channel, MemoryLogOptions *pOption) 

Set the memory log options for a 
memory log channel. More... 

WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More...
--------------------------------------------
Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
It is not neccessary to close the memory log buffer once it is opened. For most 
cases, the memory log buffer should be opened during initialization and kept open 
for the entire session. 

It is not necessary to call this function before closing the WMX3 engine. All buffers 
that were open at the time that the WMX3 engine closes will be closed 
automatically. 

◆SetMemoryLog() [1/2]

yLog() [1/2]
WMX3APIFUNC 
SetMemoryLog ( 
) 
[1/2] 


WMX3APIFUNC 
SetMemoryLog ( 
unsigned int channel, 
LogInput * 
input 
) 
Specify data to be collected by the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
input A pointer to an object of 
a class that inherits the 
LogInput class. 
Remarks 

This function specifies which data to be collected by the memory log operation.
-----------------------------------------------------------------------------------
621. Instruction: Specify data to be collected by the logging operation.
A: StopMemoryLog(channel)
B: SetLog(channel, input)
C: StopLog(channel)
D: SetChannelLog(channel, input)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
621. Model's answer: B
621. Correct answer: B
621. Result: Correct



Processing Question 622:
622. Context:
 Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
SetLogOption(channel, 
pOption) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
GetLogOption(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
LogChannelOptions 
-data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogFilePath(unsigne 
d int channel, 
LogFilePathA *pPath);
--------------------------------------------
The memory allocated by this function is released when the log operation finishes. 
To start another log operation, this function must be called again. 

See also 

Data Log 

◆ 
SetLogOption() 

WMX3APIFUNC 
SetLogOption ( 
WMX3APIFUNC 
SetLogOption ( 
unsigned int channel, 
LogChannelOptions pOption 
) 
Set the log options for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class that contains the 
log options. 
Remarks 

This function sets the log options for a log channel. These options are applied each 
time a log operation is started by the specified channel.
--------------------------------------------
If the data to collect from a module has been specified already, calling this function 
again for the same module will overwrite the set of data to collect. 

The collected data can be read out with GetMemoryLogData function. 

This function allocates memory each time it is called. If there is not enough 
contiguous memory in the real time operating system space, an error will be 
returned. 

The memory allocated by this function is not released until 
CloseMemoryLogBuffer function or ResetMemoryLog function is called or the 
WMX3 engine is closed. As an exception, the memory allocated by specifying 
LogApiLogInput as an argument to this function will not be freed by 
ResetMemoryLog function. 

See also 

Memory Log 

◆ 
SetMemoryLogOption() 

WMX3APIFUNC 
SetMemoryLogOptio 
n ( 
WMX3APIFUNC 
SetMemoryLogOptio 
n ( 
unsigned int channel, 
MemoryLogOptions pOption 
) 
Set the memory log options for a memory log channel.
-----------------------------------------------------------------------------------
622. Instruction: Set the log options for a log channel.
A: SetOptions(channel, pOptions)
B: OpenMemoryLogBuffer(channel)
C: SetLoggingOption(loggingChannel, optionParams)
D: SetLogOption(channel, pOption)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
622. Model's answer: D
622. Correct answer: D
622. Result: Correct



Processing Question 623:
623. Context:
 Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
SetLogOption(channel, 
pOption) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
GetLogOption(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
LogChannelOptions 
-data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogFilePath(unsigne 
d int channel, 
LogFilePathA *pPath);
--------------------------------------------
Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
This function sets the log options for a log channel. These options are applied each 
time a log operation is started by the specified channel. 

Before this function is called for a log channel, the default log options are applied 
(these default log options can be obtained by calling GetLogOption before calling 
this function). 

See also 

Data Log 

◆GetLogOption() 

◆GetLogOption() 
WMX3APIFUNC 
GetLogOption ( 
) 
unsigned int channel, 
LogChannelOptions pOption 
Get the log options for a log channel. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class will contain the log 
options. 
Remarks 
This function gets the log options for a log channel. 

◆SetLogFilePath() [1/2]
--------------------------------------------
},
    {
        "No": 700,
        "FunctionC++": "WMX3APIFUNC SetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def SetLogOption(channel, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Set the log options for a log channel."
    },
    {
        "No": 701,
        "FunctionC++": "WMX3APIFUNC GetLogOption(unsigned int channel, LogChannelOptions *pOption)",
        "FunctionPython": "def GetLogOption(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the log options for a log channel. "
-----------------------------------------------------------------------------------
623. Instruction: Get the log options for a log channel.
A: GetLoggingOption(channel_name)
B: GetOptions(channel)
C: GetLogOption(channel)
D: SetLogFilePath(channel, pPath)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
623. Model's answer: C
623. Correct answer: C
623. Result: Correct



Processing Question 624:
624. Context:
 ◆SetLogFilePath() [1/2]

WMX3APIFUNC 
SetLogFilePath ( unsigned int channel, 
WMX3APIFUNC 
SetLogFilePath ( unsigned int channel, 
LogFilePathA * pPath 
) 
Set the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[in] 
pPath A pointer to an object of 
the LogFilePathA class 
that contains the file 
path. 

Remarks 

This function sets the file path for a log channel. Log operations started by the 
specified channel will save the log file to this file path. 

The directory specified in dirPath must exist. Otherwise, the log operation will 
generate a WriteFail error. 

The file path is specified as a char string. To specify the file path as a wchar_t string, 
use the SetLogFilePath function.
--------------------------------------------
Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
SetLogOption(channel, 
pOption) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogOption(unsigned 
int channel, 
LogChannelOptions 
*pOption); 
Python 
def 
GetLogOption(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : 
LogChannelOptions 
-data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogFilePath(unsigne 
d int channel, 
LogFilePathA *pPath);
--------------------------------------------
This function sets the log options for a log channel. These options are applied each 
time a log operation is started by the specified channel. 

Before this function is called for a log channel, the default log options are applied 
(these default log options can be obtained by calling GetLogOption before calling 
this function). 

See also 

Data Log 

◆GetLogOption() 

◆GetLogOption() 
WMX3APIFUNC 
GetLogOption ( 
) 
unsigned int channel, 
LogChannelOptions pOption 
Get the log options for a log channel. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class will contain the log 
options. 
Remarks 
This function gets the log options for a log channel. 

◆SetLogFilePath() [1/2]
-----------------------------------------------------------------------------------
624. Instruction: Set the file path for a log channel.
A: GetLogFilePath(channel)
B: SetMemoryMLog(channel, pMAddress, size)
C: SetLogFilePath(channel_id, file_path)
D: SetLogFilePath(channel, pPath)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
624. Model's answer: D
624. Correct answer: D
624. Result: Correct



Processing Question 625:
625. Context:
 Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
The file path is specified as a char string. To specify the file path as a wchar_t string, 
use the SetLogFilePath function. 

If a log operation is started for a log channel before calling this function, the log file 
is saved to the default file path of "C:\wmx3_logfile.txt". 


◆GetLogFilePath() [1/2]
WMX3APIFUNC 
GetLogFilePath ( unsigned int channel, 
LogFilePathA * pPath 
) 
Get the file path for a log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pPath A pointer to an object of 
the LogFilePathA class 
that will contain the file 
path. 

Remarks 

This function gets the file path of a log channel. This is the file path that the log file 
will be saved to when a log operation is started by the log channel.
--------------------------------------------
Python def 
SetLogFilePath(channel, 
pPath) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogFilePath(unsigne 
d int channel, 
LogFilePathA *pPath); 
Python 
def 
GetLogFilePath(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : LogFilePath data 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetLogFilePath(unsigne 
d int channel, 
LogFilePathW *pPath); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogFilePath(unsigne 
d int channel, 
LogFilePathW *pPath); 
Python 
Type
--------------------------------------------
This function sets the log options for a log channel. These options are applied each 
time a log operation is started by the specified channel. 

Before this function is called for a log channel, the default log options are applied 
(these default log options can be obtained by calling GetLogOption before calling 
this function). 

See also 

Data Log 

◆GetLogOption() 

◆GetLogOption() 
WMX3APIFUNC 
GetLogOption ( 
) 
unsigned int channel, 
LogChannelOptions pOption 
Get the log options for a log channel. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the 
LogChannelOptions 
class will contain the log 
options. 
Remarks 
This function gets the log options for a log channel. 

◆SetLogFilePath() [1/2]
-----------------------------------------------------------------------------------
625. Instruction: Get the file path for a log channel.
A: GetWatch(channel)
B: SetMemoryLog(channel, pAxisSelection, pOption)
C: GetLogFilePath(channel)
D: GetLogFilePathForChannel(channel_id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
625. Model's answer: C
625. Correct answer: C
625. Result: Correct



Processing Question 626:
626. Context:
 },
    {
        "No": 707,
        "FunctionC++": "WMX3APIFUNC GetDetailLogStatus(unsigned int channel, DetailLogStatus *pStatus)",
        "FunctionPython": "def GetDetailLogStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained. "
--------------------------------------------
◆GetLogStatus() 
WMX3APIFUNC 

GetLogStatus GetLogStatus 
( 
unsigned int 
channel, 
LogStatus * pStatus 
) 
Get the current status of the data logging operation. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pStatus A pointer to a LogStatus 
that will contain the 
current status of the 
logging operation. 
Remarks 

This function obtains the status of the current logging operation. This function may 
be called after starting a logging operation using StartLog to observe the progress 
of the logging operation. 

The samplesToCollect, samplesCollected, and samplesWritten values contain 
the same information as the millisecondsToCollect, millisecondsCollected, and 
millisecondsWritten values. The difference between these two groups of values is 
the unit.
--------------------------------------------
Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
If logging is stopped because of write failure, verify that the application calling the 
log function has permission to write to the specified file path of the log file. 

If logging is stopped because of buffer overflow, reduce the number of axes to log 
data, reduce the number of types of data to log, increase the sampling period 
(reduce the sampling frequency), or improve the file write speed of the PC. 


◆GetDetailLogStatus() 
WMX3APIFUNC 
GetDetailLogStatus ( unsigned int channel, 
DetailLogStatus * pStatus 
) 
Get the current status of the data logging operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pStatus A pointer to a 
DetailLogStatus that 
will contain the current 
status of the logging 
operation.
-----------------------------------------------------------------------------------
626. Instruction: Get the current status of the data logging operation.
A: ResetLog(channel)
B: GetChannelLogStatus(channel_id)
C: GetPSOStatus(channel)
D: GetLogStatus(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
626. Model's answer: D
626. Correct answer: D
626. Result: Correct



Processing Question 627:
627. Context:
 If logging is stopped because of write failure, verify that the application calling the 
log function has permission to write to the specified file path of the log file. 

If logging is stopped because of buffer overflow, reduce the number of axes to log 
data, reduce the number of types of data to log, increase the sampling period 
(reduce the sampling frequency), or improve the file write speed of the PC. 


◆GetDetailLogStatus() 
WMX3APIFUNC 
GetDetailLogStatus ( unsigned int channel, 
DetailLogStatus * pStatus 
) 
Get the current status of the data logging operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 
[out] 
pStatus A pointer to a 
DetailLogStatus that 
will contain the current 
status of the logging 
operation.
--------------------------------------------
},
    {
        "No": 707,
        "FunctionC++": "WMX3APIFUNC GetDetailLogStatus(unsigned int channel, DetailLogStatus *pStatus)",
        "FunctionPython": "def GetDetailLogStatus(channel)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained. "
--------------------------------------------
Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
Returns 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogStatus(unsigned 
int channel, LogStatus 
*pStatus); 
Python 
def 
GetLogStatus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : LogStatus status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDetailLogStatus(unsi 
gned int channel, 
DetailLogStatus 
*pStatus); 
Python 
def 
GetDetailLogStatus(chann 
el) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : DetailLogStatus 
-data 
Remarks 
WMX3APIFUNC 
SetLog(unsigned int 
channel, char *pPath, 


C++ 

Function 

Python 

Type 

Returns 

Value 

Remarks 

unsigned int 
milliseconds, unsigned 
int 
samplePeriodInCycles, 
AxisSelection 
*pAxisSelection, 
LogOptions 
*pOptions,unsigned int 
mode, unsigned int 
burstWriteLines = 4, 
unsigned int scale = 9);
-----------------------------------------------------------------------------------
627. Instruction: Get the current status of the data logging operation. Compared to GetLogStatus, more detailed statuses can be obtained.
A: GetPathIntplLookaheadStatus(channel)
B: GetDetailLogStatus(channel)
C: SetLogHeader(channel, pLogHeader)
D: GetChannelDetailLogStatus(channel_id)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
627. Model's answer: B
627. Correct answer: B
627. Result: Correct



Processing Question 628:
628. Context:
 Specify data to be collected by the 
logging operation. More... 

WMX3APIFUNC SetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Set the log options for a log channel. 

More... 

WMX3APIFUNC GetLogOption (unsigned int channel, 

LogChannelOptions *pOption) 

Get the log options for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 


LogFilePathA *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathA *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC SetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Set the file path for a log channel. 

More... 

WMX3APIFUNC GetLogFilePath (unsigned int channel, 

LogFilePathW *pPath) 

Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More...
--------------------------------------------
Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
1. SetLog 
This function specifies the data to log. Each type of data that may be logged is 
associated with a module. This function must be called once for each module 


containing data to be logged. For example, if axis data from the CoreMotion 
module and I/O data from the IO module will be logged, this function must be 
called twice. By default, no log data will be collected except for the cycle counter. 

2. SetLogOption 
This function specifies the options for logging. For example, the time to collect 
log data can be specified. The default log options are listed in 
LogChannelOptions. 

3. SetLogFilePath 
This function specifies the file path to save the log file. By default, the log file will 
be saved to "C:\wmx3_logfile.txt".
--------------------------------------------
3. SetLogFilePath 
This function specifies the file path to save the log file. By default, the log file will 
be saved to "C:\wmx3_logfile.txt". 

4. SetLogHeader 
This function specifies the header that is appended to the beginning of the log 
file. By default, no header is appended to the beginning of the log file, and the 
first line of the log file lists the type of data collected for each column. 

Log Example Code 

The following code executes a simple log operation that logs the position command 
data of axis 0 for 1 second. 

CoreMotionLogInput in;
LogChannelOptions opt;
LogFilePathW path;
unsigned int chnl = 0; 

//Set the CoreMotion module to log the position command data of axis 0in.axisSelection.axisCount = 1; 
in.axisSelection.axis[0] = 0;
in.axisOptions.commandPos = 1;
wmxlib_Log->SetLog(chnl, &in); 

//Set the log optionsopt.samplingTimeMilliseconds = 1000;
opt.stopLoggingOnBufferOverflow = 1;
wmxlib_Log->SetLogOption(chnl, &opt);
-----------------------------------------------------------------------------------
628. Instruction: Specify data to be collected by the logging operation.
A: GetInputData(buff, buffSize, dataSize)
B: SetLogChannel(channel, filePath, duration, sampleRate, axisSelection, options, mode)
C: SetLog(channel, pPath, milliseconds, samplePeriodInCycles, pAxisSelection, pOptions, mode)
D: StartCSplineMov_TotalTime (channel, pSplineCommand, numPoints, pPoint)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
628. Model's answer: C
628. Correct answer: C
628. Result: Correct



Processing Question 629:
629. Context:
 starting bit address of 
the region of user 
memory to log. The 
mFormatType member 
specifies the format of 
the logged data. 
[in] 
mFormatCount The number of elements 
in the pMLogFormat 
array. 
Remarks 

This function is an alternate way to log user memory data. This function allows 
contiguous sequences of user memory to be logged under a single column, 
whereas the SetMLog function logs each individual user memory bit under a 
separate column. This function is useful for logging a contiguous segment of user 
memory that represents a single entity. 

◆ 
OpenMemoryLogBuffer() 

WMX3APIFU 
NC 
OpenMemory 
LogBuffer ( unsigned int channel ) 
WMX3APIFU 
NC 
OpenMemory 
LogBuffer ( unsigned int channel ) 
Open the memory log buffer. 
Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks
--------------------------------------------
WMX3APIFUNC SetMLogFormat (unsigned int channel, 
MLogFormat *pMLogFormat, unsigned 
int mFormatCount) 
Set data logging settings for logging user 
memory data in a custom format. This 
function is deprecated and is replaced 
by the SetLog function. This function 
will be removed in a future version. 
More... 

WMX3APIFUNC OpenMemoryLogBuffer (unsigned int 
channel) 
Open the memory log buffer. More... 
WMX3APIFUNC CloseMemoryLogBuffer (unsigned int 
channel) 
Close the memory log buffer. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
LogInput *input) 

Specify data to be collected by the 
memory log operation. More... 

WMX3APIFUNC SetMemoryLogOption (unsigned int 
channel, MemoryLogOptions *pOption) 

Set the memory log options for a 
memory log channel. More... 

WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More...
--------------------------------------------
◆CloseMemoryLogBuffer() 

WMX3APIFU 
NC 
CloseMemor 
WMX3APIFU 
NC 
CloseMemor 
yLogBuffer ( 
unsigned int channel ) 
Close the memory log buffer. 
Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks 

This function closes the memory log buffer that has been opened by the 
OpenMemoryLogBuffer function. This frees the memory that has been used for 
the memory log buffer. Once the memory log buffer is closed, memory log functions 
will be unavailable until the memory log buffer is reopened using the 
OpenMemoryLogBuffer function. 

It is not neccessary to close the memory log buffer once it is opened. For most 
cases, the memory log buffer should be opened during initialization and kept open 
for the entire session.
--------------------------------------------
Function 
*pMLogFormat, 
unsigned int 
mFormatCount); 
Python 
def 
SetMLogFormat(channel, 
pMLogFormat, 
mFormatCount) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
OpenMemoryLogBuffer( 
unsigned int channel); 
Python 
def 
OpenMemoryLogBuffer(ch 
annel) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
CloseMemoryLogBuffer( 
unsigned int channel); 
Python 
def 
CloseMemoryLogBuffer(c 
hannel) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
SetMemoryLog(unsigne 
d int channel, 
AxisSelection
-----------------------------------------------------------------------------------
629. Instruction: Open the memory log buffer.
A: CreateMemoryLogBuffer(channel_id)
B: CloseMemoryLogBuffer(channel)
C: OpenMemoryLogBuffer(channel)
D: SetMemoryMLog(channel, pMAddress, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
629. Model's answer: C
629. Correct answer: C
629. Result: Correct



Processing Question 630:
630. Context:
 ◆CloseMemoryLogBuffer() 

WMX3APIFU 
NC 
CloseMemor 
WMX3APIFU 
NC 
CloseMemor 
yLogBuffer ( 
unsigned int channel ) 
Close the memory log buffer. 
Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks 

This function closes the memory log buffer that has been opened by the 
OpenMemoryLogBuffer function. This frees the memory that has been used for 
the memory log buffer. Once the memory log buffer is closed, memory log functions 
will be unavailable until the memory log buffer is reopened using the 
OpenMemoryLogBuffer function. 

It is not neccessary to close the memory log buffer once it is opened. For most 
cases, the memory log buffer should be opened during initialization and kept open 
for the entire session.
--------------------------------------------
It is not neccessary to close the memory log buffer once it is opened. For most 
cases, the memory log buffer should be opened during initialization and kept open 
for the entire session. 

It is not necessary to call this function before closing the WMX3 engine. All buffers 
that were open at the time that the WMX3 engine closes will be closed 
automatically. 

◆SetMemoryLog() [1/2]

yLog() [1/2]
WMX3APIFUNC 
SetMemoryLog ( 
) 
[1/2] 


WMX3APIFUNC 
SetMemoryLog ( 
unsigned int channel, 
LogInput * 
input 
) 
Specify data to be collected by the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[in] 
input A pointer to an object of 
a class that inherits the 
LogInput class. 
Remarks 

This function specifies which data to be collected by the memory log operation.
--------------------------------------------
WMX3APIFUNC FreeApiBuffer (unsigned int channel) 

Close an API buffer memory space. 

More... 

WMX3APIFUNC StartRecordBufferChannel (unsigned int 
channel) 

Start recording APIs to the API buffer 
channel. More... 

WMX3APIFUNC EndRecordBufferChannel () 
End recording APIs to the API buffer 
channel. More... 


WMX3APIFUNC GetRecordingBufferChannel (int 
*channel, unsigned char *enable) 

Get the currently recording API buffer 
channel, if any. More... 

WMX3APIFUNC Execute (unsigned int channel) 
Execute an API buffer. More... 
WMX3APIFUNC Halt (unsigned int channel) 
Halt an API buffer. More... 
WMX3APIFUNC Clear (unsigned int channel) 
Clear an API buffer. More... 
WMX3APIFUNC Rewind (unsigned int channel) 
Rewind an API buffer. More... 
WMX3APIFUNC ExecuteMultipleChannel 
(ApiBufferChannelSelection 
*pChannelSelection) 
Execute multiple API buffer channels. 
More...
--------------------------------------------
},
    {
        "No": 715,
        "FunctionC++": "WMX3APIFUNC CloseMemoryLogBuffer(unsigned int channel)",
        "FunctionPython": "def CloseMemoryLogBuffer(channel)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Close the memory log buffer."
    },
    {
        "No": 716,
        "FunctionC++": "WMX3APIFUNC SetMemoryLog(unsigned int channel, AxisSelection *pAxisSelection, MemoryLogOptions *pOption)",
        "FunctionPython": "def SetMemoryLog(channel, pAxisSelection, pOption)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": null
-----------------------------------------------------------------------------------
630. Instruction: Close the memory log buffer.
A: CloseBufferedLog(channel)
B: SetMemoryIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)
C: CloseMemoryLogBuffer(channel)
D: StartMemoryLog(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
630. Model's answer: C
630. Correct answer: C
630. Result: Correct



Processing Question 631:
631. Context:
 WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More... 

WMX3APIFUNC StartMemoryLog (unsigned int channel) 
Start the memory log operation. More... 
WMX3APIFUNC StopMemoryLog (unsigned int channel) 
Stop the memory log operation. More... 

WMX3APIFUNC ResetMemoryLog (unsigned int channel) 
Reset the memory log settings, options, 
and statuses for the specified memory 
log channel. More... 

WMX3APIFUNC GetMemoryLogStatus (unsigned int 
channel, MemoryLogStatus *pStatus) 

Get the current status of the memory log 
operation. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput *pOutput) 

Retrieve data from memory log of a 
single module. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More...
--------------------------------------------
◆GetMemoryLogOption() 

WMX3APIFUNC 
GetMemoryLogOptio 
WMX3APIFUNC 
GetMemoryLogOptio 
n ( 
) 
unsigned int channel, 
MemoryLogOptions pOption 
Get the memory log options for a memory log channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
[out] 
pOption A pointer to an object of 
the MemoryLogOptions 
class will contain the 
memory log options. 

Remarks 

This function gets the memory log options for a memory log channel. 

◆StartMemoryLog() 

WMX3APIFU 
NC 
StartMemory 
WMX3APIFU 
NC 
StartMemory 
Log ( 
unsigned int channel ) 
Start the memory log operation.
--------------------------------------------
◆StartMemoryLog() 

WMX3APIFU 
NC 
StartMemory 
WMX3APIFU 
NC 
StartMemory 
Log ( 
unsigned int channel ) 
Start the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

Memory log settings must first be set using the SetMemoryLog API function. 

When this function is called, the data specified by functions such as 
SetMemoryLog will be recorded to a preallocated buffer every cycle. The recording 
continues until the StopMemoryLog function is called or an error is encountered. 

Call the GetMemoryLogStatus API function to obtain the status of the logging 
operation. 

◆StopMemoryLog() 

WMX3APIFU 
NC 
StopMemory 
WMX3APIFU 
NC 
StopMemory 
Log ( 
unsigned int channel ) 
Stop the memory log operation.
--------------------------------------------
WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
AxisSelection *pAxisSelection, 
MemoryLogOptions *pOption) 
Set memory log settings. This function 
is deprecated and is replaced by the 
SetMemoryLog function and 
SetMemoryLogOption function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryIOLog (unsigned int channel, 
IOAddress *pInputIOAddress, unsigned 
int inputSize, IOAddress 
*pOutputIOAddress, unsigned int 


outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More...
-----------------------------------------------------------------------------------
631. Instruction: Start the memory log operation.
A: StartMemoryLogging(channel, parameters)
B: GetMemoryLogData(channel)
C: StartMemoryLog(channel)
D: GetLogOption(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
631. Model's answer: C
631. Correct answer: C
631. Result: Correct



Processing Question 632:
632. Context:
 6. StopMemoryLog 
This function stops the logging of the memory log function. 

Memory Log Example Code 


The following code executes a simple log operation that logs the position command 
data of axis 0 and retrieves log data collected. 

CoreMotionLogInput in;
MemoryLogOptions opt;
unsigned int chnl = 0; 

//Set the CoreMotion module to log the position command data of axis 0in.axisSelection.axisCount = 1; 
in.axisSelection.axis[0] = 0;
in.axisOptions.commandPos = 1;
wmxlib_Log->SetMemoryLog(chnl, &in); 

//Set the optionsopt.triggerEventCount = 0;
wmxlib_Log->SetMemoryLogOption(chnl, &opt); 

//Start log operationwmxlib_Log->StartMemoryLog(chnl); 

//Retrieve log dataCoreMotionLogOutput out;
wmxlib_Log->GetMemoryLogData(chnl, &out); 

Memory Log Channels 

Memory log operations are executed in channels numbered between 0 and 
maxMemLogChannel -1. 

Each memory log channel holds its own memory log parameters and executes memory 
log operations independent of other channels.
--------------------------------------------
◆StopMemoryLog() 

WMX3APIFU 
NC 
StopMemory 
WMX3APIFU 
NC 
StopMemory 
Log ( 
unsigned int channel ) 
Stop the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

When this function is called, the engine will stop recording data to the memory log. 

◆ResetMemoryLog() 

WMX3APIFU 
NC 
ResetMemor 
WMX3APIFU 
NC 
ResetMemor 
yLog ( 
unsigned int channel ) 
Reset the memory log settings, options, and statuses for the specified memory log 
channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks
--------------------------------------------
WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More... 

WMX3APIFUNC StartMemoryLog (unsigned int channel) 
Start the memory log operation. More... 
WMX3APIFUNC StopMemoryLog (unsigned int channel) 
Stop the memory log operation. More... 

WMX3APIFUNC ResetMemoryLog (unsigned int channel) 
Reset the memory log settings, options, 
and statuses for the specified memory 
log channel. More... 

WMX3APIFUNC GetMemoryLogStatus (unsigned int 
channel, MemoryLogStatus *pStatus) 

Get the current status of the memory log 
operation. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput *pOutput) 

Retrieve data from memory log of a 
single module. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More...
--------------------------------------------
◆StartMemoryLog() 

WMX3APIFU 
NC 
StartMemory 
WMX3APIFU 
NC 
StartMemory 
Log ( 
unsigned int channel ) 
Start the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

Memory log settings must first be set using the SetMemoryLog API function. 

When this function is called, the data specified by functions such as 
SetMemoryLog will be recorded to a preallocated buffer every cycle. The recording 
continues until the StopMemoryLog function is called or an error is encountered. 

Call the GetMemoryLogStatus API function to obtain the status of the logging 
operation. 

◆StopMemoryLog() 

WMX3APIFU 
NC 
StopMemory 
WMX3APIFU 
NC 
StopMemory 
Log ( 
unsigned int channel ) 
Stop the memory log operation.
-----------------------------------------------------------------------------------
632. Instruction: Stop the memory log operation.
A: SetLogOption(channel, pOption)
B: StopMemoryLogging (channel_id)
C: StopMemoryLog(channel)
D: OpenMemoryLogBuffer(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
632. Model's answer: C
632. Correct answer: C
632. Result: Correct



Processing Question 633:
633. Context:
 WMX3APIFUNC GetMemoryLogOption (unsigned int 

channel, MemoryLogOptions *pOption) 

Get the memory log options for a 


memory log channel. More... 

WMX3APIFUNC StartMemoryLog (unsigned int channel) 
Start the memory log operation. More... 
WMX3APIFUNC StopMemoryLog (unsigned int channel) 
Stop the memory log operation. More... 

WMX3APIFUNC ResetMemoryLog (unsigned int channel) 
Reset the memory log settings, options, 
and statuses for the specified memory 
log channel. More... 

WMX3APIFUNC GetMemoryLogStatus (unsigned int 
channel, MemoryLogStatus *pStatus) 

Get the current status of the memory log 
operation. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput *pOutput) 

Retrieve data from memory log of a 
single module. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More...
--------------------------------------------
WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
AxisSelection *pAxisSelection, 
MemoryLogOptions *pOption) 
Set memory log settings. This function 
is deprecated and is replaced by the 
SetMemoryLog function and 
SetMemoryLogOption function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryIOLog (unsigned int channel, 
IOAddress *pInputIOAddress, unsigned 
int inputSize, IOAddress 
*pOutputIOAddress, unsigned int 


outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More...
--------------------------------------------
Function *pAxisSelection, 
MemoryLogOptions 
*pOption); 
Python 
def 
SetMemoryLog(channel, 
pAxisSelection, pOption) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMemoryIOLog(unsig 
ned int channel, 
IOAddress 
*pInputIOAddress, 
unsigned int inputSize, 
IOAddress 
*pOutputIOAddress, 
unsigned int 
outputSize); 
Python 
def 
SetMemoryIOLog(channel 
, pInputIOAddress, 
inputSize, 
pOutputIOAddress, 
outputSize) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMemoryMLog(unsign 
ed int channel, 
MAddress *pMAddress, 
unsigned int size);
--------------------------------------------
outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryMLog (unsigned int channel, 
MAddress *pMAddress, unsigned int 
size) 
Set user memory memory log settings. 
This function is deprecated and is 
replaced by the SetMemoryLog 
function. This function will be 
removed in a future version. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, MemoryLogData *pData) 
Retrieve data from memory log. This 
function is deprecated and is replaced 
by the GetMemoryLogData function. 
This function will be removed in a 
future version. More... 

WMX3APIFUNC SetApiLog (char *pPath, ApiLogOptions 
*pOptions=NULL, unsigned int 
buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More...
-----------------------------------------------------------------------------------
633. Instruction: Get the current status of the memory log operation.
A: GetMemoryLogStatus(channel)
B: GetMemoryLogStatusForChannel(channel_id)
C: SetIOLog(channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)
D: GetPSOStatus(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
633. Model's answer: A
633. Correct answer: A
633. Result: Correct



Processing Question 634:
634. Context:
 WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC StartApiLog () 
Start logging data to the API log. More... 

WMX3APIFUNC StopApiLog () 


Stop logging data to the API log. More... 

WMX3APIFUNC GetApiLogStatus (ApiLogStatus 
*pStatus) 

Get the current status of the API log. 

More... 

WMX3APIFUNC OpenApiLogFile (char *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC OpenApiLogFile (wchar_t *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC GetApiLogData (FILE *pFile, unsigned 
char *pDataBuff, unsigned int buffSize, 
ApiLogInfo *pApiLogInfo=NULL) 
Extract the information of one API 
function call from the API log file. More... 

WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions
--------------------------------------------
Returns 
Type 
Value 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
Returns 
C++ 
Python 
Type 
Value 
SetApiLog(wchar_t 
*pPath, ApiLogOptions 
*pOptions = NULL, 
unsigned int buffSize = 
16777216); 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
StartApiLog(); 
def StartApiLog() 
int 
error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
StopApiLog(); 
def StopApiLog() 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ GetApiLogStatus(ApiLo 
gStatus* pStatus); 
Python def GetApiLogStatus()
--------------------------------------------
def SetLog(channel, 
pPath, milliseconds, 
samplePeriodInCycl 
es, pAxisSelection, 
pOptions, mode) 
def SetLog(channel, 
pPath, milliseconds, 
samplePeriodInCycl 
es, pAxisSelection, 
pOptions, mode, 
burstWriteLines) 
SetLog(channel, 
pPath, milliseconds, 
samplePeriodInCycl 
es, pAxisSelection, 
pOptions,mode, 
burstWriteLines, 
scale) 
int 

error code 

WMX3APIFUNC 
SetLog(unsigned int 


Function 
C++ 
channel, wchar_t *pPath, 
unsigned int 
milliseconds, unsigned 
int 
samplePeriodInCycles, 
AxisSelection 
*pAxisSelection, 
LogOptions 
*pOptions,unsigned int 
mode, unsigned int 
burstWriteLines = 4, 
unsigned int scale = 9); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetIOLog(unsigned int 
channel, IOAddress 
*pInputIOAddress, 
unsigned int inputSize, 
IOAddress 
*pOutputIOAddress, 
unsigned int 
outputSize); 
Python 
def SetIOLog(channel, 
pInputIOAddress, 
inputSize, 
pOutputIOAddress, 
outputSize) 
Returns 
Type int 
Value error code 
Remarks
--------------------------------------------
Set data logging settings for logging I/O 
data. This function is deprecated and 
is replaced by the SetLog function. 
This function will be removed in a 
future version. More... 

WMX3APIFUNC SetIOLogFormat (unsigned int channel, 
IOLogFormat *pInputIOLogFormat, 
unsigned int inputIOFormatCount, 
IOLogFormat *pOutputIOLogFormat, 
unsigned int outputIOFormatCount) 
Set data logging settings for logging I/O 
data in a custom format. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More... 


WMX3APIFUNC SetMLog (unsigned int channel, 
MAddress *pMAddress, unsigned int 
size) 
Set data logging settings for logging user 
memory data. This function is 
deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
-----------------------------------------------------------------------------------
634. Instruction: Set the parameters for the API log.
A: SetLogPath(log_path)
B: SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)
C: StopApiLog()
D: SetApiLog(pPath)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
634. Model's answer: D
634. Correct answer: D
634. Result: Correct



Processing Question 635:
635. Context:
 WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC StartApiLog () 
Start logging data to the API log. More... 

WMX3APIFUNC StopApiLog () 


Stop logging data to the API log. More... 

WMX3APIFUNC GetApiLogStatus (ApiLogStatus 
*pStatus) 

Get the current status of the API log. 

More... 

WMX3APIFUNC OpenApiLogFile (char *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC OpenApiLogFile (wchar_t *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC GetApiLogData (FILE *pFile, unsigned 
char *pDataBuff, unsigned int buffSize, 
ApiLogInfo *pApiLogInfo=NULL) 
Extract the information of one API 
function call from the API log file. More... 

WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions
--------------------------------------------
This function allocates memory each time it is called. If there is not enough 
contiguous memory in the real time operating system space, an error will be 



◆SetApiLog() [2/2]
returned. 
See also 
Configuring the API Log 
WMX3APIFUNC 
SetApiLog ( wchar_t * pPath, 
ApiLogOptions * pOptions = NULL, 
unsigned int buffSize = 16777216) 
Set the parameters for the API log. 

Parameters 
[in] 
pPath The absolute file path to 
save the log file to. 
[in] 
pOptions An optional argument 
that specifies options for 
the API log. 
[in] 
buffSize The size of the buffer 
memory to allocate for 
the API log, in units of 
bytes. 
Remarks 

This function is a variation of SetApiLog that accepts a wchar_t array for the file 
path string. Use this function when using Unicode character sets. 

◆StartApiLog() 

WMX3APIFUNC 
StartApiLog ( ) 
WMX3APIFUNC 
StartApiLog ( ) 
Start logging data to the API log. 

Remarks 

This function starts logging data to the API log file.
--------------------------------------------
Returns 
Type 
Value 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
Returns 
C++ 
Python 
Type 
Value 
SetApiLog(wchar_t 
*pPath, ApiLogOptions 
*pOptions = NULL, 
unsigned int buffSize = 
16777216); 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
StartApiLog(); 
def StartApiLog() 
int 
error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
StopApiLog(); 
def StopApiLog() 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ GetApiLogStatus(ApiLo 
gStatus* pStatus); 
Python def GetApiLogStatus()
--------------------------------------------
outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryMLog (unsigned int channel, 
MAddress *pMAddress, unsigned int 
size) 
Set user memory memory log settings. 
This function is deprecated and is 
replaced by the SetMemoryLog 
function. This function will be 
removed in a future version. More... 

WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, MemoryLogData *pData) 
Retrieve data from memory log. This 
function is deprecated and is replaced 
by the GetMemoryLogData function. 
This function will be removed in a 
future version. More... 

WMX3APIFUNC SetApiLog (char *pPath, ApiLogOptions 
*pOptions=NULL, unsigned int 
buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More...
-----------------------------------------------------------------------------------
635. Instruction: Start logging data to the API log.
A: UpdateApiLogStart()
B: StartApiLog()
C: SetApiLog(pPath)
D: GetMemoryLogData(channel)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
635. Model's answer: B
635. Correct answer: B
635. Result: Correct



Processing Question 636:
636. Context:
 Data Log 

◆StopLog() 

WMX3APIFU WMX3APIFU 
NC StopLog ( 
unsigned int channel ) 
Stop logging data. 
Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks 

Data logging can be finished before the specified sample time elapses using this 
function. When this function is called, data logging will stop. Data that had already 
been written to the log file remain written. 

◆ResetLog() 

unsigned int channel ) unsigned int channel ) 
WMX3APIFU 
NC ResetLog ( 
Reset the log settings, options, and statuses for the specified log channel. 

Parameters 
[in] 
channel The channel of the log 
operation. Each channel 
operates independently 
from all other channels. 
The first channel is 0. 
The number of available 
channels is defined by 
the maxLogChannel 
constant. 

Remarks
--------------------------------------------
6. StopMemoryLog 
This function stops the logging of the memory log function. 

Memory Log Example Code 


The following code executes a simple log operation that logs the position command 
data of axis 0 and retrieves log data collected. 

CoreMotionLogInput in;
MemoryLogOptions opt;
unsigned int chnl = 0; 

//Set the CoreMotion module to log the position command data of axis 0in.axisSelection.axisCount = 1; 
in.axisSelection.axis[0] = 0;
in.axisOptions.commandPos = 1;
wmxlib_Log->SetMemoryLog(chnl, &in); 

//Set the optionsopt.triggerEventCount = 0;
wmxlib_Log->SetMemoryLogOption(chnl, &opt); 

//Start log operationwmxlib_Log->StartMemoryLog(chnl); 

//Retrieve log dataCoreMotionLogOutput out;
wmxlib_Log->GetMemoryLogData(chnl, &out); 

Memory Log Channels 

Memory log operations are executed in channels numbered between 0 and 
maxMemLogChannel -1. 

Each memory log channel holds its own memory log parameters and executes memory 
log operations independent of other channels.
--------------------------------------------
◆StopMemoryLog() 

WMX3APIFU 
NC 
StopMemory 
WMX3APIFU 
NC 
StopMemory 
Log ( 
unsigned int channel ) 
Stop the memory log operation. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 
Remarks 

When this function is called, the engine will stop recording data to the memory log. 

◆ResetMemoryLog() 

WMX3APIFU 
NC 
ResetMemor 
WMX3APIFU 
NC 
ResetMemor 
yLog ( 
unsigned int channel ) 
Reset the memory log settings, options, and statuses for the specified memory log 
channel. 

Parameters 
[in] 
channel The channel of the 
memory log operation. 
Each channel operates 
independently from all 
other channels. The first 
channel is 0. The 
number of available 
channels is defined by 
the 
maxMemLogChannel 
constant. 

Remarks
--------------------------------------------
WMX3APIFUNC GetMemoryLogData (unsigned int 
channel, LogOutput **ppOutput, 
unsigned int size) 
Retrieve data from memory log of 
multiple modules. More... 

WMX3APIFUNC SetMemoryLog (unsigned int channel, 
AxisSelection *pAxisSelection, 
MemoryLogOptions *pOption) 
Set memory log settings. This function 
is deprecated and is replaced by the 
SetMemoryLog function and 
SetMemoryLogOption function. This 
function will be removed in a future 
version. More... 

WMX3APIFUNC SetMemoryIOLog (unsigned int channel, 
IOAddress *pInputIOAddress, unsigned 
int inputSize, IOAddress 
*pOutputIOAddress, unsigned int 


outputSize) 

Set I/O memory log settings. This 
function is deprecated and is replaced 
by the SetMemoryLog function. This 
function will be removed in a future 
version. More...
-----------------------------------------------------------------------------------
636. Instruction: Stop logging data to the API log.
A: Stop(axis)
B: OpenMemoryLogBuffer(channel)
C: EndApiLog()
D: StopApiLog()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
636. Model's answer: D
636. Correct answer: D
636. Result: Correct



Processing Question 637:
637. Context:
 Get the file path for a log channel. 

More... 

WMX3APIFUNC GetLogStatus (unsigned int channel, 
LogStatus *pStatus) 

Get the current status of the data logging 
operation. More... 

WMX3APIFUNC GetDetailLogStatus (unsigned int 
channel, DetailLogStatus *pStatus) 

Get the current status of the data logging 
operation. Compared to GetLogStatus, 
more detailed statuses can be obtained. 

More... 

WMX3APIFUNC SetCustomLog (unsigned int channel, 
unsigned int moduleId, void *data, 
unsigned int dataSize, LogType::T type) 
Reserved. More... 

WMX3APIFUNC SetLog (unsigned int channel, char 
*pPath, unsigned int milliseconds, 
unsigned int samplePeriodInCycles, 
AxisSelection *pAxisSelection, 
LogOptions *pOptions, unsigned int 
mode, unsigned int burstWriteLines=4, 


unsigned int scale=9) 

Set data logging settings. This function 
is deprecated and is replaced by the 
SetLog function. This function will be 
removed in a future version. More...
--------------------------------------------
◆StartApiLog() 

WMX3APIFUNC 
StartApiLog ( ) 
WMX3APIFUNC 
StartApiLog ( ) 
Start logging data to the API log. 

Remarks 

This function starts logging data to the API log file. 

The SetApiLog function must be called before calling this function to set the API log 
parameters and allocate the buffer memory. 

See also 

Saving the API Log File 

◆StopApiLog() 
WMX3APIFUNC 
StopApiLog ( ) 
Stop logging data to the API log. 

Remarks 

This function stops logging data to the API log file. 
Logging of data must first be started with the StartApiLog function. 

◆GetApiLogStatus() 

WMX3APIFU 
NC 
GetApiLogSt 
WMX3APIFU 
NC 
GetApiLogSt 
atus ( 
ApiLogStatus pStatus ) 
Get the current status of the API log. 

Parameters 
[out] 
pStatus A pointer to an 
ApiLogStatus class 
object that will contain 
the current status of the 
API log. 
Remarks 

This function gets the current status of the API log. This function can be called 
periodically to monitor the API log state.
--------------------------------------------
Returns 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetLogStatus(unsigned 
int channel, LogStatus 
*pStatus); 
Python 
def 
GetLogStatus(channel) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : LogStatus status 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDetailLogStatus(unsi 
gned int channel, 
DetailLogStatus 
*pStatus); 
Python 
def 
GetDetailLogStatus(chann 
el) 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : DetailLogStatus 
-data 
Remarks 
WMX3APIFUNC 
SetLog(unsigned int 
channel, char *pPath, 


C++ 

Function 

Python 

Type 

Returns 

Value 

Remarks 

unsigned int 
milliseconds, unsigned 
int 
samplePeriodInCycles, 
AxisSelection 
*pAxisSelection, 
LogOptions 
*pOptions,unsigned int 
mode, unsigned int 
burstWriteLines = 4, 
unsigned int scale = 9);
--------------------------------------------
GetDetailLogStatus() : Log 
GetDeviceID() : WMX3Api 
GetDeviceName() : WMX3Api 
GetECAM() : AdvSync 
GetEmergencyStopParam() : Config 
GetEncoderRange() : Config 
GetEngineStatus() : WMX3Api 
GetEniFilePath() : Ecat 
GetEvent() : EventControl 
GetEventInput() : EventControl 
GetEventModuleId() : EventControl 
GetEventOption() : EventControl 
GetEventOutput() : EventControl 
GetFeedbackParam() : Config 
GetFlightRecorderParam() : Config 
GetFunctionDoesNotMatchSetFunction : EventErrorCode 
GetGearRatio() : Config 
GetHardwareTouchProbeStatus() : EventControl 
GetHomeData() : Home 
GetHomeParam() : Config 
GetIMDllVersion() : WMX3Api 
GetInaccessibleSlaveCount() : EcMasterInfo 
GetInAnalogDataChar() : Io 
GetInAnalogDataCharEx() : Io 
GetInAnalogDataInt() : Io 
GetInAnalogDataIntEx() : Io 
GetInAnalogDataShort() : Io 
GetInAnalogDataShortEx() : Io 
GetInAnalogDataUChar() : Io 
GetInAnalogDataUCharEx() : Io 
GetInAnalogDataUInt() : Io 
GetInAnalogDataUIntEx() : Io
-----------------------------------------------------------------------------------
637. Instruction: Get the current status of the API log.
A: FetchApiLogStatus()
B: GetApiLogStatus()
C: GetLogStatus(channel)
D: SetIOLogFormat(channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
637. Model's answer: B
637. Correct answer: B
637. Result: Correct



Processing Question 638:
638. Context:
 WMX3APIFUNC SetApiLog (wchar_t *pPath, 
ApiLogOptions *pOptions=NULL, 
unsigned int buffSize=16777216) 
Set the parameters for the API log. 
More... 

WMX3APIFUNC StartApiLog () 
Start logging data to the API log. More... 

WMX3APIFUNC StopApiLog () 


Stop logging data to the API log. More... 

WMX3APIFUNC GetApiLogStatus (ApiLogStatus 
*pStatus) 

Get the current status of the API log. 

More... 

WMX3APIFUNC OpenApiLogFile (char *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC OpenApiLogFile (wchar_t *pPath, FILE 
**ppFile) 

Open an API log file to extract 
information from the contents. More... 

WMX3APIFUNC GetApiLogData (FILE *pFile, unsigned 
char *pDataBuff, unsigned int buffSize, 
ApiLogInfo *pApiLogInfo=NULL) 
Extract the information of one API 
function call from the API log file. More... 

WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions
--------------------------------------------
This function gets the current status of the API log. This function can be called 
periodically to monitor the API log state. 

◆OpenApiLogFile() [1/2]

WMX3APIFUNC 
OpenApiLogFile ( 
) 
WMX3APIFUNC 
OpenApiLogFile ( 
) 
char * 
pPath, 
FILE ** ppFile 
Open an API log file to extract information from the contents. 

Parameters 
[in] 
pPath The absolute or relative 
file path of the API log 
file to open. 
[out] 
ppFile A pointer to a FILE 
pointer that will return a 
pointer to a FILE object 
representing the opened 
file. 
Remarks 

This function opens an API log file that is created with the StartApiLog function. 
The StopApiLog function must first be called to close the file. 

See also 

Extracting the API Log Information 

◆OpenApiLogFile() [2/2]

WMX3APIFUNC 
OpenApiLogFile ( 
) 
WMX3APIFUNC 
OpenApiLogFile ( 
) 
wchar_t * 
pPath, 
FILE ** ppFile 
Open an API log file to extract information from the contents.
--------------------------------------------
WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More...
--------------------------------------------
Example Code for Extracting API Log Information 

FILE *pApiLogFile;
ApiLogInfo logInfo;
unsigned char dataBuff[262164];
wchar_t strBuff[131072]; 

//The file name should be replaced with the file name including the date Log->OpenApiLogFile(_T("C:\\Program Files\\SoftServo\\WMX3\\apilog.

//Extract API log informationwhile (wmxlib_Log->GetApiLogData(pApiLogFile, dataBuff, sizeof(dataBuff), 


 //Process data returned by ApiLogInfo

 //Make a branch to call ApiLogToString for all modules from which API 

if (logInfo.moduleId == ModuleId::WMX3Engine) {

wmxlib->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

else if (logInfo.moduleId == ModuleId::CoreMotion) {

wmxlib_CoreMotion->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

else if (logInfo.moduleId == ModuleId::Log) {

wmxlib_Log->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

//etc.

 //Process the data returned by ApiLogToString} 

//Close filewmxlib_Log->CloseApiLogFile(pApiLogFile); 



Memory Log
-----------------------------------------------------------------------------------
638. Instruction: Open an API log file to extract information from the contents.
A: OpenLogFile(pFilePath)
B: OpenApiLogFile(pPath)
C: IsDeviceValid()
D: CloseApiLogFile(pFile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
638. Model's answer: B
638. Correct answer: B
638. Result: Correct



Processing Question 639:
639. Context:
 Example Code for Extracting API Log Information 

FILE *pApiLogFile;
ApiLogInfo logInfo;
unsigned char dataBuff[262164];
wchar_t strBuff[131072]; 

//The file name should be replaced with the file name including the date Log->OpenApiLogFile(_T("C:\\Program Files\\SoftServo\\WMX3\\apilog.

//Extract API log informationwhile (wmxlib_Log->GetApiLogData(pApiLogFile, dataBuff, sizeof(dataBuff), 


 //Process data returned by ApiLogInfo

 //Make a branch to call ApiLogToString for all modules from which API 

if (logInfo.moduleId == ModuleId::WMX3Engine) {

wmxlib->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

else if (logInfo.moduleId == ModuleId::CoreMotion) {

wmxlib_CoreMotion->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

else if (logInfo.moduleId == ModuleId::Log) {

wmxlib_Log->ApiLogToString(dataBuff, 262164, strBuff, 131072);

}

//etc.

 //Process the data returned by ApiLogToString} 

//Close filewmxlib_Log->CloseApiLogFile(pApiLogFile); 



Memory Log
--------------------------------------------
◆OpenApiLogFile() [2/2]

WMX3APIFUNC 
OpenApiLogFile ( 
) 
WMX3APIFUNC 
OpenApiLogFile ( 
) 
wchar_t * 
pPath, 
FILE ** ppFile 
Open an API log file to extract information from the contents. 

Parameters 
[in] 
pPath The absolute or relative 
file path of the API log 
file to open. 
[out] 
ppFile A pointer to a FILE 
pointer that will return a 
pointer to a FILE object 
representing the opened 
file. 
Remarks 

This function is a variation of OpenApiLogFile that accepts a wchar_t array for the 
file path string. Use this function when using Unicode character sets. 

◆GetApiLogData() 
WMX3APIFUNC 
GetApiLogData ( FILE * pFile, 
unsigned char * pDataBuff, 
unsigned int buffSize, 
ApiLogInfo * pApiLogInfo = NULL) 
Extract the information of one API function call from the API log file. 
Parameters
--------------------------------------------
By default, only the command data (arguments passed to the WMX3 engine) of API 
function calls is saved to the API log file. If the moduleResp option is set, the response 
data (values returned from the WMX3 engine, including the error code) is also saved to 
the API log file. The command data and response data of an API function call are saved 
and extracted separately from the API log file (therefore, the GetApiLogData function 
must be called twice to extract both the command data and the response data). To 
match the command data to the response data, check the ApiLogInfo.logId values 
returned by GetApiLogData. The command data and the response data of the same 
API function call will share the same value for ApiLogInfo.logId. 

Example Code for Extracting API Log Information 

FILE *pApiLogFile;
ApiLogInfo logInfo;
unsigned char dataBuff[262164];
wchar_t strBuff[131072];
--------------------------------------------
},
    {
        "No": 729,
        "FunctionC++": "WMX3APIFUNC OpenApiLogFile(wchar_t *pPath, FILE **ppFile)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "log Class",
        "Instruction": "Open an API log file to extract information from the contents."
    },
    {
        "No": 730,
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize)",
        "FunctionPython": "def GetApiLogData(pFile, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": null
-----------------------------------------------------------------------------------
639. Instruction: Extract the information of one API function call from the API log file.
A: GetOutputData(buff, buffSize, dataSize)
B: GetApiLogData_ApiLogInfo(pFileName, bufferSize)
C: GetApiLogData_ApiLogInfo(pFile, buffSize)
D: CloseApiLogFile(pFile)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
639. Model's answer: C
639. Correct answer: C
639. Result: Correct



Processing Question 640:
640. Context:
 WMX3APIFUNC CloseApiLogFile (FILE *pFile) 
Close an API log file. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More...
--------------------------------------------
6. CloseApiLogFile 
This function closes the API log file. 
Saving Data to the API Log File 

The following figure illustrates the process of saving data to the API log file. 


Extracting Data From the API Log File 


The following figure illustrates the process to extracting data from the API log file. 


 


Configuring the API Log 

To use the API log, the SetApiLog function must first be called to configure the API log. 

The file path to save the API log file is specified by this function. The file path can be a 
full file path including the file name, or a directory path. If a directory path is specified, 
the file name of the API log file will be set to the default apilog.dat. The date and 
time that the API log file was created is appended to the file name.
--------------------------------------------
For additional information, see the link under "See also" below. 

See also 

Extracting the API Log Information 

◆ 
CloseApiLogFile() 

WMX3APIFU 
NC 
CloseApiLog 
File ( FILE * pFile ) 
WMX3APIFU 
NC 
CloseApiLog 
File ( FILE * pFile ) 
Close an API log file. 
Parameters 
[in] 
pFile A pointer to a FILE 
object that represents 
the opened API log file. 
Remarks 

This function closes an API log file that has been opened with the OpenApiLogFile 
function. 

 

UserMemory Class Reference 

This class contains user memory functions. 

Public Member Functions 

UserMemory (WMX3Api *f) 

Constructor to initialize an object of this 
class. The device created by the 
WMX3Api object passed to this 
constructor is used to execute API 
functions. Also see Devices. 

UserMemory (const UserMemory &src) 

Copy constructor to initialize an object of 
this class based on an existing object of 
this class. Also see Copy Operators.
--------------------------------------------
},
    {
        "No": 731,
        "FunctionC++": "WMX3APIFUNC GetApiLogData(FILE *pFile, unsigned char *pDataBuff, unsigned int buffSize, ApiLogInfo *pApiLogInfo=NULL)",
        "FunctionPython": "def GetApiLogData_ApiLogInfo(pFile, buffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "log Class",
        "Instruction": "Extract the information of one API function call from the API log file."
    },
    {
        "No": 732,
        "FunctionC++": "WMX3APIFUNC CloseApiLogFile(FILE *pFile)",
        "FunctionPython": "def CloseApiLogFile(pFile)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "log Class",
        "Instruction": "Close an API log file."
-----------------------------------------------------------------------------------
640. Instruction: Close an API log file.
A: CloseApiLogFile(pFile)
B: CloseLogFile(pLogFileHandle)
C: SetLog(channel, input)
D: ClearAllEvent()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
640. Model's answer: A
640. Correct answer: A
640. Result: Correct



Processing Question 641:
641. Context:
 },
    {
        "No": 1012,
        "FunctionC++": "static CCLINKAPIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Get a string representation of the specified error code. "
    },
    {
        "No": 1013,
        "FunctionC++": "static CCLINKAPIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
--------------------------------------------
commanded axes. 
This error is returned when a hardware 
limit switch is triggered while processing 
the function. 
UserMemoryAddressO 
utOfRange 
1573 0x625 User memory address is out of range. 
Verify that the user memory address is 
within range. 
UserMemorySizeOutOf 
Range 
1574 0x626 User memory size is out of range. 
Verify that the user memory size is 
within range. 
InvalidCommandProces 
singMode 
1575 0x627 
The current command processing mode 
does not support this function. 
Verify that the current command 
processing mode supports the function. 
The command processing mode is 
changed while recording functions to 
the API buffer. 
InterruptMismatch 1576 0x628 
The commanded axes have 
mismatched interrupts. 
Verify that the commanded axes are 
controlled by the same interrupt. 
ErrorCodeNotDefined 1577 0x629 Error code is not defined in this library. 
Verify that the library and module 
RTDLL versions match, then recompile 
the user application and restart the 
engine.
--------------------------------------------
AxisOutOfRange, 
AxisCountOutOfRange, DuplicateAxis, 
IOAddressOutOfRange, 

IOSizeOutOfRange, 
ChannelOutOfRange, 
ChannelUninitialized, ChannelInUse, 

ArgumentOutOfRange, 
ArgumentIsNull, 
PrevSettingsBeingApplied, 
ParamOutOfRange, 


IDOutOfRange, IDNotDefined, 
ResourceInUse, FileOperationFailed, 

StartingPreviousCommand, 
StringConversionError, NoMotion, 
ServoOffline, 

ServoOff, AxisAmpAlarm, 
AxisSoftLimit, AxisNearLimit, 

AxisExternalLimit, AxisHardLimit, 
UserMemoryAddressOutOfRange, 
UserMemorySizeOutOfRange, 

InvalidCommandProcessingMode, 
InterruptMismatch, 
ErrorCodeNotDefined, BufferTooSmall, 

RequestedBufferTooLarge, 
RequestedBufferTooSmall, 
ModuleIDOutOfRange, 
UpdatesListUninitialized, 

UpdatesListDoesNotMatchInstalledUp 
dates, UpdatesListTimeout, 
ChannelCountOutOfRange, 
UnknownError 
} 

Static Public Member Functions 

static int convertErrorCode (int errCode) 
Reserved. More... 

Member Enumeration Documentation
--------------------------------------------
ApiLogOpenFileFailed enum ErrorCode 

ApiLogQueueError enum va ErrorCode 

ApiLogReadFileFailed enum ErrorCode 

ApiLogWriteFileFailed enum ErrorCode 

ArgumentIsNull enum value ErrorCode 

ArgumentOutOfRange enum ErrorCode 

AxisAmpAlarm enum value ErrorCode 

AxisCountOutOfRange enu ErrorCode 

AxisExternalLimit enum val ErrorCode 

AxisHardLimit enum value ErrorCode 

AxisNearLimit enum value ErrorCode 

AxisNotServoOn enum valu EcErrorCode 

AxisOutOfRange enum valu ErrorCode 

AxisSoftLimit enum value ErrorCode 

BufferTooSmall enum value ErrorCode 

BusyReceivingAnotherAPICErrorCode 

CallbackFuncError enum va ErrorCode 

CallbackFuncInvalidMode e ErrorCode 

CallbackFuncInvalidState e ErrorCode 

CallbackFuncTimeOut enum ErrorCode 

CallbackMallocFailed enum ErrorCode 

CallbackThreadError enum ErrorCode 

CallbackThreadNull enum va ErrorCode 

CallbackThreadTimeOut en ErrorCode 

ChannelCountOutOfRange ErrorCode 

ChannelInUse enum value ErrorCode
-----------------------------------------------------------------------------------
641. Instruction: Get a string representation of the specified error code.
A: StartRampRateTrq(pTrqCommand, rampRate)
B: ConvertErrorCodeToString(code)
C: ErrorToString(errCode)
D: SetMAnalogDataUInt(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
641. Model's answer: C
641. Correct answer: C
641. Result: Correct



Processing Question 642:
642. Context:
 },
    {
        "No": 608,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "Io Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 609,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the raw data of an API log."
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 


data of an API log. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, char *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC TimestampToString (long long 
timestamp, wchar_t *pString, unsigned int 
size) 
Get a string representation of a 
timestamp. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]
--------------------------------------------
},
    {
        "No": 781,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, char *pString, unsigned int size)",
        "FunctionPython": "def ApiLogToString(pLogData, logDataSize)",
        "ReturnType": "string",
        "ReturnValue": "API log string",
        "Class": "WMX3Api Class",
        "Instruction": " Get a string representation of the raw data of an API log.  "
    },
    {
        "No": 782,
        "FunctionC++": "static WMX3APIFUNC ApiLogToString(unsigned char *pLogData, unsigned int logDataSize, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get a string representation of the raw data of an API log."
-----------------------------------------------------------------------------------
642. Instruction: Get a string representation of the raw data of an API log.
A: GetMBit(addr, bit)
B: GetParam_Axis(axis)
C: ApiLogToString(pLogData, logDataSize)
D: ApiLogDataToString(logData, dataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
642. Model's answer: C
642. Correct answer: C
642. Result: Correct



Processing Question 643:
643. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
-----------------------------------------------------------------------------------
643. Instruction: Get the version of the module library.
A: GetLibVersion()
B: SetMAnalogDataUShort(addr, analogData)
C: SdoUpload(slaveId, index, subindex, sdoBuffSize)
D: FetchLibraryVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
643. Model's answer: A
643. Correct answer: A
643. Result: Correct



Processing Question 644:
644. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
-----------------------------------------------------------------------------------
644. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: ErrorToString(errCode)
B: IsDeviceValid()
C: GetMAnalogDataCharEx(addr)
D: IsDeviceValid(deviceId: string)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
644. Model's answer: B
644. Correct answer: B
644. Result: Correct



Processing Question 645:
645. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll.
-----------------------------------------------------------------------------------
645. Instruction: Get the version of the module rtdll.
A: ClearPathIntplWithRotation(channel)
B: SetMAnalogDataInt(addr, analogData)
C: FetchVersionInfo()
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
645. Model's answer: D
645. Correct answer: D
645. Result: Correct



Processing Question 646:
646. Context:
 WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
Returns 
Value error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
WMX3APIFUNC 
SetMAnalogDataInt(int 
addr, int analogData); 
def 
SetMAnalogDataInt(addr, 
analogData) 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
Returns 
C++ 
Python 
Type 
Value 
SetMAnalogDataUInt(int 
addr, unsigned int 
analogData); 
def 
SetMAnalogDataUInt(addr 
, analogData) 
int 
error code 
Remarks 
WMX3APIFUNC 
Function 
C++ 
Python 
Type 
GetMBit(unsigned int 
addr, unsigned int bit, 
unsigned char *pData); 
def GetMBit(addr, bit) 
tuple 
Returns 
Value 
0 : int -error code 
1 : int -data 
Remarks
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
646. Instruction: Set the value of a user memory bit.
A: SetMAnalogDataInt(addr, analogData)
B: SetMBit(addr, bit, data)
C: SetBit(data_address, bit_position, new_bit_value)
D: SetOutBit(addr, bit, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
646. Model's answer: B
646. Correct answer: B
646. Result: Correct



Processing Question 647:
647. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
◆SetMBit() 

WMX3APIFUNC 
SetMBit ( 
WMX3APIFUNC 
SetMBit ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 

◆SetMByte() 
WMX3APIFUNC 
SetMByte ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 

◆SetMBytes() 

WMX3APIFUNC 
SetMBytes ( 
) 
WMX3APIFUNC 
SetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter.
--------------------------------------------
Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an unsigned int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆SetMBitEx() 

WMX3APIFUNC 
SetMBitEx ( 
WMX3APIFUNC 
SetMBitEx ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 

Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 
Remarks 

This function has a faster response time compared to SetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMByteEx()
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
647. Instruction: Set the value of a user memory byte.
A: SetMBitEx(addr, bit, data)
B: SetMemoryByte(address, value)
C: SetMAnalogDataUChar(addr, analogData)
D: SetMByte(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
647. Model's answer: D
647. Correct answer: D
647. Result: Correct



Processing Question 648:
648. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
648. Instruction: Set the value of multiple user memory bytes.
A: SetMemoryBytes(address, numBytes, data)
B: SetMAnalogDataUInt(addr, analogData)
C: SetMBytes(addr, size, pData)
D: SetOutBytesEx(addr, size, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
648. Model's answer: C
648. Correct answer: C
648. Result: Correct



Processing Question 649:
649. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
Function *pData, unsigned int 
count); 
Python 
def SetMBitsEx(pByte, 
pBit, pData, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataCharEx( 
int addr, char 
analogData); 
Python 
def 
SetMAnalogDataCharEx(a 
ddr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataUCharE 
x(int addr, unsigned 
char analogData); 
Python 
def 
SetMAnalogDataUCharEx 
(addr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataShortEx 
(int addr, short 
analogData);
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
-----------------------------------------------------------------------------------
649. Instruction: Set the value of multiple user memory bits.
A: SetMBits(pByte, pBit, pData, count)
B: SetMBit(addr, bit, data)
C: SetMultipleBits(pBuffer, startIndex, bitValues, numBits)
D: GetMAnalogDataUIntEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
649. Model's answer: A
649. Correct answer: A
649. Result: Correct



Processing Question 650:
650. Context:
 ◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte.
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Remarks 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory 
bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, 
and so on. The bits can be specified in any order. 


This function has a faster response time compared to SetMBits. 

Unlike the SetMBits function, the difference between the largest byte address and 
the smallest byte address can be equal to or larger than half of 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
650. Instruction: Set the value of user memory analog data spanning one byte.
A: SetMAnalogDataCharEx(addr, analogData)
B: SetAnalogDataChar(address, data)
C: SetMAnalogDataUInt(addr, analogData)
D: SetMAnalogDataChar(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
650. Model's answer: A
650. Correct answer: D
650. Result: Wrong



Processing Question 651:
651. Context:
 The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte.
--------------------------------------------
◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Remarks 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory 
bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, 
and so on. The bits can be specified in any order. 


This function has a faster response time compared to SetMBits. 

Unlike the SetMBits function, the difference between the largest byte address and 
the smallest byte address can be equal to or larger than half of 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
651. Instruction: Set the value of user memory analog data spanning one byte.
A: SetMAnalogDataUChar(addr, newAnalogData)
B: SetMAnalogDataUChar(addr, analogData)
C: SetMAnalogDataCharEx(addr, analogData)
D: SetMAnalogDataChar(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
651. Model's answer: D
651. Correct answer: B
651. Result: Wrong



Processing Question 652:
652. Context:
 Function *pData, unsigned int 
count); 
Python 
def SetMBitsEx(pByte, 
pBit, pData, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataCharEx( 
int addr, char 
analogData); 
Python 
def 
SetMAnalogDataCharEx(a 
ddr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataUCharE 
x(int addr, unsigned 
char analogData); 
Python 
def 
SetMAnalogDataUCharEx 
(addr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataShortEx 
(int addr, short 
analogData);
--------------------------------------------
Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
652. Instruction: Set the value of user memory analog data spanning two bytes.
A: SetMBits(pByte, pBit, pData, count)
B: SetAnalogDataShort(address, data)
C: SetMAnalogDataShortEx(addr, analogData)
D: SetMAnalogDataShort(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
652. Model's answer: C
652. Correct answer: D
652. Result: Wrong



Processing Question 653:
653. Context:
 Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. 

This function has a faster response time compared to SetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataShortEx() 

WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value.
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataUShort() 

WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. of the user memory. 

◆SetMAnalogDataShort() 

WMX3APIFUNC 
SetMAnalogDataSho 
rt ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rt ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
653. Instruction: Set the value of user memory analog data spanning two bytes.
A: SetMAnalogDataShortEx(addr, analogData)
B: SetAnalogDataUShort(addr, data)
C: SetMAnalogDataUShort(addr, analogData)
D: SetMBytesEx(addr, size, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
653. Model's answer: C
653. Correct answer: C
653. Result: Correct



Processing Question 654:
654. Context:
 Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
unsigned short type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataInt() 

WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆ 
SetMAnalogDataUInt() 

WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
654. Instruction: Set the value of user memory analog data spanning four bytes.
A: SetAnalogDataInt(addr, data)
B: SetMBit(addr, bit, data)
C: SetOutAnalogDataUInt(addr, analogData)
D: SetMAnalogDataInt(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
654. Model's answer: D
654. Correct answer: D
654. Result: Correct



Processing Question 655:
655. Context:
 Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆ 
SetMAnalogDataUInt() 

WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
This function has a faster response time compared to SetMAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataIntEx() 

WMX3APIFUNC 
SetMAnalogDataIntE 
WMX3APIFUNC 
SetMAnalogDataIntE 
x ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataUIntEx()
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
655. Instruction: Set the value of user memory analog data spanning four bytes.
A: GetMAnalogDataUInt(addr)
B: SetMAnalogDataIntEx(addr, analogData)
C: SetMAnalogDataUInt(addr, analogData)
D: SetMAnalogDataUIntUpdated(addr, newAnalogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
655. Model's answer: B
655. Correct answer: C
655. Result: Wrong



Processing Question 656:
656. Context:
 WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified 
unsigned int type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆GetMBit() 

WMX3APIFUNC 
GetMBit ( 
) 
WMX3APIFUNC 
GetMBit ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data.
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
656. Instruction: Get the value of a user memory bit.
A: GetInBit(addr, bit)
B: FetchBitAtMemoryAddress(addr, bit)
C: GetMAnalogDataInt(addr)
D: GetMBit(addr, bit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
656. Model's answer: D
656. Correct answer: D
656. Result: Correct



Processing Question 657:
657. Context:
 WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified 
unsigned int type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆GetMBit() 

WMX3APIFUNC 
GetMBit ( 
) 
WMX3APIFUNC 
GetMBit ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data.
--------------------------------------------
Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
-----------------------------------------------------------------------------------
657. Instruction: Get the value of a user memory byte.
A: GetInByte(addr)
B: GetMByte(addr)
C: GetMByteAtAddress(address)
D: SetMBits(pByte, pBit, pData, count)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
657. Model's answer: B
657. Correct answer: B
657. Result: Correct



Processing Question 658:
658. Context:
 GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
--------------------------------------------
WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
GetMBytesEx 
Yes 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataCharEx 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUCharEx 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShortEx 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShortEx 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataIntEx 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUIntEx 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 

 

Expedited User Memory Functions
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
658. Instruction: Get the value of multiple user memory bytes.
A: GetMegaBytes(address, size)
B: GetMBytes(addr, size)
C: GetOutBytes(addr, size)
D: SetMAnalogDataUShort(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
658. Model's answer: B
658. Correct answer: B
658. Result: Correct



Processing Question 659:
659. Context:
 This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetMAnalogDataChar() 

WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
unsigned int addr, 
char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads one byte of the user memory address space and returns the 
data as a char type analog data value. 

◆GetMAnalogDataUChar() 

WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte.
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
659. Instruction: Get the value of user memory analog data spanning one byte.
A: GetAnalogDataChar(address)
B: GetMAnalogDataUInt(addr)
C: GetMAnalogDataChar(addr)
D: GetMAnalogDataUChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
659. Model's answer: C
659. Correct answer: C
659. Result: Correct



Processing Question 660:
660. Context:
 Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
This function does not read the specified data atomically. If the data is overwritten 
by another thread at the same time, partially updated data may be read. 

◆GetMAnalogDataChar() 

WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
WMX3APIFUNC 
GetMAnalogDataCh 
ar ( 
) 
unsigned int addr, 
char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads one byte of the user memory address space and returns the 
data as a char type analog data value. 

◆GetMAnalogDataUChar() 

WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte.
--------------------------------------------
Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataCharEx() 

WMX3APIFUNC 
GetMAnalogDataCh 
arEx ( 
) 
WMX3APIFUNC 
GetMAnalogDataCh 
arEx ( 
) 
unsigned int addr, 
char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 
Remarks 

This function reads one byte of the user memory address space and returns the 
data as a char type analog data value. 

This function has a faster response time compared to GetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMAnalogDataUCharEx()
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
660. Instruction: Get the value of user memory analog data spanning one byte.
A: GetAnalogDataUChar(addr)
B: GetMAnalogDataUChar(addr)
C: GetLibVersion()
D: GetMAnalogDataCharEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
660. Model's answer: B
660. Correct answer: B
660. Result: Correct



Processing Question 661:
661. Context:
 WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the user memory address space and returns the 
data as an unsigned char type analog data value. 

◆GetMAnalogDataShort() 

WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
unsigned int addr, 
short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as a short type analog data value.
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
661. Instruction: Get the value of user memory analog data spanning two bytes.
A: GetMAnalogDataShort(addr)
B: GetInAnalogDataShort(addr)
C: FetchAnalogDataShort(addr)
D: SetMByte(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
661. Model's answer: A
661. Correct answer: A
661. Result: Correct



Processing Question 662:
662. Context:
 WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the user memory address space and returns the 
data as an unsigned char type analog data value. 

◆GetMAnalogDataShort() 

WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
unsigned int addr, 
short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as a short type analog data value.
-----------------------------------------------------------------------------------
662. Instruction: Get the value of user memory analog data spanning two bytes.
A: GetMAnalogDataUShort(addr)
B: GetInAnalogDataUShort(addr)
C: SetMAnalogDataUChar(addr, analogData)
D: GetAnalogDataUShort(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
662. Model's answer: A
662. Correct answer: A
662. Result: Correct



Processing Question 663:
663. Context:
 Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
-----------------------------------------------------------------------------------
663. Instruction: Get the value of user memory analog data spanning four bytes.
A: SetMBytes(addr, size, pData)
B: GetMAnalogDataInt(addr)
C: GetMAnalogDataIntEx(addr)
D: GetAnalogDataInt(address)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
663. Model's answer: B
663. Correct answer: B
663. Result: Correct



Processing Question 664:
664. Context:
 Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Remarks 

This function reads two bytes of the user memory address space and returns the 
data as an unsigned short type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not read atomically. In this case, if 
the data is overwritten by another thread at the same time, partially updated data 
may be read. 

◆GetMAnalogDataInt() 

WMX3APIFUNC 
GetMAnalogDataInt ( unsigned int addr, 
int * pAnalogData 
) 
WMX3APIFUNC 
GetMAnalogDataInt ( unsigned int addr, 
int * pAnalogData 
) 
Get the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an int type analog data value.
-----------------------------------------------------------------------------------
664. Instruction: Get the value of user memory analog data spanning four bytes.
A: GetMAnalogDataInt(addr)
B: GetMByteEx(addr)
C: GetMAnalogDataUInt(addr)
D: GetAnalogDataUInt(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
664. Model's answer: A
664. Correct answer: C
664. Result: Wrong



Processing Question 665:
665. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
665. Instruction: Set the value of a user memory bit.
A: SetMAnalogDataUCharEx(addr, analogData)
B: SetMBitEx(addr, bit, data)
C: SetBitExtended(address, bitPosition, value)
D: SetMByte(addr, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
665. Model's answer: B
665. Correct answer: B
665. Result: Correct



Processing Question 666:
666. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Remarks 

This function reads four bytes of the user memory address space and returns the 
data as an unsigned int type analog data value. 

If the address of the data read by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not read atomically. 
In this case, if the data is overwritten by another thread at the same time, partially 
updated data may be read. 

◆SetMBitEx() 

WMX3APIFUNC 
SetMBitEx ( 
WMX3APIFUNC 
SetMBitEx ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 

Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 
Remarks 

This function has a faster response time compared to SetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMByteEx()
--------------------------------------------
This function has a faster response time compared to SetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMByteEx() 

WMX3APIFUNC 
SetMByteEx ( 
) 
WMX3APIFUNC 
SetMByteEx ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetMByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBytesEx() 

WMX3APIFUNC 
SetMBytesEx ( 
) 
WMX3APIFUNC 
SetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes.
-----------------------------------------------------------------------------------
666. Instruction: Set the value of a user memory byte.
A: SetMByteEx(addr, data)
B: WriteMByteEx(addr, data)
C: GetMAnalogDataUShort(addr)
D: SetMBytesEx(addr, size, pData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
666. Model's answer: A
666. Correct answer: A
666. Result: Correct



Processing Question 667:
667. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
◆SetMBytesEx() 

WMX3APIFUNC 
SetMBytesEx ( 
) 
WMX3APIFUNC 
SetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetMBytes. 

Unlike the SetMBytes function, the size of the written data can be greater than 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBitsEx() 
WMX3APIFUNC 
SetMBitsEx ( unsigned int * pAddr,
--------------------------------------------
This function has a faster response time compared to SetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMByteEx() 

WMX3APIFUNC 
SetMByteEx ( 
) 
WMX3APIFUNC 
SetMByteEx ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 

Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 
Remarks 

This function has a faster response time compared to SetMByte. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBytesEx() 

WMX3APIFUNC 
SetMBytesEx ( 
) 
WMX3APIFUNC 
SetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes.
--------------------------------------------
◆SetMBit() 

WMX3APIFUNC 
SetMBit ( 
WMX3APIFUNC 
SetMBit ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 

◆SetMByte() 
WMX3APIFUNC 
SetMByte ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 

◆SetMBytes() 

WMX3APIFUNC 
SetMBytes ( 
) 
WMX3APIFUNC 
SetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter.
-----------------------------------------------------------------------------------
667. Instruction: Set the value of multiple user memory bytes.
A: SetMBytesEx(addr, size, pData)
B: SetOutBytes(addr, size, pData)
C: GetMBitEx(addr, bit)
D: SetMBytes(addr, numBytes, dataBlock)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
667. Model's answer: A
667. Correct answer: A
667. Result: Correct



Processing Question 668:
668. Context:
 Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More... 

WMX3APIFUNC SetMBitsEx (unsigned int *pAddr, 
unsigned int *pBit, unsigned char *pData, 
unsigned int count) 
Set the value of multiple user memory 
bits. More... 


WMX3APIFUNC SetMAnalogDataCharEx (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUCharEx (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShortEx (int addr, short 
analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShortEx (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData)
--------------------------------------------
Function *pData, unsigned int 
count); 
Python 
def SetMBitsEx(pByte, 
pBit, pData, count) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataCharEx( 
int addr, char 
analogData); 
Python 
def 
SetMAnalogDataCharEx(a 
ddr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataUCharE 
x(int addr, unsigned 
char analogData); 
Python 
def 
SetMAnalogDataUCharEx 
(addr, analogData) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetMAnalogDataShortEx 
(int addr, short 
analogData);
--------------------------------------------
◆SetMBytesEx() 

WMX3APIFUNC 
SetMBytesEx ( 
) 
WMX3APIFUNC 
SetMBytesEx ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to a unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter. 
Remarks 

This function has a faster response time compared to SetMBytes. 

Unlike the SetMBytes function, the size of the written data can be greater than 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMBitsEx() 
WMX3APIFUNC 
SetMBitsEx ( unsigned int * pAddr,
--------------------------------------------
◆SetMBit() 

WMX3APIFUNC 
SetMBit ( 
WMX3APIFUNC 
SetMBit ( 
unsigned int addr, 
unsigned int bit, 
unsigned char data 
) 
Set the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to set. 
[in] 
bit The bit address of the bit 
to set. 
[in] 
data The value to set the bit 
to. 

◆SetMByte() 
WMX3APIFUNC 
SetMByte ( 
) 
unsigned int addr, 
unsigned char data 
Set the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to set. 
[in] 
data The value to set the byte 
to. 

◆SetMBytes() 

WMX3APIFUNC 
SetMBytes ( 
) 
WMX3APIFUNC 
SetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Set the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
set. 
[in] 
pData A pointer to an unsigned 
char array that contains 
the values to set the 
bytes to. The size of the 
array must be greater 
than or equal to the size 
parameter.
-----------------------------------------------------------------------------------
668. Instruction: Set the value of multiple user memory bits.
A: UpdateBitsInByteEx(pByteData, bitPosition, newData, bitCount)
B: SetMBitsEx(pByte, pBit, pData, count)
C: SetOutBitsEx(pByte, pBit, pData, count)
D: GetMBytes(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
668. Model's answer: B
668. Correct answer: B
668. Result: Correct



Processing Question 669:
669. Context:
 ◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
This function has a faster response time compared to SetOutBits. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 



◆SetOutAnalogDataCharEx() 
WMX3APIFUNC 
SetOutAnalogDataC 
harEx ( int addr, 
char analogData 
) 
Set the value of output analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the output 
bytes to. 

Remarks 

This function sets one byte of the output address space to the specified char type 
analog data value. 

This function has a faster response time compared to SetOutAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetOutAnalogDataUCharEx() 

WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
WMX3APIFUNC 
SetOutAnalogDataU 
CharEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of output analog data spanning one byte.
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
Remarks 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory 
bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, 
and so on. The bits can be specified in any order. 


This function has a faster response time compared to SetMBits. 

Unlike the SetMBits function, the difference between the largest byte address and 
the smallest byte address can be equal to or larger than half of 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
669. Instruction: Set the value of user memory analog data spanning one byte.
A: SetOutAnalogDataCharEx(addr, analogData)
B: SetMAnalogDataCharEx(addr, analogData)
C: SetAnalogDataEx(addr, data)
D: SetMAnalogDataChar(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
669. Model's answer: B
669. Correct answer: B
669. Result: Correct



Processing Question 670:
670. Context:
 ◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
The difference between the largest byte address and the smallest byte address 
specified to this function must be less than half of 
maxUserMemoryReadWriteBytes. If the difference exceeds this limit, an error will 
be returned. 

◆SetMAnalogDataChar() 
WMX3APIFUNC 
SetMAnalogDataCh 
ar ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

◆SetMAnalogDataUChar() 

WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
SetMAnalogDataUC 
har ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte.
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
Remarks 

This function is equivalent to calling the SetMBit function multiple times, but can be 
faster due to the reduced overhead. There is no limit to the number of bits that may 
be specified at once. pAddr[0], pBit[0], and pData[0] specify the first user memory 
bit to set, pAddr[1], pBit[1], and pData[1] specify the second user memory bit to set, 
and so on. The bits can be specified in any order. 


This function has a faster response time compared to SetMBits. 

Unlike the SetMBits function, the difference between the largest byte address and 
the smallest byte address can be equal to or larger than half of 
maxUserMemoryReadWriteBytes. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte.
-----------------------------------------------------------------------------------
670. Instruction: Set the value of user memory analog data spanning one byte.
A: SetMAnalogDataUChar(addr, analogData)
B: SetMAnalogDataUCharEx(addr, analogData)
C: SetMAnalogDataCharEx(addr, analogData)
D: GetMAnalogDataShortEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
670. Model's answer: C
670. Correct answer: B
670. Result: Wrong



Processing Question 671:
671. Context:
 ◆SetMAnalogDataCharEx() 
WMX3APIFUNC 
SetMAnalogDataCh 
arEx ( 
) 
int 
addr, 
char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified char 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 


◆SetMAnalogDataUCharEx() 
WMX3APIFUNC 
SetMAnalogDataUC 
harEx ( 
) 
int 
addr, 
unsigned char analogData 
Set the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. 

This function has a faster response time compared to SetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataShortEx() 

WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value.
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
error code 
WMX3APIFUNC 
SetOutAnalogDataUChar 
Ex(int addr, unsigned 
char analogData); 
def 
SetOutAnalogDataUChar 
Ex(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataShort 
Ex(int addr, short 
analogData); 
def 
SetOutAnalogDataShortE 
x(addr, analogData) 
int 
error code 
WMX3APIFUNC 
SetOutAnalogDataUShor 
tEx(int addr, unsigned 
short analogData); 
def 
SetOutAnalogDataUShort 
Ex(addr, analogData) 
int 
error code
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
671. Instruction: Set the value of user memory analog data spanning two bytes.
A: SetMAnalogDataCharEx(addr, analogData)
B: SetOutAnalogDataShortEx(addr, analogData)
C: SetMAnalogDataShort(addr, data)
D: SetMAnalogDataShortEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
671. Model's answer: D
671. Correct answer: D
671. Result: Correct



Processing Question 672:
672. Context:
 Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. 

This function has a faster response time compared to SetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataShortEx() 

WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value.
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataUShort() 

WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
WMX3APIFUNC 
SetMAnalogDataUS 
hort ( 
) 
int 
addr, 
unsigned short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
-----------------------------------------------------------------------------------
672. Instruction: Set the value of user memory analog data spanning two bytes.
A: SetMAnalogDataUShortEx(addr, newAnalogData)
B: SetMAnalogDataUShortEx(addr, analogData)
C: SetMAnalogDataShort(addr, analogData)
D: GetMBytesEx(addr, size)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
672. Model's answer: B
672. Correct answer: B
672. Result: Correct



Processing Question 673:
673. Context:
 This function has a faster response time compared to SetMAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataIntEx() 

WMX3APIFUNC 
SetMAnalogDataIntE 
WMX3APIFUNC 
SetMAnalogDataIntE 
x ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataUIntEx()
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 

Remarks 

This function sets one byte of the user memory address space to the specified 
unsigned char type analog data value. 

This function has a faster response time compared to SetMAnalogDataUChar. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataShortEx() 

WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
WMX3APIFUNC 
SetMAnalogDataSho 
rtEx ( 
) 
int 
addr, 
short analogData 
Set the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
short type analog data value.
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
unsigned short type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataInt() 

WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆ 
SetMAnalogDataUInt() 

WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
-----------------------------------------------------------------------------------
673. Instruction: Set the value of user memory analog data spanning four bytes.
A: SetMAnalogDataUShortEx(addr, analogData)
B: SetAnalogData(addr, analogValues)
C: SetMAnalogDataUIntEx(addr, analogData)
D: SetMAnalogDataIntEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
673. Model's answer: D
673. Correct answer: D
673. Result: Correct



Processing Question 674:
674. Context:
 Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
This function has a faster response time compared to SetMAnalogDataUShort. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataIntEx() 

WMX3APIFUNC 
SetMAnalogDataIntE 
WMX3APIFUNC 
SetMAnalogDataIntE 
x ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. 

This function has a faster response time compared to SetMAnalogDataInt. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆SetMAnalogDataUIntEx()
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified int 
type analog data value. user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆ 
SetMAnalogDataUInt() 

WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
WMX3APIFUNC 
SetMAnalogDataUIn 
t ( 
) 
int 
addr, 
unsigned int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets two bytes of the user memory address space to the specified 
unsigned short type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 63, 127, 191, 255, etc.), the data is not set atomically. In this case, if the 
data is read by another thread at the same time, partially updated data may be read. 

◆SetMAnalogDataInt() 

WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
WMX3APIFUNC 
SetMAnalogDataInt ( 
) 
int 
addr, 
int analogData 
Set the value of user memory analog data spanning four bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks
-----------------------------------------------------------------------------------
674. Instruction: Set the value of user memory analog data spanning four bytes.
A: SetMAnalogDataUIntEx(addr, analogData)
B: SetMAnalogDataIntEx(addr, analogData)
C: GetMAnalogDataUShort(addr)
D: SetAnalogDataUIntEx(address, data)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
674. Model's answer: A
674. Correct answer: A
674. Result: Correct



Processing Question 675:
675. Context:
 WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
Parameters 
[in] 
addr The byte address of the 
first byte of the user 
memory data. 
[in] 
analogData The value of the analog 
data to set the user 
memory bytes to. 
Remarks 

This function sets four bytes of the user memory address space to the specified 
unsigned int type analog data value. of the user memory. 

If the address of the data set by this function crosses the boundary of a multiple of 
64 (addr is 61-63, 125-127, 189-191, 253-255, etc.), the data is not set atomically. In 
this case, if the data is read by another thread at the same time, partially updated 
data may be read. 

◆GetMBit() 

WMX3APIFUNC 
GetMBit ( 
) 
WMX3APIFUNC 
GetMBit ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 
Parameters 
[in] 
addr The byte address of the 
bit to get. 
[in] 
bit The bit address of the bit 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data.
--------------------------------------------
◆GetMBitEx() 

WMX3APIFUNC 
GetMBitEx ( 
) 
WMX3APIFUNC 
GetMBitEx ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 

Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMByteEx() 

WMX3APIFUNC 
GetMByteEx ( 
) 
WMX3APIFUNC 
GetMByteEx ( 
) 
unsigned int addr, 
unsigned char * pData 
Get the value of a user memory byte. 

Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMByte.
--------------------------------------------
Remarks 

This function is equivalent to calling the SetOutBitMaskBits function multiple times, 
but can be faster due to the reduced overhead. There is no limit to the number of 
bits that may be specified at once. pAddr[0], pBit[0], and pData[0] specify the first 
output bit to set, pAddr[1], pBit[1], and pData[1] specify the second output bit to set, 
and so on. The bits can be specified in any order. 

◆GetInBit() 

WMX3APIFUNC 
GetInBit ( 
) 
WMX3APIFUNC 
GetInBit ( 
) 
int 
int 
addr, 
bit, 
unsigned char * pData 
Get the value of an input bit. 
Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function obtains the input data that was read by the engine during the most 
recent interrupt (communication cycle). 

◆GetInByte()
-----------------------------------------------------------------------------------
675. Instruction: Get the value of a user memory bit.
A: GetInBit(addr, bit)
B: GetMBitEx(addr, bit)
C: GetLibVersion()
D: GetMBitRange(addr, start_bit, end_bit)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
675. Model's answer: B
675. Correct answer: B
675. Result: Correct



Processing Question 676:
676. Context:
 GetMBytesEx 
Yes 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataCharEx 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUCharEx 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShortEx 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShortEx 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataIntEx 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUIntEx 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 

 

Expedited User Memory Functions
--------------------------------------------
WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
--------------------------------------------
◆GetMBitEx() 

WMX3APIFUNC 
GetMBitEx ( 
) 
WMX3APIFUNC 
GetMBitEx ( 
) 
unsigned int addr, 
unsigned int bit, 
unsigned char * pData 
Get the value of a user memory bit. 

Parameters 
[in] 
[in] 
[out] 
addr 
bit 
pData 
The byte address of the 
bit to get. 
The bit address of the bit 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMBit. 

Because of the difference in the data flow channel, this function cannot be called 
from an ApiBuffer. 

◆GetMByteEx() 

WMX3APIFUNC 
GetMByteEx ( 
) 
WMX3APIFUNC 
GetMByteEx ( 
) 
unsigned int addr, 
unsigned char * pData 
Get the value of a user memory byte. 

Parameters 
[in] 
[out] 
addr 
pData 
The address of the byte 
to get. 
A pointer to a unsigned 
char that will receive the 
data. 
Remarks 

This function has a faster response time compared to GetMByte.
-----------------------------------------------------------------------------------
676. Instruction: Get the value of a user memory byte.
A: GetMBytesEx(addr, size)
B: GetMegabyteExtended(address)
C: GetMByteEx(addr)
D: GetInByteEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
676. Model's answer: C
676. Correct answer: C
676. Result: Correct



Processing Question 677:
677. Context:
 GetMBytesEx 
Yes 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataCharEx 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUCharEx 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShortEx 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShortEx 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataIntEx 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUIntEx 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 

 

Expedited User Memory Functions
--------------------------------------------
WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByte (unsigned int addr, unsigned 
char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytes (unsigned int addr, unsigned 
int size, unsigned char *pData) 

Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataChar (unsigned int addr, 
char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUChar (unsigned int 

addr, unsigned char *pAnalogData) 

Get the value of user memory analog 


data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShort (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More...
--------------------------------------------
◆GetMByte() 
WMX3APIFUNC 
GetMByte ( 
) 
unsigned int addr, 
unsigned char * pData 
Get the value of a user memory byte. 
Parameters 
[in] 
addr The address of the byte 
to get. 
[out] 
pData A pointer to a unsigned 
char that will receive the 
data. 


◆GetMBytes() 
WMX3APIFUNC 
GetMBytes ( 
) 
unsigned int addr, 
unsigned int size, 
unsigned char * pData 
Get the value of multiple user memory bytes. 

Parameters 
[in] 
addr The byte address of the 
head byte. 
[in] 
size The number of bytes to 
get. 
[out] 
pData A pointer to a unsigned 
char array that will 
receive the data. The 
size of the array must be 
greater than or equal to 
the size parameter. 

Remarks 

The maximum number of bytes that this function can read per function call is 
maxUserMemoryReadWriteBytes. If this size is exceeded, an error will be 
returned. To read a greater range of the user memory space, call this function 
multiple times.
--------------------------------------------
GetMBytes 
No 
multiple bytes from the 
user memory address 
space. 
GetMAnalogDataChar 
Yes 
This function reads one 
byte from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUChar 
This function reads one 
byte from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataShort 
This function reads two 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUShort 
This function reads two 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMAnalogDataInt 
This function reads four 
bytes from the user 
memory address space 
as a signed integer. 
GetMAnalogDataUInt 
This function reads four 
bytes from the user 
memory address space 
as an unsigned integer. 
GetMBitEx 
No 
This function reads one 
bit from the user memory 
address space. 
GetMByteEx 
This function reads one 
byte from the user 
memory address space. 
This function reads
-----------------------------------------------------------------------------------
677. Instruction: Get the value of multiple user memory bytes.
A: GetMBytes(addr, size)
B: GetMBytesEx(addr, size)
C: ReadMemoryBlockEx(address, blockSize)
D: IsDeviceValid()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
677. Model's answer: A
677. Correct answer: B
677. Result: Wrong



Processing Question 678:
678. Context:
 Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
678. Instruction: Get the value of user memory analog data spanning one byte.
A: GetMAnalogDataUCharEx(addr)
B: GetAnalogDataAtAddress(addr):
C: GetMAnalogDataCharEx(addr)
D: SetMAnalogDataUShortEx(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
678. Model's answer: A
678. Correct answer: C
678. Result: Wrong



Processing Question 679:
679. Context:
 Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
-----------------------------------------------------------------------------------
679. Instruction: Get the value of user memory analog data spanning one byte.
A: GetMAnalogDataUChar(addr)
B: SetMAnalogDataUIntEx(addr, analogData)
C: GetMAnalogDataUCharEx(addr)
D: GetAnalogDataUChar(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
679. Model's answer: C
679. Correct answer: C
679. Result: Correct



Processing Question 680:
680. Context:
 WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
WMX3APIFUNC 
GetMAnalogDataUC 
har ( 
) 
unsigned int addr, 
unsigned char * pAnalogData 
Get the value of user memory analog data spanning one byte. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads one byte of the user memory address space and returns the 
data as an unsigned char type analog data value. 

◆GetMAnalogDataShort() 

WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
WMX3APIFUNC 
GetMAnalogDataSh 
ort ( 
) 
unsigned int addr, 
short * pAnalogData 
Get the value of user memory analog data spanning two bytes. 

Parameters 
[in] 
addr The byte address of the 
first byte of the analog 
data. 
[out] 
pAnalogData A pointer to a char that 
will receive the data. 

Remarks 

This function reads two bytes of the user memory address space and returns the 
data as a short type analog data value.
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
-----------------------------------------------------------------------------------
680. Instruction: Get the value of user memory analog data spanning two bytes.
A: GetAnalogShortData(addr)
B: SetMAnalogDataShort(addr, analogData)
C: GetMAnalogDataShortEx(addr)
D: GetMAnalogDataUShortEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
680. Model's answer: C
680. Correct answer: C
680. Result: Correct



Processing Question 681:
681. Context:
 WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 

WMX3APIFUNC GetInAnalogDataIntEx (int addr, int 
*pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInAnalogDataUIntEx (int addr, 
unsigned int *pAnalogData) 

Get the value of input analog data 
spanning four bytes. More... 

WMX3APIFUNC GetOutBitEx (int addr, int bit, unsigned 
char *pData) 
Get the value of an output bit. More... 
WMX3APIFUNC GetOutByteEx (int addr, unsigned char 
*pData) 
Get the value of an output byte. More... 

WMX3APIFUNC GetOutBytesEx (int addr, int size, 

unsigned char *pData) 

Get the value of multiple output bytes. 

More... 

WMX3APIFUNC GetOutAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of output analog data 
spanning one byte. More...
-----------------------------------------------------------------------------------
681. Instruction: Get the value of user memory analog data spanning two bytes.
A: GetInAnalogDataUShortEx(addr)
B: GetMAnalogDataUShortEx(addr)
C: GetAnalogDataUShortExtended(address)
D: SetMAnalogDataUInt(addr, analogData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
681. Model's answer: B
681. Correct answer: B
681. Result: Correct



Processing Question 682:
682. Context:
 Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
WMX3APIFUNC SetOutAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of output analog data 
spanning four bytes. More... 

WMX3APIFUNC GetInBitEx (int addr, int bit, unsigned char 
*pData) 
Get the value of an input bit. More... 
WMX3APIFUNC GetInByteEx (int addr, unsigned char 
*pData) 
Get the value of an input byte. More... 

WMX3APIFUNC GetInBytesEx (int addr, int size, unsigned 

char *pData) 

Get the value of multiple input bytes. 

More... 

WMX3APIFUNC GetInAnalogDataCharEx (int addr, char 
*pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataUCharEx (int addr, 
unsigned char *pAnalogData) 

Get the value of input analog data 
spanning one byte. More... 

WMX3APIFUNC GetInAnalogDataShortEx (int addr, short 
*pAnalogData) 

Get the value of input analog data 
spanning two bytes. More... 


WMX3APIFUNC GetInAnalogDataUShortEx (int addr, 
unsigned short *pAnalogData)
-----------------------------------------------------------------------------------
682. Instruction: Get the value of user memory analog data spanning four bytes.
A: GetInAnalogDataUIntEx(addr)
B: SetMAnalogDataShortEx(addr, analogData)
C: FetchAnalogDataIntByAddressEx(address)
D: GetMAnalogDataIntEx(addr)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
682. Model's answer: D
682. Correct answer: D
682. Result: Correct



Processing Question 683:
683. Context:
 Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataIntEx (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUIntEx (int addr, 
unsigned int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char *pData) 

Get the value of a user memory bit. 

More... 

WMX3APIFUNC GetMByteEx (unsigned int addr, unsigned 

char *pData) 

Get the value of a user memory byte. 

More... 

WMX3APIFUNC GetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 


Get the value of multiple user memory 
bytes. More... 

WMX3APIFUNC GetMAnalogDataCharEx (unsigned int 
addr, char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData)
--------------------------------------------
Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataUCharEx (unsigned int 
addr, unsigned char *pAnalogData) 

Get the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC GetMAnalogDataShortEx (unsigned int 
addr, short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataUShortEx (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataIntEx (unsigned int 
addr, int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUIntEx (unsigned int 
addr, unsigned int *pAnalogData) 
Get the value of user memory analog 
data spanning four bytes. More... 
WMX3APIFUNC GetUserMemoryAddress (void **pptr) 
Get a pointer to the memory address of 
the user memory address space. More... 

Static Public Member Functions
--------------------------------------------
WMX3APIFUNC GetMAnalogDataUShort (unsigned int 
addr, unsigned short *pAnalogData) 

Get the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC GetMAnalogDataInt (unsigned int addr, 
int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMAnalogDataUInt (unsigned int addr, 
unsigned int *pAnalogData) 

Get the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMBitEx (unsigned int addr, unsigned 

int bit, unsigned char data) 

Set the value of a user memory bit. 

More... 

WMX3APIFUNC SetMByteEx (unsigned int addr, unsigned 

char data) 

Set the value of a user memory byte. 

More... 

WMX3APIFUNC SetMBytesEx (unsigned int addr, 
unsigned int size, unsigned char *pData) 

Set the value of multiple user memory 
bytes. More...
--------------------------------------------
WMX3APIFUNC SetMAnalogDataChar (int addr, char 
analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataUChar (int addr, 
unsigned char analogData) 

Set the value of user memory analog 
data spanning one byte. More... 

WMX3APIFUNC SetMAnalogDataShort (int addr, short 


analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataUShort (int addr, 
unsigned short analogData) 

Set the value of user memory analog 
data spanning two bytes. More... 

WMX3APIFUNC SetMAnalogDataInt (int addr, int 
analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC SetMAnalogDataUInt (int addr, unsigned 
int analogData) 

Set the value of user memory analog 
data spanning four bytes. More... 

WMX3APIFUNC GetMBit (unsigned int addr, unsigned int 

bit, unsigned char *pData) 

Get the value of a user memory bit. 

More...
-----------------------------------------------------------------------------------
683. Instruction: Get the value of user memory analog data spanning four bytes.
A: GetMAnalogDataInt(addr)
B: SetMAnalogDataUChar(addr, analogData)
C: GetMAnalogDataUIntEx(addr)
D: GetAnalogMeasurementDataUintExtended(address)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
683. Model's answer: C
683. Correct answer: C
683. Result: Correct



Processing Question 684:
684. Context:
 static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
Remarks 

This function returns a string representation of the specified error code. The error 
code must be defined in the ErrorCode enum. All errors returned by functions in 
class WMX3Api will be defined in this enum. Errors returned by functions in other 
classes may not be defined in this enum, and when such errors are passed to this 
function, an ErrorCodeNotDefined error will be returned and pString will contain 
the string representation of this error. 

If pString is too small to contain the entire string representation of the error code, 
pString will be set to an empty string. An array size of 256 characters will be enough 
to hold all string representations. 

This function is static, and may be called without declaring an instance of the 
WMX3Api class or creating a device. 


◆ErrorToString() [2/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
wchar_t * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code.
--------------------------------------------
},
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
-----------------------------------------------------------------------------------
684. Instruction: Get a string representation of the specified error code.
A: ErrorToString(errCode)
B: IsDeviceValid()
C: GetAllDevices()
D: ErrorToStringFormatted(errorCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
684. Model's answer: A
684. Correct answer: A
684. Result: Correct



Processing Question 685:
685. Context:
 Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
[2/2] 


static 
WMX3APIFUNC 
ApiLogToString ( 
unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

◆ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
--------------------------------------------
Parameters 
[in] 
pLogData A char array containing 
the raw data. 
[in] 
logDataSize The size of the 
pLogData char array. 
This size must be equal 
to or greater than the 
size of the raw data. 
[out] 
pString A char array that will 
contain the string 
representation of the raw 
data of the API log. 
[in] 
size The size of the pString 
char array in number of 
characters. 
Remarks 

This function converts the raw data for one API function call that was extracted from 
the API log with the GetApiLogData function. 

See also 

Extracting the API Log Information 

◆ApiLogToString() [2/2]

ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
ApiLogToString() [2/2]
static 
WMX3APIFUNC 
ApiLogToString ( unsigned char * pLogData, 
unsigned int logDataSize, 
wchar_t * 
pString, 
unsigned int size 
) 
Get a string representation of the raw data of an API log.
-----------------------------------------------------------------------------------
685. Instruction: Get a string representation of the raw data of an API log.
A: ApiLogToString(pLogData, logDataSize)
B: GetOutAnalogDataUInt(addr)
C: ApiLogDataToString(logData, dataSize)
D: SetWatchdog(watchdog)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
685. Model's answer: A
685. Correct answer: A
685. Result: Correct



Processing Question 686:
686. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
CreateDevice function from the 
WMX3Api object that was passed to the 
constructor of this class. More... 

WMX3APIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

WMX3APIFUNC SetEvent (int *pId, EventInput 
*pEventInput, EventOutput 
*pEventOutput, EventOption 
*pOption=NULL) 
Set an event. More... 

WMX3APIFUNC SetEvent (int *pId, EventInput 
*pEventInput, EventOutput 
*pEventOutput, int id, EventOption 
*pOption=NULL) 
Set an event. More... 

WMX3APIFUNC GetEventModuleId (int id, int 
*pInputModuleId, int *pOutputModuleId) 

Get the input function module ID and 
output function module ID of an existing 
event. More... 

WMX3APIFUNC GetEvent (int id, EventInput 
*pEventInput, EventOutput 
*pEventOutput, EventOption 
*pOption=NULL) 
Get the parameters of an event. More... 

WMX3APIFUNC GetEventOption (int id, EventOption 
*pOption)
--------------------------------------------
Function *pRevisionVersion, int 
*pFixVersion); 
Python def GetLibVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
Function 
C++ bool IsDeviceValid(); 
Python def IsDeviceValid() 
Returns 
Type bool 
Value 
Whether the device is 
alive 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion); 
Python def GetVersion() 
Type tuple 
0 : int -error code 
1 : int
-----------------------------------------------------------------------------------
686. Instruction: Get the version of the module library.
A: GetLibraryVersion()
B: SetDeviceWaitEvent(errCode)
C: Execute(channel)
D: GetLibVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
686. Model's answer: D
686. Correct answer: D
686. Result: Correct



Processing Question 687:
687. Context:
 Di 
git Version Type Version Meaning What the user should do when the 
version is incremented 
A 
major version 
number 
The major version number of the product, 
fixed at 3 for WMX3. 
This number will not be updated for follow-on 
updates of the same product line. Migration 
to a new product with an update of this 
number typically requires an extensive user 
application redesign. 
B 
minor version 
number 
A number that manages the need for code 
changes in the user application. example, 
this means updates such as changing the 
argument type of a WMX3 function, deleting 
a function, changing a structure member, or 
changing the name of a variable. 
WMX3 update installations that involve an 
increment of this number may result in 
compilation errors in the user application. It 
is necessary to update the code and 
redesign the user application. 
C 
revision version 
number 
A number that manages the need to rebuild 
the user application. example, this means
--------------------------------------------
Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the 


returned engine.majorVersion, engine.minorVersion, engine.revisionVersion, and engine.fixVersion values. 

IMDLL Version Number 
The IMDLL (typically IMDLL.dll) has a version number of the form A.B. 
A is the version number. 
B is the revision number. 
These version numbers are independent of the numbering scheme for the other files. The IMDLL file that is packaged with 

the installer should always be used. 
The IMDLL version number can be obtained using the GetIMDllVersion function. It can also be obtained using the 
GetModulesInfo function, in which case the version numbers are contained in the returned engine.imlibVersion and 
engine.imlibRevision values. 

Utility Version Number 

Utility applications of WMX3 have version numbers as follows.
--------------------------------------------
Function *pVersion, int 
*pRevision); 
Python def GetIMDllVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -version 
2 : int -revision 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
PrintToFile(const char* 
filePath, const char * 
format, ...); 
Python 
def PrintToFile(filePath, 
format) 
Returns Type int 
Value error code 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
PrintToFile(const 
wchar_t* filePath, const 
wchar_t * format, ...); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
Python 
static WMX3APIFUNC 
PrintToFileIfExist(const 
char* filePath, const 
char * format, ...); 
def 
PrintToFileIfExist(filePath,
--------------------------------------------
is necessary to update the code and 
redesign the user application. 
C 
revision version 
number 
A number that manages the need to rebuild 
the user application. example, this means 
updates such as binary updates to the 
WMX3 static libraries or changes to the 
order of structure members. 
An update installation of WMX3 with this 
number increment will not cause a 
compilation error in the user application, but 
a rebuild of the user application must be 
required without fail. 
D fix version number 
This number manages changes to the user 
application that do not require updating. 
example, it means a modification or 
improvement of an internal process of 
WMX3. 
An update installation of WMX3 with this 
number increment do not require updating 
the user application.
-----------------------------------------------------------------------------------
687. Instruction: Get the version of the IMDll.
A: GetImDllVersion()
B: GetIMDllVersion()
C: SetWatchdog(watchdog)
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
687. Model's answer: B
687. Correct answer: B
687. Result: Correct



Processing Question 688:
688. Context:
 },
    {
        "No": 787,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFileIfExist(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 788,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
--------------------------------------------
},
    {
        "No": 785,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFile(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 786,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetIMDllVersion() 

static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
int * 
pVersion, 
int * pRevision 
Get the version of the IMDll. 

Parameters 
[out] 
pVersion The version number. 
[out] 
pRevision The revision number. 

Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [1/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const char * filePath, 
const char * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The char string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks
--------------------------------------------
This function appends a formatted string to a file. If the file does not exist, a new file 
is created. 

The char string after formatting must be 1024 characters or less. If the char string 
after formatting exceeds 1024 characters, the BufferTooSmall error is returned. 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [2/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const wchar_t * filePath, 
const wchar_t * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A wchar_t array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The wchar_t string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks
-----------------------------------------------------------------------------------
688. Instruction: Append a string to a file.
A: OpenApiLogFile(pPath)
B: SaveToFile(file_path, file_format)
C: PrintToFile(filePath, format)
D: SetWatchdog(watchdog)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
688. Model's answer: C
688. Correct answer: C
688. Result: Correct



Processing Question 689:
689. Context:
 },
    {
        "No": 787,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFileIfExist(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
    },
    {
        "No": 788,
        "FunctionC++": "static WMX3APIFUNC PrintToFileIfExist(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file."
--------------------------------------------
},
    {
        "No": 785,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const char *filePath, const char *format,...)",
        "FunctionPython": "def PrintToFile(filePath, format)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
    },
    {
        "No": 786,
        "FunctionC++": "static WMX3APIFUNC PrintToFile(const wchar_t *filePath, const wchar_t *format,...)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Append a string to a file. "
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetIMDllVersion() 

static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
static 
WMX3APIFUNC 
GetIMDllVersion ( 
) 
int * 
pVersion, 
int * pRevision 
Get the version of the IMDll. 

Parameters 
[out] 
pVersion The version number. 
[out] 
pRevision The revision number. 

Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆PrintToFile() [1/4]

static 
WMX3APIFUNC 
PrintToFile ( 
static 
WMX3APIFUNC 
PrintToFile ( 
const char * filePath, 
const char * format, 
... 
) 
Append a string to a file. 
Parameters 
[in] 
[in] 
filePath 
format 
A char array that 
contains the file path of 
the file to append to as a 
null-terminated string. 
The char string to 
append. This argument 
can contain format 
specifiers followed by 
additional arguments in 
the same manner as the 
C/C++ printf() function. 
Remarks
--------------------------------------------
static WMX3APIFUNC PrintToFileIfExist (const wchar_t 

*filePath, const wchar_t *format,...) 

Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const char *filePath, 
int charsToPrint, const char *buff) 
Append a string to a file. More... 
static WMX3APIFUNC PrintToFileIfExist (const wchar_t 
*filePath, int charsToPrint, const wchar_t 
*buff) 
Append a string to a file. More... 

static WMX3APIFUNC GetStdOutStr (char *buff, int buffSize, 


unsigned char *isWideChar, int *strlen) 

Get the character string stored in the 
WMX3 engine message output buffer. 

More... 

static WMX3APIFUNC GetStdOutDataSize () 
Get the size of the string stored in the 
WMX3 engine message output buffer. 
More... 

static WMX3APIFUNC ClearStdOut () 
Clear the string stored in the WMX3 
engine message output buffer. More... 

static WMX3APIFUNC ReleaseStdOut () 
Release resources related to the WMX3 
engine message output buffer. More... 

Public Attributes 

HANDLE dev
-----------------------------------------------------------------------------------
689. Instruction: Append a string to a file.
A: GetWatchDog()
B: Export_AxisPrm(pPath, pAxisParam)
C: PrintToFileIfExist(filePath, format)
D: SaveFileIfExists(filePath, fileFormat)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
689. Model's answer: C
689. Correct answer: C
689. Result: Correct



Processing Question 690:
690. Context:
 Remarks 

This function gets the string stored in the WMX3 engine message output buffer. By 
setting "2" to the StdOut key in Module.ini, the WMX3 engine message will be 
output to the message output buffer. If a value other than "2" is set in the StdOut key 
of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be 
acquired with this function. (For details, see the description of Module.ini in 


GeneralHelp.) 

When a string is obtained from the message output buffer using this function, the 
obtained string is deleted from the message output buffer. If the size of the specified 
output buffer is smaller than the size of the string stored in the message output 
buffer, the substring that can fit in the specified output buffer size is obtained. 

If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetStdOutStr() 
static 
WMX3APIFUNC 

GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
Get the character string stored in the WMX3 engine message output buffer. 

Parameters 
[out] 
buff A buffer that outputs the 
character string stored in 
the message output 
buffer. 
[in] 
buffSize The size of the buffer 
that outputs the 
character string stored in 
the message output 
buffer. 
[out] 
isWideChar If 1, wide characters are 
stored in message 
output buffer. If 0, 
multibyte characters are 
stored in the message 
output buffer. 
[out] 
strlen Number of characters in 
the string that was 
obtained from the 
message output buffer. 

Remarks
--------------------------------------------
format) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
PrintToFileIfExist(const 
wchar_t* filePath, const 
wchar_t * format, ...); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
GetStdOutStr(char* buff, 
int buffSize, unsigned 
char* isWideChar, int* 
strlen); 
Python def GetStdOutStr() 
Returns 
Type string 
Value WMX3 engine message 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
GetStdOutDataSize(); 
Python def GetStdOutDataSize(); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
static WMX3APIFUNC 
ClearStdOut(); 
def ClearStdOut();
--------------------------------------------
If the specified timeout interval is below the minimum timer period, no error is 
returned and the thread pauses execution for at least the minimum timer period. 

Even if the timeout interval is greater than or equal to the minimum timer period, the 
thread may pause for a minimum of several tens of microseconds. 

◆PrintToServerConsole() [1/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const char * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The char string to print. 
This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function signals the engine to print a formatted string to the Rtx Server 
Console. The Rtx Server Console is a component of the RTX operating system that 
displays messages to the user in Windows space. 

◆PrintToServerConsole() [2/2]
-----------------------------------------------------------------------------------
690. Instruction: Get the character string stored in the WMX3 engine message output buffer.
A: PrintToServerConsole(format)
B: GetStatistic()
C: GetStandardOutputString()
D: GetStdOutStr()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
690. Model's answer: D
690. Correct answer: D
690. Result: Correct



Processing Question 691:
691. Context:
 If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆GetStdOutDataSize() 
static 
WMX3APIFUNC 
GetStdOutData 
Size ( ) 
Get the size of the string stored in the WMX3 engine message output buffer. 

Remarks 

This function gets the size of the string stored in the WMX3 engine message output 
buffer. If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks
--------------------------------------------
},
    {
        "No": 789,
        "FunctionC++": "static WMX3APIFUNC GetStdOutStr(char *buff, int buffSize, unsigned char *isWideChar, int *strlen)",
        "FunctionPython": "def GetStdOutStr()",
        "ReturnType": "string",
        "ReturnValue": "WMX3 engine message",
        "Class": "WMX3Api Class",
        "Instruction": "Get the character string stored in the WMX3 engine message output buffer. "
    },
    {
        "No": 790,
        "FunctionC++": "static WMX3APIFUNC GetStdOutDataSize()",
        "FunctionPython": "def GetStdOutDataSize()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the size of the string stored in the WMX3 engine message output buffer. "
--------------------------------------------
Remarks 

This function gets the string stored in the WMX3 engine message output buffer. By 
setting "2" to the StdOut key in Module.ini, the WMX3 engine message will be 
output to the message output buffer. If a value other than "2" is set in the StdOut key 
of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be 
acquired with this function. (For details, see the description of Module.ini in 


GeneralHelp.) 

When a string is obtained from the message output buffer using this function, the 
obtained string is deleted from the message output buffer. If the size of the specified 
output buffer is smaller than the size of the string stored in the message output 
buffer, the substring that can fit in the specified output buffer size is obtained. 

If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆GetStdOutStr() 
static 
WMX3APIFUNC 

GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
GetStdOutStr ( char * buff, 
int buffSize, 
unsigned char * isWideChar, 
int * strlen 
) 
Get the character string stored in the WMX3 engine message output buffer. 

Parameters 
[out] 
buff A buffer that outputs the 
character string stored in 
the message output 
buffer. 
[in] 
buffSize The size of the buffer 
that outputs the 
character string stored in 
the message output 
buffer. 
[out] 
isWideChar If 1, wide characters are 
stored in message 
output buffer. If 0, 
multibyte characters are 
stored in the message 
output buffer. 
[out] 
strlen Number of characters in 
the string that was 
obtained from the 
message output buffer. 

Remarks
-----------------------------------------------------------------------------------
691. Instruction: Get the size of the string stored in the WMX3 engine message output buffer.
A: GetStdOutDataSize()
B: GetModuleInfo(moduleId)
C: RetrieveStdOutDataSize():
D: GetHomeData()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
691. Model's answer: A
691. Correct answer: A
691. Result: Correct



Processing Question 692:
692. Context:
 If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆GetStdOutDataSize() 
static 
WMX3APIFUNC 
GetStdOutData 
Size ( ) 
Get the size of the string stored in the WMX3 engine message output buffer. 

Remarks 

This function gets the size of the string stored in the WMX3 engine message output 
buffer. If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks
--------------------------------------------
},
    {
        "No": 791,
        "FunctionC++": "static WMX3APIFUNC ClearStdOut()",
        "FunctionPython": "def ClearStdOut()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Clear the string stored in the WMX3 engine message output buffer."
    },
    {
        "No": 792,
        "FunctionC++": "static WMX3APIFUNC ReleaseStdOut()",
        "FunctionPython": "def ReleaseStdOut()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Release resources related to the WMX3 engine message output buffer."
--------------------------------------------
◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks 

This function clears the string stored in the WMX3 engine message output buffer. If 
this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ReleaseStdOut() 
static 
WMX3APIFUNC 
ReleaseStdOut ( 
) 
Release resources related to the WMX3 engine message output buffer. 

Remarks 

This function releases resources opened by the WMX3 engine when any of the 
following functions is called. 


GetStdOutStr 
GetStdOutDataSize 
ClearStdOut 


If any of the above functions is called, this function must be called before the 
program ends to release resources. 

◆IsDeviceValid() 

bool 
IsDeviceValibool 
IsDeviceVali
d
--------------------------------------------
Remarks 

This function gets the string stored in the WMX3 engine message output buffer. By 
setting "2" to the StdOut key in Module.ini, the WMX3 engine message will be 
output to the message output buffer. If a value other than "2" is set in the StdOut key 
of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be 
acquired with this function. (For details, see the description of Module.ini in 


GeneralHelp.) 

When a string is obtained from the message output buffer using this function, the 
obtained string is deleted from the message output buffer. If the size of the specified 
output buffer is smaller than the size of the string stored in the message output 
buffer, the substring that can fit in the specified output buffer size is obtained. 

If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends.
-----------------------------------------------------------------------------------
692. Instruction: Clear the string stored in the WMX3 engine message output buffer.
A: GetStdOutDataSize()
B: ClearStdOut()
C: SetWatchdog(watchdog)
D: ClearConsoleOutput()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
692. Model's answer: B
692. Correct answer: B
692. Result: Correct



Processing Question 693:
693. Context:
 If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆GetStdOutDataSize() 
static 
WMX3APIFUNC 
GetStdOutData 
Size ( ) 
Get the size of the string stored in the WMX3 engine message output buffer. 

Remarks 

This function gets the size of the string stored in the WMX3 engine message output 
buffer. If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks
--------------------------------------------
◆ClearStdOut() 

static 
WMX3APIFUNC 
ClearStdOut ( 
static 
WMX3APIFUNC 
ClearStdOut ( 
) 
Clear the string stored in the WMX3 engine message output buffer. 

Remarks 

This function clears the string stored in the WMX3 engine message output buffer. If 
this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends. 

◆ReleaseStdOut() 
static 
WMX3APIFUNC 
ReleaseStdOut ( 
) 
Release resources related to the WMX3 engine message output buffer. 

Remarks 

This function releases resources opened by the WMX3 engine when any of the 
following functions is called. 


GetStdOutStr 
GetStdOutDataSize 
ClearStdOut 


If any of the above functions is called, this function must be called before the 
program ends to release resources. 

◆IsDeviceValid() 

bool 
IsDeviceValibool 
IsDeviceVali
d
--------------------------------------------
static WMX3APIFUNC ReleaseStdOut () 
Release resources related to the WMX3 
engine message output buffer. More... 

Public Attributes 

HANDLE dev 

Reserved. 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
static 
WMX3APIFUNC 
ErrorToString ( 
int 
char * 
errCode, 
pString, 
unsigned int size 
) 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks
--------------------------------------------
Remarks 

This function gets the string stored in the WMX3 engine message output buffer. By 
setting "2" to the StdOut key in Module.ini, the WMX3 engine message will be 
output to the message output buffer. If a value other than "2" is set in the StdOut key 
of Module.ini, or if the StdOut key is not set, the WMX3 engine message cannot be 
acquired with this function. (For details, see the description of Module.ini in 


GeneralHelp.) 

When a string is obtained from the message output buffer using this function, the 
obtained string is deleted from the message output buffer. If the size of the specified 
output buffer is smaller than the size of the string stored in the message output 
buffer, the substring that can fit in the specified output buffer size is obtained. 

If this function is used, resources are reserved in the WMX3 engine, and it is 
necessary to release the resources by calling the ReleaseStdOut function before 
the program ends.
-----------------------------------------------------------------------------------
693. Instruction: Release resources related to the WMX3 engine message output buffer.
A: ReleaseStdOutBuffer():
B: ReleaseStdOut()
C: ReleaseEStop()
D: CompareWindowsUpdates()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
693. Model's answer: B
693. Correct answer: B
693. Result: Correct



Processing Question 694:
694. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
-----------------------------------------------------------------------------------
694. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: GetMAnalogDataInt(addr)
B: IsValidDevice()
C: IsDeviceValid()
D: GetModuleSuspend()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
694. Model's answer: C
694. Correct answer: C
694. Result: Correct



Processing Question 695:
695. Context:
 },
    {
        "No": 440,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 446,
        "FunctionC++": "WMX3APIFUNC StartPathIntpl3DPos(PathIntpl3DCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntpl3DAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntpl3DPos(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position 3D path interpolation motion. This motion command combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 441,
        "FunctionC++": "WMX3APIFUNC StartPathIntplMov(PathIntplCommand*pPathIntplCommand,\u00a0unsigned\u00a0int\u00a0numAddlCommands=0,\u00a0PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplMov(pPathIntplCommand, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start a relative position path interpolation motion command. This motion combines line interpolation and circular interpolation in one path."
--------------------------------------------
},
    {
        "No": 444,
        "FunctionC++": "WMX3APIFUNC StartPathIntplPos(PathIntplCommand *pPathIntplCommand, TriggerEvents *pTriggerEvents, unsigned int numAddlCommands=0, PathIntplAdditionalCommand *pPathIntplAddlCommand=NULL)",
        "FunctionPython": "def StartPathIntplPos_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "AdvancedMotion Class",
        "Instruction": "Start an absolute position triggered path interpolation motion command with multiple trigger events. This motion combines line interpolation and circular interpolation in one path."
-----------------------------------------------------------------------------------
695. Instruction: Start the WMX3 engine without creating a device.
A: RestartEngine(path)
B: InitializeEngine(filePath)
C: StartEngine(path)
D: GetLibVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
695. Model's answer: C
695. Correct answer: C
695. Result: Correct



Processing Question 696:
696. Context:
 specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 

Remarks 

This function stops the currently running WMX3 engine and then restarts the WMX3 
engine. 

This function is equivalent to calling the StopEngine function, waiting until the 
engine has closed, and then calling the StartEngine function. 

When the engine is restarted, all data will be initialized as if the engine is started for 
the first time. This includes all parameter data, which will be reset to their default 
values, and all I/O and user memory data, which will be cleared. All dynamically 
allocated buffer memory will be released (see Function Calls related Memory 
Allocation). 

Scenarios in which the user might use this function include the following:
--------------------------------------------
WMX3APIFUNC StartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Start the WMX3 engine without creating 
a device. More... 

WMX3APIFUNC RestartEngine (const char *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 


More... 

WMX3APIFUNC RestartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 
More... 

WMX3APIFUNC StopEngine (unsigned int 
waitTimeMilliseconds=0) 

Stop the currently running WMX3 
engine. More... 

WMX3APIFUNC CreateDevice (const char *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More...
--------------------------------------------
},
    {
        "No": 797,
        "FunctionC++": "WMX3APIFUNC RestartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 798,
        "FunctionC++": "WMX3APIFUNC StopEngine(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def StopEngine()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine."
--------------------------------------------
This function is blocking, and may take several seconds or more before it returns a 
value. 

◆RestartEngine() [2/2]

WMX3APIFUNC 
RestartEngine ( const wchar_t * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
WMX3APIFUNC 
RestartEngine ( const wchar_t * path, 
unsigned int waitTimeMilliseconds 
int core = -1, 
DWORD_PTR affinityMask = 0) 
Stop the currently running WMX3 engine and then restart the WMX3 engine.
-----------------------------------------------------------------------------------
696. Instruction: Stop the currently running WMX3 engine and then restart the WMX3 engine.
A: PrintToServerConsole(format)
B: GetEngineStatus()
C: RestartEngine(path)
D: RevertEngine(path)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
696. Model's answer: C
696. Correct answer: C
696. Result: Correct



Processing Question 697:
697. Context:
 },
    {
        "No": 797,
        "FunctionC++": "WMX3APIFUNC RestartEngine(const wchar_t *path, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine and then restart the WMX3 engine. "
    },
    {
        "No": 798,
        "FunctionC++": "WMX3APIFUNC StopEngine(unsigned int waitTimeMilliseconds=0)",
        "FunctionPython": "def StopEngine()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Stop the currently running WMX3 engine."
--------------------------------------------
WMX3APIFUNC StartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Start the WMX3 engine without creating 
a device. More... 

WMX3APIFUNC RestartEngine (const char *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 


More... 

WMX3APIFUNC RestartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 
More... 

WMX3APIFUNC StopEngine (unsigned int 
waitTimeMilliseconds=0) 

Stop the currently running WMX3 
engine. More... 

WMX3APIFUNC CreateDevice (const char *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More...
--------------------------------------------
unsigned int 
lise ) 

signal is sent to the 
engine process, but will 
return without checking if 
the engine process has 
stopped. If a nonzero 
value is specified, this 
function will wait until the 
engine process has 
stopped before 
returning. 

Remarks 

This function stops the WMX3 engine, regardless of whether there were any open 
devices left. Typically, this function does not need to be called, as the engine is 
automatically stopped when the last device is closed with the CloseDevice function. 

When the engine is restarted with the StartEngine function, all data will be 
initialized as if the engine is started for the first time. This includes all parameter 
data, which will be reset to their default values, and all I/O and user memory data, 
which will be cleared. When the engine is stopped, all dynamically allocated buffer 
memory will be released (see Function Calls related Memory Allocation).
--------------------------------------------
1) | (1 << 2). The 
specified cores must be 
assigned to the RTX 
operating system. If both 
"core" and "affinityMask" 
are specified, the engine 
will run on all cores 
specified in either of 
these values. This 
argument will have no 
effect if the engine is 
already running when 
this function is called. 
Remarks 

This function is a variation of RestartEngine that accepts a wchar_t string for the 
file path. Use this function when using Unicode character sets. 

◆StopEngine() 
WMX3APIFU 
NC 
StopEngine ( 
waitTimeMil 

Stop the currently running WMX3 engine. 

Parameters 
[in] 
waitTimeMilliseconds An optional argument 
that specifies the amount 
of time to wait for the 
engine to stop before 
returning. If no value is 
specified or 0 is 
specified, this function 
will block until a stop 

unsigned int 
lise )
-----------------------------------------------------------------------------------
697. Instruction: Stop the currently running WMX3 engine.
A: StopEngine()
B: StopLog(channel)
C: GetDeviceID()
D: ShutdownEngine():
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
697. Model's answer: A
697. Correct answer: A
697. Result: Correct



Processing Question 698:
698. Context:
 WMX3APIFUNC CreateDevice (const wchar_t *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CloseDevice (bool exitNoDev=true) 
Close a device. More... 
WMX3APIFUNC GetDeviceID (int *id) 
Get the device ID number of the device. 
More... 

WMX3APIFUNC AutoQuitWithoutActiveDev (bool quit) 
Configure the engine to automatically 
quit or not automatically quit when the 
last device is closed by a watchdog time 
out. More... 


WMX3APIFUNC SetWatchdog (unsigned int watchdog) 
Set the watchdog time out period for the 
device that called this function. More... 

WMX3APIFUNC SetWatchdog (int deviceId, unsigned int 
watchdog) 

Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL)
--------------------------------------------
},
    {
        "No": 799,
        "FunctionC++": "WMX3APIFUNC CreateDevice(const char *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": "def CreateDevice(path)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
    },
    {
        "No": 800,
        "FunctionC++": "WMX3APIFUNC CreateDevice(const wchar_t *path, DeviceType::T type=DeviceType::T::DeviceTypeNormal, unsigned int waitTimeMilliseconds=0, int core=-1, DWORD_PTR affinityMask=0)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Create a device to interface with the WMX3 engine. "
--------------------------------------------
WMX3APIFUNC StartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Start the WMX3 engine without creating 
a device. More... 

WMX3APIFUNC RestartEngine (const char *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 


More... 

WMX3APIFUNC RestartEngine (const wchar_t *path, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Stop the currently running WMX3 engine 
and then restart the WMX3 engine. 
More... 

WMX3APIFUNC StopEngine (unsigned int 
waitTimeMilliseconds=0) 

Stop the currently running WMX3 
engine. More... 

WMX3APIFUNC CreateDevice (const char *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More...
--------------------------------------------
Tutorial 1-2: Creating and closing devices 

A device is an object of the WMX3Api class that has opened a communication channel 
with the WMX3 engine. Each thread that will call WMX3 API functions must obtain a 
device by creating a WMX3Api object and calling the CreateDevice function from that 
object. 

The following code demonstrates how to create a device: 

using namespace wmx3Api;
WMX3Api wmxlib;
wmxlib.CreateDevice(_T("C:\\Program Files\\SoftServo\\WMX3"), DeviceType::

All WMX3 library classes and constants are contained in the wmx3Api namespace. 

The first argument of the CreateDevice function should be passed the full path of the 
directory that contains the WMX3 engine file, WMX3Engine.rtss. This is "C:\\Program 
Files\\SoftServo\\WMX3" for the default installation directory. 

The second argument of the CreateDevice function should be passed 
DeviceTypeNormal. 

See CreateDevice for additional information regarding this function.
-----------------------------------------------------------------------------------
698. Instruction: Create a device to interface with the WMX3 engine.
A: SetDeviceName(name)
B: UpdateDevice(path)
C: ResetDeviceWaitEvent()
D: CreateDevice(path)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
698. Model's answer: D
698. Correct answer: D
698. Result: Correct



Processing Question 699:
699. Context:
 DWORD_PTR 
affinityMask = 0); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
CloseDevice(); 
Python def CloseDevice() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceID(int *id); 
Python def GetDeviceID() 
Returns 
Type tuple 
Value 0 : int -error code 
1 : int -id 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AutoQuitWithoutActiveD 
ev(bool quit); 
Python 
def 
AutoQuitWithoutActiveDev 
(quit) 
Returns 
Type int 
Value error code 
Remarks 
WMX3APIFUNC
--------------------------------------------
this function is called. 

Remarks 

This function is a variation of CreateDevice that accepts a wchar_t array for the file 
path string. Use this function when using Unicode character sets. 

See also 

Devices 

◆ 
CloseDevice() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
CloseDevice ( 
bool 
exitNoDev = true) 
Close a device. 

Parameters 
[in] 
exitNoDev If set to true, the engine 
will exit if the closed 
device is the last open 
device (excluding 
DeviceTypeExitWOCnt 
devices). If set to false, 
the engine will not exit 
even if the closed device 
is the last open device. 
This parameter will be 
set to true if not 
specified. 
Remarks 

This function closes the device used to interface with the WMX3 engine that has 
been created with the CreateDevice function. Each object of the WMX3Api class 
that has successfully created a device must call the CloseDevice function before 

the user application exits or the object is deleted.
--------------------------------------------
WMX3APIFUNC CreateDevice (const wchar_t *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CloseDevice (bool exitNoDev=true) 
Close a device. More... 
WMX3APIFUNC GetDeviceID (int *id) 
Get the device ID number of the device. 
More... 

WMX3APIFUNC AutoQuitWithoutActiveDev (bool quit) 
Configure the engine to automatically 
quit or not automatically quit when the 
last device is closed by a watchdog time 
out. More... 


WMX3APIFUNC SetWatchdog (unsigned int watchdog) 
Set the watchdog time out period for the 
device that called this function. More... 

WMX3APIFUNC SetWatchdog (int deviceId, unsigned int 
watchdog) 

Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL)
--------------------------------------------
Tutorial 1-2: Creating and closing devices 

A device is an object of the WMX3Api class that has opened a communication channel 
with the WMX3 engine. Each thread that will call WMX3 API functions must obtain a 
device by creating a WMX3Api object and calling the CreateDevice function from that 
object. 

The following code demonstrates how to create a device: 

using namespace wmx3Api;
WMX3Api wmxlib;
wmxlib.CreateDevice(_T("C:\\Program Files\\SoftServo\\WMX3"), DeviceType::

All WMX3 library classes and constants are contained in the wmx3Api namespace. 

The first argument of the CreateDevice function should be passed the full path of the 
directory that contains the WMX3 engine file, WMX3Engine.rtss. This is "C:\\Program 
Files\\SoftServo\\WMX3" for the default installation directory. 

The second argument of the CreateDevice function should be passed 
DeviceTypeNormal. 

See CreateDevice for additional information regarding this function.
-----------------------------------------------------------------------------------
699. Instruction: Close a device.
A: ApiLogToString(pLogData, logDataSize)
B: IsDeviceValid()
C: CloseDevice()
D: CloseConnection()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
699. Model's answer: C
699. Correct answer: C
699. Result: Correct



Processing Question 700:
700. Context:
 devices 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllDevices(DevicesIn 
foW* devices); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
char* name); 
Python 
def 
SetDeviceName(name) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
wchar_t* name); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(char* 
nameBuf, unsigned int 
bufSize); 
Python def GetDeviceName() 
Type tuple
--------------------------------------------
WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize) 


Get the name of this device. More... 

WMX3APIFUNC GetDeviceName (wchar_t *nameBuf, 
unsigned int bufSize) 
Get the name of this device. More... 
WMX3APIFUNC SetDeviceWaitEvent (int errCode) 
Reserved. More... 
WMX3APIFUNC ResetDeviceWaitEvent () 
Reserved. More... 
WMX3APIFUNC WaitForDeviceWaitEvent (unsigned int 
waitTime, int *errCode) 
Reserved. More... 

WMX3APIFUNC SetModuleSuspend (ModuleSuspend 
*suspend) 

Set whether to suspend loading specific 
platform modules when starting 
communication. More... 

WMX3APIFUNC GetModuleSuspend (ModuleSuspend 
*suspend) 

Get the settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC AbortModuleSuspend () 
Clear all settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond)
--------------------------------------------
},
    {
        "No": 822,
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const wchar_t *name)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 823,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(char *nameBuf, unsigned int bufSize)",
        "FunctionPython": "def GetDeviceName()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 824,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(wchar_t *nameBuf, unsigned int bufSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
--------------------------------------------
Remarks 

This function sets the name of the device calling this function. The device name has 
no effect on the operation of the device, except that it makes the device easier to 
identify when using functions such as GetAllDevices. 

◆ 
SetDeviceName() [2/2] 



WMX3APIFU 
NC 
SetDeviceNa 
WMX3APIFU 
NC 
SetDeviceNa 
me ( 
const wchar_t name ) 
Set the name of this device. 

Parameters 
[in] 
name A wchar_t array that 
contains the name of the 
device as a null-
terminated string. The 
array must not be longer 
than maxDeviceName 
characters, or else the 
name will be truncated. 

Remarks 

This function is a variation of SetDeviceName that sets the device name as a 
wchar_t string instead of a char string. Use this function when using Unicode 
character sets. 

◆GetDeviceName() [1/2]

WMX3APIFUNC 
GetDeviceName ( 
) 
WMX3APIFUNC 
GetDeviceName ( 
) 
char * 
nameBuf, 
unsigned int bufSize 
Get the name of this device.
-----------------------------------------------------------------------------------
700. Instruction: Get the device ID number of the device.
A: GetDeviceSerialNumber()
B: GetDeviceName()
C: SetDeviceName(name)
D: GetDeviceID()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
700. Model's answer: D
700. Correct answer: D
700. Result: Correct



Processing Question 701:
701. Context:
 and may be assigned to devices later created by CreateDevice. 

◆AutoQuitWithoutActiveDev() 

bool quit bool quit 
WMX3APIFU 
NC 
AutoQuitWith 
outActiveDev ( 
) 
Configure the engine to automatically quit or not automatically quit when the last 
device is closed by a watchdog time out. 

Parameters 
[in] 
quit A flag signifying whether 
to automatically stop the 
engine when the last 
device is closed. If set to 
TRUE, the engine will 
automatically stop. If set 
to FALSE, the engine will 
not automatically stop. 
Remarks 

This function configures the engine to automatically quit or not automatically quit 
when the last device is closed by a watchdog time out. 

By default, the engine is configured to automatically quit when the last device is 
closed by a watchdog time out. 

See also 

SetWatchdog 

◆SetWatchdog() [1/2]

unsigned int watchdog ) unsigned int watchdog ) 
WMX3APIFU 
NC 
SetWatchdog ( 
Set the watchdog time out period for the device that called this function.
--------------------------------------------
the user application exits or the object is deleted. 

The WMX3 engine automatically exits when all devices have been closed with this 
function. If any devices are not closed when the user application exits, the WMX3 
engine will remain running. (The engine will close if the Watchdog timer runs out.) 

This function is blocking. When this function is called, execution will return to the 
calling thread only after the device is closed, or when the time out period elapses. 

See also 

Devices 


◆GetDeviceID() 
WMX3APIFU 
NC 
GetDeviceID ( int * id ) 
Get the device ID number of the device. 

Parameters 
[out] 
id A pointer to an int that 
will contain the ID 
number of the device. 
Remarks 

This function returns the device ID number of the device. 
All running devices will have unique device ID numbers. 
Device ID numbers of devices that have been closed with CloseDevice are freed, 

and may be assigned to devices later created by CreateDevice. 

◆AutoQuitWithoutActiveDev()
--------------------------------------------
WMX3APIFUNC CreateDevice (const wchar_t *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CloseDevice (bool exitNoDev=true) 
Close a device. More... 
WMX3APIFUNC GetDeviceID (int *id) 
Get the device ID number of the device. 
More... 

WMX3APIFUNC AutoQuitWithoutActiveDev (bool quit) 
Configure the engine to automatically 
quit or not automatically quit when the 
last device is closed by a watchdog time 
out. More... 


WMX3APIFUNC SetWatchdog (unsigned int watchdog) 
Set the watchdog time out period for the 
device that called this function. More... 

WMX3APIFUNC SetWatchdog (int deviceId, unsigned int 
watchdog) 

Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL)
--------------------------------------------
},
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
-----------------------------------------------------------------------------------
701. Instruction: Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out.
A: AutoQuitWithoutActiveDev(quit)
B: AutoQuitWithoutActiveDev(withConfirmation)
C: ResetDeviceWaitEvent()
D: StartPathIntplWithRotation_Point(channel, point)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
701. Model's answer: A
701. Correct answer: A
701. Result: Correct



Processing Question 702:
702. Context:
 Function 
C++ SetWatchdog(unsigned 
int watchdog); 
Python 
def 
SetWatchdog(watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetWatchdog(int 
deviceId, unsigned int 
watchdog); 
Python 
def 
SetWatchdog(deviceId, 
watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetWatchdog(unsigned 
int* watchdog, unsigned 
int* watchdogCount = 
NULL); 
Python def GetWatchDog() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -watchdog 
2 : int watchdogCount 
Remarks 
C++ 
WMX3APIFUNC
--------------------------------------------
SetWatchdog 

◆SetWatchdog() [1/2]

unsigned int watchdog ) unsigned int watchdog ) 
WMX3APIFU 
NC 
SetWatchdog ( 
Set the watchdog time out period for the device that called this function. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
Remarks 

This function sets the watchdog time out period for the device that called this 
function. Even if this function is not called, a watchdog timer is enabled for each 
device using the default time out period. If the process that created the device is 
closed without closing the device, the device will be automatically closed after the 
watchdog time out period elapses. 

See also 

Overview 

◆SetWatchdog() [2/2]

WMX3APIFUNC 
SetWatchdog ( 
) 
WMX3APIFUNC 
SetWatchdog ( 
) 
int 
deviceId, 
unsigned int watchdog 
Set the watchdog time out period for a specific device. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
[in] 
deviceId The device ID of the 
device. 
Remarks
--------------------------------------------
and may be assigned to devices later created by CreateDevice. 

◆AutoQuitWithoutActiveDev() 

bool quit bool quit 
WMX3APIFU 
NC 
AutoQuitWith 
outActiveDev ( 
) 
Configure the engine to automatically quit or not automatically quit when the last 
device is closed by a watchdog time out. 

Parameters 
[in] 
quit A flag signifying whether 
to automatically stop the 
engine when the last 
device is closed. If set to 
TRUE, the engine will 
automatically stop. If set 
to FALSE, the engine will 
not automatically stop. 
Remarks 

This function configures the engine to automatically quit or not automatically quit 
when the last device is closed by a watchdog time out. 

By default, the engine is configured to automatically quit when the last device is 
closed by a watchdog time out. 

See also 

SetWatchdog 

◆SetWatchdog() [1/2]

unsigned int watchdog ) unsigned int watchdog ) 
WMX3APIFU 
NC 
SetWatchdog ( 
Set the watchdog time out period for the device that called this function.
--------------------------------------------
},
    {
        "No": 805,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "FunctionPython": "def GetWatchDog()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
-----------------------------------------------------------------------------------
702. Instruction: Set the watchdog time out period for the device that called this function.
A: SetWatch(channel, pWatch)
B: SetAlarmSystem(watchdog_system)
C: SetWatchdog(watchdog)
D: SetDeviceWaitEvent(errCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
702. Model's answer: C
702. Correct answer: C
702. Result: Correct



Processing Question 703:
703. Context:
 SetWatchdog 

◆SetWatchdog() [1/2]

unsigned int watchdog ) unsigned int watchdog ) 
WMX3APIFU 
NC 
SetWatchdog ( 
Set the watchdog time out period for the device that called this function. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
Remarks 

This function sets the watchdog time out period for the device that called this 
function. Even if this function is not called, a watchdog timer is enabled for each 
device using the default time out period. If the process that created the device is 
closed without closing the device, the device will be automatically closed after the 
watchdog time out period elapses. 

See also 

Overview 

◆SetWatchdog() [2/2]

WMX3APIFUNC 
SetWatchdog ( 
) 
WMX3APIFUNC 
SetWatchdog ( 
) 
int 
deviceId, 
unsigned int watchdog 
Set the watchdog time out period for a specific device. 

Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
[in] 
deviceId The device ID of the 
device. 
Remarks
--------------------------------------------
Function 
C++ SetWatchdog(unsigned 
int watchdog); 
Python 
def 
SetWatchdog(watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetWatchdog(int 
deviceId, unsigned int 
watchdog); 
Python 
def 
SetWatchdog(deviceId, 
watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetWatchdog(unsigned 
int* watchdog, unsigned 
int* watchdogCount = 
NULL); 
Python def GetWatchDog() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -watchdog 
2 : int watchdogCount 
Remarks 
C++ 
WMX3APIFUNC
--------------------------------------------
Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
[in] 
deviceId The device ID of the 
device. 
Remarks 

This function sets the watchdog time out period for the device with the specified ID. 

See also 

Overview 

◆GetWatchdog() 

WMX3APIFUNC 
GetWatchdog ( 
WMX3APIFUNC 
GetWatchdog ( 
unsigned int * watchdog, 
unsigned int * watchdogCount = NULL
) 
Get the watchdog time out period and the current watchdog count. 

Parameters 
[out] 
watchdog The watchdog time out 
period set for this device, 
in milliseconds. If this 
value is 0, the device 
has no watchdog. 
[out] 
watchdogCount An optional argument 
that will retrieve the 
current watchdog count 
for this device. This is 
the number of 
milliseconds that have 
elapsed since the 
watchdog thread last 
reported that the device 
is operating normally. 
Remarks 

This function obtains the current watchdog time out period and watchdog count of 
the device that called this function. 

◆ResetWatchdogTimer()
--------------------------------------------
},
    {
        "No": 805,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "FunctionPython": "def GetWatchDog()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
-----------------------------------------------------------------------------------
703. Instruction: Set the watchdog time out period for a specific device.
A: SetWatchdog(deviceId, watchdog)
B: GetDeviceName()
C: CreateDevice(path)
D: setWatchdogConfig(deviceId, configOptions)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
703. Model's answer: A
703. Correct answer: A
703. Result: Correct



Processing Question 704:
704. Context:
 },
    {
        "No": 805,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "FunctionPython": "def GetWatchDog()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
--------------------------------------------
Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL) 

Get the watchdog time out period and 
the current watchdog count. More... 

WMX3APIFUNC 
WMX3APIFUNC 
ResetWatchdogTimer () 
Reset the watchdog count of a device. 
More... 
SetStatistic (bool enable) 
WMX3APIFUNC 
Configure a device to collect API 
execution statistics data. More... 
GetStatistic (DeviceStatistics *statistics) 
Read the currently collected API 
execution statistics data. More... 

WMX3APIFUNC SetInterruptId (unsigned int interruptId) 
Set the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC GetInterruptId (unsigned int *interruptId) 
Get the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More...
--------------------------------------------
},
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
--------------------------------------------
Parameters 
[in] 
watchdog The watchdog time out 
period, in milliseconds. 
[in] 
deviceId The device ID of the 
device. 
Remarks 

This function sets the watchdog time out period for the device with the specified ID. 

See also 

Overview 

◆GetWatchdog() 

WMX3APIFUNC 
GetWatchdog ( 
WMX3APIFUNC 
GetWatchdog ( 
unsigned int * watchdog, 
unsigned int * watchdogCount = NULL
) 
Get the watchdog time out period and the current watchdog count. 

Parameters 
[out] 
watchdog The watchdog time out 
period set for this device, 
in milliseconds. If this 
value is 0, the device 
has no watchdog. 
[out] 
watchdogCount An optional argument 
that will retrieve the 
current watchdog count 
for this device. This is 
the number of 
milliseconds that have 
elapsed since the 
watchdog thread last 
reported that the device 
is operating normally. 
Remarks 

This function obtains the current watchdog time out period and watchdog count of 
the device that called this function. 

◆ResetWatchdogTimer()
-----------------------------------------------------------------------------------
704. Instruction: Get the watchdog time out period and the current watchdog count.
A: GetWatch(channel)
B: GetWatchDogConfiguration()
C: GetWatchDog()
D: ReleaseStdOut()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
704. Model's answer: C
704. Correct answer: C
704. Result: Correct



Processing Question 705:
705. Context:
 the device. 
The timeout time for each device can also be set 
by calling the WMX3Api SetWatchdog function. 
Restart WMX3 engine 
0, 1000~ 
units: ms 
15000 
Suspend Platform 
Set the suspend flag of the loaded Platform 
module. 
Platform modules with the suspend flag set will 
not be loaded when communication starts. 
0: Platform module is not suspended. 
1: Platform module is suspended. 
Restart 
communication with 
servo network 
0/1 0
--------------------------------------------
Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL) 

Get the watchdog time out period and 
the current watchdog count. More... 

WMX3APIFUNC 
WMX3APIFUNC 
ResetWatchdogTimer () 
Reset the watchdog count of a device. 
More... 
SetStatistic (bool enable) 
WMX3APIFUNC 
Configure a device to collect API 
execution statistics data. More... 
GetStatistic (DeviceStatistics *statistics) 
Read the currently collected API 
execution statistics data. More... 

WMX3APIFUNC SetInterruptId (unsigned int interruptId) 
Set the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC GetInterruptId (unsigned int *interruptId) 
Get the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More...
--------------------------------------------
},
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
--------------------------------------------
Function 
C++ SetWatchdog(unsigned 
int watchdog); 
Python 
def 
SetWatchdog(watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetWatchdog(int 
deviceId, unsigned int 
watchdog); 
Python 
def 
SetWatchdog(deviceId, 
watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetWatchdog(unsigned 
int* watchdog, unsigned 
int* watchdogCount = 
NULL); 
Python def GetWatchDog() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -watchdog 
2 : int watchdogCount 
Remarks 
C++ 
WMX3APIFUNC
-----------------------------------------------------------------------------------
705. Instruction: Reset the watchdog count of a device.
A: ResetWatchdogTimer()
B: RefreshWatchdogTimer()
C: SetWatchdog(deviceId, watchdog)
D: RestartEngine(path)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
705. Model's answer: A
705. Correct answer: A
705. Result: Correct



Processing Question 706:
706. Context:
 This function obtains the current watchdog time out period and watchdog count of 
the device that called this function. 

◆ResetWatchdogTimer() 

WMX3APIFUNC 
ResetWatchdog 
Timer ( 
WMX3APIFUNC 
ResetWatchdog 
Timer ( 
) 
Reset the watchdog count of a device. 

Remarks 

This function resets the watchdog count value of the device that called this function 
so that it is considered to be alive until the watchdog time out period elapses again. 
Normally, this function does not need to be called, as the watchdog thread that is 
automatically started when a device is created will periodically reset the watchdog 
count. 

◆SetStatistic() 
WMX3APIFU 
NC 
SetStatistic ( bool enable ) 
Configure a device to collect API execution statistics data. 

Parameters 
[in] 
enable Whether to enable 
device statistics 
collection. 
Remarks 

This function configures a device to collect or not collect API execution statistics 
data. 

See also 

GetStatistic 

◆GetStatistic()
--------------------------------------------
This function configures a device to collect or not collect API execution statistics 
data. 

See also 

GetStatistic 

◆GetStatistic() 

◆GetStatistic() 
WMX3APIFU 
NC 
GetStatistic ( DeviceStatiststatistics ) 
Read the currently collected API execution statistics data. 

Parameters 
[out] 
statistics A pointer to a 
DeviceStatistics object 
that will contain the 
collected statistics data. 

Remarks 

This function obtains the currently collected API execution statistics data for a 
device. The device must be first configured to collect this data using the 
SetStatistic function. 

This data is collected as API functions are executed through this device. The 
GetStatistic function can be used to read the collected data. See the 
DeviceStatistics class for additional information regarding the data that is 
collected. 

This data is not collected for API functions that are not executed by API process 
threads. See Function Calls for Special Processing for a list of these functions.
--------------------------------------------
SetAxisMode() : Ecat 
SetAxisParam() : Config 
SetAxisPolarity() : Config 
SetAxisUnit() : Config 
SetBacklashCompensation() : Compensation 
SetCommandPos() : Home 
SetCommandPosToFeedbackPos() : Home 
SetConstantLinearVel() : AdvVelocity 
SetCustomEvent() : EventControl 
SetCustomEventConfigureOfModule() : EventControl 
SetCustomEventInput() : EventControl 
SetCustomEventOutput() : EventControl 
SetCustomLog() : Log 
SetDeviceEventFailed : ErrorCode 
SetDeviceName() : WMX3Api 
SetDeviceNameTimeout : ErrorCode 
SetDeviceWaitEvent() : WMX3Api 
SetEmergencyStopParam() : Config 
SetEncoderRange() : Config 
SetEniFilePath() : Ecat 
SetEvent() : EventControl 
SetEventInput() : EventControl 
SetEventOutput() : EventControl 
SetFeedbackParam() : Config 
SetFeedbackPos() : Home 
SetFlightRecorderParam() : Config 
SetFlightRecorderPath() : Config 
SetGearRatio() : Config 
SetHardwareTouchProbe() : EventControl 
SetHomeDone() : Home 
SetHomeParam() : Config 
SetHomeProfile() : PMAxisControl
--------------------------------------------
SetSoftwareTouchProbe() : EventControl 
SetStatistic() : WMX3Api 
SetSyncCombine() : Sync 
SetSyncGearRatio() : Sync 
SetSyncGroup() : Sync 
SetSyncMasterSlave() : Sync 
SetSyncParam() : Config 
SetTouchProbe0Detected() : Simu 
SetTouchProbe1Detected() : Simu 
SetTrqProfile() : PMAxisControl 
SetTrqProfiles() : PMAxisControl 
SetupAdvancedS() : Profile 
SetupConstantDec() : Profile 
SetUpdatePeriod() : Ecat , Simu 
SetupJerkLimited() : Profile 
SetupJerkLimitedAdvancedS() : Profile 
SetupJerkLimitedFixedVelocityS() : Profile 
SetupJerkLimitedFixedVelocityT() : Profile 
SetupJerkLimitedSCurve() : Profile 
SetupJerkRatio() : Profile 
SetupJerkRatioFixedVelocityS() : Profile 
SetupJerkRatioFixedVelocityT() : Profile 
SetupParabolic() : Profile 
SetupParabolicVelocity() : Profile 
SetupSCurve() : Profile 
SetupSin() : Profile 
SetupTimeAccAdvancedS() : Profile 
SetupTimeAccJerkRatio() : Profile 
SetupTimeAccParabolic() : Profile 
SetupTimeAccSCurve() : Profile
-----------------------------------------------------------------------------------
706. Instruction: Configure a device to collect API execution statistics data.
A: SetStatistic(enable)
B: ToggleStatistic(enable_toggle)
C: SetDeviceName(name)
D: SetSingleTurn(axis, enable. encoderCount)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
706. Model's answer: A
706. Correct answer: A
706. Result: Correct



Processing Question 707:
707. Context:
 This function configures a device to collect or not collect API execution statistics 
data. 

See also 

GetStatistic 

◆GetStatistic() 

◆GetStatistic() 
WMX3APIFU 
NC 
GetStatistic ( DeviceStatiststatistics ) 
Read the currently collected API execution statistics data. 

Parameters 
[out] 
statistics A pointer to a 
DeviceStatistics object 
that will contain the 
collected statistics data. 

Remarks 

This function obtains the currently collected API execution statistics data for a 
device. The device must be first configured to collect this data using the 
SetStatistic function. 

This data is collected as API functions are executed through this device. The 
GetStatistic function can be used to read the collected data. See the 
DeviceStatistics class for additional information regarding the data that is 
collected. 

This data is not collected for API functions that are not executed by API process 
threads. See Function Calls for Special Processing for a list of these functions.
--------------------------------------------
This function obtains the current watchdog time out period and watchdog count of 
the device that called this function. 

◆ResetWatchdogTimer() 

WMX3APIFUNC 
ResetWatchdog 
Timer ( 
WMX3APIFUNC 
ResetWatchdog 
Timer ( 
) 
Reset the watchdog count of a device. 

Remarks 

This function resets the watchdog count value of the device that called this function 
so that it is considered to be alive until the watchdog time out period elapses again. 
Normally, this function does not need to be called, as the watchdog thread that is 
automatically started when a device is created will periodically reset the watchdog 
count. 

◆SetStatistic() 
WMX3APIFU 
NC 
SetStatistic ( bool enable ) 
Configure a device to collect API execution statistics data. 

Parameters 
[in] 
enable Whether to enable 
device statistics 
collection. 
Remarks 

This function configures a device to collect or not collect API execution statistics 
data. 

See also 

GetStatistic 

◆GetStatistic()
--------------------------------------------
Execute 
Halt 
Clear 
Rewind 
ExecuteMultipleChannel 
HaltMultipleChannel 



ClearMultipleChannel 
RewindMultipleChannel 


 


Function Calls for Special Processing 

Most API function in the WMX3 library are processed by the API process thread (see 
Devices). However, a few API functions are not processed by the API process thread. 
These API functions may have special properties when used with certain functions. For 
example, the GetStatistic function will be unable to obtain statistics data for these 
functions. 

The following are special processing functions.
--------------------------------------------
WMX3. 


Overview 
System Status 


Axis Status 
 

Overview 

The main statuses can be read with the GetStatus function. 
Statuses for the entire system are explained in System Status. 
Statuses of each axis are explained in Axis Status. 
Both of the above types of statuses are read when the GetStatus function is called. 
Other specialized statuses are read by other API functions. For example, several 

specialized homing related statuses are obtained with the GetHomeData function. 
I/O data is read with the Get- functions in the Io class. User memory data is read with 
the Get- functions in the UserMemory class. 

Status Update Timing
-----------------------------------------------------------------------------------
707. Instruction: Read the currently collected API execution statistics data.
A: GetStatus()
B: GetDeviceName()
C: GetStatistic()
D: GetStatisticsMetrics()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
707. Model's answer: C
707. Correct answer: C
707. Result: Correct



Processing Question 708:
708. Context:
 This data is not collected for API functions that are not executed by API process 
threads. See Function Calls for Special Processing for a list of these functions. 

This data is collected for API functions when they are appended to the API buffer 
but not when they are executed from the API buffer (see API Buffer). 

See also 

SetStatistic 

◆SetInterruptId() 

unsigned int interruptId ) unsigned int interruptId ) 
WMX3APIFU 
NC 
SetInterruptId ( 
Set the interrupt (cyclic handler) associated with the calling device. 

Parameters 
[in] 
interruptId The interrupt to 
associate with the calling 
device. 

Remarks 

This function sets the interrupt (cyclic handler) to associate with the calling device.
--------------------------------------------
Parameters 
[in] 
interruptId The interrupt to 
associate with the calling 
device. 

Remarks 

This function sets the interrupt (cyclic handler) to associate with the calling device. 

After calling the CreateDevice function to create a device, that device can be 
associated to a particular interrupt by calling this function. A few functions are 
affected by the interrupt associated with the calling device. Other than these 
functions, the interrupt associated with the calling device has no effect on the 
operation of the device. See Functions Calls affected by Interrupts for additional 
information. 

A newly created device is by default associated with interrupt 0. 

The interrupt ID must be at least 0 and less than maxInterrupts. 

◆ 
GetInterruptId() 

WMX3APIFU 
NC 
GetInterruptI 
WMX3APIFU 
NC 
GetInterruptI 
d ( 
unsigned int * interruptId ) 
Get the interrupt (cyclic handler) associated with the calling device.
--------------------------------------------
Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL) 

Get the watchdog time out period and 
the current watchdog count. More... 

WMX3APIFUNC 
WMX3APIFUNC 
ResetWatchdogTimer () 
Reset the watchdog count of a device. 
More... 
SetStatistic (bool enable) 
WMX3APIFUNC 
Configure a device to collect API 
execution statistics data. More... 
GetStatistic (DeviceStatistics *statistics) 
Read the currently collected API 
execution statistics data. More... 

WMX3APIFUNC SetInterruptId (unsigned int interruptId) 
Set the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC GetInterruptId (unsigned int *interruptId) 
Get the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More...
--------------------------------------------
Interrupt of an Axis 

Every axis is assigned to one interrupt. The command and feedback of an axis is 
updated during the interrupt routine. 

Interrupt of a Device 

Every device (created by the CreateDevice function) is also associated with an 
interrupt. However, only a small subset of functions are affected by the interrupt 
associated with the device. Apart from these functions, the interrupt associated with the 
device has no effect on the operation of the device. For example, most motion 
commands may be executed from any device, even if the device and commanded axes 
are associated with different interrupts. The SetInterruptId function is used to change 
the interrupt associated with a device. 

The following sections summarize the functions of each module that are affected by the 
interrupt associated with the commanded axis or the calling device. 

AdvMotion 

Functions Affected by the Interrupt of the Axis
-----------------------------------------------------------------------------------
708. Instruction: Set the interrupt (cyclic handler) associated with the calling device.
A: SetInterruptId(interrputId)
B: SetInterruptIdWithPriority(interruptId, priority)
C: SetUpdatePeriod(period)
D: SetWatchdog(watchdog)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
708. Model's answer: A
708. Correct answer: A
708. Result: Correct



Processing Question 709:
709. Context:
 Parameters 
[in] 
interruptId The interrupt to 
associate with the calling 
device. 

Remarks 

This function sets the interrupt (cyclic handler) to associate with the calling device. 

After calling the CreateDevice function to create a device, that device can be 
associated to a particular interrupt by calling this function. A few functions are 
affected by the interrupt associated with the calling device. Other than these 
functions, the interrupt associated with the calling device has no effect on the 
operation of the device. See Functions Calls affected by Interrupts for additional 
information. 

A newly created device is by default associated with interrupt 0. 

The interrupt ID must be at least 0 and less than maxInterrupts. 

◆ 
GetInterruptId() 

WMX3APIFU 
NC 
GetInterruptI 
WMX3APIFU 
NC 
GetInterruptI 
d ( 
unsigned int * interruptId ) 
Get the interrupt (cyclic handler) associated with the calling device.
--------------------------------------------
This data is not collected for API functions that are not executed by API process 
threads. See Function Calls for Special Processing for a list of these functions. 

This data is collected for API functions when they are appended to the API buffer 
but not when they are executed from the API buffer (see API Buffer). 

See also 

SetStatistic 

◆SetInterruptId() 

unsigned int interruptId ) unsigned int interruptId ) 
WMX3APIFU 
NC 
SetInterruptId ( 
Set the interrupt (cyclic handler) associated with the calling device. 

Parameters 
[in] 
interruptId The interrupt to 
associate with the calling 
device. 

Remarks 

This function sets the interrupt (cyclic handler) to associate with the calling device.
--------------------------------------------
Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions 

static WMX3APIFUNC ErrorToString (int errCode, char *pString, 
unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 
*pString, unsigned int size) 
Get a string representation of the 
specified error code. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More...
--------------------------------------------
WMX3APIFUNC GetInitialOutByteInterruptId (int addr, 
unsigned char *pInterruptId) 

Get the ID of the interrupt (cyclic handler) 
that will set the initial value of the 
specified output byte. More... 

WMX3APIFUNC GetInitialOutBytesInterruptId (int addr, 
int size, unsigned char *pInterruptId) 

Get the IDs of the interrupts (cyclic 
handlers) that will set the initial values of 
the specified output bytes. More... 

Static Public Member Functions
-----------------------------------------------------------------------------------
709. Instruction: Get the interrupt (cyclic handler) associated with the calling device.
A: GetInterruptId(interrputId)
B: SetEventOutput(id, pEventOutput)
C: PrintToFile(filePath, format)
D: GetInterruptById(interruptId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
709. Model's answer: A
709. Correct answer: A
709. Result: Correct



Processing Question 710:
710. Context:
 WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More... 

WMX3APIFUNC StopCommunication (unsigned int 


waitTimeMilliseconds=0) 

Stop communication with the servo 
network. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoA 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoW 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More...
--------------------------------------------
Tutorial 2-3: Communicating with the network 

The StartCommunication function attempts to start communication with any of the 
platforms the engine is running. If this function returns no error (None), the engine will 
communicate with the servos, I/O modules, and other devices on the network. If this 
function returns an error, communication with the network failed due to the reason 
indicated by the error code. In addition, error messages may appear on the Rtx Server 
Console application that is automatically opened (unless the Rtx Server Console is 
suppressed in the RTX settings). 

Depending on the settings of the Module.ini file in the WMX3 engine directory, the 
WMX3 engine will run one or more of the following hardware platforms supported by 
WMX3: EtherCAT, Realtime Express, and MECHATROLINK III. In addition, the WMX3 
engine may also start the simulator platform.
--------------------------------------------
WMX3Api wmxlib;
CoreMotion wmxlib_cm(&wmxlib); //Uses the device created by wmxlibCoreMotion wmxlib_cm2(wmxlib_cm); //Uses the same device as wmxlib_cm 

For devices that are Self Devices, the copy assignment operator and copy constructor 
will initialize the object and create a new self device for the object. Therefore, the object 
will not share the same device as the source. 

The following is an example of using the copy assignment operator for a self device. 

WMX3Api wmxlib;

CoreMotion wmxlib_cm(&wmxlib); //Uses the device created by wmxlib

CoreMotion wmxlib_cm2; //Uses a self device 

wmxlib_cm = wmxlib_cm2; //wmxlib_cm will create a new self device 

 

Start Communication and Servo On 

Cyclic communication with the servo network is started with the StartCommunication 
function. Calling this function will attempt to start communication with the network using 
the parameters set in Module.ini, the Network Definition files, and the RtxTcpIp.ini 
files.
--------------------------------------------
A CloseDevice function is appended to the above code: 

using namespace wmx3Api;
WMX3Api wmxlib;
wmxlib.CreateDevice(_T("C:\\Program Files\\SoftServo\\WMX3"), DeviceType::

wmxlib.CloseDevice(); 


To summarize, an application using the WMX3 library should call CreateDevice at the 
start of the application and CloseDevice before exiting the application. 

 


Tutorial 1-3: Communicating with the network 

The StartCommunication function attempts to start communication with any of the 
platforms the engine is running. If this function returns no error (None is returned), the 
engine will communicate with the servos, I/O modules, and other devices on the 
network. If this function returns an error, communication with the network failed due to 
the reason indicated by the error code. In addition, error messages may appear on the 
Rtx Server Console application that is automatically opened (unless the Rtx Server 
Console is suppressed in the RTX settings).
-----------------------------------------------------------------------------------
710. Instruction: Start communication with the servo network.
A: StartCommunication()
B: GetEngineStatus()
C: StopCommunication()
D: InitiateCommunication():
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
710. Model's answer: A
710. Correct answer: A
710. Result: Correct



Processing Question 711:
711. Context:
 WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More... 

WMX3APIFUNC StopCommunication (unsigned int 


waitTimeMilliseconds=0) 

Stop communication with the servo 
network. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoA 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC GetModulesInfo (ModulesInfoW 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More...
--------------------------------------------
This function is blocking. When this function is called, execution will return only 
when a network communication request is initiated, or when the initiation of the 
network communication request times out. Note that the engine status will not 
immediately change to Communicating after the network communication request is 
initiated. Even after this function returns, it may be necessary to wait for several 
seconds before GetStatus returns the Communicating status. If a value is 
specified for the waitTimeMilliseconds parameter, this function will wait until the 



engine status changes to Communicating or the specified time out period elapses 
before returning. 

Functions that require communication with the servo network will return errors 
unless they are executed after the Engine State becomes Communicating. 

◆StopCommunication() 
WMX3APIFU 
NC 
StopCommun 
ication ( 
waitTimeMi 

Stop communication with the servo network. 

Parameters 

waitTimeMilliseconds
--------------------------------------------
Remarks 


This function can be called after establishing communication with the servo network 
using the StartCommunication function. This function will end communication with 
the servo network. To check if communication with the servo network has been 
successfully stopped, call the GetStatus API function and check the Engine State 
variable. If the Engine State is no longer Communicating, communication has 
been stopped (the Engine State will normally be Running at this point). 

Note that the Engine State will not immediately change to Running immediately 
after this function is called. Even after this function returns, it may be necessary to 
wait for several seconds before GetStatus returns the Running engine status. If a 
value is specified for the waitTimeMilliseconds parameter, this function will wait until 
the engine status changes to Running or the specified time out period elapses 
before returning.
--------------------------------------------
◆StopCommunication() 
WMX3APIFU 
NC 
StopCommun 
ication ( 
waitTimeMi 

Stop communication with the servo network. 

Parameters 

waitTimeMilliseconds 

unsigned int 
llise ) 
The amount of time to wait for 
communication to be stopped before 
returning. If this argument is set to 0, 
or it is not specified, this function will 
send a signal to stop communication 
but may return before communication 
is completely stopped. If this 
argument is set to a nonzero value, 
the function will block and not return 
until communication is stopped or the 
waitTimeMilliseconds time elapses. In 
this case, an error will be returned if 
waitTimeMilliseconds elapses before 
communication is stopped. If an error 
is returned this way, the signal to stop 
communication will remain set and 
communication may still become 
established a few moments later. 

Remarks
-----------------------------------------------------------------------------------
711. Instruction: Stop communication with the servo network.
A: StopCommunication()
B: SleepAtEngine(microSecond)
C: EndCommunication()
D: StartCommunication()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
711. Model's answer: A
711. Correct answer: A
711. Result: Correct



Processing Question 712:
712. Context:
 WMX3APIFUNC GetModulesInfo (ModulesInfoW 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
GetModuleInfo (int moduleId, 
ModuleInfoA *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetModuleInfo (int moduleId, 
ModuleInfoW *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetEngineStatus (EngineStatus *status) 
Obtain the status of the engine. More... 
GetAllDevices (DevicesInfoA *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC GetAllDevices (DevicesInfoW *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC SetDeviceName (const char *name) 
Set the name of this device. More... 
WMX3APIFUNC SetDeviceName (const wchar_t *name) 
Set the name of this device. More... 

WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize)
--------------------------------------------
◆GetModulesInfo() [2/2]

WMX3APIFU 
NC 
GetModulesI 
WMX3APIFU 
NC 
GetModulesI 
nfo ( 
ModulesInfoW modules ) 
Obtain information of the modules that are loaded by the engine. 

Parameters 
[out] 
modules A pointer to a 
ModulesInfoW object 
that will contain the 
information of the 
modules that are loaded 
by the engine. 
Remarks 

This function is a variation of GetModulesInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆GetModuleInfo() [1/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoA * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoA object that 
will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks
--------------------------------------------
This function obtains the information of a single module that is loaded by the engine. 

If the module with the specified moduleId is not loaded, a ModuleIsNotLoaded 
error is returned. 

◆GetModuleInfo() [2/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoW * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoW object 
that will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks 

This function is a variation of GetModuleInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆ 
GetEngineStatus()
--------------------------------------------
No function that requires communication with the servo network may be executed 
after communication is stopped. StartCommunication may be called again to 
reestablish communication with the servo network. 

◆ 
GetModulesInfo() [1/2] 



WMX3APIFU 
NC 
GetModulesI 
WMX3APIFU 
NC 
GetModulesI 
nfo ( 
ModulesInfoA modules ) 
Obtain information of the modules that are loaded by the engine. 

Parameters 
[out] 
modules A pointer to a 
ModulesInfoA object 
that will contain the 
information of the 
modules that are loaded 
by the engine. 
Remarks 

This function obtains the information of the modules that are loaded by the engine. 
The engine can execute API functions in a module library only if the corresponding 
module has been loaded. See ModulesInfoA for additional information regarding 
the module data that can be obtained. 

◆GetModulesInfo() [2/2]
-----------------------------------------------------------------------------------
712. Instruction: Obtain information of the modules that are loaded by the engine.
A: AutoQuitWithoutActiveDev(quit)
B: GetModulesInfo()
C: GetModuleInfo(moduleId)
D: GetModulesDetails()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
712. Model's answer: B
712. Correct answer: B
712. Result: Correct



Processing Question 713:
713. Context:
 ◆GetModulesInfo() [2/2]

WMX3APIFU 
NC 
GetModulesI 
WMX3APIFU 
NC 
GetModulesI 
nfo ( 
ModulesInfoW modules ) 
Obtain information of the modules that are loaded by the engine. 

Parameters 
[out] 
modules A pointer to a 
ModulesInfoW object 
that will contain the 
information of the 
modules that are loaded 
by the engine. 
Remarks 

This function is a variation of GetModulesInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆GetModuleInfo() [1/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoA * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoA object that 
will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks
--------------------------------------------
WMX3APIFUNC GetModulesInfo (ModulesInfoW 
*modules) 

Obtain information of the modules that 
are loaded by the engine. More... 

WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
WMX3APIFUNC 
GetModuleInfo (int moduleId, 
ModuleInfoA *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetModuleInfo (int moduleId, 
ModuleInfoW *module) 
Obtain information of a single module 
that is loaded by the engine. More... 
GetEngineStatus (EngineStatus *status) 
Obtain the status of the engine. More... 
GetAllDevices (DevicesInfoA *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC GetAllDevices (DevicesInfoW *devices) 
Obtain information of all existing devices. 
More... 
WMX3APIFUNC SetDeviceName (const char *name) 
Set the name of this device. More... 
WMX3APIFUNC SetDeviceName (const wchar_t *name) 
Set the name of this device. More... 

WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize)
--------------------------------------------
This function obtains the information of a single module that is loaded by the engine. 

If the module with the specified moduleId is not loaded, a ModuleIsNotLoaded 
error is returned. 

◆GetModuleInfo() [2/2]

WMX3APIFUNC 
GetModuleInfo ( 
WMX3APIFUNC 
GetModuleInfo ( 
int 
moduleId, 
ModuleInfoW * module 
) 
Obtain information of a single module that is loaded by the engine. 

Parameters 
[out] 
moduleId The unique id number of 
the module to check. 
[out] 
module A pointer to a 
ModuleInfoW object 
that will contain the 
information of the 
specified module, if it is 
loaded by the engine. 
Remarks 

This function is a variation of GetModuleInfo that obtains certain module 
information as wchar_t strings instead of char strings. Use this function when using 
Unicode character sets. 

◆ 
GetEngineStatus()
--------------------------------------------
The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
-----------------------------------------------------------------------------------
713. Instruction: Obtain information of a single module that is loaded by the engine.
A: GetModuleInfo(moduleId)
B: GetModuleId()
C: ApiLogToString(pLogData, logDataSize)
D: GetModuleDetails(moduleId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
713. Model's answer: A
713. Correct answer: A
713. Result: Correct



Processing Question 714:
714. Context:
 More... 

WMX3APIFUNC Abort (int axis) 
Stop execution of the cyclic position 
command buffer of an axis and clear the 
buffer. More... 

WMX3APIFUNC Abort (AxisSelection *pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
clear the buffer. More... 

WMX3APIFUNC ExecQuickStop (int axis) 


Stop execution of the cyclic position 
command buffer of an axis and 
decelerate the axis to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC ExecQuickStop (AxisSelection 
*pAxisSelection) 
Stop execution of the cyclic position 
command buffer of multiple axes and 
decelerate the axes to a stop using the 
quick stop deceleration. More... 

WMX3APIFUNC GetStatus (int axis, 
CyclicBufferSingleAxisStatus *pStatus) 

Get the cyclic position command buffer 
status of the specified axis. More... 

WMX3APIFUNC GetStatus (AxisSelection 
*pAxisSelection, 
CyclicBufferMultiAxisStatus *pStatus)
--------------------------------------------
WMX3. 


Overview 
System Status 


Axis Status 
 

Overview 

The main statuses can be read with the GetStatus function. 
Statuses for the entire system are explained in System Status. 
Statuses of each axis are explained in Axis Status. 
Both of the above types of statuses are read when the GetStatus function is called. 
Other specialized statuses are read by other API functions. For example, several 

specialized homing related statuses are obtained with the GetHomeData function. 
I/O data is read with the Get- functions in the Io class. User memory data is read with 
the Get- functions in the UserMemory class. 

Status Update Timing
--------------------------------------------
engine : ModulesInfoA , ModulesInfoW 
engineState : CoreMotionStatus , PMMotionStatus 
error : EngineStatus 
errorCode : ApiBufferErrorLog , ApiLogStatus , EcSlavePdoInfo 
errorCount : ApiBufferStatus 
errorLog : ApiBufferStatus 
eStopDec : Config::EmergencyStopParam 
eStopLevel : CoreMotionEventOutput::OutputFunctionArguments::ExecEStop , 
EventControl::Event::OutputFunctionArguments::ExecEStop 
eStopLevel1Type : Config::EmergencyStopParam 
eStopSignalBitAddress : Config::EmergencyStopParam
--------------------------------------------
},
    {
        "No": 75,
        "FunctionC++": "WMX3APIFUNC GetStatus(CoreMotionStatus *status)",
        "FunctionPython": "def GetStatus()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CoreMotion Class",
        "Instruction": "Read the current system status from the engine."
    },
    {
        "No": 76,
        "FunctionC++": "WMX3APIFUNC ExecEStop(EStopLevel::T level)",
        "FunctionPython": "def ExecEStop(level)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Initiate an emergency stop to stop the motion of all axes."
-----------------------------------------------------------------------------------
714. Instruction: Obtain the status of the engine.
A: GetEngineStatusInformation()
B: SetInterruptId(interrputId)
C: GetStatus(axis)
D: GetEngineStatus()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
714. Model's answer: D
714. Correct answer: D
714. Result: Correct



Processing Question 715:
715. Context:
 ◆ 
GetEngineStatus() 

WMX3APIFU 
NC 
GetEngineSt 
WMX3APIFU 
NC 
GetEngineSt 
atus ( 
EngineStatus status ) 
Obtain the status of the engine. 
Parameters 
[out] 
status A pointer to a 
EngineStatus object 
that will contain the 
engine status. 
Remarks 
This funtion obtains the status of the engine. 

◆GetAllDevices() [1/2]

WMX3APIFU 
NC 
GetAllDevice 
WMX3APIFU 
NC 
GetAllDevice 
s ( 
DevicesInfoA devices ) 
Obtain information of all existing devices. 

Parameters 
[out] 
devices A pointer to a 
DevicesInfoA object 
that will contain the 
information of all existing 
devices. 
Remarks 

This function obtains the information of all existing devices. This includes the 
number of currently existing devices and the ID and name of each device. 

This function can be used to verify that all other devices have closed. 

◆GetAllDevices() [2/2]

WMX3APIFU 
NC 
GetAllDevice 
WMX3APIFU 
NC 
GetAllDevice 
s ( 
DevicesInfoW devices ) 
Obtain information of all existing devices.
--------------------------------------------
devices 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllDevices(DevicesIn 
foW* devices); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
char* name); 
Python 
def 
SetDeviceName(name) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
wchar_t* name); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(char* 
nameBuf, unsigned int 
bufSize); 
Python def GetDeviceName() 
Type tuple
--------------------------------------------
AbortModuleSuspend() WMX3Api 
ApiLogToString(unsigned ch WMX3Api 
ApiLogToString(unsigned ch WMX3Api 
AutoQuitWithoutActiveDev WMX3Api 
ClearStdOut() WMX3Api 
CloseDevice(bool exitNoDev=t WMX3Api 
CompareWindowsUpdates(WMX3Api 
CreateDevice(const char *pa WMX3Api 
CreateDevice(const wchar_t WMX3Api 
dev WMX3Api 
ErrorToString(int errCode, ch WMX3Api 
ErrorToString(int errCode, w WMX3Api 
GetAllDevices(DevicesInfoA WMX3Api 
GetAllDevices(DevicesInfoW WMX3Api 
GetDeviceID(int *id) WMX3Api 
GetDeviceName(char *name WMX3Api 
GetDeviceName(wchar_t *na WMX3Api 
GetEngineStatus(EngineSta WMX3Api 
GetIMDllVersion(int *pVersio WMX3Api 
GetInterruptId(unsigned int * WMX3Api 
GetLibVersion(int *pMajorVe WMX3Api 
GetModuleInfo(int moduleId WMX3Api 
GetModuleInfo(int moduleId WMX3Api 
GetModulesInfo(ModulesInf WMX3Api 
GetModulesInfo(ModulesInf WMX3Api 
GetModuleSuspend(Module WMX3Api 
GetStatistic(DeviceStatistics WMX3Api 
GetStdOutDataSize() WMX3Api 
GetStdOutStr(char *buff, int WMX3Api
--------------------------------------------
GetModulesInfo(ModulesInf WMX3Api 
GetModuleSuspend(Module WMX3Api 
GetStatistic(DeviceStatistics WMX3Api 
GetStdOutDataSize() WMX3Api 
GetStdOutStr(char *buff, int WMX3Api 
GetWatchdog(unsigned int * WMX3Api 
IsDeviceValid() WMX3Api 
PrintToFile(const char *filePa WMX3Api 
PrintToFile(const wchar_t *fiWMX3Api 
PrintToFile(const char *filePa WMX3Api
-----------------------------------------------------------------------------------
715. Instruction: Obtain information of all existing devices.
A: ClearAllEvent()
B: GetAllDevices()
C: GetAllConnectedDevices()
D: GetStdOutDataSize()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
715. Model's answer: B
715. Correct answer: B
715. Result: Correct



Processing Question 716:
716. Context:
 Returns 
Value 
0 : int -error code 
1 : str -name 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(wchar_t 
* nameBuf, unsigned int 
bufSize); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceWaitEvent(int 
errCode); 
Python 
def 
SetDeviceWaitEvent(errC 
ode); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResetDeviceWaitEvent(); 
Python 
def 
ResetDeviceWaitEvent(); 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
WaitForDeviceWaitEvent 
(unsigned int waitTime,
--------------------------------------------
devices 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllDevices(DevicesIn 
foW* devices); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
char* name); 
Python 
def 
SetDeviceName(name) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
wchar_t* name); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(char* 
nameBuf, unsigned int 
bufSize); 
Python def GetDeviceName() 
Type tuple
--------------------------------------------
WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize) 


Get the name of this device. More... 

WMX3APIFUNC GetDeviceName (wchar_t *nameBuf, 
unsigned int bufSize) 
Get the name of this device. More... 
WMX3APIFUNC SetDeviceWaitEvent (int errCode) 
Reserved. More... 
WMX3APIFUNC ResetDeviceWaitEvent () 
Reserved. More... 
WMX3APIFUNC WaitForDeviceWaitEvent (unsigned int 
waitTime, int *errCode) 
Reserved. More... 

WMX3APIFUNC SetModuleSuspend (ModuleSuspend 
*suspend) 

Set whether to suspend loading specific 
platform modules when starting 
communication. More... 

WMX3APIFUNC GetModuleSuspend (ModuleSuspend 
*suspend) 

Get the settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC AbortModuleSuspend () 
Clear all settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond)
--------------------------------------------
◆GetAllDevices() [2/2]

WMX3APIFU 
NC 
GetAllDevice 
WMX3APIFU 
NC 
GetAllDevice 
s ( 
DevicesInfoW devices ) 
Obtain information of all existing devices. 

Parameters 
[out] 
devices A pointer to a 
DevicesInfoW object 
that will contain the 
information of all existing 
devices. 
Remarks 

This function is a variation of GetAllDevices that obtains certain device information 
as wchar_t strings instead of char strings. Use this function when using Unicode 
character sets. 

◆SetDeviceName() [1/2]

WMX3APIFU 
NC 
SetDeviceNa 
WMX3APIFU 
NC 
SetDeviceNa 
me ( 
const char * name ) 
Set the name of this device. 

Parameters 
[in] 
name A char array that 
contains the name of the 
device as a null-
terminated string. The 
array must not be longer 
than maxDeviceName 
characters, or else the 
name will be truncated. 

Remarks
-----------------------------------------------------------------------------------
716. Instruction: Set the name of this device.
A: SetDeviceName(name)
B: SetDeviceWaitEvent(errCode)
C: UpdateDeviceName(name)
D: CreateDevice(path)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
716. Model's answer: A
716. Correct answer: A
716. Result: Correct



Processing Question 717:
717. Context:
 devices 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetAllDevices(DevicesIn 
foW* devices); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
char* name); 
Python 
def 
SetDeviceName(name) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceName(const 
wchar_t* name); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(char* 
nameBuf, unsigned int 
bufSize); 
Python def GetDeviceName() 
Type tuple
--------------------------------------------
Remarks 

This function sets the name of the device calling this function. The device name has 
no effect on the operation of the device, except that it makes the device easier to 
identify when using functions such as GetAllDevices. 

◆ 
SetDeviceName() [2/2] 



WMX3APIFU 
NC 
SetDeviceNa 
WMX3APIFU 
NC 
SetDeviceNa 
me ( 
const wchar_t name ) 
Set the name of this device. 

Parameters 
[in] 
name A wchar_t array that 
contains the name of the 
device as a null-
terminated string. The 
array must not be longer 
than maxDeviceName 
characters, or else the 
name will be truncated. 

Remarks 

This function is a variation of SetDeviceName that sets the device name as a 
wchar_t string instead of a char string. Use this function when using Unicode 
character sets. 

◆GetDeviceName() [1/2]

WMX3APIFUNC 
GetDeviceName ( 
) 
WMX3APIFUNC 
GetDeviceName ( 
) 
char * 
nameBuf, 
unsigned int bufSize 
Get the name of this device.
--------------------------------------------
},
    {
        "No": 822,
        "FunctionC++": "WMX3APIFUNC SetDeviceName(const wchar_t *name)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Set the name of this device. "
    },
    {
        "No": 823,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(char *nameBuf, unsigned int bufSize)",
        "FunctionPython": "def GetDeviceName()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
    },
    {
        "No": 824,
        "FunctionC++": "WMX3APIFUNC GetDeviceName(wchar_t *nameBuf, unsigned int bufSize)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "WMX3Api Class",
        "Instruction": "Get the name of this device."
--------------------------------------------
WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize) 


Get the name of this device. More... 

WMX3APIFUNC GetDeviceName (wchar_t *nameBuf, 
unsigned int bufSize) 
Get the name of this device. More... 
WMX3APIFUNC SetDeviceWaitEvent (int errCode) 
Reserved. More... 
WMX3APIFUNC ResetDeviceWaitEvent () 
Reserved. More... 
WMX3APIFUNC WaitForDeviceWaitEvent (unsigned int 
waitTime, int *errCode) 
Reserved. More... 

WMX3APIFUNC SetModuleSuspend (ModuleSuspend 
*suspend) 

Set whether to suspend loading specific 
platform modules when starting 
communication. More... 

WMX3APIFUNC GetModuleSuspend (ModuleSuspend 
*suspend) 

Get the settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC AbortModuleSuspend () 
Clear all settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond)
-----------------------------------------------------------------------------------
717. Instruction: Get the name of this device.
A: PrintToServerConsole(format)
B: GetProductName(deviceId: int)
C: GetDeviceID()
D: GetDeviceName()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
717. Model's answer: D
717. Correct answer: D
717. Result: Correct



Processing Question 718:
718. Context:
 WMX3APIFUNC CreateDevice (const wchar_t *path, 
DeviceType::T 
type=DeviceType::T::DeviceTypeNormal, 
unsigned int waitTimeMilliseconds=0, int 
core=-1, DWORD_PTR affinityMask=0) 
Create a device to interface with the 
WMX3 engine. More... 

WMX3APIFUNC CloseDevice (bool exitNoDev=true) 
Close a device. More... 
WMX3APIFUNC GetDeviceID (int *id) 
Get the device ID number of the device. 
More... 

WMX3APIFUNC AutoQuitWithoutActiveDev (bool quit) 
Configure the engine to automatically 
quit or not automatically quit when the 
last device is closed by a watchdog time 
out. More... 


WMX3APIFUNC SetWatchdog (unsigned int watchdog) 
Set the watchdog time out period for the 
device that called this function. More... 

WMX3APIFUNC SetWatchdog (int deviceId, unsigned int 
watchdog) 

Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL)
--------------------------------------------
},
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
--------------------------------------------
Function int* errCode); 
Python 
def 
WaitForDeviceWaitEvent( 
waitTime, errCode); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetModuleSuspend(Mod 
uleSuspend* suspend); 
Python 
def 
SetModuleSuspend(suspe 
nd) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetModuleSuspend(Mod 
uleSuspend* suspend); 
Python def GetModuleSuspend() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : ModuleSuspend 
-suspend 
Remarks 
Function 
C++ 
WMX3APIFUNC 
AbortModuleSuspend(); 
Python 
def 
AbortModuleSuspend() 
Type int
--------------------------------------------
the user application exits or the object is deleted. 

The WMX3 engine automatically exits when all devices have been closed with this 
function. If any devices are not closed when the user application exits, the WMX3 
engine will remain running. (The engine will close if the Watchdog timer runs out.) 

This function is blocking. When this function is called, execution will return to the 
calling thread only after the device is closed, or when the time out period elapses. 

See also 

Devices 


◆GetDeviceID() 
WMX3APIFU 
NC 
GetDeviceID ( int * id ) 
Get the device ID number of the device. 

Parameters 
[out] 
id A pointer to an int that 
will contain the ID 
number of the device. 
Remarks 

This function returns the device ID number of the device. 
All running devices will have unique device ID numbers. 
Device ID numbers of devices that have been closed with CloseDevice are freed, 

and may be assigned to devices later created by CreateDevice. 

◆AutoQuitWithoutActiveDev()
-----------------------------------------------------------------------------------
718. Instruction: Reserved.
A: AutoQuitWithoutActiveDev(quit)
B: SetDeviceWaitEvent(errCode)
C: ResetDeviceWaitEvent()
D: SetDeviceWaitEventWithTimeout(errCode, timeout)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
718. Model's answer: A
718. Correct answer: B
718. Result: Wrong



Processing Question 719:
719. Context:
 },
    {
        "No": 803,
        "FunctionC++": "WMX3APIFUNC AutoQuitWithoutActiveDev(bool quit)",
        "FunctionPython": "def AutoQuitWithoutActiveDev(quit)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Configure the engine to automatically quit or not automatically quit when the last device is closed by a watchdog time out."
    },
    {
        "No": 804,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for the device that called this function."
--------------------------------------------
},
    {
        "No": 805,
        "FunctionC++": "WMX3APIFUNC SetWatchdog(int deviceId, unsigned int watchdog)",
        "FunctionPython": "def SetWatchdog(deviceId, watchdog)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set the watchdog time out period for a specific device. "
    },
    {
        "No": 806,
        "FunctionC++": "WMX3APIFUNC GetWatchdog(unsigned int *watchdog, unsigned int *watchdogCount=NULL)",
        "FunctionPython": "def GetWatchDog()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the watchdog time out period and the current watchdog count."
--------------------------------------------
Function 
C++ SetWatchdog(unsigned 
int watchdog); 
Python 
def 
SetWatchdog(watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetWatchdog(int 
deviceId, unsigned int 
watchdog); 
Python 
def 
SetWatchdog(deviceId, 
watchdog) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetWatchdog(unsigned 
int* watchdog, unsigned 
int* watchdogCount = 
NULL); 
Python def GetWatchDog() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -watchdog 
2 : int watchdogCount 
Remarks 
C++ 
WMX3APIFUNC
--------------------------------------------
Set the watchdog time out period for a 
specific device. More... 

WMX3APIFUNC GetWatchdog (unsigned int *watchdog, 
unsigned int *watchdogCount=NULL) 

Get the watchdog time out period and 
the current watchdog count. More... 

WMX3APIFUNC 
WMX3APIFUNC 
ResetWatchdogTimer () 
Reset the watchdog count of a device. 
More... 
SetStatistic (bool enable) 
WMX3APIFUNC 
Configure a device to collect API 
execution statistics data. More... 
GetStatistic (DeviceStatistics *statistics) 
Read the currently collected API 
execution statistics data. More... 

WMX3APIFUNC SetInterruptId (unsigned int interruptId) 
Set the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC GetInterruptId (unsigned int *interruptId) 
Get the interrupt (cyclic handler) 
associated with the calling device. 
More... 

WMX3APIFUNC StartCommunication (unsigned int 
waitTimeMilliseconds=0) 

Start communication with the servo 
network. More...
-----------------------------------------------------------------------------------
719. Instruction: Reserved.
A: SetWatchdog(watchdog)
B: ResetDeviceWaitEvent()
C: GetDeviceName()
D: function_str = ResetDeviceOptionalEvent()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
719. Model's answer: A
719. Correct answer: B
719. Result: Wrong



Processing Question 720:
720. Context:
 Function 
C++ 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates( 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC
--------------------------------------------
WMX3APIFUNC GetDeviceName (char *nameBuf, 
unsigned int bufSize) 


Get the name of this device. More... 

WMX3APIFUNC GetDeviceName (wchar_t *nameBuf, 
unsigned int bufSize) 
Get the name of this device. More... 
WMX3APIFUNC SetDeviceWaitEvent (int errCode) 
Reserved. More... 
WMX3APIFUNC ResetDeviceWaitEvent () 
Reserved. More... 
WMX3APIFUNC WaitForDeviceWaitEvent (unsigned int 
waitTime, int *errCode) 
Reserved. More... 

WMX3APIFUNC SetModuleSuspend (ModuleSuspend 
*suspend) 

Set whether to suspend loading specific 
platform modules when starting 
communication. More... 

WMX3APIFUNC GetModuleSuspend (ModuleSuspend 
*suspend) 

Get the settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC AbortModuleSuspend () 
Clear all settings of whether to suspend 
loading specific platform modules when 
starting communication. More... 

WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond)
--------------------------------------------
Returns 
Value 
0 : int -error code 
1 : str -name 
Remarks 
Function 
C++ 
WMX3APIFUNC 
GetDeviceName(wchar_t 
* nameBuf, unsigned int 
bufSize); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetDeviceWaitEvent(int 
errCode); 
Python 
def 
SetDeviceWaitEvent(errC 
ode); 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResetDeviceWaitEvent(); 
Python 
def 
ResetDeviceWaitEvent(); 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
WaitForDeviceWaitEvent 
(unsigned int waitTime,
--------------------------------------------
AbortModuleSuspend() WMX3Api 
ApiLogToString(unsigned ch WMX3Api 
ApiLogToString(unsigned ch WMX3Api 
AutoQuitWithoutActiveDev WMX3Api 
ClearStdOut() WMX3Api 
CloseDevice(bool exitNoDev=t WMX3Api 
CompareWindowsUpdates(WMX3Api 
CreateDevice(const char *pa WMX3Api 
CreateDevice(const wchar_t WMX3Api 
dev WMX3Api 
ErrorToString(int errCode, ch WMX3Api 
ErrorToString(int errCode, w WMX3Api 
GetAllDevices(DevicesInfoA WMX3Api 
GetAllDevices(DevicesInfoW WMX3Api 
GetDeviceID(int *id) WMX3Api 
GetDeviceName(char *name WMX3Api 
GetDeviceName(wchar_t *na WMX3Api 
GetEngineStatus(EngineSta WMX3Api 
GetIMDllVersion(int *pVersio WMX3Api 
GetInterruptId(unsigned int * WMX3Api 
GetLibVersion(int *pMajorVe WMX3Api 
GetModuleInfo(int moduleId WMX3Api 
GetModuleInfo(int moduleId WMX3Api 
GetModulesInfo(ModulesInf WMX3Api 
GetModulesInfo(ModulesInf WMX3Api 
GetModuleSuspend(Module WMX3Api 
GetStatistic(DeviceStatistics WMX3Api 
GetStdOutDataSize() WMX3Api 
GetStdOutStr(char *buff, int WMX3Api
-----------------------------------------------------------------------------------
720. Instruction: Reserved.
A: RecordWindowsUpdates(waitTimeMilliseconds)
B: WaitForDeviceWaitEvent(waitTime, errCode)
C: WaitForDeviceWaitEventWithTimeout(timeToWait, errorCode)
D: SetDeviceName(name)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
720. Model's answer: B
720. Correct answer: B
720. Result: Correct



Processing Question 721:
721. Context:
 ◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when 

starting communication. 
Parameters 
[out] 
suspend A pointer to a 
ModuleSuspend object 
that will contain the 
suspend setting for each 
platform module. 
Remarks 

This function reads the suspend setting of each platform module. 

Suspend settings are checked by the engine whenever communication is started. 
Platform modules for which the suspend setting is 1 will not be loaded. 

◆ 
AbortModuleSuspend() 

WMX3APIFUNC 
AbortModuleSus 
pend ( 
WMX3APIFUNC 
AbortModuleSus 
pend ( 
) 
Clear all settings of whether to suspend loading specific platform modules when 
starting communication. 

Remarks 

This function clears all suspend settings that have been set by 
SetModuleSuspend.
--------------------------------------------
This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded. 

Platform modules for which the suspend setting is set to 0 are loaded. 
One use of this function is to dynamically switch between loading the simulator 
module and non-simulator platform modules without stopping the engine or 
modifying configuration files. 

The following modules may be suspended by this function: 


SimuPlatform 
EcPlatform 
RtexPlatform 
MIIIPlatform 


Platform modules that are disabled in the configuration file will not be loaded, 
regardless of its suspend setting. 

The applied suspend settings take effect the next time communication is started. 

◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when
--------------------------------------------
◆SetDeviceWaitEvent() 
WMX3APIFU 
NC 
SetDeviceWa 
itEvent ( int errCode ) 
Reserved. 

i 

◆ResetDeviceWaitEvent() 
◆WaitForDeviceWaitEvent() 
◆SetModuleSuspend() 
WMX3APIFUNC 
ResetDeviceWatEvent ( ) 
Reserved. 
WMX3APIFUNC 
WaitForDeviceWaitE 
vent ( unsigned int waitTime, 
int * errCode 
) 
Reserved. 
WMX3APIFU 
NC 
SetModuleSu 
spend ( ModuleSuspe suspend ) 
Set whether to suspend loading specific platform modules when starting 
communication. 

Parameters 
[in] 
suspend A pointer to a 
ModuleSuspend object 
that contains the 


suspend setting for each 
platform module. 

Remarks 

This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded.
--------------------------------------------
},
    {
        "No": 828,
        "FunctionC++": "WMX3APIFUNC SetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def SetModuleSuspend(suspend)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 829,
        "FunctionC++": "WMX3APIFUNC GetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def GetModuleSuspend()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication."
-----------------------------------------------------------------------------------
721. Instruction: Set whether to suspend loading specific platform modules when starting communication.
A: SetModuleSuspend(suspend)
B: GetModuleId()
C: SetModulePause(pause)
D: SetInterruptId(interrputId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
721. Model's answer: A
721. Correct answer: A
721. Result: Correct



Processing Question 722:
722. Context:
 ◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when 

starting communication. 
Parameters 
[out] 
suspend A pointer to a 
ModuleSuspend object 
that will contain the 
suspend setting for each 
platform module. 
Remarks 

This function reads the suspend setting of each platform module. 

Suspend settings are checked by the engine whenever communication is started. 
Platform modules for which the suspend setting is 1 will not be loaded. 

◆ 
AbortModuleSuspend() 

WMX3APIFUNC 
AbortModuleSus 
pend ( 
WMX3APIFUNC 
AbortModuleSus 
pend ( 
) 
Clear all settings of whether to suspend loading specific platform modules when 
starting communication. 

Remarks 

This function clears all suspend settings that have been set by 
SetModuleSuspend.
--------------------------------------------
This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded. 

Platform modules for which the suspend setting is set to 0 are loaded. 
One use of this function is to dynamically switch between loading the simulator 
module and non-simulator platform modules without stopping the engine or 
modifying configuration files. 

The following modules may be suspended by this function: 


SimuPlatform 
EcPlatform 
RtexPlatform 
MIIIPlatform 


Platform modules that are disabled in the configuration file will not be loaded, 
regardless of its suspend setting. 

The applied suspend settings take effect the next time communication is started. 

◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when
--------------------------------------------
},
    {
        "No": 828,
        "FunctionC++": "WMX3APIFUNC SetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def SetModuleSuspend(suspend)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 829,
        "FunctionC++": "WMX3APIFUNC GetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def GetModuleSuspend()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication."
--------------------------------------------
◆SetDeviceWaitEvent() 
WMX3APIFU 
NC 
SetDeviceWa 
itEvent ( int errCode ) 
Reserved. 

i 

◆ResetDeviceWaitEvent() 
◆WaitForDeviceWaitEvent() 
◆SetModuleSuspend() 
WMX3APIFUNC 
ResetDeviceWatEvent ( ) 
Reserved. 
WMX3APIFUNC 
WaitForDeviceWaitE 
vent ( unsigned int waitTime, 
int * errCode 
) 
Reserved. 
WMX3APIFU 
NC 
SetModuleSu 
spend ( ModuleSuspe suspend ) 
Set whether to suspend loading specific platform modules when starting 
communication. 

Parameters 
[in] 
suspend A pointer to a 
ModuleSuspend object 
that contains the 


suspend setting for each 
platform module. 

Remarks 

This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded.
-----------------------------------------------------------------------------------
722. Instruction: Get the settings of whether to suspend loading specific platform modules when starting communication.
A: GetModuleSuspend()
B: GetModuleId()
C: PrintToFile(filePath, format)
D: GetSuspendModuleInfo()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
722. Model's answer: A
722. Correct answer: A
722. Result: Correct



Processing Question 723:
723. Context:
 ◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when 

starting communication. 
Parameters 
[out] 
suspend A pointer to a 
ModuleSuspend object 
that will contain the 
suspend setting for each 
platform module. 
Remarks 

This function reads the suspend setting of each platform module. 

Suspend settings are checked by the engine whenever communication is started. 
Platform modules for which the suspend setting is 1 will not be loaded. 

◆ 
AbortModuleSuspend() 

WMX3APIFUNC 
AbortModuleSus 
pend ( 
WMX3APIFUNC 
AbortModuleSus 
pend ( 
) 
Clear all settings of whether to suspend loading specific platform modules when 
starting communication. 

Remarks 

This function clears all suspend settings that have been set by 
SetModuleSuspend.
--------------------------------------------
This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded. 

Platform modules for which the suspend setting is set to 0 are loaded. 
One use of this function is to dynamically switch between loading the simulator 
module and non-simulator platform modules without stopping the engine or 
modifying configuration files. 

The following modules may be suspended by this function: 


SimuPlatform 
EcPlatform 
RtexPlatform 
MIIIPlatform 


Platform modules that are disabled in the configuration file will not be loaded, 
regardless of its suspend setting. 

The applied suspend settings take effect the next time communication is started. 

◆ 
GetModuleSuspend() 

WMX3APIFU 
NC 
GetModuleSu 
WMX3APIFU 
NC 
GetModuleSu 
spend ( 
ModuleSuspe suspend ) 
Get the settings of whether to suspend loading specific platform modules when
--------------------------------------------
},
    {
        "No": 828,
        "FunctionC++": "WMX3APIFUNC SetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def SetModuleSuspend(suspend)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Set whether to suspend loading specific platform modules when starting communication."
    },
    {
        "No": 829,
        "FunctionC++": "WMX3APIFUNC GetModuleSuspend(ModuleSuspend *suspend)",
        "FunctionPython": "def GetModuleSuspend()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "WMX3Api Class",
        "Instruction": "Get the settings of whether to suspend loading specific platform modules when starting communication."
--------------------------------------------
◆SetDeviceWaitEvent() 
WMX3APIFU 
NC 
SetDeviceWa 
itEvent ( int errCode ) 
Reserved. 

i 

◆ResetDeviceWaitEvent() 
◆WaitForDeviceWaitEvent() 
◆SetModuleSuspend() 
WMX3APIFUNC 
ResetDeviceWatEvent ( ) 
Reserved. 
WMX3APIFUNC 
WaitForDeviceWaitE 
vent ( unsigned int waitTime, 
int * errCode 
) 
Reserved. 
WMX3APIFU 
NC 
SetModuleSu 
spend ( ModuleSuspe suspend ) 
Set whether to suspend loading specific platform modules when starting 
communication. 

Parameters 
[in] 
suspend A pointer to a 
ModuleSuspend object 
that contains the 


suspend setting for each 
platform module. 

Remarks 

This function configures the engine to suspend loading specific platform modules 
when communication is started. 
Platform modules for which the suspend setting is set to 1 are not loaded.
-----------------------------------------------------------------------------------
723. Instruction: Clear all settings of whether to suspend loading specific platform modules when starting communication.
A: AbortModuleSuspend()
B: GetModuleId()
C: Slightly modified function: CancelModuleSuspend()
D: GetModuleInfo(moduleId)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
723. Model's answer: A
723. Correct answer: A
723. Result: Correct



Processing Question 724:
724. Context:
 WMX3APIFUNC SleepAtEngine (unsigned long 
microSecond) 

Pauses execution of the current thread 
until the specified timeout interval 
elapses. More... 

WMX3APIFUNC PrintToServerConsole (const char 
*format,...) 

Print a message to the Console Screen. 
More... 


WMX3APIFUNC PrintToServerConsole (const wchar_t 
*format,...) 

Print a message to the Console Screen. 
More... 

WMX3APIFUNC RecordWindowsUpdates (unsigned int 
waitTimeMilliseconds=0) 
Record a list of installed Windows 
Updates to file. More... 
WMX3APIFUNC CompareWindowsUpdates (unsigned int 
waitTimeMilliseconds=0) 
Compare the list of currently installed 
Windows Updates to the list recorded to 
file. More... 

Static Public Member Functions
--------------------------------------------
Remarks 

This function clears all suspend settings that have been set by 
SetModuleSuspend. 

All platform modules that are enabled in the configuration file will be loaded by the 
engine the next time communication is started. 

◆SleepAtEngine() 

WMX3APIFU 
NC 
WMX3APIFU 
NC 
SleepAtEngin 
e ( 
unsigned long microSecond ) 
Pauses execution of the current thread until the specified timeout interval elapses. 

Parameters 
[in] 
microSecond The timeout interval (in 
microseconds) for which 
execution is paused. Up 
to (2^32-1) 
microseconds can be 
specified. 
Remarks 

This function suspends execution of the current thread until the specified timeout 
interval elapses. 

The timeout interval must be set to a value greater than or equal to the minimum 
timer period of the system on which the engine is running. 

If the specified timeout interval is below the minimum timer period, no error is 
returned and the thread pauses execution for at least the minimum timer period.
--------------------------------------------
Returns 
Type tuple 
Value 
0 : int -error code 
1 : ApiBufferWatch watch 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Sleep(unsigned int 
milliseconds); 
Python def Sleep(milliseconds) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC Wait(int 
axis); 
Python def Wait(int axis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
Wait(AxisSelection 
*pAxisSelection); 
Python 
def 
Wait_AxisSel(pAxisSelecti 
on) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
WMX3APIFUNC 
Wait(ApiBufferCondition 
* condition);
--------------------------------------------
},
    {
        "No": 830,
        "FunctionC++": "WMX3APIFUNC AbortModuleSuspend()",
        "FunctionPython": "def AbortModuleSuspend()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Clear all settings of whether to suspend loading specific platform modules when starting communication. "
    },
    {
        "No": 831,
        "FunctionC++": "WMX3APIFUNC SleepAtEngine(unsigned long microSecond)",
        "FunctionPython": "def SleepAtEngine(microSecond)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "WMX3Api Class",
        "Instruction": "Pauses execution of the current thread until the specified timeout interval elapses."
-----------------------------------------------------------------------------------
724. Instruction: Pauses execution of the current thread until the specified timeout interval elapses.
A: SetUpdatePeriod(period)
B: SetStatistic(enable)
C: SleepAtEngine(milliseconds)
D: SleepAtEngine(microSecond)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
724. Model's answer: D
724. Correct answer: D
724. Result: Correct



Processing Question 725:
725. Context:
 If the specified timeout interval is below the minimum timer period, no error is 
returned and the thread pauses execution for at least the minimum timer period. 

Even if the timeout interval is greater than or equal to the minimum timer period, the 
thread may pause for a minimum of several tens of microseconds. 

◆PrintToServerConsole() [1/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const char * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The char string to print. 
This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function signals the engine to print a formatted string to the Rtx Server 
Console. The Rtx Server Console is a component of the RTX operating system that 
displays messages to the user in Windows space. 

◆PrintToServerConsole() [2/2]
--------------------------------------------
◆PrintToServerConsole() [2/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const wchar_t * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The wchar_t string to 
print. This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function is a variation of PrintToServerConsole that accepts a wchar_t string 
for the formatted string. Use this function whne using Unicode character sets. 

◆ 
RecordWindowsUpdates() 

WMX3APIFU 
NC 
RecordWindo 
WMX3APIFU 
NC 
RecordWindo 
wsUpdates ( 
unsigned int waitTimeMillise ) 
Record a list of installed Windows Updates to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of
--------------------------------------------
When an abnormality occurs in the WMX3 engine, the engine outputs an error code 
to the screen with an error message. In addition to the error code, it may also output 
a record of the operation of the engine as required for technical support. By changing 
the MessageLevel in the Module.ini, more information will be output. 
When an abnormality occurs in the EtherCAT platform, the platform outputs an error 
code to the screen with an error message. In addition to the error code, it may also 
output a record of the operation of the engine as required for technical support. By 
changing the MessageLevel in the ec_network.def, more information will be output. 
Other platforms than the EtherCAT platform also have such specifications. 
WMX3Api class PrintToServerConsole function outputs any specified message to 
the screen. The function is used for debugging and tracing applications. 
If PrintLog is set to 1 in Module.ini, the WMX3 engine operation records will be
--------------------------------------------
Console Screen 

This page provides information and notes about the Console Screen. 

The Console Screen is a screen that outputs WMX3 internal error codes or internal log 
information. 

Information output to the Console Screen 

The WMX3 Library functions return the error codes of the Motion or error codes of the 
Platform indicating processing success or failure to the calling program. 

In addition, there is Error codes output to the console screen, mainly for the WMX3 
engine and platform modules. 

In the following cases, messages and error codes are output to the screen.
-----------------------------------------------------------------------------------
725. Instruction: Print a message to the Console Screen.
A: GetPitchErrorCompensation(axis)
B: PrintToServerLog(format)
C: PrintToServerConsole(format)
D: RecordWindowsUpdates(waitTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
725. Model's answer: C
725. Correct answer: C
725. Result: Correct



Processing Question 726:
726. Context:
 This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


◆CompareWindowsUpdates() 
WMX3APIFU 
NC 
CompareWin 
dowsUpdates ( unsigned int waitTimeMillise ) 
Compare the list of currently installed Windows Updates to the list recorded to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 
time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function compares the file generated by the RecordWindowsUpdates function 
against the Windows Updates that are currently installed to the system. 

This function returns the UpdatesListUninitialized error code if the file is not found.
--------------------------------------------
Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 

time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function records to file a list of Windows Updates that are currently installed to 
the system. 

This function can be used in conjunction with the CompareWindowsUpdates 
function to detect changes to the Windows Updates that are installed to the system. 

The file that is created by this function is stored in the 
C:\ProgramData\SoftServo\WMX3 
directory with the file name 
InstalledWindowsUpdates.dat. 

This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice).
--------------------------------------------
Function 
C++ 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates( 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC
--------------------------------------------
◆PrintToServerConsole() [2/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const wchar_t * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The wchar_t string to 
print. This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function is a variation of PrintToServerConsole that accepts a wchar_t string 
for the formatted string. Use this function whne using Unicode character sets. 

◆ 
RecordWindowsUpdates() 

WMX3APIFU 
NC 
RecordWindo 
WMX3APIFU 
NC 
RecordWindo 
wsUpdates ( 
unsigned int waitTimeMillise ) 
Record a list of installed Windows Updates to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of
-----------------------------------------------------------------------------------
726. Instruction: Record a list of installed Windows Updates to file.
A: RecordWindowsUpdates()
B: CreateDevice(path)
C: UpdateWindowsRecord()
D: GetRecordingBufferChannel()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
726. Model's answer: A
726. Correct answer: A
726. Result: Correct



Processing Question 727:
727. Context:
 Function 
C++ 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates( 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC
--------------------------------------------
Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 

time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function records to file a list of Windows Updates that are currently installed to 
the system. 

This function can be used in conjunction with the CompareWindowsUpdates 
function to detect changes to the Windows Updates that are installed to the system. 

The file that is created by this function is stored in the 
C:\ProgramData\SoftServo\WMX3 
directory with the file name 
InstalledWindowsUpdates.dat. 

This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice).
--------------------------------------------
This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


◆CompareWindowsUpdates() 
WMX3APIFU 
NC 
CompareWin 
dowsUpdates ( unsigned int waitTimeMillise ) 
Compare the list of currently installed Windows Updates to the list recorded to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 
time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function compares the file generated by the RecordWindowsUpdates function 
against the Windows Updates that are currently installed to the system. 

This function returns the UpdatesListUninitialized error code if the file is not found.
--------------------------------------------
◆PrintToServerConsole() [2/2]

WMX3APIFUNC 
PrintToServerConsol 
e ( 
WMX3APIFUNC 
PrintToServerConsol 
e ( 
const wchar_t * format, 
... 
) 
Print a message to the Console Screen. 

Parameters 
[in] 
format The wchar_t string to 
print. This argument can 
contain format specifiers 
followed by additional 
arguments in the same 
manner as the C/C++ 
printf() function. 
Remarks 

This function is a variation of PrintToServerConsole that accepts a wchar_t string 
for the formatted string. Use this function whne using Unicode character sets. 

◆ 
RecordWindowsUpdates() 

WMX3APIFU 
NC 
RecordWindo 
WMX3APIFU 
NC 
RecordWindo 
wsUpdates ( 
unsigned int waitTimeMillise ) 
Record a list of installed Windows Updates to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of
-----------------------------------------------------------------------------------
727. Instruction: Record a list of installed Windows Updates to file.
A: Wait_TimeMilli(axis, waitTimeMilliseconds)
B: RecordWindowsUpdates(waitTimeMilliseconds)
C: RecordWindowsUpdates(updateIntervalSeconds)
D: StartCommunication()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
727. Model's answer: B
727. Correct answer: B
727. Result: Correct



Processing Question 728:
728. Context:
 Detecting Changes to Installed Windows Updates 

The RecordWindowsUpdates and CompareWindowsUpdates functions can be used to detect when a new 
Windows Update has been installed or an existing Windows Update has been uninstalled. This can allow the 
user application to show a warning dialog to the user before starting the WMX3 engine. For additional 
information, see the descriptions for these functions. 

How to check the RTX version 

Follow the steps below to open the "RTX" folder of the installer and check the product version of RTX. The 
first two numbers of the product version indicate the major version number and minor version number, and 
the third number indicates the update. For example, for RTX64 3.7 with Update 1, the product version will be 
3.7.1.X. 

If the "RTX" folder of the installer contains a file starting with "Update...":
--------------------------------------------
This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


◆CompareWindowsUpdates() 
WMX3APIFU 
NC 
CompareWin 
dowsUpdates ( unsigned int waitTimeMillise ) 
Compare the list of currently installed Windows Updates to the list recorded to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 
time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function compares the file generated by the RecordWindowsUpdates function 
against the Windows Updates that are currently installed to the system. 

This function returns the UpdatesListUninitialized error code if the file is not found.
--------------------------------------------
Function 
C++ 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates( 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC
--------------------------------------------
Function CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds = 
0);" 
Returns 
Python 
Type 
Value 
def 
CompareWindowsUpdate 
s() 
int 
error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds = 
0);" 
def 
CompareWindowsUpdate 
s(waitTimeMilliseconds) 
int 
error code 
Remarks 

 


Ecat Class
-----------------------------------------------------------------------------------
728. Instruction: Compare the list of currently installed Windows Updates to the list recorded to file.
A: UpdateWindowsComparison()
B: StartEngine(path)
C: RecordWindowsUpdates()
D: CompareWindowsUpdates()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
728. Model's answer: D
728. Correct answer: D
728. Result: Correct



Processing Question 729:
729. Context:
 This function will overwrite the existing file if there is any. 

This function can execute without a device (this function can be called before calling 
CreateDevice). 


◆CompareWindowsUpdates() 
WMX3APIFU 
NC 
CompareWin 
dowsUpdates ( unsigned int waitTimeMillise ) 
Compare the list of currently installed Windows Updates to the list recorded to file. 

Parameters 
[in] 
waitTimeMilliseconds An optional parameter 
that is used to specify 
the maximum amount of 
time that this function 
can block before 
returning. If this 
parameter is not 
specified, there is no 
limit to the amount of 
time that this function 
can block. 

Remarks 

This function compares the file generated by the RecordWindowsUpdates function 
against the Windows Updates that are currently installed to the system. 

This function returns the UpdatesListUninitialized error code if the file is not found.
--------------------------------------------
Function 
C++ 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates() 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
RecordWindowsUpdates( 
unsigned int 
waitTimeMilliseconds = 
0);" 
Python 
def 
RecordWindowsUpdates( 
waitTimeMilliseconds) 
Returns 
Type int 
Value error code 
Remarks 
C++ 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC
--------------------------------------------
Function CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds = 
0);" 
Returns 
Python 
Type 
Value 
def 
CompareWindowsUpdate 
s() 
int 
error code 
Remarks 
Function 
Returns 
C++ 
Python 
Type 
Value 
wmx3Api::WMX3Api:: 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds); " 
WMX3APIFUNC 
CompareWindowsUpdate 
s(unsigned int 
waitTimeMilliseconds = 
0);" 
def 
CompareWindowsUpdate 
s(waitTimeMilliseconds) 
int 
error code 
Remarks 

 


Ecat Class
--------------------------------------------
Detecting Changes to Installed Windows Updates 

The RecordWindowsUpdates and CompareWindowsUpdates functions can be used to detect when a new 
Windows Update has been installed or an existing Windows Update has been uninstalled. This can allow the 
user application to show a warning dialog to the user before starting the WMX3 engine. For additional 
information, see the descriptions for these functions. 

How to check the RTX version 

Follow the steps below to open the "RTX" folder of the installer and check the product version of RTX. The 
first two numbers of the product version indicate the major version number and minor version number, and 
the third number indicates the update. For example, for RTX64 3.7 with Update 1, the product version will be 
3.7.1.X. 

If the "RTX" folder of the installer contains a file starting with "Update...":
-----------------------------------------------------------------------------------
729. Instruction: Compare the list of currently installed Windows Updates to the list recorded to file.
A: CompareSoftwarePatchUpdates(waitTimeMilliseconds)
B: RecordWindowsUpdates()
C: Wait_TimeMilli(axis, waitTimeMilliseconds)
D: CompareWindowsUpdates(waitTimeMilliseconds)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
729. Model's answer: D
729. Correct answer: D
729. Result: Correct



Processing Question 730:
730. Context:
 },
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
},
    {
        "No": 606,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 607,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Io Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
},
    {
        "No": 504,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 505,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the specified error code."
-----------------------------------------------------------------------------------
730. Instruction: Get a string representation of the specified error code.
A: SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
B: ErrorToString(errCode)
C: StartPathIntpl3DMov_TriggerEvents(pPathIntplCommand, pTriggerEvents, numAddlCommands, pPathIntplAddlCommand)
D: ErrorDescription(code)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
730. Model's answer: B
730. Correct answer: B
730. Result: Correct



Processing Question 731:
731. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
Di 
git Version Type Version Meaning What the user should do when the 
version is incremented 
A 
major version 
number 
The major version number of the product, 
fixed at 3 for WMX3. 
This number will not be updated for follow-on 
updates of the same product line. Migration 
to a new product with an update of this 
number typically requires an extensive user 
application redesign. 
B 
minor version 
number 
A number that manages the need for code 
changes in the user application. example, 
this means updates such as changing the 
argument type of a WMX3 function, deleting 
a function, changing a structure member, or 
changing the name of a variable. 
WMX3 update installations that involve an 
increment of this number may result in 
compilation errors in the user application. It 
is necessary to update the code and 
redesign the user application. 
C 
revision version 
number 
A number that manages the need to rebuild 
the user application. example, this means
--------------------------------------------
Module File Name (C++ Library) Function 
WMX3Api WMX3Api.lib WMX3Api::GetLibVersion 
CoreMotion CoreMotionApi.lib CoreMotion::GetLibVersion 
Log LogApi.lib Log::GetLibVersion 
ApiBuffer ApiBufferApi.lib ApiBuffer::GetLibVersion 
CyclicBuffer CyclicBufferApi.lib CyclicBuffer::GetLibVersion 
Compensation CompensationApi.lib Compensation::GetLibVersion 
IO IOApi.lib Io::GetLibVersion 
Event EventApi.lib EventControl::GetLibVersion 
AdvancedMotion AdvancedMotionApi.lib AdvancedMotion::GetLibVersion 
UserMemory UserMemoryApi.lib UserMemory::GetLibVersion 
PMMotion PMMotionApi.lib PMMotion::GetLibVersion 
EcPlatform EcApi.lib Ecat::GetLibVersion 
RtexPlatform RtexApi.lib RTEX::GetLibVersion 
MIIIPlatform MIIIApi.lib MIII::GetLibVersion 
CCLinkPlatform CCLinkApi.lib CCLink::GetLibVersion 
SimuPlatform SimuApi.lib Simu::GetLibVersion 

Engine Version Number 
The engine version number can be obtained using the GetModulesInfo function. The engine version is contained in the
-----------------------------------------------------------------------------------
731. Instruction: Get the version of the module library.
A: GetVersion()
B: GetPSOConfig_Option(channel)
C: GetLibVersion()
D: FetchLibVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
731. Model's answer: C
731. Correct answer: C
731. Result: Correct



Processing Question 732:
732. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is used to retrieve the version information of the library used to 
compile the application. This function is static, and may be called without declaring 
an instance of the Ecat class or creating a device. The function GetVersion is used 
to retrieve the version information of the loaded EcPlatform.rtdll, which could be 
different from the library. The version of the EcPlatform.rtdll is determined by the rtdll 
file that is loaded by WMX3Engine. 

◆IsDeviceValid() 

bool bool 
IsDeviceValid ( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
732. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)
B: PdoRead(slaveId, index, subindex, pdoBuffSize)
C: IsDeviceValid()
D: IsValidDevice()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
732. Model's answer: C
732. Correct answer: C
732. Result: Correct



Processing Question 733:
733. Context:
 The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
--------------------------------------------
◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

 

AdvMotion Class Reference 

This class contains advanced position command functions. 

Classes
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
-----------------------------------------------------------------------------------
733. Instruction: Get the version of the module rtdll.
A: ScanNetwork()
B: SimulatePosAtTime(pSimulatePosCommand, int returnType, double timeMilliseconds)
C: GetVersion()
D: FetchCurrentVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
733. Model's answer: C
733. Correct answer: C
733. Result: Correct



Processing Question 734:
734. Context:
 RegisterRead(int slaveId, int Ecat 
RegisterRead(int masterId, i Ecat 
RegisterWrite(int slaveId, int Ecat 
RegisterWrite(int masterId, i Ecat 
RegisterWrite(int slaveId, int Ecat 
RegisterWrite(int masterId, i Ecat 
ResetRefClockInfo() Ecat 
ResetRefClockInfo(int maste Ecat 
ResetTransmitStatisticsInfo Ecat 
ResetTransmitStatisticsInfo Ecat 
ScanNetwork() Ecat 
ScanNetwork(int masterId) Ecat 
SdoDownload(int slaveId, in Ecat 
SdoDownload(int masterId, Ecat 
SdoDownload(int slaveId, in Ecat
--------------------------------------------
Function 
C++ 
ECAPIFUNC 
ScanNetwork(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
ChangeSlaveState(int 
masterId, int slaveId, 
EcStateMachine::T state, 
int* errorCode) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
StartHotconnect(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
ResetRefClockInfo(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
ECAPIFUNC
--------------------------------------------
ScanNetwork() : Ecat 
SdoDownload() : Ecat 
SdoUpload() : Ecat 
Set2DPitchErrorCompensation() : Compensation 
SetAbsoluteEncoderHomeOffset() : Config 
SetAbsoluteEncoderMode() : Config 
SetAbsoluteSyncPhase() : Sync 
SetAlarm() : Simu 
SetAlarmParam() : Config 
SetApiLog() : Log 
SetAxisCommandMode() : AxisControl 
SetAxisMode() : Ecat 
SetAxisParam() : Config 
SetAxisPolarity() : Config 
SetAxisUnit() : Config 
SetBacklashCompensation() : Compensation 
SetCommandPos() : Home 
SetCommandPosToFeedbackPos() : Home 
SetConstantLinearVel() : AdvVelocity 
SetCustomEvent() : EventControl 
SetCustomEventConfigureOfModule() : EventControl 
SetCustomEventInput() : EventControl 
SetCustomEventOutput() : EventControl 
SetCustomLog() : Log 
SetDeviceName() : WMX3Api 
SetDeviceWaitEvent() : WMX3Api 
SetEmergencyStopParam() : Config 
SetEncoderRange() : Config 
SetEniFilePath() : Ecat 
SetEvent() : EventControl 
SetEventInput() : EventControl 
SetEventOutput() : EventControl
--------------------------------------------
◆GetVersion() 
ECAPIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 

◆ScanNetwork() [1/2]

◆ScanNetwork() [2/2]
ECAPIFUNC 
ScanNetwork ( ) 
Scan the network topology. 
Remarks 
The scan result updates the master information obtained by function 
GetMasterInfo. 
ECAPIFUNC 
ScanNetwork ( int masterId ) 
Scan the network topology. 

Parameters 
[in] 
masterId ID of the master whose 
network will be scanned. 
Remarks 

The scan result updates the master information obtained by function 
GetMasterInfo. 

◆ChangeSlaveState() [1/2]
-----------------------------------------------------------------------------------
734. Instruction: Scan the network topology.
A: ScanNetwork()
B: SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
C: DiscoverNetworkDevices()
D: StartHotconnect()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
734. Model's answer: A
734. Correct answer: A
734. Result: Correct



Processing Question 735:
735. Context:
 slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
hmAcc) 
Type int 
Value error code 
ECAPIFUNC 
StartAxisHM(int slaveId, 
int axisIndex, int 
method, unsigned int 
C++ 
switchSpeed, unsigned 
int zeroSpeed, unsigned 
int hmAcc, int 
homeOffset) 
Python 
Type 
Value 
PythonAPI is not supported. 
ECAPIFUNC HaltAxis(int 
C++ slaveId, int axisIndex) 
def HaltAxis(slaveId, 
Python 
axisIndex) 
Type int 
Value error code 
ECAPIFUNC 
C++ HaltAxisRelease(int 
slaveId, int axisIndex) 
def 
Python HaltAxisRelease(slaveId, 
axisIndex) 
Type int 
Value error code
--------------------------------------------
ECAPIFUNC HaltAxis (int masterId, int slaveId, int 
axisIndex) 


Halt the specified slave axis. More... 

ECAPIFUNC HaltAxisRelease (int slaveId, int 
axisIndex) 

Release the halt state for a specified 
slave axis. More... 

ECAPIFUNC HaltAxisRelease (int masterId, int 
slaveId, int axisIndex) 

Release the halt state for a specified 
slave axis. More... 

ECAPIFUNC OpenSerialChannel (int slaveId, int 
chnlId, wchar_t *comName, DCB *dcb, 
COMMTIMEOUTS *timeout, unsigned int 
*error=NULL) 

Open a serial channel to the specified 
slave. More... 

ECAPIFUNC OpenSerialChannel (int masterId, int 
slaveId, int chnlId, wchar_t *comName, 
DCB *dcb, COMMTIMEOUTS *timeout, 
unsigned int *error=NULL) 
Open a serial channel to the specified 
slave. More... 

ECAPIFUNC OpenSerialChannel (int slaveId, int 
chnlId, char *comName, DCB *dcb, 
COMMTIMEOUTS *timeout, unsigned int 
*error=NULL) 
Open a serial channel to the specified 
slave. More...
--------------------------------------------
},
    {
        "No": 1006,
        "FunctionC++": "ECAPIFUNC HaltAxis(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 1007,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
-----------------------------------------------------------------------------------
735. Instruction: Change the specified slave state.
A: ChangeSlaveStatus(slaveId, status)
B: ChangeSlaveState(slaveId, state)
C: GetVersion()
D: HaltAxis(slaveId, axisIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
735. Model's answer: B
735. Correct answer: B
735. Result: Correct



Processing Question 736:
736. Context:
 ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
--------------------------------------------
adCallBack 
callbackFunc, unsigned 
int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, int 
sdoDataSize, unsigned 
char* sdoData, unsigned 
int* errCode, unsigned 
int waitTime = 0) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoUpload(int masterId, 
int slaveId, int index, int 
subindex, int 
sdoBuffSize, unsigned 
char* sdoBuff, unsigned 
int* actualSize, unsigned 
int* errCode, unsigned 
int waitTime = 0) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported.
--------------------------------------------
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, int 
sdoDataSize, unsigned 
char* sdoData, 
EcSdoDownloadCallBac 
k callbackFunc, 
unsigned int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoUpload(int masterId, 
int slaveId, int index, int 
subindex, 
EcSdoUploadCallBack 
callbackFunc, unsigned 
int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, 
EcSdoType::T sdoType, 
int sdoDataSize, 
unsigned char* sdoData, 
unsigned int* errCode, 
unsigned int waitTime = 
0, BOOL complete =
--------------------------------------------
Function 

Python 

Type 

Returns 

Value 

Remarks 


def 
SdoDownload_Sdo 
Type(slaveId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData) 
def 
SdoDownload_Sdo 
Type_WaitTime(slav 
eId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData, waitTime) 
def 
SdoDownload_Sdo 
Type_WaitTime_Co 
mplete(slaveId, 
index, subindex, 
sdoType, 
sdoDataSize, 
sdoData, waitTime, 
complete) 


tuple 


0 : int -error code 
1 : int -SDO abort 
code 
C++ 

ECAPIFUNC 
SdoUpload(int slaveId, 
int index, int subindex, 
EcSdoType::T sdoType, 
int sdoBuffSize, 
unsigned char* sdoBuff, 
unsigned int* actualSize,
-----------------------------------------------------------------------------------
736. Instruction: Start hot connect.
A: StartHotconnect()
B: SdoUpload(slaveId, index, subindex, sdoBuffSize)
C: InitiateHotConnection()
D: StartEngine(path)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
736. Model's answer: A
736. Correct answer: A
736. Result: Correct



Processing Question 737:
737. Context:
 GetMasterInfo(EcMasterInfo Ecat 
GetMasterInfo(int masterId, Ecat 
GetMasterInfoList(EcMasterEcat 
GetOutputBit(int slaveId, int Ecat 
GetOutputBit(int masterId, in Ecat 
GetOutputByte(int slaveId, in Ecat 
GetOutputByte(int masterId, Ecat 
GetOutputBytes(int slaveId, Ecat 
GetOutputBytes(int masterId Ecat 
GetSdoInfoEDList(int slaveI Ecat 
GetSdoInfoEDList(int maste Ecat 
GetSdoInfoEDList(int slaveI Ecat 
GetSdoInfoEDList(int maste Ecat 
GetSdoInfoODList(int slaveI Ecat 
GetSdoInfoODList(int maste Ecat 
GetSdoInfoODList(int slaveI Ecat
--------------------------------------------
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, int 
sdoDataSize, unsigned 
char* sdoData, 
EcSdoDownloadCallBac 
k callbackFunc, 
unsigned int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoUpload(int masterId, 
int slaveId, int index, int 
subindex, 
EcSdoUploadCallBack 
callbackFunc, unsigned 
int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, 
EcSdoType::T sdoType, 
int sdoDataSize, 
unsigned char* sdoData, 
unsigned int* errCode, 
unsigned int waitTime = 
0, BOOL complete =
--------------------------------------------
SdoDownload(int masterId, Ecat
--------------------------------------------
FALSE) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoUpload(int masterId, 
int slaveId, int index, int 
subindex, EcSdoType::T 
sdoType, int 
sdoBuffSize, unsigned 
char* sdoBuff, unsigned 
int* actualSize, unsigned 
int* errCode, unsigned 
int waitTime = 0, BOOL 
complete = FALSE) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, 
EcSdoType::T sdoType, 
int sdoDataSize, 
unsigned char* sdoData, 
EcSdoDownloadCallBac 
k callbackFunc, 
unsigned int waitTime, 
BOOL complete = 
FALSE) 
Python
-----------------------------------------------------------------------------------
737. Instruction: Read the current master information from the engine.
A: GetVersion()
B: GetMasterDetails()
C: GetMasterInfo()
D: SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
737. Model's answer: C
737. Correct answer: C
737. Result: Correct



Processing Question 738:
738. Context:
 ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, 


EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, int 
sdoDataSize, unsigned 
char* sdoData, 
EcSdoDownloadCallBac 
k callbackFunc, 
unsigned int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoUpload(int masterId, 
int slaveId, int index, int 
subindex, 
EcSdoUploadCallBack 
callbackFunc, unsigned 
int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SdoDownload(int 
masterId, int slaveId, int 
index, int subindex, 
EcSdoType::T sdoType, 
int sdoDataSize, 
unsigned char* sdoData, 
unsigned int* errCode, 
unsigned int waitTime = 
0, BOOL complete =
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
738. Instruction: Download data to the specified slave SDO.
A: SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)
B: SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)
C: SdoUpload(slaveId, index, subindex, sdoDataSize, sdoData)
D: SetUpdatePeriod(period)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
738. Model's answer: A
738. Correct answer: A
738. Result: Correct



Processing Question 739:
739. Context:
 Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 
sdoType, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
slave will be operated. 
[in] 
slaveId ID of the slave from 
which SDO data will be 
uploaded. 
[in] 
index SDO index. 
[in] 
subindex SDO subindex. 
[in] 
sdoBuffSize Size of sdoBuff which is 
used to obtain the 
uploaded SDO data. 
[out] 
sdoBuff A pointer to an array to 
which the uploaded SDO 
data will be filled in. 
[out] 
actualSize A pointer to an unsigned 
int type to which the 
actual uploaded SDO 
data size will be filled in. 
[out] 
errCode A pointer to an int type to 
which an SDO abort 
code from the slave will 
be filled in if there is any. 
[in] 
waitTime An error will be returned 
if the SDO upload 
process is not finished 
within the specified wait 
time. 

Remarks 

This function will upload SDO by expedited type in which SDO size just can be 1, 2 
and 4 byte. 

◆SdoDownload() [3/8]
ECAPIFUNC 
SdoDownload ( int slaveId,
-----------------------------------------------------------------------------------
739. Instruction: Upload data from the specified slave SDO.
A: SdoUpload(slaveId, index, subindex, sdoBuffSize)
B: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)
C: GetMasterInfo()
D: SdoUploadExtended(slaveId, index, subindex, sdoBuffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
739. Model's answer: A
739. Correct answer: A
739. Result: Correct



Processing Question 740:
740. Context:
 ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, 


EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
--------------------------------------------
Function 

Python 

Type 

Returns 

Value 

Remarks 


def 
SdoDownload_Sdo 
Type(slaveId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData) 
def 
SdoDownload_Sdo 
Type_WaitTime(slav 
eId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData, waitTime) 
def 
SdoDownload_Sdo 
Type_WaitTime_Co 
mplete(slaveId, 
index, subindex, 
sdoType, 
sdoDataSize, 
sdoData, waitTime, 
complete) 


tuple 


0 : int -error code 
1 : int -SDO abort 
code 
C++ 

ECAPIFUNC 
SdoUpload(int slaveId, 
int index, int subindex, 
EcSdoType::T sdoType, 
int sdoBuffSize, 
unsigned char* sdoBuff, 
unsigned int* actualSize,
-----------------------------------------------------------------------------------
740. Instruction: Download data to the specified slave SDO.
A: SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
B: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
C: HaltAxis(slaveId, axisIndex)
D: SdoDownload(slaveId, index, subindex, sdoDataSize, sdoData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
740. Model's answer: D
740. Correct answer: A
740. Result: Wrong



Processing Question 741:
741. Context:
 ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 
sdoType, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More...
--------------------------------------------
Function 

Python 

Type 

Returns 

Value 

Remarks 


def 
SdoDownload_Sdo 
Type(slaveId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData) 
def 
SdoDownload_Sdo 
Type_WaitTime(slav 
eId, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData, waitTime) 
def 
SdoDownload_Sdo 
Type_WaitTime_Co 
mplete(slaveId, 
index, subindex, 
sdoType, 
sdoDataSize, 
sdoData, waitTime, 
complete) 


tuple 


0 : int -error code 
1 : int -SDO abort 
code 
C++ 

ECAPIFUNC 
SdoUpload(int slaveId, 
int index, int subindex, 
EcSdoType::T sdoType, 
int sdoBuffSize, 
unsigned char* sdoBuff, 
unsigned int* actualSize,
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
741. Instruction: Upload data from the specified slave SDO.
A: SdoDownload_SdoType(slaveId, index, subindex, sdoType, sdoDataSize, sdoData)
B: SdoUpload(slaveId, index, subindex, sdoBuffSize)
C: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)
D: SdoUpload_SdoRequest(slaveId, index, subindex, sdoDataType, sdoDataSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
741. Model's answer: C
741. Correct answer: C
741. Result: Correct



Processing Question 742:
742. Context:
 Parameters 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 

written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoDataSize PDO size. 
[in] 
pdoData A pointer to the PDO 

data array. 
[in] 
mask Mask to decide which 
bits of pdoData will be 
written. All bits will be 
written if zero. 

◆TxPdoWrite() [2/2]
ECAPIFUNC 
TxPdoWrite ( int masterId, 
int slaveId, 
int index, 
int subindex, 

int int 
pdoDataSize, 
unsigned char * pdoData, 
unsigned int mask = 0) 
Write data to the specified slave's Tx PDO. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoDataSize PDO size. 
[in] 
pdoData A pointer to the PDO 
data array. 
[in] 
mask Mask to decide which 
bits of pdoData will be 
written. All bits will be 
written if zero. 

Remarks
--------------------------------------------
Parameters 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 


[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

Remarks 

If AllowPdoReadWrite:1 is not defined in the eni file, this function returns an 
error. 
The value to be written is the logical conjunction of pdoData and mask. 
However, the masks 0x00000000 and 0xFFFFFFFFFF have the same 
meaning. 
This function returns an error if a specific PDO Index is given in the argument 
index, if AllowPdoReadWrite:1 is defined in the eni file but the mask is 
0x00000000. This is a safety mechanism to prevent overwriting of variables 
used in motion control. 
To enable PDO write in all cases, in addition to defining AllowPdoReadWrite:1 
in the eni file, provide 0xFFFFFFFFFF for the argument mask. 
The specific PDO Indexes are as follows:
--------------------------------------------
◆GetSdoInfoEDList() [4/4]

ECAPIFUNC 
GetSdoInfoEDList ( 
ECAPIFUNC 
GetSdoInfoEDList ( 
int 
int 
int 
masterId, 
slaveId, 
index, 
EcSdoInfoGetEDLis callbackFunc, 
unsigned int waitTime 
) 
Get the ED list from the specified slave's OD index. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave from 
which the ED list will be 
obtained. 
[in] 
index OD index from which the 
ED list will be obtained. 
[in] 
callbackFunc A pointer to a callback 
function which will be 
called when the process 
of getting the ED list is 
done. 
[in] 
waitTime An error will be returned 
if the ED list getting 
process is not finished 
within the specified wait 
time. 

◆TxPdoWrite() [1/2]

ECAPIFUNC 
TxPdoWrite ( 
ECAPIFUNC 
TxPdoWrite ( 
int 
int 
int 
int 
slaveId, 
index, 
subindex, 
pdoDataSize, 
unsigned char * pdoData, 
unsigned int mask = 0
) 
Write data to the specified slave's Tx PDO.
--------------------------------------------
PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 


◆ClearTxPdoWrite() [2/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
int 
masterId, 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

◆PdoRead() [1/2]
-----------------------------------------------------------------------------------
742. Instruction: Write data to the specified slave's Tx PDO.
A: TxPdoWriteRequest(slaveId, index, subindex, dataSize, data)
B: TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)
C: HaltAxis(slaveId, axisIndex)
D: PdoRead(slaveId, index, subindex, pdoBuffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
742. Model's answer: B
742. Correct answer: B
742. Result: Correct



Processing Question 743:
743. Context:
 Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC ClearTxPdoWrite (int masterId, int 


slaveId, int index, int subindex) 

Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC PdoRead (int slaveId, int index, int 
subindex, int pdoBuffSize, unsigned char 
*pdoBuff, unsigned int *actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 
ECAPIFUNC PdoRead (int masterId, int slaveId, int 
index, int subindex, int pdoBuffSize, 
unsigned char *pdoBuff, unsigned int 
*actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 

ECAPIFUNC SetOutputBit (int slaveId, int byte, int bit, 

unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputBit (int masterId, int slaveId, int 

byte, int bit, unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputByte (int slaveId, int byte, 
unsigned char data)
--------------------------------------------
PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 

◆ClearTxPdoWrite() [1/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 


[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

Remarks
--------------------------------------------
PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 


◆ClearTxPdoWrite() [2/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
int 
masterId, 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

◆PdoRead() [1/2]
--------------------------------------------
Function C++ subindex, int 
pdoDataSize, unsigned 
char* pdoData, unsigned 
int mask = 0) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
ClearTxPdoWrite(int 
masterId, int slaveId, int 
index, int subindex) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
PdoRead(int masterId, 
int slaveId, int index, int 
subindex, int 
pdoBuffSize, unsigned 
char* pdoBuff, unsigned 
int* actualSize) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
ECAPIFUNC 
SetOutputBit(int 
C++ masterId, int slaveId, int 
byte, int bit, unsigned 
char data)
-----------------------------------------------------------------------------------
743. Instruction: Clear the data which is being written to Tx PDO.
A: PdoRead(slaveId, index, subindex, pdoBuffSize)
B: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)
C: ClearTxPdoWriteRequest(slaveId, pdoIndex, pdoSubindex)
D: ClearTxPdoWrite(slaveId, index, subindex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
743. Model's answer: D
743. Correct answer: D
743. Result: Correct



Processing Question 744:
744. Context:
 ◆PdoRead() [1/2]

ECAPIFUNC 
PdoRead ( 
ECAPIFUNC 
PdoRead ( 
int 
int 
int 
int 
slaveId, 
index, 
subindex, 
pdoBuffSize, 
unsigned char * pdoBuff, 
unsigned int * actualSize 
) 
Read data from the specified slave's Rx or Tx PDO. 

Parameters 
[in] 
slaveId ID of the slave from 
which Rx or Tx PDO 

data will be read. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 
[in] 
pdoBuffSize Size of pdoBuff. 
[out] 
pdoBuff A pointer to an array to 

which the read PDO 
data will be filled in. 

[out] 
actualSize A pointer to an unsigned 
int type to which the 
actually read PDO size 
will be filled in. 

◆PdoRead() [2/2]

ECAPIFUNC 
PdoRead ( 
ECAPIFUNC 
PdoRead ( 
int 
int 
int 
int 
int 
masterId, 
slaveId, 
index, 
subindex, 
pdoBuffSize, 
unsigned char * pdoBuff, 
unsigned int * actualSize 
) 
Read data from the specified slave's Rx or Tx PDO.
--------------------------------------------
PDO Index Name 
0x6040 ControlWord 
0x6060 ModesOfOperation 
0x607A TargetPosition 
0x60FF TargetVelocity 
0x6071 TargetTorque 
0x6072 MaxTorque 
0x60E0 PositiveTorqueLimit 
0x60E1 NegativeTorqueLimit 
0x60B8 TouchProbeFunction 
0x607F MaxProfileVelocity 
0x60B1 VelocityOffset 
0x60B2 TorqueOffset 
0x6080 MaxMotorSpeed 
0x60FE DigitalOutput 


◆ClearTxPdoWrite() [2/2]
ECAPIFUNC 
ClearTxPdoWrite ( int 
int 
int 
masterId, 
slaveId, 
index, 
int subindex 
) 
Clear the data which is being written to Tx PDO. Instead, the internal Tx PDO data 
of EcPlatform will be written. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave to which 
the Tx PDO data will be 
written. 
[in] 
index PDO index. 
[in] 
subindex PDO subindex. 

◆PdoRead() [1/2]
--------------------------------------------
Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC ClearTxPdoWrite (int masterId, int 


slaveId, int index, int subindex) 

Clear the data which is being written to 
Tx PDO. More... 

ECAPIFUNC PdoRead (int slaveId, int index, int 
subindex, int pdoBuffSize, unsigned char 
*pdoBuff, unsigned int *actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 
ECAPIFUNC PdoRead (int masterId, int slaveId, int 
index, int subindex, int pdoBuffSize, 
unsigned char *pdoBuff, unsigned int 
*actualSize) 
Read data from the specified slave's Rx 
or Tx PDO. More... 

ECAPIFUNC SetOutputBit (int slaveId, int byte, int bit, 

unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputBit (int masterId, int slaveId, int 

byte, int bit, unsigned char data) 

Set the value of an output bit for a slave. 

More... 

ECAPIFUNC SetOutputByte (int slaveId, int byte, 
unsigned char data)
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
744. Instruction: Read data from the specified slave's Rx or Tx PDO.
A: GetVersion()
B: PdoReadFromSlave(slaveNum, dataIndex, subIndex, buffSize)
C: SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)
D: PdoRead(slaveId, index, subindex, pdoBuffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
744. Model's answer: D
744. Correct answer: D
744. Result: Correct



Processing Question 745:
745. Context:
 Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SetAxisMode(int slaveId, 
int axisIndex, 
EcOperationMode::T 
mode) 
Python 
def SetAxisMode(slaveId, 
axisIndex, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
ECAPIFUNC 
StartAxisPP(int slaveId, 
int axisIndex, int 
targetPos, unsigned int 
C++ profileVel, unsigned int 
profileAcc, unsigned int 
profileDec, char 
immediately = -1, char 
relative = -1) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel,
--------------------------------------------
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
◆SetAxisMode() [1/2]
ECAPIFUNC 
SetAxisMode ( int slaveId, 
int axisId, 
EcOperationMode::T mode 
) 
Set the axis operation mode for a specified slave axis. The operation mode set by 
this function overrides the operation mode generated by the CoreMotion module 
(including the mode changed by SetAxisCommandMode function) until NONE is 
set by this function. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis whose operation 
mode will be set. 
[in] 
axisId ID of the axis to which 
the operation model will 
be set. 
[in] 
mode Operation mode. 

◆SetAxisMode() [2/2]

ECAPIFUNC 
SetAxisMode ( 
ECAPIFUNC 
SetAxisMode ( 
int 
int 
int 
masterId, 
slaveId, 
axisId, 
EcOperationMode::T mode 
) 
Set the axis operation mode for a specified slave axis. The operation mode set by 
this function overrides the operation mode generated by the CoreMotion module 
(including the mode changed by SetAxisCommandMode function) until NONE is
-----------------------------------------------------------------------------------
745. Instruction: Set the axis operation mode for a specified slave axis.
A: SetAxisMode(slaveId, axisIndex, mode)
B: SetAxisModeByIdAndIndex(slaveId, axisIndex, mode)
C: HaltAxisRelease(slaveId, axisIndex)
D: HaltAxis(slaveId, axisIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
745. Model's answer: A
745. Correct answer: A
745. Result: Correct



Processing Question 746:
746. Context:
 set by this function. 
Parameters 
[in] 
[in] 
masterId 
slaveId 
ID of the master whose 
slave will be operated. 
ID of the slave with the 
axis whose operation 
mode will be set. 
[in] 
axisId ID of the axis to which 
the operation model will 
be set. 
[in] 
mode Operation mode. 

◆StartAxisPP() [1/2]
ECAPIFUNC 
StartAxisPP ( int slaveId, 
int axisIndex, 
int targetPos, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char immediately = -1, 

char relative = -1char relative = -1
) 
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP 

operation will be started. 
[in] 
targetPos Target position. 
[in] 
profileVel Profile velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
immediately Start profile immediately.
--------------------------------------------
axisIndex, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
CCLINKAPIFUNC 
StartAxisPP(int slaveId, int 
axisIndex, int targetPos, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char immediately = -1, 
char relative = -1) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec, 
immediately) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec, 
immediately,
--------------------------------------------
If -1, use previous 
setting. If 0, start profile 
after previous profile 
motion end. If 1, start 
profile immediately 
which will override 
previous profile motion. 

[in] 
relative Position specified by 
targetPos is a relative 
motion. If -1, use 
previous setting. If 0, 
position specified by 
targetPos is an absolute 
position. If 1, position 
specified by targetPos is 
a relative motion. 

◆StartAxisPP() [2/2]

immediatelimmediatel
ECAPIFUNC 
StartAxisPP ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
targetPos, 
y = -1, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char 
char 
) 
relative = -1
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP
--------------------------------------------
Write VoE data to the specified slave. 

More... 

ECAPIFUNC SetAxisMode (int slaveId, int axisId, 
EcOperationMode::T mode) 

Set the axis operation mode for a 
specified slave axis. More... 

ECAPIFUNC SetAxisMode (int masterId, int slaveId, int 
axisId, EcOperationMode::T mode) 
Set the axis operation mode for a 
specified slave axis. More... 

ECAPIFUNC StartAxisPP (int slaveId, int axisIndex, int 
targetPos, unsigned int profileVel, 
unsigned int profileAcc, unsigned int 
profileDec, char immediately=-1, char 
relative=-1) 

Start the PP operation for a specified 
slave axis. More... 

ECAPIFUNC StartAxisPP (int masterId, int slaveId, int 
axisIndex, int targetPos, unsigned int 
profileVel, unsigned int profileAcc, 
unsigned int profileDec, char 
immediately=-1, char relative=-1) 
Start the PP operation for a specified 
slave axis. More...
-----------------------------------------------------------------------------------
746. Instruction: Start the PP operation for a specified slave axis.
A: SetAxisPositionProfile(slaveId, axisIndex, targetPos, maxVelocity, acceleration, deceleration)
B: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
C: SetAxisMode(slaveId, axisIndex, mode)
D: SetAxisMode(slaveId, axisIndex, mode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
746. Model's answer: B
746. Correct answer: B
746. Result: Correct



Processing Question 747:
747. Context:
 slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
◆ 
StartAxisHM() 

◆StartAxisHM() [4/4]
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc, 
int homeOffset 
) 
Start the HM operation for a specified slave axis. 

Parameters 
[in] 
masterId 

[in] 
slaveId 

[in] 
axisIndex 
[in] 
method 
[in] 
switchSpeed 

[in] 
zeroSpeed 

[in] 
hmAcc 

[in] 
homeOffset 

ID of the master whose 

slave will be operated. 
ID of the slave with the 
axis for which HM 
operation will be started. 

ID of axis for which HM 

operation will be started. 
Homing method (refer to 
manual of servo). 

Operation velocity until 
the switch signal is 
detected. 

Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing
--------------------------------------------
◆StartAxisHM() [3/4]

◆StartAxisHM() [3/4]
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc, 
int homeOffset 
) 
Start the HM operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which HM 
operation will be started. 
[in] 
axisIndex ID of axis for which HM 
operation will be started. 
[in] 
method Homing method (refer to 
manual of servo). 
[in] 
switchSpeed Operation velocity until 
the switch signal is 
detected. 
[in] 
zeroSpeed Operation velocity until 
the home position is 
detected. 
[in] 
hmAcc Acceleration and 
deceleration during the 
HM mode. 
[in] 
homeOffset home offset after homing 
done. 

◆ 
StartAxisHM()
--------------------------------------------
◆StartAxisHM() [1/4]

ECAPIFUNC 
StartAxisHM ( 
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc 
) 
Start the HM operation for a specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which HM 
operation will be started. 
[in] 
axisIndex ID of axis for which HM 
operation will be started. 
[in] 
method Homing method (refer to 
manual of servo). 
[in] 
switchSpeed Operation velocity until 
the switch signal is 
detected. 
[in] 
zeroSpeed Operation velocity until 
the home position is 
detected. 
[in] 
hmAcc Acceleration and 
deceleration during the 
HM mode. 

◆StartAxisHM() [2/4]
-----------------------------------------------------------------------------------
747. Instruction: Start the HM operation for a specified slave axis.
A: InitializeAxisHM(slaveId, axisIndex, opMode, maxSpeed, minSpeed, hmAcc)
B: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)
C: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
D: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
747. Model's answer: C
747. Correct answer: C
747. Result: Correct



Processing Question 748:
748. Context:
 Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave whose 
axis halt state will be 
released. 
[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆HaltAxisRelease() [2/2]

ECAPIFUNC 
HaltAxisRelease ( 
ECAPIFUNC 
HaltAxisRelease ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master of the 

slave whose axis halt 
state will be released. 

[in] 
slaveId ID of the slave whose 

axis halt state will be 
released. 

[in] 
axisIndex ID of the axis for which 
halt state will be 
released.
--------------------------------------------
},
    {
        "No": 922,
        "FunctionC++": "ECAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 923,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
--------------------------------------------
},
    {
        "No": 1006,
        "FunctionC++": "ECAPIFUNC HaltAxis(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 1007,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
-----------------------------------------------------------------------------------
748. Instruction: Halt the specified slave axis.
A: HaltAxisRelease(slaveId, axisIndex)
B: GetLibVersion()
C: AdjustAxisHalt(slaveId, axisIndex)
D: HaltAxis(slaveId, axisIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
748. Model's answer: D
748. Correct answer: D
748. Result: Correct



Processing Question 749:
749. Context:
 ◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave whose 
axis halt state will be 
released. 
[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆HaltAxisRelease() [2/2]

ECAPIFUNC 
HaltAxisRelease ( 
ECAPIFUNC 
HaltAxisRelease ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master of the 

slave whose axis halt 
state will be released. 

[in] 
slaveId ID of the slave whose 

axis halt state will be 
released. 

[in] 
axisIndex ID of the axis for which 
halt state will be 
released.
--------------------------------------------
Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
},
    {
        "No": 922,
        "FunctionC++": "ECAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 923,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
--------------------------------------------
},
    {
        "No": 1006,
        "FunctionC++": "ECAPIFUNC HaltAxis(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 1007,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int masterId, int slaveId, int axisIndex)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
-----------------------------------------------------------------------------------
749. Instruction: Release the halt state for a specified slave axis.
A: SdoUpload_SdoType(slaveId, index, subindex, sdoType, sdoBuffSize)
B: HaltAxisRelease(slaveId, axisIndex)
C: SetAxisMode(slaveId, axisIndex, mode)
D: StopAxisRelease(slaveId, axisIndex)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
749. Model's answer: B
749. Correct answer: B
749. Result: Correct



Processing Question 750:
750. Context:
 Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆ClearTouchProbe1Detected() 

SIMUAPIFU 
NC 
ClearTouchPr 
obe1Detecte 
d ( int axis ) 
SIMUAPIFU 
NC 
ClearTouchPr 
obe1Detecte 
d ( int axis ) 
Clear the set "touch probe 1 detected signal" for a simulator axis. 

Parameters 
[in] 
axis The axis to clear. 

Remarks 

The signal will be updated during the next communication cycle. 

◆SetUpdatePeriod() 
SIMUAPIFU 
NC 
SetUpdatePe 
riod ( unsigned int period ) 
Set the master info update period. 

Parameters 
[in] 
period New master info update 
period in unit ms. 
Remarks 

The default update period is 1ms. If the master info does not need to be updated so 
often, system resource use can be reduced by specifying a larger period to reduce 
the update frequency. 

◆GetMasterInfo()
--------------------------------------------
◆SetUpdatePeriod() 

ECAPIFUNC 
SetUpdatePe 
ECAPIFUNC 
SetUpdatePe 
riod ( 
unsigned int period ) 
Set the master info update period. 

Parameters 
[in] 
period New master info update 
period in unit ms. 
Remarks 

The default update period of master info is 10ms. Specifying a small period by this 
API can update master info faster but cost more system resource. If the master info 
does not need to be updated so often, system resource use can be reduced by 
specifying a larger period to reduce the update frequency. 

◆GetMasterInfo() [1/2]
ECAPIFUNC 
GetMasterInf 
o ( EcMasterInfo master ) 
Read the current master information from the engine. 
Parameters 
[out] 
master A pointer to a 
EcMasterInfo class that 
will be filled in with the 
current master 
information. 

◆GetMasterInfo() [2/2]

ECAPIFUNC 
GetMasterInfo ( 
ECAPIFUNC 
GetMasterInfo ( 
int 
masterId, 
EcMasterInfo * master 
) 
Read the specified master information from the engine.
--------------------------------------------
WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
Python 
Type 
Value 
C++ 
WMX3APIFUNC 
SetSingleTurn(int axis, 
bool enable, unsigned 
int encoderCount); 
def SetSingleTurn(axis, 
enable. encoderCount) 
int 
error code 
WMX3APIFUNC 
SetMovingAverageProfil 
eTime(int axis, double 
milliseconds); 
def 
SetMovingAverageProfile 
Time(axis, milliseconds) 
int 
error code 
WMX3APIFUNC 
SetAxisUnit(int axis, 
double unit); 
def SetAxisUnit(axis, unit) 
int 
error code 
WMX3APIFUNC 
SetVelocityFeedforward 
Gain(int axis, double 
gain);
-----------------------------------------------------------------------------------
750. Instruction: Set the master info update period.
A: SetUpdatePeriod(period)
B: GetOutputModuleId()
C: HaltAxisRelease(slaveId, axisIndex)
D: SetUpdateInterval(interval)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
750. Model's answer: A
750. Correct answer: A
750. Result: Correct



Processing Question 751:
751. Context:
 },
    {
        "No": 395,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 396,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, wchar_t *pString, unsigned int size)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code. "
--------------------------------------------
Public Attributes 

Friends 

AxisControl * axisControl 
Motion * motion 
Home * home 
Velocity * 
Torque * 
Sync * 
Config * 
velocity 
torque 
sync 
config 

class AxisControl 

class Motion 


class Home 
class Velocity 
class Torque 
class Sync 
class Config 

Member Function Documentation 

◆ErrorToString() [1/2]
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters 
[in] 
errCode The error code to get the 
string representation of. 
[in] 
pString A char array that will 
contain the string 
representation of the 
error. 
[in] 
size The size of the char 
array in number of 
characters. 

Remarks 

This function returns a string representation of the specified error code. The error
--------------------------------------------
static WMX3APIFUNC ErrorToString (int errCode, wchar_t 


*pString, unsigned int size) 

Get a string representation of the 
specified error code. More... 

static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, char 
*pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC ApiLogToString (unsigned char 
*pLogData, unsigned int logDataSize, 
wchar_t *pString, unsigned int size) 
Get a string representation of the raw 
data of an API log. More... 
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module library. 
More... 

Member Function Documentation 

◆ErrorToString() [1/2]

static 
WMX3APIFUNC 
ErrorToString ( 
) 
static 
WMX3APIFUNC 
ErrorToString ( 
) 
int 
char * 
errCode, 
pString, 
unsigned int size 
Get a string representation of the specified error code. 

Parameters
--------------------------------------------
},
    {
        "No": 504,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "AdvancedMotion Class",
        "Instruction": "Get a string representation of the specified error code."
    },
    {
        "No": 505,
        "FunctionC++": "static WMX3APIFUNC ErrorToString(int errCode, char *pString, unsigned int size)",
        "FunctionPython": "def ErrorToString(errCode)",
        "ReturnType": "string",
        "ReturnValue": "error string",
        "Class": "CyclicBuffer Class",
        "Instruction": "Get a string representation of the specified error code."
-----------------------------------------------------------------------------------
751. Instruction: Get a string representation of the specified error code.
A: GetPathIntplBufferPoints(axis, pPoints)
B: ErrorToString(errCode)
C: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
D: StringifyError(errorCode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
751. Model's answer: B
751. Correct answer: B
751. Result: Correct



Processing Question 752:
752. Context:
 The version number of the module library can be read by calling one of the following functions. These functions are static 
functions, and may be called without instantiating an object of the module class. For the WMX3Api.lib library, the API 
functions are directly executed by the engine, and thus the major, minor, and revision version number of the library must 
match those of the engine.
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
static WMX3APIFUNC GetLibVersion (int *pMajorVersion, int 


*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 

Get the version of the module library. 

More... 

static WMX3APIFUNC GetIMDllVersion (int *pVersion, int 
*pRevision) 
Get the version of the IMDll. More... 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
static WMX3APIFUNC 
PrintToFile (const char *filePath, const 
char *format,...) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, 
const wchar_t *format,...) 
Append a string to a file. More... 
PrintToFile (const char *filePath, int 
charsToPrint, const char *buff) 
Append a string to a file. More... 
PrintToFile (const wchar_t *filePath, int 
charsToPrint, const wchar_t *buff) 
Append a string to a file. More... 
PrintToFileIfExist (const char *filePath, 
const char *format,...) 
Append a string to a file. More... 

static WMX3APIFUNC PrintToFileIfExist (const wchar_t
--------------------------------------------
Remarks 
Function 
C++ 
static WMX3APIFUNC 
ApiLogToString(unsigne 
d char *pLogData, 
unsigned int 
logDataSize, wchar_t 
*pString, unsigned int 
size); 
Python 
Returns 
Type 
Value 
Remarks 
Function 
C++ 
static WMX3APIFUNC 
GetLibVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion); 
Python def GetLibVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
C++ 
static WMX3APIFUNC 
GetIMDllVersion(int
-----------------------------------------------------------------------------------
752. Instruction: Get the version of the module library.
A: GetLibraryVersion()
B: ResetSyncStatisticsInfo()
C: ApiLogToString(pLogData, logDataSize)
D: GetLibVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
752. Model's answer: D
752. Correct answer: D
752. Result: Correct



Processing Question 753:
753. Context:
 },
    {
        "No": 495,
        "FunctionC++": "bool IsDeviceValid()",
        "FunctionPython": "def IsDeviceValid()",
        "ReturnType": "bool",
        "ReturnValue": "Whether the device is alive",
        "Class": "AdvancedMotion Class",
        "Instruction": "Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class."
--------------------------------------------
Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number. 
Remarks 

This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
--------------------------------------------
This function is static, and may be called without declaring an instance of this class 
or creating a device. 

◆IsDeviceValid() 
bool 
IsDeviceVali
d 

( 
) 
Return TRUE if this class object has access to a device, and FALSE otherwise. A 
device is required to execute most functions in this class. If this function returns 
FALSE, a device can be created by calling the CreateDevice function from the 
WMX3Api object that was passed to the constructor of this class. 


◆GetVersion() 
WMX3APIFUNC 
GetVersion ( 
int * 
int * 
int * 
pMajorVersion, 
pMinorVersion, 
pRevisionVersion, 
int * pFixVersion 
) 
Get the version of the module rtdll. 

Parameters 
[out] 
pMajorVersion The major version 
number. 
[out] 
pMinorVersion The minor version 
number. 
[out] 
pRevisionVersion The revision version 
number. 
[out] 
pFixVersion The fix version number.
-----------------------------------------------------------------------------------
753. Instruction: Return TRUE if this class object has access to a device, and FALSE otherwise. A device is required to execute most functions in this class. If this function returns FALSE, a device can be created by calling the CreateDevice function from the WMX3Api object that was passed to the constructor of this class.
A: IsDeviceValid()
B: GetMasterInfo()
C: CheckIfDeviceIsValid()
D: GetIMDllVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
753. Model's answer: A
753. Correct answer: A
753. Result: Correct



Processing Question 754:
754. Context:
 Function 
C++ 
CCLINKAPIFUNC 
GetVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion) 
Python def GetVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
ResetSlaveError(int 
slaveId) 
Python 
def 
ResetSlaveError(slaveId) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
SetUpdatePeriod(unsigne 
d int period) 
Python 
def 
SetUpdatePeriod(period) 
Returns 
Type int 
Value error code
--------------------------------------------
ECAPIFUNC GetVersion (int *pMajorVersion, int 
*pMinorVersion, int *pRevisionVersion, int 
*pFixVersion) 
Get the version of the module rtdll. 
More... 

ECAPIFUNC ScanNetwork () 
Scan the network topology. More... 
ECAPIFUNC ScanNetwork (int masterId) 
Scan the network topology. More... 
ECAPIFUNC ChangeSlaveState (int slaveId, 
EcStateMachine::T state, int *errorCode) 
Change the specified slave state. More... 

ECAPIFUNC ChangeSlaveState (int masterId, int 
slaveId, EcStateMachine::T state, int 
*errorCode) 
Change the specified slave state. More... 

ECAPIFUNC StartHotconnect () 
ECAPIFUNC 
ECAPIFUNC 
ECAPIFUNC 
Start hot connect. More... 
StartHotconnect (int masterId) 
Start hot connect. More... 
ResetRefClockInfo () 
Reset the reference clock information. 
More... 
ResetRefClockInfo (int masterId) 
Reset the reference clock information. 


More... 

ECAPIFUNC ResetTransmitStatisticsInfo () 
Reset the transmission statistics 
information. More...
--------------------------------------------
by the WMX3 engine when running the module. The module libraries contain the API function interfaces for the 

programming languages supported by that module. 
For a module library to be able to control the module RTDLL through API functions, the major, minor, and revision version 
numbers of the module library must match those of the module RTDLL. 

The version number of the module RTDLL can be read by calling one of the following functions.
--------------------------------------------
The version number of the module RTDLL can be read by calling one of the following functions. 


Module File Name (Module) Function 
CoreMotion CoreMotion.rtdll CoreMotion::GetVersion 
Log Log.rtdll Log::GetVersion 
ApiBuffer ApiBuffer.rtdll ApiBuffer::GetVersion 
CyclicBuffer CyclicBuffer.rtdll CyclicBuffer::GetVersion 
Compensation Compensation.rtdll Compensation::GetVersion 
IO IO.rtdll Io::GetVersion 
Event Event.rtdll EventControl::GetVersion 
AdvancedMotion AdvancedMotion.rtdll AdvancedMotion::GetVersion 
UserMemory UserMemory.rtdll UserMemory::GetVersion 
PMMotion PMMotion.rtdll PMMotion::GetVersion 
EcPlatform EcPlatform.rtdll Ecat::GetVersion 
RtexPlatform RtexPlatform.rtdll RTEX::GetVersion 
MIIIPlatform MIIIPlatform.rtdll MIII::GetVersion 
CCLinkPlatform CCLinkPlatform.rtdll CCLink::GetVersion 
SimuPlatform SimuPlatform.rtdll Simu::GetVersion
-----------------------------------------------------------------------------------
754. Instruction: Get the version of the module rtdll in CCLINK.
A: ResetSlaveError(slaveId)
B: GetVersion()
C: FetchVersion()
D: StopEngine()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
754. Model's answer: B
754. Correct answer: B
754. Result: Correct



Processing Question 755:
755. Context:
 Function 
C++ SyncToJog(int 
slaveAxis, Profile 
*pProfile); 
Python 
def SyncToJog(slaveAxis, 
pProfile) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SyncToJog(int 
slaveAxis); 
Python def SyncToJog(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
ResolveSync(int 
slaveAxis); 
Python 
def 
ResolveSync(slaveAxis) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
WMX3APIFUNC 
SetSyncGroup(int 
groupId, SyncGroup 
syncGroup); 
Python 
def 
SetSyncGroup(groupId, 
pSyncGroup) 
Type int
--------------------------------------------
Function 
C++ 
CCLINKAPIFUNC 
GetVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion) 
Python def GetVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
ResetSlaveError(int 
slaveId) 
Python 
def 
ResetSlaveError(slaveId) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
SetUpdatePeriod(unsigne 
d int period) 
Python 
def 
SetUpdatePeriod(period) 
Returns 
Type int 
Value error code
--------------------------------------------
},
    {
        "No": 1018,
        "FunctionC++": "CCLINKAPIFUNC ResetSlaveError(int slaveId)",
        "FunctionPython": "def ResetSlaveError(slaveId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Reset the salve's error in CCLINK."
    },
    {
        "No": 1019,
        "FunctionC++": "CCLINKAPIFUNC SetUpdatePeriod(unsigned int period)",
        "FunctionPython": "def SetUpdatePeriod(period)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Set the master info update period in CCLINK."
--------------------------------------------
WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
-----------------------------------------------------------------------------------
755. Instruction: Reset the salve's error in CCLINK.
A: ResetSlaveError(slaveId)
B: ResetSlave(slaveId)
C: SyncToJog(slaveAxis)
D: StartHotconnect()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
755. Model's answer: A
755. Correct answer: A
755. Result: Correct



Processing Question 756:
756. Context:
 },
    {
        "No": 1018,
        "FunctionC++": "CCLINKAPIFUNC ResetSlaveError(int slaveId)",
        "FunctionPython": "def ResetSlaveError(slaveId)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Reset the salve's error in CCLINK."
    },
    {
        "No": 1019,
        "FunctionC++": "CCLINKAPIFUNC SetUpdatePeriod(unsigned int period)",
        "FunctionPython": "def SetUpdatePeriod(period)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Set the master info update period in CCLINK."
--------------------------------------------
Function 
C++ 
CCLINKAPIFUNC 
GetVersion(int 
*pMajorVersion, int 
*pMinorVersion, int 
*pRevisionVersion, int 
*pFixVersion) 
Python def GetVersion() 
Returns 
Type tuple 
Value 
0 : int -error code 
1 : int -
MajorVersion 
2 : int -
MinorVersion 
3 : int -
RevisionVersion 
4 : int -FixVersion 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
ResetSlaveError(int 
slaveId) 
Python 
def 
ResetSlaveError(slaveId) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
CCLINKAPIFUNC 
SetUpdatePeriod(unsigne 
d int period) 
Python 
def 
SetUpdatePeriod(period) 
Returns 
Type int 
Value error code
--------------------------------------------
Function 
C++ ResetTransmitStatisticsI 
nfo(int masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
SetUpdatePeriod(unsign 
ed int period) 
Python 
def 
SetUpdatePeriod(period) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
ECAPIFUNC 
GetMasterInfo(int 
masterId, EcMasterInfo* 
master) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
GetMasterInfoList(EcMa 
sterInfoList* masters) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
ECAPIFUNC 
SetEniFilePath(int
--------------------------------------------
◆ResetTransmitStatisticsInfo() [1/2]
ECAPIFUNC 
ResetTransmitSt 
atisticsInfo ( ) 
Reset the transmission statistics information. 

Remarks 

After this function is called, the statistics information of txDelay, minTxDelay, 
maxTxDelay, packetLoss, and packetTimeout in EcMasterStatisticsInfo will be 
reset. 

◆ResetTransmitStatisticsInfo() [2/2]

ECAPIFUNC 
ResetTransm 
itStatisticsInf 
ECAPIFUNC 
ResetTransm 
itStatisticsInf 
o ( 
int masterId ) 
Reset the transmission statistics information. 

Parameters 
[in] 
masterId ID of the master whose 
transmission statistics 
information will be reset. 

Remarks 

After this function is called, the statistics information of txDelay, minTxDelay, 
maxTxDelay, packetLoss, and packetTimeout in EcMasterStatisticsInfo will be 
reset. 

◆SetUpdatePeriod() 

ECAPIFUNC 
SetUpdatePe 
ECAPIFUNC 
SetUpdatePe 
riod ( 
unsigned int period ) 
Set the master info update period.
-----------------------------------------------------------------------------------
756. Instruction: Set the master info update period in CCLINK.
A: GetOutputModuleId()
B: SetPeriodicUpdate(interval)
C: SlmpSendBySlaveId(slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize)
D: SetUpdatePeriod(period)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
756. Model's answer: D
756. Correct answer: D
756. Result: Correct



Processing Question 757:
757. Context:
 GetMasterInfoList() : Ecat 
GetMaxMotorSpeed() : Velocity 
GetMaxTrqLimit() : Torque 
GetMBit() : UserMemory 
GetMBitEx() : UserMemory 
GetMByte() : UserMemory 
GetMByteEx() : UserMemory 
GetMBytes() : UserMemory 
GetMBytesEx() : UserMemory 
GetMemoryLogData() : Log 
GetMemoryLogOption() : Log 
GetMemoryLogStatus() : Log 
GetModuleId() : CoreMotionLogInput , CoreMotionLogOutput , EcLogInput , 
EcLogOutput , IoLogInput , IoLogOutput , LogApiLogInput , 
LogApiLogOutput , LogInput , LogOutput , UserMemoryLogInput , 
UserMemoryLogOutput 
GetModuleInfo() : WMX3Api 
GetModulesInfo() : WMX3Api 
GetModuleSuspend() : WMX3Api 
GetMotionParam() : Config 
GetMovingAverageProfileTime() : Config 
GetNegativeTrqLimit() : Torque 
GetOfflineSlaveCount() : EcMasterInfo 
GetOnlineSlaveCount() : EcMasterInfo 
GetOptions() : ApiBuffer 
GetOutAnalogDataChar() : Io 
GetOutAnalogDataCharEx() : Io 
GetOutAnalogDataInt() : Io 
GetOutAnalogDataIntEx() : Io 
GetOutAnalogDataShort() : Io
--------------------------------------------
},
    {
        "No": 932,
        "FunctionC++": "ECAPIFUNC SetUpdatePeriod(unsigned int period)",
        "FunctionPython": "def SetUpdatePeriod(period)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Set the master info update period."
    },
    {
        "No": 933,
        "FunctionC++": "ECAPIFUNC GetMasterInfo(int masterId, EcMasterInfo *master)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read the specified master information from the engine."
    },
    {
        "No": 934,
        "FunctionC++": "ECAPIFUNC GetMasterInfoList(EcMasterInfoList *masters)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Read the master list information from the engine."
--------------------------------------------
Di 
git Version Type Version Meaning What the user should do when the 
version is incremented 
A 
major version 
number 
The major version number of the product, 
fixed at 3 for WMX3. 
This number will not be updated for follow-on 
updates of the same product line. Migration 
to a new product with an update of this 
number typically requires an extensive user 
application redesign. 
B 
minor version 
number 
A number that manages the need for code 
changes in the user application. example, 
this means updates such as changing the 
argument type of a WMX3 function, deleting 
a function, changing a structure member, or 
changing the name of a variable. 
WMX3 update installations that involve an 
increment of this number may result in 
compilation errors in the user application. It 
is necessary to update the code and 
redesign the user application. 
C 
revision version 
number 
A number that manages the need to rebuild 
the user application. example, this means
--------------------------------------------
◆GetMasterInfo() 

SIMUAPIFU 
NC 
GetMasterInf 
SIMUAPIFU 
NC 
GetMasterInf 
o ( 
SimuMasterIn masterInfo ) 
Read the current master information from the engine. 
Parameters 
[out] 
masterInfo A pointer to a 
SimuMasterInfo class 
that will be filled in with 
the current master 
information. 

 

wmx3Api::ecApi Namespace Reference 

This namespace contains Ec Api related functions. 

Namespaces 

constants 

This namespace contains defined 
constants used by the library. 

Classes 

class EcAoESender 
This class describes the data for AoE 
sender. More... 

class Ecat 

This class contains Ec API functions. 

More... 

class EcErrorCode 
This enumerator class enumerates the 
Ec library error codes. More... 

class EcHotconnectAbortCode 
This enumerator class enumerates the 
error codes of when hot connect has 
been aborted. More... 

class EcHotconnectState 
This enumerator class enumerates the 
hot connect states. More...
-----------------------------------------------------------------------------------
757. Instruction: Read the current master information from the engine in CCLINK.
A: GetMasterInfo()
B: GetDetailedMasterInfo()
C: GetVersion()
D: GetVersion()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
757. Model's answer: A
757. Correct answer: A
757. Result: Correct



Processing Question 758:
758. Context:
 },
    {
        "No": 1020,
        "FunctionC++": "CCLINKAPIFUNC GetMasterInfo(CCLinkMasterInfo *master)",
        "FunctionPython": "def GetMasterInfo()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Read the current master information from the engine in CCLINK."
    },
    {
        "No": 1021,
        "FunctionC++": "CCLINKAPIFUNC ScanNetwork()",
        "FunctionPython": "def ScanNetwork()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Scan the network topology in CCLINK."
    },
    {
        "No": 1022,
        "FunctionC++": "CCLINKAPIFUNC StartHotconnect()",
        "FunctionPython": "def StartHotconnect()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start hot connect in CCLINK. "
--------------------------------------------
Function 
C++ 
ECAPIFUNC 
ScanNetwork(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
ChangeSlaveState(int 
masterId, int slaveId, 
EcStateMachine::T state, 
int* errorCode) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
StartHotconnect(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
ResetRefClockInfo(int 
masterId) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
ECAPIFUNC
--------------------------------------------
RegisterRead(int slaveId, int Ecat 
RegisterRead(int masterId, i Ecat 
RegisterWrite(int slaveId, int Ecat 
RegisterWrite(int masterId, i Ecat 
RegisterWrite(int slaveId, int Ecat 
RegisterWrite(int masterId, i Ecat 
ResetRefClockInfo() Ecat 
ResetRefClockInfo(int maste Ecat 
ResetTransmitStatisticsInfo Ecat 
ResetTransmitStatisticsInfo Ecat 
ScanNetwork() Ecat 
ScanNetwork(int masterId) Ecat 
SdoDownload(int slaveId, in Ecat 
SdoDownload(int masterId, Ecat 
SdoDownload(int slaveId, in Ecat
--------------------------------------------
ScanNetwork() : Ecat 
SdoDownload() : Ecat 
SdoUpload() : Ecat 
Set2DPitchErrorCompensation() : Compensation 
SetAbsoluteEncoderHomeOffset() : Config 
SetAbsoluteEncoderMode() : Config 
SetAbsoluteSyncPhase() : Sync 
SetAlarm() : Simu 
SetAlarmParam() : Config 
SetApiLog() : Log 
SetAxisCommandMode() : AxisControl 
SetAxisMode() : Ecat 
SetAxisParam() : Config 
SetAxisPolarity() : Config 
SetAxisUnit() : Config 
SetBacklashCompensation() : Compensation 
SetCommandPos() : Home 
SetCommandPosToFeedbackPos() : Home 
SetConstantLinearVel() : AdvVelocity 
SetCustomEvent() : EventControl 
SetCustomEventConfigureOfModule() : EventControl 
SetCustomEventInput() : EventControl 
SetCustomEventOutput() : EventControl 
SetCustomLog() : Log 
SetDeviceName() : WMX3Api 
SetDeviceWaitEvent() : WMX3Api 
SetEmergencyStopParam() : Config 
SetEncoderRange() : Config 
SetEniFilePath() : Ecat 
SetEvent() : EventControl 
SetEventInput() : EventControl 
SetEventOutput() : EventControl
-----------------------------------------------------------------------------------
758. Instruction: Scan the network topology in CCLINK.
A: EnumerateNetworkDevices()
B: ScanNetwork()
C: StartHotconnect()
D: SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
758. Model's answer: B
758. Correct answer: B
758. Result: Correct



Processing Question 759:
759. Context:
 ◆StartHotconnect() [2/2]
ECAPIFUNC 
StartHotconnect ( ) 
Start hot connect. 
◆StartHotconnect() [1/2]

◆ResetRefClockInfo() [1/2]
ECAPIFUNC 
StartHotconn 
ect ( int masterId ) 
Start hot connect. 
Parameters 
[in]masterId ID of the master to 
execute hot connect. 
ECAPIFUNC 
ResetRefClockI 
nfo ( ) 
◆ResetRefClockInfo() [2/2]

ECAPIFUNC 
ResetRefClo 
ckInfo ( int masterId ) 
ECAPIFUNC 
ResetRefClo 
ckInfo ( int masterId ) 
Reset the reference clock information. 

Parameters 
[in] 
masterId ID of the master whose 
clock information will be 
reset. 

Remarks 

After this function is called, the statistics information of minRefClockInterval, 
maxRefClockInterval, avgRefClockInterval, diffFromNextDcClock, 
minDiffFromNextDcClock, and maxDiffFromNextDcClock in 
EcMasterStatisticsInfo will be reset. 

◆ResetTransmitStatisticsInfo() [1/2]
ECAPIFUNC 
ResetTransmitSt 
atisticsInfo ( ) 
Reset the transmission statistics information. 

Remarks
--------------------------------------------
SoERead(int masterId, int sla Ecat 
SoEWrite(int slaveId, unsign Ecat 
SoEWrite(int masterId, int sla Ecat 
SoEWrite(int slaveId, unsign Ecat 
SoEWrite(int masterId, int sla Ecat 
StartAxisHM(int slaveId, int a Ecat 
StartAxisHM(int masterId, in Ecat 
StartAxisHM(int slaveId, int a Ecat 
StartAxisHM(int masterId, in Ecat 
StartAxisPP(int slaveId, int a Ecat 
StartAxisPP(int masterId, int Ecat 
StartAxisPV(int slaveId, int a Ecat 
StartAxisPV(int masterId, int Ecat 
StartAxisPV(int slaveId, int a Ecat 
StartAxisPV(int masterId, int Ecat 
StartAxisTQ(int slaveId, int a Ecat 
StartAxisTQ(int masterId, int Ecat 
StartAxisTQ(int slaveId, int a Ecat 
StartAxisTQ(int masterId, int Ecat 
StartHotconnect() Ecat 
StartHotconnect(int masterI Ecat 
TxPdoWrite(int slaveId, int in Ecat 
TxPdoWrite(int masterId, int Ecat 
VoERead(int slaveId, unsigne Ecat 
VoERead(int masterId, int sla Ecat 
VoERead(int slaveId, EcVoER Ecat 
VoERead(int masterId, int sla Ecat 
VoEWrite(int slaveId, unsigne Ecat
--------------------------------------------
},
    {
        "No": 929,
        "FunctionC++": "ECAPIFUNC StartHotconnect(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Start hot connect."
    },
    {
        "No": 930,
        "FunctionC++": "ECAPIFUNC ResetRefClockInfo(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the reference clock information."
    },
    {
        "No": 931,
        "FunctionC++": "ECAPIFUNC ResetTransmitStatisticsInfo(int masterId)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "Ecat Class",
        "Instruction": "Reset the transmission statistics information."
--------------------------------------------
},
    {
        "No": 1020,
        "FunctionC++": "CCLINKAPIFUNC GetMasterInfo(CCLinkMasterInfo *master)",
        "FunctionPython": "def GetMasterInfo()",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Read the current master information from the engine in CCLINK."
    },
    {
        "No": 1021,
        "FunctionC++": "CCLINKAPIFUNC ScanNetwork()",
        "FunctionPython": "def ScanNetwork()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Scan the network topology in CCLINK."
    },
    {
        "No": 1022,
        "FunctionC++": "CCLINKAPIFUNC StartHotconnect()",
        "FunctionPython": "def StartHotconnect()",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start hot connect in CCLINK. "
-----------------------------------------------------------------------------------
759. Instruction: Start hot connect in CCLINK.
A: StartHotconnect()
B: StartPT(pPTCommand)
C: SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)
D: StartHotspotConnection()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
759. Model's answer: A
759. Correct answer: A
759. Result: Correct



Processing Question 760:
760. Context:
 WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis) 

Remove an axis from an existing sync 
group. More... 

WMX3APIFUNC EnableSyncGroup (int groupId, unsigned 

char enable) 

Enable or disable a sync group. More... 

WMX3APIFUNC GetSyncGroupStatus (int groupId, 
SyncGroupStatus *pStatus) 

Read the current status of the specified 
sync group. More... 

WMX3APIFUNC ClearSyncGroupError (int groupId) 
Clear all sync group errors of the 
specified sync group. More... 

CoreMotion * cmApi 


Member Function Documentation 

◆SetSyncMasterSlave() 
WMX3APIFUNC 
SetSyncMasterSlave ( int masterAxis, 
int slaveAxis, 
SyncOptions * pSyncOptions = NULL) 
Establish synchronous control between a master axis and a slave axis.
--------------------------------------------
},
    {
        "No": 243,
        "FunctionC++": "WMX3APIFUNC SetSyncMasterSlave(int masterAxis, int slaveAxis, SyncOptions *pSyncOptions=NULL)",
        "FunctionPython": "def SetSyncMasterSlave(masterAxis, slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Establish synchronous control between a master axis and a slave axis."
    },
    {
        "No": 244,
        "FunctionC++": "WMX3APIFUNC SetSyncCombine(int masterAxis1, int masterAxis2, int slaveAxis, SyncCombineOptions *pSyncCombineOptions=NULL)",
        "FunctionPython": "def SetSyncCombine(masterAxis1, masterAxis2, slaveAxis)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CoreMotion Class",
        "Instruction": "Combine the position commands of two master axes and set it as the position command of a slave axis."
--------------------------------------------
WMX3APIFUNC SetSyncCombine (int masterAxis1, int 
masterAxis2, int slaveAxis, 

SyncCombineOptions 


*pSyncCombineOptions=NULL) 

Combine the position commands of two 
master axes and set it as the position 
command of a slave axis. More... 

WMX3APIFUNC SetAbsoluteSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Set the absolute sync phase of a slave 
axis. More... 

WMX3APIFUNC AddRelativeSyncPhase (int slaveAxis, 
double phase, Profile *pProfile) 

Add a relative sync phase to a slave 
axis. More... 

WMX3APIFUNC SetSyncGearRatio (int slaveAxis, double 
gearRatio, Profile *pProfile) 

Set the sync gear ratio between a sync 
slave axis and the master axis. More... 

WMX3APIFUNC SetSyncGearRatio (int masterAxis, int 
slaveAxis, double gearRatio, Profile 
*pProfile) 
Establish sync control between two axes, 
and set the sync gear ratio between a 
sync slave axis and the master axis. 
More... 

WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile)
--------------------------------------------
WMX3APIFUNC SyncToJog (int slaveAxis, Profile 
*pProfile) 

Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis. More... 

WMX3APIFUNC SyncToJog (int slaveAxis) 
Resolve sync control for a slave axis, 
and immediately start a jog command for 
the slave axis with the velocity equal to 
the velocity that the slave axis was 
moving at. More... 


Public Attributes 

WMX3APIFUNC ResolveSync (int slaveAxis) 
Release the specified slave axis from 
synchronous control. More... 

WMX3APIFUNC SetSyncGroup (int groupId, SyncGroup 
syncGroup) 

Set the axes and parameters of a 
synchronization group. More... 

WMX3APIFUNC GetSyncGroup (int groupId, SyncGroup 
*pSyncGroup) 

Get the axes and parameters of a sync 
group. More... 

WMX3APIFUNC AddAxisToSyncGroup (int groupId, int 
axis, unsigned char isMaster) 

Add another axis to an existing sync 
group. More... 

WMX3APIFUNC RemoveAxisFromSyncGroup (int 
groupId, int axis)
-----------------------------------------------------------------------------------
760. Instruction: Reset the synchronization statistics information in CCLINK.
A: SetSyncMasterSlave(masterAxis, slaveAxis)
B: UpdateSyncStatisticsInfo()
C: HaltAxisRelease(slaveId, axisIndex)
D: ResetSyncStatisticsInfo()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
760. Model's answer: D
760. Correct answer: D
760. Result: Correct



Processing Question 761:
761. Context:
 def 
SdoUpload(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize) 
def 
SdoUpload_WaitTi 
me(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize, 
waitTime) 


tuple 


0 : int -error code 
1 : list(int) -SDO 
data 
2 : int -actual 
uploaded SDO data 
size 
3 : int -SDO abort 
code 
C++ 

Function 

CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, int sdoDataSize, 
unsigned char* sdoData, 
CCLinkSdoDownloadCall 
Back callbackFunc, 
unsigned int waitTime)
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, 


EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
761. Instruction: Download data to the specified slave SDO in CCLINK.
A: TxPdoWrite(slaveId, index, subindex, pdoDataSize, pdoData)
B: SlmpSendByMacIpAddr(macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize)
C: SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)
D: SdoUpload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
761. Model's answer: C
761. Correct answer: C
761. Result: Correct



Processing Question 762:
762. Context:
 def 
SdoUpload(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize) 
def 
SdoUpload_WaitTi 
me(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize, 
waitTime) 


tuple 


0 : int -error code 
1 : list(int) -SDO 
data 
2 : int -actual 
uploaded SDO data 
size 
3 : int -SDO abort 
code 
C++ 

Function 

CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, int sdoDataSize, 
unsigned char* sdoData, 
CCLinkSdoDownloadCall 
Back callbackFunc, 
unsigned int waitTime)
--------------------------------------------
ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 
sdoType, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
762. Instruction: Upload data from the specified slave SDO in CCLINK.
A: PdoRead(slaveId, index, subindex, pdoBuffSize)
B: HaltAxis(slaveId, axisIndex)
C: SdoUploadData(slaveId, dropNo, indexNo, subindexNo, sdoBuffSize)
D: SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
762. Model's answer: D
762. Correct answer: D
762. Result: Correct



Processing Question 763:
763. Context:
 def 
SdoUpload(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize) 
def 
SdoUpload_WaitTi 
me(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize, 
waitTime) 


tuple 


0 : int -error code 
1 : list(int) -SDO 
data 
2 : int -actual 
uploaded SDO data 
size 
3 : int -SDO abort 
code 
C++ 

Function 

CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, int sdoDataSize, 
unsigned char* sdoData, 
CCLinkSdoDownloadCall 
Back callbackFunc, 
unsigned int waitTime)
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, unsigned int 
*errCode, unsigned int waitTime=0) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, int sdoBuffSize, 
unsigned char *sdoBuff, unsigned int 
*actualSize, unsigned int *errCode, 
unsigned int waitTime=0) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, int sdoDataSize, 
unsigned char *sdoData, 


EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime) 

Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoUploadCallBack 
callbackFunc, unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More...
--------------------------------------------
CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, int sdoDataSize, 
unsigned char* sdoData, 
CCLinkSdoDownloadCall 
Back callbackFunc, 
unsigned int waitTime) 


Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
CCLINKAPIFUNC 
SdoUpload(int slaveId, int 
dropNo, int index, int 
subindex, 
CCLinkSdoUploadCallBac 
k callbackFunc, unsigned 
int waitTime) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, 
CCLinkSdoType::T type, C++ 
int sdoDataSize, unsigned 
char* sdoData, unsigned 
int* errCode, unsigned int 
waitTime = 0) 
def 
SdoDownload_Sdo 
Type(slaveId, 
dropNo, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData) 
Python 
def 
SdoDownload_Sdo 


Type 

Returns 

Value 

Remarks 

Type_WaitTime(slav 
eId, dropNo, index, 
subindex, sdoType, 
sdoDataSize, 
sdoData, waitTime) 

tuple
-----------------------------------------------------------------------------------
763. Instruction: Download data to the specified slave SDO in CCLINK.
A: SdoDownload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData)
B: SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)
C: SdoDownload_SdoType(slaveId, dropNo, index, subindex, objectType, dataSize, data)
D: StartHotconnect()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
763. Model's answer: A
763. Correct answer: A
763. Result: Correct



Processing Question 764:
764. Context:
 ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, 
EcSdoUploadCallBack callbackFunc, 
unsigned int waitTime) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, unsigned int *errCode, 
unsigned int waitTime=0, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoBuffSize, unsigned char *sdoBuff, 
unsigned int *actualSize, unsigned int 
*errCode, unsigned int waitTime=0, BOOL 
complete=FALSE) 


Upload data from the specified slave 
SDO. More...
--------------------------------------------
def 
SdoUpload(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize) 
def 
SdoUpload_WaitTi 
me(slaveId, 
dropNo, index, 
subindex, 
sdoBuffSize, 
waitTime) 


tuple 


0 : int -error code 
1 : list(int) -SDO 
data 
2 : int -actual 
uploaded SDO data 
size 
3 : int -SDO abort 
code 
C++ 

Function 

CCLINKAPIFUNC 
SdoDownload(int slaveId, 
int dropNo, int index, int 
subindex, int sdoDataSize, 
unsigned char* sdoData, 
CCLinkSdoDownloadCall 
Back callbackFunc, 
unsigned int waitTime)
--------------------------------------------
},
    {
        "No": 1029,
        "FunctionC++": "CCLINKAPIFUNC SdoUpload(int slaveId, int dropNo, int index, int subindex, CCLinkSdoType::T type, int sdoBuffSize, unsigned char *sdoBuff, unsigned int *actualSize, unsigned int *errCode, unsigned int waitTime=0)",
        "FunctionPython": "def SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)",
        "ReturnType": "tuple",
        "ReturnValue": "0 : int - error code",
        "Class": "CCLink Class",
        "Instruction": "Upload data from the specified slave SDO in CCLINK. "
--------------------------------------------
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoUpload (int masterId, int slaveId, int 
index, int subindex, EcSdoType::T 
sdoType, int sdoBuffSize, unsigned char 
*sdoBuff, unsigned int *actualSize, 
unsigned int *errCode, unsigned int 
waitTime=0, BOOL complete=FALSE) 
Upload data from the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int slaveId, int index, int 
subindex, EcSdoType::T sdoType, int 
sdoDataSize, unsigned char *sdoData, 
EcSdoDownloadCallBack callbackFunc, 
unsigned int waitTime, BOOL 
complete=FALSE) 
Download data to the specified slave 
SDO. More... 

ECAPIFUNC SdoDownload (int masterId, int slaveId, 
int index, int subindex, EcSdoType::T 
sdoType, int sdoDataSize, unsigned char 
*sdoData, EcSdoDownloadCallBack 
callbackFunc, unsigned int waitTime, 
BOOL complete=FALSE) 
Download data to the specified slave 
SDO. More...
-----------------------------------------------------------------------------------
764. Instruction: Upload data from the specified slave SDO in CCLINK.
A: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
B: SdoUpload(sdoType, slaveId, dropNo, index, subindex, sdoBuffSize)
C: SdoUpload_SdoType(slaveId, dropNo, index, subindex, sdoType, sdoBuffSize)
D: SdoUpload(slaveId, dropNo, index, subindex, sdoBuffSize)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
764. Model's answer: C
764. Correct answer: C
764. Result: Correct



Processing Question 765:
765. Context:
 slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
Remarks 
Function 
Returns 
hmAcc) 
Type int 
Value error code 
ECAPIFUNC 
StartAxisHM(int slaveId, 
int axisIndex, int 
method, unsigned int 
C++ 
switchSpeed, unsigned 
int zeroSpeed, unsigned 
int hmAcc, int 
homeOffset) 
Python 
Type 
Value 
PythonAPI is not supported. 
ECAPIFUNC HaltAxis(int 
C++ slaveId, int axisIndex) 
def HaltAxis(slaveId, 
Python 
axisIndex) 
Type int 
Value error code 
ECAPIFUNC 
C++ HaltAxisRelease(int 
slaveId, int axisIndex) 
def 
Python HaltAxisRelease(slaveId, 
axisIndex) 
Type int 
Value error code
--------------------------------------------
Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
Returns 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
StartAxisHM(int 
masterId, int slaveId, int 
axisIndex, int method, 
unsigned int 
switchSpeed, unsigned 
int zeroSpeed, unsigned 
int hmAcc) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC 
StartAxisHM(int 
masterId, int slaveId, int 
axisIndex, int method, 
unsigned int 
switchSpeed, unsigned 
int zeroSpeed, unsigned 
int hmAcc, int 
homeOffset) 
Python 
Returns 
Type 
Value 
Remarks PythonAPI is not supported. 
Function 
C++ 
ECAPIFUNC HaltAxis(int 
masterId, int slaveId, int 
axisIndex) 
Python
-----------------------------------------------------------------------------------
765. Instruction: Set the axis operation mode for a specified slave axis in CCLINK.
A: HaltAxisRelease(slaveId, axisIndex)
B: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
C: SetAxisConfiguration(slaveId, axisIndex, configuration)
D: SetAxisMode(slaveId, axisIndex, mode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
765. Model's answer: D
765. Correct answer: D
765. Result: Correct



Processing Question 766:
766. Context:
 set by this function. 
Parameters 
[in] 
[in] 
masterId 
slaveId 
ID of the master whose 
slave will be operated. 
ID of the slave with the 
axis whose operation 
mode will be set. 
[in] 
axisId ID of the axis to which 
the operation model will 
be set. 
[in] 
mode Operation mode. 

◆StartAxisPP() [1/2]
ECAPIFUNC 
StartAxisPP ( int slaveId, 
int axisIndex, 
int targetPos, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char immediately = -1, 

char relative = -1char relative = -1
) 
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP 

operation will be started. 
[in] 
targetPos Target position. 
[in] 
profileVel Profile velocity. 
[in] 
profileAcc Profile acceleration. 
[in] 
profileDec Profile deceleration. 
[in] 
immediately Start profile immediately.
--------------------------------------------
axisIndex, mode) 
Returns 
Type int 
Value error code 
Remarks 
Function 
C++ 
Python 
CCLINKAPIFUNC 
StartAxisPP(int slaveId, int 
axisIndex, int targetPos, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char immediately = -1, 
char relative = -1) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec, 
immediately) 
def 
StartAxisPP(slaveId 
, axisIndex, 
targetPos, 
profileVel, 
profileAcc, 
profileDec, 
immediately,
--------------------------------------------
If -1, use previous 
setting. If 0, start profile 
after previous profile 
motion end. If 1, start 
profile immediately 
which will override 
previous profile motion. 

[in] 
relative Position specified by 
targetPos is a relative 
motion. If -1, use 
previous setting. If 0, 
position specified by 
targetPos is an absolute 
position. If 1, position 
specified by targetPos is 
a relative motion. 

◆StartAxisPP() [2/2]

immediatelimmediatel
ECAPIFUNC 
StartAxisPP ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
targetPos, 
y = -1, 
unsigned int profileVel, 
unsigned int profileAcc, 
unsigned int profileDec, 
char 
char 
) 
relative = -1
Start the PP operation for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master whose 
slave will be operated. 
[in] 
slaveId ID of the slave with the 
axis for which PP 
operation will be started. 
[in] 
axisIndex ID of axis for which PP
--------------------------------------------
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
-----------------------------------------------------------------------------------
766. Instruction: Start the PP operation for a specified slave axis in CCLINK.
A: StartAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
B: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
C: StartHotconnect()
D: StopAxisPP(slaveId, axisIndex, targetPos, profileVel, profileAcc, profileDec)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
766. Model's answer: A
766. Correct answer: A
766. Result: Correct



Processing Question 767:
767. Context:
 slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
},
    {
        "No": 1048,
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc)",
        "FunctionPython": "def StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
    },
    {
        "No": 1049,
        "FunctionC++": "CCLINKAPIFUNC StartAxisHM(int slaveId, int axisIndex, int method, unsigned int switchSpeed, unsigned int zeroSpeed, unsigned int hmAcc, int homeOffset)",
        "FunctionPython": null,
        "ReturnType": null,
        "ReturnValue": null,
        "Class": "CCLink Class",
        "Instruction": "Start the HM operation for a specified slave axis in CCLINK."
--------------------------------------------
ECAPIFUNC StartAxisTQ (int masterId, int slaveId, int 
axisIndex, short targetTrq, unsigned int 
maxMotorSpeed) 
Start the TQ operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int slaveId, int axisIndex, int 
method, unsigned int switchSpeed, 
unsigned int zeroSpeed, unsigned int 
hmAcc) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int slaveId, int axisIndex, int 
method, unsigned int switchSpeed, 
unsigned int zeroSpeed, unsigned int 
hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset)
--------------------------------------------
◆ 
StartAxisHM() 

◆StartAxisHM() [4/4]
ECAPIFUNC 
StartAxisHM ( 
int 
int 
int 
int 
masterId, 
slaveId, 
axisIndex, 
method, 
unsigned int switchSpeed, 
unsigned int zeroSpeed, 
unsigned int hmAcc, 
int homeOffset 
) 
Start the HM operation for a specified slave axis. 

Parameters 
[in] 
masterId 

[in] 
slaveId 

[in] 
axisIndex 
[in] 
method 
[in] 
switchSpeed 

[in] 
zeroSpeed 

[in] 
hmAcc 

[in] 
homeOffset 

ID of the master whose 

slave will be operated. 
ID of the slave with the 
axis for which HM 
operation will be started. 

ID of axis for which HM 

operation will be started. 
Homing method (refer to 
manual of servo). 

Operation velocity until 
the switch signal is 
detected. 

Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing
-----------------------------------------------------------------------------------
767. Instruction: Start the HM operation for a specified slave axis in CCLINK.
A: SetAxisMode(slaveId, axisIndex, mode)
B: SdoDownload(slaveId, dropNo, index, subindex, sdoDataSize, sdoData)
C: InitiateAxisMovement(slaveId, axisIndex, moveType, maxVelocity, minVelocity, acceleration)
D: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
767. Model's answer: D
767. Correct answer: D
767. Result: Correct



Processing Question 768:
768. Context:
 Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave whose 
axis halt state will be 
released. 
[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆HaltAxisRelease() [2/2]

ECAPIFUNC 
HaltAxisRelease ( 
ECAPIFUNC 
HaltAxisRelease ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master of the 

slave whose axis halt 
state will be released. 

[in] 
slaveId ID of the slave whose 

axis halt state will be 
released. 

[in] 
axisIndex ID of the axis for which 
halt state will be 
released.
--------------------------------------------
},
    {
        "No": 1050,
        "FunctionC++": "CCLINKAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Halt the specified slave axis in CCLINK."
    },
    {
        "No": 1051,
        "FunctionC++": "CCLINKAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Release the halt state for a specified slave axis in CCLINK."
--------------------------------------------
},
    {
        "No": 922,
        "FunctionC++": "ECAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Halt the specified slave axis."
    },
    {
        "No": 923,
        "FunctionC++": "ECAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "Ecat Class",
        "Instruction": "Release the halt state for a specified slave axis."
-----------------------------------------------------------------------------------
768. Instruction: Halt the specified slave axis in CCLINK.
A: StopAxis(slaveId, axisIndex)
B: HaltAxis(slaveId, axisIndex)
C: HaltAxisRelease(slaveId, axisIndex)
D: ResetSyncStatisticsInfo()
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
768. Model's answer: B
768. Correct answer: B
768. Result: Correct



Processing Question 769:
769. Context:
 Operation velocity until 
the home position is 
detected. 

Acceleration and 
deceleration during the 
HM mode. 

home offset after homing 



◆HaltAxis() [1/2]
done. 
ECAPIFUNC 
HaltAxis ( int slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxis() [2/2]

ECAPIFUNC 
HaltAxis ( 
ECAPIFUNC 
HaltAxis ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Halt the specified slave axis. 
Parameters 
[in] 
masterId ID of the master of the 
slave with the axis for 
which will be halted. 
[in] 
slaveId ID of the slave with the 
axis for which will be 
halted. 
[in] 
axisIndex ID of the axis for which 
will be halted. 

◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis.
--------------------------------------------
◆HaltAxisRelease() [1/2]

ECAPIFUNC 
HaltAxisRelease ( 
) 
ECAPIFUNC 
HaltAxisRelease ( 
) 
int 
slaveId, 
int axisIndex 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
slaveId ID of the slave whose 
axis halt state will be 
released. 
[in] 
axisIndex ID of the axis for which 
halt state will be 
released. 

◆HaltAxisRelease() [2/2]

ECAPIFUNC 
HaltAxisRelease ( 
ECAPIFUNC 
HaltAxisRelease ( 
int 
int 
masterId, 
slaveId, 
int axisIndex 
) 
Release the halt state for a specified slave axis. 

Parameters 
[in] 
masterId ID of the master of the 

slave whose axis halt 
state will be released. 

[in] 
slaveId ID of the slave whose 

axis halt state will be 
released. 

[in] 
axisIndex ID of the axis for which 
halt state will be 
released.
--------------------------------------------
slave axis. More... 
ECAPIFUNC StartAxisHM (int masterId, int slaveId, int 
axisIndex, int method, unsigned int 
switchSpeed, unsigned int zeroSpeed, 
unsigned int hmAcc, int homeOffset) 
Start the HM operation for a specified 
slave axis. More... 
ECAPIFUNC HaltAxis (int slaveId, int axisIndex) 
Halt the specified slave axis. More...
--------------------------------------------
},
    {
        "No": 1050,
        "FunctionC++": "CCLINKAPIFUNC HaltAxis(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxis(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Halt the specified slave axis in CCLINK."
    },
    {
        "No": 1051,
        "FunctionC++": "CCLINKAPIFUNC HaltAxisRelease(int slaveId, int axisIndex)",
        "FunctionPython": "def HaltAxisRelease(slaveId, axisIndex)",
        "ReturnType": "int",
        "ReturnValue": "error code",
        "Class": "CCLink Class",
        "Instruction": "Release the halt state for a specified slave axis in CCLINK."
-----------------------------------------------------------------------------------
769. Instruction: Release the halt state for a specified slave axis in CCLINK.
A: HaltAxisReleaseCommand(slaveId, axisIndex)
B: HaltAxisRelease(slaveId, axisIndex)
C: StartAxisHM(slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)
D: SetAxisMode(slaveId, axisIndex, mode)
Which is the correct API function in WMX3? Just answer A or B or C or D, no other words.
769. Model's answer: B
769. Correct answer: B
769. Result: Correct



Total Questions: 769
Correct Answers: 728 (0.95, 94.67%)
Wrong Answers: 43 (0.05, 5.33%)
