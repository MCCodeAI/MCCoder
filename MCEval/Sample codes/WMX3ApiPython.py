# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_WMX3ApiPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_WMX3ApiPython')
    _WMX3ApiPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_WMX3ApiPython', [dirname(__file__)])
        except ImportError:
            import _WMX3ApiPython
            return _WMX3ApiPython
        try:
            _mod = imp.load_module('_WMX3ApiPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _WMX3ApiPython = swig_import_helper()
    del swig_import_helper
else:
    import _WMX3ApiPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.intArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.intArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.intArray_frompointer
intArray_swigregister = _WMX3ApiPython.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _WMX3ApiPython.intArray_frompointer(t)
intArray_frompointer = _WMX3ApiPython.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.doubleArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.doubleArray_frompointer
doubleArray_swigregister = _WMX3ApiPython.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _WMX3ApiPython.doubleArray_frompointer(t)
doubleArray_frompointer = _WMX3ApiPython.doubleArray_frompointer

class uintArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_uintArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_uintArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.uintArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.uintArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.uintArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.uintArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.uintArray_frompointer
uintArray_swigregister = _WMX3ApiPython.uintArray_swigregister
uintArray_swigregister(uintArray)

def uintArray_frompointer(t):
    return _WMX3ApiPython.uintArray_frompointer(t)
uintArray_frompointer = _WMX3ApiPython.uintArray_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _WMX3ApiPython.intp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.intp_value(self)

    def cast(self):
        return _WMX3ApiPython.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.intp_frompointer)
    else:
        frompointer = _WMX3ApiPython.intp_frompointer
intp_swigregister = _WMX3ApiPython.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _WMX3ApiPython.intp_frompointer(t)
intp_frompointer = _WMX3ApiPython.intp_frompointer

class uintp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_uintp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_uintp
    __del__ = lambda self: None

    def assign(self, value):
        return _WMX3ApiPython.uintp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.uintp_value(self)

    def cast(self):
        return _WMX3ApiPython.uintp_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.uintp_frompointer)
    else:
        frompointer = _WMX3ApiPython.uintp_frompointer
uintp_swigregister = _WMX3ApiPython.uintp_swigregister
uintp_swigregister(uintp)

def uintp_frompointer(t):
    return _WMX3ApiPython.uintp_frompointer(t)
uintp_frompointer = _WMX3ApiPython.uintp_frompointer

class ushortp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ushortp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ushortp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_ushortp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ushortp
    __del__ = lambda self: None

    def assign(self, value):
        return _WMX3ApiPython.ushortp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.ushortp_value(self)

    def cast(self):
        return _WMX3ApiPython.ushortp_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.ushortp_frompointer)
    else:
        frompointer = _WMX3ApiPython.ushortp_frompointer
ushortp_swigregister = _WMX3ApiPython.ushortp_swigregister
ushortp_swigregister(ushortp)

def ushortp_frompointer(t):
    return _WMX3ApiPython.ushortp_frompointer(t)
ushortp_frompointer = _WMX3ApiPython.ushortp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _WMX3ApiPython.doublep_assign(self, value)

    def value(self):
        return _WMX3ApiPython.doublep_value(self)

    def cast(self):
        return _WMX3ApiPython.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.doublep_frompointer)
    else:
        frompointer = _WMX3ApiPython.doublep_frompointer
doublep_swigregister = _WMX3ApiPython.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _WMX3ApiPython.doublep_frompointer(t)
doublep_frompointer = _WMX3ApiPython.doublep_frompointer

class boolp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, boolp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, boolp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_boolp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_boolp
    __del__ = lambda self: None

    def assign(self, value):
        return _WMX3ApiPython.boolp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.boolp_value(self)

    def cast(self):
        return _WMX3ApiPython.boolp_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.boolp_frompointer)
    else:
        frompointer = _WMX3ApiPython.boolp_frompointer
boolp_swigregister = _WMX3ApiPython.boolp_swigregister
boolp_swigregister(boolp)

def boolp_frompointer(t):
    return _WMX3ApiPython.boolp_frompointer(t)
boolp_frompointer = _WMX3ApiPython.boolp_frompointer


def IsErrorIndex(index, maxIndexValue):
    return _WMX3ApiPython.IsErrorIndex(index, maxIndexValue)
IsErrorIndex = _WMX3ApiPython.IsErrorIndex
class FormatTypeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormatTypeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormatTypeArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_FormatTypeArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_FormatTypeArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.FormatTypeArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.FormatTypeArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.FormatTypeArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.FormatTypeArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.FormatTypeArray_frompointer
FormatTypeArray_swigregister = _WMX3ApiPython.FormatTypeArray_swigregister
FormatTypeArray_swigregister(FormatTypeArray)

def FormatTypeArray_frompointer(t):
    return _WMX3ApiPython.FormatTypeArray_frompointer(t)
FormatTypeArray_frompointer = _WMX3ApiPython.FormatTypeArray_frompointer

class constants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, constants, name)
    __repr__ = _swig_repr
    maxAxes = _WMX3ApiPython.constants_maxAxes
    maxIoInSize = _WMX3ApiPython.constants_maxIoInSize
    maxIoOutSize = _WMX3ApiPython.constants_maxIoOutSize
    moduleFileNameLen = _WMX3ApiPython.constants_moduleFileNameLen
    moduleNameLen = _WMX3ApiPython.constants_moduleNameLen
    moduleDescLen = _WMX3ApiPython.constants_moduleDescLen
    moduleLen = _WMX3ApiPython.constants_moduleLen
    maxDeviceName = _WMX3ApiPython.constants_maxDeviceName
    maxDevices = _WMX3ApiPython.constants_maxDevices
    maxInterrupts = _WMX3ApiPython.constants_maxInterrupts
    maxEventInterpolationAxes = _WMX3ApiPython.constants_maxEventInterpolationAxes
    maxLogOutputDataSize = _WMX3ApiPython.constants_maxLogOutputDataSize
    maxFlightRecorderBufferSize = _WMX3ApiPython.constants_maxFlightRecorderBufferSize
    maxInPosChannel = _WMX3ApiPython.constants_maxInPosChannel
    maxSyncGroup = _WMX3ApiPython.constants_maxSyncGroup
    maxTriggerEvents = _WMX3ApiPython.constants_maxTriggerEvents
    maxProfileUnsignedInput = _WMX3ApiPython.constants_maxProfileUnsignedInput
    maxPvtAppendPoints = _WMX3ApiPython.constants_maxPvtAppendPoints
    maxPvtInterpolateAppendPoints = _WMX3ApiPython.constants_maxPvtInterpolateAppendPoints
    maxPvtInterpolateAxes = _WMX3ApiPython.constants_maxPvtInterpolateAxes
    maxIoLogAddressSize = _WMX3ApiPython.constants_maxIoLogAddressSize
    maxIoLogFormatSize = _WMX3ApiPython.constants_maxIoLogFormatSize
    maxLogOutputIoInputByteSize = _WMX3ApiPython.constants_maxLogOutputIoInputByteSize
    maxLogOutputIoOutputByteSize = _WMX3ApiPython.constants_maxLogOutputIoOutputByteSize
    maxLogBufferSize = _WMX3ApiPython.constants_maxLogBufferSize
    maxLogBufferSampleSize = _WMX3ApiPython.constants_maxLogBufferSampleSize
    maxLogChannel = _WMX3ApiPython.constants_maxLogChannel
    maxLogHeaderBytes = _WMX3ApiPython.constants_maxLogHeaderBytes
    maxLogHeaderLines = _WMX3ApiPython.constants_maxLogHeaderLines
    maxLogDirSize = _WMX3ApiPython.constants_maxLogDirSize
    maxLogFileNameSize = _WMX3ApiPython.constants_maxLogFileNameSize
    maxLogDataSize = _WMX3ApiPython.constants_maxLogDataSize
    maxLogDelimiterSize = _WMX3ApiPython.constants_maxLogDelimiterSize
    maxLogPrecision = _WMX3ApiPython.constants_maxLogPrecision
    maxMemLogBufferSize = _WMX3ApiPython.constants_maxMemLogBufferSize
    maxMemLogChannel = _WMX3ApiPython.constants_maxMemLogChannel
    maxMemLogAxesSize = _WMX3ApiPython.constants_maxMemLogAxesSize
    maxMemLogDataSize = _WMX3ApiPython.constants_maxMemLogDataSize
    maxMemLogIoInputByteSize = _WMX3ApiPython.constants_maxMemLogIoInputByteSize
    maxMemLogIoOutputByteSize = _WMX3ApiPython.constants_maxMemLogIoOutputByteSize
    maxMemLogMDataByteSize = _WMX3ApiPython.constants_maxMemLogMDataByteSize
    maxMemLogTriggerEventSize = _WMX3ApiPython.constants_maxMemLogTriggerEventSize
    maxApiBufferChannel = _WMX3ApiPython.constants_maxApiBufferChannel
    maxApiBufferErrorLog = _WMX3ApiPython.constants_maxApiBufferErrorLog
    maxDefaultApiBufferSize = _WMX3ApiPython.constants_maxDefaultApiBufferSize
    maxPitchErrorCompPoints = _WMX3ApiPython.constants_maxPitchErrorCompPoints
    maxPitchErrorCompFreePositionRangeMultiplier = _WMX3ApiPython.constants_maxPitchErrorCompFreePositionRangeMultiplier
    max2dPitchErrorCompPoints = _WMX3ApiPython.constants_max2dPitchErrorCompPoints
    max2dPitchErrorCompChannel = _WMX3ApiPython.constants_max2dPitchErrorCompChannel
    max2dPitchErrorCompFreePositionRangeMultiplier = _WMX3ApiPython.constants_max2dPitchErrorCompFreePositionRangeMultiplier
    maxSizeSet2dPitchErrorCompValue = _WMX3ApiPython.constants_maxSizeSet2dPitchErrorCompValue
    maxEvents = _WMX3ApiPython.constants_maxEvents
    maxBitArray = _WMX3ApiPython.constants_maxBitArray
    maxHardwareTouchProbeLatchedValues = _WMX3ApiPython.constants_maxHardwareTouchProbeLatchedValues
    maxTouchprobeChannel = _WMX3ApiPython.constants_maxTouchprobeChannel
    maxPsoChannel = _WMX3ApiPython.constants_maxPsoChannel
    maxPsoData = _WMX3ApiPython.constants_maxPsoData
    maxPsoIoEncSize = _WMX3ApiPython.constants_maxPsoIoEncSize
    maxPveloChannel = _WMX3ApiPython.constants_maxPveloChannel
    maxPveloData = _WMX3ApiPython.constants_maxPveloData
    maxPveloIoEncSize = _WMX3ApiPython.constants_maxPveloIoEncSize
    maxEventInputDataSize = _WMX3ApiPython.constants_maxEventInputDataSize
    maxEventOutputDataSize = _WMX3ApiPython.constants_maxEventOutputDataSize
    maxEventConfigureOfModuleDataSize = _WMX3ApiPython.constants_maxEventConfigureOfModuleDataSize
    maxSplineDimensions = _WMX3ApiPython.constants_maxSplineDimensions
    maxSplineChannel = _WMX3ApiPython.constants_maxSplineChannel
    maxPathInterpolateAppendPoints = _WMX3ApiPython.constants_maxPathInterpolateAppendPoints
    maxPathInterpolateOutputs = _WMX3ApiPython.constants_maxPathInterpolateOutputs
    maxPathInterpolateDimensions = _WMX3ApiPython.constants_maxPathInterpolateDimensions
    max3DPathInterpolateDimensions = _WMX3ApiPython.constants_max3DPathInterpolateDimensions
    maxPathIntplWithRotationAppendPoints = _WMX3ApiPython.constants_maxPathIntplWithRotationAppendPoints
    maxPathIntplWithRotationChannel = _WMX3ApiPython.constants_maxPathIntplWithRotationChannel
    maxPathIntplLookaheadDimensions = _WMX3ApiPython.constants_maxPathIntplLookaheadDimensions
    maxPathIntplLookaheadAppendPoints = _WMX3ApiPython.constants_maxPathIntplLookaheadAppendPoints
    maxPathIntplLookaheadChannel = _WMX3ApiPython.constants_maxPathIntplLookaheadChannel
    maxPathIntplLookaheadOutputPerSegment = _WMX3ApiPython.constants_maxPathIntplLookaheadOutputPerSegment
    maxPathIntplLookaheadSmoothingCycles = _WMX3ApiPython.constants_maxPathIntplLookaheadSmoothingCycles
    maxPathIntplLookaheadAuxiliaryAxes = _WMX3ApiPython.constants_maxPathIntplLookaheadAuxiliaryAxes
    maxEcamPoints = _WMX3ApiPython.constants_maxEcamPoints
    maxEcamChannel = _WMX3ApiPython.constants_maxEcamChannel
    maxUserMemoryBytes = _WMX3ApiPython.constants_maxUserMemoryBytes
    maxUserMemoryReadWriteBytes = _WMX3ApiPython.constants_maxUserMemoryReadWriteBytes
    maxUserMemoryLogAddressSize = _WMX3ApiPython.constants_maxUserMemoryLogAddressSize
    maxUserMemoryLogFormatSize = _WMX3ApiPython.constants_maxUserMemoryLogFormatSize
    maxLogOutputMDataByteSize = _WMX3ApiPython.constants_maxLogOutputMDataByteSize
    maxMasters = _WMX3ApiPython.constants_maxMasters
    maxSlaves = _WMX3ApiPython.constants_maxSlaves
    maxSlaveAxes = _WMX3ApiPython.constants_maxSlaveAxes
    maxEniFilePathLen = _WMX3ApiPython.constants_maxEniFilePathLen
    maxFoEFilePathLen = _WMX3ApiPython.constants_maxFoEFilePathLen
    maxFoEFileNameLen = _WMX3ApiPython.constants_maxFoEFileNameLen
    maxSdoInfoNameLen = _WMX3ApiPython.constants_maxSdoInfoNameLen
    maxSdoInfoODListSize = _WMX3ApiPython.constants_maxSdoInfoODListSize
    maxSdoInfoEDListSize = _WMX3ApiPython.constants_maxSdoInfoEDListSize
    maxLogPdoSize = _WMX3ApiPython.constants_maxLogPdoSize
    maxLogPdoDataSize = _WMX3ApiPython.constants_maxLogPdoDataSize
    maxMappedRxPdo = _WMX3ApiPython.constants_maxMappedRxPdo
    maxMappedTxPdo = _WMX3ApiPython.constants_maxMappedTxPdo
    maxCCLinkMasters = _WMX3ApiPython.constants_maxCCLinkMasters
    maxCCLinkSlaves = _WMX3ApiPython.constants_maxCCLinkSlaves
    maxCCLinkSlaveAxes = _WMX3ApiPython.constants_maxCCLinkSlaveAxes
    maxCCLinkTslt = _WMX3ApiPython.constants_maxCCLinkTslt

    def __init__(self):
        this = _WMX3ApiPython.new_constants()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_constants
    __del__ = lambda self: None
constants_swigregister = _WMX3ApiPython.constants_swigregister
constants_swigregister(constants)

class ErrorCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorCode, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.ErrorCode_PyNone
    StartProcessFailed = _WMX3ApiPython.ErrorCode_StartProcessFailed
    StartProcessNull = _WMX3ApiPython.ErrorCode_StartProcessNull
    StartProcessMaxInstance = _WMX3ApiPython.ErrorCode_StartProcessMaxInstance
    StartProcessLockError = _WMX3ApiPython.ErrorCode_StartProcessLockError
    StartProcessWaitEventFailed = _WMX3ApiPython.ErrorCode_StartProcessWaitEventFailed
    StartProcessWaitTimeout = _WMX3ApiPython.ErrorCode_StartProcessWaitTimeout
    MemoryAllocFailed = _WMX3ApiPython.ErrorCode_MemoryAllocFailed
    IMLibIsNotRunning = _WMX3ApiPython.ErrorCode_IMLibIsNotRunning
    ControlChannelLockFailed = _WMX3ApiPython.ErrorCode_ControlChannelLockFailed
    ControlChannelEventFailed = _WMX3ApiPython.ErrorCode_ControlChannelEventFailed
    ControlChannelWaitEventFailed = _WMX3ApiPython.ErrorCode_ControlChannelWaitEventFailed
    ControlChannelSharedMemoryFailed = _WMX3ApiPython.ErrorCode_ControlChannelSharedMemoryFailed
    ControlChannelLockWaitTimeOut = _WMX3ApiPython.ErrorCode_ControlChannelLockWaitTimeOut
    APIChannelError = _WMX3ApiPython.ErrorCode_APIChannelError
    APIChannelTimeOut = _WMX3ApiPython.ErrorCode_APIChannelTimeOut
    StatusChannelError = _WMX3ApiPython.ErrorCode_StatusChannelError
    RtssFileNotFoundError = _WMX3ApiPython.ErrorCode_RtssFileNotFoundError
    RtssStartError = _WMX3ApiPython.ErrorCode_RtssStartError
    RequestChannelTimeOut = _WMX3ApiPython.ErrorCode_RequestChannelTimeOut
    FreeChannelTimeOut = _WMX3ApiPython.ErrorCode_FreeChannelTimeOut
    CloseDeviceTimeOut = _WMX3ApiPython.ErrorCode_CloseDeviceTimeOut
    RequestChannelFailed = _WMX3ApiPython.ErrorCode_RequestChannelFailed
    ReachMaxChannelNumber = _WMX3ApiPython.ErrorCode_ReachMaxChannelNumber
    FreeChannelFailed = _WMX3ApiPython.ErrorCode_FreeChannelFailed
    InvalidChannelId = _WMX3ApiPython.ErrorCode_InvalidChannelId
    CloseDeviceFailed = _WMX3ApiPython.ErrorCode_CloseDeviceFailed
    StatusChannelNull = _WMX3ApiPython.ErrorCode_StatusChannelNull
    StatusChannelIdError = _WMX3ApiPython.ErrorCode_StatusChannelIdError
    StatusSharedMemoryChannelIndexError = _WMX3ApiPython.ErrorCode_StatusSharedMemoryChannelIndexError
    StatusChannelGettingInitialData = _WMX3ApiPython.ErrorCode_StatusChannelGettingInitialData
    RequestQueueFailed = _WMX3ApiPython.ErrorCode_RequestQueueFailed
    InvalidQueueId = _WMX3ApiPython.ErrorCode_InvalidQueueId
    InvalidQueueSize = _WMX3ApiPython.ErrorCode_InvalidQueueSize
    RequestQueueTimeout = _WMX3ApiPython.ErrorCode_RequestQueueTimeout
    InvalidQueue = _WMX3ApiPython.ErrorCode_InvalidQueue
    FreeQueueTimeout = _WMX3ApiPython.ErrorCode_FreeQueueTimeout
    InvalidQueueControlCommand = _WMX3ApiPython.ErrorCode_InvalidQueueControlCommand
    ControlQueueTimeout = _WMX3ApiPython.ErrorCode_ControlQueueTimeout
    SetQueueOptionsTimeout = _WMX3ApiPython.ErrorCode_SetQueueOptionsTimeout
    FreeQueueFailed = _WMX3ApiPython.ErrorCode_FreeQueueFailed
    RequestQueueIDAlreadyUsed = _WMX3ApiPython.ErrorCode_RequestQueueIDAlreadyUsed
    CreateDeviceLockError = _WMX3ApiPython.ErrorCode_CreateDeviceLockError
    CloseDeviceLockError = _WMX3ApiPython.ErrorCode_CloseDeviceLockError
    SetDeviceNameTimeout = _WMX3ApiPython.ErrorCode_SetDeviceNameTimeout
    GetActiveDeviceTimeout = _WMX3ApiPython.ErrorCode_GetActiveDeviceTimeout
    DeviceIsNull = _WMX3ApiPython.ErrorCode_DeviceIsNull
    InvalidModuleId = _WMX3ApiPython.ErrorCode_InvalidModuleId
    InvalidDeterMode = _WMX3ApiPython.ErrorCode_InvalidDeterMode
    NoSupportedFunction = _WMX3ApiPython.ErrorCode_NoSupportedFunction
    CommandInvalidQueueId = _WMX3ApiPython.ErrorCode_CommandInvalidQueueId
    CommandQueueAddFailed = _WMX3ApiPython.ErrorCode_CommandQueueAddFailed
    CommandQueueIsFull = _WMX3ApiPython.ErrorCode_CommandQueueIsFull
    CommandQueueAddTimeOut = _WMX3ApiPython.ErrorCode_CommandQueueAddTimeOut
    IMVersionMismatch = _WMX3ApiPython.ErrorCode_IMVersionMismatch
    ModuleVersionMismatch = _WMX3ApiPython.ErrorCode_ModuleVersionMismatch
    CommandIdLockError = _WMX3ApiPython.ErrorCode_CommandIdLockError
    CommandIdGetError = _WMX3ApiPython.ErrorCode_CommandIdGetError
    CallbackMallocFailed = _WMX3ApiPython.ErrorCode_CallbackMallocFailed
    CallbackThreadNull = _WMX3ApiPython.ErrorCode_CallbackThreadNull
    CallbackThreadError = _WMX3ApiPython.ErrorCode_CallbackThreadError
    CallbackThreadTimeOut = _WMX3ApiPython.ErrorCode_CallbackThreadTimeOut
    IMLibNullParam = _WMX3ApiPython.ErrorCode_IMLibNullParam
    IMLibInvalidParam = _WMX3ApiPython.ErrorCode_IMLibInvalidParam
    ConflictingErrorCode = _WMX3ApiPython.ErrorCode_ConflictingErrorCode
    UtilDataChnlSizeTooSmall = _WMX3ApiPython.ErrorCode_UtilDataChnlSizeTooSmall
    UtilBuffAndDataSizeDiff = _WMX3ApiPython.ErrorCode_UtilBuffAndDataSizeDiff
    UtilNoEnoughDataChnlSize = _WMX3ApiPython.ErrorCode_UtilNoEnoughDataChnlSize
    UtilReachMaxDataChnlSize = _WMX3ApiPython.ErrorCode_UtilReachMaxDataChnlSize
    UtilIndexOutOfRange = _WMX3ApiPython.ErrorCode_UtilIndexOutOfRange
    UtilInitFailed = _WMX3ApiPython.ErrorCode_UtilInitFailed
    UtilLockFailed = _WMX3ApiPython.ErrorCode_UtilLockFailed
    UtilQueueFull = _WMX3ApiPython.ErrorCode_UtilQueueFull
    UtilQueueEmpty = _WMX3ApiPython.ErrorCode_UtilQueueEmpty
    UtilBufferSizeNotEnough = _WMX3ApiPython.ErrorCode_UtilBufferSizeNotEnough
    WaitForDeviceEventTimeOut = _WMX3ApiPython.ErrorCode_WaitForDeviceEventTimeOut
    DeviceEventProcessFailed = _WMX3ApiPython.ErrorCode_DeviceEventProcessFailed
    ImCommandNotMatched = _WMX3ApiPython.ErrorCode_ImCommandNotMatched
    ApiLogCreateQueueFailed = _WMX3ApiPython.ErrorCode_ApiLogCreateQueueFailed
    ApiLogIsNotSet = _WMX3ApiPython.ErrorCode_ApiLogIsNotSet
    ApiLogIsRunning = _WMX3ApiPython.ErrorCode_ApiLogIsRunning
    ApiLogIsNotRunning = _WMX3ApiPython.ErrorCode_ApiLogIsNotRunning
    ApiLogQueueError = _WMX3ApiPython.ErrorCode_ApiLogQueueError
    ApiLogOpenFileFailed = _WMX3ApiPython.ErrorCode_ApiLogOpenFileFailed
    ApiLogWriteFileFailed = _WMX3ApiPython.ErrorCode_ApiLogWriteFileFailed
    ApiLogReadFileFailed = _WMX3ApiPython.ErrorCode_ApiLogReadFileFailed
    ApiLogFolderNotExist = _WMX3ApiPython.ErrorCode_ApiLogFolderNotExist
    ApiLogGetStatusError = _WMX3ApiPython.ErrorCode_ApiLogGetStatusError
    SystemError = _WMX3ApiPython.ErrorCode_SystemError
    SystemIsNoRunning = _WMX3ApiPython.ErrorCode_SystemIsNoRunning
    SystemInitializationNotDone = _WMX3ApiPython.ErrorCode_SystemInitializationNotDone
    EngineNotStartedInSpecifiedTime = _WMX3ApiPython.ErrorCode_EngineNotStartedInSpecifiedTime
    EngineNotStoppedInSpecifiedTime = _WMX3ApiPython.ErrorCode_EngineNotStoppedInSpecifiedTime
    CommNotStartedInSpecifiedTime = _WMX3ApiPython.ErrorCode_CommNotStartedInSpecifiedTime
    CommNotStoppedInSpecifiedTime = _WMX3ApiPython.ErrorCode_CommNotStoppedInSpecifiedTime
    ModuleIsNotLoaded = _WMX3ApiPython.ErrorCode_ModuleIsNotLoaded
    StartCommunicationError = _WMX3ApiPython.ErrorCode_StartCommunicationError
    DeviceIsNotInUse = _WMX3ApiPython.ErrorCode_DeviceIsNotInUse
    SetDeviceEventFailed = _WMX3ApiPython.ErrorCode_SetDeviceEventFailed
    ResetDeviceEventFailed = _WMX3ApiPython.ErrorCode_ResetDeviceEventFailed
    WaitForDeviceEventFailed = _WMX3ApiPython.ErrorCode_WaitForDeviceEventFailed
    Reserved = _WMX3ApiPython.ErrorCode_Reserved
    CommNotStarted = _WMX3ApiPython.ErrorCode_CommNotStarted
    CommNotStopped = _WMX3ApiPython.ErrorCode_CommNotStopped
    VersionCheckError = _WMX3ApiPython.ErrorCode_VersionCheckError
    CallbackFuncError = _WMX3ApiPython.ErrorCode_CallbackFuncError
    CallbackFuncTimeOut = _WMX3ApiPython.ErrorCode_CallbackFuncTimeOut
    CallbackFuncInvalidState = _WMX3ApiPython.ErrorCode_CallbackFuncInvalidState
    CallbackFuncInvalidMode = _WMX3ApiPython.ErrorCode_CallbackFuncInvalidMode
    MissingRequiredRtdll = _WMX3ApiPython.ErrorCode_MissingRequiredRtdll
    BusyReceivingAnotherAPICommand = _WMX3ApiPython.ErrorCode_BusyReceivingAnotherAPICommand
    NotIdleState = _WMX3ApiPython.ErrorCode_NotIdleState
    AxisOutOfRange = _WMX3ApiPython.ErrorCode_AxisOutOfRange
    AxisCountOutOfRange = _WMX3ApiPython.ErrorCode_AxisCountOutOfRange
    DuplicateAxis = _WMX3ApiPython.ErrorCode_DuplicateAxis
    IOAddressOutOfRange = _WMX3ApiPython.ErrorCode_IOAddressOutOfRange
    IOSizeOutOfRange = _WMX3ApiPython.ErrorCode_IOSizeOutOfRange
    ChannelOutOfRange = _WMX3ApiPython.ErrorCode_ChannelOutOfRange
    ChannelUninitialized = _WMX3ApiPython.ErrorCode_ChannelUninitialized
    ChannelInUse = _WMX3ApiPython.ErrorCode_ChannelInUse
    ArgumentOutOfRange = _WMX3ApiPython.ErrorCode_ArgumentOutOfRange
    ArgumentIsNull = _WMX3ApiPython.ErrorCode_ArgumentIsNull
    PrevSettingsBeingApplied = _WMX3ApiPython.ErrorCode_PrevSettingsBeingApplied
    ParamOutOfRange = _WMX3ApiPython.ErrorCode_ParamOutOfRange
    IDOutOfRange = _WMX3ApiPython.ErrorCode_IDOutOfRange
    IDNotDefined = _WMX3ApiPython.ErrorCode_IDNotDefined
    ResourceInUse = _WMX3ApiPython.ErrorCode_ResourceInUse
    FileOperationFailed = _WMX3ApiPython.ErrorCode_FileOperationFailed
    StartingPreviousCommand = _WMX3ApiPython.ErrorCode_StartingPreviousCommand
    StringConversionError = _WMX3ApiPython.ErrorCode_StringConversionError
    NoMotion = _WMX3ApiPython.ErrorCode_NoMotion
    ServoOffline = _WMX3ApiPython.ErrorCode_ServoOffline
    ServoOff = _WMX3ApiPython.ErrorCode_ServoOff
    AxisAmpAlarm = _WMX3ApiPython.ErrorCode_AxisAmpAlarm
    AxisSoftLimit = _WMX3ApiPython.ErrorCode_AxisSoftLimit
    AxisNearLimit = _WMX3ApiPython.ErrorCode_AxisNearLimit
    AxisExternalLimit = _WMX3ApiPython.ErrorCode_AxisExternalLimit
    AxisHardLimit = _WMX3ApiPython.ErrorCode_AxisHardLimit
    UserMemoryAddressOutOfRange = _WMX3ApiPython.ErrorCode_UserMemoryAddressOutOfRange
    UserMemorySizeOutOfRange = _WMX3ApiPython.ErrorCode_UserMemorySizeOutOfRange
    InvalidCommandProcessingMode = _WMX3ApiPython.ErrorCode_InvalidCommandProcessingMode
    InterruptMismatch = _WMX3ApiPython.ErrorCode_InterruptMismatch
    ErrorCodeNotDefined = _WMX3ApiPython.ErrorCode_ErrorCodeNotDefined
    BufferTooSmall = _WMX3ApiPython.ErrorCode_BufferTooSmall
    RequestedBufferTooLarge = _WMX3ApiPython.ErrorCode_RequestedBufferTooLarge
    RequestedBufferTooSmall = _WMX3ApiPython.ErrorCode_RequestedBufferTooSmall
    ModuleIDOutOfRange = _WMX3ApiPython.ErrorCode_ModuleIDOutOfRange
    UpdatesListUninitialized = _WMX3ApiPython.ErrorCode_UpdatesListUninitialized
    UpdatesListDoesNotMatchInstalledUpdates = _WMX3ApiPython.ErrorCode_UpdatesListDoesNotMatchInstalledUpdates
    UpdatesListTimeout = _WMX3ApiPython.ErrorCode_UpdatesListTimeout
    UnknownError = _WMX3ApiPython.ErrorCode_UnknownError

    def __init__(self):
        this = _WMX3ApiPython.new_ErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ErrorCode
    __del__ = lambda self: None
ErrorCode_swigregister = _WMX3ApiPython.ErrorCode_swigregister
ErrorCode_swigregister(ErrorCode)

class DeviceType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceType, name)
    __repr__ = _swig_repr
    DeviceTypeNormal = _WMX3ApiPython.DeviceType_DeviceTypeNormal
    DeviceTypeLowPriority = _WMX3ApiPython.DeviceType_DeviceTypeLowPriority
    DeviceTypeExitWOCnt = _WMX3ApiPython.DeviceType_DeviceTypeExitWOCnt
    DeviceTypeLowpriorityExitWOCnt = _WMX3ApiPython.DeviceType_DeviceTypeLowpriorityExitWOCnt

    def __init__(self):
        this = _WMX3ApiPython.new_DeviceType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceType
    __del__ = lambda self: None
DeviceType_swigregister = _WMX3ApiPython.DeviceType_swigregister
DeviceType_swigregister(DeviceType)

class EngineState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngineState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.EngineState_Idle
    Running = _WMX3ApiPython.EngineState_Running
    Communicating = _WMX3ApiPython.EngineState_Communicating
    Shutdown = _WMX3ApiPython.EngineState_Shutdown
    Unknown = _WMX3ApiPython.EngineState_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EngineState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EngineState
    __del__ = lambda self: None
EngineState_swigregister = _WMX3ApiPython.EngineState_swigregister
EngineState_swigregister(EngineState)

class ModuleType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleType, name)
    __repr__ = _swig_repr
    Motion = _WMX3ApiPython.ModuleType_Motion
    Platform = _WMX3ApiPython.ModuleType_Platform
    Unknown = _WMX3ApiPython.ModuleType_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_ModuleType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleType
    __del__ = lambda self: None
ModuleType_swigregister = _WMX3ApiPython.ModuleType_swigregister
ModuleType_swigregister(ModuleType)

class ModuleId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleId, name)
    __repr__ = _swig_repr
    WMX3Engine = _WMX3ApiPython.ModuleId_WMX3Engine
    SimuPlatform = _WMX3ApiPython.ModuleId_SimuPlatform
    EcPlatform = _WMX3ApiPython.ModuleId_EcPlatform
    RtexPlatform = _WMX3ApiPython.ModuleId_RtexPlatform
    MIIIPlatform = _WMX3ApiPython.ModuleId_MIIIPlatform
    CCLinkPlatform = _WMX3ApiPython.ModuleId_CCLinkPlatform
    M4Platform = _WMX3ApiPython.ModuleId_M4Platform
    CoreMotion = _WMX3ApiPython.ModuleId_CoreMotion
    Log = _WMX3ApiPython.ModuleId_Log
    APIBuffer = _WMX3ApiPython.ModuleId_APIBuffer
    CyclicBuffer = _WMX3ApiPython.ModuleId_CyclicBuffer
    IO = _WMX3ApiPython.ModuleId_IO
    Compensation = _WMX3ApiPython.ModuleId_Compensation
    Event = _WMX3ApiPython.ModuleId_Event
    AdvancedMotion = _WMX3ApiPython.ModuleId_AdvancedMotion
    UserMemory = _WMX3ApiPython.ModuleId_UserMemory
    PMMotion = _WMX3ApiPython.ModuleId_PMMotion
    Coordinate = _WMX3ApiPython.ModuleId_Coordinate
    CNC = _WMX3ApiPython.ModuleId_CNC
    Kinematics = _WMX3ApiPython.ModuleId_Kinematics
    PLC = _WMX3ApiPython.ModuleId_PLC
    UserRtdll0 = _WMX3ApiPython.ModuleId_UserRtdll0
    UserRtdll1 = _WMX3ApiPython.ModuleId_UserRtdll1
    UserRtdll2 = _WMX3ApiPython.ModuleId_UserRtdll2
    ModuleSize = _WMX3ApiPython.ModuleId_ModuleSize

    def __init__(self):
        this = _WMX3ApiPython.new_ModuleId()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleId
    __del__ = lambda self: None
ModuleId_swigregister = _WMX3ApiPython.ModuleId_swigregister
ModuleId_swigregister(ModuleId)

class OperationState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.OperationState_Idle
    Pos = _WMX3ApiPython.OperationState_Pos
    Jog = _WMX3ApiPython.OperationState_Jog
    Home = _WMX3ApiPython.OperationState_Home
    Sync = _WMX3ApiPython.OperationState_Sync
    GantryHome = _WMX3ApiPython.OperationState_GantryHome
    Stop = _WMX3ApiPython.OperationState_Stop
    Intpl = _WMX3ApiPython.OperationState_Intpl
    Velocity = _WMX3ApiPython.OperationState_Velocity
    ConstLinearVelocity = _WMX3ApiPython.OperationState_ConstLinearVelocity
    Trq = _WMX3ApiPython.OperationState_Trq
    DirectControl = _WMX3ApiPython.OperationState_DirectControl
    PVT = _WMX3ApiPython.OperationState_PVT
    ECAM = _WMX3ApiPython.OperationState_ECAM
    SyncCatchUp = _WMX3ApiPython.OperationState_SyncCatchUp
    DancerControl = _WMX3ApiPython.OperationState_DancerControl

    def __init__(self):
        this = _WMX3ApiPython.new_OperationState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_OperationState
    __del__ = lambda self: None
OperationState_swigregister = _WMX3ApiPython.OperationState_swigregister
OperationState_swigregister(OperationState)

class DetailOperationState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetailOperationState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetailOperationState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.DetailOperationState_Idle
    Pos = _WMX3ApiPython.DetailOperationState_Pos
    Pos_OverrideSetup = _WMX3ApiPython.DetailOperationState_Pos_OverrideSetup
    Pos_WaitingForTrigger = _WMX3ApiPython.DetailOperationState_Pos_WaitingForTrigger
    Jog = _WMX3ApiPython.DetailOperationState_Jog
    Jog_OverrideSetup = _WMX3ApiPython.DetailOperationState_Jog_OverrideSetup
    Home = _WMX3ApiPython.DetailOperationState_Home
    Sync = _WMX3ApiPython.DetailOperationState_Sync
    Sync_PhaseShift = _WMX3ApiPython.DetailOperationState_Sync_PhaseShift
    Sync_GearShift = _WMX3ApiPython.DetailOperationState_Sync_GearShift
    GantryHome = _WMX3ApiPython.DetailOperationState_GantryHome
    Stop = _WMX3ApiPython.DetailOperationState_Stop
    Stop_QStop = _WMX3ApiPython.DetailOperationState_Stop_QStop
    Stop_EStop = _WMX3ApiPython.DetailOperationState_Stop_EStop
    Intpl = _WMX3ApiPython.DetailOperationState_Intpl
    Intpl_Linear = _WMX3ApiPython.DetailOperationState_Intpl_Linear
    Intpl_Circular = _WMX3ApiPython.DetailOperationState_Intpl_Circular
    Intpl_Helical = _WMX3ApiPython.DetailOperationState_Intpl_Helical
    Intpl_Spline = _WMX3ApiPython.DetailOperationState_Intpl_Spline
    Intpl_Path = _WMX3ApiPython.DetailOperationState_Intpl_Path
    Intpl_PathWithRotation = _WMX3ApiPython.DetailOperationState_Intpl_PathWithRotation
    Intpl_PathLookahead = _WMX3ApiPython.DetailOperationState_Intpl_PathLookahead
    Intpl_OverrideSetup = _WMX3ApiPython.DetailOperationState_Intpl_OverrideSetup
    Intpl_OverrideSmoothing = _WMX3ApiPython.DetailOperationState_Intpl_OverrideSmoothing
    Velocity = _WMX3ApiPython.DetailOperationState_Velocity
    Velocity_OverrideSetup = _WMX3ApiPython.DetailOperationState_Velocity_OverrideSetup
    ConstLinearVelocity = _WMX3ApiPython.DetailOperationState_ConstLinearVelocity
    Trq = _WMX3ApiPython.DetailOperationState_Trq
    Trq_OverrideSetup = _WMX3ApiPython.DetailOperationState_Trq_OverrideSetup
    DirectControl = _WMX3ApiPython.DetailOperationState_DirectControl
    PVT = _WMX3ApiPython.DetailOperationState_PVT
    ECAM = _WMX3ApiPython.DetailOperationState_ECAM
    SyncCatchUp = _WMX3ApiPython.DetailOperationState_SyncCatchUp
    DancerControl = _WMX3ApiPython.DetailOperationState_DancerControl

    def __init__(self):
        this = _WMX3ApiPython.new_DetailOperationState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DetailOperationState
    __del__ = lambda self: None
DetailOperationState_swigregister = _WMX3ApiPython.DetailOperationState_swigregister
DetailOperationState_swigregister(DetailOperationState)

class AxisCommandMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisCommandMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisCommandMode, name)
    __repr__ = _swig_repr
    Position = _WMX3ApiPython.AxisCommandMode_Position
    Velocity = _WMX3ApiPython.AxisCommandMode_Velocity
    Torque = _WMX3ApiPython.AxisCommandMode_Torque

    def __init__(self):
        this = _WMX3ApiPython.new_AxisCommandMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisCommandMode
    __del__ = lambda self: None
AxisCommandMode_swigregister = _WMX3ApiPython.AxisCommandMode_swigregister
AxisCommandMode_swigregister(AxisCommandMode)

class AxisSelection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisSelection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisSelection, name)
    __repr__ = _swig_repr

    def GetAxis(self, index):
        return _WMX3ApiPython.AxisSelection_GetAxis(self, index)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AxisSelection_SetAxis(self, index, value)

    def GetData(self, axisSelection):
        return _WMX3ApiPython.AxisSelection_GetData(self, axisSelection)

    def SetData(self, axisSelection):
        return _WMX3ApiPython.AxisSelection_SetData(self, axisSelection)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.AxisSelection_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.AxisSelection_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.AxisSelection_axisCount_get, _WMX3ApiPython.AxisSelection_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AxisSelection_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AxisSelection_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AxisSelection_axis_get, _WMX3ApiPython.AxisSelection_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AxisSelection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSelection
    __del__ = lambda self: None
AxisSelection_swigregister = _WMX3ApiPython.AxisSelection_swigregister
AxisSelection_swigregister(AxisSelection)

class ProfileType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProfileType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProfileType, name)
    __repr__ = _swig_repr
    Trapezoidal = _WMX3ApiPython.ProfileType_Trapezoidal
    SCurve = _WMX3ApiPython.ProfileType_SCurve
    JerkRatio = _WMX3ApiPython.ProfileType_JerkRatio
    Parabolic = _WMX3ApiPython.ProfileType_Parabolic
    Sin = _WMX3ApiPython.ProfileType_Sin
    AdvancedS = _WMX3ApiPython.ProfileType_AdvancedS
    TrapezoidalMAT = _WMX3ApiPython.ProfileType_TrapezoidalMAT
    JerkLimited = _WMX3ApiPython.ProfileType_JerkLimited
    JerkLimitedSCurve = _WMX3ApiPython.ProfileType_JerkLimitedSCurve
    JerkLimitedAdvancedS = _WMX3ApiPython.ProfileType_JerkLimitedAdvancedS
    TwoVelocityTrapezoidal = _WMX3ApiPython.ProfileType_TwoVelocityTrapezoidal
    TwoVelocitySCurve = _WMX3ApiPython.ProfileType_TwoVelocitySCurve
    TwoVelocityJerkRatio = _WMX3ApiPython.ProfileType_TwoVelocityJerkRatio
    TimeAccTrapezoidal = _WMX3ApiPython.ProfileType_TimeAccTrapezoidal
    TimeAccSCurve = _WMX3ApiPython.ProfileType_TimeAccSCurve
    TimeAccJerkRatio = _WMX3ApiPython.ProfileType_TimeAccJerkRatio
    TimeAccParabolic = _WMX3ApiPython.ProfileType_TimeAccParabolic
    TimeAccSin = _WMX3ApiPython.ProfileType_TimeAccSin
    TimeAccAdvancedS = _WMX3ApiPython.ProfileType_TimeAccAdvancedS
    ConstantDec = _WMX3ApiPython.ProfileType_ConstantDec
    JerkRatioFixedVelocityT = _WMX3ApiPython.ProfileType_JerkRatioFixedVelocityT
    JerkRatioFixedVelocityS = _WMX3ApiPython.ProfileType_JerkRatioFixedVelocityS
    JerkLimitedFixedVelocityT = _WMX3ApiPython.ProfileType_JerkLimitedFixedVelocityT
    JerkLimitedFixedVelocityS = _WMX3ApiPython.ProfileType_JerkLimitedFixedVelocityS
    ParabolicVelocity = _WMX3ApiPython.ProfileType_ParabolicVelocity

    def __init__(self):
        this = _WMX3ApiPython.new_ProfileType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ProfileType
    __del__ = lambda self: None
ProfileType_swigregister = _WMX3ApiPython.ProfileType_swigregister
ProfileType_swigregister(ProfileType)

class Profile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Profile, name)
    __repr__ = _swig_repr

    def GetData(self, profile):
        return _WMX3ApiPython.Profile_GetData(self, profile)

    def SetData(self, profile):
        return _WMX3ApiPython.Profile_SetData(self, profile)
    __swig_setmethods__["type"] = _WMX3ApiPython.Profile_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.Profile_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.Profile_type_get, _WMX3ApiPython.Profile_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.Profile_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.Profile_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.Profile_velocity_get, _WMX3ApiPython.Profile_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.Profile_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.Profile_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.Profile_acc_get, _WMX3ApiPython.Profile_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.Profile_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.Profile_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.Profile_dec_get, _WMX3ApiPython.Profile_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.Profile_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.Profile_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.Profile_jerkAcc_get, _WMX3ApiPython.Profile_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.Profile_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.Profile_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.Profile_jerkDec_get, _WMX3ApiPython.Profile_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.Profile_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.Profile_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.Profile_jerkAccRatio_get, _WMX3ApiPython.Profile_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.Profile_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.Profile_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.Profile_jerkDecRatio_get, _WMX3ApiPython.Profile_jerkDecRatio_set)
    __swig_setmethods__["accTimeMilliseconds"] = _WMX3ApiPython.Profile_accTimeMilliseconds_set
    __swig_getmethods__["accTimeMilliseconds"] = _WMX3ApiPython.Profile_accTimeMilliseconds_get
    if _newclass:
        accTimeMilliseconds = _swig_property(_WMX3ApiPython.Profile_accTimeMilliseconds_get, _WMX3ApiPython.Profile_accTimeMilliseconds_set)
    __swig_setmethods__["decTimeMilliseconds"] = _WMX3ApiPython.Profile_decTimeMilliseconds_set
    __swig_getmethods__["decTimeMilliseconds"] = _WMX3ApiPython.Profile_decTimeMilliseconds_get
    if _newclass:
        decTimeMilliseconds = _swig_property(_WMX3ApiPython.Profile_decTimeMilliseconds_get, _WMX3ApiPython.Profile_decTimeMilliseconds_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.Profile_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.Profile_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.Profile_startingVelocity_get, _WMX3ApiPython.Profile_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.Profile_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.Profile_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.Profile_endVelocity_get, _WMX3ApiPython.Profile_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.Profile_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.Profile_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.Profile_secondVelocity_get, _WMX3ApiPython.Profile_secondVelocity_set)
    __swig_setmethods__["movingAverageTimeMilliseconds"] = _WMX3ApiPython.Profile_movingAverageTimeMilliseconds_set
    __swig_getmethods__["movingAverageTimeMilliseconds"] = _WMX3ApiPython.Profile_movingAverageTimeMilliseconds_get
    if _newclass:
        movingAverageTimeMilliseconds = _swig_property(_WMX3ApiPython.Profile_movingAverageTimeMilliseconds_get, _WMX3ApiPython.Profile_movingAverageTimeMilliseconds_set)
    if _newclass:
        SetupTrapezoidal = staticmethod(_WMX3ApiPython.Profile_SetupTrapezoidal)
    else:
        SetupTrapezoidal = _WMX3ApiPython.Profile_SetupTrapezoidal
    if _newclass:
        SetupSCurve = staticmethod(_WMX3ApiPython.Profile_SetupSCurve)
    else:
        SetupSCurve = _WMX3ApiPython.Profile_SetupSCurve
    if _newclass:
        SetupJerkRatio = staticmethod(_WMX3ApiPython.Profile_SetupJerkRatio)
    else:
        SetupJerkRatio = _WMX3ApiPython.Profile_SetupJerkRatio
    if _newclass:
        SetupParabolic = staticmethod(_WMX3ApiPython.Profile_SetupParabolic)
    else:
        SetupParabolic = _WMX3ApiPython.Profile_SetupParabolic
    if _newclass:
        SetupSin = staticmethod(_WMX3ApiPython.Profile_SetupSin)
    else:
        SetupSin = _WMX3ApiPython.Profile_SetupSin
    if _newclass:
        SetupAdvancedS = staticmethod(_WMX3ApiPython.Profile_SetupAdvancedS)
    else:
        SetupAdvancedS = _WMX3ApiPython.Profile_SetupAdvancedS
    if _newclass:
        SetupTrapezoidalMAT = staticmethod(_WMX3ApiPython.Profile_SetupTrapezoidalMAT)
    else:
        SetupTrapezoidalMAT = _WMX3ApiPython.Profile_SetupTrapezoidalMAT
    if _newclass:
        SetupJerkLimited = staticmethod(_WMX3ApiPython.Profile_SetupJerkLimited)
    else:
        SetupJerkLimited = _WMX3ApiPython.Profile_SetupJerkLimited
    if _newclass:
        SetupJerkLimitedSCurve = staticmethod(_WMX3ApiPython.Profile_SetupJerkLimitedSCurve)
    else:
        SetupJerkLimitedSCurve = _WMX3ApiPython.Profile_SetupJerkLimitedSCurve
    if _newclass:
        SetupJerkLimitedAdvancedS = staticmethod(_WMX3ApiPython.Profile_SetupJerkLimitedAdvancedS)
    else:
        SetupJerkLimitedAdvancedS = _WMX3ApiPython.Profile_SetupJerkLimitedAdvancedS
    if _newclass:
        SetupTwoVelocityTrapezoidal = staticmethod(_WMX3ApiPython.Profile_SetupTwoVelocityTrapezoidal)
    else:
        SetupTwoVelocityTrapezoidal = _WMX3ApiPython.Profile_SetupTwoVelocityTrapezoidal
    if _newclass:
        SetupTwoVelocitySCurve = staticmethod(_WMX3ApiPython.Profile_SetupTwoVelocitySCurve)
    else:
        SetupTwoVelocitySCurve = _WMX3ApiPython.Profile_SetupTwoVelocitySCurve
    if _newclass:
        SetupTwoVelocityJerkRatio = staticmethod(_WMX3ApiPython.Profile_SetupTwoVelocityJerkRatio)
    else:
        SetupTwoVelocityJerkRatio = _WMX3ApiPython.Profile_SetupTwoVelocityJerkRatio
    if _newclass:
        SetupTimeAccTrapezoidal = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccTrapezoidal)
    else:
        SetupTimeAccTrapezoidal = _WMX3ApiPython.Profile_SetupTimeAccTrapezoidal
    if _newclass:
        SetupTimeAccSCurve = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccSCurve)
    else:
        SetupTimeAccSCurve = _WMX3ApiPython.Profile_SetupTimeAccSCurve
    if _newclass:
        SetupTimeAccJerkRatio = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccJerkRatio)
    else:
        SetupTimeAccJerkRatio = _WMX3ApiPython.Profile_SetupTimeAccJerkRatio
    if _newclass:
        SetupTimeAccParabolic = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccParabolic)
    else:
        SetupTimeAccParabolic = _WMX3ApiPython.Profile_SetupTimeAccParabolic
    if _newclass:
        SetupTimeAccSin = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccSin)
    else:
        SetupTimeAccSin = _WMX3ApiPython.Profile_SetupTimeAccSin
    if _newclass:
        SetupTimeAccAdvancedS = staticmethod(_WMX3ApiPython.Profile_SetupTimeAccAdvancedS)
    else:
        SetupTimeAccAdvancedS = _WMX3ApiPython.Profile_SetupTimeAccAdvancedS
    if _newclass:
        SetupConstantDec = staticmethod(_WMX3ApiPython.Profile_SetupConstantDec)
    else:
        SetupConstantDec = _WMX3ApiPython.Profile_SetupConstantDec
    if _newclass:
        SetupJerkRatioFixedVelocityT = staticmethod(_WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityT)
    else:
        SetupJerkRatioFixedVelocityT = _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityT
    if _newclass:
        SetupJerkRatioFixedVelocityS = staticmethod(_WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityS)
    else:
        SetupJerkRatioFixedVelocityS = _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityS
    if _newclass:
        SetupJerkLimitedFixedVelocityT = staticmethod(_WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityT)
    else:
        SetupJerkLimitedFixedVelocityT = _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityT
    if _newclass:
        SetupJerkLimitedFixedVelocityS = staticmethod(_WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityS)
    else:
        SetupJerkLimitedFixedVelocityS = _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityS
    if _newclass:
        SetupParabolicVelocity = staticmethod(_WMX3ApiPython.Profile_SetupParabolicVelocity)
    else:
        SetupParabolicVelocity = _WMX3ApiPython.Profile_SetupParabolicVelocity

    def __init__(self):
        this = _WMX3ApiPython.new_Profile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Profile
    __del__ = lambda self: None
Profile_swigregister = _WMX3ApiPython.Profile_swigregister
Profile_swigregister(Profile)

def Profile_SetupTrapezoidal(*args):
    return _WMX3ApiPython.Profile_SetupTrapezoidal(*args)
Profile_SetupTrapezoidal = _WMX3ApiPython.Profile_SetupTrapezoidal

def Profile_SetupSCurve(*args):
    return _WMX3ApiPython.Profile_SetupSCurve(*args)
Profile_SetupSCurve = _WMX3ApiPython.Profile_SetupSCurve

def Profile_SetupJerkRatio(*args):
    return _WMX3ApiPython.Profile_SetupJerkRatio(*args)
Profile_SetupJerkRatio = _WMX3ApiPython.Profile_SetupJerkRatio

def Profile_SetupParabolic(*args):
    return _WMX3ApiPython.Profile_SetupParabolic(*args)
Profile_SetupParabolic = _WMX3ApiPython.Profile_SetupParabolic

def Profile_SetupSin(*args):
    return _WMX3ApiPython.Profile_SetupSin(*args)
Profile_SetupSin = _WMX3ApiPython.Profile_SetupSin

def Profile_SetupAdvancedS(*args):
    return _WMX3ApiPython.Profile_SetupAdvancedS(*args)
Profile_SetupAdvancedS = _WMX3ApiPython.Profile_SetupAdvancedS

def Profile_SetupTrapezoidalMAT(*args):
    return _WMX3ApiPython.Profile_SetupTrapezoidalMAT(*args)
Profile_SetupTrapezoidalMAT = _WMX3ApiPython.Profile_SetupTrapezoidalMAT

def Profile_SetupJerkLimited(*args):
    return _WMX3ApiPython.Profile_SetupJerkLimited(*args)
Profile_SetupJerkLimited = _WMX3ApiPython.Profile_SetupJerkLimited

def Profile_SetupJerkLimitedSCurve(*args):
    return _WMX3ApiPython.Profile_SetupJerkLimitedSCurve(*args)
Profile_SetupJerkLimitedSCurve = _WMX3ApiPython.Profile_SetupJerkLimitedSCurve

def Profile_SetupJerkLimitedAdvancedS(*args):
    return _WMX3ApiPython.Profile_SetupJerkLimitedAdvancedS(*args)
Profile_SetupJerkLimitedAdvancedS = _WMX3ApiPython.Profile_SetupJerkLimitedAdvancedS

def Profile_SetupTwoVelocityTrapezoidal(*args):
    return _WMX3ApiPython.Profile_SetupTwoVelocityTrapezoidal(*args)
Profile_SetupTwoVelocityTrapezoidal = _WMX3ApiPython.Profile_SetupTwoVelocityTrapezoidal

def Profile_SetupTwoVelocitySCurve(*args):
    return _WMX3ApiPython.Profile_SetupTwoVelocitySCurve(*args)
Profile_SetupTwoVelocitySCurve = _WMX3ApiPython.Profile_SetupTwoVelocitySCurve

def Profile_SetupTwoVelocityJerkRatio(*args):
    return _WMX3ApiPython.Profile_SetupTwoVelocityJerkRatio(*args)
Profile_SetupTwoVelocityJerkRatio = _WMX3ApiPython.Profile_SetupTwoVelocityJerkRatio

def Profile_SetupTimeAccTrapezoidal(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccTrapezoidal(*args)
Profile_SetupTimeAccTrapezoidal = _WMX3ApiPython.Profile_SetupTimeAccTrapezoidal

def Profile_SetupTimeAccSCurve(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccSCurve(*args)
Profile_SetupTimeAccSCurve = _WMX3ApiPython.Profile_SetupTimeAccSCurve

def Profile_SetupTimeAccJerkRatio(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccJerkRatio(*args)
Profile_SetupTimeAccJerkRatio = _WMX3ApiPython.Profile_SetupTimeAccJerkRatio

def Profile_SetupTimeAccParabolic(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccParabolic(*args)
Profile_SetupTimeAccParabolic = _WMX3ApiPython.Profile_SetupTimeAccParabolic

def Profile_SetupTimeAccSin(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccSin(*args)
Profile_SetupTimeAccSin = _WMX3ApiPython.Profile_SetupTimeAccSin

def Profile_SetupTimeAccAdvancedS(*args):
    return _WMX3ApiPython.Profile_SetupTimeAccAdvancedS(*args)
Profile_SetupTimeAccAdvancedS = _WMX3ApiPython.Profile_SetupTimeAccAdvancedS

def Profile_SetupConstantDec(startingVelocity, endVelocity):
    return _WMX3ApiPython.Profile_SetupConstantDec(startingVelocity, endVelocity)
Profile_SetupConstantDec = _WMX3ApiPython.Profile_SetupConstantDec

def Profile_SetupJerkRatioFixedVelocityT(*args):
    return _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityT(*args)
Profile_SetupJerkRatioFixedVelocityT = _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityT

def Profile_SetupJerkRatioFixedVelocityS(*args):
    return _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityS(*args)
Profile_SetupJerkRatioFixedVelocityS = _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityS

def Profile_SetupJerkLimitedFixedVelocityT(*args):
    return _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityT(*args)
Profile_SetupJerkLimitedFixedVelocityT = _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityT

def Profile_SetupJerkLimitedFixedVelocityS(*args):
    return _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityS(*args)
Profile_SetupJerkLimitedFixedVelocityS = _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityS

def Profile_SetupParabolicVelocity(*args):
    return _WMX3ApiPython.Profile_SetupParabolicVelocity(*args)
Profile_SetupParabolicVelocity = _WMX3ApiPython.Profile_SetupParabolicVelocity

class EStopLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EStopLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EStopLevel, name)
    __repr__ = _swig_repr
    Final = _WMX3ApiPython.EStopLevel_Final
    Level1 = _WMX3ApiPython.EStopLevel_Level1

    def __init__(self):
        this = _WMX3ApiPython.new_EStopLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EStopLevel
    __del__ = lambda self: None
EStopLevel_swigregister = _WMX3ApiPython.EStopLevel_swigregister
EStopLevel_swigregister(EStopLevel)

class FormatType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormatType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormatType, name)
    __repr__ = _swig_repr
    Char = _WMX3ApiPython.FormatType_Char
    Uchar = _WMX3ApiPython.FormatType_Uchar
    Short = _WMX3ApiPython.FormatType_Short
    Ushort = _WMX3ApiPython.FormatType_Ushort
    Int = _WMX3ApiPython.FormatType_Int
    Uint = _WMX3ApiPython.FormatType_Uint
    Long = _WMX3ApiPython.FormatType_Long
    Ulong = _WMX3ApiPython.FormatType_Ulong
    Float = _WMX3ApiPython.FormatType_Float
    Double = _WMX3ApiPython.FormatType_Double

    def __init__(self):
        this = _WMX3ApiPython.new_FormatType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_FormatType
    __del__ = lambda self: None
FormatType_swigregister = _WMX3ApiPython.FormatType_swigregister
FormatType_swigregister(FormatType)

class AIOFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIOFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIOFormat, name)
    __repr__ = _swig_repr

    def SetData(self, aioFormat):
        return _WMX3ApiPython.AIOFormat_SetData(self, aioFormat)

    def GetData(self, aioFormat):
        return _WMX3ApiPython.AIOFormat_GetData(self, aioFormat)
    __swig_setmethods__["byte"] = _WMX3ApiPython.AIOFormat_byte_set
    __swig_getmethods__["byte"] = _WMX3ApiPython.AIOFormat_byte_get
    if _newclass:
        byte = _swig_property(_WMX3ApiPython.AIOFormat_byte_get, _WMX3ApiPython.AIOFormat_byte_set)
    __swig_setmethods__["bit"] = _WMX3ApiPython.AIOFormat_bit_set
    __swig_getmethods__["bit"] = _WMX3ApiPython.AIOFormat_bit_get
    if _newclass:
        bit = _swig_property(_WMX3ApiPython.AIOFormat_bit_get, _WMX3ApiPython.AIOFormat_bit_set)
    __swig_setmethods__["aioFormatType"] = _WMX3ApiPython.AIOFormat_aioFormatType_set
    __swig_getmethods__["aioFormatType"] = _WMX3ApiPython.AIOFormat_aioFormatType_get
    if _newclass:
        aioFormatType = _swig_property(_WMX3ApiPython.AIOFormat_aioFormatType_get, _WMX3ApiPython.AIOFormat_aioFormatType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AIOFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AIOFormat
    __del__ = lambda self: None
AIOFormat_swigregister = _WMX3ApiPython.AIOFormat_swigregister
AIOFormat_swigregister(AIOFormat)

class IOAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOAddress, name)
    __repr__ = _swig_repr

    def SetData(self, ioAddress):
        return _WMX3ApiPython.IOAddress_SetData(self, ioAddress)

    def GetData(self, ioAddress):
        return _WMX3ApiPython.IOAddress_GetData(self, ioAddress)
    __swig_setmethods__["byte"] = _WMX3ApiPython.IOAddress_byte_set
    __swig_getmethods__["byte"] = _WMX3ApiPython.IOAddress_byte_get
    if _newclass:
        byte = _swig_property(_WMX3ApiPython.IOAddress_byte_get, _WMX3ApiPython.IOAddress_byte_set)
    __swig_setmethods__["bit"] = _WMX3ApiPython.IOAddress_bit_set
    __swig_getmethods__["bit"] = _WMX3ApiPython.IOAddress_bit_get
    if _newclass:
        bit = _swig_property(_WMX3ApiPython.IOAddress_bit_get, _WMX3ApiPython.IOAddress_bit_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.IOAddress_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.IOAddress_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.IOAddress_size_get, _WMX3ApiPython.IOAddress_size_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IOAddress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IOAddress
    __del__ = lambda self: None
IOAddress_swigregister = _WMX3ApiPython.IOAddress_swigregister
IOAddress_swigregister(IOAddress)

class IOSourceType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOSourceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOSourceType, name)
    __repr__ = _swig_repr
    Input = _WMX3ApiPython.IOSourceType_Input
    Output = _WMX3ApiPython.IOSourceType_Output

    def __init__(self):
        this = _WMX3ApiPython.new_IOSourceType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IOSourceType
    __del__ = lambda self: None
IOSourceType_swigregister = _WMX3ApiPython.IOSourceType_swigregister
IOSourceType_swigregister(IOSourceType)

class MAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAddress, name)
    __repr__ = _swig_repr

    def SetData(self, mAddress):
        return _WMX3ApiPython.MAddress_SetData(self, mAddress)

    def GetData(self, mAddress):
        return _WMX3ApiPython.MAddress_GetData(self, mAddress)
    __swig_setmethods__["byte"] = _WMX3ApiPython.MAddress_byte_set
    __swig_getmethods__["byte"] = _WMX3ApiPython.MAddress_byte_get
    if _newclass:
        byte = _swig_property(_WMX3ApiPython.MAddress_byte_get, _WMX3ApiPython.MAddress_byte_set)
    __swig_setmethods__["bit"] = _WMX3ApiPython.MAddress_bit_set
    __swig_getmethods__["bit"] = _WMX3ApiPython.MAddress_bit_get
    if _newclass:
        bit = _swig_property(_WMX3ApiPython.MAddress_bit_get, _WMX3ApiPython.MAddress_bit_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.MAddress_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.MAddress_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.MAddress_size_get, _WMX3ApiPython.MAddress_size_set)

    def __init__(self):
        this = _WMX3ApiPython.new_MAddress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MAddress
    __del__ = lambda self: None
MAddress_swigregister = _WMX3ApiPython.MAddress_swigregister
MAddress_swigregister(MAddress)

class SizeUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeUnit, name)
    __repr__ = _swig_repr
    Byte = _WMX3ApiPython.SizeUnit_Byte
    Kilobyte = _WMX3ApiPython.SizeUnit_Kilobyte
    Megabyte = _WMX3ApiPython.SizeUnit_Megabyte

    def __init__(self):
        this = _WMX3ApiPython.new_SizeUnit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_SizeUnit
    __del__ = lambda self: None
SizeUnit_swigregister = _WMX3ApiPython.SizeUnit_swigregister
SizeUnit_swigregister(SizeUnit)

class ModuleInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleInfo, name)
    __repr__ = _swig_repr

    def GetData(self, moduleInfo):
        return _WMX3ApiPython.ModuleInfo_GetData(self, moduleInfo)

    def SetData(self, moduleInfo):
        return _WMX3ApiPython.ModuleInfo_SetData(self, moduleInfo)
    __swig_setmethods__["suspend"] = _WMX3ApiPython.ModuleInfo_suspend_set
    __swig_getmethods__["suspend"] = _WMX3ApiPython.ModuleInfo_suspend_get
    if _newclass:
        suspend = _swig_property(_WMX3ApiPython.ModuleInfo_suspend_get, _WMX3ApiPython.ModuleInfo_suspend_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.ModuleInfo_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.ModuleInfo_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.ModuleInfo_type_get, _WMX3ApiPython.ModuleInfo_type_set)
    __swig_setmethods__["id"] = _WMX3ApiPython.ModuleInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.ModuleInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.ModuleInfo_id_get, _WMX3ApiPython.ModuleInfo_id_set)
    __swig_setmethods__["slot"] = _WMX3ApiPython.ModuleInfo_slot_set
    __swig_getmethods__["slot"] = _WMX3ApiPython.ModuleInfo_slot_get
    if _newclass:
        slot = _swig_property(_WMX3ApiPython.ModuleInfo_slot_get, _WMX3ApiPython.ModuleInfo_slot_set)
    __swig_setmethods__["fileName"] = _WMX3ApiPython.ModuleInfo_fileName_set
    __swig_getmethods__["fileName"] = _WMX3ApiPython.ModuleInfo_fileName_get
    if _newclass:
        fileName = _swig_property(_WMX3ApiPython.ModuleInfo_fileName_get, _WMX3ApiPython.ModuleInfo_fileName_set)
    __swig_setmethods__["moduleName"] = _WMX3ApiPython.ModuleInfo_moduleName_set
    __swig_getmethods__["moduleName"] = _WMX3ApiPython.ModuleInfo_moduleName_get
    if _newclass:
        moduleName = _swig_property(_WMX3ApiPython.ModuleInfo_moduleName_get, _WMX3ApiPython.ModuleInfo_moduleName_set)
    __swig_setmethods__["moduleDesc"] = _WMX3ApiPython.ModuleInfo_moduleDesc_set
    __swig_getmethods__["moduleDesc"] = _WMX3ApiPython.ModuleInfo_moduleDesc_get
    if _newclass:
        moduleDesc = _swig_property(_WMX3ApiPython.ModuleInfo_moduleDesc_get, _WMX3ApiPython.ModuleInfo_moduleDesc_set)
    __swig_setmethods__["majorVersion"] = _WMX3ApiPython.ModuleInfo_majorVersion_set
    __swig_getmethods__["majorVersion"] = _WMX3ApiPython.ModuleInfo_majorVersion_get
    if _newclass:
        majorVersion = _swig_property(_WMX3ApiPython.ModuleInfo_majorVersion_get, _WMX3ApiPython.ModuleInfo_majorVersion_set)
    __swig_setmethods__["minorVersion"] = _WMX3ApiPython.ModuleInfo_minorVersion_set
    __swig_getmethods__["minorVersion"] = _WMX3ApiPython.ModuleInfo_minorVersion_get
    if _newclass:
        minorVersion = _swig_property(_WMX3ApiPython.ModuleInfo_minorVersion_get, _WMX3ApiPython.ModuleInfo_minorVersion_set)
    __swig_setmethods__["revisionVersion"] = _WMX3ApiPython.ModuleInfo_revisionVersion_set
    __swig_getmethods__["revisionVersion"] = _WMX3ApiPython.ModuleInfo_revisionVersion_get
    if _newclass:
        revisionVersion = _swig_property(_WMX3ApiPython.ModuleInfo_revisionVersion_get, _WMX3ApiPython.ModuleInfo_revisionVersion_set)
    __swig_setmethods__["fixVersion"] = _WMX3ApiPython.ModuleInfo_fixVersion_set
    __swig_getmethods__["fixVersion"] = _WMX3ApiPython.ModuleInfo_fixVersion_get
    if _newclass:
        fixVersion = _swig_property(_WMX3ApiPython.ModuleInfo_fixVersion_get, _WMX3ApiPython.ModuleInfo_fixVersion_set)
    __swig_setmethods__["memory"] = _WMX3ApiPython.ModuleInfo_memory_set
    __swig_getmethods__["memory"] = _WMX3ApiPython.ModuleInfo_memory_get
    if _newclass:
        memory = _swig_property(_WMX3ApiPython.ModuleInfo_memory_get, _WMX3ApiPython.ModuleInfo_memory_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ModuleInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleInfo
    __del__ = lambda self: None
ModuleInfo_swigregister = _WMX3ApiPython.ModuleInfo_swigregister
ModuleInfo_swigregister(ModuleInfo)

class EngineInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngineInfo, name)
    __repr__ = _swig_repr

    def GetData(self, engineInfo):
        return _WMX3ApiPython.EngineInfo_GetData(self, engineInfo)

    def SetData(self, engineInfo):
        return _WMX3ApiPython.EngineInfo_SetData(self, engineInfo)
    __swig_setmethods__["majorVersion"] = _WMX3ApiPython.EngineInfo_majorVersion_set
    __swig_getmethods__["majorVersion"] = _WMX3ApiPython.EngineInfo_majorVersion_get
    if _newclass:
        majorVersion = _swig_property(_WMX3ApiPython.EngineInfo_majorVersion_get, _WMX3ApiPython.EngineInfo_majorVersion_set)
    __swig_setmethods__["minorVersion"] = _WMX3ApiPython.EngineInfo_minorVersion_set
    __swig_getmethods__["minorVersion"] = _WMX3ApiPython.EngineInfo_minorVersion_get
    if _newclass:
        minorVersion = _swig_property(_WMX3ApiPython.EngineInfo_minorVersion_get, _WMX3ApiPython.EngineInfo_minorVersion_set)
    __swig_setmethods__["revisionVersion"] = _WMX3ApiPython.EngineInfo_revisionVersion_set
    __swig_getmethods__["revisionVersion"] = _WMX3ApiPython.EngineInfo_revisionVersion_get
    if _newclass:
        revisionVersion = _swig_property(_WMX3ApiPython.EngineInfo_revisionVersion_get, _WMX3ApiPython.EngineInfo_revisionVersion_set)
    __swig_setmethods__["fixVersion"] = _WMX3ApiPython.EngineInfo_fixVersion_set
    __swig_getmethods__["fixVersion"] = _WMX3ApiPython.EngineInfo_fixVersion_get
    if _newclass:
        fixVersion = _swig_property(_WMX3ApiPython.EngineInfo_fixVersion_get, _WMX3ApiPython.EngineInfo_fixVersion_set)
    __swig_setmethods__["imlibVersion"] = _WMX3ApiPython.EngineInfo_imlibVersion_set
    __swig_getmethods__["imlibVersion"] = _WMX3ApiPython.EngineInfo_imlibVersion_get
    if _newclass:
        imlibVersion = _swig_property(_WMX3ApiPython.EngineInfo_imlibVersion_get, _WMX3ApiPython.EngineInfo_imlibVersion_set)
    __swig_setmethods__["imlibRevision"] = _WMX3ApiPython.EngineInfo_imlibRevision_set
    __swig_getmethods__["imlibRevision"] = _WMX3ApiPython.EngineInfo_imlibRevision_get
    if _newclass:
        imlibRevision = _swig_property(_WMX3ApiPython.EngineInfo_imlibRevision_get, _WMX3ApiPython.EngineInfo_imlibRevision_set)
    __swig_setmethods__["numLicensedAxes"] = _WMX3ApiPython.EngineInfo_numLicensedAxes_set
    __swig_getmethods__["numLicensedAxes"] = _WMX3ApiPython.EngineInfo_numLicensedAxes_get
    if _newclass:
        numLicensedAxes = _swig_property(_WMX3ApiPython.EngineInfo_numLicensedAxes_get, _WMX3ApiPython.EngineInfo_numLicensedAxes_set)
    __swig_setmethods__["options"] = _WMX3ApiPython.EngineInfo_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.EngineInfo_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.EngineInfo_options_get, _WMX3ApiPython.EngineInfo_options_set)

    def GetOptions(self, index):
        return _WMX3ApiPython.EngineInfo_GetOptions(self, index)

    def SetOptions(self, index, value):
        return _WMX3ApiPython.EngineInfo_SetOptions(self, index, value)

    def __init__(self):
        this = _WMX3ApiPython.new_EngineInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EngineInfo
    __del__ = lambda self: None
EngineInfo_swigregister = _WMX3ApiPython.EngineInfo_swigregister
EngineInfo_swigregister(EngineInfo)

class ModulesInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulesInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModulesInfo, name)
    __repr__ = _swig_repr

    def GetData(self, modulesInfo):
        return _WMX3ApiPython.ModulesInfo_GetData(self, modulesInfo)

    def SetData(self, modulesInfo):
        return _WMX3ApiPython.ModulesInfo_SetData(self, modulesInfo)
    __swig_setmethods__["engine"] = _WMX3ApiPython.ModulesInfo_engine_set
    __swig_getmethods__["engine"] = _WMX3ApiPython.ModulesInfo_engine_get
    if _newclass:
        engine = _swig_property(_WMX3ApiPython.ModulesInfo_engine_get, _WMX3ApiPython.ModulesInfo_engine_set)
    __swig_setmethods__["numOfModule"] = _WMX3ApiPython.ModulesInfo_numOfModule_set
    __swig_getmethods__["numOfModule"] = _WMX3ApiPython.ModulesInfo_numOfModule_get
    if _newclass:
        numOfModule = _swig_property(_WMX3ApiPython.ModulesInfo_numOfModule_get, _WMX3ApiPython.ModulesInfo_numOfModule_set)
    __swig_setmethods__["modules"] = _WMX3ApiPython.ModulesInfo_modules_set
    __swig_getmethods__["modules"] = _WMX3ApiPython.ModulesInfo_modules_get
    if _newclass:
        modules = _swig_property(_WMX3ApiPython.ModulesInfo_modules_get, _WMX3ApiPython.ModulesInfo_modules_set)

    def GetModules(self, index):
        return _WMX3ApiPython.ModulesInfo_GetModules(self, index)

    def SetModules(self, index, value):
        return _WMX3ApiPython.ModulesInfo_SetModules(self, index, value)

    def __init__(self):
        this = _WMX3ApiPython.new_ModulesInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ModulesInfo
    __del__ = lambda self: None
ModulesInfo_swigregister = _WMX3ApiPython.ModulesInfo_swigregister
ModulesInfo_swigregister(ModulesInfo)

class DeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceInfo, name)
    __repr__ = _swig_repr

    def GetData(self, deviceInfo):
        return _WMX3ApiPython.DeviceInfo_GetData(self, deviceInfo)

    def SetData(self, deviceInfo):
        return _WMX3ApiPython.DeviceInfo_SetData(self, deviceInfo)
    __swig_setmethods__["id"] = _WMX3ApiPython.DeviceInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.DeviceInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.DeviceInfo_id_get, _WMX3ApiPython.DeviceInfo_id_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.DeviceInfo_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.DeviceInfo_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.DeviceInfo_type_get, _WMX3ApiPython.DeviceInfo_type_set)
    __swig_setmethods__["watchdog"] = _WMX3ApiPython.DeviceInfo_watchdog_set
    __swig_getmethods__["watchdog"] = _WMX3ApiPython.DeviceInfo_watchdog_get
    if _newclass:
        watchdog = _swig_property(_WMX3ApiPython.DeviceInfo_watchdog_get, _WMX3ApiPython.DeviceInfo_watchdog_set)
    __swig_setmethods__["watchdogCount"] = _WMX3ApiPython.DeviceInfo_watchdogCount_set
    __swig_getmethods__["watchdogCount"] = _WMX3ApiPython.DeviceInfo_watchdogCount_get
    if _newclass:
        watchdogCount = _swig_property(_WMX3ApiPython.DeviceInfo_watchdogCount_get, _WMX3ApiPython.DeviceInfo_watchdogCount_set)
    __swig_setmethods__["name"] = _WMX3ApiPython.DeviceInfo_name_set
    __swig_getmethods__["name"] = _WMX3ApiPython.DeviceInfo_name_get
    if _newclass:
        name = _swig_property(_WMX3ApiPython.DeviceInfo_name_get, _WMX3ApiPython.DeviceInfo_name_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DeviceInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceInfo
    __del__ = lambda self: None
DeviceInfo_swigregister = _WMX3ApiPython.DeviceInfo_swigregister
DeviceInfo_swigregister(DeviceInfo)

class DevicesInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DevicesInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DevicesInfo, name)
    __repr__ = _swig_repr

    def GetData(self, devicesInfo):
        return _WMX3ApiPython.DevicesInfo_GetData(self, devicesInfo)

    def SetData(self, devicesInfo):
        return _WMX3ApiPython.DevicesInfo_SetData(self, devicesInfo)
    __swig_setmethods__["devices"] = _WMX3ApiPython.DevicesInfo_devices_set
    __swig_getmethods__["devices"] = _WMX3ApiPython.DevicesInfo_devices_get
    if _newclass:
        devices = _swig_property(_WMX3ApiPython.DevicesInfo_devices_get, _WMX3ApiPython.DevicesInfo_devices_set)

    def GetDevices(self, index):
        return _WMX3ApiPython.DevicesInfo_GetDevices(self, index)

    def SetDevices(self, index, value):
        return _WMX3ApiPython.DevicesInfo_SetDevices(self, index, value)
    __swig_setmethods__["count"] = _WMX3ApiPython.DevicesInfo_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.DevicesInfo_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.DevicesInfo_count_get, _WMX3ApiPython.DevicesInfo_count_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DevicesInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DevicesInfo
    __del__ = lambda self: None
DevicesInfo_swigregister = _WMX3ApiPython.DevicesInfo_swigregister
DevicesInfo_swigregister(DevicesInfo)

class InterruptData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterruptData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterruptData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numOfAxes"] = _WMX3ApiPython.InterruptData_numOfAxes_set
    __swig_getmethods__["numOfAxes"] = _WMX3ApiPython.InterruptData_numOfAxes_get
    if _newclass:
        numOfAxes = _swig_property(_WMX3ApiPython.InterruptData_numOfAxes_get, _WMX3ApiPython.InterruptData_numOfAxes_set)
    __swig_setmethods__["cycleTimeMicroseconds"] = _WMX3ApiPython.InterruptData_cycleTimeMicroseconds_set
    __swig_getmethods__["cycleTimeMicroseconds"] = _WMX3ApiPython.InterruptData_cycleTimeMicroseconds_get
    if _newclass:
        cycleTimeMicroseconds = _swig_property(_WMX3ApiPython.InterruptData_cycleTimeMicroseconds_get, _WMX3ApiPython.InterruptData_cycleTimeMicroseconds_set)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.InterruptData_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.InterruptData_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.InterruptData_cycleCounter_get, _WMX3ApiPython.InterruptData_cycleCounter_set)

    def __init__(self):
        this = _WMX3ApiPython.new_InterruptData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_InterruptData
    __del__ = lambda self: None
InterruptData_swigregister = _WMX3ApiPython.InterruptData_swigregister
InterruptData_swigregister(InterruptData)

class EngineStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngineStatus, name)
    __repr__ = _swig_repr

    def GetData(self, engineStatus):
        return _WMX3ApiPython.EngineStatus_GetData(self, engineStatus)

    def SetData(self, engineStatus):
        return _WMX3ApiPython.EngineStatus_SetData(self, engineStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.EngineStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.EngineStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.EngineStatus_state_get, _WMX3ApiPython.EngineStatus_state_set)
    __swig_setmethods__["error"] = _WMX3ApiPython.EngineStatus_error_set
    __swig_getmethods__["error"] = _WMX3ApiPython.EngineStatus_error_get
    if _newclass:
        error = _swig_property(_WMX3ApiPython.EngineStatus_error_get, _WMX3ApiPython.EngineStatus_error_set)
    __swig_setmethods__["numOfInterrupts"] = _WMX3ApiPython.EngineStatus_numOfInterrupts_set
    __swig_getmethods__["numOfInterrupts"] = _WMX3ApiPython.EngineStatus_numOfInterrupts_get
    if _newclass:
        numOfInterrupts = _swig_property(_WMX3ApiPython.EngineStatus_numOfInterrupts_get, _WMX3ApiPython.EngineStatus_numOfInterrupts_set)
    __swig_setmethods__["interrupts"] = _WMX3ApiPython.EngineStatus_interrupts_set
    __swig_getmethods__["interrupts"] = _WMX3ApiPython.EngineStatus_interrupts_get
    if _newclass:
        interrupts = _swig_property(_WMX3ApiPython.EngineStatus_interrupts_get, _WMX3ApiPython.EngineStatus_interrupts_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EngineStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EngineStatus
    __del__ = lambda self: None
EngineStatus_swigregister = _WMX3ApiPython.EngineStatus_swigregister
EngineStatus_swigregister(EngineStatus)

class DeviceStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceStatistics, name)
    __repr__ = _swig_repr

    def GetData(self, deviceStatistics):
        return _WMX3ApiPython.DeviceStatistics_GetData(self, deviceStatistics)

    def SetData(self, deviceStatistics):
        return _WMX3ApiPython.DeviceStatistics_SetData(self, deviceStatistics)
    __swig_setmethods__["sysFailedCount"] = _WMX3ApiPython.DeviceStatistics_sysFailedCount_set
    __swig_getmethods__["sysFailedCount"] = _WMX3ApiPython.DeviceStatistics_sysFailedCount_get
    if _newclass:
        sysFailedCount = _swig_property(_WMX3ApiPython.DeviceStatistics_sysFailedCount_get, _WMX3ApiPython.DeviceStatistics_sysFailedCount_set)
    __swig_setmethods__["apiSuccessCount"] = _WMX3ApiPython.DeviceStatistics_apiSuccessCount_set
    __swig_getmethods__["apiSuccessCount"] = _WMX3ApiPython.DeviceStatistics_apiSuccessCount_get
    if _newclass:
        apiSuccessCount = _swig_property(_WMX3ApiPython.DeviceStatistics_apiSuccessCount_get, _WMX3ApiPython.DeviceStatistics_apiSuccessCount_set)
    __swig_setmethods__["apiFailedCount"] = _WMX3ApiPython.DeviceStatistics_apiFailedCount_set
    __swig_getmethods__["apiFailedCount"] = _WMX3ApiPython.DeviceStatistics_apiFailedCount_get
    if _newclass:
        apiFailedCount = _swig_property(_WMX3ApiPython.DeviceStatistics_apiFailedCount_get, _WMX3ApiPython.DeviceStatistics_apiFailedCount_set)
    __swig_setmethods__["curApiTime"] = _WMX3ApiPython.DeviceStatistics_curApiTime_set
    __swig_getmethods__["curApiTime"] = _WMX3ApiPython.DeviceStatistics_curApiTime_get
    if _newclass:
        curApiTime = _swig_property(_WMX3ApiPython.DeviceStatistics_curApiTime_get, _WMX3ApiPython.DeviceStatistics_curApiTime_set)
    __swig_setmethods__["avgApiTime"] = _WMX3ApiPython.DeviceStatistics_avgApiTime_set
    __swig_getmethods__["avgApiTime"] = _WMX3ApiPython.DeviceStatistics_avgApiTime_get
    if _newclass:
        avgApiTime = _swig_property(_WMX3ApiPython.DeviceStatistics_avgApiTime_get, _WMX3ApiPython.DeviceStatistics_avgApiTime_set)
    __swig_setmethods__["minApiTime"] = _WMX3ApiPython.DeviceStatistics_minApiTime_set
    __swig_getmethods__["minApiTime"] = _WMX3ApiPython.DeviceStatistics_minApiTime_get
    if _newclass:
        minApiTime = _swig_property(_WMX3ApiPython.DeviceStatistics_minApiTime_get, _WMX3ApiPython.DeviceStatistics_minApiTime_set)
    __swig_setmethods__["maxApiTime"] = _WMX3ApiPython.DeviceStatistics_maxApiTime_set
    __swig_getmethods__["maxApiTime"] = _WMX3ApiPython.DeviceStatistics_maxApiTime_get
    if _newclass:
        maxApiTime = _swig_property(_WMX3ApiPython.DeviceStatistics_maxApiTime_get, _WMX3ApiPython.DeviceStatistics_maxApiTime_set)
    __swig_setmethods__["sumApiTime"] = _WMX3ApiPython.DeviceStatistics_sumApiTime_set
    __swig_getmethods__["sumApiTime"] = _WMX3ApiPython.DeviceStatistics_sumApiTime_get
    if _newclass:
        sumApiTime = _swig_property(_WMX3ApiPython.DeviceStatistics_sumApiTime_get, _WMX3ApiPython.DeviceStatistics_sumApiTime_set)
    __swig_setmethods__["rtCount"] = _WMX3ApiPython.DeviceStatistics_rtCount_set
    __swig_getmethods__["rtCount"] = _WMX3ApiPython.DeviceStatistics_rtCount_get
    if _newclass:
        rtCount = _swig_property(_WMX3ApiPython.DeviceStatistics_rtCount_get, _WMX3ApiPython.DeviceStatistics_rtCount_set)
    __swig_setmethods__["curRtTime"] = _WMX3ApiPython.DeviceStatistics_curRtTime_set
    __swig_getmethods__["curRtTime"] = _WMX3ApiPython.DeviceStatistics_curRtTime_get
    if _newclass:
        curRtTime = _swig_property(_WMX3ApiPython.DeviceStatistics_curRtTime_get, _WMX3ApiPython.DeviceStatistics_curRtTime_set)
    __swig_setmethods__["avgRtTime"] = _WMX3ApiPython.DeviceStatistics_avgRtTime_set
    __swig_getmethods__["avgRtTime"] = _WMX3ApiPython.DeviceStatistics_avgRtTime_get
    if _newclass:
        avgRtTime = _swig_property(_WMX3ApiPython.DeviceStatistics_avgRtTime_get, _WMX3ApiPython.DeviceStatistics_avgRtTime_set)
    __swig_setmethods__["minRtTime"] = _WMX3ApiPython.DeviceStatistics_minRtTime_set
    __swig_getmethods__["minRtTime"] = _WMX3ApiPython.DeviceStatistics_minRtTime_get
    if _newclass:
        minRtTime = _swig_property(_WMX3ApiPython.DeviceStatistics_minRtTime_get, _WMX3ApiPython.DeviceStatistics_minRtTime_set)
    __swig_setmethods__["maxRtTime"] = _WMX3ApiPython.DeviceStatistics_maxRtTime_set
    __swig_getmethods__["maxRtTime"] = _WMX3ApiPython.DeviceStatistics_maxRtTime_get
    if _newclass:
        maxRtTime = _swig_property(_WMX3ApiPython.DeviceStatistics_maxRtTime_get, _WMX3ApiPython.DeviceStatistics_maxRtTime_set)
    __swig_setmethods__["sumRtTime"] = _WMX3ApiPython.DeviceStatistics_sumRtTime_set
    __swig_getmethods__["sumRtTime"] = _WMX3ApiPython.DeviceStatistics_sumRtTime_get
    if _newclass:
        sumRtTime = _swig_property(_WMX3ApiPython.DeviceStatistics_sumRtTime_get, _WMX3ApiPython.DeviceStatistics_sumRtTime_set)
    __swig_setmethods__["curFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_curFuncProcTime_set
    __swig_getmethods__["curFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_curFuncProcTime_get
    if _newclass:
        curFuncProcTime = _swig_property(_WMX3ApiPython.DeviceStatistics_curFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_curFuncProcTime_set)
    __swig_setmethods__["avgFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_avgFuncProcTime_set
    __swig_getmethods__["avgFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_avgFuncProcTime_get
    if _newclass:
        avgFuncProcTime = _swig_property(_WMX3ApiPython.DeviceStatistics_avgFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_avgFuncProcTime_set)
    __swig_setmethods__["minFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_minFuncProcTime_set
    __swig_getmethods__["minFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_minFuncProcTime_get
    if _newclass:
        minFuncProcTime = _swig_property(_WMX3ApiPython.DeviceStatistics_minFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_minFuncProcTime_set)
    __swig_setmethods__["maxFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_maxFuncProcTime_set
    __swig_getmethods__["maxFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_maxFuncProcTime_get
    if _newclass:
        maxFuncProcTime = _swig_property(_WMX3ApiPython.DeviceStatistics_maxFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_maxFuncProcTime_set)
    __swig_setmethods__["sumFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_sumFuncProcTime_set
    __swig_getmethods__["sumFuncProcTime"] = _WMX3ApiPython.DeviceStatistics_sumFuncProcTime_get
    if _newclass:
        sumFuncProcTime = _swig_property(_WMX3ApiPython.DeviceStatistics_sumFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_sumFuncProcTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DeviceStatistics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceStatistics
    __del__ = lambda self: None
DeviceStatistics_swigregister = _WMX3ApiPython.DeviceStatistics_swigregister
DeviceStatistics_swigregister(DeviceStatistics)

class ModuleSuspend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSuspend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSuspend, name)
    __repr__ = _swig_repr

    def GetData(self, moduleSuspend):
        return _WMX3ApiPython.ModuleSuspend_GetData(self, moduleSuspend)

    def SetData(self, moduleSuspend):
        return _WMX3ApiPython.ModuleSuspend_SetData(self, moduleSuspend)
    __swig_setmethods__["module"] = _WMX3ApiPython.ModuleSuspend_module_set
    __swig_getmethods__["module"] = _WMX3ApiPython.ModuleSuspend_module_get
    if _newclass:
        module = _swig_property(_WMX3ApiPython.ModuleSuspend_module_get, _WMX3ApiPython.ModuleSuspend_module_set)

    def GetModule(self, index):
        return _WMX3ApiPython.ModuleSuspend_GetModule(self, index)

    def SetModule(self, index, value):
        return _WMX3ApiPython.ModuleSuspend_SetModule(self, index, value)

    def __init__(self):
        this = _WMX3ApiPython.new_ModuleSuspend()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleSuspend
    __del__ = lambda self: None
ModuleSuspend_swigregister = _WMX3ApiPython.ModuleSuspend_swigregister
ModuleSuspend_swigregister(ModuleSuspend)

class EventInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventInput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetInputModuleId(self):
        return _WMX3ApiPython.EventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.EventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventInput
    __del__ = lambda self: None
EventInput_swigregister = _WMX3ApiPython.EventInput_swigregister
EventInput_swigregister(EventInput)

class EventOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventOutput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetOutputModuleId(self):
        return _WMX3ApiPython.EventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventOutput
    __del__ = lambda self: None
EventOutput_swigregister = _WMX3ApiPython.EventOutput_swigregister
EventOutput_swigregister(EventOutput)

class LogInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogInput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetModuleId(self):
        return _WMX3ApiPython.LogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.LogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.LogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.LogInput_GetLogInput(self)
    __swig_destroy__ = _WMX3ApiPython.delete_LogInput
    __del__ = lambda self: None
LogInput_swigregister = _WMX3ApiPython.LogInput_swigregister
LogInput_swigregister(LogInput)

class LogOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogOutput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _WMX3ApiPython.LogOutput_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.LogOutput_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.LogOutput_count_get, _WMX3ApiPython.LogOutput_count_set)
    __swig_setmethods__["overflowFlag"] = _WMX3ApiPython.LogOutput_overflowFlag_set
    __swig_getmethods__["overflowFlag"] = _WMX3ApiPython.LogOutput_overflowFlag_get
    if _newclass:
        overflowFlag = _swig_property(_WMX3ApiPython.LogOutput_overflowFlag_get, _WMX3ApiPython.LogOutput_overflowFlag_set)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.LogOutput_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.LogOutput_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.LogOutput_cycleCounter_get, _WMX3ApiPython.LogOutput_cycleCounter_set)

    def SetCycleCounter(self, index, value):
        return _WMX3ApiPython.LogOutput_SetCycleCounter(self, index, value)

    def GetCycleCounter(self, index):
        return _WMX3ApiPython.LogOutput_GetCycleCounter(self, index)

    def GetModuleId(self):
        return _WMX3ApiPython.LogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.LogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.LogOutput_SetLogOutput(self, src)
    __swig_destroy__ = _WMX3ApiPython.delete_LogOutput
    __del__ = lambda self: None
LogOutput_swigregister = _WMX3ApiPython.LogOutput_swigregister
LogOutput_swigregister(LogOutput)

class WMX3Api(_object):
    """WMX3Engine.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WMX3Api, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WMX3Api, name)
    __repr__ = _swig_repr

    def __init__(self):
        """WMX3Engine.rtdll Ver.3.5.0.0 is required to use."""
        this = _WMX3ApiPython.new_WMX3Api()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_WMX3Api
    __del__ = lambda self: None

    def GetWMX3ApiHand(self):
        return _WMX3ApiPython.WMX3Api_GetWMX3ApiHand(self)
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.WMX3Api_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.WMX3Api_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.WMX3Api_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.WMX3Api_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.WMX3Api_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.WMX3Api_GetLibVersion
    if _newclass:
        GetIMDllVersion = staticmethod(_WMX3ApiPython.WMX3Api_GetIMDllVersion)
    else:
        GetIMDllVersion = _WMX3ApiPython.WMX3Api_GetIMDllVersion
    if _newclass:
        PrintToFile = staticmethod(_WMX3ApiPython.WMX3Api_PrintToFile)
    else:
        PrintToFile = _WMX3ApiPython.WMX3Api_PrintToFile
    if _newclass:
        PrintToFileIfExist = staticmethod(_WMX3ApiPython.WMX3Api_PrintToFileIfExist)
    else:
        PrintToFileIfExist = _WMX3ApiPython.WMX3Api_PrintToFileIfExist
    if _newclass:
        GetStdOutStr = staticmethod(_WMX3ApiPython.WMX3Api_GetStdOutStr)
    else:
        GetStdOutStr = _WMX3ApiPython.WMX3Api_GetStdOutStr
    if _newclass:
        GetStdOutDataSize = staticmethod(_WMX3ApiPython.WMX3Api_GetStdOutDataSize)
    else:
        GetStdOutDataSize = _WMX3ApiPython.WMX3Api_GetStdOutDataSize
    if _newclass:
        ClearStdOut = staticmethod(_WMX3ApiPython.WMX3Api_ClearStdOut)
    else:
        ClearStdOut = _WMX3ApiPython.WMX3Api_ClearStdOut
    if _newclass:
        ReleaseStdOut = staticmethod(_WMX3ApiPython.WMX3Api_ReleaseStdOut)
    else:
        ReleaseStdOut = _WMX3ApiPython.WMX3Api_ReleaseStdOut

    def IsDeviceValid(self):
        return _WMX3ApiPython.WMX3Api_IsDeviceValid(self)

    def StartEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_StartEngine(self, *args)

    def RestartEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_RestartEngine(self, *args)

    def StopEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_StopEngine(self, *args)

    def CreateDevice(self, *args):
        return _WMX3ApiPython.WMX3Api_CreateDevice(self, *args)

    def CloseDevice(self):
        return _WMX3ApiPython.WMX3Api_CloseDevice(self)

    def GetDeviceID(self):
        dataPtr = intp()
        ret = _WMX3ApiPython.WMX3Api_GetDeviceID(self, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def AutoQuitWithoutActiveDev(self, quit):
        return _WMX3ApiPython.WMX3Api_AutoQuitWithoutActiveDev(self, quit)

    def SetWatchdog(self, *args):
        return _WMX3ApiPython.WMX3Api_SetWatchdog(self, *args)

    def GetWatchdog(self):
        wdPtr = uintp()
        wdPtrCount = uintp()
        ret = _WMX3ApiPython.WMX3Api_GetWatchdog(self, wdPtr, wdPtrCount)
        if ret == 0:
            return ret, wdPtr.value(), wdPtrCount.value()
        else:
            return ret, 0, 0



    def ResetWatchdogTimer(self):
        return _WMX3ApiPython.WMX3Api_ResetWatchdogTimer(self)

    def SetStatistic(self, enable):
        return _WMX3ApiPython.WMX3Api_SetStatistic(self, enable)

    def GetStatistic(self):
        dataPtr = DeviceStatistics()
        ret = _WMX3ApiPython.WMX3Api_GetStatistic(self, dataPtr)
        return ret, dataPtr



    def SetInterruptId(self, interruptId):
        return _WMX3ApiPython.WMX3Api_SetInterruptId(self, interruptId)

    def GetInterruptId(self):
        interruptPtr = uintp()
        ret = _WMX3ApiPython.WMX3Api_GetInterruptId(self, interruptPtr)
        if ret == 0:
            return ret, interruptPtr.value()
        else:
            return ret, 0



    def StartCommunication(self, *args):
        return _WMX3ApiPython.WMX3Api_StartCommunication(self, *args)

    def StopCommunication(self, *args):
        return _WMX3ApiPython.WMX3Api_StopCommunication(self, *args)

    def GetModulesInfo(self):
        dataPtr = ModulesInfo()
        ret = _WMX3ApiPython.WMX3Api_GetModulesInfo(self, dataPtr)
        return ret, dataPtr



    def GetModuleInfo(self, moduleId):
        dataPtr = ModuleInfo()
        ret = _WMX3ApiPython.WMX3Api_GetModuleInfo(self, moduleId, dataPtr)
        return ret, dataPtr



    def GetEngineStatus(self):
        dataPtr = EngineStatus()
        ret = _WMX3ApiPython.WMX3Api_GetEngineStatus(self, dataPtr)
        return ret, dataPtr



    def GetAllDevices(self):
        dataPtr = DevicesInfo()
        ret = _WMX3ApiPython.WMX3Api_GetAllDevices(self, dataPtr)
        return ret, dataPtr



    def SetDeviceName(self, name):
        return _WMX3ApiPython.WMX3Api_SetDeviceName(self, name)

    def GetDeviceName(self):
        retPtr = intp()
        name = _WMX3ApiPython.WMX3Api_GetDeviceName(self, retPtr)
        return retPtr.value(), name



    def SetDeviceWaitEvent(self, errCode):
        return _WMX3ApiPython.WMX3Api_SetDeviceWaitEvent(self, errCode)

    def ResetDeviceWaitEvent(self):
        return _WMX3ApiPython.WMX3Api_ResetDeviceWaitEvent(self)

    def WaitForDeviceWaitEvent(self, waitTime):
        errCodePtr = intp()
        ret = _WMX3ApiPython.WMX3Api_WaitForDeviceWaitEvent(self, waitTime, errCodePtr)
        return ret, waitTime, errCodePtr



    def SetModuleSuspend(self, suspend):
        return _WMX3ApiPython.WMX3Api_SetModuleSuspend(self, suspend)

    def GetModuleSuspend(self):
        dataPtr = ModuleSuspend()
        ret = _WMX3ApiPython.WMX3Api_GetModuleSuspend(self, dataPtr)
        return ret, dataPtr



    def AbortModuleSuspend(self):
        return _WMX3ApiPython.WMX3Api_AbortModuleSuspend(self)

    def SleepAtEngine(self, microSecond):
        return _WMX3ApiPython.WMX3Api_SleepAtEngine(self, microSecond)

    def PrintToServerConsole(self, format):
        return _WMX3ApiPython.WMX3Api_PrintToServerConsole(self, format)

    def RecordWindowsUpdates(self, *args):
        return _WMX3ApiPython.WMX3Api_RecordWindowsUpdates(self, *args)

    def CompareWindowsUpdates(self, *args):
        return _WMX3ApiPython.WMX3Api_CompareWindowsUpdates(self, *args)
WMX3Api_swigregister = _WMX3ApiPython.WMX3Api_swigregister
WMX3Api_swigregister(WMX3Api)

def WMX3Api_ErrorToString(errCode):
    return _WMX3ApiPython.WMX3Api_ErrorToString(errCode)
WMX3Api_ErrorToString = _WMX3ApiPython.WMX3Api_ErrorToString

def WMX3Api_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.WMX3Api_ApiLogToString(pLogData, logDataSize)
WMX3Api_ApiLogToString = _WMX3ApiPython.WMX3Api_ApiLogToString

def WMX3Api_GetLibVersion():
    return _WMX3ApiPython.WMX3Api_GetLibVersion()
WMX3Api_GetLibVersion = _WMX3ApiPython.WMX3Api_GetLibVersion

def WMX3Api_GetIMDllVersion():
    return _WMX3ApiPython.WMX3Api_GetIMDllVersion()
WMX3Api_GetIMDllVersion = _WMX3ApiPython.WMX3Api_GetIMDllVersion

def WMX3Api_PrintToFile(*args):
    return _WMX3ApiPython.WMX3Api_PrintToFile(*args)
WMX3Api_PrintToFile = _WMX3ApiPython.WMX3Api_PrintToFile

def WMX3Api_PrintToFileIfExist(*args):
    return _WMX3ApiPython.WMX3Api_PrintToFileIfExist(*args)
WMX3Api_PrintToFileIfExist = _WMX3ApiPython.WMX3Api_PrintToFileIfExist

def WMX3Api_GetStdOutStr():
    return _WMX3ApiPython.WMX3Api_GetStdOutStr()
WMX3Api_GetStdOutStr = _WMX3ApiPython.WMX3Api_GetStdOutStr

def WMX3Api_GetStdOutDataSize():
    return _WMX3ApiPython.WMX3Api_GetStdOutDataSize()
WMX3Api_GetStdOutDataSize = _WMX3ApiPython.WMX3Api_GetStdOutDataSize

def WMX3Api_ClearStdOut():
    return _WMX3ApiPython.WMX3Api_ClearStdOut()
WMX3Api_ClearStdOut = _WMX3ApiPython.WMX3Api_ClearStdOut

def WMX3Api_ReleaseStdOut():
    return _WMX3ApiPython.WMX3Api_ReleaseStdOut()
WMX3Api_ReleaseStdOut = _WMX3ApiPython.WMX3Api_ReleaseStdOut

class CoreMotionErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionErrorCode, name)
    __repr__ = _swig_repr
    ParameterSettingsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ParameterSettingsInvalid
    ServoOnError = _WMX3ApiPython.CoreMotionErrorCode_ServoOnError
    SyncAxisSingleTurnMismatch = _WMX3ApiPython.CoreMotionErrorCode_SyncAxisSingleTurnMismatch
    PositionNotPassed = _WMX3ApiPython.CoreMotionErrorCode_PositionNotPassed
    NotPausedDuringHoming = _WMX3ApiPython.CoreMotionErrorCode_NotPausedDuringHoming
    OpenWaitEventError = _WMX3ApiPython.CoreMotionErrorCode_OpenWaitEventError
    ParameterFileParseError = _WMX3ApiPython.CoreMotionErrorCode_ParameterFileParseError
    SyncGroupIDOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupIDOutOfRange
    SyncGroupMasterAxisUndefined = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupMasterAxisUndefined
    ReferenceAxisOfActiveCompensation = _WMX3ApiPython.CoreMotionErrorCode_ReferenceAxisOfActiveCompensation
    CurrentEmergencyStopLevelIsHigher = _WMX3ApiPython.CoreMotionErrorCode_CurrentEmergencyStopLevelIsHigher
    AcyclicStatusError = _WMX3ApiPython.CoreMotionErrorCode_AcyclicStatusError
    AxisExecutingPhaseShift = _WMX3ApiPython.CoreMotionErrorCode_AxisExecutingPhaseShift
    AxisSettingSyncGearRatio = _WMX3ApiPython.CoreMotionErrorCode_AxisSettingSyncGearRatio
    NotSynchronizedToSpecifiedMasterAxis = _WMX3ApiPython.CoreMotionErrorCode_NotSynchronizedToSpecifiedMasterAxis
    OpenWaitSharedMemoryError = _WMX3ApiPython.CoreMotionErrorCode_OpenWaitSharedMemoryError
    WaitEngineError = _WMX3ApiPython.CoreMotionErrorCode_WaitEngineError
    IsSyncSlave = _WMX3ApiPython.CoreMotionErrorCode_IsSyncSlave
    IsSyncMaster = _WMX3ApiPython.CoreMotionErrorCode_IsSyncMaster
    IsCombineSyncMaster = _WMX3ApiPython.CoreMotionErrorCode_IsCombineSyncMaster
    NotServoOn = _WMX3ApiPython.CoreMotionErrorCode_NotServoOn
    NotIdleOrPosState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrPosState
    NotPosState = _WMX3ApiPython.CoreMotionErrorCode_NotPosState
    NotIdleOrJogState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrJogState
    NotIdleOrVelocityState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrVelocityState
    NotIdleOrIntplState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrIntplState
    NotIdleOrPosOrJogState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrPosOrJogState
    NotPosOrJogOrVelocityState = _WMX3ApiPython.CoreMotionErrorCode_NotPosOrJogOrVelocityState
    NotJogState = _WMX3ApiPython.CoreMotionErrorCode_NotJogState
    NotTorqueState = _WMX3ApiPython.CoreMotionErrorCode_NotTorqueState
    NotIdleOrTorqueState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrTorqueState
    NotIdleOrSyncState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrSyncState
    NotECAMState = _WMX3ApiPython.CoreMotionErrorCode_NotECAMState
    NotDancerControlState = _WMX3ApiPython.CoreMotionErrorCode_NotDancerControlState
    NotIdleOrDancerControlState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrDancerControlState
    NotPosMode = _WMX3ApiPython.CoreMotionErrorCode_NotPosMode
    NotVelocityMode = _WMX3ApiPython.CoreMotionErrorCode_NotVelocityMode
    NotTrqMode = _WMX3ApiPython.CoreMotionErrorCode_NotTrqMode
    NotPosOrVelocityMode = _WMX3ApiPython.CoreMotionErrorCode_NotPosOrVelocityMode
    NotSyncSlave = _WMX3ApiPython.CoreMotionErrorCode_NotSyncSlave
    NotHomeState = _WMX3ApiPython.CoreMotionErrorCode_NotHomeState
    AxisNotPaused = _WMX3ApiPython.CoreMotionErrorCode_AxisNotPaused
    AxisArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AxisArgumentOutOfRange
    ProfileArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_ProfileArgumentOutOfRange
    PositionArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PositionArgumentOutOfRange
    VelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_VelocityArgumentOutOfRange
    AccArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AccArgumentOutOfRange
    DecArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_DecArgumentOutOfRange
    JerkAccArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkAccArgumentOutOfRange
    JerkDecArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkDecArgumentOutOfRange
    JerkAccRatioArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkAccRatioArgumentOutOfRange
    JerkDecRatioArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkDecRatioArgumentOutOfRange
    StartingVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_StartingVelocityArgumentOutOfRange
    EndVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_EndVelocityArgumentOutOfRange
    SecondVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SecondVelocityArgumentOutOfRange
    RunTimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RunTimeArgumentOutOfRange
    TimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TimeArgumentOutOfRange
    TriggerTypeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerTypeArgumentOutOfRange
    TriggerAxisArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerAxisArgumentOutOfRange
    TriggerValueArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerValueArgumentOutOfRange
    TriggerTypeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_TriggerTypeNotSupported
    AccDecCouldNotBeCalculated = _WMX3ApiPython.CoreMotionErrorCode_AccDecCouldNotBeCalculated
    NoFreeVirtualAxis = _WMX3ApiPython.CoreMotionErrorCode_NoFreeVirtualAxis
    NoFreeVirtualAxisAddlData = _WMX3ApiPython.CoreMotionErrorCode_NoFreeVirtualAxisAddlData
    AxisNotSingleTurn = _WMX3ApiPython.CoreMotionErrorCode_AxisNotSingleTurn
    AxisIsSingleTurn = _WMX3ApiPython.CoreMotionErrorCode_AxisIsSingleTurn
    ProfileErrorOnTargetPos = _WMX3ApiPython.CoreMotionErrorCode_ProfileErrorOnTargetPos
    ProfileUsageError = _WMX3ApiPython.CoreMotionErrorCode_ProfileUsageError
    ProfileAccelerationIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileAccelerationIsInvalid
    ProfileDecelerationIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileDecelerationIsInvalid
    ProfileJerkIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileJerkIsInvalid
    ProfileVelocityIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileVelocityIsInvalid
    ProfileNullCalculation = _WMX3ApiPython.CoreMotionErrorCode_ProfileNullCalculation
    ProfileNoMotion = _WMX3ApiPython.CoreMotionErrorCode_ProfileNoMotion
    ProfileUserRangeIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileUserRangeIsInvalid
    OtherProfileError = _WMX3ApiPython.CoreMotionErrorCode_OtherProfileError
    ProfileUnknownError = _WMX3ApiPython.CoreMotionErrorCode_ProfileUnknownError
    ProfileSetupFailed = _WMX3ApiPython.CoreMotionErrorCode_ProfileSetupFailed
    ProfileCancelOvertravel = _WMX3ApiPython.CoreMotionErrorCode_ProfileCancelOvertravel
    PointCountOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PointCountOutOfRange
    WaitTimeout = _WMX3ApiPython.CoreMotionErrorCode_WaitTimeout
    ProfileTypeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_ProfileTypeNotSupported
    AxisMismatch = _WMX3ApiPython.CoreMotionErrorCode_AxisMismatch
    NoRotationalMotion = _WMX3ApiPython.CoreMotionErrorCode_NoRotationalMotion
    DeviceIDError = _WMX3ApiPython.CoreMotionErrorCode_DeviceIDError
    InvalidAxis = _WMX3ApiPython.CoreMotionErrorCode_InvalidAxis
    ChannelExecutingCommands = _WMX3ApiPython.CoreMotionErrorCode_ChannelExecutingCommands
    ChannelIsNotExecutingCommands = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsNotExecutingCommands
    ChannelNotEnoughSpace = _WMX3ApiPython.CoreMotionErrorCode_ChannelNotEnoughSpace
    ChannelIsStopping = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsStopping
    ChannelIsNotStopped = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsNotStopped
    ChannelBufferMemoryNotAllocated = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryNotAllocated
    ChannelBufferMemoryAlreadyAllocated = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryAlreadyAllocated
    ChannelBufferMemoryFailedToAllocate = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryFailedToAllocate
    ProcessingOverride = _WMX3ApiPython.CoreMotionErrorCode_ProcessingOverride
    CircularInterpolationArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationArgumentOutOfRange
    EmergencyStopSignalOn = _WMX3ApiPython.CoreMotionErrorCode_EmergencyStopSignalOn
    SyncGroupDoesNotContainAxis = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupDoesNotContainAxis
    SyncGroupParameterOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupParameterOutOfRange
    CurrentAxisCommandModeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_CurrentAxisCommandModeNotSupported
    MasterAxisOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MasterAxisOutOfRange
    SlaveAxisOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SlaveAxisOutOfRange
    SlaveAxisCountOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SlaveAxisCountOutOfRange
    EnabledArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_EnabledArgumentOutOfRange
    MovingAverageTimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MovingAverageTimeArgumentOutOfRange
    NumEventsOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_NumEventsOutOfRange
    RegisterNumberOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RegisterNumberOutOfRange
    SyncGearRatioOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGearRatioOutOfRange
    PosChangePerCycleOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PosChangePerCycleOutOfRange
    MaxTorqueLimitOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MaxTorqueLimitOutOfRange
    TorqueArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TorqueArgumentOutOfRange
    MaxMotorSpeedOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MaxMotorSpeedOutOfRange
    RampCycleTimeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RampCycleTimeOutOfRange
    RampRateOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RampRateOutOfRange
    CircularInterpolationTypeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationTypeOutOfRange
    CircularInterpolationCenterPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationCenterPosTooCloseToInitialPos
    CircularInterpolationEndPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationEndPosTooCloseToInitialPos
    CircularInterpolationThroughPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationThroughPosTooCloseToInitialPos
    CircularInterpolationThroughPosTooCloseToEndPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationThroughPosTooCloseToEndPos
    CircularInterpolationPathGenerationError = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationPathGenerationError
    HelicalInterpolationTypeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationTypeOutOfRange
    HelicalInterpolationCenterPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationCenterPosTooCloseToInitialPos
    HelicalInterpolationPathGenerationError = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationPathGenerationError
    AxisCommandModeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AxisCommandModeOutOfRange
    ZPulseDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_ZPulseDetectionUnsupported
    TouchProbeDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_TouchProbeDetectionUnsupported
    HomeSwitchDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_HomeSwitchDetectionUnsupported
    LimitSwitchDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_LimitSwitchDetectionUnsupported
    PointTimeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PointTimeOutOfRange
    PointTimeNotIncreasing = _WMX3ApiPython.CoreMotionErrorCode_PointTimeNotIncreasing

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionErrorCode
    __del__ = lambda self: None
CoreMotionErrorCode_swigregister = _WMX3ApiPython.CoreMotionErrorCode_swigregister
CoreMotionErrorCode_swigregister(CoreMotionErrorCode)

class CoreMotionAxisLogInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionAxisLogInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionAxisLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionAxisLogInput):
        return _WMX3ApiPython.CoreMotionAxisLogInput_SetData(self, pCoreMotionAxisLogInput)

    def GetData(self, pCoreMotionAxisLogInput):
        return _WMX3ApiPython.CoreMotionAxisLogInput_GetData(self, pCoreMotionAxisLogInput)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionAxisLogInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisLogInput_servoOn_set
    __swig_getmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisLogInput_servoOn_get
    if _newclass:
        servoOn = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_servoOn_get, _WMX3ApiPython.CoreMotionAxisLogInput_servoOn_set)
    __swig_setmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_set
    __swig_getmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_get
    if _newclass:
        servoOffline = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_get, _WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_set)
    __swig_setmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarm_set
    __swig_getmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarm_get
    if _newclass:
        ampAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_ampAlarm_get, _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarm_set)
    __swig_setmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarmCode_set
    __swig_getmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarmCode_get
    if _newclass:
        ampAlarmCode = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_ampAlarmCode_get, _WMX3ApiPython.CoreMotionAxisLogInput_ampAlarmCode_set)
    __swig_setmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisLogInput_followingErrorAlarm_set
    __swig_getmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisLogInput_followingErrorAlarm_get
    if _newclass:
        followingErrorAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_followingErrorAlarm_get, _WMX3ApiPython.CoreMotionAxisLogInput_followingErrorAlarm_set)
    __swig_setmethods__["commandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandPos_set
    __swig_getmethods__["commandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandPos_get
    if _newclass:
        commandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_commandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandPos_set)
    __swig_setmethods__["feedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_set
    __swig_getmethods__["feedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_get
    if _newclass:
        feedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_set)
    __swig_setmethods__["compCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_set
    __swig_getmethods__["compCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_get
    if _newclass:
        compCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_set)
    __swig_setmethods__["compFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_set
    __swig_getmethods__["compFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_get
    if _newclass:
        compFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_set)
    __swig_setmethods__["encoderCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_set
    __swig_getmethods__["encoderCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_get
    if _newclass:
        encoderCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_set)
    __swig_setmethods__["encoderFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_set
    __swig_getmethods__["encoderFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_get
    if _newclass:
        encoderFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_set)
    __swig_setmethods__["commandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_set
    __swig_getmethods__["commandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_get
    if _newclass:
        commandVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_set)
    __swig_setmethods__["feedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_set
    __swig_getmethods__["feedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_get
    if _newclass:
        feedbackVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_set)
    __swig_setmethods__["encoderCommandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_set
    __swig_getmethods__["encoderCommandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_get
    if _newclass:
        encoderCommandVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_set)
    __swig_setmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_set
    __swig_getmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_get
    if _newclass:
        encoderFeedbackVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_set)
    __swig_setmethods__["commandTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_set
    __swig_getmethods__["commandTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_get
    if _newclass:
        commandTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_set)
    __swig_setmethods__["feedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_set
    __swig_getmethods__["feedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_get
    if _newclass:
        feedbackTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_set)
    __swig_setmethods__["encoderCommandTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_set
    __swig_getmethods__["encoderCommandTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_get
    if _newclass:
        encoderCommandTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_set)
    __swig_setmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_set
    __swig_getmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_get
    if _newclass:
        encoderFeedbackTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.CoreMotionAxisLogInput_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.CoreMotionAxisLogInput_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_followingError_get, _WMX3ApiPython.CoreMotionAxisLogInput_followingError_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_set)
    __swig_setmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_set
    __swig_getmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_get
    if _newclass:
        homeSwitch = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_set)
    __swig_setmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeDone_set
    __swig_getmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeDone_get
    if _newclass:
        homeDone = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_homeDone_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeDone_set)
    __swig_setmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeState_set
    __swig_getmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisLogInput_homeState_get
    if _newclass:
        homeState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_homeState_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeState_set)
    __swig_setmethods__["inPosFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_set
    __swig_getmethods__["inPosFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_get
    if _newclass:
        inPosFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_set)
    __swig_setmethods__["inPosFlag2"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_set
    __swig_getmethods__["inPosFlag2"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_get
    if _newclass:
        inPosFlag2 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_set)
    __swig_setmethods__["inPosFlag3"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_set
    __swig_getmethods__["inPosFlag3"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_get
    if _newclass:
        inPosFlag3 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_set)
    __swig_setmethods__["inPosFlag4"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_set
    __swig_getmethods__["inPosFlag4"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_get
    if _newclass:
        inPosFlag4 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_set)
    __swig_setmethods__["inPosFlag5"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_set
    __swig_getmethods__["inPosFlag5"] = _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_get
    if _newclass:
        inPosFlag5 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_set)
    __swig_setmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_set
    __swig_getmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_get
    if _newclass:
        commandDistributionEndFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_set)
    __swig_setmethods__["posSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_set
    __swig_getmethods__["posSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_get
    if _newclass:
        posSetFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_set)
    __swig_setmethods__["delayedPosSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_set
    __swig_getmethods__["delayedPosSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_get
    if _newclass:
        delayedPosSetFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_set)
    __swig_setmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_set
    __swig_getmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_get
    if _newclass:
        positiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_set)
    __swig_setmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_set
    __swig_getmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_get
    if _newclass:
        negativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_set)
    __swig_setmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_nearPositiveLS_set
    __swig_getmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_nearPositiveLS_get
    if _newclass:
        nearPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_nearPositiveLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_nearPositiveLS_set)
    __swig_setmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_nearNegativeLS_set
    __swig_getmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_nearNegativeLS_get
    if _newclass:
        nearNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_nearNegativeLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_nearNegativeLS_set)
    __swig_setmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_externalPositiveLS_set
    __swig_getmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_externalPositiveLS_get
    if _newclass:
        externalPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_externalPositiveLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_externalPositiveLS_set)
    __swig_setmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_externalNegativeLS_set
    __swig_getmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogInput_externalNegativeLS_get
    if _newclass:
        externalNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_externalNegativeLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_externalNegativeLS_set)
    __swig_setmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogInput_positiveSoftLimit_set
    __swig_getmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogInput_positiveSoftLimit_get
    if _newclass:
        positiveSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_positiveSoftLimit_get, _WMX3ApiPython.CoreMotionAxisLogInput_positiveSoftLimit_set)
    __swig_setmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogInput_negativeSoftLimit_set
    __swig_getmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogInput_negativeSoftLimit_get
    if _newclass:
        negativeSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_negativeSoftLimit_get, _WMX3ApiPython.CoreMotionAxisLogInput_negativeSoftLimit_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisLogInput_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisLogInput_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_opState_get, _WMX3ApiPython.CoreMotionAxisLogInput_opState_set)
    __swig_setmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_set
    __swig_getmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_get
    if _newclass:
        detailOpState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_get, _WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_set)
    __swig_setmethods__["userOffsetCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_set
    __swig_getmethods__["userOffsetCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_get
    if _newclass:
        userOffsetCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_set)
    __swig_setmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_set
    __swig_getmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_get
    if _newclass:
        userOffsetFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_set)
    __swig_setmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_set
    __swig_getmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_get
    if _newclass:
        axisCommandModeFeedback = _swig_property(_WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisLogInput
    __del__ = lambda self: None
CoreMotionAxisLogInput_swigregister = _WMX3ApiPython.CoreMotionAxisLogInput_swigregister
CoreMotionAxisLogInput_swigregister(CoreMotionAxisLogInput)

class CoreMotionLogInput(LogInput):
    __swig_setmethods__ = {}
    for _s in [LogInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionLogInput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionLogInput):
        return _WMX3ApiPython.CoreMotionLogInput_SetData(self, pCoreMotionLogInput)

    def GetData(self, pCoreMotionLogInput):
        return _WMX3ApiPython.CoreMotionLogInput_GetData(self, pCoreMotionLogInput)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionLogInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.CoreMotionLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.CoreMotionLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.CoreMotionLogInput_GetLogInput(self)
    __swig_setmethods__["axisSelection"] = _WMX3ApiPython.CoreMotionLogInput_axisSelection_set
    __swig_getmethods__["axisSelection"] = _WMX3ApiPython.CoreMotionLogInput_axisSelection_get
    if _newclass:
        axisSelection = _swig_property(_WMX3ApiPython.CoreMotionLogInput_axisSelection_get, _WMX3ApiPython.CoreMotionLogInput_axisSelection_set)
    __swig_setmethods__["axisOptions"] = _WMX3ApiPython.CoreMotionLogInput_axisOptions_set
    __swig_getmethods__["axisOptions"] = _WMX3ApiPython.CoreMotionLogInput_axisOptions_get
    if _newclass:
        axisOptions = _swig_property(_WMX3ApiPython.CoreMotionLogInput_axisOptions_get, _WMX3ApiPython.CoreMotionLogInput_axisOptions_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionLogInput
    __del__ = lambda self: None
CoreMotionLogInput_swigregister = _WMX3ApiPython.CoreMotionLogInput_swigregister
CoreMotionLogInput_swigregister(CoreMotionLogInput)

class CoreMotionAxisLogOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionAxisLogOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionAxisLogOutput, name)
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionAxisLogOutput):
        return _WMX3ApiPython.CoreMotionAxisLogOutput_SetData(self, pCoreMotionAxisLogOutput)

    def GetData(self, pCoreMotionAxisLogOutput):
        return _WMX3ApiPython.CoreMotionAxisLogOutput_GetData(self, pCoreMotionAxisLogOutput)
    __swig_setmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_set
    __swig_getmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_get
    if _newclass:
        servoOn = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_get, _WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_set)
    __swig_setmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_set
    __swig_getmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_get
    if _newclass:
        servoOffline = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_get, _WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_set)
    __swig_setmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarm_set
    __swig_getmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarm_get
    if _newclass:
        ampAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarm_get, _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarm_set)
    __swig_setmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarmCode_set
    __swig_getmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarmCode_get
    if _newclass:
        ampAlarmCode = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarmCode_get, _WMX3ApiPython.CoreMotionAxisLogOutput_ampAlarmCode_set)
    __swig_setmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisLogOutput_followingErrorAlarm_set
    __swig_getmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisLogOutput_followingErrorAlarm_get
    if _newclass:
        followingErrorAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_followingErrorAlarm_get, _WMX3ApiPython.CoreMotionAxisLogOutput_followingErrorAlarm_set)
    __swig_setmethods__["commandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_set
    __swig_getmethods__["commandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_get
    if _newclass:
        commandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_set)
    __swig_setmethods__["feedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_set
    __swig_getmethods__["feedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_get
    if _newclass:
        feedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_set)
    __swig_setmethods__["compCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_set
    __swig_getmethods__["compCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_get
    if _newclass:
        compCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_set)
    __swig_setmethods__["compFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_set
    __swig_getmethods__["compFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_get
    if _newclass:
        compFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_set)
    __swig_setmethods__["encoderCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_set
    __swig_getmethods__["encoderCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_get
    if _newclass:
        encoderCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_set)
    __swig_setmethods__["encoderFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_set
    __swig_getmethods__["encoderFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_get
    if _newclass:
        encoderFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_set)
    __swig_setmethods__["commandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_set
    __swig_getmethods__["commandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_get
    if _newclass:
        commandVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_set)
    __swig_setmethods__["feedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_set
    __swig_getmethods__["feedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_get
    if _newclass:
        feedbackVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_set)
    __swig_setmethods__["encoderCommandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_set
    __swig_getmethods__["encoderCommandVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_get
    if _newclass:
        encoderCommandVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_set)
    __swig_setmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_set
    __swig_getmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_get
    if _newclass:
        encoderFeedbackVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_set)
    __swig_setmethods__["commandTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_set
    __swig_getmethods__["commandTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_get
    if _newclass:
        commandTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_set)
    __swig_setmethods__["feedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_set
    __swig_getmethods__["feedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_get
    if _newclass:
        feedbackTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_set)
    __swig_setmethods__["encoderCommandTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_set
    __swig_getmethods__["encoderCommandTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_get
    if _newclass:
        encoderCommandTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_set)
    __swig_setmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_set
    __swig_getmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_get
    if _newclass:
        encoderFeedbackTrq = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.CoreMotionAxisLogOutput_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.CoreMotionAxisLogOutput_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_followingError_get, _WMX3ApiPython.CoreMotionAxisLogOutput_followingError_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_set)
    __swig_setmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_set
    __swig_getmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_get
    if _newclass:
        homeSwitch = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_set)
    __swig_setmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeDone_set
    __swig_getmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeDone_get
    if _newclass:
        homeDone = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeDone_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeDone_set)
    __swig_setmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeState_set
    __swig_getmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_homeState_get
    if _newclass:
        homeState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeState_set)
    __swig_setmethods__["inPosFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_set
    __swig_getmethods__["inPosFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_get
    if _newclass:
        inPosFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_set)
    __swig_setmethods__["inPosFlag2"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_set
    __swig_getmethods__["inPosFlag2"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_get
    if _newclass:
        inPosFlag2 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_set)
    __swig_setmethods__["inPosFlag3"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_set
    __swig_getmethods__["inPosFlag3"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_get
    if _newclass:
        inPosFlag3 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_set)
    __swig_setmethods__["inPosFlag4"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_set
    __swig_getmethods__["inPosFlag4"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_get
    if _newclass:
        inPosFlag4 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_set)
    __swig_setmethods__["inPosFlag5"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_set
    __swig_getmethods__["inPosFlag5"] = _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_get
    if _newclass:
        inPosFlag5 = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_set)
    __swig_setmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_set
    __swig_getmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_get
    if _newclass:
        commandDistributionEndFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_set)
    __swig_setmethods__["posSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_set
    __swig_getmethods__["posSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_get
    if _newclass:
        posSetFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_set)
    __swig_setmethods__["delayedPosSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_set
    __swig_getmethods__["delayedPosSetFlag"] = _WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_get
    if _newclass:
        delayedPosSetFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_set)
    __swig_setmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_set
    __swig_getmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_get
    if _newclass:
        positiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_set)
    __swig_setmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_set
    __swig_getmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_get
    if _newclass:
        negativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_set)
    __swig_setmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_nearPositiveLS_set
    __swig_getmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_nearPositiveLS_get
    if _newclass:
        nearPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_nearPositiveLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_nearPositiveLS_set)
    __swig_setmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_nearNegativeLS_set
    __swig_getmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_nearNegativeLS_get
    if _newclass:
        nearNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_nearNegativeLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_nearNegativeLS_set)
    __swig_setmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_externalPositiveLS_set
    __swig_getmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_externalPositiveLS_get
    if _newclass:
        externalPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_externalPositiveLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_externalPositiveLS_set)
    __swig_setmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_externalNegativeLS_set
    __swig_getmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisLogOutput_externalNegativeLS_get
    if _newclass:
        externalNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_externalNegativeLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_externalNegativeLS_set)
    __swig_setmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogOutput_positiveSoftLimit_set
    __swig_getmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogOutput_positiveSoftLimit_get
    if _newclass:
        positiveSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_positiveSoftLimit_get, _WMX3ApiPython.CoreMotionAxisLogOutput_positiveSoftLimit_set)
    __swig_setmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogOutput_negativeSoftLimit_set
    __swig_getmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisLogOutput_negativeSoftLimit_get
    if _newclass:
        negativeSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_negativeSoftLimit_get, _WMX3ApiPython.CoreMotionAxisLogOutput_negativeSoftLimit_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_opState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_opState_set)
    __swig_setmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_set
    __swig_getmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_get
    if _newclass:
        detailOpState = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_set)
    __swig_setmethods__["userOffsetCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_set
    __swig_getmethods__["userOffsetCommandPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_get
    if _newclass:
        userOffsetCommandPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_set)
    __swig_setmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_set
    __swig_getmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_get
    if _newclass:
        userOffsetFeedbackPos = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_set)
    __swig_setmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_set
    __swig_getmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_get
    if _newclass:
        axisCommandModeFeedback = _swig_property(_WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionAxisLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisLogOutput
    __del__ = lambda self: None
CoreMotionAxisLogOutput_swigregister = _WMX3ApiPython.CoreMotionAxisLogOutput_swigregister
CoreMotionAxisLogOutput_swigregister(CoreMotionAxisLogOutput)

class CoreMotionLogOutput(LogOutput):
    __swig_setmethods__ = {}
    for _s in [LogOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionLogOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionLogOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.CoreMotionLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.CoreMotionLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.CoreMotionLogOutput_SetLogOutput(self, src)
    __swig_setmethods__["axisData"] = _WMX3ApiPython.CoreMotionLogOutput_axisData_set
    __swig_getmethods__["axisData"] = _WMX3ApiPython.CoreMotionLogOutput_axisData_get
    if _newclass:
        axisData = _swig_property(_WMX3ApiPython.CoreMotionLogOutput_axisData_get, _WMX3ApiPython.CoreMotionLogOutput_axisData_set)

    def SetAxisData(self, index1, index2, value):
        return _WMX3ApiPython.CoreMotionLogOutput_SetAxisData(self, index1, index2, value)

    def GetAxisData(self, index1, index2):
        return _WMX3ApiPython.CoreMotionLogOutput_GetAxisData(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionLogOutput
    __del__ = lambda self: None
CoreMotionLogOutput_swigregister = _WMX3ApiPython.CoreMotionLogOutput_swigregister
CoreMotionLogOutput_swigregister(CoreMotionLogOutput)

class BaseCoreMotionEventInputFunctionArguments_Pos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventInputFunctionArguments_Pos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventInputFunctionArguments_Pos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_set)
    __swig_setmethods__["disablePositiveDirection"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_set
    __swig_getmethods__["disablePositiveDirection"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_get
    if _newclass:
        disablePositiveDirection = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_set)
    __swig_setmethods__["disableNegativeDirection"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_set
    __swig_getmethods__["disableNegativeDirection"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_get
    if _newclass:
        disableNegativeDirection = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Pos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Pos
    __del__ = lambda self: None
BaseCoreMotionEventInputFunctionArguments_Pos_swigregister = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_swigregister
BaseCoreMotionEventInputFunctionArguments_Pos_swigregister(BaseCoreMotionEventInputFunctionArguments_Pos)

class BaseCoreMotionEventInputFunctionArguments_Velocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventInputFunctionArguments_Velocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventInputFunctionArguments_Velocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Velocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Velocity
    __del__ = lambda self: None
BaseCoreMotionEventInputFunctionArguments_Velocity_swigregister = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_swigregister
BaseCoreMotionEventInputFunctionArguments_Velocity_swigregister(BaseCoreMotionEventInputFunctionArguments_Velocity)

class BaseCoreMotionEventInputFunctionArguments_Trq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventInputFunctionArguments_Trq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventInputFunctionArguments_Trq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_set)
    __swig_setmethods__["trq"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_set
    __swig_getmethods__["trq"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_get
    if _newclass:
        trq = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Trq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Trq
    __del__ = lambda self: None
BaseCoreMotionEventInputFunctionArguments_Trq_swigregister = _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_swigregister
BaseCoreMotionEventInputFunctionArguments_Trq_swigregister(BaseCoreMotionEventInputFunctionArguments_Trq)

class CoreMotionEventInputFunctionArguments_EqualPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_EqualPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_EqualPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualPos
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_EqualPos_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_swigregister
CoreMotionEventInputFunctionArguments_EqualPos_swigregister(CoreMotionEventInputFunctionArguments_EqualPos)

class CoreMotionEventInputFunctionArguments_GreaterPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_GreaterPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_GreaterPos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterPos
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_GreaterPos_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPos_swigregister
CoreMotionEventInputFunctionArguments_GreaterPos_swigregister(CoreMotionEventInputFunctionArguments_GreaterPos)

class CoreMotionEventInputFunctionArguments_LessPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_LessPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Pos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_LessPos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessPos
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_LessPos_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessPos_swigregister
CoreMotionEventInputFunctionArguments_LessPos_swigregister(CoreMotionEventInputFunctionArguments_LessPos)

class CoreMotionEventInputFunctionArguments_EqualVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_EqualVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_EqualVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualVelocity
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_EqualVelocity_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_swigregister
CoreMotionEventInputFunctionArguments_EqualVelocity_swigregister(CoreMotionEventInputFunctionArguments_EqualVelocity)

class CoreMotionEventInputFunctionArguments_GreaterVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_GreaterVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_GreaterVelocity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterVelocity
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_GreaterVelocity_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterVelocity_swigregister
CoreMotionEventInputFunctionArguments_GreaterVelocity_swigregister(CoreMotionEventInputFunctionArguments_GreaterVelocity)

class CoreMotionEventInputFunctionArguments_LessVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_LessVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Velocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_LessVelocity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessVelocity
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_LessVelocity_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessVelocity_swigregister
CoreMotionEventInputFunctionArguments_LessVelocity_swigregister(CoreMotionEventInputFunctionArguments_LessVelocity)

class CoreMotionEventInputFunctionArguments_EqualTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_EqualTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_EqualTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualTrq
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_EqualTrq_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_swigregister
CoreMotionEventInputFunctionArguments_EqualTrq_swigregister(CoreMotionEventInputFunctionArguments_EqualTrq)

class CoreMotionEventInputFunctionArguments_GreaterTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_GreaterTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_GreaterTrq, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterTrq
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_GreaterTrq_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterTrq_swigregister
CoreMotionEventInputFunctionArguments_GreaterTrq_swigregister(CoreMotionEventInputFunctionArguments_GreaterTrq)

class CoreMotionEventInputFunctionArguments_LessTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_LessTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventInputFunctionArguments_Trq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_LessTrq, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessTrq
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_LessTrq_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessTrq_swigregister
CoreMotionEventInputFunctionArguments_LessTrq_swigregister(CoreMotionEventInputFunctionArguments_LessTrq)

class CoreMotionEventInputFunctionArguments_OpState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_OpState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_OpState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_OpState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_OpState
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_OpState_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_swigregister
CoreMotionEventInputFunctionArguments_OpState_swigregister(CoreMotionEventInputFunctionArguments_OpState)

class CoreMotionEventInputFunctionArguments_AxisCmdMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_AxisCmdMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_AxisCmdMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_AxisCmdMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_AxisCmdMode
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_AxisCmdMode_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_swigregister
CoreMotionEventInputFunctionArguments_AxisCmdMode_swigregister(CoreMotionEventInputFunctionArguments_AxisCmdMode)

class CoreMotionEventInputFunctionArguments_InPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_InPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_InPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_set)
    __swig_setmethods__["channel"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_InPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_InPos
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_InPos_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_swigregister
CoreMotionEventInputFunctionArguments_InPos_swigregister(CoreMotionEventInputFunctionArguments_InPos)

class CoreMotionEventInputFunctionArguments_PosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_PosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_PosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_PosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_PosSET
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_PosSET_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_swigregister
CoreMotionEventInputFunctionArguments_PosSET_swigregister(CoreMotionEventInputFunctionArguments_PosSET)

class CoreMotionEventInputFunctionArguments_DelayedPosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_DelayedPosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_DelayedPosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_DelayedPosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_DelayedPosSET
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_DelayedPosSET_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_swigregister
CoreMotionEventInputFunctionArguments_DelayedPosSET_swigregister(CoreMotionEventInputFunctionArguments_DelayedPosSET)

class CoreMotionEventInputFunctionArguments_CommandDistributedEnd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_CommandDistributedEnd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_CommandDistributedEnd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CommandDistributedEnd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CommandDistributedEnd
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_CommandDistributedEnd_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_swigregister
CoreMotionEventInputFunctionArguments_CommandDistributedEnd_swigregister(CoreMotionEventInputFunctionArguments_CommandDistributedEnd)

class CoreMotionEventInputFunctionArguments_RemainingTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_RemainingTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_RemainingTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_set)
    __swig_setmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_set
    __swig_getmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_get
    if _newclass:
        disableIdleAxisTrigger = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_RemainingTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_RemainingTime
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_RemainingTime_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_swigregister
CoreMotionEventInputFunctionArguments_RemainingTime_swigregister(CoreMotionEventInputFunctionArguments_RemainingTime)

class CoreMotionEventInputFunctionArguments_RemainingDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_RemainingDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_RemainingDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_set)
    __swig_setmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_set
    __swig_getmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_get
    if _newclass:
        disableIdleAxisTrigger = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_RemainingDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_RemainingDistance
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_RemainingDistance_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_swigregister
CoreMotionEventInputFunctionArguments_RemainingDistance_swigregister(CoreMotionEventInputFunctionArguments_RemainingDistance)

class CoreMotionEventInputFunctionArguments_CompletedTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_CompletedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_CompletedTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_set)
    __swig_setmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_set
    __swig_getmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_get
    if _newclass:
        disableIdleAxisTrigger = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CompletedTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CompletedTime
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_CompletedTime_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_swigregister
CoreMotionEventInputFunctionArguments_CompletedTime_swigregister(CoreMotionEventInputFunctionArguments_CompletedTime)

class CoreMotionEventInputFunctionArguments_CompletedDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_CompletedDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_CompletedDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_set)
    __swig_setmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_set
    __swig_getmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_get
    if _newclass:
        disableIdleAxisTrigger = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CompletedDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CompletedDistance
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_CompletedDistance_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_swigregister
CoreMotionEventInputFunctionArguments_CompletedDistance_swigregister(CoreMotionEventInputFunctionArguments_CompletedDistance)

class CoreMotionEventInputFunctionArguments_DistanceToTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_DistanceToTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_DistanceToTarget, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_set)
    __swig_setmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_set
    __swig_getmethods__["disableIdleAxisTrigger"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_get
    if _newclass:
        disableIdleAxisTrigger = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_DistanceToTarget()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_DistanceToTarget
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_DistanceToTarget_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_swigregister
CoreMotionEventInputFunctionArguments_DistanceToTarget_swigregister(CoreMotionEventInputFunctionArguments_DistanceToTarget)

class CoreMotionEventInputFunctionArguments_GreaterPositionError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputFunctionArguments_GreaterPositionError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputFunctionArguments_GreaterPositionError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_invert_set)
    __swig_setmethods__["posError"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_posError_set
    __swig_getmethods__["posError"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_posError_get
    if _newclass:
        posError = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_posError_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_posError_set)
    __swig_setmethods__["useActualFollowingError"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_set
    __swig_getmethods__["useActualFollowingError"] = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_get
    if _newclass:
        useActualFollowingError = _swig_property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterPositionError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterPositionError
    __del__ = lambda self: None
CoreMotionEventInputFunctionArguments_GreaterPositionError_swigregister = _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPositionError_swigregister
CoreMotionEventInputFunctionArguments_GreaterPositionError_swigregister(CoreMotionEventInputFunctionArguments_GreaterPositionError)

class CoreMotionEventInputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInputType, name)
    __repr__ = _swig_repr
    EqualPos = _WMX3ApiPython.CoreMotionEventInputType_EqualPos
    GreaterPos = _WMX3ApiPython.CoreMotionEventInputType_GreaterPos
    LessPos = _WMX3ApiPython.CoreMotionEventInputType_LessPos
    EqualVelocity = _WMX3ApiPython.CoreMotionEventInputType_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.CoreMotionEventInputType_GreaterVelocity
    LessVelocity = _WMX3ApiPython.CoreMotionEventInputType_LessVelocity
    EqualTrq = _WMX3ApiPython.CoreMotionEventInputType_EqualTrq
    GreaterTrq = _WMX3ApiPython.CoreMotionEventInputType_GreaterTrq
    LessTrq = _WMX3ApiPython.CoreMotionEventInputType_LessTrq
    OpState = _WMX3ApiPython.CoreMotionEventInputType_OpState
    AxisCmdMode = _WMX3ApiPython.CoreMotionEventInputType_AxisCmdMode
    InPos = _WMX3ApiPython.CoreMotionEventInputType_InPos
    PosSET = _WMX3ApiPython.CoreMotionEventInputType_PosSET
    DelayedPosSET = _WMX3ApiPython.CoreMotionEventInputType_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.CoreMotionEventInputType_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.CoreMotionEventInputType_RemainingTime
    RemainingDistance = _WMX3ApiPython.CoreMotionEventInputType_RemainingDistance
    CompletedTime = _WMX3ApiPython.CoreMotionEventInputType_CompletedTime
    CompletedDistance = _WMX3ApiPython.CoreMotionEventInputType_CompletedDistance
    DistanceToTarget = _WMX3ApiPython.CoreMotionEventInputType_DistanceToTarget
    GreaterPositionError = _WMX3ApiPython.CoreMotionEventInputType_GreaterPositionError

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputType
    __del__ = lambda self: None
CoreMotionEventInputType_swigregister = _WMX3ApiPython.CoreMotionEventInputType_swigregister
CoreMotionEventInputType_swigregister(CoreMotionEventInputType)

class CoreMotionEventInput(EventInput):
    __swig_setmethods__ = {}
    for _s in [EventInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventInput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventInput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputModuleId(self):
        return _WMX3ApiPython.CoreMotionEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.CoreMotionEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionEventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_setmethods__["inputFunction"] = _WMX3ApiPython.CoreMotionEventInput_inputFunction_set
    __swig_getmethods__["inputFunction"] = _WMX3ApiPython.CoreMotionEventInput_inputFunction_get
    if _newclass:
        inputFunction = _swig_property(_WMX3ApiPython.CoreMotionEventInput_inputFunction_get, _WMX3ApiPython.CoreMotionEventInput_inputFunction_set)
    __swig_setmethods__["equalPos"] = _WMX3ApiPython.CoreMotionEventInput_equalPos_set
    __swig_getmethods__["equalPos"] = _WMX3ApiPython.CoreMotionEventInput_equalPos_get
    if _newclass:
        equalPos = _swig_property(_WMX3ApiPython.CoreMotionEventInput_equalPos_get, _WMX3ApiPython.CoreMotionEventInput_equalPos_set)
    __swig_setmethods__["greaterPos"] = _WMX3ApiPython.CoreMotionEventInput_greaterPos_set
    __swig_getmethods__["greaterPos"] = _WMX3ApiPython.CoreMotionEventInput_greaterPos_get
    if _newclass:
        greaterPos = _swig_property(_WMX3ApiPython.CoreMotionEventInput_greaterPos_get, _WMX3ApiPython.CoreMotionEventInput_greaterPos_set)
    __swig_setmethods__["lessPos"] = _WMX3ApiPython.CoreMotionEventInput_lessPos_set
    __swig_getmethods__["lessPos"] = _WMX3ApiPython.CoreMotionEventInput_lessPos_get
    if _newclass:
        lessPos = _swig_property(_WMX3ApiPython.CoreMotionEventInput_lessPos_get, _WMX3ApiPython.CoreMotionEventInput_lessPos_set)
    __swig_setmethods__["equalVelocity"] = _WMX3ApiPython.CoreMotionEventInput_equalVelocity_set
    __swig_getmethods__["equalVelocity"] = _WMX3ApiPython.CoreMotionEventInput_equalVelocity_get
    if _newclass:
        equalVelocity = _swig_property(_WMX3ApiPython.CoreMotionEventInput_equalVelocity_get, _WMX3ApiPython.CoreMotionEventInput_equalVelocity_set)
    __swig_setmethods__["greaterVelocity"] = _WMX3ApiPython.CoreMotionEventInput_greaterVelocity_set
    __swig_getmethods__["greaterVelocity"] = _WMX3ApiPython.CoreMotionEventInput_greaterVelocity_get
    if _newclass:
        greaterVelocity = _swig_property(_WMX3ApiPython.CoreMotionEventInput_greaterVelocity_get, _WMX3ApiPython.CoreMotionEventInput_greaterVelocity_set)
    __swig_setmethods__["lessVelocity"] = _WMX3ApiPython.CoreMotionEventInput_lessVelocity_set
    __swig_getmethods__["lessVelocity"] = _WMX3ApiPython.CoreMotionEventInput_lessVelocity_get
    if _newclass:
        lessVelocity = _swig_property(_WMX3ApiPython.CoreMotionEventInput_lessVelocity_get, _WMX3ApiPython.CoreMotionEventInput_lessVelocity_set)
    __swig_setmethods__["equalTrq"] = _WMX3ApiPython.CoreMotionEventInput_equalTrq_set
    __swig_getmethods__["equalTrq"] = _WMX3ApiPython.CoreMotionEventInput_equalTrq_get
    if _newclass:
        equalTrq = _swig_property(_WMX3ApiPython.CoreMotionEventInput_equalTrq_get, _WMX3ApiPython.CoreMotionEventInput_equalTrq_set)
    __swig_setmethods__["greaterTrq"] = _WMX3ApiPython.CoreMotionEventInput_greaterTrq_set
    __swig_getmethods__["greaterTrq"] = _WMX3ApiPython.CoreMotionEventInput_greaterTrq_get
    if _newclass:
        greaterTrq = _swig_property(_WMX3ApiPython.CoreMotionEventInput_greaterTrq_get, _WMX3ApiPython.CoreMotionEventInput_greaterTrq_set)
    __swig_setmethods__["lessTrq"] = _WMX3ApiPython.CoreMotionEventInput_lessTrq_set
    __swig_getmethods__["lessTrq"] = _WMX3ApiPython.CoreMotionEventInput_lessTrq_get
    if _newclass:
        lessTrq = _swig_property(_WMX3ApiPython.CoreMotionEventInput_lessTrq_get, _WMX3ApiPython.CoreMotionEventInput_lessTrq_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.CoreMotionEventInput_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.CoreMotionEventInput_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.CoreMotionEventInput_opState_get, _WMX3ApiPython.CoreMotionEventInput_opState_set)
    __swig_setmethods__["axisCmdMode"] = _WMX3ApiPython.CoreMotionEventInput_axisCmdMode_set
    __swig_getmethods__["axisCmdMode"] = _WMX3ApiPython.CoreMotionEventInput_axisCmdMode_get
    if _newclass:
        axisCmdMode = _swig_property(_WMX3ApiPython.CoreMotionEventInput_axisCmdMode_get, _WMX3ApiPython.CoreMotionEventInput_axisCmdMode_set)
    __swig_setmethods__["inPos"] = _WMX3ApiPython.CoreMotionEventInput_inPos_set
    __swig_getmethods__["inPos"] = _WMX3ApiPython.CoreMotionEventInput_inPos_get
    if _newclass:
        inPos = _swig_property(_WMX3ApiPython.CoreMotionEventInput_inPos_get, _WMX3ApiPython.CoreMotionEventInput_inPos_set)
    __swig_setmethods__["posSET"] = _WMX3ApiPython.CoreMotionEventInput_posSET_set
    __swig_getmethods__["posSET"] = _WMX3ApiPython.CoreMotionEventInput_posSET_get
    if _newclass:
        posSET = _swig_property(_WMX3ApiPython.CoreMotionEventInput_posSET_get, _WMX3ApiPython.CoreMotionEventInput_posSET_set)
    __swig_setmethods__["delayedPosSET"] = _WMX3ApiPython.CoreMotionEventInput_delayedPosSET_set
    __swig_getmethods__["delayedPosSET"] = _WMX3ApiPython.CoreMotionEventInput_delayedPosSET_get
    if _newclass:
        delayedPosSET = _swig_property(_WMX3ApiPython.CoreMotionEventInput_delayedPosSET_get, _WMX3ApiPython.CoreMotionEventInput_delayedPosSET_set)
    __swig_setmethods__["commandDistributedEnd"] = _WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_set
    __swig_getmethods__["commandDistributedEnd"] = _WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_get
    if _newclass:
        commandDistributedEnd = _swig_property(_WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_get, _WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_set)
    __swig_setmethods__["remainingTime"] = _WMX3ApiPython.CoreMotionEventInput_remainingTime_set
    __swig_getmethods__["remainingTime"] = _WMX3ApiPython.CoreMotionEventInput_remainingTime_get
    if _newclass:
        remainingTime = _swig_property(_WMX3ApiPython.CoreMotionEventInput_remainingTime_get, _WMX3ApiPython.CoreMotionEventInput_remainingTime_set)
    __swig_setmethods__["remainingDistance"] = _WMX3ApiPython.CoreMotionEventInput_remainingDistance_set
    __swig_getmethods__["remainingDistance"] = _WMX3ApiPython.CoreMotionEventInput_remainingDistance_get
    if _newclass:
        remainingDistance = _swig_property(_WMX3ApiPython.CoreMotionEventInput_remainingDistance_get, _WMX3ApiPython.CoreMotionEventInput_remainingDistance_set)
    __swig_setmethods__["completedTime"] = _WMX3ApiPython.CoreMotionEventInput_completedTime_set
    __swig_getmethods__["completedTime"] = _WMX3ApiPython.CoreMotionEventInput_completedTime_get
    if _newclass:
        completedTime = _swig_property(_WMX3ApiPython.CoreMotionEventInput_completedTime_get, _WMX3ApiPython.CoreMotionEventInput_completedTime_set)
    __swig_setmethods__["completedDistance"] = _WMX3ApiPython.CoreMotionEventInput_completedDistance_set
    __swig_getmethods__["completedDistance"] = _WMX3ApiPython.CoreMotionEventInput_completedDistance_get
    if _newclass:
        completedDistance = _swig_property(_WMX3ApiPython.CoreMotionEventInput_completedDistance_get, _WMX3ApiPython.CoreMotionEventInput_completedDistance_set)
    __swig_setmethods__["distanceToTarget"] = _WMX3ApiPython.CoreMotionEventInput_distanceToTarget_set
    __swig_getmethods__["distanceToTarget"] = _WMX3ApiPython.CoreMotionEventInput_distanceToTarget_get
    if _newclass:
        distanceToTarget = _swig_property(_WMX3ApiPython.CoreMotionEventInput_distanceToTarget_get, _WMX3ApiPython.CoreMotionEventInput_distanceToTarget_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInput
    __del__ = lambda self: None
CoreMotionEventInput_swigregister = _WMX3ApiPython.CoreMotionEventInput_swigregister
CoreMotionEventInput_swigregister(CoreMotionEventInput)

class CoreMotionEventOutputFunctionArguments_StopSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_StopSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_StopSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StopSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StopSingleAxis
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_StopSingleAxis_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_swigregister
CoreMotionEventOutputFunctionArguments_StopSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_StopSingleAxis)

class BaseCoreMotionEventOutputFunctionArguments_StartSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventOutputFunctionArguments_StartSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventOutputFunctionArguments_StartSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_StartSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_StartSingle
    __del__ = lambda self: None
BaseCoreMotionEventOutputFunctionArguments_StartSingle_swigregister = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_swigregister
BaseCoreMotionEventOutputFunctionArguments_StartSingle_swigregister(BaseCoreMotionEventOutputFunctionArguments_StartSingle)

class BaseCoreMotionEventOutputFunctionArguments_StartMultiple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventOutputFunctionArguments_StartMultiple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventOutputFunctionArguments_StartMultiple, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetTarget(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetType(self, index)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetVelocity(self, index)
    __swig_setmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAcc(self, index)
    __swig_setmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetDec(self, index)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkAcc(self, index)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkDec(self, index)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkAccRatio(self, index)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkDecRatio(self, index)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAccTime(self, index)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetDecTime(self, index)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetStartingVelocity(self, index)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetEndVelocity(self, index)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetSecondVelocity(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_StartMultiple()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_StartMultiple
    __del__ = lambda self: None
BaseCoreMotionEventOutputFunctionArguments_StartMultiple_swigregister = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_swigregister
BaseCoreMotionEventOutputFunctionArguments_StartMultiple_swigregister(BaseCoreMotionEventOutputFunctionArguments_StartMultiple)

class BaseCoreMotionEventOutputFunctionArguments_LinearIntpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCoreMotionEventOutputFunctionArguments_LinearIntpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCoreMotionEventOutputFunctionArguments_LinearIntpl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetTarget(self, index)
    __swig_setmethods__["maxVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_set
    __swig_getmethods__["maxVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_get
    if _newclass:
        maxVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxVelocity(self, index)
    __swig_setmethods__["maxAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_set
    __swig_getmethods__["maxAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_get
    if _newclass:
        maxAcc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxAcc(self, index)
    __swig_setmethods__["maxDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_set
    __swig_getmethods__["maxDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_get
    if _newclass:
        maxDec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxDec(self, index)
    __swig_setmethods__["maxJerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_set
    __swig_getmethods__["maxJerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_get
    if _newclass:
        maxJerkAcc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxJerkAcc(self, index)
    __swig_setmethods__["maxJerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_set
    __swig_getmethods__["maxJerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_get
    if _newclass:
        maxJerkDec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxJerkDec(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_LinearIntpl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_LinearIntpl
    __del__ = lambda self: None
BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_swigregister = _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_swigregister
BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_swigregister(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl)

class CoreMotionEventOutputFunctionArguments_StartSinglePos(BaseCoreMotionEventOutputFunctionArguments_StartSingle):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_StartSinglePos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_StartSinglePos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartSinglePos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartSinglePos
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_StartSinglePos_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSinglePos_swigregister
CoreMotionEventOutputFunctionArguments_StartSinglePos_swigregister(CoreMotionEventOutputFunctionArguments_StartSinglePos)

class CoreMotionEventOutputFunctionArguments_StartSingleMov(BaseCoreMotionEventOutputFunctionArguments_StartSingle):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_StartSingleMov, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_StartSingleMov, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartSingleMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartSingleMov
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_StartSingleMov_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSingleMov_swigregister
CoreMotionEventOutputFunctionArguments_StartSingleMov_swigregister(CoreMotionEventOutputFunctionArguments_StartSingleMov)

class CoreMotionEventOutputFunctionArguments_StartMultiplePos(BaseCoreMotionEventOutputFunctionArguments_StartMultiple):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartMultiple]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_StartMultiplePos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartMultiple]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_StartMultiplePos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartMultiplePos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartMultiplePos
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_StartMultiplePos_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultiplePos_swigregister
CoreMotionEventOutputFunctionArguments_StartMultiplePos_swigregister(CoreMotionEventOutputFunctionArguments_StartMultiplePos)

class CoreMotionEventOutputFunctionArguments_StartMultipleMov(BaseCoreMotionEventOutputFunctionArguments_StartMultiple):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartMultiple]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_StartMultipleMov, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_StartMultiple]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_StartMultipleMov, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartMultipleMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartMultipleMov
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_StartMultipleMov_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultipleMov_swigregister
CoreMotionEventOutputFunctionArguments_StartMultipleMov_swigregister(CoreMotionEventOutputFunctionArguments_StartMultipleMov)

class CoreMotionEventOutputFunctionArguments_LinearIntplPos(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_LinearIntpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_LinearIntplPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_LinearIntpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_LinearIntplPos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_LinearIntplPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_LinearIntplPos
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_LinearIntplPos_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplPos_swigregister
CoreMotionEventOutputFunctionArguments_LinearIntplPos_swigregister(CoreMotionEventOutputFunctionArguments_LinearIntplPos)

class CoreMotionEventOutputFunctionArguments_LinearIntplMov(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl):
    __swig_setmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_LinearIntpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_LinearIntplMov, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCoreMotionEventOutputFunctionArguments_LinearIntpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_LinearIntplMov, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_LinearIntplMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_LinearIntplMov
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_LinearIntplMov_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplMov_swigregister
CoreMotionEventOutputFunctionArguments_LinearIntplMov_swigregister(CoreMotionEventOutputFunctionArguments_LinearIntplMov)

class CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_swigregister
CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis)

class CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_swigregister
CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis)

class CoreMotionEventOutputFunctionArguments_ExecEStop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_ExecEStop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_ExecEStop, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eStopLevel"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_set
    __swig_getmethods__["eStopLevel"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_get
    if _newclass:
        eStopLevel = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ExecEStop()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ExecEStop
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_ExecEStop_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_swigregister
CoreMotionEventOutputFunctionArguments_ExecEStop_swigregister(CoreMotionEventOutputFunctionArguments_ExecEStop)

class CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_swigregister
CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_swigregister(CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder)

class CoreMotionEventOutputFunctionArguments_ResetFlightRecorder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputFunctionArguments_ResetFlightRecorder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputFunctionArguments_ResetFlightRecorder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ResetFlightRecorder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ResetFlightRecorder
    __del__ = lambda self: None
CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_swigregister = _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_swigregister
CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_swigregister(CoreMotionEventOutputFunctionArguments_ResetFlightRecorder)

class CoreMotionEventOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutputType, name)
    __repr__ = _swig_repr
    StopSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_StopSingleAxis
    StartSinglePos = _WMX3ApiPython.CoreMotionEventOutputType_StartSinglePos
    StartSingleMov = _WMX3ApiPython.CoreMotionEventOutputType_StartSingleMov
    StartMultiplePos = _WMX3ApiPython.CoreMotionEventOutputType_StartMultiplePos
    StartMultipleMov = _WMX3ApiPython.CoreMotionEventOutputType_StartMultipleMov
    LinearIntplPos = _WMX3ApiPython.CoreMotionEventOutputType_LinearIntplPos
    LinearIntplMov = _WMX3ApiPython.CoreMotionEventOutputType_LinearIntplMov
    ExecQuickStopSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_ExecQuickStopSingleAxis
    OverrideVelSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_OverrideVelSingleAxis
    ExecEStop = _WMX3ApiPython.CoreMotionEventOutputType_ExecEStop
    TriggerFlightRecorder = _WMX3ApiPython.CoreMotionEventOutputType_TriggerFlightRecorder
    ResetFlightRecorder = _WMX3ApiPython.CoreMotionEventOutputType_ResetFlightRecorder

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputType
    __del__ = lambda self: None
CoreMotionEventOutputType_swigregister = _WMX3ApiPython.CoreMotionEventOutputType_swigregister
CoreMotionEventOutputType_swigregister(CoreMotionEventOutputType)

class CoreMotionEventOutput(EventOutput):
    __swig_setmethods__ = {}
    for _s in [EventOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionEventOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionEventOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionEventOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOutputModuleId(self):
        return _WMX3ApiPython.CoreMotionEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.CoreMotionEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_setmethods__["type"] = _WMX3ApiPython.CoreMotionEventOutput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.CoreMotionEventOutput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_type_get, _WMX3ApiPython.CoreMotionEventOutput_type_set)
    __swig_setmethods__["stopSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_set
    __swig_getmethods__["stopSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_get
    if _newclass:
        stopSingleAxis = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_set)
    __swig_setmethods__["startSinglePos"] = _WMX3ApiPython.CoreMotionEventOutput_startSinglePos_set
    __swig_getmethods__["startSinglePos"] = _WMX3ApiPython.CoreMotionEventOutput_startSinglePos_get
    if _newclass:
        startSinglePos = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_startSinglePos_get, _WMX3ApiPython.CoreMotionEventOutput_startSinglePos_set)
    __swig_setmethods__["startSingleMov"] = _WMX3ApiPython.CoreMotionEventOutput_startSingleMov_set
    __swig_getmethods__["startSingleMov"] = _WMX3ApiPython.CoreMotionEventOutput_startSingleMov_get
    if _newclass:
        startSingleMov = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_startSingleMov_get, _WMX3ApiPython.CoreMotionEventOutput_startSingleMov_set)
    __swig_setmethods__["startMultiplePos"] = _WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_set
    __swig_getmethods__["startMultiplePos"] = _WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_get
    if _newclass:
        startMultiplePos = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_get, _WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_set)
    __swig_setmethods__["startMultipleMov"] = _WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_set
    __swig_getmethods__["startMultipleMov"] = _WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_get
    if _newclass:
        startMultipleMov = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_get, _WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_set)
    __swig_setmethods__["linearIntplPos"] = _WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_set
    __swig_getmethods__["linearIntplPos"] = _WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_get
    if _newclass:
        linearIntplPos = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_get, _WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_set)
    __swig_setmethods__["linearIntplMov"] = _WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_set
    __swig_getmethods__["linearIntplMov"] = _WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_get
    if _newclass:
        linearIntplMov = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_get, _WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_set)
    __swig_setmethods__["execQuickStopSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_set
    __swig_getmethods__["execQuickStopSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_get
    if _newclass:
        execQuickStopSingleAxis = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_set)
    __swig_setmethods__["overrideVelSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_set
    __swig_getmethods__["overrideVelSingleAxis"] = _WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_get
    if _newclass:
        overrideVelSingleAxis = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_set)
    __swig_setmethods__["execEStop"] = _WMX3ApiPython.CoreMotionEventOutput_execEStop_set
    __swig_getmethods__["execEStop"] = _WMX3ApiPython.CoreMotionEventOutput_execEStop_get
    if _newclass:
        execEStop = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_execEStop_get, _WMX3ApiPython.CoreMotionEventOutput_execEStop_set)
    __swig_setmethods__["triggerFlightRecorder"] = _WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_set
    __swig_getmethods__["triggerFlightRecorder"] = _WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_get
    if _newclass:
        triggerFlightRecorder = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_get, _WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_set)
    __swig_setmethods__["resetFlightRecorder"] = _WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_set
    __swig_getmethods__["resetFlightRecorder"] = _WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_get
    if _newclass:
        resetFlightRecorder = _swig_property(_WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_get, _WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutput
    __del__ = lambda self: None
CoreMotionEventOutput_swigregister = _WMX3ApiPython.CoreMotionEventOutput_swigregister
CoreMotionEventOutput_swigregister(CoreMotionEventOutput)

class HomeState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HomeState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HomeState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.HomeState_Idle
    ZPulseSearch = _WMX3ApiPython.HomeState_ZPulseSearch
    ZPulseSearchReverse = _WMX3ApiPython.HomeState_ZPulseSearchReverse
    ZPulseSearchPauseReverse = _WMX3ApiPython.HomeState_ZPulseSearchPauseReverse
    HSSearch = _WMX3ApiPython.HomeState_HSSearch
    HSSearchPause = _WMX3ApiPython.HomeState_HSSearchPause
    HSAndZPulseSearch = _WMX3ApiPython.HomeState_HSAndZPulseSearch
    HSAndZPulseSearchPause = _WMX3ApiPython.HomeState_HSAndZPulseSearchPause
    HSOffSearch = _WMX3ApiPython.HomeState_HSOffSearch
    HSOffSearchPause = _WMX3ApiPython.HomeState_HSOffSearchPause
    HSOffAndZPulseSearch = _WMX3ApiPython.HomeState_HSOffAndZPulseSearch
    HSOffAndZPulseSearchPause = _WMX3ApiPython.HomeState_HSOffAndZPulseSearchPause
    LSSearch = _WMX3ApiPython.HomeState_LSSearch
    LSSearchPause = _WMX3ApiPython.HomeState_LSSearchPause
    HSClearReverse = _WMX3ApiPython.HomeState_HSClearReverse
    HSClearReversePause = _WMX3ApiPython.HomeState_HSClearReversePause
    HSFallingEdgeSearchReverse = _WMX3ApiPython.HomeState_HSFallingEdgeSearchReverse
    HSFallingEdgeSearchReversePause = _WMX3ApiPython.HomeState_HSFallingEdgeSearchReversePause
    LSFallingEdgeSearchReverse = _WMX3ApiPython.HomeState_LSFallingEdgeSearchReverse
    LSFallingEdgeSearchReversePause = _WMX3ApiPython.HomeState_LSFallingEdgeSearchReversePause
    TouchProbeSearch = _WMX3ApiPython.HomeState_TouchProbeSearch
    TouchProbeSearchPause = _WMX3ApiPython.HomeState_TouchProbeSearchPause
    SecondHSSearch = _WMX3ApiPython.HomeState_SecondHSSearch
    SecondHSSearchPause = _WMX3ApiPython.HomeState_SecondHSSearchPause
    SecondTouchProbeSearch = _WMX3ApiPython.HomeState_SecondTouchProbeSearch
    SecondTouchProbeSearchPause = _WMX3ApiPython.HomeState_SecondTouchProbeSearchPause
    MechanicalEndDetection = _WMX3ApiPython.HomeState_MechanicalEndDetection
    HomeShift = _WMX3ApiPython.HomeState_HomeShift
    HomeShiftPause = _WMX3ApiPython.HomeState_HomeShiftPause
    Cancel = _WMX3ApiPython.HomeState_Cancel

    def __init__(self):
        this = _WMX3ApiPython.new_HomeState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_HomeState
    __del__ = lambda self: None
HomeState_swigregister = _WMX3ApiPython.HomeState_swigregister
HomeState_swigregister(HomeState)

class HomeError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HomeError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HomeError, name)
    __repr__ = _swig_repr
    NoError = _WMX3ApiPython.HomeError_NoError
    LSTriggered = _WMX3ApiPython.HomeError_LSTriggered
    MaxLSRevDistanceTraveled = _WMX3ApiPython.HomeError_MaxLSRevDistanceTraveled
    MaxHSOnAtStartRevDistanceTraveled = _WMX3ApiPython.HomeError_MaxHSOnAtStartRevDistanceTraveled
    ZPulseDistanceCheckError = _WMX3ApiPython.HomeError_ZPulseDistanceCheckError

    def __init__(self):
        this = _WMX3ApiPython.new_HomeError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_HomeError
    __del__ = lambda self: None
HomeError_swigregister = _WMX3ApiPython.HomeError_swigregister
HomeError_swigregister(HomeError)

class AxisSyncMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisSyncMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisSyncMode, name)
    __repr__ = _swig_repr
    NoSync = _WMX3ApiPython.AxisSyncMode_NoSync
    NoOffset = _WMX3ApiPython.AxisSyncMode_NoOffset
    VelocityOffset = _WMX3ApiPython.AxisSyncMode_VelocityOffset
    SymmetricVelocityOffset = _WMX3ApiPython.AxisSyncMode_SymmetricVelocityOffset

    def __init__(self):
        this = _WMX3ApiPython.new_AxisSyncMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSyncMode
    __del__ = lambda self: None
AxisSyncMode_swigregister = _WMX3ApiPython.AxisSyncMode_swigregister
AxisSyncMode_swigregister(AxisSyncMode)

class AxisCompensation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisCompensation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisCompensation, name)
    __repr__ = _swig_repr

    def SetData(self, pAxisCompensation):
        return _WMX3ApiPython.AxisCompensation_SetData(self, pAxisCompensation)

    def GetData(self, pAxisCompensation):
        return _WMX3ApiPython.AxisCompensation_GetData(self, pAxisCompensation)
    __swig_setmethods__["pitchErrorCompensation"] = _WMX3ApiPython.AxisCompensation_pitchErrorCompensation_set
    __swig_getmethods__["pitchErrorCompensation"] = _WMX3ApiPython.AxisCompensation_pitchErrorCompensation_get
    if _newclass:
        pitchErrorCompensation = _swig_property(_WMX3ApiPython.AxisCompensation_pitchErrorCompensation_get, _WMX3ApiPython.AxisCompensation_pitchErrorCompensation_set)
    __swig_setmethods__["pitchErrorCompensation2D"] = _WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_set
    __swig_getmethods__["pitchErrorCompensation2D"] = _WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_get
    if _newclass:
        pitchErrorCompensation2D = _swig_property(_WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_get, _WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_set)
    __swig_setmethods__["backlashCompensation"] = _WMX3ApiPython.AxisCompensation_backlashCompensation_set
    __swig_getmethods__["backlashCompensation"] = _WMX3ApiPython.AxisCompensation_backlashCompensation_get
    if _newclass:
        backlashCompensation = _swig_property(_WMX3ApiPython.AxisCompensation_backlashCompensation_get, _WMX3ApiPython.AxisCompensation_backlashCompensation_set)
    __swig_setmethods__["totalPosCompensation"] = _WMX3ApiPython.AxisCompensation_totalPosCompensation_set
    __swig_getmethods__["totalPosCompensation"] = _WMX3ApiPython.AxisCompensation_totalPosCompensation_get
    if _newclass:
        totalPosCompensation = _swig_property(_WMX3ApiPython.AxisCompensation_totalPosCompensation_get, _WMX3ApiPython.AxisCompensation_totalPosCompensation_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AxisCompensation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisCompensation
    __del__ = lambda self: None
AxisCompensation_swigregister = _WMX3ApiPython.AxisCompensation_swigregister
AxisCompensation_swigregister(AxisCompensation)

class AxisSupportedFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisSupportedFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisSupportedFunction, name)
    __repr__ = _swig_repr

    def SetData(self, pAxisSupportedFunction):
        return _WMX3ApiPython.AxisSupportedFunction_SetData(self, pAxisSupportedFunction)

    def GetData(self, pAxisSupportedFunction):
        return _WMX3ApiPython.AxisSupportedFunction_GetData(self, pAxisSupportedFunction)
    __swig_setmethods__["posFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_set
    __swig_getmethods__["posFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_get
    if _newclass:
        posFeedbackSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_set)
    __swig_setmethods__["posCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_posCommandSupport_set
    __swig_getmethods__["posCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_posCommandSupport_get
    if _newclass:
        posCommandSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_posCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_posCommandSupport_set)
    __swig_setmethods__["velocityFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_set
    __swig_getmethods__["velocityFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_get
    if _newclass:
        velocityFeedbackSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_set)
    __swig_setmethods__["velocityCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_set
    __swig_getmethods__["velocityCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_get
    if _newclass:
        velocityCommandSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_set)
    __swig_setmethods__["velocityOffsetSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_set
    __swig_getmethods__["velocityOffsetSupport"] = _WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_get
    if _newclass:
        velocityOffsetSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_set)
    __swig_setmethods__["trqFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_set
    __swig_getmethods__["trqFeedbackSupport"] = _WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_get
    if _newclass:
        trqFeedbackSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_set)
    __swig_setmethods__["trqCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_set
    __swig_getmethods__["trqCommandSupport"] = _WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_get
    if _newclass:
        trqCommandSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_set)
    __swig_setmethods__["maxTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_set
    __swig_getmethods__["maxTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_get
    if _newclass:
        maxTrqLimitSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_set)
    __swig_setmethods__["positiveTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_set
    __swig_getmethods__["positiveTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_get
    if _newclass:
        positiveTrqLimitSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_set)
    __swig_setmethods__["negativeTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_set
    __swig_getmethods__["negativeTrqLimitSupport"] = _WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_get
    if _newclass:
        negativeTrqLimitSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_set)
    __swig_setmethods__["maxMotorSpeedSupport"] = _WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_set
    __swig_getmethods__["maxMotorSpeedSupport"] = _WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_get
    if _newclass:
        maxMotorSpeedSupport = _swig_property(_WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_get, _WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AxisSupportedFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSupportedFunction
    __del__ = lambda self: None
AxisSupportedFunction_swigregister = _WMX3ApiPython.AxisSupportedFunction_swigregister
AxisSupportedFunction_swigregister(AxisSupportedFunction)

class CoreMotionAxisStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionAxisStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionAxisStatus, name)
    __repr__ = _swig_repr

    def SetData(self, pAxisStatus):
        return _WMX3ApiPython.CoreMotionAxisStatus_SetData(self, pAxisStatus)

    def GetData(self, pAxisStatus):
        return _WMX3ApiPython.CoreMotionAxisStatus_GetData(self, pAxisStatus)
    __swig_setmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisStatus_servoOn_set
    __swig_getmethods__["servoOn"] = _WMX3ApiPython.CoreMotionAxisStatus_servoOn_get
    if _newclass:
        servoOn = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_servoOn_get, _WMX3ApiPython.CoreMotionAxisStatus_servoOn_set)
    __swig_setmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisStatus_servoOffline_set
    __swig_getmethods__["servoOffline"] = _WMX3ApiPython.CoreMotionAxisStatus_servoOffline_get
    if _newclass:
        servoOffline = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_servoOffline_get, _WMX3ApiPython.CoreMotionAxisStatus_servoOffline_set)
    __swig_setmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_set
    __swig_getmethods__["ampAlarm"] = _WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_get
    if _newclass:
        ampAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_get, _WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_set)
    __swig_setmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_set
    __swig_getmethods__["ampAlarmCode"] = _WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_get
    if _newclass:
        ampAlarmCode = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_get, _WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_set)
    __swig_setmethods__["masterAxis"] = _WMX3ApiPython.CoreMotionAxisStatus_masterAxis_set
    __swig_getmethods__["masterAxis"] = _WMX3ApiPython.CoreMotionAxisStatus_masterAxis_get
    if _newclass:
        masterAxis = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_masterAxis_get, _WMX3ApiPython.CoreMotionAxisStatus_masterAxis_set)
    __swig_setmethods__["secondMasterAxis"] = _WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_set
    __swig_getmethods__["secondMasterAxis"] = _WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_get
    if _newclass:
        secondMasterAxis = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_get, _WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_set)
    __swig_setmethods__["posCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_posCmd_set
    __swig_getmethods__["posCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_posCmd_get
    if _newclass:
        posCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_posCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_posCmd_set)
    __swig_setmethods__["actualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_actualPos_set
    __swig_getmethods__["actualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_actualPos_get
    if _newclass:
        actualPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_actualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_actualPos_set)
    __swig_setmethods__["compPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_set
    __swig_getmethods__["compPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_get
    if _newclass:
        compPosCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_set)
    __swig_setmethods__["compActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_compActualPos_set
    __swig_getmethods__["compActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_compActualPos_get
    if _newclass:
        compActualPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_compActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_compActualPos_set)
    __swig_setmethods__["syncPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_set
    __swig_getmethods__["syncPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_get
    if _newclass:
        syncPosCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_set)
    __swig_setmethods__["syncActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_set
    __swig_getmethods__["syncActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_get
    if _newclass:
        syncActualPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_set)
    __swig_setmethods__["encoderCommand"] = _WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_set
    __swig_getmethods__["encoderCommand"] = _WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_get
    if _newclass:
        encoderCommand = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_get, _WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_set)
    __swig_setmethods__["encoderFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_set
    __swig_getmethods__["encoderFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_get
    if _newclass:
        encoderFeedback = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_set)
    __swig_setmethods__["accumulatedEncoderFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_set
    __swig_getmethods__["accumulatedEncoderFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_get
    if _newclass:
        accumulatedEncoderFeedback = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_set)
    __swig_setmethods__["velocityCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_set
    __swig_getmethods__["velocityCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_get
    if _newclass:
        velocityCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_set)
    __swig_setmethods__["actualVelocity"] = _WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_set
    __swig_getmethods__["actualVelocity"] = _WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_get
    if _newclass:
        actualVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_get, _WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_set)
    __swig_setmethods__["velocityLag"] = _WMX3ApiPython.CoreMotionAxisStatus_velocityLag_set
    __swig_getmethods__["velocityLag"] = _WMX3ApiPython.CoreMotionAxisStatus_velocityLag_get
    if _newclass:
        velocityLag = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_velocityLag_get, _WMX3ApiPython.CoreMotionAxisStatus_velocityLag_set)
    __swig_setmethods__["torqueCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_set
    __swig_getmethods__["torqueCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_get
    if _newclass:
        torqueCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_set)
    __swig_setmethods__["actualTorque"] = _WMX3ApiPython.CoreMotionAxisStatus_actualTorque_set
    __swig_getmethods__["actualTorque"] = _WMX3ApiPython.CoreMotionAxisStatus_actualTorque_get
    if _newclass:
        actualTorque = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_actualTorque_get, _WMX3ApiPython.CoreMotionAxisStatus_actualTorque_set)
    __swig_setmethods__["actualFollowingError"] = _WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_set
    __swig_getmethods__["actualFollowingError"] = _WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_get
    if _newclass:
        actualFollowingError = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_get, _WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_set)
    __swig_setmethods__["compensation"] = _WMX3ApiPython.CoreMotionAxisStatus_compensation_set
    __swig_getmethods__["compensation"] = _WMX3ApiPython.CoreMotionAxisStatus_compensation_get
    if _newclass:
        compensation = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_compensation_get, _WMX3ApiPython.CoreMotionAxisStatus_compensation_set)
    __swig_setmethods__["axisSupportedFunction"] = _WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_set
    __swig_getmethods__["axisSupportedFunction"] = _WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_get
    if _newclass:
        axisSupportedFunction = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_get, _WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisStatus_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.CoreMotionAxisStatus_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_opState_get, _WMX3ApiPython.CoreMotionAxisStatus_opState_set)
    __swig_setmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisStatus_detailOpState_set
    __swig_getmethods__["detailOpState"] = _WMX3ApiPython.CoreMotionAxisStatus_detailOpState_get
    if _newclass:
        detailOpState = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_detailOpState_get, _WMX3ApiPython.CoreMotionAxisStatus_detailOpState_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_set)
    __swig_setmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_set
    __swig_getmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_get
    if _newclass:
        axisCommandModeFeedback = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_set)
    __swig_setmethods__["axisSyncMode"] = _WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_set
    __swig_getmethods__["axisSyncMode"] = _WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_get
    if _newclass:
        axisSyncMode = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_get, _WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_set)
    __swig_setmethods__["syncOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_syncOffset_set
    __swig_getmethods__["syncOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_syncOffset_get
    if _newclass:
        syncOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_syncOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_syncOffset_set)
    __swig_setmethods__["syncPhaseOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_set
    __swig_getmethods__["syncPhaseOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_get
    if _newclass:
        syncPhaseOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_set)
    __swig_setmethods__["syncGearRatio"] = _WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_set
    __swig_getmethods__["syncGearRatio"] = _WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_get
    if _newclass:
        syncGearRatio = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_get, _WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_set)
    __swig_setmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_set
    __swig_getmethods__["followingErrorAlarm"] = _WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_get
    if _newclass:
        followingErrorAlarm = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_get, _WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_set)
    __swig_setmethods__["commandReady"] = _WMX3ApiPython.CoreMotionAxisStatus_commandReady_set
    __swig_getmethods__["commandReady"] = _WMX3ApiPython.CoreMotionAxisStatus_commandReady_get
    if _newclass:
        commandReady = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_commandReady_get, _WMX3ApiPython.CoreMotionAxisStatus_commandReady_set)
    __swig_setmethods__["waitingForTrigger"] = _WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_set
    __swig_getmethods__["waitingForTrigger"] = _WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_get
    if _newclass:
        waitingForTrigger = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_get, _WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_set)
    __swig_setmethods__["motionPaused"] = _WMX3ApiPython.CoreMotionAxisStatus_motionPaused_set
    __swig_getmethods__["motionPaused"] = _WMX3ApiPython.CoreMotionAxisStatus_motionPaused_get
    if _newclass:
        motionPaused = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_motionPaused_get, _WMX3ApiPython.CoreMotionAxisStatus_motionPaused_set)
    __swig_setmethods__["motionComplete"] = _WMX3ApiPython.CoreMotionAxisStatus_motionComplete_set
    __swig_getmethods__["motionComplete"] = _WMX3ApiPython.CoreMotionAxisStatus_motionComplete_get
    if _newclass:
        motionComplete = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_motionComplete_get, _WMX3ApiPython.CoreMotionAxisStatus_motionComplete_set)
    __swig_setmethods__["profileTotalMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_set
    __swig_getmethods__["profileTotalMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_get
    if _newclass:
        profileTotalMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_set)
    __swig_setmethods__["profileAccMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_set
    __swig_getmethods__["profileAccMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_get
    if _newclass:
        profileAccMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_set)
    __swig_setmethods__["profileCruiseMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_set
    __swig_getmethods__["profileCruiseMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_get
    if _newclass:
        profileCruiseMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_set)
    __swig_setmethods__["profileDecMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_set
    __swig_getmethods__["profileDecMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_get
    if _newclass:
        profileDecMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_set)
    __swig_setmethods__["profileRemainingMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_set
    __swig_getmethods__["profileRemainingMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_get
    if _newclass:
        profileRemainingMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_set)
    __swig_setmethods__["profileCompletedMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_set
    __swig_getmethods__["profileCompletedMilliseconds"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_get
    if _newclass:
        profileCompletedMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_set)
    __swig_setmethods__["profileTargetPos"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_set
    __swig_getmethods__["profileTargetPos"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_get
    if _newclass:
        profileTargetPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_set)
    __swig_setmethods__["profileTotalDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_set
    __swig_getmethods__["profileTotalDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_get
    if _newclass:
        profileTotalDistance = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_set)
    __swig_setmethods__["profileRemainingDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_set
    __swig_getmethods__["profileRemainingDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_get
    if _newclass:
        profileRemainingDistance = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_set)
    __swig_setmethods__["profileCompletedDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_set
    __swig_getmethods__["profileCompletedDistance"] = _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_get
    if _newclass:
        profileCompletedDistance = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_set)
    __swig_setmethods__["intplVelocity"] = _WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_set
    __swig_getmethods__["intplVelocity"] = _WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_get
    if _newclass:
        intplVelocity = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_get, _WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_set)
    __swig_setmethods__["intplSegment"] = _WMX3ApiPython.CoreMotionAxisStatus_intplSegment_set
    __swig_getmethods__["intplSegment"] = _WMX3ApiPython.CoreMotionAxisStatus_intplSegment_get
    if _newclass:
        intplSegment = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_intplSegment_get, _WMX3ApiPython.CoreMotionAxisStatus_intplSegment_set)
    __swig_setmethods__["cmdAcc"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_set
    __swig_getmethods__["cmdAcc"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_get
    if _newclass:
        cmdAcc = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_set)
    __swig_setmethods__["accFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_accFlag_set
    __swig_getmethods__["accFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_accFlag_get
    if _newclass:
        accFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_accFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_accFlag_set)
    __swig_setmethods__["decFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_decFlag_set
    __swig_getmethods__["decFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_decFlag_get
    if _newclass:
        decFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_decFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_decFlag_set)
    __swig_setmethods__["inPos"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos_set
    __swig_getmethods__["inPos"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos_get
    if _newclass:
        inPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_inPos_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos_set)
    __swig_setmethods__["inPos2"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos2_set
    __swig_getmethods__["inPos2"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos2_get
    if _newclass:
        inPos2 = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_inPos2_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos2_set)
    __swig_setmethods__["inPos3"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos3_set
    __swig_getmethods__["inPos3"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos3_get
    if _newclass:
        inPos3 = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_inPos3_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos3_set)
    __swig_setmethods__["inPos4"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos4_set
    __swig_getmethods__["inPos4"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos4_get
    if _newclass:
        inPos4 = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_inPos4_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos4_set)
    __swig_setmethods__["inPos5"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos5_set
    __swig_getmethods__["inPos5"] = _WMX3ApiPython.CoreMotionAxisStatus_inPos5_get
    if _newclass:
        inPos5 = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_inPos5_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos5_set)
    __swig_setmethods__["cmdDistributionEnd"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_set
    __swig_getmethods__["cmdDistributionEnd"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_get
    if _newclass:
        cmdDistributionEnd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_set)
    __swig_setmethods__["posSet"] = _WMX3ApiPython.CoreMotionAxisStatus_posSet_set
    __swig_getmethods__["posSet"] = _WMX3ApiPython.CoreMotionAxisStatus_posSet_get
    if _newclass:
        posSet = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_posSet_get, _WMX3ApiPython.CoreMotionAxisStatus_posSet_set)
    __swig_setmethods__["delayedPosSet"] = _WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_set
    __swig_getmethods__["delayedPosSet"] = _WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_get
    if _newclass:
        delayedPosSet = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_get, _WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_set)
    __swig_setmethods__["cmdDistributionEndDelayedPosSetDiff"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_set
    __swig_getmethods__["cmdDistributionEndDelayedPosSetDiff"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_get
    if _newclass:
        cmdDistributionEndDelayedPosSetDiff = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_set)
    __swig_setmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_positiveLS_set
    __swig_getmethods__["positiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_positiveLS_get
    if _newclass:
        positiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_positiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_positiveLS_set)
    __swig_setmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_negativeLS_set
    __swig_getmethods__["negativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_negativeLS_get
    if _newclass:
        negativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_negativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_negativeLS_set)
    __swig_setmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_set
    __swig_getmethods__["nearPositiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_get
    if _newclass:
        nearPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_set)
    __swig_setmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_set
    __swig_getmethods__["nearNegativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_get
    if _newclass:
        nearNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_set)
    __swig_setmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_set
    __swig_getmethods__["externalPositiveLS"] = _WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_get
    if _newclass:
        externalPositiveLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_set)
    __swig_setmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_set
    __swig_getmethods__["externalNegativeLS"] = _WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_get
    if _newclass:
        externalNegativeLS = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_set)
    __swig_setmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_set
    __swig_getmethods__["positiveSoftLimit"] = _WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_get
    if _newclass:
        positiveSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_get, _WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_set)
    __swig_setmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_set
    __swig_getmethods__["negativeSoftLimit"] = _WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_get
    if _newclass:
        negativeSoftLimit = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_get, _WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_set)
    __swig_setmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisStatus_homeState_set
    __swig_getmethods__["homeState"] = _WMX3ApiPython.CoreMotionAxisStatus_homeState_get
    if _newclass:
        homeState = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homeState_get, _WMX3ApiPython.CoreMotionAxisStatus_homeState_set)
    __swig_setmethods__["homeError"] = _WMX3ApiPython.CoreMotionAxisStatus_homeError_set
    __swig_getmethods__["homeError"] = _WMX3ApiPython.CoreMotionAxisStatus_homeError_get
    if _newclass:
        homeError = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homeError_get, _WMX3ApiPython.CoreMotionAxisStatus_homeError_set)
    __swig_setmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_set
    __swig_getmethods__["homeSwitch"] = _WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_get
    if _newclass:
        homeSwitch = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_set)
    __swig_setmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisStatus_homeDone_set
    __swig_getmethods__["homeDone"] = _WMX3ApiPython.CoreMotionAxisStatus_homeDone_get
    if _newclass:
        homeDone = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homeDone_get, _WMX3ApiPython.CoreMotionAxisStatus_homeDone_set)
    __swig_setmethods__["homePaused"] = _WMX3ApiPython.CoreMotionAxisStatus_homePaused_set
    __swig_getmethods__["homePaused"] = _WMX3ApiPython.CoreMotionAxisStatus_homePaused_get
    if _newclass:
        homePaused = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homePaused_get, _WMX3ApiPython.CoreMotionAxisStatus_homePaused_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_homeOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_homeOffset_set)
    __swig_setmethods__["cmdPosToFbPosFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_set
    __swig_getmethods__["cmdPosToFbPosFlag"] = _WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_get
    if _newclass:
        cmdPosToFbPosFlag = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_set)
    __swig_setmethods__["execSuperimposedMotion"] = _WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_set
    __swig_getmethods__["execSuperimposedMotion"] = _WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_get
    if _newclass:
        execSuperimposedMotion = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_get, _WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_set)
    __swig_setmethods__["singleTurnCounter"] = _WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_set
    __swig_getmethods__["singleTurnCounter"] = _WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_get
    if _newclass:
        singleTurnCounter = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_get, _WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_set)
    __swig_setmethods__["userOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffset_set
    __swig_getmethods__["userOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffset_get
    if _newclass:
        userOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_userOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffset_set)
    __swig_setmethods__["userOffsetPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_set
    __swig_getmethods__["userOffsetPosCmd"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_get
    if _newclass:
        userOffsetPosCmd = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_set)
    __swig_setmethods__["userOffsetActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_set
    __swig_getmethods__["userOffsetActualPos"] = _WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_get
    if _newclass:
        userOffsetActualPos = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_set)
    __swig_setmethods__["userVelocityOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_set
    __swig_getmethods__["userVelocityOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_get
    if _newclass:
        userVelocityOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_set)
    __swig_setmethods__["userTorqueOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_set
    __swig_getmethods__["userTorqueOffset"] = _WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_get
    if _newclass:
        userTorqueOffset = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_set)
    __swig_setmethods__["vibrationPosMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_set
    __swig_getmethods__["vibrationPosMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_get
    if _newclass:
        vibrationPosMin = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_set)
    __swig_setmethods__["vibrationPosMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_set
    __swig_getmethods__["vibrationPosMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_get
    if _newclass:
        vibrationPosMax = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_set)
    __swig_setmethods__["vibrationPosAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_set
    __swig_getmethods__["vibrationPosAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_get
    if _newclass:
        vibrationPosAvg = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_set)
    __swig_setmethods__["vibrationVelMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_set
    __swig_getmethods__["vibrationVelMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_get
    if _newclass:
        vibrationVelMin = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_set)
    __swig_setmethods__["vibrationVelMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_set
    __swig_getmethods__["vibrationVelMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_get
    if _newclass:
        vibrationVelMax = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_set)
    __swig_setmethods__["vibrationVelAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_set
    __swig_getmethods__["vibrationVelAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_get
    if _newclass:
        vibrationVelAvg = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_set)
    __swig_setmethods__["vibrationTrqMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_set
    __swig_getmethods__["vibrationTrqMin"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_get
    if _newclass:
        vibrationTrqMin = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_set)
    __swig_setmethods__["vibrationTrqMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_set
    __swig_getmethods__["vibrationTrqMax"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_get
    if _newclass:
        vibrationTrqMax = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_set)
    __swig_setmethods__["vibrationTrqAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_set
    __swig_getmethods__["vibrationTrqAvg"] = _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_get
    if _newclass:
        vibrationTrqAvg = _swig_property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionAxisStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisStatus
    __del__ = lambda self: None
CoreMotionAxisStatus_swigregister = _WMX3ApiPython.CoreMotionAxisStatus_swigregister
CoreMotionAxisStatus_swigregister(CoreMotionAxisStatus)

class CoreMotionStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotionStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotionStatus, name)
    __repr__ = _swig_repr

    def SetData(self, coreMotionStatus):
        return _WMX3ApiPython.CoreMotionStatus_SetData(self, coreMotionStatus)

    def GetData(self, coreMotionStatus):
        return _WMX3ApiPython.CoreMotionStatus_GetData(self, coreMotionStatus)
    __swig_setmethods__["invalidLicenseError"] = _WMX3ApiPython.CoreMotionStatus_invalidLicenseError_set
    __swig_getmethods__["invalidLicenseError"] = _WMX3ApiPython.CoreMotionStatus_invalidLicenseError_get
    if _newclass:
        invalidLicenseError = _swig_property(_WMX3ApiPython.CoreMotionStatus_invalidLicenseError_get, _WMX3ApiPython.CoreMotionStatus_invalidLicenseError_set)
    __swig_setmethods__["engineState"] = _WMX3ApiPython.CoreMotionStatus_engineState_set
    __swig_getmethods__["engineState"] = _WMX3ApiPython.CoreMotionStatus_engineState_get
    if _newclass:
        engineState = _swig_property(_WMX3ApiPython.CoreMotionStatus_engineState_get, _WMX3ApiPython.CoreMotionStatus_engineState_set)
    __swig_setmethods__["numOfInterrupts"] = _WMX3ApiPython.CoreMotionStatus_numOfInterrupts_set
    __swig_getmethods__["numOfInterrupts"] = _WMX3ApiPython.CoreMotionStatus_numOfInterrupts_get
    if _newclass:
        numOfInterrupts = _swig_property(_WMX3ApiPython.CoreMotionStatus_numOfInterrupts_get, _WMX3ApiPython.CoreMotionStatus_numOfInterrupts_set)
    __swig_setmethods__["cycleTimeMilliseconds"] = _WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_set
    __swig_getmethods__["cycleTimeMilliseconds"] = _WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_get
    if _newclass:
        cycleTimeMilliseconds = _swig_property(_WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_get, _WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_set)

    def SetCycleTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetCycleTimeMilliseconds(self, index, value)

    def GetCycleTimeMilliseconds(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetCycleTimeMilliseconds(self, index)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.CoreMotionStatus_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.CoreMotionStatus_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.CoreMotionStatus_cycleCounter_get, _WMX3ApiPython.CoreMotionStatus_cycleCounter_set)

    def SetCycleCounter(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetCycleCounter(self, index, value)

    def GetCycleCounter(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetCycleCounter(self, index)
    __swig_setmethods__["emergencyStop"] = _WMX3ApiPython.CoreMotionStatus_emergencyStop_set
    __swig_getmethods__["emergencyStop"] = _WMX3ApiPython.CoreMotionStatus_emergencyStop_get
    if _newclass:
        emergencyStop = _swig_property(_WMX3ApiPython.CoreMotionStatus_emergencyStop_get, _WMX3ApiPython.CoreMotionStatus_emergencyStop_set)
    __swig_setmethods__["emergencyStopLevel"] = _WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_set
    __swig_getmethods__["emergencyStopLevel"] = _WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_get
    if _newclass:
        emergencyStopLevel = _swig_property(_WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_get, _WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_set)
    __swig_setmethods__["axesStatus"] = _WMX3ApiPython.CoreMotionStatus_axesStatus_set
    __swig_getmethods__["axesStatus"] = _WMX3ApiPython.CoreMotionStatus_axesStatus_get
    if _newclass:
        axesStatus = _swig_property(_WMX3ApiPython.CoreMotionStatus_axesStatus_get, _WMX3ApiPython.CoreMotionStatus_axesStatus_set)

    def SetAxesStatus(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetAxesStatus(self, index, value)

    def GetAxesStatus(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetAxesStatus(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_CoreMotionStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionStatus
    __del__ = lambda self: None
CoreMotionStatus_swigregister = _WMX3ApiPython.CoreMotionStatus_swigregister
CoreMotionStatus_swigregister(CoreMotionStatus)

class TriggerType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerType, name)
    __repr__ = _swig_repr
    RemainingTime = _WMX3ApiPython.TriggerType_RemainingTime
    RemainingDistance = _WMX3ApiPython.TriggerType_RemainingDistance
    SameTimeCompletion = _WMX3ApiPython.TriggerType_SameTimeCompletion
    CompletedTime = _WMX3ApiPython.TriggerType_CompletedTime
    CompletedDistance = _WMX3ApiPython.TriggerType_CompletedDistance
    StaggeredTimeCompletion = _WMX3ApiPython.TriggerType_StaggeredTimeCompletion
    StaggeredDistanceCompletion = _WMX3ApiPython.TriggerType_StaggeredDistanceCompletion
    DistanceToTarget = _WMX3ApiPython.TriggerType_DistanceToTarget

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerType
    __del__ = lambda self: None
TriggerType_swigregister = _WMX3ApiPython.TriggerType_swigregister
TriggerType_swigregister(TriggerType)

class TriggerEventInputFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunction, name)
    __repr__ = _swig_repr
    IOBit = _WMX3ApiPython.TriggerEventInputFunction_IOBit
    NotIOBit = _WMX3ApiPython.TriggerEventInputFunction_NotIOBit
    OrIOBit = _WMX3ApiPython.TriggerEventInputFunction_OrIOBit
    AndIOBit = _WMX3ApiPython.TriggerEventInputFunction_AndIOBit
    XorIOBit = _WMX3ApiPython.TriggerEventInputFunction_XorIOBit
    NandIOBit = _WMX3ApiPython.TriggerEventInputFunction_NandIOBit
    NorIOBit = _WMX3ApiPython.TriggerEventInputFunction_NorIOBit
    XnorIOBit = _WMX3ApiPython.TriggerEventInputFunction_XnorIOBit
    MBit = _WMX3ApiPython.TriggerEventInputFunction_MBit
    NotMBit = _WMX3ApiPython.TriggerEventInputFunction_NotMBit
    OrMBit = _WMX3ApiPython.TriggerEventInputFunction_OrMBit
    AndMBit = _WMX3ApiPython.TriggerEventInputFunction_AndMBit
    XorMBit = _WMX3ApiPython.TriggerEventInputFunction_XorMBit
    NandMBit = _WMX3ApiPython.TriggerEventInputFunction_NandMBit
    NorMBit = _WMX3ApiPython.TriggerEventInputFunction_NorMBit
    XnorMBit = _WMX3ApiPython.TriggerEventInputFunction_XnorMBit
    Reg = _WMX3ApiPython.TriggerEventInputFunction_Reg
    NotReg = _WMX3ApiPython.TriggerEventInputFunction_NotReg
    OrReg = _WMX3ApiPython.TriggerEventInputFunction_OrReg
    AndReg = _WMX3ApiPython.TriggerEventInputFunction_AndReg
    XorReg = _WMX3ApiPython.TriggerEventInputFunction_XorReg
    NandReg = _WMX3ApiPython.TriggerEventInputFunction_NandReg
    NorReg = _WMX3ApiPython.TriggerEventInputFunction_NorReg
    XnorReg = _WMX3ApiPython.TriggerEventInputFunction_XnorReg
    EqualPos = _WMX3ApiPython.TriggerEventInputFunction_EqualPos
    GreaterPos = _WMX3ApiPython.TriggerEventInputFunction_GreaterPos
    LessPos = _WMX3ApiPython.TriggerEventInputFunction_LessPos
    EqualVelocity = _WMX3ApiPython.TriggerEventInputFunction_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.TriggerEventInputFunction_GreaterVelocity
    LessVelocity = _WMX3ApiPython.TriggerEventInputFunction_LessVelocity
    EqualTrq = _WMX3ApiPython.TriggerEventInputFunction_EqualTrq
    GreaterTrq = _WMX3ApiPython.TriggerEventInputFunction_GreaterTrq
    LessTrq = _WMX3ApiPython.TriggerEventInputFunction_LessTrq
    RemainingTime = _WMX3ApiPython.TriggerEventInputFunction_RemainingTime
    RemainingDistance = _WMX3ApiPython.TriggerEventInputFunction_RemainingDistance
    SameTimeCompletion = _WMX3ApiPython.TriggerEventInputFunction_SameTimeCompletion
    CompletedTime = _WMX3ApiPython.TriggerEventInputFunction_CompletedTime
    CompletedDistance = _WMX3ApiPython.TriggerEventInputFunction_CompletedDistance
    StaggeredTimeCompletion = _WMX3ApiPython.TriggerEventInputFunction_StaggeredTimeCompletion
    StaggeredDistanceCompletion = _WMX3ApiPython.TriggerEventInputFunction_StaggeredDistanceCompletion
    DistanceToTarget = _WMX3ApiPython.TriggerEventInputFunction_DistanceToTarget
    AxisIdle = _WMX3ApiPython.TriggerEventInputFunction_AxisIdle
    GreaterPositionError = _WMX3ApiPython.TriggerEventInputFunction_GreaterPositionError

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunction
    __del__ = lambda self: None
TriggerEventInputFunction_swigregister = _WMX3ApiPython.TriggerEventInputFunction_swigregister
TriggerEventInputFunction_swigregister(TriggerEventInputFunction)

class TriggerEventOutputFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventOutputFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventOutputFunction, name)
    __repr__ = _swig_repr
    TriggerMotion = _WMX3ApiPython.TriggerEventOutputFunction_TriggerMotion
    SetReg = _WMX3ApiPython.TriggerEventOutputFunction_SetReg

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventOutputFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunction
    __del__ = lambda self: None
TriggerEventOutputFunction_swigregister = _WMX3ApiPython.TriggerEventOutputFunction_swigregister
TriggerEventOutputFunction_swigregister(TriggerEventOutputFunction)

class BaseTriggerEventInputFunctionArguments_IOMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_IOMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_IOMulti, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetByteAddress(self, index)

    def SetIOSourceType(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetIOSourceType(self, index, value)

    def GetIOSourceType(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetIOSourceType(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_IOMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_IOMulti
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_IOMulti_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_swigregister
BaseTriggerEventInputFunctionArguments_IOMulti_swigregister(BaseTriggerEventInputFunctionArguments_IOMulti)

class BaseTriggerEventInputFunctionArguments_MMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_MMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_MMulti, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetByteAddress(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_MMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_MMulti
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_MMulti_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_swigregister
BaseTriggerEventInputFunctionArguments_MMulti_swigregister(BaseTriggerEventInputFunctionArguments_MMulti)

class BaseTriggerEventInputFunctionArguments_RegMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_RegMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_RegMulti, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regNumber"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_set
    __swig_getmethods__["regNumber"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_get
    if _newclass:
        regNumber = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_set)

    def SetRegNumber(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_SetRegNumber(self, index, value)

    def GetRegNumber(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_GetRegNumber(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_RegMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_RegMulti
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_RegMulti_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_swigregister
BaseTriggerEventInputFunctionArguments_RegMulti_swigregister(BaseTriggerEventInputFunctionArguments_RegMulti)

class BaseTriggerEventInputFunctionArguments_IOSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_IOSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_IOSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_IOSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_IOSingle
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_IOSingle_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_swigregister
BaseTriggerEventInputFunctionArguments_IOSingle_swigregister(BaseTriggerEventInputFunctionArguments_IOSingle)

class BaseTriggerEventInputFunctionArguments_MSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_MSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_MSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_MSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_MSingle
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_MSingle_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_swigregister
BaseTriggerEventInputFunctionArguments_MSingle_swigregister(BaseTriggerEventInputFunctionArguments_MSingle)

class BaseTriggerEventInputFunctionArguments_RegSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_RegSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_RegSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regNumber"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_set
    __swig_getmethods__["regNumber"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_get
    if _newclass:
        regNumber = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_RegSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_RegSingle
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_RegSingle_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_swigregister
BaseTriggerEventInputFunctionArguments_RegSingle_swigregister(BaseTriggerEventInputFunctionArguments_RegSingle)

class BaseTriggerEventInputFunctionArguments_SinglePos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_SinglePos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_SinglePos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_set)
    __swig_setmethods__["disablePositiveDirection"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_set
    __swig_getmethods__["disablePositiveDirection"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_get
    if _newclass:
        disablePositiveDirection = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_set)
    __swig_setmethods__["disableNegativeDirection"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_set
    __swig_getmethods__["disableNegativeDirection"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_get
    if _newclass:
        disableNegativeDirection = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SinglePos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SinglePos
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_SinglePos_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_swigregister
BaseTriggerEventInputFunctionArguments_SinglePos_swigregister(BaseTriggerEventInputFunctionArguments_SinglePos)

class BaseTriggerEventInputFunctionArguments_SingleVelocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_SingleVelocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_SingleVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SingleVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SingleVelocity
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_SingleVelocity_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_swigregister
BaseTriggerEventInputFunctionArguments_SingleVelocity_swigregister(BaseTriggerEventInputFunctionArguments_SingleVelocity)

class BaseTriggerEventInputFunctionArguments_SingleTrq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseTriggerEventInputFunctionArguments_SingleTrq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseTriggerEventInputFunctionArguments_SingleTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_set)
    __swig_setmethods__["trq"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_set
    __swig_getmethods__["trq"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_get
    if _newclass:
        trq = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SingleTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SingleTrq
    __del__ = lambda self: None
BaseTriggerEventInputFunctionArguments_SingleTrq_swigregister = _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_swigregister
BaseTriggerEventInputFunctionArguments_SingleTrq_swigregister(BaseTriggerEventInputFunctionArguments_SingleTrq)

class TriggerEventInputFunctionArguments_IOBit(BaseTriggerEventInputFunctionArguments_IOSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_IOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_IOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_IOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_IOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_IOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_IOBit_swigregister
TriggerEventInputFunctionArguments_IOBit_swigregister(TriggerEventInputFunctionArguments_IOBit)

class TriggerEventInputFunctionArguments_NotIOBit(BaseTriggerEventInputFunctionArguments_IOSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NotIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NotIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NotIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NotIOBit_swigregister
TriggerEventInputFunctionArguments_NotIOBit_swigregister(TriggerEventInputFunctionArguments_NotIOBit)

class TriggerEventInputFunctionArguments_OrIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_OrIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_OrIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_OrIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_OrIOBit_swigregister
TriggerEventInputFunctionArguments_OrIOBit_swigregister(TriggerEventInputFunctionArguments_OrIOBit)

class TriggerEventInputFunctionArguments_AndIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_AndIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_AndIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_AndIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_AndIOBit_swigregister
TriggerEventInputFunctionArguments_AndIOBit_swigregister(TriggerEventInputFunctionArguments_AndIOBit)

class TriggerEventInputFunctionArguments_XorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XorIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XorIOBit_swigregister
TriggerEventInputFunctionArguments_XorIOBit_swigregister(TriggerEventInputFunctionArguments_XorIOBit)

class TriggerEventInputFunctionArguments_NandIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NandIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NandIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NandIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NandIOBit_swigregister
TriggerEventInputFunctionArguments_NandIOBit_swigregister(TriggerEventInputFunctionArguments_NandIOBit)

class TriggerEventInputFunctionArguments_NorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NorIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NorIOBit_swigregister
TriggerEventInputFunctionArguments_NorIOBit_swigregister(TriggerEventInputFunctionArguments_NorIOBit)

class TriggerEventInputFunctionArguments_XnorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XnorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XnorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorIOBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XnorIOBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorIOBit_swigregister
TriggerEventInputFunctionArguments_XnorIOBit_swigregister(TriggerEventInputFunctionArguments_XnorIOBit)

class TriggerEventInputFunctionArguments_MBit(BaseTriggerEventInputFunctionArguments_MSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_MBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_MBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_MBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_MBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_MBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_MBit_swigregister
TriggerEventInputFunctionArguments_MBit_swigregister(TriggerEventInputFunctionArguments_MBit)

class TriggerEventInputFunctionArguments_NotMBit(BaseTriggerEventInputFunctionArguments_MSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NotMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NotMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NotMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NotMBit_swigregister
TriggerEventInputFunctionArguments_NotMBit_swigregister(TriggerEventInputFunctionArguments_NotMBit)

class TriggerEventInputFunctionArguments_OrMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_OrMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_OrMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_OrMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_OrMBit_swigregister
TriggerEventInputFunctionArguments_OrMBit_swigregister(TriggerEventInputFunctionArguments_OrMBit)

class TriggerEventInputFunctionArguments_AndMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_AndMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_AndMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_AndMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_AndMBit_swigregister
TriggerEventInputFunctionArguments_AndMBit_swigregister(TriggerEventInputFunctionArguments_AndMBit)

class TriggerEventInputFunctionArguments_XorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XorMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XorMBit_swigregister
TriggerEventInputFunctionArguments_XorMBit_swigregister(TriggerEventInputFunctionArguments_XorMBit)

class TriggerEventInputFunctionArguments_NandMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NandMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NandMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NandMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NandMBit_swigregister
TriggerEventInputFunctionArguments_NandMBit_swigregister(TriggerEventInputFunctionArguments_NandMBit)

class TriggerEventInputFunctionArguments_NorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NorMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NorMBit_swigregister
TriggerEventInputFunctionArguments_NorMBit_swigregister(TriggerEventInputFunctionArguments_NorMBit)

class TriggerEventInputFunctionArguments_XnorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XnorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XnorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorMBit
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XnorMBit_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorMBit_swigregister
TriggerEventInputFunctionArguments_XnorMBit_swigregister(TriggerEventInputFunctionArguments_XnorMBit)

class TriggerEventInputFunctionArguments_Reg(BaseTriggerEventInputFunctionArguments_RegSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_Reg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_Reg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_Reg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_Reg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_Reg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_Reg_swigregister
TriggerEventInputFunctionArguments_Reg_swigregister(TriggerEventInputFunctionArguments_Reg)

class TriggerEventInputFunctionArguments_NotReg(BaseTriggerEventInputFunctionArguments_RegSingle):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NotReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NotReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NotReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NotReg_swigregister
TriggerEventInputFunctionArguments_NotReg_swigregister(TriggerEventInputFunctionArguments_NotReg)

class TriggerEventInputFunctionArguments_OrReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_OrReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_OrReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_OrReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_OrReg_swigregister
TriggerEventInputFunctionArguments_OrReg_swigregister(TriggerEventInputFunctionArguments_OrReg)

class TriggerEventInputFunctionArguments_AndReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_AndReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_AndReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_AndReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_AndReg_swigregister
TriggerEventInputFunctionArguments_AndReg_swigregister(TriggerEventInputFunctionArguments_AndReg)

class TriggerEventInputFunctionArguments_XorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XorReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XorReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XorReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XorReg_swigregister
TriggerEventInputFunctionArguments_XorReg_swigregister(TriggerEventInputFunctionArguments_XorReg)

class TriggerEventInputFunctionArguments_NandReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NandReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NandReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NandReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NandReg_swigregister
TriggerEventInputFunctionArguments_NandReg_swigregister(TriggerEventInputFunctionArguments_NandReg)

class TriggerEventInputFunctionArguments_NorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_NorReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_NorReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_NorReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_NorReg_swigregister
TriggerEventInputFunctionArguments_NorReg_swigregister(TriggerEventInputFunctionArguments_NorReg)

class TriggerEventInputFunctionArguments_XnorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_XnorReg, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_RegMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_XnorReg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorReg
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_XnorReg_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorReg_swigregister
TriggerEventInputFunctionArguments_XnorReg_swigregister(TriggerEventInputFunctionArguments_XnorReg)

class TriggerEventInputFunctionArguments_EqualPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_EqualPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_EqualPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualPos
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_EqualPos_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_swigregister
TriggerEventInputFunctionArguments_EqualPos_swigregister(TriggerEventInputFunctionArguments_EqualPos)

class TriggerEventInputFunctionArguments_GreaterPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_GreaterPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_GreaterPos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterPos
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_GreaterPos_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPos_swigregister
TriggerEventInputFunctionArguments_GreaterPos_swigregister(TriggerEventInputFunctionArguments_GreaterPos)

class TriggerEventInputFunctionArguments_LessPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_LessPos, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SinglePos]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_LessPos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessPos
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_LessPos_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_LessPos_swigregister
TriggerEventInputFunctionArguments_LessPos_swigregister(TriggerEventInputFunctionArguments_LessPos)

class TriggerEventInputFunctionArguments_EqualVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_EqualVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_EqualVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualVelocity
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_EqualVelocity_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_swigregister
TriggerEventInputFunctionArguments_EqualVelocity_swigregister(TriggerEventInputFunctionArguments_EqualVelocity)

class TriggerEventInputFunctionArguments_GreaterVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_GreaterVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_GreaterVelocity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterVelocity
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_GreaterVelocity_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterVelocity_swigregister
TriggerEventInputFunctionArguments_GreaterVelocity_swigregister(TriggerEventInputFunctionArguments_GreaterVelocity)

class TriggerEventInputFunctionArguments_LessVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_LessVelocity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleVelocity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_LessVelocity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessVelocity
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_LessVelocity_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_LessVelocity_swigregister
TriggerEventInputFunctionArguments_LessVelocity_swigregister(TriggerEventInputFunctionArguments_LessVelocity)

class TriggerEventInputFunctionArguments_EqualTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_EqualTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_EqualTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualTrq
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_EqualTrq_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_swigregister
TriggerEventInputFunctionArguments_EqualTrq_swigregister(TriggerEventInputFunctionArguments_EqualTrq)

class TriggerEventInputFunctionArguments_GreaterTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_GreaterTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_GreaterTrq, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterTrq
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_GreaterTrq_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterTrq_swigregister
TriggerEventInputFunctionArguments_GreaterTrq_swigregister(TriggerEventInputFunctionArguments_GreaterTrq)

class TriggerEventInputFunctionArguments_LessTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    __swig_setmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_LessTrq, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseTriggerEventInputFunctionArguments_SingleTrq]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_LessTrq, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessTrq
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_LessTrq_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_LessTrq_swigregister
TriggerEventInputFunctionArguments_LessTrq_swigregister(TriggerEventInputFunctionArguments_LessTrq)

class TriggerEventInputFunctionArguments_RemainingTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_RemainingTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_RemainingTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_RemainingTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_RemainingTime
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_RemainingTime_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_swigregister
TriggerEventInputFunctionArguments_RemainingTime_swigregister(TriggerEventInputFunctionArguments_RemainingTime)

class TriggerEventInputFunctionArguments_RemainingDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_RemainingDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_RemainingDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_RemainingDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_RemainingDistance
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_RemainingDistance_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_swigregister
TriggerEventInputFunctionArguments_RemainingDistance_swigregister(TriggerEventInputFunctionArguments_RemainingDistance)

class TriggerEventInputFunctionArguments_SameTimeCompletion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_SameTimeCompletion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_SameTimeCompletion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_SameTimeCompletion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_SameTimeCompletion
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_SameTimeCompletion_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_swigregister
TriggerEventInputFunctionArguments_SameTimeCompletion_swigregister(TriggerEventInputFunctionArguments_SameTimeCompletion)

class TriggerEventInputFunctionArguments_CompletedTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_CompletedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_CompletedTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_set)
    __swig_setmethods__["timeMilliSeconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_set
    __swig_getmethods__["timeMilliSeconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_get
    if _newclass:
        timeMilliSeconds = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_CompletedTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_CompletedTime
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_CompletedTime_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_swigregister
TriggerEventInputFunctionArguments_CompletedTime_swigregister(TriggerEventInputFunctionArguments_CompletedTime)

class TriggerEventInputFunctionArguments_CompletedDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_CompletedDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_CompletedDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_CompletedDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_CompletedDistance
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_CompletedDistance_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_swigregister
TriggerEventInputFunctionArguments_CompletedDistance_swigregister(TriggerEventInputFunctionArguments_CompletedDistance)

class TriggerEventInputFunctionArguments_StaggeredTimeCompletion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_StaggeredTimeCompletion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_StaggeredTimeCompletion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_StaggeredTimeCompletion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_StaggeredTimeCompletion
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_StaggeredTimeCompletion_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_swigregister
TriggerEventInputFunctionArguments_StaggeredTimeCompletion_swigregister(TriggerEventInputFunctionArguments_StaggeredTimeCompletion)

class TriggerEventInputFunctionArguments_StaggeredDistanceCompletion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_StaggeredDistanceCompletion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_StaggeredDistanceCompletion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_StaggeredDistanceCompletion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_StaggeredDistanceCompletion
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_swigregister
TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_swigregister(TriggerEventInputFunctionArguments_StaggeredDistanceCompletion)

class TriggerEventInputFunctionArguments_DistanceToTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_DistanceToTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_DistanceToTarget, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_DistanceToTarget()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_DistanceToTarget
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_DistanceToTarget_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_swigregister
TriggerEventInputFunctionArguments_DistanceToTarget_swigregister(TriggerEventInputFunctionArguments_DistanceToTarget)

class TriggerEventInputFunctionArguments_AxisIdle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_AxisIdle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_AxisIdle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AxisIdle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AxisIdle
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_AxisIdle_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_AxisIdle_swigregister
TriggerEventInputFunctionArguments_AxisIdle_swigregister(TriggerEventInputFunctionArguments_AxisIdle)

class TriggerEventInputFunctionArguments_GreaterPositionError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventInputFunctionArguments_GreaterPositionError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventInputFunctionArguments_GreaterPositionError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_invert_set)
    __swig_setmethods__["posError"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_posError_set
    __swig_getmethods__["posError"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_posError_get
    if _newclass:
        posError = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_posError_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_posError_set)
    __swig_setmethods__["useActualFollowingError"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_set
    __swig_getmethods__["useActualFollowingError"] = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_get
    if _newclass:
        useActualFollowingError = _swig_property(_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_useActualFollowingError_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterPositionError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterPositionError
    __del__ = lambda self: None
TriggerEventInputFunctionArguments_GreaterPositionError_swigregister = _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPositionError_swigregister
TriggerEventInputFunctionArguments_GreaterPositionError_swigregister(TriggerEventInputFunctionArguments_GreaterPositionError)

class TriggerEventOutputFunctionArguments_TriggerMotion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventOutputFunctionArguments_TriggerMotion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventOutputFunctionArguments_TriggerMotion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_get, _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventOutputFunctionArguments_TriggerMotion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunctionArguments_TriggerMotion
    __del__ = lambda self: None
TriggerEventOutputFunctionArguments_TriggerMotion_swigregister = _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_swigregister
TriggerEventOutputFunctionArguments_TriggerMotion_swigregister(TriggerEventOutputFunctionArguments_TriggerMotion)

class TriggerEventOutputFunctionArguments_SetReg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEventOutputFunctionArguments_SetReg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEventOutputFunctionArguments_SetReg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regNumber"] = _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_set
    __swig_getmethods__["regNumber"] = _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_get
    if _newclass:
        regNumber = _swig_property(_WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_get, _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEventOutputFunctionArguments_SetReg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunctionArguments_SetReg
    __del__ = lambda self: None
TriggerEventOutputFunctionArguments_SetReg_swigregister = _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_swigregister
TriggerEventOutputFunctionArguments_SetReg_swigregister(TriggerEventOutputFunctionArguments_SetReg)

class TriggerEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEvent, name)
    __repr__ = _swig_repr

    def SetData(self, pTriggerEvent):
        return _WMX3ApiPython.TriggerEvent_SetData(self, pTriggerEvent)

    def GetData(self, pTriggerEvent):
        return _WMX3ApiPython.TriggerEvent_GetData(self, pTriggerEvent)
    __swig_setmethods__["inputFunction"] = _WMX3ApiPython.TriggerEvent_inputFunction_set
    __swig_getmethods__["inputFunction"] = _WMX3ApiPython.TriggerEvent_inputFunction_get
    if _newclass:
        inputFunction = _swig_property(_WMX3ApiPython.TriggerEvent_inputFunction_get, _WMX3ApiPython.TriggerEvent_inputFunction_set)
    __swig_setmethods__["outputFunction"] = _WMX3ApiPython.TriggerEvent_outputFunction_set
    __swig_getmethods__["outputFunction"] = _WMX3ApiPython.TriggerEvent_outputFunction_get
    if _newclass:
        outputFunction = _swig_property(_WMX3ApiPython.TriggerEvent_outputFunction_get, _WMX3ApiPython.TriggerEvent_outputFunction_set)
    __swig_setmethods__["input_ioBit"] = _WMX3ApiPython.TriggerEvent_input_ioBit_set
    __swig_getmethods__["input_ioBit"] = _WMX3ApiPython.TriggerEvent_input_ioBit_get
    if _newclass:
        input_ioBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_ioBit_get, _WMX3ApiPython.TriggerEvent_input_ioBit_set)
    __swig_setmethods__["input_notIOBit"] = _WMX3ApiPython.TriggerEvent_input_notIOBit_set
    __swig_getmethods__["input_notIOBit"] = _WMX3ApiPython.TriggerEvent_input_notIOBit_get
    if _newclass:
        input_notIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_notIOBit_get, _WMX3ApiPython.TriggerEvent_input_notIOBit_set)
    __swig_setmethods__["input_orIOBit"] = _WMX3ApiPython.TriggerEvent_input_orIOBit_set
    __swig_getmethods__["input_orIOBit"] = _WMX3ApiPython.TriggerEvent_input_orIOBit_get
    if _newclass:
        input_orIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_orIOBit_get, _WMX3ApiPython.TriggerEvent_input_orIOBit_set)
    __swig_setmethods__["input_andIOBit"] = _WMX3ApiPython.TriggerEvent_input_andIOBit_set
    __swig_getmethods__["input_andIOBit"] = _WMX3ApiPython.TriggerEvent_input_andIOBit_get
    if _newclass:
        input_andIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_andIOBit_get, _WMX3ApiPython.TriggerEvent_input_andIOBit_set)
    __swig_setmethods__["input_xorIOBit"] = _WMX3ApiPython.TriggerEvent_input_xorIOBit_set
    __swig_getmethods__["input_xorIOBit"] = _WMX3ApiPython.TriggerEvent_input_xorIOBit_get
    if _newclass:
        input_xorIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_xorIOBit_get, _WMX3ApiPython.TriggerEvent_input_xorIOBit_set)
    __swig_setmethods__["input_nandIOBit"] = _WMX3ApiPython.TriggerEvent_input_nandIOBit_set
    __swig_getmethods__["input_nandIOBit"] = _WMX3ApiPython.TriggerEvent_input_nandIOBit_get
    if _newclass:
        input_nandIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_nandIOBit_get, _WMX3ApiPython.TriggerEvent_input_nandIOBit_set)
    __swig_setmethods__["input_norIOBit"] = _WMX3ApiPython.TriggerEvent_input_norIOBit_set
    __swig_getmethods__["input_norIOBit"] = _WMX3ApiPython.TriggerEvent_input_norIOBit_get
    if _newclass:
        input_norIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_norIOBit_get, _WMX3ApiPython.TriggerEvent_input_norIOBit_set)
    __swig_setmethods__["input_xnorIOBit"] = _WMX3ApiPython.TriggerEvent_input_xnorIOBit_set
    __swig_getmethods__["input_xnorIOBit"] = _WMX3ApiPython.TriggerEvent_input_xnorIOBit_get
    if _newclass:
        input_xnorIOBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_xnorIOBit_get, _WMX3ApiPython.TriggerEvent_input_xnorIOBit_set)
    __swig_setmethods__["input_mBit"] = _WMX3ApiPython.TriggerEvent_input_mBit_set
    __swig_getmethods__["input_mBit"] = _WMX3ApiPython.TriggerEvent_input_mBit_get
    if _newclass:
        input_mBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_mBit_get, _WMX3ApiPython.TriggerEvent_input_mBit_set)
    __swig_setmethods__["input_notMBit"] = _WMX3ApiPython.TriggerEvent_input_notMBit_set
    __swig_getmethods__["input_notMBit"] = _WMX3ApiPython.TriggerEvent_input_notMBit_get
    if _newclass:
        input_notMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_notMBit_get, _WMX3ApiPython.TriggerEvent_input_notMBit_set)
    __swig_setmethods__["input_orMBit"] = _WMX3ApiPython.TriggerEvent_input_orMBit_set
    __swig_getmethods__["input_orMBit"] = _WMX3ApiPython.TriggerEvent_input_orMBit_get
    if _newclass:
        input_orMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_orMBit_get, _WMX3ApiPython.TriggerEvent_input_orMBit_set)
    __swig_setmethods__["input_andMBit"] = _WMX3ApiPython.TriggerEvent_input_andMBit_set
    __swig_getmethods__["input_andMBit"] = _WMX3ApiPython.TriggerEvent_input_andMBit_get
    if _newclass:
        input_andMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_andMBit_get, _WMX3ApiPython.TriggerEvent_input_andMBit_set)
    __swig_setmethods__["input_xorMBit"] = _WMX3ApiPython.TriggerEvent_input_xorMBit_set
    __swig_getmethods__["input_xorMBit"] = _WMX3ApiPython.TriggerEvent_input_xorMBit_get
    if _newclass:
        input_xorMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_xorMBit_get, _WMX3ApiPython.TriggerEvent_input_xorMBit_set)
    __swig_setmethods__["input_nandMBit"] = _WMX3ApiPython.TriggerEvent_input_nandMBit_set
    __swig_getmethods__["input_nandMBit"] = _WMX3ApiPython.TriggerEvent_input_nandMBit_get
    if _newclass:
        input_nandMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_nandMBit_get, _WMX3ApiPython.TriggerEvent_input_nandMBit_set)
    __swig_setmethods__["input_norMBit"] = _WMX3ApiPython.TriggerEvent_input_norMBit_set
    __swig_getmethods__["input_norMBit"] = _WMX3ApiPython.TriggerEvent_input_norMBit_get
    if _newclass:
        input_norMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_norMBit_get, _WMX3ApiPython.TriggerEvent_input_norMBit_set)
    __swig_setmethods__["input_xnorMBit"] = _WMX3ApiPython.TriggerEvent_input_xnorMBit_set
    __swig_getmethods__["input_xnorMBit"] = _WMX3ApiPython.TriggerEvent_input_xnorMBit_get
    if _newclass:
        input_xnorMBit = _swig_property(_WMX3ApiPython.TriggerEvent_input_xnorMBit_get, _WMX3ApiPython.TriggerEvent_input_xnorMBit_set)
    __swig_setmethods__["input_reg"] = _WMX3ApiPython.TriggerEvent_input_reg_set
    __swig_getmethods__["input_reg"] = _WMX3ApiPython.TriggerEvent_input_reg_get
    if _newclass:
        input_reg = _swig_property(_WMX3ApiPython.TriggerEvent_input_reg_get, _WMX3ApiPython.TriggerEvent_input_reg_set)
    __swig_setmethods__["input_notReg"] = _WMX3ApiPython.TriggerEvent_input_notReg_set
    __swig_getmethods__["input_notReg"] = _WMX3ApiPython.TriggerEvent_input_notReg_get
    if _newclass:
        input_notReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_notReg_get, _WMX3ApiPython.TriggerEvent_input_notReg_set)
    __swig_setmethods__["input_orReg"] = _WMX3ApiPython.TriggerEvent_input_orReg_set
    __swig_getmethods__["input_orReg"] = _WMX3ApiPython.TriggerEvent_input_orReg_get
    if _newclass:
        input_orReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_orReg_get, _WMX3ApiPython.TriggerEvent_input_orReg_set)
    __swig_setmethods__["input_andReg"] = _WMX3ApiPython.TriggerEvent_input_andReg_set
    __swig_getmethods__["input_andReg"] = _WMX3ApiPython.TriggerEvent_input_andReg_get
    if _newclass:
        input_andReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_andReg_get, _WMX3ApiPython.TriggerEvent_input_andReg_set)
    __swig_setmethods__["input_xorReg"] = _WMX3ApiPython.TriggerEvent_input_xorReg_set
    __swig_getmethods__["input_xorReg"] = _WMX3ApiPython.TriggerEvent_input_xorReg_get
    if _newclass:
        input_xorReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_xorReg_get, _WMX3ApiPython.TriggerEvent_input_xorReg_set)
    __swig_setmethods__["input_nandReg"] = _WMX3ApiPython.TriggerEvent_input_nandReg_set
    __swig_getmethods__["input_nandReg"] = _WMX3ApiPython.TriggerEvent_input_nandReg_get
    if _newclass:
        input_nandReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_nandReg_get, _WMX3ApiPython.TriggerEvent_input_nandReg_set)
    __swig_setmethods__["input_norReg"] = _WMX3ApiPython.TriggerEvent_input_norReg_set
    __swig_getmethods__["input_norReg"] = _WMX3ApiPython.TriggerEvent_input_norReg_get
    if _newclass:
        input_norReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_norReg_get, _WMX3ApiPython.TriggerEvent_input_norReg_set)
    __swig_setmethods__["input_xnorReg"] = _WMX3ApiPython.TriggerEvent_input_xnorReg_set
    __swig_getmethods__["input_xnorReg"] = _WMX3ApiPython.TriggerEvent_input_xnorReg_get
    if _newclass:
        input_xnorReg = _swig_property(_WMX3ApiPython.TriggerEvent_input_xnorReg_get, _WMX3ApiPython.TriggerEvent_input_xnorReg_set)
    __swig_setmethods__["input_equalPos"] = _WMX3ApiPython.TriggerEvent_input_equalPos_set
    __swig_getmethods__["input_equalPos"] = _WMX3ApiPython.TriggerEvent_input_equalPos_get
    if _newclass:
        input_equalPos = _swig_property(_WMX3ApiPython.TriggerEvent_input_equalPos_get, _WMX3ApiPython.TriggerEvent_input_equalPos_set)
    __swig_setmethods__["input_greaterPos"] = _WMX3ApiPython.TriggerEvent_input_greaterPos_set
    __swig_getmethods__["input_greaterPos"] = _WMX3ApiPython.TriggerEvent_input_greaterPos_get
    if _newclass:
        input_greaterPos = _swig_property(_WMX3ApiPython.TriggerEvent_input_greaterPos_get, _WMX3ApiPython.TriggerEvent_input_greaterPos_set)
    __swig_setmethods__["input_lessPos"] = _WMX3ApiPython.TriggerEvent_input_lessPos_set
    __swig_getmethods__["input_lessPos"] = _WMX3ApiPython.TriggerEvent_input_lessPos_get
    if _newclass:
        input_lessPos = _swig_property(_WMX3ApiPython.TriggerEvent_input_lessPos_get, _WMX3ApiPython.TriggerEvent_input_lessPos_set)
    __swig_setmethods__["input_equalVelocity"] = _WMX3ApiPython.TriggerEvent_input_equalVelocity_set
    __swig_getmethods__["input_equalVelocity"] = _WMX3ApiPython.TriggerEvent_input_equalVelocity_get
    if _newclass:
        input_equalVelocity = _swig_property(_WMX3ApiPython.TriggerEvent_input_equalVelocity_get, _WMX3ApiPython.TriggerEvent_input_equalVelocity_set)
    __swig_setmethods__["input_greaterVelocity"] = _WMX3ApiPython.TriggerEvent_input_greaterVelocity_set
    __swig_getmethods__["input_greaterVelocity"] = _WMX3ApiPython.TriggerEvent_input_greaterVelocity_get
    if _newclass:
        input_greaterVelocity = _swig_property(_WMX3ApiPython.TriggerEvent_input_greaterVelocity_get, _WMX3ApiPython.TriggerEvent_input_greaterVelocity_set)
    __swig_setmethods__["input_lessVelocity"] = _WMX3ApiPython.TriggerEvent_input_lessVelocity_set
    __swig_getmethods__["input_lessVelocity"] = _WMX3ApiPython.TriggerEvent_input_lessVelocity_get
    if _newclass:
        input_lessVelocity = _swig_property(_WMX3ApiPython.TriggerEvent_input_lessVelocity_get, _WMX3ApiPython.TriggerEvent_input_lessVelocity_set)
    __swig_setmethods__["input_equalTrq"] = _WMX3ApiPython.TriggerEvent_input_equalTrq_set
    __swig_getmethods__["input_equalTrq"] = _WMX3ApiPython.TriggerEvent_input_equalTrq_get
    if _newclass:
        input_equalTrq = _swig_property(_WMX3ApiPython.TriggerEvent_input_equalTrq_get, _WMX3ApiPython.TriggerEvent_input_equalTrq_set)
    __swig_setmethods__["input_greaterTrq"] = _WMX3ApiPython.TriggerEvent_input_greaterTrq_set
    __swig_getmethods__["input_greaterTrq"] = _WMX3ApiPython.TriggerEvent_input_greaterTrq_get
    if _newclass:
        input_greaterTrq = _swig_property(_WMX3ApiPython.TriggerEvent_input_greaterTrq_get, _WMX3ApiPython.TriggerEvent_input_greaterTrq_set)
    __swig_setmethods__["input_lessTrq"] = _WMX3ApiPython.TriggerEvent_input_lessTrq_set
    __swig_getmethods__["input_lessTrq"] = _WMX3ApiPython.TriggerEvent_input_lessTrq_get
    if _newclass:
        input_lessTrq = _swig_property(_WMX3ApiPython.TriggerEvent_input_lessTrq_get, _WMX3ApiPython.TriggerEvent_input_lessTrq_set)
    __swig_setmethods__["input_remainingTime"] = _WMX3ApiPython.TriggerEvent_input_remainingTime_set
    __swig_getmethods__["input_remainingTime"] = _WMX3ApiPython.TriggerEvent_input_remainingTime_get
    if _newclass:
        input_remainingTime = _swig_property(_WMX3ApiPython.TriggerEvent_input_remainingTime_get, _WMX3ApiPython.TriggerEvent_input_remainingTime_set)
    __swig_setmethods__["input_remainingDistance"] = _WMX3ApiPython.TriggerEvent_input_remainingDistance_set
    __swig_getmethods__["input_remainingDistance"] = _WMX3ApiPython.TriggerEvent_input_remainingDistance_get
    if _newclass:
        input_remainingDistance = _swig_property(_WMX3ApiPython.TriggerEvent_input_remainingDistance_get, _WMX3ApiPython.TriggerEvent_input_remainingDistance_set)
    __swig_setmethods__["input_sameTimeCompletion"] = _WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_set
    __swig_getmethods__["input_sameTimeCompletion"] = _WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_get
    if _newclass:
        input_sameTimeCompletion = _swig_property(_WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_get, _WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_set)
    __swig_setmethods__["input_completedTime"] = _WMX3ApiPython.TriggerEvent_input_completedTime_set
    __swig_getmethods__["input_completedTime"] = _WMX3ApiPython.TriggerEvent_input_completedTime_get
    if _newclass:
        input_completedTime = _swig_property(_WMX3ApiPython.TriggerEvent_input_completedTime_get, _WMX3ApiPython.TriggerEvent_input_completedTime_set)
    __swig_setmethods__["input_completedDistance"] = _WMX3ApiPython.TriggerEvent_input_completedDistance_set
    __swig_getmethods__["input_completedDistance"] = _WMX3ApiPython.TriggerEvent_input_completedDistance_get
    if _newclass:
        input_completedDistance = _swig_property(_WMX3ApiPython.TriggerEvent_input_completedDistance_get, _WMX3ApiPython.TriggerEvent_input_completedDistance_set)
    __swig_setmethods__["input_staggeredTimeCompletion"] = _WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_set
    __swig_getmethods__["input_staggeredTimeCompletion"] = _WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_get
    if _newclass:
        input_staggeredTimeCompletion = _swig_property(_WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_get, _WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_set)
    __swig_setmethods__["input_staggeredDistanceCompletion"] = _WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_set
    __swig_getmethods__["input_staggeredDistanceCompletion"] = _WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_get
    if _newclass:
        input_staggeredDistanceCompletion = _swig_property(_WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_get, _WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_set)
    __swig_setmethods__["input_DistanceToTarget"] = _WMX3ApiPython.TriggerEvent_input_DistanceToTarget_set
    __swig_getmethods__["input_DistanceToTarget"] = _WMX3ApiPython.TriggerEvent_input_DistanceToTarget_get
    if _newclass:
        input_DistanceToTarget = _swig_property(_WMX3ApiPython.TriggerEvent_input_DistanceToTarget_get, _WMX3ApiPython.TriggerEvent_input_DistanceToTarget_set)
    __swig_setmethods__["output_triggerMotion"] = _WMX3ApiPython.TriggerEvent_output_triggerMotion_set
    __swig_getmethods__["output_triggerMotion"] = _WMX3ApiPython.TriggerEvent_output_triggerMotion_get
    if _newclass:
        output_triggerMotion = _swig_property(_WMX3ApiPython.TriggerEvent_output_triggerMotion_get, _WMX3ApiPython.TriggerEvent_output_triggerMotion_set)
    __swig_setmethods__["output_setReg"] = _WMX3ApiPython.TriggerEvent_output_setReg_set
    __swig_getmethods__["output_setReg"] = _WMX3ApiPython.TriggerEvent_output_setReg_get
    if _newclass:
        output_setReg = _swig_property(_WMX3ApiPython.TriggerEvent_output_setReg_get, _WMX3ApiPython.TriggerEvent_output_setReg_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEvent
    __del__ = lambda self: None
TriggerEvent_swigregister = _WMX3ApiPython.TriggerEvent_swigregister
TriggerEvent_swigregister(TriggerEvent)

class TriggerEvents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerEvents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerEvents, name)
    __repr__ = _swig_repr

    def SetData(self, pTriggerEvents):
        return _WMX3ApiPython.TriggerEvents_SetData(self, pTriggerEvents)

    def GetData(self, pTriggerEvents):
        return _WMX3ApiPython.TriggerEvents_GetData(self, pTriggerEvents)
    __swig_setmethods__["numEvents"] = _WMX3ApiPython.TriggerEvents_numEvents_set
    __swig_getmethods__["numEvents"] = _WMX3ApiPython.TriggerEvents_numEvents_get
    if _newclass:
        numEvents = _swig_property(_WMX3ApiPython.TriggerEvents_numEvents_get, _WMX3ApiPython.TriggerEvents_numEvents_set)
    __swig_setmethods__["event"] = _WMX3ApiPython.TriggerEvents_event_set
    __swig_getmethods__["event"] = _WMX3ApiPython.TriggerEvents_event_get
    if _newclass:
        event = _swig_property(_WMX3ApiPython.TriggerEvents_event_get, _WMX3ApiPython.TriggerEvents_event_set)

    def SetEvent(self, index, value):
        return _WMX3ApiPython.TriggerEvents_SetEvent(self, index, value)

    def GetEvent(self, index):
        return _WMX3ApiPython.TriggerEvents_GetEvent(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_TriggerEvents()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEvents
    __del__ = lambda self: None
TriggerEvents_swigregister = _WMX3ApiPython.TriggerEvents_swigregister
TriggerEvents_swigregister(TriggerEvents)

class Trigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)
    __repr__ = _swig_repr

    def SetData(self, pTrigger):
        return _WMX3ApiPython.Trigger_SetData(self, pTrigger)

    def GetData(self, pTrigger):
        return _WMX3ApiPython.Trigger_GetData(self, pTrigger)
    __swig_setmethods__["triggerAxis"] = _WMX3ApiPython.Trigger_triggerAxis_set
    __swig_getmethods__["triggerAxis"] = _WMX3ApiPython.Trigger_triggerAxis_get
    if _newclass:
        triggerAxis = _swig_property(_WMX3ApiPython.Trigger_triggerAxis_get, _WMX3ApiPython.Trigger_triggerAxis_set)
    __swig_setmethods__["triggerType"] = _WMX3ApiPython.Trigger_triggerType_set
    __swig_getmethods__["triggerType"] = _WMX3ApiPython.Trigger_triggerType_get
    if _newclass:
        triggerType = _swig_property(_WMX3ApiPython.Trigger_triggerType_get, _WMX3ApiPython.Trigger_triggerType_set)
    __swig_setmethods__["triggerValue"] = _WMX3ApiPython.Trigger_triggerValue_set
    __swig_getmethods__["triggerValue"] = _WMX3ApiPython.Trigger_triggerValue_get
    if _newclass:
        triggerValue = _swig_property(_WMX3ApiPython.Trigger_triggerValue_get, _WMX3ApiPython.Trigger_triggerValue_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Trigger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Trigger
    __del__ = lambda self: None
Trigger_swigregister = _WMX3ApiPython.Trigger_swigregister
Trigger_swigregister(Trigger)

class AxisControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisControl, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_AxisControl(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AxisControl
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.AxisControl_IsDeviceValid(self)

    def SetServoOn(self, axis, newStatus):
        return _WMX3ApiPython.AxisControl_SetServoOn(self, axis, newStatus)

    def SetServoOn_AxisSel(self, axisSel, newStatus):
        return _WMX3ApiPython.AxisControl_SetServoOn_AxisSel(self, axisSel, newStatus)

    def ClearAmpAlarm(self, axis):
        return _WMX3ApiPython.AxisControl_ClearAmpAlarm(self, axis)

    def ClearAmpAlarm_AxisSel(self, axisSel):
        return _WMX3ApiPython.AxisControl_ClearAmpAlarm_AxisSel(self, axisSel)

    def ClearAxisAlarm(self, axis):
        return _WMX3ApiPython.AxisControl_ClearAxisAlarm(self, axis)

    def ClearAxisAlarm_AxisSel(self, axisSel):
        return _WMX3ApiPython.AxisControl_ClearAxisAlarm_AxisSel(self, axisSel)

    def SetAxisCommandMode(self, axis, mode):
        return _WMX3ApiPython.AxisControl_SetAxisCommandMode(self, axis, mode)

    def SetAxisCommandMode_AxisSel(self, axisSel, mode):
        return _WMX3ApiPython.AxisControl_SetAxisCommandMode_AxisSel(self, axisSel, mode)

    def GetAxisCommandMode(self, axis):
        pMode = intp()
        ret = _WMX3ApiPython.AxisControl_GetAxisCommandMode(self, axis, pMode)
        return ret, pMode.value()



    def GetPosCommand(self, axis):
        pPosition = doublep()
        ret = _WMX3ApiPython.AxisControl_GetPosCommand(self, axis, pPosition)
        return ret, pPosition.value()



    def GetPosFeedback(self, axis):
        pPosition = doublep()
        ret = _WMX3ApiPython.AxisControl_GetPosFeedback(self, axis, pPosition)
        return ret, pPosition.value()



    def GetVelCommand(self, axis):
        pVelocity = doublep()
        ret = _WMX3ApiPython.AxisControl_GetVelCommand(self, axis, pVelocity)
        return ret, pVelocity.value()



    def GetVelFeedback(self, axis):
        pVelocity = doublep()
        ret = _WMX3ApiPython.AxisControl_GetVelFeedback(self, axis, pVelocity)
        return ret, pVelocity.value()


AxisControl_swigregister = _WMX3ApiPython.AxisControl_swigregister
AxisControl_swigregister(AxisControl)

class Motion_WaitConditionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_WaitConditionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_WaitConditionType, name)
    __repr__ = _swig_repr
    AxisIdle = _WMX3ApiPython.Motion_WaitConditionType_AxisIdle
    MotionStarted = _WMX3ApiPython.Motion_WaitConditionType_MotionStarted
    MotionStartedOverrideReady = _WMX3ApiPython.Motion_WaitConditionType_MotionStartedOverrideReady
    Event = _WMX3ApiPython.Motion_WaitConditionType_Event

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_WaitConditionType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_WaitConditionType
    __del__ = lambda self: None
Motion_WaitConditionType_swigregister = _WMX3ApiPython.Motion_WaitConditionType_swigregister
Motion_WaitConditionType_swigregister(Motion_WaitConditionType)

class Motion_HelicalIntplProfileType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_HelicalIntplProfileType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_HelicalIntplProfileType, name)
    __repr__ = _swig_repr
    Helical = _WMX3ApiPython.Motion_HelicalIntplProfileType_Helical
    Circular = _WMX3ApiPython.Motion_HelicalIntplProfileType_Circular
    Linear = _WMX3ApiPython.Motion_HelicalIntplProfileType_Linear

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_HelicalIntplProfileType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_HelicalIntplProfileType
    __del__ = lambda self: None
Motion_HelicalIntplProfileType_swigregister = _WMX3ApiPython.Motion_HelicalIntplProfileType_swigregister
Motion_HelicalIntplProfileType_swigregister(Motion_HelicalIntplProfileType)

class Motion_PosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, posCommand):
        return _WMX3ApiPython.Motion_PosCommand_GetData(self, posCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PosCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PosCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PosCommand_axis_get, _WMX3ApiPython.Motion_PosCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.Motion_PosCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.Motion_PosCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.Motion_PosCommand_target_get, _WMX3ApiPython.Motion_PosCommand_target_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_PosCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_PosCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_PosCommand_profile_get, _WMX3ApiPython.Motion_PosCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PosCommand
    __del__ = lambda self: None
Motion_PosCommand_swigregister = _WMX3ApiPython.Motion_PosCommand_swigregister
Motion_PosCommand_swigregister(Motion_PosCommand)

class Motion_TriggerPosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_TriggerPosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_TriggerPosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, triggerPosCommand):
        return _WMX3ApiPython.Motion_TriggerPosCommand_GetData(self, triggerPosCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_TriggerPosCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_TriggerPosCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_TriggerPosCommand_axis_get, _WMX3ApiPython.Motion_TriggerPosCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.Motion_TriggerPosCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.Motion_TriggerPosCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.Motion_TriggerPosCommand_target_get, _WMX3ApiPython.Motion_TriggerPosCommand_target_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_TriggerPosCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_TriggerPosCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_TriggerPosCommand_profile_get, _WMX3ApiPython.Motion_TriggerPosCommand_profile_set)
    __swig_setmethods__["trigger"] = _WMX3ApiPython.Motion_TriggerPosCommand_trigger_set
    __swig_getmethods__["trigger"] = _WMX3ApiPython.Motion_TriggerPosCommand_trigger_get
    if _newclass:
        trigger = _swig_property(_WMX3ApiPython.Motion_TriggerPosCommand_trigger_get, _WMX3ApiPython.Motion_TriggerPosCommand_trigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_TriggerPosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TriggerPosCommand
    __del__ = lambda self: None
Motion_TriggerPosCommand_swigregister = _WMX3ApiPython.Motion_TriggerPosCommand_swigregister
Motion_TriggerPosCommand_swigregister(Motion_TriggerPosCommand)

class Motion_LinearIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_LinearIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_LinearIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, linearIntplCommand):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetData(self, linearIntplCommand)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.Motion_LinearIntplCommand_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.Motion_LinearIntplCommand_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_axisCount_get, _WMX3ApiPython.Motion_LinearIntplCommand_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_LinearIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_LinearIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_axis_get, _WMX3ApiPython.Motion_LinearIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.Motion_LinearIntplCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.Motion_LinearIntplCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_target_get, _WMX3ApiPython.Motion_LinearIntplCommand_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetTarget(self, index)
    __swig_setmethods__["maxVelocity"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_set
    __swig_getmethods__["maxVelocity"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_get
    if _newclass:
        maxVelocity = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxVelocity(self, index)
    __swig_setmethods__["maxAcc"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_set
    __swig_getmethods__["maxAcc"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_get
    if _newclass:
        maxAcc = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxAcc(self, index)
    __swig_setmethods__["maxDec"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxDec_set
    __swig_getmethods__["maxDec"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxDec_get
    if _newclass:
        maxDec = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_maxDec_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxDec(self, index)
    __swig_setmethods__["maxJerkAcc"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_set
    __swig_getmethods__["maxJerkAcc"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_get
    if _newclass:
        maxJerkAcc = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxJerkAcc(self, index)
    __swig_setmethods__["maxJerkDec"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_set
    __swig_getmethods__["maxJerkDec"] = _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_get
    if _newclass:
        maxJerkDec = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxJerkDec(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_LinearIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_LinearIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_LinearIntplCommand_profile_get, _WMX3ApiPython.Motion_LinearIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_LinearIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_LinearIntplCommand
    __del__ = lambda self: None
Motion_LinearIntplCommand_swigregister = _WMX3ApiPython.Motion_LinearIntplCommand_swigregister
Motion_LinearIntplCommand_swigregister(Motion_LinearIntplCommand)

class Motion_CenterAndLengthCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_CenterAndLengthCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_CenterAndLengthCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, centerAndLengthCircularIntplCommand):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetData(self, centerAndLengthCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetCenterPos(self, index)
    __swig_setmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_set
    __swig_getmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_get
    if _newclass:
        arcLengthDegree = _swig_property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_CenterAndLengthCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_CenterAndLengthCircularIntplCommand
    __del__ = lambda self: None
Motion_CenterAndLengthCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_swigregister
Motion_CenterAndLengthCircularIntplCommand_swigregister(Motion_CenterAndLengthCircularIntplCommand)

class Motion_CenterAndEndCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_CenterAndEndCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_CenterAndEndCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, centerAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetData(self, centerAndEndCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetCenterPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetEndPos(self, index)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_CenterAndEndCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_CenterAndEndCircularIntplCommand
    __del__ = lambda self: None
Motion_CenterAndEndCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_swigregister
Motion_CenterAndEndCircularIntplCommand_swigregister(Motion_CenterAndEndCircularIntplCommand)

class Motion_ThroughAndEndCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_ThroughAndEndCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_ThroughAndEndCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, throughAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetData(self, throughAndEndCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["throughPos"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_set
    __swig_getmethods__["throughPos"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_get
    if _newclass:
        throughPos = _swig_property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetThroughPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetEndPos(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_ThroughAndEndCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ThroughAndEndCircularIntplCommand
    __del__ = lambda self: None
Motion_ThroughAndEndCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_swigregister
Motion_ThroughAndEndCircularIntplCommand_swigregister(Motion_ThroughAndEndCircularIntplCommand)

class Motion_LengthAndEndCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_LengthAndEndCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_LengthAndEndCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, lengthAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetData(self, lengthAndEndCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_set
    __swig_getmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_get
    if _newclass:
        arcLengthDegree = _swig_property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_set)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetEndPos(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_LengthAndEndCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_LengthAndEndCircularIntplCommand
    __del__ = lambda self: None
Motion_LengthAndEndCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_swigregister
Motion_LengthAndEndCircularIntplCommand_swigregister(Motion_LengthAndEndCircularIntplCommand)

class Motion_RadiusAndEndCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_RadiusAndEndCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_RadiusAndEndCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, radiusAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetData(self, radiusAndEndCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["radius"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_set
    __swig_getmethods__["radius"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_get
    if _newclass:
        radius = _swig_property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_set)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetEndPos(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_RadiusAndEndCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_RadiusAndEndCircularIntplCommand
    __del__ = lambda self: None
Motion_RadiusAndEndCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_swigregister
Motion_RadiusAndEndCircularIntplCommand_swigregister(Motion_RadiusAndEndCircularIntplCommand)

class Motion_ThroughAndEnd3DCircularIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_ThroughAndEnd3DCircularIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_ThroughAndEnd3DCircularIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, throughAndEnd3DCircularIntplCommand):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetData(self, throughAndEnd3DCircularIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetAxis(self, index)
    __swig_setmethods__["throughPos"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_set
    __swig_getmethods__["throughPos"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_get
    if _newclass:
        throughPos = _swig_property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetThroughPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetEndPos(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_ThroughAndEnd3DCircularIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ThroughAndEnd3DCircularIntplCommand
    __del__ = lambda self: None
Motion_ThroughAndEnd3DCircularIntplCommand_swigregister = _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_swigregister
Motion_ThroughAndEnd3DCircularIntplCommand_swigregister(Motion_ThroughAndEnd3DCircularIntplCommand)

class Motion_HelicalIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_HelicalIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_HelicalIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, helicalIntplCommand):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetData(self, helicalIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_HelicalIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_HelicalIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_axis_get, _WMX3ApiPython.Motion_HelicalIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetAxis(self, index)
    __swig_setmethods__["zAxis"] = _WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_set
    __swig_getmethods__["zAxis"] = _WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_get
    if _newclass:
        zAxis = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_get, _WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_set)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_get, _WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetCenterPos(self, index)
    __swig_setmethods__["zEndPos"] = _WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_set
    __swig_getmethods__["zEndPos"] = _WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_get
    if _newclass:
        zEndPos = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_get, _WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_set)
    __swig_setmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_set
    __swig_getmethods__["arcLengthDegree"] = _WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_get
    if _newclass:
        arcLengthDegree = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_get, _WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_set)
    __swig_setmethods__["helicalProfileType"] = _WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_set
    __swig_getmethods__["helicalProfileType"] = _WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_get
    if _newclass:
        helicalProfileType = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_get, _WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_HelicalIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_HelicalIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_HelicalIntplCommand_profile_get, _WMX3ApiPython.Motion_HelicalIntplCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_HelicalIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_HelicalIntplCommand
    __del__ = lambda self: None
Motion_HelicalIntplCommand_swigregister = _WMX3ApiPython.Motion_HelicalIntplCommand_swigregister
Motion_HelicalIntplCommand_swigregister(Motion_HelicalIntplCommand)

class Motion_JogCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_JogCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_JogCommand, name)
    __repr__ = _swig_repr

    def GetData(self, jogCommand):
        return _WMX3ApiPython.Motion_JogCommand_GetData(self, jogCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_JogCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_JogCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_JogCommand_axis_get, _WMX3ApiPython.Motion_JogCommand_axis_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_JogCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_JogCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_JogCommand_profile_get, _WMX3ApiPython.Motion_JogCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_JogCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_JogCommand
    __del__ = lambda self: None
Motion_JogCommand_swigregister = _WMX3ApiPython.Motion_JogCommand_swigregister
Motion_JogCommand_swigregister(Motion_JogCommand)

class Motion_TimedJogCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_TimedJogCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_TimedJogCommand, name)
    __repr__ = _swig_repr

    def GetData(self, timedJogCommand):
        return _WMX3ApiPython.Motion_TimedJogCommand_GetData(self, timedJogCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_TimedJogCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_TimedJogCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_TimedJogCommand_axis_get, _WMX3ApiPython.Motion_TimedJogCommand_axis_set)
    __swig_setmethods__["runTimeMilliseconds"] = _WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_set
    __swig_getmethods__["runTimeMilliseconds"] = _WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_get
    if _newclass:
        runTimeMilliseconds = _swig_property(_WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_get, _WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_TimedJogCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_TimedJogCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_TimedJogCommand_profile_get, _WMX3ApiPython.Motion_TimedJogCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_TimedJogCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TimedJogCommand
    __del__ = lambda self: None
Motion_TimedJogCommand_swigregister = _WMX3ApiPython.Motion_TimedJogCommand_swigregister
Motion_TimedJogCommand_swigregister(Motion_TimedJogCommand)

class Motion_TriggerJogCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_TriggerJogCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_TriggerJogCommand, name)
    __repr__ = _swig_repr

    def GetData(self, triggerJogCommand):
        return _WMX3ApiPython.Motion_TriggerJogCommand_GetData(self, triggerJogCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_TriggerJogCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_TriggerJogCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_TriggerJogCommand_axis_get, _WMX3ApiPython.Motion_TriggerJogCommand_axis_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Motion_TriggerJogCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Motion_TriggerJogCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Motion_TriggerJogCommand_profile_get, _WMX3ApiPython.Motion_TriggerJogCommand_profile_set)
    __swig_setmethods__["trigger"] = _WMX3ApiPython.Motion_TriggerJogCommand_trigger_set
    __swig_getmethods__["trigger"] = _WMX3ApiPython.Motion_TriggerJogCommand_trigger_get
    if _newclass:
        trigger = _swig_property(_WMX3ApiPython.Motion_TriggerJogCommand_trigger_get, _WMX3ApiPython.Motion_TriggerJogCommand_trigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_TriggerJogCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TriggerJogCommand
    __del__ = lambda self: None
Motion_TriggerJogCommand_swigregister = _WMX3ApiPython.Motion_TriggerJogCommand_swigregister
Motion_TriggerJogCommand_swigregister(Motion_TriggerJogCommand)

class Motion_PosToJogCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PosToJogCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PosToJogCommand, name)
    __repr__ = _swig_repr

    def GetData(self, posToJogCommand):
        return _WMX3ApiPython.Motion_PosToJogCommand_GetData(self, posToJogCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PosToJogCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PosToJogCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_axis_get, _WMX3ApiPython.Motion_PosToJogCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.Motion_PosToJogCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.Motion_PosToJogCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_target_get, _WMX3ApiPython.Motion_PosToJogCommand_target_set)
    __swig_setmethods__["unsignedVelocity"] = _WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_set
    __swig_getmethods__["unsignedVelocity"] = _WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_get
    if _newclass:
        unsignedVelocity = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_get, _WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_set)
    __swig_setmethods__["posProfile"] = _WMX3ApiPython.Motion_PosToJogCommand_posProfile_set
    __swig_getmethods__["posProfile"] = _WMX3ApiPython.Motion_PosToJogCommand_posProfile_get
    if _newclass:
        posProfile = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_posProfile_get, _WMX3ApiPython.Motion_PosToJogCommand_posProfile_set)
    __swig_setmethods__["jogProfile"] = _WMX3ApiPython.Motion_PosToJogCommand_jogProfile_set
    __swig_getmethods__["jogProfile"] = _WMX3ApiPython.Motion_PosToJogCommand_jogProfile_get
    if _newclass:
        jogProfile = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_jogProfile_get, _WMX3ApiPython.Motion_PosToJogCommand_jogProfile_set)
    __swig_setmethods__["trigger"] = _WMX3ApiPython.Motion_PosToJogCommand_trigger_set
    __swig_getmethods__["trigger"] = _WMX3ApiPython.Motion_PosToJogCommand_trigger_get
    if _newclass:
        trigger = _swig_property(_WMX3ApiPython.Motion_PosToJogCommand_trigger_get, _WMX3ApiPython.Motion_PosToJogCommand_trigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PosToJogCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PosToJogCommand
    __del__ = lambda self: None
Motion_PosToJogCommand_swigregister = _WMX3ApiPython.Motion_PosToJogCommand_swigregister
Motion_PosToJogCommand_swigregister(Motion_PosToJogCommand)

class Motion_StopCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_StopCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_StopCommand, name)
    __repr__ = _swig_repr

    def GetData(self, stopCommand):
        return _WMX3ApiPython.Motion_StopCommand_GetData(self, stopCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_StopCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_StopCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_StopCommand_axis_get, _WMX3ApiPython.Motion_StopCommand_axis_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.Motion_StopCommand_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.Motion_StopCommand_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.Motion_StopCommand_dec_get, _WMX3ApiPython.Motion_StopCommand_dec_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_StopCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_StopCommand
    __del__ = lambda self: None
Motion_StopCommand_swigregister = _WMX3ApiPython.Motion_StopCommand_swigregister
Motion_StopCommand_swigregister(Motion_StopCommand)

class Motion_TimeCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_TimeCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_TimeCommand, name)
    __repr__ = _swig_repr

    def GetData(self, timeCommand):
        return _WMX3ApiPython.Motion_TimeCommand_GetData(self, timeCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_TimeCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_TimeCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_TimeCommand_axis_get, _WMX3ApiPython.Motion_TimeCommand_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_get, _WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_TimeCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TimeCommand
    __del__ = lambda self: None
Motion_TimeCommand_swigregister = _WMX3ApiPython.Motion_TimeCommand_swigregister
Motion_TimeCommand_swigregister(Motion_TimeCommand)

class Motion_SimulatePosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_SimulatePosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_SimulatePosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, simulatePosCommand):
        return _WMX3ApiPython.Motion_SimulatePosCommand_GetData(self, simulatePosCommand)
    __swig_setmethods__["posCommand"] = _WMX3ApiPython.Motion_SimulatePosCommand_posCommand_set
    __swig_getmethods__["posCommand"] = _WMX3ApiPython.Motion_SimulatePosCommand_posCommand_get
    if _newclass:
        posCommand = _swig_property(_WMX3ApiPython.Motion_SimulatePosCommand_posCommand_get, _WMX3ApiPython.Motion_SimulatePosCommand_posCommand_set)
    __swig_setmethods__["setStartPos"] = _WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_set
    __swig_getmethods__["setStartPos"] = _WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_get
    if _newclass:
        setStartPos = _swig_property(_WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_get, _WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_set)
    __swig_setmethods__["startPos"] = _WMX3ApiPython.Motion_SimulatePosCommand_startPos_set
    __swig_getmethods__["startPos"] = _WMX3ApiPython.Motion_SimulatePosCommand_startPos_get
    if _newclass:
        startPos = _swig_property(_WMX3ApiPython.Motion_SimulatePosCommand_startPos_get, _WMX3ApiPython.Motion_SimulatePosCommand_startPos_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_SimulatePosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_SimulatePosCommand
    __del__ = lambda self: None
Motion_SimulatePosCommand_swigregister = _WMX3ApiPython.Motion_SimulatePosCommand_swigregister
Motion_SimulatePosCommand_swigregister(Motion_SimulatePosCommand)

class Motion_SimulateLinearIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_SimulateLinearIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_SimulateLinearIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, simulateLinearIntplCommand):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetData(self, simulateLinearIntplCommand)
    __swig_setmethods__["linearIntplCommand"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_set
    __swig_getmethods__["linearIntplCommand"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_get
    if _newclass:
        linearIntplCommand = _swig_property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_set)
    __swig_setmethods__["setStartPos"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_set
    __swig_getmethods__["setStartPos"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_get
    if _newclass:
        setStartPos = _swig_property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_set)

    def SetSetStartPos(self, index, value):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_SetSetStartPos(self, index, value)

    def GetSetStartPos(self, index):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetSetStartPos(self, index)
    __swig_setmethods__["startPos"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_set
    __swig_getmethods__["startPos"] = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_get
    if _newclass:
        startPos = _swig_property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetStartPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_SimulateLinearIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_SimulateLinearIntplCommand
    __del__ = lambda self: None
Motion_SimulateLinearIntplCommand_swigregister = _WMX3ApiPython.Motion_SimulateLinearIntplCommand_swigregister
Motion_SimulateLinearIntplCommand_swigregister(Motion_SimulateLinearIntplCommand)

class Motion_WaitCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_WaitCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_WaitCondition, name)
    __repr__ = _swig_repr

    def GetData(self, waitCondition):
        return _WMX3ApiPython.Motion_WaitCondition_GetData(self, waitCondition)
    __swig_setmethods__["waitConditionType"] = _WMX3ApiPython.Motion_WaitCondition_waitConditionType_set
    __swig_getmethods__["waitConditionType"] = _WMX3ApiPython.Motion_WaitCondition_waitConditionType_get
    if _newclass:
        waitConditionType = _swig_property(_WMX3ApiPython.Motion_WaitCondition_waitConditionType_get, _WMX3ApiPython.Motion_WaitCondition_waitConditionType_set)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.Motion_WaitCondition_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.Motion_WaitCondition_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.Motion_WaitCondition_axisCount_get, _WMX3ApiPython.Motion_WaitCondition_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_WaitCondition_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_WaitCondition_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_WaitCondition_axis_get, _WMX3ApiPython.Motion_WaitCondition_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_WaitCondition_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_WaitCondition_GetAxis(self, index)
    __swig_setmethods__["eventID"] = _WMX3ApiPython.Motion_WaitCondition_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.Motion_WaitCondition_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.Motion_WaitCondition_eventID_get, _WMX3ApiPython.Motion_WaitCondition_eventID_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_WaitCondition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_WaitCondition
    __del__ = lambda self: None
Motion_WaitCondition_swigregister = _WMX3ApiPython.Motion_WaitCondition_swigregister
Motion_WaitCondition_swigregister(Motion_WaitCondition)

class Motion_PVTPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PVTPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PVTPoint, name)
    __repr__ = _swig_repr

    def GetData(self, pPVTPoint):
        return _WMX3ApiPython.Motion_PVTPoint_GetData(self, pPVTPoint)
    __swig_setmethods__["pos"] = _WMX3ApiPython.Motion_PVTPoint_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.Motion_PVTPoint_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.Motion_PVTPoint_pos_get, _WMX3ApiPython.Motion_PVTPoint_pos_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.Motion_PVTPoint_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.Motion_PVTPoint_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.Motion_PVTPoint_velocity_get, _WMX3ApiPython.Motion_PVTPoint_velocity_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_PVTPoint_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_PVTPoint_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Motion_PVTPoint_timeMilliseconds_get, _WMX3ApiPython.Motion_PVTPoint_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PVTPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PVTPoint
    __del__ = lambda self: None
Motion_PVTPoint_swigregister = _WMX3ApiPython.Motion_PVTPoint_swigregister
Motion_PVTPoint_swigregister(Motion_PVTPoint)

class Motion_PVTCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PVTCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PVTCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPVTCommand):
        return _WMX3ApiPython.Motion_PVTCommand_GetData(self, pPVTCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PVTCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PVTCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PVTCommand_axis_get, _WMX3ApiPython.Motion_PVTCommand_axis_set)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PVTCommand_pointCount_get, _WMX3ApiPython.Motion_PVTCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PVTCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PVTCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PVTCommand_points_get, _WMX3ApiPython.Motion_PVTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_PVTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_PVTCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PVTCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PVTCommand
    __del__ = lambda self: None
Motion_PVTCommand_swigregister = _WMX3ApiPython.Motion_PVTCommand_swigregister
Motion_PVTCommand_swigregister(Motion_PVTCommand)

class Motion_PVTAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PVTAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PVTAdditionalCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPVTCommand):
        return _WMX3ApiPython.Motion_PVTAdditionalCommand_GetData(self, pPVTCommand)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTAdditionalCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTAdditionalCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PVTAdditionalCommand_pointCount_get, _WMX3ApiPython.Motion_PVTAdditionalCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PVTAdditionalCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PVTAdditionalCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PVTAdditionalCommand_points_get, _WMX3ApiPython.Motion_PVTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_PVTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_PVTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PVTAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PVTAdditionalCommand
    __del__ = lambda self: None
Motion_PVTAdditionalCommand_swigregister = _WMX3ApiPython.Motion_PVTAdditionalCommand_swigregister
Motion_PVTAdditionalCommand_swigregister(Motion_PVTAdditionalCommand)

class Motion_PVTIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PVTIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PVTIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPVTIntplCommand):
        return _WMX3ApiPython.Motion_PVTIntplCommand_GetData(self, pPVTIntplCommand)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.Motion_PVTIntplCommand_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.Motion_PVTIntplCommand_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.Motion_PVTIntplCommand_axisCount_get, _WMX3ApiPython.Motion_PVTIntplCommand_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PVTIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PVTIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PVTIntplCommand_axis_get, _WMX3ApiPython.Motion_PVTIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_PVTIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_PVTIntplCommand_GetAxis(self, index)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTIntplCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTIntplCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PVTIntplCommand_pointCount_get, _WMX3ApiPython.Motion_PVTIntplCommand_pointCount_set)

    def SetPointCount(self, index, value):
        return _WMX3ApiPython.Motion_PVTIntplCommand_SetPointCount(self, index, value)

    def GetPointCount(self, index):
        return _WMX3ApiPython.Motion_PVTIntplCommand_GetPointCount(self, index)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PVTIntplCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PVTIntplCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PVTIntplCommand_points_get, _WMX3ApiPython.Motion_PVTIntplCommand_points_set)

    def SetPoints(self, index1, index2, value):
        return _WMX3ApiPython.Motion_PVTIntplCommand_SetPoints(self, index1, index2, value)

    def GetPoints(self, index1, index2):
        return _WMX3ApiPython.Motion_PVTIntplCommand_GetPoints(self, index1, index2)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PVTIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PVTIntplCommand
    __del__ = lambda self: None
Motion_PVTIntplCommand_swigregister = _WMX3ApiPython.Motion_PVTIntplCommand_swigregister
Motion_PVTIntplCommand_swigregister(Motion_PVTIntplCommand)

class Motion_PVTIntplAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PVTIntplAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PVTIntplAdditionalCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPVTIntplCommand):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_GetData(self, pPVTIntplCommand)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axisCount_get, _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axis_get, _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_GetAxis(self, index)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PVTIntplAdditionalCommand_pointCount_get, _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_pointCount_set)

    def SetPointCount(self, index, value):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_SetPointCount(self, index, value)

    def GetPointCount(self, index):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_GetPointCount(self, index)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PVTIntplAdditionalCommand_points_get, _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_points_set)

    def SetPoints(self, index1, index2, value):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_SetPoints(self, index1, index2, value)

    def GetPoints(self, index1, index2):
        return _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_GetPoints(self, index1, index2)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PVTIntplAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PVTIntplAdditionalCommand
    __del__ = lambda self: None
Motion_PVTIntplAdditionalCommand_swigregister = _WMX3ApiPython.Motion_PVTIntplAdditionalCommand_swigregister
Motion_PVTIntplAdditionalCommand_swigregister(Motion_PVTIntplAdditionalCommand)

class Motion_PTPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PTPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PTPoint, name)
    __repr__ = _swig_repr

    def GetData(self, pPTPoint):
        return _WMX3ApiPython.Motion_PTPoint_GetData(self, pPTPoint)
    __swig_setmethods__["pos"] = _WMX3ApiPython.Motion_PTPoint_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.Motion_PTPoint_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.Motion_PTPoint_pos_get, _WMX3ApiPython.Motion_PTPoint_pos_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_PTPoint_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_PTPoint_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Motion_PTPoint_timeMilliseconds_get, _WMX3ApiPython.Motion_PTPoint_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PTPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PTPoint
    __del__ = lambda self: None
Motion_PTPoint_swigregister = _WMX3ApiPython.Motion_PTPoint_swigregister
Motion_PTPoint_swigregister(Motion_PTPoint)

class Motion_PTCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PTCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PTCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPTCommand):
        return _WMX3ApiPython.Motion_PTCommand_GetData(self, pPTCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_PTCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_PTCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_PTCommand_axis_get, _WMX3ApiPython.Motion_PTCommand_axis_set)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PTCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PTCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PTCommand_pointCount_get, _WMX3ApiPython.Motion_PTCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PTCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PTCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PTCommand_points_get, _WMX3ApiPython.Motion_PTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_PTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_PTCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PTCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PTCommand
    __del__ = lambda self: None
Motion_PTCommand_swigregister = _WMX3ApiPython.Motion_PTCommand_swigregister
Motion_PTCommand_swigregister(Motion_PTCommand)

class Motion_PTAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_PTAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_PTAdditionalCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPTCommand):
        return _WMX3ApiPython.Motion_PTAdditionalCommand_GetData(self, pPTCommand)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_PTAdditionalCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_PTAdditionalCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_PTAdditionalCommand_pointCount_get, _WMX3ApiPython.Motion_PTAdditionalCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_PTAdditionalCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_PTAdditionalCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_PTAdditionalCommand_points_get, _WMX3ApiPython.Motion_PTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_PTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_PTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_PTAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PTAdditionalCommand
    __del__ = lambda self: None
Motion_PTAdditionalCommand_swigregister = _WMX3ApiPython.Motion_PTAdditionalCommand_swigregister
Motion_PTAdditionalCommand_swigregister(Motion_PTAdditionalCommand)

class Motion_VTPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_VTPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_VTPoint, name)
    __repr__ = _swig_repr

    def GetData(self, pVTPoint):
        return _WMX3ApiPython.Motion_VTPoint_GetData(self, pVTPoint)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.Motion_VTPoint_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.Motion_VTPoint_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.Motion_VTPoint_velocity_get, _WMX3ApiPython.Motion_VTPoint_velocity_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_VTPoint_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_VTPoint_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Motion_VTPoint_timeMilliseconds_get, _WMX3ApiPython.Motion_VTPoint_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_VTPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_VTPoint
    __del__ = lambda self: None
Motion_VTPoint_swigregister = _WMX3ApiPython.Motion_VTPoint_swigregister
Motion_VTPoint_swigregister(Motion_VTPoint)

class Motion_VTCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_VTCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_VTCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pVTCommand):
        return _WMX3ApiPython.Motion_VTCommand_GetData(self, pVTCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_VTCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_VTCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_VTCommand_axis_get, _WMX3ApiPython.Motion_VTCommand_axis_set)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_VTCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_VTCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_VTCommand_pointCount_get, _WMX3ApiPython.Motion_VTCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_VTCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_VTCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_VTCommand_points_get, _WMX3ApiPython.Motion_VTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_VTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_VTCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_VTCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_VTCommand
    __del__ = lambda self: None
Motion_VTCommand_swigregister = _WMX3ApiPython.Motion_VTCommand_swigregister
Motion_VTCommand_swigregister(Motion_VTCommand)

class Motion_VTAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_VTAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_VTAdditionalCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pVTCommand):
        return _WMX3ApiPython.Motion_VTAdditionalCommand_GetData(self, pVTCommand)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_VTAdditionalCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_VTAdditionalCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_VTAdditionalCommand_pointCount_get, _WMX3ApiPython.Motion_VTAdditionalCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_VTAdditionalCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_VTAdditionalCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_VTAdditionalCommand_points_get, _WMX3ApiPython.Motion_VTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_VTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_VTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_VTAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_VTAdditionalCommand
    __del__ = lambda self: None
Motion_VTAdditionalCommand_swigregister = _WMX3ApiPython.Motion_VTAdditionalCommand_swigregister
Motion_VTAdditionalCommand_swigregister(Motion_VTAdditionalCommand)

class Motion_ATPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_ATPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_ATPoint, name)
    __repr__ = _swig_repr

    def GetData(self, pATPoint):
        return _WMX3ApiPython.Motion_ATPoint_GetData(self, pATPoint)
    __swig_setmethods__["acc"] = _WMX3ApiPython.Motion_ATPoint_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.Motion_ATPoint_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.Motion_ATPoint_acc_get, _WMX3ApiPython.Motion_ATPoint_acc_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_ATPoint_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Motion_ATPoint_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Motion_ATPoint_timeMilliseconds_get, _WMX3ApiPython.Motion_ATPoint_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_ATPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ATPoint
    __del__ = lambda self: None
Motion_ATPoint_swigregister = _WMX3ApiPython.Motion_ATPoint_swigregister
Motion_ATPoint_swigregister(Motion_ATPoint)

class Motion_ATCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_ATCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_ATCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pATCommand):
        return _WMX3ApiPython.Motion_ATCommand_GetData(self, pATCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Motion_ATCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Motion_ATCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Motion_ATCommand_axis_get, _WMX3ApiPython.Motion_ATCommand_axis_set)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_ATCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_ATCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_ATCommand_pointCount_get, _WMX3ApiPython.Motion_ATCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_ATCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_ATCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_ATCommand_points_get, _WMX3ApiPython.Motion_ATCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_ATCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_ATCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_ATCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ATCommand
    __del__ = lambda self: None
Motion_ATCommand_swigregister = _WMX3ApiPython.Motion_ATCommand_swigregister
Motion_ATCommand_swigregister(Motion_ATCommand)

class Motion_ATAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion_ATAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion_ATAdditionalCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pATCommand):
        return _WMX3ApiPython.Motion_ATAdditionalCommand_GetData(self, pATCommand)
    __swig_setmethods__["pointCount"] = _WMX3ApiPython.Motion_ATAdditionalCommand_pointCount_set
    __swig_getmethods__["pointCount"] = _WMX3ApiPython.Motion_ATAdditionalCommand_pointCount_get
    if _newclass:
        pointCount = _swig_property(_WMX3ApiPython.Motion_ATAdditionalCommand_pointCount_get, _WMX3ApiPython.Motion_ATAdditionalCommand_pointCount_set)
    __swig_setmethods__["points"] = _WMX3ApiPython.Motion_ATAdditionalCommand_points_set
    __swig_getmethods__["points"] = _WMX3ApiPython.Motion_ATAdditionalCommand_points_get
    if _newclass:
        points = _swig_property(_WMX3ApiPython.Motion_ATAdditionalCommand_points_get, _WMX3ApiPython.Motion_ATAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.Motion_ATAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.Motion_ATAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Motion_ATAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ATAdditionalCommand
    __del__ = lambda self: None
Motion_ATAdditionalCommand_swigregister = _WMX3ApiPython.Motion_ATAdditionalCommand_swigregister
Motion_ATAdditionalCommand_swigregister(Motion_ATAdditionalCommand)

class Motion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motion, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Motion(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Motion
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Motion_IsDeviceValid(self)

    def StartPos(self, *args):
        return _WMX3ApiPython.Motion_StartPos(self, *args)

    def StartMov(self, *args):
        return _WMX3ApiPython.Motion_StartMov(self, *args)

    def StartPos_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartPos_Trigger(self, *args)

    def StartMov_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartMov_Trigger(self, *args)

    def StartPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartPos_TriggerEvents(self, *args)

    def StartMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartMov_TriggerEvents(self, *args)

    def StartLinearIntplPos(self, pLinearIntplCommand):
        return _WMX3ApiPython.Motion_StartLinearIntplPos(self, pLinearIntplCommand)

    def StartLinearIntplMov(self, pLinearIntplCommand):
        return _WMX3ApiPython.Motion_StartLinearIntplMov(self, pLinearIntplCommand)

    def StartLinearIntplPos_Trigger(self, pLinearIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartLinearIntplPos_Trigger(self, pLinearIntplCommand, pTrigger)

    def StartLinearIntplMov_Trigger(self, pLinearIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartLinearIntplMov_Trigger(self, pLinearIntplCommand, pTrigger)

    def StartLinearIntplPos_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartLinearIntplPos_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents)

    def StartLinearIntplMov_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartLinearIntplMov_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_CenterAndLength(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength(self, pCircularIntplCommand)

    def StartCircularIntplMov_CenterAndLength(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength(self, pCircularIntplCommand)

    def StartCircularIntplPos_CenterAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_CenterAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_ThroughAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_ThroughAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_LengthAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_LengthAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_RadiusAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_RadiusAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_ThroughAndEnd3D(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D(self, pCircularIntplCommand)

    def StartCircularIntplMov_ThroughAndEnd3D(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D(self, pCircularIntplCommand)

    def StartCircularIntplPos_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartHelicalIntplPos(self, pHelicalIntplCommand):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos(self, pHelicalIntplCommand)

    def StartHelicalIntplMov(self, pHelicalIntplCommand):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov(self, pHelicalIntplCommand)

    def StartHelicalIntplPos_Trigger(self, pHelicalIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos_Trigger(self, pHelicalIntplCommand, pTrigger)

    def StartHelicalIntplMov_Trigger(self, pHelicalIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov_Trigger(self, pHelicalIntplCommand, pTrigger)

    def StartHelicalIntplPos_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents)

    def StartHelicalIntplMov_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents)

    def StartVelToPos(self, *args):
        return _WMX3ApiPython.Motion_StartVelToPos(self, *args)

    def StartVelToMov(self, *args):
        return _WMX3ApiPython.Motion_StartVelToMov(self, *args)

    def StartVelToPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartVelToPos_TriggerEvents(self, *args)

    def StartVelToMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartVelToMov_TriggerEvents(self, *args)

    def StartTrqToPos(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToPos(self, *args)

    def StartTrqToMov(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToMov(self, *args)

    def StartTrqToPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToPos_TriggerEvents(self, *args)

    def StartTrqToMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToMov_TriggerEvents(self, *args)

    def StartJog(self, *args):
        return _WMX3ApiPython.Motion_StartJog(self, *args)

    def StartJog_TimedJog(self, *args):
        return _WMX3ApiPython.Motion_StartJog_TimedJog(self, *args)

    def StartPosToJog_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_Trigger(self, *args)

    def StartPosToJog_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_TriggerEvents(self, *args)

    def StartPosToJog_PosToJog(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_PosToJog(self, *args)

    def StartMovToJog(self, *args):
        return _WMX3ApiPython.Motion_StartMovToJog(self, *args)

    def Stop(self, axis):
        return _WMX3ApiPython.Motion_Stop(self, axis)

    def Stop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Stop_AxisSel(self, pAxisSelection)

    def Stop_Dec(self, axis, dec):
        return _WMX3ApiPython.Motion_Stop_Dec(self, axis, dec)

    def Stop_StopCommand(self, numCommands, pStopCommand):
        return _WMX3ApiPython.Motion_Stop_StopCommand(self, numCommands, pStopCommand)

    def ExecQuickStop(self, axis):
        return _WMX3ApiPython.Motion_ExecQuickStop(self, axis)

    def ExecQuickStop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_ExecQuickStop_AxisSel(self, pAxisSelection)

    def ExecTimedStop_TimeMilli(self, axis, timeMilliseconds):
        return _WMX3ApiPython.Motion_ExecTimedStop_TimeMilli(self, axis, timeMilliseconds)

    def ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds):
        return _WMX3ApiPython.Motion_ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds)

    def ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand):
        return _WMX3ApiPython.Motion_ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand)

    def Wait(self, axis):
        return _WMX3ApiPython.Motion_Wait(self, axis)

    def Wait_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Wait_AxisSel(self, pAxisSelection)

    def Wait_WaitCondition(self, pWaitCondition):
        return _WMX3ApiPython.Motion_Wait_WaitCondition(self, pWaitCondition)

    def Wait_TimeMilli(self, axis, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_TimeMilli(self, axis, waitTimeMilliseconds)

    def Wait_AxisSel_TimeMilli(self, pAxisSelection, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_AxisSel_TimeMilli(self, pAxisSelection, waitTimeMilliseconds)

    def Wait_WaitCondition_TimeMilli(self, pWaitCondition, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_WaitCondition_TimeMilli(self, pWaitCondition, waitTimeMilliseconds)

    def Pause(self, axis):
        return _WMX3ApiPython.Motion_Pause(self, axis)

    def Pause_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Pause_AxisSel(self, pAxisSelection)

    def Resume(self, axis):
        return _WMX3ApiPython.Motion_Resume(self, axis)

    def Resume_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Resume_AxisSel(self, pAxisSelection)

    def OverridePos(self, *args):
        return _WMX3ApiPython.Motion_OverridePos(self, *args)

    def OverrideMov(self, *args):
        return _WMX3ApiPython.Motion_OverrideMov(self, *args)

    def OverrideVel(self, *args):
        return _WMX3ApiPython.Motion_OverrideVel(self, *args)

    def OverrideAcc(self, *args):
        return _WMX3ApiPython.Motion_OverrideAcc(self, *args)

    def OverrideDec(self, *args):
        return _WMX3ApiPython.Motion_OverrideDec(self, *args)

    def OverrideJerkAcc(self, *args):
        return _WMX3ApiPython.Motion_OverrideJerkAcc(self, *args)

    def OverrideJerkDec(self, *args):
        return _WMX3ApiPython.Motion_OverrideJerkDec(self, *args)

    def OverrideProfile(self, *args):
        return _WMX3ApiPython.Motion_OverrideProfile(self, *args)

    def StopJogAtPos(self, *args):
        return _WMX3ApiPython.Motion_StopJogAtPos(self, *args)

    def SuperimposeMov(self, *args):
        return _WMX3ApiPython.Motion_SuperimposeMov(self, *args)

    def StopSuperimpose(self, axis):
        return _WMX3ApiPython.Motion_StopSuperimpose(self, axis)

    def StopSuperimpose_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_StopSuperimpose_AxisSel(self, pAxisSelection)

    def SimulatePos(self, pSimulatePosCommand):
        pPeakVelocity = doublep()
        pTotalTimeMilliseconds = doublep()
        pAccelerationTimeMilliseconds = doublep()
        pCruiseTimeMilliseconds = doublep()
        pDecelerationTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.Motion_SimulatePos(self, pSimulatePosCommand, pPeakVelocity, pTotalTimeMilliseconds, pAccelerationTimeMilliseconds, pCruiseTimeMilliseconds, pDecelerationTimeMilliseconds)
        return ret, pPeakVelocity.value(), pTotalTimeMilliseconds.value(), pAccelerationTimeMilliseconds.value(), pCruiseTimeMilliseconds.value(), pDecelerationTimeMilliseconds.value()



    def SimulateLinearIntplPos(self, pSimulateLinearIntplCommand):
        pPeakVelocity = doublep()
        pTotalTimeMilliseconds = doublep()
        pAccelerationTimeMilliseconds = doublep()
        pCruiseTimeMilliseconds = doublep()
        pDecelerationTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.Motion_SimulateLinearIntplPos(self, pSimulateLinearIntplCommand, pPeakVelocity, pTotalTimeMilliseconds, pAccelerationTimeMilliseconds, pCruiseTimeMilliseconds, pDecelerationTimeMilliseconds)
        return ret, pPeakVelocity.value(), pTotalTimeMilliseconds.value(), pAccelerationTimeMilliseconds.value(), pCruiseTimeMilliseconds.value(), pDecelerationTimeMilliseconds.value()



    def SimulatePosAtTime(self, pSimulatePosCommand, returnType, timeMilliseconds, pCalculatedPos, pCalculatedVel):
        return _WMX3ApiPython.Motion_SimulatePosAtTime(self, pSimulatePosCommand, returnType, timeMilliseconds, pCalculatedPos, pCalculatedVel)

    def SimulatePosAtTime_LinearIntpl(self, pSimulateLinearIntplCommand, timeMilliseconds, pPosArray, pMoveDistance, pRemainDistance, pTotalDistance):
        return _WMX3ApiPython.Motion_SimulatePosAtTime_LinearIntpl(self, pSimulateLinearIntplCommand, timeMilliseconds, pPosArray, pMoveDistance, pRemainDistance, pTotalDistance)

    def SimulateTimeAtPos(self, pSimulatePosCommand, specificPos, pMoveTimeMilliseconds, pRemainTimeMilliseconds):
        return _WMX3ApiPython.Motion_SimulateTimeAtPos(self, pSimulatePosCommand, specificPos, pMoveTimeMilliseconds, pRemainTimeMilliseconds)

    def SimulateTimeAtDist_LinearIntpl(self, pSimulateLinearIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds):
        return _WMX3ApiPython.Motion_SimulateTimeAtDist_LinearIntpl(self, pSimulateLinearIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)

    def CreatePVTBuffer(self, axis, points):
        return _WMX3ApiPython.Motion_CreatePVTBuffer(self, axis, points)

    def FreePVTBuffer(self, axis):
        return _WMX3ApiPython.Motion_FreePVTBuffer(self, axis)

    def GetPVTBufferPoints(self, axis, pPoints):
        return _WMX3ApiPython.Motion_GetPVTBufferPoints(self, axis, pPoints)

    def GetPVTBytesPerPoint(self, pBytes):
        return _WMX3ApiPython.Motion_GetPVTBytesPerPoint(self, pBytes)

    def StartPVT(self, *args):
        return _WMX3ApiPython.Motion_StartPVT(self, *args)

    def StartPVT_Intpl(self, *args):
        return _WMX3ApiPython.Motion_StartPVT_Intpl(self, *args)

    def StartPT(self, *args):
        return _WMX3ApiPython.Motion_StartPT(self, *args)

    def StartVT(self, *args):
        return _WMX3ApiPython.Motion_StartVT(self, *args)

    def StartAT(self, *args):
        return _WMX3ApiPython.Motion_StartAT(self, *args)
Motion_swigregister = _WMX3ApiPython.Motion_swigregister
Motion_swigregister(Motion)

class Home_AxisHomeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Home_AxisHomeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Home_AxisHomeData, name)
    __repr__ = _swig_repr

    def GetData(self, axisHomeData):
        return _WMX3ApiPython.Home_AxisHomeData_GetData(self, axisHomeData)

    def SetData(self, axisHomeData):
        return _WMX3ApiPython.Home_AxisHomeData_SetData(self, axisHomeData)
    __swig_setmethods__["distHStoZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_set
    __swig_getmethods__["distHStoZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_get
    if _newclass:
        distHStoZPulse = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_set)
    __swig_setmethods__["distLStoZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_set
    __swig_getmethods__["distLStoZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_get
    if _newclass:
        distLStoZPulse = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_set)
    __swig_setmethods__["distMechanicalEndToZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distMechanicalEndToZPulse_set
    __swig_getmethods__["distMechanicalEndToZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distMechanicalEndToZPulse_get
    if _newclass:
        distMechanicalEndToZPulse = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distMechanicalEndToZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distMechanicalEndToZPulse_set)
    __swig_setmethods__["latchedZPulseEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_set
    __swig_getmethods__["latchedZPulseEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_get
    if _newclass:
        latchedZPulseEncoder = _swig_property(_WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_set)
    __swig_setmethods__["latchedLimitSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_set
    __swig_getmethods__["latchedLimitSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_get
    if _newclass:
        latchedLimitSwitchEncoder = _swig_property(_WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_set)
    __swig_setmethods__["latchedHomeSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_set
    __swig_getmethods__["latchedHomeSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_get
    if _newclass:
        latchedHomeSwitchEncoder = _swig_property(_WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_set)
    __swig_setmethods__["latchedFirstHomeSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_set
    __swig_getmethods__["latchedFirstHomeSwitchEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_get
    if _newclass:
        latchedFirstHomeSwitchEncoder = _swig_property(_WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_set)
    __swig_setmethods__["latchedTouchProbeEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_set
    __swig_getmethods__["latchedTouchProbeEncoder"] = _WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_get
    if _newclass:
        latchedTouchProbeEncoder = _swig_property(_WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_set)
    __swig_setmethods__["distZPulseToMasterZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_set
    __swig_getmethods__["distZPulseToMasterZPulse"] = _WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_get
    if _newclass:
        distZPulseToMasterZPulse = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_set)
    __swig_setmethods__["distLSToMasterLS"] = _WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_set
    __swig_getmethods__["distLSToMasterLS"] = _WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_get
    if _newclass:
        distLSToMasterLS = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_get, _WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_set)
    __swig_setmethods__["distHSToMasterHS"] = _WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_set
    __swig_getmethods__["distHSToMasterHS"] = _WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_get
    if _newclass:
        distHSToMasterHS = _swig_property(_WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_get, _WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Home_AxisHomeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Home_AxisHomeData
    __del__ = lambda self: None
Home_AxisHomeData_swigregister = _WMX3ApiPython.Home_AxisHomeData_swigregister
Home_AxisHomeData_swigregister(Home_AxisHomeData)

class Home_HomeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Home_HomeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Home_HomeData, name)
    __repr__ = _swig_repr

    def GetData(self, homeData):
        return _WMX3ApiPython.Home_HomeData_GetData(self, homeData)

    def SetData(self, homeData):
        return _WMX3ApiPython.Home_HomeData_SetData(self, homeData)
    __swig_setmethods__["axesHomeData"] = _WMX3ApiPython.Home_HomeData_axesHomeData_set
    __swig_getmethods__["axesHomeData"] = _WMX3ApiPython.Home_HomeData_axesHomeData_get
    if _newclass:
        axesHomeData = _swig_property(_WMX3ApiPython.Home_HomeData_axesHomeData_get, _WMX3ApiPython.Home_HomeData_axesHomeData_set)

    def SetAxesHomeData(self, index, value):
        return _WMX3ApiPython.Home_HomeData_SetAxesHomeData(self, index, value)

    def GetAxesHomeData(self, index):
        return _WMX3ApiPython.Home_HomeData_GetAxesHomeData(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Home_HomeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Home_HomeData
    __del__ = lambda self: None
Home_HomeData_swigregister = _WMX3ApiPython.Home_HomeData_swigregister
Home_HomeData_swigregister(Home_HomeData)

class Home(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Home, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Home, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Home(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Home
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Home_IsDeviceValid(self)

    def StartHome(self, axis):
        return _WMX3ApiPython.Home_StartHome(self, axis)

    def StartHome_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_StartHome_AxisSel(self, pAxisSelection)

    def Continue(self, axis):
        return _WMX3ApiPython.Home_Continue(self, axis)

    def Continue_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_Continue_AxisSel(self, pAxisSelection)

    def Cancel(self, axis):
        return _WMX3ApiPython.Home_Cancel(self, axis)

    def Cancel_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_Cancel_AxisSel(self, pAxisSelection)

    def SetCommandPos(self, axis, position):
        return _WMX3ApiPython.Home_SetCommandPos(self, axis, position)

    def SetFeedbackPos(self, axis, position):
        return _WMX3ApiPython.Home_SetFeedbackPos(self, axis, position)

    def SetHomeDone(self, axis, value):
        return _WMX3ApiPython.Home_SetHomeDone(self, axis, value)

    def SetCommandPosToFeedbackPos(self, *args):
        return _WMX3ApiPython.Home_SetCommandPosToFeedbackPos(self, *args)

    def GetHomeData(self):
        pHomeData = Home_HomeData()
        ret = _WMX3ApiPython.Home_GetHomeData(self, pHomeData)
        return ret, pHomeData


Home_swigregister = _WMX3ApiPython.Home_swigregister
Home_swigregister(Home)

class Velocity_VelCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity_VelCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity_VelCommand, name)
    __repr__ = _swig_repr

    def GetData(self, velCommand):
        return _WMX3ApiPython.Velocity_VelCommand_GetData(self, velCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Velocity_VelCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Velocity_VelCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Velocity_VelCommand_axis_get, _WMX3ApiPython.Velocity_VelCommand_axis_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Velocity_VelCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Velocity_VelCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Velocity_VelCommand_profile_get, _WMX3ApiPython.Velocity_VelCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Velocity_VelCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_VelCommand
    __del__ = lambda self: None
Velocity_VelCommand_swigregister = _WMX3ApiPython.Velocity_VelCommand_swigregister
Velocity_VelCommand_swigregister(Velocity_VelCommand)

class Velocity_TimedVelCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity_TimedVelCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity_TimedVelCommand, name)
    __repr__ = _swig_repr

    def GetData(self, timedVelCommand):
        return _WMX3ApiPython.Velocity_TimedVelCommand_GetData(self, timedVelCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Velocity_TimedVelCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Velocity_TimedVelCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Velocity_TimedVelCommand_axis_get, _WMX3ApiPython.Velocity_TimedVelCommand_axis_set)
    __swig_setmethods__["runTimeMilliseconds"] = _WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_set
    __swig_getmethods__["runTimeMilliseconds"] = _WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_get
    if _newclass:
        runTimeMilliseconds = _swig_property(_WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_get, _WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Velocity_TimedVelCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Velocity_TimedVelCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Velocity_TimedVelCommand_profile_get, _WMX3ApiPython.Velocity_TimedVelCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Velocity_TimedVelCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TimedVelCommand
    __del__ = lambda self: None
Velocity_TimedVelCommand_swigregister = _WMX3ApiPython.Velocity_TimedVelCommand_swigregister
Velocity_TimedVelCommand_swigregister(Velocity_TimedVelCommand)

class Velocity_TriggerVelCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity_TriggerVelCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity_TriggerVelCommand, name)
    __repr__ = _swig_repr

    def GetData(self, triggerVelCommand):
        return _WMX3ApiPython.Velocity_TriggerVelCommand_GetData(self, triggerVelCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Velocity_TriggerVelCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Velocity_TriggerVelCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Velocity_TriggerVelCommand_axis_get, _WMX3ApiPython.Velocity_TriggerVelCommand_axis_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.Velocity_TriggerVelCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.Velocity_TriggerVelCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.Velocity_TriggerVelCommand_profile_get, _WMX3ApiPython.Velocity_TriggerVelCommand_profile_set)
    __swig_setmethods__["trigger"] = _WMX3ApiPython.Velocity_TriggerVelCommand_trigger_set
    __swig_getmethods__["trigger"] = _WMX3ApiPython.Velocity_TriggerVelCommand_trigger_get
    if _newclass:
        trigger = _swig_property(_WMX3ApiPython.Velocity_TriggerVelCommand_trigger_get, _WMX3ApiPython.Velocity_TriggerVelCommand_trigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Velocity_TriggerVelCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TriggerVelCommand
    __del__ = lambda self: None
Velocity_TriggerVelCommand_swigregister = _WMX3ApiPython.Velocity_TriggerVelCommand_swigregister
Velocity_TriggerVelCommand_swigregister(Velocity_TriggerVelCommand)

class Velocity_TimeCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity_TimeCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity_TimeCommand, name)
    __repr__ = _swig_repr

    def GetData(self, timeCommand):
        return _WMX3ApiPython.Velocity_TimeCommand_GetData(self, timeCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Velocity_TimeCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Velocity_TimeCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Velocity_TimeCommand_axis_get, _WMX3ApiPython.Velocity_TimeCommand_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_get, _WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Velocity_TimeCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TimeCommand
    __del__ = lambda self: None
Velocity_TimeCommand_swigregister = _WMX3ApiPython.Velocity_TimeCommand_swigregister
Velocity_TimeCommand_swigregister(Velocity_TimeCommand)

class Velocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Velocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Velocity, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Velocity(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Velocity_IsDeviceValid(self)

    def StartVel_MaxTrq(self, pVelCommand, maxTrqLimit):
        return _WMX3ApiPython.Velocity_StartVel_MaxTrq(self, pVelCommand, maxTrqLimit)

    def StartVel(self, *args):
        return _WMX3ApiPython.Velocity_StartVel(self, *args)

    def StartVel_TimedVel(self, *args):
        return _WMX3ApiPython.Velocity_StartVel_TimedVel(self, *args)

    def Stop(self, axis):
        return _WMX3ApiPython.Velocity_Stop(self, axis)

    def Stop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Velocity_Stop_AxisSel(self, pAxisSelection)

    def ExecQuickStop(self, axis):
        return _WMX3ApiPython.Velocity_ExecQuickStop(self, axis)

    def ExecQuickStop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Velocity_ExecQuickStop_AxisSel(self, pAxisSelection)

    def ExecTimedStop_TimeMilli(self, axis, timeMilliseconds):
        return _WMX3ApiPython.Velocity_ExecTimedStop_TimeMilli(self, axis, timeMilliseconds)

    def ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds):
        return _WMX3ApiPython.Velocity_ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds)

    def ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand):
        return _WMX3ApiPython.Velocity_ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand)

    def SetMaxMotorSpeed(self, axis, speed):
        return _WMX3ApiPython.Velocity_SetMaxMotorSpeed(self, axis, speed)

    def GetMaxMotorSpeed(self, axis):
        pSpeed = doublep()
        ret = _WMX3ApiPython.Velocity_GetMaxMotorSpeed(self, axis, pSpeed)
        return ret, pSpeed.value()



    def OverrideVel(self, *args):
        return _WMX3ApiPython.Velocity_OverrideVel(self, *args)

    def StartPosToVel_TriggerVel(self, *args):
        return _WMX3ApiPython.Velocity_StartPosToVel_TriggerVel(self, *args)

    def StartPosToVel_TriggerEvents(self, *args):
        return _WMX3ApiPython.Velocity_StartPosToVel_TriggerEvents(self, *args)

    def StartTrqToVel_TriggerVel(self, *args):
        return _WMX3ApiPython.Velocity_StartTrqToVel_TriggerVel(self, *args)

    def StartTrqToVel_TriggerEvents(self, *args):
        return _WMX3ApiPython.Velocity_StartTrqToVel_TriggerEvents(self, *args)
Velocity_swigregister = _WMX3ApiPython.Velocity_swigregister
Velocity_swigregister(Velocity)

class Torque_TrqCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Torque_TrqCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Torque_TrqCommand, name)
    __repr__ = _swig_repr

    def GetData(self, trqCommand):
        return _WMX3ApiPython.Torque_TrqCommand_GetData(self, trqCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Torque_TrqCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Torque_TrqCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Torque_TrqCommand_axis_get, _WMX3ApiPython.Torque_TrqCommand_axis_set)
    __swig_setmethods__["torque"] = _WMX3ApiPython.Torque_TrqCommand_torque_set
    __swig_getmethods__["torque"] = _WMX3ApiPython.Torque_TrqCommand_torque_get
    if _newclass:
        torque = _swig_property(_WMX3ApiPython.Torque_TrqCommand_torque_get, _WMX3ApiPython.Torque_TrqCommand_torque_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Torque_TrqCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Torque_TrqCommand
    __del__ = lambda self: None
Torque_TrqCommand_swigregister = _WMX3ApiPython.Torque_TrqCommand_swigregister
Torque_TrqCommand_swigregister(Torque_TrqCommand)

class Torque_TriggerTrqCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Torque_TriggerTrqCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Torque_TriggerTrqCommand, name)
    __repr__ = _swig_repr

    def GetData(self, triggerTrqCommand):
        return _WMX3ApiPython.Torque_TriggerTrqCommand_GetData(self, triggerTrqCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.Torque_TriggerTrqCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.Torque_TriggerTrqCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.Torque_TriggerTrqCommand_axis_get, _WMX3ApiPython.Torque_TriggerTrqCommand_axis_set)
    __swig_setmethods__["torque"] = _WMX3ApiPython.Torque_TriggerTrqCommand_torque_set
    __swig_getmethods__["torque"] = _WMX3ApiPython.Torque_TriggerTrqCommand_torque_get
    if _newclass:
        torque = _swig_property(_WMX3ApiPython.Torque_TriggerTrqCommand_torque_get, _WMX3ApiPython.Torque_TriggerTrqCommand_torque_set)
    __swig_setmethods__["trigger"] = _WMX3ApiPython.Torque_TriggerTrqCommand_trigger_set
    __swig_getmethods__["trigger"] = _WMX3ApiPython.Torque_TriggerTrqCommand_trigger_get
    if _newclass:
        trigger = _swig_property(_WMX3ApiPython.Torque_TriggerTrqCommand_trigger_get, _WMX3ApiPython.Torque_TriggerTrqCommand_trigger_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Torque_TriggerTrqCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Torque_TriggerTrqCommand
    __del__ = lambda self: None
Torque_TriggerTrqCommand_swigregister = _WMX3ApiPython.Torque_TriggerTrqCommand_swigregister
Torque_TriggerTrqCommand_swigregister(Torque_TriggerTrqCommand)

class Torque(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Torque, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Torque, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Torque(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Torque
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Torque_IsDeviceValid(self)

    def SetMaxTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetMaxTrqLimit(self, axis, torque)

    def GetMaxTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetMaxTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def SetPositiveTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetPositiveTrqLimit(self, axis, torque)

    def GetPositiveTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetPositiveTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def SetNegativeTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetNegativeTrqLimit(self, axis, torque)

    def GetNegativeTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetNegativeTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def StartTrq(self, *args):
        return _WMX3ApiPython.Torque_StartTrq(self, *args)

    def StartTrq_MaxMotorSpeed(self, pTrqCommand, maxMotorSpeed):
        return _WMX3ApiPython.Torque_StartTrq_MaxMotorSpeed(self, pTrqCommand, maxMotorSpeed)

    def StartRampTimeTrq(self, *args):
        return _WMX3ApiPython.Torque_StartRampTimeTrq(self, *args)

    def StartRampRateTrq(self, *args):
        return _WMX3ApiPython.Torque_StartRampRateTrq(self, *args)

    def StopTrq(self, axis):
        return _WMX3ApiPython.Torque_StopTrq(self, axis)

    def StopTrq_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Torque_StopTrq_AxisSel(self, pAxisSelection)

    def StartPosToTrq(self, *args):
        return _WMX3ApiPython.Torque_StartPosToTrq(self, *args)

    def StartPosToTrq_TriggerEvents(self, *args):
        return _WMX3ApiPython.Torque_StartPosToTrq_TriggerEvents(self, *args)

    def StartPosToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger):
        return _WMX3ApiPython.Torque_StartPosToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger)

    def StartPosToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartPosToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents)

    def StartPosToRampRateTrq(self, pTrqCommand, rampRate, pTrigger):
        return _WMX3ApiPython.Torque_StartPosToRampRateTrq(self, pTrqCommand, rampRate, pTrigger)

    def StartPosToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartPosToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents)

    def StartVelToTrq(self, *args):
        return _WMX3ApiPython.Torque_StartVelToTrq(self, *args)

    def StartVelToTrq_TriggerEvents(self, *args):
        return _WMX3ApiPython.Torque_StartVelToTrq_TriggerEvents(self, *args)

    def StartVelToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger):
        return _WMX3ApiPython.Torque_StartVelToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger)

    def StartVelToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartVelToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents)

    def StartVelToRampRateTrq(self, pTrqCommand, rampRate, pTrigger):
        return _WMX3ApiPython.Torque_StartVelToRampRateTrq(self, pTrqCommand, rampRate, pTrigger)

    def StartVelToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartVelToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents)
Torque_swigregister = _WMX3ApiPython.Torque_swigregister
Torque_swigregister(Torque)

class Sync_SyncGroupStartupType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync_SyncGroupStartupType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync_SyncGroupStartupType, name)
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.Sync_SyncGroupStartupType_Normal
    CatchUp = _WMX3ApiPython.Sync_SyncGroupStartupType_CatchUp

    def __init__(self):
        this = _WMX3ApiPython.new_Sync_SyncGroupStartupType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroupStartupType
    __del__ = lambda self: None
Sync_SyncGroupStartupType_swigregister = _WMX3ApiPython.Sync_SyncGroupStartupType_swigregister
Sync_SyncGroupStartupType_swigregister(Sync_SyncGroupStartupType)

class Sync_SyncOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync_SyncOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync_SyncOptions, name)
    __repr__ = _swig_repr

    def GetData(self, syncOptions):
        return _WMX3ApiPython.Sync_SyncOptions_GetData(self, syncOptions)
    __swig_setmethods__["useMasterFeedback"] = _WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_set
    __swig_getmethods__["useMasterFeedback"] = _WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_get
    if _newclass:
        useMasterFeedback = _swig_property(_WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_get, _WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Sync_SyncOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncOptions
    __del__ = lambda self: None
Sync_SyncOptions_swigregister = _WMX3ApiPython.Sync_SyncOptions_swigregister
Sync_SyncOptions_swigregister(Sync_SyncOptions)

class Sync_SyncCombineOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync_SyncCombineOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync_SyncCombineOptions, name)
    __repr__ = _swig_repr

    def GetData(self, syncCombineOptions):
        return _WMX3ApiPython.Sync_SyncCombineOptions_GetData(self, syncCombineOptions)
    __swig_setmethods__["useMaster1Feedback"] = _WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_set
    __swig_getmethods__["useMaster1Feedback"] = _WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_get
    if _newclass:
        useMaster1Feedback = _swig_property(_WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_get, _WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_set)
    __swig_setmethods__["useMaster2Feedback"] = _WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_set
    __swig_getmethods__["useMaster2Feedback"] = _WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_get
    if _newclass:
        useMaster2Feedback = _swig_property(_WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_get, _WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Sync_SyncCombineOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncCombineOptions
    __del__ = lambda self: None
Sync_SyncCombineOptions_swigregister = _WMX3ApiPython.Sync_SyncCombineOptions_swigregister
Sync_SyncCombineOptions_swigregister(Sync_SyncCombineOptions)

class Sync_SyncGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync_SyncGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync_SyncGroup, name)
    __repr__ = _swig_repr

    def GetData(self, syncGroup):
        return _WMX3ApiPython.Sync_SyncGroup_GetData(self, syncGroup)

    def SetData(self, syncGroup):
        return _WMX3ApiPython.Sync_SyncGroup_SetData(self, syncGroup)
    __swig_setmethods__["masterAxis"] = _WMX3ApiPython.Sync_SyncGroup_masterAxis_set
    __swig_getmethods__["masterAxis"] = _WMX3ApiPython.Sync_SyncGroup_masterAxis_get
    if _newclass:
        masterAxis = _swig_property(_WMX3ApiPython.Sync_SyncGroup_masterAxis_get, _WMX3ApiPython.Sync_SyncGroup_masterAxis_set)
    __swig_setmethods__["slaveAxisCount"] = _WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_set
    __swig_getmethods__["slaveAxisCount"] = _WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_get
    if _newclass:
        slaveAxisCount = _swig_property(_WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_get, _WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_set)
    __swig_setmethods__["slaveAxis"] = _WMX3ApiPython.Sync_SyncGroup_slaveAxis_set
    __swig_getmethods__["slaveAxis"] = _WMX3ApiPython.Sync_SyncGroup_slaveAxis_get
    if _newclass:
        slaveAxis = _swig_property(_WMX3ApiPython.Sync_SyncGroup_slaveAxis_get, _WMX3ApiPython.Sync_SyncGroup_slaveAxis_set)

    def SetSlaveAxis(self, index, value):
        return _WMX3ApiPython.Sync_SyncGroup_SetSlaveAxis(self, index, value)

    def GetSlaveAxis(self, index):
        return _WMX3ApiPython.Sync_SyncGroup_GetSlaveAxis(self, index)
    __swig_setmethods__["servoOnOffSynchronization"] = _WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_set
    __swig_getmethods__["servoOnOffSynchronization"] = _WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_get
    if _newclass:
        servoOnOffSynchronization = _swig_property(_WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_get, _WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_set)
    __swig_setmethods__["startupType"] = _WMX3ApiPython.Sync_SyncGroup_startupType_set
    __swig_getmethods__["startupType"] = _WMX3ApiPython.Sync_SyncGroup_startupType_get
    if _newclass:
        startupType = _swig_property(_WMX3ApiPython.Sync_SyncGroup_startupType_get, _WMX3ApiPython.Sync_SyncGroup_startupType_set)
    __swig_setmethods__["gantryLoopCycleRatio"] = _WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_set
    __swig_getmethods__["gantryLoopCycleRatio"] = _WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_get
    if _newclass:
        gantryLoopCycleRatio = _swig_property(_WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_get, _WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_set)
    __swig_setmethods__["maxCatchUpDistance"] = _WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_set
    __swig_getmethods__["maxCatchUpDistance"] = _WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_get
    if _newclass:
        maxCatchUpDistance = _swig_property(_WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_get, _WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_set)
    __swig_setmethods__["catchUpVelocity"] = _WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_set
    __swig_getmethods__["catchUpVelocity"] = _WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_get
    if _newclass:
        catchUpVelocity = _swig_property(_WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_get, _WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_set)
    __swig_setmethods__["catchUpAcc"] = _WMX3ApiPython.Sync_SyncGroup_catchUpAcc_set
    __swig_getmethods__["catchUpAcc"] = _WMX3ApiPython.Sync_SyncGroup_catchUpAcc_get
    if _newclass:
        catchUpAcc = _swig_property(_WMX3ApiPython.Sync_SyncGroup_catchUpAcc_get, _WMX3ApiPython.Sync_SyncGroup_catchUpAcc_set)
    __swig_setmethods__["syncErrorTolerance"] = _WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_set
    __swig_getmethods__["syncErrorTolerance"] = _WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_get
    if _newclass:
        syncErrorTolerance = _swig_property(_WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_get, _WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_set)
    __swig_setmethods__["useMasterFeedback"] = _WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_set
    __swig_getmethods__["useMasterFeedback"] = _WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_get
    if _newclass:
        useMasterFeedback = _swig_property(_WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_get, _WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Sync_SyncGroup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroup
    __del__ = lambda self: None
Sync_SyncGroup_swigregister = _WMX3ApiPython.Sync_SyncGroup_swigregister
Sync_SyncGroup_swigregister(Sync_SyncGroup)

class Sync_SyncGroupStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync_SyncGroupStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync_SyncGroupStatus, name)
    __repr__ = _swig_repr

    def GetData(self, syncGroupStatus):
        return _WMX3ApiPython.Sync_SyncGroupStatus_GetData(self, syncGroupStatus)

    def SetData(self, syncGroupStatus):
        return _WMX3ApiPython.Sync_SyncGroupStatus_SetData(self, syncGroupStatus)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.Sync_SyncGroupStatus_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.Sync_SyncGroupStatus_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_enabled_get, _WMX3ApiPython.Sync_SyncGroupStatus_enabled_set)
    __swig_setmethods__["homeDone"] = _WMX3ApiPython.Sync_SyncGroupStatus_homeDone_set
    __swig_getmethods__["homeDone"] = _WMX3ApiPython.Sync_SyncGroupStatus_homeDone_get
    if _newclass:
        homeDone = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_homeDone_get, _WMX3ApiPython.Sync_SyncGroupStatus_homeDone_set)
    __swig_setmethods__["catchUpError"] = _WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_set
    __swig_getmethods__["catchUpError"] = _WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_get
    if _newclass:
        catchUpError = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_get, _WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_set)
    __swig_setmethods__["syncError"] = _WMX3ApiPython.Sync_SyncGroupStatus_syncError_set
    __swig_getmethods__["syncError"] = _WMX3ApiPython.Sync_SyncGroupStatus_syncError_get
    if _newclass:
        syncError = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_syncError_get, _WMX3ApiPython.Sync_SyncGroupStatus_syncError_set)
    __swig_setmethods__["axisError"] = _WMX3ApiPython.Sync_SyncGroupStatus_axisError_set
    __swig_getmethods__["axisError"] = _WMX3ApiPython.Sync_SyncGroupStatus_axisError_get
    if _newclass:
        axisError = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_axisError_get, _WMX3ApiPython.Sync_SyncGroupStatus_axisError_set)
    __swig_setmethods__["interruptError"] = _WMX3ApiPython.Sync_SyncGroupStatus_interruptError_set
    __swig_getmethods__["interruptError"] = _WMX3ApiPython.Sync_SyncGroupStatus_interruptError_get
    if _newclass:
        interruptError = _swig_property(_WMX3ApiPython.Sync_SyncGroupStatus_interruptError_get, _WMX3ApiPython.Sync_SyncGroupStatus_interruptError_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Sync_SyncGroupStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroupStatus
    __del__ = lambda self: None
Sync_SyncGroupStatus_swigregister = _WMX3ApiPython.Sync_SyncGroupStatus_swigregister
Sync_SyncGroupStatus_swigregister(Sync_SyncGroupStatus)

class Sync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sync, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Sync(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Sync
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Sync_IsDeviceValid(self)

    def SetSyncMasterSlave(self, *args):
        return _WMX3ApiPython.Sync_SetSyncMasterSlave(self, *args)

    def SetSyncCombine(self, *args):
        return _WMX3ApiPython.Sync_SetSyncCombine(self, *args)

    def SetAbsoluteSyncPhase(self, slaveAxis, phase, pProfile):
        return _WMX3ApiPython.Sync_SetAbsoluteSyncPhase(self, slaveAxis, phase, pProfile)

    def AddRelativeSyncPhase(self, slaveAxis, phase, pProfile):
        return _WMX3ApiPython.Sync_AddRelativeSyncPhase(self, slaveAxis, phase, pProfile)

    def SetSyncGearRatio(self, *args):
        return _WMX3ApiPython.Sync_SetSyncGearRatio(self, *args)

    def SyncToJog(self, *args):
        return _WMX3ApiPython.Sync_SyncToJog(self, *args)

    def ResolveSync(self, slaveAxis):
        return _WMX3ApiPython.Sync_ResolveSync(self, slaveAxis)

    def SetSyncGroup(self, groupId, pSyncGroup):
        return _WMX3ApiPython.Sync_SetSyncGroup(self, groupId, pSyncGroup)

    def GetSyncGroup(self, groupId):
        pSyncGroup = Sync_SyncGroup()
        ret = _WMX3ApiPython.Sync_GetSyncGroup(self, groupId, pSyncGroup)
        return ret, pSyncGroup



    def AddAxisToSyncGroup(self, groupId, axis, isMaster):
        return _WMX3ApiPython.Sync_AddAxisToSyncGroup(self, groupId, axis, isMaster)

    def RemoveAxisFromSyncGroup(self, groupId, axis):
        return _WMX3ApiPython.Sync_RemoveAxisFromSyncGroup(self, groupId, axis)

    def EnableSyncGroup(self, groupId, enable):
        return _WMX3ApiPython.Sync_EnableSyncGroup(self, groupId, enable)

    def GetSyncGroupStatus(self, groupId):
        pStatus = Sync_SyncGroupStatus()
        ret = _WMX3ApiPython.Sync_GetSyncGroupStatus(self, groupId, pStatus)
        return ret, pStatus



    def ClearSyncGroupError(self, groupId):
        return _WMX3ApiPython.Sync_ClearSyncGroupError(self, groupId)
Sync_swigregister = _WMX3ApiPython.Sync_swigregister
Sync_swigregister(Sync)

class Config_VelocityMonitorSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_VelocityMonitorSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_VelocityMonitorSource, name)
    __repr__ = _swig_repr
    UseVelocityFeedback = _WMX3ApiPython.Config_VelocityMonitorSource_UseVelocityFeedback
    CalculateFromPositionFeedback = _WMX3ApiPython.Config_VelocityMonitorSource_CalculateFromPositionFeedback

    def __init__(self):
        this = _WMX3ApiPython.new_Config_VelocityMonitorSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_VelocityMonitorSource
    __del__ = lambda self: None
Config_VelocityMonitorSource_swigregister = _WMX3ApiPython.Config_VelocityMonitorSource_swigregister
Config_VelocityMonitorSource_swigregister(Config_VelocityMonitorSource)

class Config_HomeDirection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_HomeDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_HomeDirection, name)
    __repr__ = _swig_repr
    Positive = _WMX3ApiPython.Config_HomeDirection_Positive
    Negative = _WMX3ApiPython.Config_HomeDirection_Negative

    def __init__(self):
        this = _WMX3ApiPython.new_Config_HomeDirection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeDirection
    __del__ = lambda self: None
Config_HomeDirection_swigregister = _WMX3ApiPython.Config_HomeDirection_swigregister
Config_HomeDirection_swigregister(Config_HomeDirection)

class Config_HomeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_HomeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_HomeType, name)
    __repr__ = _swig_repr
    CurrentPos = _WMX3ApiPython.Config_HomeType_CurrentPos
    ZPulse = _WMX3ApiPython.Config_HomeType_ZPulse
    HS = _WMX3ApiPython.Config_HomeType_HS
    HSHS = _WMX3ApiPython.Config_HomeType_HSHS
    HSZPulse = _WMX3ApiPython.Config_HomeType_HSZPulse
    HSReverseZPulse = _WMX3ApiPython.Config_HomeType_HSReverseZPulse
    HSOff = _WMX3ApiPython.Config_HomeType_HSOff
    HSOffZPulse = _WMX3ApiPython.Config_HomeType_HSOffZPulse
    HSOffReverseZPulse = _WMX3ApiPython.Config_HomeType_HSOffReverseZPulse
    LSReverseZPulse = _WMX3ApiPython.Config_HomeType_LSReverseZPulse
    NearLSReverseZPulse = _WMX3ApiPython.Config_HomeType_NearLSReverseZPulse
    ExternalLSReverseZPulse = _WMX3ApiPython.Config_HomeType_ExternalLSReverseZPulse
    TouchProbe = _WMX3ApiPython.Config_HomeType_TouchProbe
    HSTouchProbe = _WMX3ApiPython.Config_HomeType_HSTouchProbe
    LS = _WMX3ApiPython.Config_HomeType_LS
    NearLS = _WMX3ApiPython.Config_HomeType_NearLS
    ExternalLS = _WMX3ApiPython.Config_HomeType_ExternalLS
    MechanicalEndDetection = _WMX3ApiPython.Config_HomeType_MechanicalEndDetection
    MechanicalEndDetectionHS = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionHS
    MechanicalEndDetectionLS = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionLS
    MechanicalEndDetectionReverseZPulse = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionReverseZPulse

    def __init__(self):
        this = _WMX3ApiPython.new_Config_HomeType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeType
    __del__ = lambda self: None
Config_HomeType_swigregister = _WMX3ApiPython.Config_HomeType_swigregister
Config_HomeType_swigregister(Config_HomeType)

class Config_LimitSwitchType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_LimitSwitchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_LimitSwitchType, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.Config_LimitSwitchType_PyNone
    ServoOff = _WMX3ApiPython.Config_LimitSwitchType_ServoOff
    DecServoOff = _WMX3ApiPython.Config_LimitSwitchType_DecServoOff
    Dec = _WMX3ApiPython.Config_LimitSwitchType_Dec
    SlowDecServoOff = _WMX3ApiPython.Config_LimitSwitchType_SlowDecServoOff
    SlowDec = _WMX3ApiPython.Config_LimitSwitchType_SlowDec
    SeparatePositiveLSNegativeLS = _WMX3ApiPython.Config_LimitSwitchType_SeparatePositiveLSNegativeLS

    def __init__(self):
        this = _WMX3ApiPython.new_Config_LimitSwitchType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitSwitchType
    __del__ = lambda self: None
Config_LimitSwitchType_swigregister = _WMX3ApiPython.Config_LimitSwitchType_swigregister
Config_LimitSwitchType_swigregister(Config_LimitSwitchType)

class Config_LimitSwitchDirection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_LimitSwitchDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_LimitSwitchDirection, name)
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.Config_LimitSwitchDirection_Normal
    Reverse = _WMX3ApiPython.Config_LimitSwitchDirection_Reverse

    def __init__(self):
        this = _WMX3ApiPython.new_Config_LimitSwitchDirection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitSwitchDirection
    __del__ = lambda self: None
Config_LimitSwitchDirection_swigregister = _WMX3ApiPython.Config_LimitSwitchDirection_swigregister
Config_LimitSwitchDirection_swigregister(Config_LimitSwitchDirection)

class Config_ProhibitOvertravelType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_ProhibitOvertravelType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_ProhibitOvertravelType, name)
    __repr__ = _swig_repr
    Disabled = _WMX3ApiPython.Config_ProhibitOvertravelType_Disabled
    ChangeDeceleration = _WMX3ApiPython.Config_ProhibitOvertravelType_ChangeDeceleration
    ChangeInitialVelocity = _WMX3ApiPython.Config_ProhibitOvertravelType_ChangeInitialVelocity

    def __init__(self):
        this = _WMX3ApiPython.new_Config_ProhibitOvertravelType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_ProhibitOvertravelType
    __del__ = lambda self: None
Config_ProhibitOvertravelType_swigregister = _WMX3ApiPython.Config_ProhibitOvertravelType_swigregister
Config_ProhibitOvertravelType_swigregister(Config_ProhibitOvertravelType)

class Config_LinearIntplOverrideType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_LinearIntplOverrideType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_LinearIntplOverrideType, name)
    __repr__ = _swig_repr
    Smoothing = _WMX3ApiPython.Config_LinearIntplOverrideType_Smoothing
    Blending = _WMX3ApiPython.Config_LinearIntplOverrideType_Blending
    FastBlending = _WMX3ApiPython.Config_LinearIntplOverrideType_FastBlending

    def __init__(self):
        this = _WMX3ApiPython.new_Config_LinearIntplOverrideType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LinearIntplOverrideType
    __del__ = lambda self: None
Config_LinearIntplOverrideType_swigregister = _WMX3ApiPython.Config_LinearIntplOverrideType_swigregister
Config_LinearIntplOverrideType_swigregister(Config_LinearIntplOverrideType)

class Config_LinearIntplProfileCalcMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_LinearIntplProfileCalcMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_LinearIntplProfileCalcMode, name)
    __repr__ = _swig_repr
    AxisLimit = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_AxisLimit
    MatchSlowestAxis = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_MatchSlowestAxis
    MatchFarthestAxis = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_MatchFarthestAxis

    def __init__(self):
        this = _WMX3ApiPython.new_Config_LinearIntplProfileCalcMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LinearIntplProfileCalcMode
    __del__ = lambda self: None
Config_LinearIntplProfileCalcMode_swigregister = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_swigregister
Config_LinearIntplProfileCalcMode_swigregister(Config_LinearIntplProfileCalcMode)

class Config_CircularIntplOverrideType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_CircularIntplOverrideType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_CircularIntplOverrideType, name)
    __repr__ = _swig_repr
    Blending = _WMX3ApiPython.Config_CircularIntplOverrideType_Blending
    FastBlending = _WMX3ApiPython.Config_CircularIntplOverrideType_FastBlending

    def __init__(self):
        this = _WMX3ApiPython.new_Config_CircularIntplOverrideType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_CircularIntplOverrideType
    __del__ = lambda self: None
Config_CircularIntplOverrideType_swigregister = _WMX3ApiPython.Config_CircularIntplOverrideType_swigregister
Config_CircularIntplOverrideType_swigregister(Config_CircularIntplOverrideType)

class Config_FollowingErrorAlarmType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_FollowingErrorAlarmType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_FollowingErrorAlarmType, name)
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_FollowingErrorAlarmType_NoAction
    QuickStop = _WMX3ApiPython.Config_FollowingErrorAlarmType_QuickStop

    def __init__(self):
        this = _WMX3ApiPython.new_Config_FollowingErrorAlarmType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FollowingErrorAlarmType
    __del__ = lambda self: None
Config_FollowingErrorAlarmType_swigregister = _WMX3ApiPython.Config_FollowingErrorAlarmType_swigregister
Config_FollowingErrorAlarmType_swigregister(Config_FollowingErrorAlarmType)

class Config_VelocityFollowingErrorAlarmType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_VelocityFollowingErrorAlarmType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_VelocityFollowingErrorAlarmType, name)
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_NoAction
    QuickStop = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_QuickStop
    Warning = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_Warning

    def __init__(self):
        this = _WMX3ApiPython.new_Config_VelocityFollowingErrorAlarmType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_VelocityFollowingErrorAlarmType
    __del__ = lambda self: None
Config_VelocityFollowingErrorAlarmType_swigregister = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_swigregister
Config_VelocityFollowingErrorAlarmType_swigregister(Config_VelocityFollowingErrorAlarmType)

class Config_SyncCompensationMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_SyncCompensationMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_SyncCompensationMode, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.Config_SyncCompensationMode_PyNone
    VelocityOffset = _WMX3ApiPython.Config_SyncCompensationMode_VelocityOffset
    SymmetricVelocityOffset = _WMX3ApiPython.Config_SyncCompensationMode_SymmetricVelocityOffset

    def __init__(self):
        this = _WMX3ApiPython.new_Config_SyncCompensationMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SyncCompensationMode
    __del__ = lambda self: None
Config_SyncCompensationMode_swigregister = _WMX3ApiPython.Config_SyncCompensationMode_swigregister
Config_SyncCompensationMode_swigregister(Config_SyncCompensationMode)

class Config_MasterDesyncType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_MasterDesyncType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_MasterDesyncType, name)
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_MasterDesyncType_NoAction
    ServoOff = _WMX3ApiPython.Config_MasterDesyncType_ServoOff
    DecServoOff = _WMX3ApiPython.Config_MasterDesyncType_DecServoOff
    Dec = _WMX3ApiPython.Config_MasterDesyncType_Dec

    def __init__(self):
        this = _WMX3ApiPython.new_Config_MasterDesyncType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_MasterDesyncType
    __del__ = lambda self: None
Config_MasterDesyncType_swigregister = _WMX3ApiPython.Config_MasterDesyncType_swigregister
Config_MasterDesyncType_swigregister(Config_MasterDesyncType)

class Config_SlaveDesyncType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_SlaveDesyncType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_SlaveDesyncType, name)
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_SlaveDesyncType_NoAction
    ServoOff = _WMX3ApiPython.Config_SlaveDesyncType_ServoOff
    ResolveSync = _WMX3ApiPython.Config_SlaveDesyncType_ResolveSync

    def __init__(self):
        this = _WMX3ApiPython.new_Config_SlaveDesyncType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SlaveDesyncType
    __del__ = lambda self: None
Config_SlaveDesyncType_swigregister = _WMX3ApiPython.Config_SlaveDesyncType_swigregister
Config_SlaveDesyncType_swigregister(Config_SlaveDesyncType)

class Config_EStopSignalSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_EStopSignalSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_EStopSignalSource, name)
    __repr__ = _swig_repr
    Input = _WMX3ApiPython.Config_EStopSignalSource_Input
    Output = _WMX3ApiPython.Config_EStopSignalSource_Output
    UserMemory = _WMX3ApiPython.Config_EStopSignalSource_UserMemory

    def __init__(self):
        this = _WMX3ApiPython.new_Config_EStopSignalSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopSignalSource
    __del__ = lambda self: None
Config_EStopSignalSource_swigregister = _WMX3ApiPython.Config_EStopSignalSource_swigregister
Config_EStopSignalSource_swigregister(Config_EStopSignalSource)

class Config_EStopStatusSignalDestination(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_EStopStatusSignalDestination, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_EStopStatusSignalDestination, name)
    __repr__ = _swig_repr
    Output = _WMX3ApiPython.Config_EStopStatusSignalDestination_Output
    UserMemory = _WMX3ApiPython.Config_EStopStatusSignalDestination_UserMemory

    def __init__(self):
        this = _WMX3ApiPython.new_Config_EStopStatusSignalDestination()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopStatusSignalDestination
    __del__ = lambda self: None
Config_EStopStatusSignalDestination_swigregister = _WMX3ApiPython.Config_EStopStatusSignalDestination_swigregister
Config_EStopStatusSignalDestination_swigregister(Config_EStopStatusSignalDestination)

class Config_EStopLevel1Type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_EStopLevel1Type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_EStopLevel1Type, name)
    __repr__ = _swig_repr
    Dec = _WMX3ApiPython.Config_EStopLevel1Type_Dec
    DecServoOff = _WMX3ApiPython.Config_EStopLevel1Type_DecServoOff

    def __init__(self):
        this = _WMX3ApiPython.new_Config_EStopLevel1Type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopLevel1Type
    __del__ = lambda self: None
Config_EStopLevel1Type_swigregister = _WMX3ApiPython.Config_EStopLevel1Type_swigregister
Config_EStopLevel1Type_swigregister(Config_EStopLevel1Type)

class Config_FeedbackParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_FeedbackParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_FeedbackParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_FeedbackParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_FeedbackParam_SetData(self, param)
    __swig_setmethods__["inPosWidth"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth_set
    __swig_getmethods__["inPosWidth"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth_get
    if _newclass:
        inPosWidth = _swig_property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth_set)
    __swig_setmethods__["inPosWidth2"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth2_set
    __swig_getmethods__["inPosWidth2"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth2_get
    if _newclass:
        inPosWidth2 = _swig_property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth2_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth2_set)
    __swig_setmethods__["inPosWidth3"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth3_set
    __swig_getmethods__["inPosWidth3"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth3_get
    if _newclass:
        inPosWidth3 = _swig_property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth3_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth3_set)
    __swig_setmethods__["inPosWidth4"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth4_set
    __swig_getmethods__["inPosWidth4"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth4_get
    if _newclass:
        inPosWidth4 = _swig_property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth4_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth4_set)
    __swig_setmethods__["inPosWidth5"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth5_set
    __swig_getmethods__["inPosWidth5"] = _WMX3ApiPython.Config_FeedbackParam_inPosWidth5_get
    if _newclass:
        inPosWidth5 = _swig_property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth5_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth5_set)
    __swig_setmethods__["velocityMonitorSource"] = _WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_set
    __swig_getmethods__["velocityMonitorSource"] = _WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_get
    if _newclass:
        velocityMonitorSource = _swig_property(_WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_get, _WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_set)
    __swig_setmethods__["posSetWidth"] = _WMX3ApiPython.Config_FeedbackParam_posSetWidth_set
    __swig_getmethods__["posSetWidth"] = _WMX3ApiPython.Config_FeedbackParam_posSetWidth_get
    if _newclass:
        posSetWidth = _swig_property(_WMX3ApiPython.Config_FeedbackParam_posSetWidth_get, _WMX3ApiPython.Config_FeedbackParam_posSetWidth_set)
    __swig_setmethods__["delayedPosSetWidth"] = _WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_set
    __swig_getmethods__["delayedPosSetWidth"] = _WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_get
    if _newclass:
        delayedPosSetWidth = _swig_property(_WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_get, _WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_set)
    __swig_setmethods__["delayedPosSetMilliseconds"] = _WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_set
    __swig_getmethods__["delayedPosSetMilliseconds"] = _WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_get
    if _newclass:
        delayedPosSetMilliseconds = _swig_property(_WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_get, _WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_FeedbackParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FeedbackParam
    __del__ = lambda self: None
Config_FeedbackParam_swigregister = _WMX3ApiPython.Config_FeedbackParam_swigregister
Config_FeedbackParam_swigregister(Config_FeedbackParam)

class Config_HomeParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_HomeParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_HomeParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_HomeParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_HomeParam_SetData(self, param)
    __swig_setmethods__["homeType"] = _WMX3ApiPython.Config_HomeParam_homeType_set
    __swig_getmethods__["homeType"] = _WMX3ApiPython.Config_HomeParam_homeType_get
    if _newclass:
        homeType = _swig_property(_WMX3ApiPython.Config_HomeParam_homeType_get, _WMX3ApiPython.Config_HomeParam_homeType_set)
    __swig_setmethods__["homeDirection"] = _WMX3ApiPython.Config_HomeParam_homeDirection_set
    __swig_getmethods__["homeDirection"] = _WMX3ApiPython.Config_HomeParam_homeDirection_get
    if _newclass:
        homeDirection = _swig_property(_WMX3ApiPython.Config_HomeParam_homeDirection_get, _WMX3ApiPython.Config_HomeParam_homeDirection_set)
    __swig_setmethods__["homingVelocitySlow"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlow_set
    __swig_getmethods__["homingVelocitySlow"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlow_get
    if _newclass:
        homingVelocitySlow = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlow_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlow_set)
    __swig_setmethods__["homingVelocitySlowAcc"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_set
    __swig_getmethods__["homingVelocitySlowAcc"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_get
    if _newclass:
        homingVelocitySlowAcc = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_set)
    __swig_setmethods__["homingVelocitySlowDec"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_set
    __swig_getmethods__["homingVelocitySlowDec"] = _WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_get
    if _newclass:
        homingVelocitySlowDec = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_set)
    __swig_setmethods__["homingVelocityFast"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFast_set
    __swig_getmethods__["homingVelocityFast"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFast_get
    if _newclass:
        homingVelocityFast = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocityFast_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFast_set)
    __swig_setmethods__["homingVelocityFastAcc"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_set
    __swig_getmethods__["homingVelocityFastAcc"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_get
    if _newclass:
        homingVelocityFastAcc = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_set)
    __swig_setmethods__["homingVelocityFastDec"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_set
    __swig_getmethods__["homingVelocityFastDec"] = _WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_get
    if _newclass:
        homingVelocityFastDec = _swig_property(_WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_set)
    __swig_setmethods__["homingReverseDistance"] = _WMX3ApiPython.Config_HomeParam_homingReverseDistance_set
    __swig_getmethods__["homingReverseDistance"] = _WMX3ApiPython.Config_HomeParam_homingReverseDistance_get
    if _newclass:
        homingReverseDistance = _swig_property(_WMX3ApiPython.Config_HomeParam_homingReverseDistance_get, _WMX3ApiPython.Config_HomeParam_homingReverseDistance_set)
    __swig_setmethods__["homeShiftVelocity"] = _WMX3ApiPython.Config_HomeParam_homeShiftVelocity_set
    __swig_getmethods__["homeShiftVelocity"] = _WMX3ApiPython.Config_HomeParam_homeShiftVelocity_get
    if _newclass:
        homeShiftVelocity = _swig_property(_WMX3ApiPython.Config_HomeParam_homeShiftVelocity_get, _WMX3ApiPython.Config_HomeParam_homeShiftVelocity_set)
    __swig_setmethods__["homeShiftAcc"] = _WMX3ApiPython.Config_HomeParam_homeShiftAcc_set
    __swig_getmethods__["homeShiftAcc"] = _WMX3ApiPython.Config_HomeParam_homeShiftAcc_get
    if _newclass:
        homeShiftAcc = _swig_property(_WMX3ApiPython.Config_HomeParam_homeShiftAcc_get, _WMX3ApiPython.Config_HomeParam_homeShiftAcc_set)
    __swig_setmethods__["homeShiftDec"] = _WMX3ApiPython.Config_HomeParam_homeShiftDec_set
    __swig_getmethods__["homeShiftDec"] = _WMX3ApiPython.Config_HomeParam_homeShiftDec_get
    if _newclass:
        homeShiftDec = _swig_property(_WMX3ApiPython.Config_HomeParam_homeShiftDec_get, _WMX3ApiPython.Config_HomeParam_homeShiftDec_set)
    __swig_setmethods__["homeShiftDistance"] = _WMX3ApiPython.Config_HomeParam_homeShiftDistance_set
    __swig_getmethods__["homeShiftDistance"] = _WMX3ApiPython.Config_HomeParam_homeShiftDistance_get
    if _newclass:
        homeShiftDistance = _swig_property(_WMX3ApiPython.Config_HomeParam_homeShiftDistance_get, _WMX3ApiPython.Config_HomeParam_homeShiftDistance_set)
    __swig_setmethods__["invertHSPolarity"] = _WMX3ApiPython.Config_HomeParam_invertHSPolarity_set
    __swig_getmethods__["invertHSPolarity"] = _WMX3ApiPython.Config_HomeParam_invertHSPolarity_get
    if _newclass:
        invertHSPolarity = _swig_property(_WMX3ApiPython.Config_HomeParam_invertHSPolarity_get, _WMX3ApiPython.Config_HomeParam_invertHSPolarity_set)
    __swig_setmethods__["multipleZPulse"] = _WMX3ApiPython.Config_HomeParam_multipleZPulse_set
    __swig_getmethods__["multipleZPulse"] = _WMX3ApiPython.Config_HomeParam_multipleZPulse_get
    if _newclass:
        multipleZPulse = _swig_property(_WMX3ApiPython.Config_HomeParam_multipleZPulse_get, _WMX3ApiPython.Config_HomeParam_multipleZPulse_set)
    __swig_setmethods__["roundPosCmdAfterHoming"] = _WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_set
    __swig_getmethods__["roundPosCmdAfterHoming"] = _WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_get
    if _newclass:
        roundPosCmdAfterHoming = _swig_property(_WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_get, _WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_set)
    __swig_setmethods__["pauseMode"] = _WMX3ApiPython.Config_HomeParam_pauseMode_set
    __swig_getmethods__["pauseMode"] = _WMX3ApiPython.Config_HomeParam_pauseMode_get
    if _newclass:
        pauseMode = _swig_property(_WMX3ApiPython.Config_HomeParam_pauseMode_get, _WMX3ApiPython.Config_HomeParam_pauseMode_set)
    __swig_setmethods__["maxHSOnAtStartReverseDistance"] = _WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_set
    __swig_getmethods__["maxHSOnAtStartReverseDistance"] = _WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_get
    if _newclass:
        maxHSOnAtStartReverseDistance = _swig_property(_WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_get, _WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_set)
    __swig_setmethods__["maxLSReverseDistance"] = _WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_set
    __swig_getmethods__["maxLSReverseDistance"] = _WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_get
    if _newclass:
        maxLSReverseDistance = _swig_property(_WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_get, _WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_set)
    __swig_setmethods__["zPulseDistanceCheck"] = _WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_set
    __swig_getmethods__["zPulseDistanceCheck"] = _WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_get
    if _newclass:
        zPulseDistanceCheck = _swig_property(_WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_get, _WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_set)
    __swig_setmethods__["homePosition"] = _WMX3ApiPython.Config_HomeParam_homePosition_set
    __swig_getmethods__["homePosition"] = _WMX3ApiPython.Config_HomeParam_homePosition_get
    if _newclass:
        homePosition = _swig_property(_WMX3ApiPython.Config_HomeParam_homePosition_get, _WMX3ApiPython.Config_HomeParam_homePosition_set)
    __swig_setmethods__["gantryHomingUseSlaveHS"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_set
    __swig_getmethods__["gantryHomingUseSlaveHS"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_get
    if _newclass:
        gantryHomingUseSlaveHS = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_set)
    __swig_setmethods__["gantryHomingUseSlaveLS"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_set
    __swig_getmethods__["gantryHomingUseSlaveLS"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_get
    if _newclass:
        gantryHomingUseSlaveLS = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_set)
    __swig_setmethods__["gantryHomingUseSlaveZPulse"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_set
    __swig_getmethods__["gantryHomingUseSlaveZPulse"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_get
    if _newclass:
        gantryHomingUseSlaveZPulse = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_set)
    __swig_setmethods__["gantryHomingUseSlaveTouchProbe"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_set
    __swig_getmethods__["gantryHomingUseSlaveTouchProbe"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_get
    if _newclass:
        gantryHomingUseSlaveTouchProbe = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_set)
    __swig_setmethods__["gantryHomingUseSlaveMechanicalEnd"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_set
    __swig_getmethods__["gantryHomingUseSlaveMechanicalEnd"] = _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_get
    if _newclass:
        gantryHomingUseSlaveMechanicalEnd = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_set)
    __swig_setmethods__["gantryHomingRetainSyncOffset"] = _WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_set
    __swig_getmethods__["gantryHomingRetainSyncOffset"] = _WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_get
    if _newclass:
        gantryHomingRetainSyncOffset = _swig_property(_WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_get, _WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_set)
    __swig_setmethods__["immediateStopAtLS"] = _WMX3ApiPython.Config_HomeParam_immediateStopAtLS_set
    __swig_getmethods__["immediateStopAtLS"] = _WMX3ApiPython.Config_HomeParam_immediateStopAtLS_get
    if _newclass:
        immediateStopAtLS = _swig_property(_WMX3ApiPython.Config_HomeParam_immediateStopAtLS_get, _WMX3ApiPython.Config_HomeParam_immediateStopAtLS_set)
    __swig_setmethods__["mechanicalEndDetectionPosDiff"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_set
    __swig_getmethods__["mechanicalEndDetectionPosDiff"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_get
    if _newclass:
        mechanicalEndDetectionPosDiff = _swig_property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_set)
    __swig_setmethods__["mechanicalEndDetectionTimeMilliseconds"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_set
    __swig_getmethods__["mechanicalEndDetectionTimeMilliseconds"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_get
    if _newclass:
        mechanicalEndDetectionTimeMilliseconds = _swig_property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_set)
    __swig_setmethods__["mechanicalEndDetectionIgnoreLS"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_set
    __swig_getmethods__["mechanicalEndDetectionIgnoreLS"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_get
    if _newclass:
        mechanicalEndDetectionIgnoreLS = _swig_property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_set)
    __swig_setmethods__["mechanicalEndDetectionFirstTorqueLimit"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_set
    __swig_getmethods__["mechanicalEndDetectionFirstTorqueLimit"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_get
    if _newclass:
        mechanicalEndDetectionFirstTorqueLimit = _swig_property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_set)
    __swig_setmethods__["mechanicalEndDetectionSecondTorqueLimit"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_set
    __swig_getmethods__["mechanicalEndDetectionSecondTorqueLimit"] = _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_get
    if _newclass:
        mechanicalEndDetectionSecondTorqueLimit = _swig_property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_set)
    __swig_setmethods__["openLoopHoming"] = _WMX3ApiPython.Config_HomeParam_openLoopHoming_set
    __swig_getmethods__["openLoopHoming"] = _WMX3ApiPython.Config_HomeParam_openLoopHoming_get
    if _newclass:
        openLoopHoming = _swig_property(_WMX3ApiPython.Config_HomeParam_openLoopHoming_get, _WMX3ApiPython.Config_HomeParam_openLoopHoming_set)
    __swig_setmethods__["clearHomeDoneOnServoOff"] = _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_set
    __swig_getmethods__["clearHomeDoneOnServoOff"] = _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_get
    if _newclass:
        clearHomeDoneOnServoOff = _swig_property(_WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_get, _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_set)
    __swig_setmethods__["clearHomeDoneOnCommStop"] = _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_set
    __swig_getmethods__["clearHomeDoneOnCommStop"] = _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_get
    if _newclass:
        clearHomeDoneOnCommStop = _swig_property(_WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_get, _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_HomeParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeParam
    __del__ = lambda self: None
Config_HomeParam_swigregister = _WMX3ApiPython.Config_HomeParam_swigregister
Config_HomeParam_swigregister(Config_HomeParam)

class Config_LimitParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_LimitParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_LimitParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_LimitParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_LimitParam_SetData(self, param)
    __swig_setmethods__["lsType"] = _WMX3ApiPython.Config_LimitParam_lsType_set
    __swig_getmethods__["lsType"] = _WMX3ApiPython.Config_LimitParam_lsType_get
    if _newclass:
        lsType = _swig_property(_WMX3ApiPython.Config_LimitParam_lsType_get, _WMX3ApiPython.Config_LimitParam_lsType_set)
    __swig_setmethods__["positiveLSType"] = _WMX3ApiPython.Config_LimitParam_positiveLSType_set
    __swig_getmethods__["positiveLSType"] = _WMX3ApiPython.Config_LimitParam_positiveLSType_get
    if _newclass:
        positiveLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_positiveLSType_get, _WMX3ApiPython.Config_LimitParam_positiveLSType_set)
    __swig_setmethods__["negativeLSType"] = _WMX3ApiPython.Config_LimitParam_negativeLSType_set
    __swig_getmethods__["negativeLSType"] = _WMX3ApiPython.Config_LimitParam_negativeLSType_get
    if _newclass:
        negativeLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_negativeLSType_get, _WMX3ApiPython.Config_LimitParam_negativeLSType_set)
    __swig_setmethods__["invertPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_set
    __swig_getmethods__["invertPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_get
    if _newclass:
        invertPositiveLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_set)
    __swig_setmethods__["invertNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_set
    __swig_getmethods__["invertNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_get
    if _newclass:
        invertNegativeLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_set)
    __swig_setmethods__["nearLSType"] = _WMX3ApiPython.Config_LimitParam_nearLSType_set
    __swig_getmethods__["nearLSType"] = _WMX3ApiPython.Config_LimitParam_nearLSType_get
    if _newclass:
        nearLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_nearLSType_get, _WMX3ApiPython.Config_LimitParam_nearLSType_set)
    __swig_setmethods__["nearPositiveLSType"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSType_set
    __swig_getmethods__["nearPositiveLSType"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSType_get
    if _newclass:
        nearPositiveLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSType_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSType_set)
    __swig_setmethods__["nearNegativeLSType"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSType_set
    __swig_getmethods__["nearNegativeLSType"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSType_get
    if _newclass:
        nearNegativeLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSType_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSType_set)
    __swig_setmethods__["nearPositiveLSByte"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_set
    __swig_getmethods__["nearPositiveLSByte"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_get
    if _newclass:
        nearPositiveLSByte = _swig_property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_set)
    __swig_setmethods__["nearPositiveLSBit"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_set
    __swig_getmethods__["nearPositiveLSBit"] = _WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_get
    if _newclass:
        nearPositiveLSBit = _swig_property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_set)
    __swig_setmethods__["invertNearPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_set
    __swig_getmethods__["invertNearPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_get
    if _newclass:
        invertNearPositiveLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_set)
    __swig_setmethods__["nearNegativeLSByte"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_set
    __swig_getmethods__["nearNegativeLSByte"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_get
    if _newclass:
        nearNegativeLSByte = _swig_property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_set)
    __swig_setmethods__["nearNegativeLSBit"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_set
    __swig_getmethods__["nearNegativeLSBit"] = _WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_get
    if _newclass:
        nearNegativeLSBit = _swig_property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_set)
    __swig_setmethods__["invertNearNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_set
    __swig_getmethods__["invertNearNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_get
    if _newclass:
        invertNearNegativeLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_set)
    __swig_setmethods__["externalLSType"] = _WMX3ApiPython.Config_LimitParam_externalLSType_set
    __swig_getmethods__["externalLSType"] = _WMX3ApiPython.Config_LimitParam_externalLSType_get
    if _newclass:
        externalLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_externalLSType_get, _WMX3ApiPython.Config_LimitParam_externalLSType_set)
    __swig_setmethods__["externalPositiveLSType"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSType_set
    __swig_getmethods__["externalPositiveLSType"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSType_get
    if _newclass:
        externalPositiveLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSType_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSType_set)
    __swig_setmethods__["externalNegativeLSType"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSType_set
    __swig_getmethods__["externalNegativeLSType"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSType_get
    if _newclass:
        externalNegativeLSType = _swig_property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSType_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSType_set)
    __swig_setmethods__["externalPositiveLSByte"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_set
    __swig_getmethods__["externalPositiveLSByte"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_get
    if _newclass:
        externalPositiveLSByte = _swig_property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_set)
    __swig_setmethods__["externalPositiveLSBit"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_set
    __swig_getmethods__["externalPositiveLSBit"] = _WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_get
    if _newclass:
        externalPositiveLSBit = _swig_property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_set)
    __swig_setmethods__["invertExternalPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_set
    __swig_getmethods__["invertExternalPositiveLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_get
    if _newclass:
        invertExternalPositiveLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_set)
    __swig_setmethods__["externalNegativeLSByte"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_set
    __swig_getmethods__["externalNegativeLSByte"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_get
    if _newclass:
        externalNegativeLSByte = _swig_property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_set)
    __swig_setmethods__["externalNegativeLSBit"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_set
    __swig_getmethods__["externalNegativeLSBit"] = _WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_get
    if _newclass:
        externalNegativeLSBit = _swig_property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_set)
    __swig_setmethods__["invertExternalNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_set
    __swig_getmethods__["invertExternalNegativeLSPolarity"] = _WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_get
    if _newclass:
        invertExternalNegativeLSPolarity = _swig_property(_WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_set)
    __swig_setmethods__["softLimitType"] = _WMX3ApiPython.Config_LimitParam_softLimitType_set
    __swig_getmethods__["softLimitType"] = _WMX3ApiPython.Config_LimitParam_softLimitType_get
    if _newclass:
        softLimitType = _swig_property(_WMX3ApiPython.Config_LimitParam_softLimitType_get, _WMX3ApiPython.Config_LimitParam_softLimitType_set)
    __swig_setmethods__["positiveSoftLimitType"] = _WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_set
    __swig_getmethods__["positiveSoftLimitType"] = _WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_get
    if _newclass:
        positiveSoftLimitType = _swig_property(_WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_get, _WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_set)
    __swig_setmethods__["negativeSoftLimitType"] = _WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_set
    __swig_getmethods__["negativeSoftLimitType"] = _WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_get
    if _newclass:
        negativeSoftLimitType = _swig_property(_WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_get, _WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_set)
    __swig_setmethods__["softLimitPositivePos"] = _WMX3ApiPython.Config_LimitParam_softLimitPositivePos_set
    __swig_getmethods__["softLimitPositivePos"] = _WMX3ApiPython.Config_LimitParam_softLimitPositivePos_get
    if _newclass:
        softLimitPositivePos = _swig_property(_WMX3ApiPython.Config_LimitParam_softLimitPositivePos_get, _WMX3ApiPython.Config_LimitParam_softLimitPositivePos_set)
    __swig_setmethods__["softLimitNegativePos"] = _WMX3ApiPython.Config_LimitParam_softLimitNegativePos_set
    __swig_getmethods__["softLimitNegativePos"] = _WMX3ApiPython.Config_LimitParam_softLimitNegativePos_get
    if _newclass:
        softLimitNegativePos = _swig_property(_WMX3ApiPython.Config_LimitParam_softLimitNegativePos_get, _WMX3ApiPython.Config_LimitParam_softLimitNegativePos_set)
    __swig_setmethods__["lsDec"] = _WMX3ApiPython.Config_LimitParam_lsDec_set
    __swig_getmethods__["lsDec"] = _WMX3ApiPython.Config_LimitParam_lsDec_get
    if _newclass:
        lsDec = _swig_property(_WMX3ApiPython.Config_LimitParam_lsDec_get, _WMX3ApiPython.Config_LimitParam_lsDec_set)
    __swig_setmethods__["lsSlowDec"] = _WMX3ApiPython.Config_LimitParam_lsSlowDec_set
    __swig_getmethods__["lsSlowDec"] = _WMX3ApiPython.Config_LimitParam_lsSlowDec_get
    if _newclass:
        lsSlowDec = _swig_property(_WMX3ApiPython.Config_LimitParam_lsSlowDec_get, _WMX3ApiPython.Config_LimitParam_lsSlowDec_set)
    __swig_setmethods__["allLSDuringHoming"] = _WMX3ApiPython.Config_LimitParam_allLSDuringHoming_set
    __swig_getmethods__["allLSDuringHoming"] = _WMX3ApiPython.Config_LimitParam_allLSDuringHoming_get
    if _newclass:
        allLSDuringHoming = _swig_property(_WMX3ApiPython.Config_LimitParam_allLSDuringHoming_get, _WMX3ApiPython.Config_LimitParam_allLSDuringHoming_set)
    __swig_setmethods__["lsDirection"] = _WMX3ApiPython.Config_LimitParam_lsDirection_set
    __swig_getmethods__["lsDirection"] = _WMX3ApiPython.Config_LimitParam_lsDirection_get
    if _newclass:
        lsDirection = _swig_property(_WMX3ApiPython.Config_LimitParam_lsDirection_get, _WMX3ApiPython.Config_LimitParam_lsDirection_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_LimitParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitParam
    __del__ = lambda self: None
Config_LimitParam_swigregister = _WMX3ApiPython.Config_LimitParam_swigregister
Config_LimitParam_swigregister(Config_LimitParam)

class Config_MotionParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_MotionParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_MotionParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_MotionParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_MotionParam_SetData(self, param)
    __swig_setmethods__["quickStopDec"] = _WMX3ApiPython.Config_MotionParam_quickStopDec_set
    __swig_getmethods__["quickStopDec"] = _WMX3ApiPython.Config_MotionParam_quickStopDec_get
    if _newclass:
        quickStopDec = _swig_property(_WMX3ApiPython.Config_MotionParam_quickStopDec_get, _WMX3ApiPython.Config_MotionParam_quickStopDec_set)
    __swig_setmethods__["prohibitOvertravel"] = _WMX3ApiPython.Config_MotionParam_prohibitOvertravel_set
    __swig_getmethods__["prohibitOvertravel"] = _WMX3ApiPython.Config_MotionParam_prohibitOvertravel_get
    if _newclass:
        prohibitOvertravel = _swig_property(_WMX3ApiPython.Config_MotionParam_prohibitOvertravel_get, _WMX3ApiPython.Config_MotionParam_prohibitOvertravel_set)
    __swig_setmethods__["linearIntplOverrideType"] = _WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_set
    __swig_getmethods__["linearIntplOverrideType"] = _WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_get
    if _newclass:
        linearIntplOverrideType = _swig_property(_WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_get, _WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_set)
    __swig_setmethods__["linearIntplOverrideSmoothPercent"] = _WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_set
    __swig_getmethods__["linearIntplOverrideSmoothPercent"] = _WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_get
    if _newclass:
        linearIntplOverrideSmoothPercent = _swig_property(_WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_get, _WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_set)
    __swig_setmethods__["circularIntplOverrideType"] = _WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_set
    __swig_getmethods__["circularIntplOverrideType"] = _WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_get
    if _newclass:
        circularIntplOverrideType = _swig_property(_WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_get, _WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_set)
    __swig_setmethods__["interruptedIntplUseQuickStop"] = _WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_set
    __swig_getmethods__["interruptedIntplUseQuickStop"] = _WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_get
    if _newclass:
        interruptedIntplUseQuickStop = _swig_property(_WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_get, _WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_set)
    __swig_setmethods__["singleTurnReduceToHalfTurn"] = _WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_set
    __swig_getmethods__["singleTurnReduceToHalfTurn"] = _WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_get
    if _newclass:
        singleTurnReduceToHalfTurn = _swig_property(_WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_get, _WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_set)
    __swig_setmethods__["enableGlobalStartingVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_set
    __swig_getmethods__["enableGlobalStartingVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_get
    if _newclass:
        enableGlobalStartingVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_set)
    __swig_setmethods__["globalStartingVelocity"] = _WMX3ApiPython.Config_MotionParam_globalStartingVelocity_set
    __swig_getmethods__["globalStartingVelocity"] = _WMX3ApiPython.Config_MotionParam_globalStartingVelocity_get
    if _newclass:
        globalStartingVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_globalStartingVelocity_get, _WMX3ApiPython.Config_MotionParam_globalStartingVelocity_set)
    __swig_setmethods__["enableGlobalEndVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_set
    __swig_getmethods__["enableGlobalEndVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_get
    if _newclass:
        enableGlobalEndVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_set)
    __swig_setmethods__["globalEndVelocity"] = _WMX3ApiPython.Config_MotionParam_globalEndVelocity_set
    __swig_getmethods__["globalEndVelocity"] = _WMX3ApiPython.Config_MotionParam_globalEndVelocity_get
    if _newclass:
        globalEndVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_globalEndVelocity_get, _WMX3ApiPython.Config_MotionParam_globalEndVelocity_set)
    __swig_setmethods__["enableGlobalMinVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_set
    __swig_getmethods__["enableGlobalMinVelocity"] = _WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_get
    if _newclass:
        enableGlobalMinVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_set)
    __swig_setmethods__["globalMinVelocity"] = _WMX3ApiPython.Config_MotionParam_globalMinVelocity_set
    __swig_getmethods__["globalMinVelocity"] = _WMX3ApiPython.Config_MotionParam_globalMinVelocity_get
    if _newclass:
        globalMinVelocity = _swig_property(_WMX3ApiPython.Config_MotionParam_globalMinVelocity_get, _WMX3ApiPython.Config_MotionParam_globalMinVelocity_set)
    __swig_setmethods__["enableGlobalMovingAverageProfileTimeMilliseconds"] = _WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_set
    __swig_getmethods__["enableGlobalMovingAverageProfileTimeMilliseconds"] = _WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_get
    if _newclass:
        enableGlobalMovingAverageProfileTimeMilliseconds = _swig_property(_WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_get, _WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_set)
    __swig_setmethods__["globalMovingAverageProfileTimeMilliseconds"] = _WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_set
    __swig_getmethods__["globalMovingAverageProfileTimeMilliseconds"] = _WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_get
    if _newclass:
        globalMovingAverageProfileTimeMilliseconds = _swig_property(_WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_get, _WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_set)
    __swig_setmethods__["apiWaitUntilMotionStart"] = _WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_set
    __swig_getmethods__["apiWaitUntilMotionStart"] = _WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_get
    if _newclass:
        apiWaitUntilMotionStart = _swig_property(_WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_get, _WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_set)
    __swig_setmethods__["linearIntplProfileCalcMode"] = _WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_set
    __swig_getmethods__["linearIntplProfileCalcMode"] = _WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_get
    if _newclass:
        linearIntplProfileCalcMode = _swig_property(_WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_get, _WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_MotionParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_MotionParam
    __del__ = lambda self: None
Config_MotionParam_swigregister = _WMX3ApiPython.Config_MotionParam_swigregister
Config_MotionParam_swigregister(Config_MotionParam)

class Config_AlarmParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_AlarmParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_AlarmParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_AlarmParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_AlarmParam_SetData(self, param)
    __swig_setmethods__["followingErrorStopped"] = _WMX3ApiPython.Config_AlarmParam_followingErrorStopped_set
    __swig_getmethods__["followingErrorStopped"] = _WMX3ApiPython.Config_AlarmParam_followingErrorStopped_get
    if _newclass:
        followingErrorStopped = _swig_property(_WMX3ApiPython.Config_AlarmParam_followingErrorStopped_get, _WMX3ApiPython.Config_AlarmParam_followingErrorStopped_set)
    __swig_setmethods__["followingErrorMoving"] = _WMX3ApiPython.Config_AlarmParam_followingErrorMoving_set
    __swig_getmethods__["followingErrorMoving"] = _WMX3ApiPython.Config_AlarmParam_followingErrorMoving_get
    if _newclass:
        followingErrorMoving = _swig_property(_WMX3ApiPython.Config_AlarmParam_followingErrorMoving_get, _WMX3ApiPython.Config_AlarmParam_followingErrorMoving_set)
    __swig_setmethods__["followingErrorType"] = _WMX3ApiPython.Config_AlarmParam_followingErrorType_set
    __swig_getmethods__["followingErrorType"] = _WMX3ApiPython.Config_AlarmParam_followingErrorType_get
    if _newclass:
        followingErrorType = _swig_property(_WMX3ApiPython.Config_AlarmParam_followingErrorType_get, _WMX3ApiPython.Config_AlarmParam_followingErrorType_set)
    __swig_setmethods__["velocityFollowingErrorStopped"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_set
    __swig_getmethods__["velocityFollowingErrorStopped"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_get
    if _newclass:
        velocityFollowingErrorStopped = _swig_property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_set)
    __swig_setmethods__["velocityFollowingErrorStoppedMilliseconds"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_set
    __swig_getmethods__["velocityFollowingErrorStoppedMilliseconds"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_get
    if _newclass:
        velocityFollowingErrorStoppedMilliseconds = _swig_property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_set)
    __swig_setmethods__["velocityFollowingErrorMoving"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_set
    __swig_getmethods__["velocityFollowingErrorMoving"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_get
    if _newclass:
        velocityFollowingErrorMoving = _swig_property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_set)
    __swig_setmethods__["velocityFollowingErrorMovingMilliseconds"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_set
    __swig_getmethods__["velocityFollowingErrorMovingMilliseconds"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_get
    if _newclass:
        velocityFollowingErrorMovingMilliseconds = _swig_property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_set)
    __swig_setmethods__["velocityFollowingErrorType"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_set
    __swig_getmethods__["velocityFollowingErrorType"] = _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_get
    if _newclass:
        velocityFollowingErrorType = _swig_property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_set)
    __swig_setmethods__["servoOffDuringAmpAlarm"] = _WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_set
    __swig_getmethods__["servoOffDuringAmpAlarm"] = _WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_get
    if _newclass:
        servoOffDuringAmpAlarm = _swig_property(_WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_get, _WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_set)
    __swig_setmethods__["servoOnFollowingError"] = _WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_set
    __swig_getmethods__["servoOnFollowingError"] = _WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_get
    if _newclass:
        servoOnFollowingError = _swig_property(_WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_get, _WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_AlarmParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_AlarmParam
    __del__ = lambda self: None
Config_AlarmParam_swigregister = _WMX3ApiPython.Config_AlarmParam_swigregister
Config_AlarmParam_swigregister(Config_AlarmParam)

class Config_SyncParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_SyncParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_SyncParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_SyncParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_SyncParam_SetData(self, param)
    __swig_setmethods__["inSyncWidth"] = _WMX3ApiPython.Config_SyncParam_inSyncWidth_set
    __swig_getmethods__["inSyncWidth"] = _WMX3ApiPython.Config_SyncParam_inSyncWidth_get
    if _newclass:
        inSyncWidth = _swig_property(_WMX3ApiPython.Config_SyncParam_inSyncWidth_get, _WMX3ApiPython.Config_SyncParam_inSyncWidth_set)
    __swig_setmethods__["syncGain"] = _WMX3ApiPython.Config_SyncParam_syncGain_set
    __swig_getmethods__["syncGain"] = _WMX3ApiPython.Config_SyncParam_syncGain_get
    if _newclass:
        syncGain = _swig_property(_WMX3ApiPython.Config_SyncParam_syncGain_get, _WMX3ApiPython.Config_SyncParam_syncGain_set)
    __swig_setmethods__["syncCompensationMode"] = _WMX3ApiPython.Config_SyncParam_syncCompensationMode_set
    __swig_getmethods__["syncCompensationMode"] = _WMX3ApiPython.Config_SyncParam_syncCompensationMode_get
    if _newclass:
        syncCompensationMode = _swig_property(_WMX3ApiPython.Config_SyncParam_syncCompensationMode_get, _WMX3ApiPython.Config_SyncParam_syncCompensationMode_set)
    __swig_setmethods__["masterDesyncType"] = _WMX3ApiPython.Config_SyncParam_masterDesyncType_set
    __swig_getmethods__["masterDesyncType"] = _WMX3ApiPython.Config_SyncParam_masterDesyncType_get
    if _newclass:
        masterDesyncType = _swig_property(_WMX3ApiPython.Config_SyncParam_masterDesyncType_get, _WMX3ApiPython.Config_SyncParam_masterDesyncType_set)
    __swig_setmethods__["masterDesyncDec"] = _WMX3ApiPython.Config_SyncParam_masterDesyncDec_set
    __swig_getmethods__["masterDesyncDec"] = _WMX3ApiPython.Config_SyncParam_masterDesyncDec_get
    if _newclass:
        masterDesyncDec = _swig_property(_WMX3ApiPython.Config_SyncParam_masterDesyncDec_get, _WMX3ApiPython.Config_SyncParam_masterDesyncDec_set)
    __swig_setmethods__["slaveDesyncType"] = _WMX3ApiPython.Config_SyncParam_slaveDesyncType_set
    __swig_getmethods__["slaveDesyncType"] = _WMX3ApiPython.Config_SyncParam_slaveDesyncType_get
    if _newclass:
        slaveDesyncType = _swig_property(_WMX3ApiPython.Config_SyncParam_slaveDesyncType_get, _WMX3ApiPython.Config_SyncParam_slaveDesyncType_set)
    __swig_setmethods__["slaveDesyncDec"] = _WMX3ApiPython.Config_SyncParam_slaveDesyncDec_set
    __swig_getmethods__["slaveDesyncDec"] = _WMX3ApiPython.Config_SyncParam_slaveDesyncDec_get
    if _newclass:
        slaveDesyncDec = _swig_property(_WMX3ApiPython.Config_SyncParam_slaveDesyncDec_get, _WMX3ApiPython.Config_SyncParam_slaveDesyncDec_set)
    __swig_setmethods__["matchPos"] = _WMX3ApiPython.Config_SyncParam_matchPos_set
    __swig_getmethods__["matchPos"] = _WMX3ApiPython.Config_SyncParam_matchPos_get
    if _newclass:
        matchPos = _swig_property(_WMX3ApiPython.Config_SyncParam_matchPos_get, _WMX3ApiPython.Config_SyncParam_matchPos_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_SyncParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SyncParam
    __del__ = lambda self: None
Config_SyncParam_swigregister = _WMX3ApiPython.Config_SyncParam_swigregister
Config_SyncParam_swigregister(Config_SyncParam)

class Config_FlightRecorderParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_FlightRecorderParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_FlightRecorderParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_FlightRecorderParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_FlightRecorderParam_SetData(self, param)
    __swig_setmethods__["enableFlightRecorder"] = _WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_set
    __swig_getmethods__["enableFlightRecorder"] = _WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_get
    if _newclass:
        enableFlightRecorder = _swig_property(_WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_get, _WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_set)
    __swig_setmethods__["flightRecorderTimeStamp"] = _WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_set
    __swig_getmethods__["flightRecorderTimeStamp"] = _WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_get
    if _newclass:
        flightRecorderTimeStamp = _swig_property(_WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_get, _WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_set)
    __swig_setmethods__["collectAxisFlightRecorderData"] = _WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_set
    __swig_getmethods__["collectAxisFlightRecorderData"] = _WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_get
    if _newclass:
        collectAxisFlightRecorderData = _swig_property(_WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_get, _WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_set)

    def SetCollectAxisFlightRecorderData(self, index, value):
        return _WMX3ApiPython.Config_FlightRecorderParam_SetCollectAxisFlightRecorderData(self, index, value)

    def GetCollectAxisFlightRecorderData(self, index):
        return _WMX3ApiPython.Config_FlightRecorderParam_GetCollectAxisFlightRecorderData(self, index)
    __swig_setmethods__["triggerFlightRecorderOnAmpAlarm"] = _WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_set
    __swig_getmethods__["triggerFlightRecorderOnAmpAlarm"] = _WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_get
    if _newclass:
        triggerFlightRecorderOnAmpAlarm = _swig_property(_WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_get, _WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_FlightRecorderParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FlightRecorderParam
    __del__ = lambda self: None
Config_FlightRecorderParam_swigregister = _WMX3ApiPython.Config_FlightRecorderParam_swigregister
Config_FlightRecorderParam_swigregister(Config_FlightRecorderParam)

class Config_EmergencyStopParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_EmergencyStopParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_EmergencyStopParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_EmergencyStopParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_EmergencyStopParam_SetData(self, param)
    __swig_setmethods__["eStopDec"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopDec_set
    __swig_getmethods__["eStopDec"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopDec_get
    if _newclass:
        eStopDec = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopDec_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopDec_set)

    def SetEStopDec(self, index, value):
        return _WMX3ApiPython.Config_EmergencyStopParam_SetEStopDec(self, index, value)

    def GetEStopDec(self, index):
        return _WMX3ApiPython.Config_EmergencyStopParam_GetEStopDec(self, index)
    __swig_setmethods__["enableEStopSignal"] = _WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_set
    __swig_getmethods__["enableEStopSignal"] = _WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_get
    if _newclass:
        enableEStopSignal = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_get, _WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_set)
    __swig_setmethods__["eStopSignalSource"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_set
    __swig_getmethods__["eStopSignalSource"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_get
    if _newclass:
        eStopSignalSource = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_set)
    __swig_setmethods__["eStopSignalLevel"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_set
    __swig_getmethods__["eStopSignalLevel"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_get
    if _newclass:
        eStopSignalLevel = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_set)
    __swig_setmethods__["invertEStopSignalPolarity"] = _WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_set
    __swig_getmethods__["invertEStopSignalPolarity"] = _WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_get
    if _newclass:
        invertEStopSignalPolarity = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_get, _WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_set)
    __swig_setmethods__["eStopSignalByteAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_set
    __swig_getmethods__["eStopSignalByteAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_get
    if _newclass:
        eStopSignalByteAddress = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_set)
    __swig_setmethods__["eStopSignalBitAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_set
    __swig_getmethods__["eStopSignalBitAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_get
    if _newclass:
        eStopSignalBitAddress = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_set)
    __swig_setmethods__["enableEStopStatusSignal"] = _WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_set
    __swig_getmethods__["enableEStopStatusSignal"] = _WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_get
    if _newclass:
        enableEStopStatusSignal = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_get, _WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_set)
    __swig_setmethods__["eStopStatusSignalDestination"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_set
    __swig_getmethods__["eStopStatusSignalDestination"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_get
    if _newclass:
        eStopStatusSignalDestination = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_set)
    __swig_setmethods__["invertEStopStatusSignalPolarity"] = _WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_set
    __swig_getmethods__["invertEStopStatusSignalPolarity"] = _WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_get
    if _newclass:
        invertEStopStatusSignalPolarity = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_get, _WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_set)
    __swig_setmethods__["eStopStatusSignalByteAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_set
    __swig_getmethods__["eStopStatusSignalByteAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_get
    if _newclass:
        eStopStatusSignalByteAddress = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_set)
    __swig_setmethods__["eStopStatusSignalBitAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_set
    __swig_getmethods__["eStopStatusSignalBitAddress"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_get
    if _newclass:
        eStopStatusSignalBitAddress = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_set)
    __swig_setmethods__["eStopLevel1Type"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_set
    __swig_getmethods__["eStopLevel1Type"] = _WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_get
    if _newclass:
        eStopLevel1Type = _swig_property(_WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_EmergencyStopParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EmergencyStopParam
    __del__ = lambda self: None
Config_EmergencyStopParam_swigregister = _WMX3ApiPython.Config_EmergencyStopParam_swigregister
Config_EmergencyStopParam_swigregister(Config_EmergencyStopParam)

class Config_SystemParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_SystemParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_SystemParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_SystemParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_SystemParam_SetData(self, param)
    __swig_setmethods__["feedbackParam"] = _WMX3ApiPython.Config_SystemParam_feedbackParam_set
    __swig_getmethods__["feedbackParam"] = _WMX3ApiPython.Config_SystemParam_feedbackParam_get
    if _newclass:
        feedbackParam = _swig_property(_WMX3ApiPython.Config_SystemParam_feedbackParam_get, _WMX3ApiPython.Config_SystemParam_feedbackParam_set)

    def SetFeedbackParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetFeedbackParam(self, index, value)

    def GetFeedbackParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetFeedbackParam(self, index)
    __swig_setmethods__["homeParam"] = _WMX3ApiPython.Config_SystemParam_homeParam_set
    __swig_getmethods__["homeParam"] = _WMX3ApiPython.Config_SystemParam_homeParam_get
    if _newclass:
        homeParam = _swig_property(_WMX3ApiPython.Config_SystemParam_homeParam_get, _WMX3ApiPython.Config_SystemParam_homeParam_set)

    def SetHomeParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetHomeParam(self, index, value)

    def GetHomeParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetHomeParam(self, index)
    __swig_setmethods__["limitParam"] = _WMX3ApiPython.Config_SystemParam_limitParam_set
    __swig_getmethods__["limitParam"] = _WMX3ApiPython.Config_SystemParam_limitParam_get
    if _newclass:
        limitParam = _swig_property(_WMX3ApiPython.Config_SystemParam_limitParam_get, _WMX3ApiPython.Config_SystemParam_limitParam_set)

    def SetLimitParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetLimitParam(self, index, value)

    def GetLimitParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetLimitParam(self, index)
    __swig_setmethods__["motionParam"] = _WMX3ApiPython.Config_SystemParam_motionParam_set
    __swig_getmethods__["motionParam"] = _WMX3ApiPython.Config_SystemParam_motionParam_get
    if _newclass:
        motionParam = _swig_property(_WMX3ApiPython.Config_SystemParam_motionParam_get, _WMX3ApiPython.Config_SystemParam_motionParam_set)

    def SetMotionParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetMotionParam(self, index, value)

    def GetMotionParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetMotionParam(self, index)
    __swig_setmethods__["alarmParam"] = _WMX3ApiPython.Config_SystemParam_alarmParam_set
    __swig_getmethods__["alarmParam"] = _WMX3ApiPython.Config_SystemParam_alarmParam_get
    if _newclass:
        alarmParam = _swig_property(_WMX3ApiPython.Config_SystemParam_alarmParam_get, _WMX3ApiPython.Config_SystemParam_alarmParam_set)

    def SetAlarmParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetAlarmParam(self, index, value)

    def GetAlarmParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetAlarmParam(self, index)
    __swig_setmethods__["syncParam"] = _WMX3ApiPython.Config_SystemParam_syncParam_set
    __swig_getmethods__["syncParam"] = _WMX3ApiPython.Config_SystemParam_syncParam_get
    if _newclass:
        syncParam = _swig_property(_WMX3ApiPython.Config_SystemParam_syncParam_get, _WMX3ApiPython.Config_SystemParam_syncParam_set)

    def SetSyncParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetSyncParam(self, index, value)

    def GetSyncParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetSyncParam(self, index)
    __swig_setmethods__["flightRecorderParam"] = _WMX3ApiPython.Config_SystemParam_flightRecorderParam_set
    __swig_getmethods__["flightRecorderParam"] = _WMX3ApiPython.Config_SystemParam_flightRecorderParam_get
    if _newclass:
        flightRecorderParam = _swig_property(_WMX3ApiPython.Config_SystemParam_flightRecorderParam_get, _WMX3ApiPython.Config_SystemParam_flightRecorderParam_set)
    __swig_setmethods__["emergencyStopParam"] = _WMX3ApiPython.Config_SystemParam_emergencyStopParam_set
    __swig_getmethods__["emergencyStopParam"] = _WMX3ApiPython.Config_SystemParam_emergencyStopParam_get
    if _newclass:
        emergencyStopParam = _swig_property(_WMX3ApiPython.Config_SystemParam_emergencyStopParam_get, _WMX3ApiPython.Config_SystemParam_emergencyStopParam_set)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_SystemParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SystemParam
    __del__ = lambda self: None
Config_SystemParam_swigregister = _WMX3ApiPython.Config_SystemParam_swigregister
Config_SystemParam_swigregister(Config_SystemParam)

class Config_AxisParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config_AxisParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config_AxisParam, name)
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_AxisParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_AxisParam_SetData(self, param)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.Config_AxisParam_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.Config_AxisParam_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.Config_AxisParam_axisCommandMode_get, _WMX3ApiPython.Config_AxisParam_axisCommandMode_set)

    def SetAxisCommandMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisCommandMode(self, index, value)

    def GetAxisCommandMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisCommandMode(self, index)
    __swig_setmethods__["gearRatioNumerator"] = _WMX3ApiPython.Config_AxisParam_gearRatioNumerator_set
    __swig_getmethods__["gearRatioNumerator"] = _WMX3ApiPython.Config_AxisParam_gearRatioNumerator_get
    if _newclass:
        gearRatioNumerator = _swig_property(_WMX3ApiPython.Config_AxisParam_gearRatioNumerator_get, _WMX3ApiPython.Config_AxisParam_gearRatioNumerator_set)

    def SetGearRatioNumerator(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetGearRatioNumerator(self, index, value)

    def GetGearRatioNumerator(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetGearRatioNumerator(self, index)
    __swig_setmethods__["gearRatioDenominator"] = _WMX3ApiPython.Config_AxisParam_gearRatioDenominator_set
    __swig_getmethods__["gearRatioDenominator"] = _WMX3ApiPython.Config_AxisParam_gearRatioDenominator_get
    if _newclass:
        gearRatioDenominator = _swig_property(_WMX3ApiPython.Config_AxisParam_gearRatioDenominator_get, _WMX3ApiPython.Config_AxisParam_gearRatioDenominator_set)

    def SetGearRatioDenominator(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetGearRatioDenominator(self, index, value)

    def GetGearRatioDenominator(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetGearRatioDenominator(self, index)
    __swig_setmethods__["singleTurnMode"] = _WMX3ApiPython.Config_AxisParam_singleTurnMode_set
    __swig_getmethods__["singleTurnMode"] = _WMX3ApiPython.Config_AxisParam_singleTurnMode_get
    if _newclass:
        singleTurnMode = _swig_property(_WMX3ApiPython.Config_AxisParam_singleTurnMode_get, _WMX3ApiPython.Config_AxisParam_singleTurnMode_set)

    def SetSingleTurnMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetSingleTurnMode(self, index, value)

    def GetSingleTurnMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetSingleTurnMode(self, index)
    __swig_setmethods__["singleTurnEncoderCount"] = _WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_set
    __swig_getmethods__["singleTurnEncoderCount"] = _WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_get
    if _newclass:
        singleTurnEncoderCount = _swig_property(_WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_get, _WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_set)

    def SetSingleTurnEncoderCount(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetSingleTurnEncoderCount(self, index, value)

    def GetSingleTurnEncoderCount(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetSingleTurnEncoderCount(self, index)
    __swig_setmethods__["encoderRangeMode"] = _WMX3ApiPython.Config_AxisParam_encoderRangeMode_set
    __swig_getmethods__["encoderRangeMode"] = _WMX3ApiPython.Config_AxisParam_encoderRangeMode_get
    if _newclass:
        encoderRangeMode = _swig_property(_WMX3ApiPython.Config_AxisParam_encoderRangeMode_get, _WMX3ApiPython.Config_AxisParam_encoderRangeMode_set)

    def SetEncoderRangeMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetEncoderRangeMode(self, index, value)

    def GetEncoderRangeMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetEncoderRangeMode(self, index)
    __swig_setmethods__["encoderRangeHigh"] = _WMX3ApiPython.Config_AxisParam_encoderRangeHigh_set
    __swig_getmethods__["encoderRangeHigh"] = _WMX3ApiPython.Config_AxisParam_encoderRangeHigh_get
    if _newclass:
        encoderRangeHigh = _swig_property(_WMX3ApiPython.Config_AxisParam_encoderRangeHigh_get, _WMX3ApiPython.Config_AxisParam_encoderRangeHigh_set)

    def SetEncoderRangeHigh(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetEncoderRangeHigh(self, index, value)

    def GetEncoderRangeHigh(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetEncoderRangeHigh(self, index)
    __swig_setmethods__["encoderRangeLow"] = _WMX3ApiPython.Config_AxisParam_encoderRangeLow_set
    __swig_getmethods__["encoderRangeLow"] = _WMX3ApiPython.Config_AxisParam_encoderRangeLow_get
    if _newclass:
        encoderRangeLow = _swig_property(_WMX3ApiPython.Config_AxisParam_encoderRangeLow_get, _WMX3ApiPython.Config_AxisParam_encoderRangeLow_set)

    def SetEncoderRangeLow(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetEncoderRangeLow(self, index, value)

    def GetEncoderRangeLow(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetEncoderRangeLow(self, index)
    __swig_setmethods__["maxTrqLimit"] = _WMX3ApiPython.Config_AxisParam_maxTrqLimit_set
    __swig_getmethods__["maxTrqLimit"] = _WMX3ApiPython.Config_AxisParam_maxTrqLimit_get
    if _newclass:
        maxTrqLimit = _swig_property(_WMX3ApiPython.Config_AxisParam_maxTrqLimit_get, _WMX3ApiPython.Config_AxisParam_maxTrqLimit_set)

    def SetMaxTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetMaxTrqLimit(self, index, value)

    def GetMaxTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetMaxTrqLimit(self, index)
    __swig_setmethods__["negativeTrqLimit"] = _WMX3ApiPython.Config_AxisParam_negativeTrqLimit_set
    __swig_getmethods__["negativeTrqLimit"] = _WMX3ApiPython.Config_AxisParam_negativeTrqLimit_get
    if _newclass:
        negativeTrqLimit = _swig_property(_WMX3ApiPython.Config_AxisParam_negativeTrqLimit_get, _WMX3ApiPython.Config_AxisParam_negativeTrqLimit_set)

    def SetNegativeTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetNegativeTrqLimit(self, index, value)

    def GetNegativeTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetNegativeTrqLimit(self, index)
    __swig_setmethods__["positiveTrqLimit"] = _WMX3ApiPython.Config_AxisParam_positiveTrqLimit_set
    __swig_getmethods__["positiveTrqLimit"] = _WMX3ApiPython.Config_AxisParam_positiveTrqLimit_get
    if _newclass:
        positiveTrqLimit = _swig_property(_WMX3ApiPython.Config_AxisParam_positiveTrqLimit_get, _WMX3ApiPython.Config_AxisParam_positiveTrqLimit_set)

    def SetPositiveTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetPositiveTrqLimit(self, index, value)

    def GetPositiveTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetPositiveTrqLimit(self, index)
    __swig_setmethods__["axisUnit"] = _WMX3ApiPython.Config_AxisParam_axisUnit_set
    __swig_getmethods__["axisUnit"] = _WMX3ApiPython.Config_AxisParam_axisUnit_get
    if _newclass:
        axisUnit = _swig_property(_WMX3ApiPython.Config_AxisParam_axisUnit_get, _WMX3ApiPython.Config_AxisParam_axisUnit_set)

    def SetAxisUnit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisUnit(self, index, value)

    def GetAxisUnit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisUnit(self, index)
    __swig_setmethods__["velocityFeedforwardGain"] = _WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_set
    __swig_getmethods__["velocityFeedforwardGain"] = _WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_get
    if _newclass:
        velocityFeedforwardGain = _swig_property(_WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_get, _WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_set)

    def SetVelocityFeedforwardGain(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetVelocityFeedforwardGain(self, index, value)

    def GetVelocityFeedforwardGain(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetVelocityFeedforwardGain(self, index)
    __swig_setmethods__["axisPolarity"] = _WMX3ApiPython.Config_AxisParam_axisPolarity_set
    __swig_getmethods__["axisPolarity"] = _WMX3ApiPython.Config_AxisParam_axisPolarity_get
    if _newclass:
        axisPolarity = _swig_property(_WMX3ApiPython.Config_AxisParam_axisPolarity_get, _WMX3ApiPython.Config_AxisParam_axisPolarity_set)

    def SetAxisPolarity(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisPolarity(self, index, value)

    def GetAxisPolarity(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisPolarity(self, index)
    __swig_setmethods__["maxMotorSpeed"] = _WMX3ApiPython.Config_AxisParam_maxMotorSpeed_set
    __swig_getmethods__["maxMotorSpeed"] = _WMX3ApiPython.Config_AxisParam_maxMotorSpeed_get
    if _newclass:
        maxMotorSpeed = _swig_property(_WMX3ApiPython.Config_AxisParam_maxMotorSpeed_get, _WMX3ApiPython.Config_AxisParam_maxMotorSpeed_set)

    def SetMaxMotorSpeed(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetMaxMotorSpeed(self, index, value)

    def GetMaxMotorSpeed(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetMaxMotorSpeed(self, index)
    __swig_setmethods__["absoluteEncoderMode"] = _WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_set
    __swig_getmethods__["absoluteEncoderMode"] = _WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_get
    if _newclass:
        absoluteEncoderMode = _swig_property(_WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_get, _WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_set)

    def SetAbsoluteEncoderMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAbsoluteEncoderMode(self, index, value)

    def GetAbsoluteEncoderMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAbsoluteEncoderMode(self, index)
    __swig_setmethods__["absoluteEncoderHomeOffset"] = _WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_set
    __swig_getmethods__["absoluteEncoderHomeOffset"] = _WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_get
    if _newclass:
        absoluteEncoderHomeOffset = _swig_property(_WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_get, _WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_set)

    def SetAbsoluteEncoderHomeOffset(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAbsoluteEncoderHomeOffset(self, index, value)

    def GetAbsoluteEncoderHomeOffset(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAbsoluteEncoderHomeOffset(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_Config_AxisParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config_AxisParam
    __del__ = lambda self: None
Config_AxisParam_swigregister = _WMX3ApiPython.Config_AxisParam_swigregister
Config_AxisParam_swigregister(Config_AxisParam)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr

    def __init__(self, cm):
        this = _WMX3ApiPython.new_Config(cm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Config
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.Config_IsDeviceValid(self)

    def SetParam(self, pParam):
        pParamError = Config_SystemParam()
        ret = _WMX3ApiPython.Config_SetParam(self, pParam, pParamError)
        return ret, pParamError



    def GetParam(self):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetParam(self, pParam)
        return ret, pParam



    def SetParam_Axis(self, axis, pParam):
        pParamError = Config_SystemParam()
        ret = _WMX3ApiPython.Config_SetParam_Axis(self, axis, pParam, pParamError)
        return ret, pParamError



    def GetParam_Axis(self, axis):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetParam_Axis(self, axis, pParam)
        return ret, pParam



    def SetAxisParam(self, pParam):
        pParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_SetAxisParam(self, pParam, pParamError)
        return ret, pParamError



    def GetAxisParam(self):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetAxisParam(self, pParam)
        return ret, pParam



    def SetAxisParam_Axis(self, axis, pParam):
        pParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_SetAxisParam_Axis(self, axis, pParam, pParamError)
        return ret, pParamError



    def GetAxisParam_Axis(self, axis):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetAxisParam_Axis(self, axis, pParam)
        return ret, pParam



    def SetGearRatio(self, axis, numerator, denominator):
        return _WMX3ApiPython.Config_SetGearRatio(self, axis, numerator, denominator)

    def SetSingleTurn(self, axis, enable, encoderCount):
        return _WMX3ApiPython.Config_SetSingleTurn(self, axis, enable, encoderCount)

    def SetEncoderRange(self, axis, enable, encoderRangeLow, encoderRangeHigh):
        return _WMX3ApiPython.Config_SetEncoderRange(self, axis, enable, encoderRangeLow, encoderRangeHigh)

    def SetMovingAverageProfileTime(self, axis, milliseconds):
        return _WMX3ApiPython.Config_SetMovingAverageProfileTime(self, axis, milliseconds)

    def SetAxisUnit(self, axis, unit):
        return _WMX3ApiPython.Config_SetAxisUnit(self, axis, unit)

    def SetVelocityFeedforwardGain(self, axis, gain):
        return _WMX3ApiPython.Config_SetVelocityFeedforwardGain(self, axis, gain)

    def SetAxisPolarity(self, axis, polarity):
        return _WMX3ApiPython.Config_SetAxisPolarity(self, axis, polarity)

    def SetAbsoluteEncoderMode(self, axis, enable):
        return _WMX3ApiPython.Config_SetAbsoluteEncoderMode(self, axis, enable)

    def SetAbsoluteEncoderHomeOffset(self, axis, offset):
        return _WMX3ApiPython.Config_SetAbsoluteEncoderHomeOffset(self, axis, offset)

    def GetGearRatio(self, axis):
        pNumerator = doublep()
        pDenominator = doublep()
        ret = _WMX3ApiPython.Config_GetGearRatio(self, axis, pNumerator, pDenominator)
        return ret, pNumerator.value(), pDenominator.value()



    def GetSingleTurn(self, axis):
        pEnable = boolp()
        pEncoderCount = uintp()
        ret = _WMX3ApiPython.Config_GetSingleTurn(self, axis, pEnable, pEncoderCount)
        return ret, pEnable, pEncoderCount.value()



    def GetEncoderRange(self, axis, pEnable, pEncoderRangeLow, pEncoderRangeHigh):
        return _WMX3ApiPython.Config_GetEncoderRange(self, axis, pEnable, pEncoderRangeLow, pEncoderRangeHigh)

    def GetMovingAverageProfileTime(self, axis):
        pMilliseconds = doublep()
        ret = _WMX3ApiPython.Config_GetMovingAverageProfileTime(self, axis, pMilliseconds)
        return ret, pMilliseconds.value()



    def GetAxisUnit(self, axis):
        pUnit = doublep()
        ret = _WMX3ApiPython.Config_GetAxisUnit(self, axis, pUnit)
        return ret, pUnit.value()



    def GetVelocityFeedforwardGain(self, axis):
        pGain = doublep()
        ret = _WMX3ApiPython.Config_GetVelocityFeedforwardGain(self, axis, pGain)
        return ret, pGain.value()



    def GetAxisPolarity(self, axis):
        pPolarity = intp()
        ret = _WMX3ApiPython.Config_GetAxisPolarity(self, axis, pPolarity)
        return ret, pPolarity.value()



    def GetAbsoluteEncoderMode(self, axis):
        pEnable = boolp()
        ret = _WMX3ApiPython.Config_GetAbsoluteEncoderMode(self, axis, pEnable)
        return ret, pEnable



    def GetAbsoluteEncoderHomeOffset(self, axis):
        pOffset = doublep()
        ret = _WMX3ApiPython.Config_GetAbsoluteEncoderHomeOffset(self, axis, pOffset)
        return ret, pOffset.value()



    def SetFeedbackParam(self, axis, pParam):
        pParamError = Config_FeedbackParam()
        ret = _WMX3ApiPython.Config_SetFeedbackParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetHomeParam(self, axis, pParam):
        pParamError = Config_HomeParam()
        ret = _WMX3ApiPython.Config_SetHomeParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetLimitParam(self, axis, pParam):
        pParamError = Config_LimitParam()
        ret = _WMX3ApiPython.Config_SetLimitParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetMotionParam(self, axis, pParam):
        pParamError = Config_MotionParam()
        ret = _WMX3ApiPython.Config_SetMotionParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetAlarmParam(self, axis, pParam):
        pParamError = Config_AlarmParam()
        ret = _WMX3ApiPython.Config_SetAlarmParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetSyncParam(self, axis, pParam):
        pParamError = Config_SyncParam()
        ret = _WMX3ApiPython.Config_SetSyncParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetFlightRecorderParam(self, pParam):
        pParamError = Config_FlightRecorderParam()
        ret = _WMX3ApiPython.Config_SetFlightRecorderParam(self, pParam, pParamError)
        return ret, pParamError



    def SetFlightRecorderPath(self, pPath):
        return _WMX3ApiPython.Config_SetFlightRecorderPath(self, pPath)

    def SetEmergencyStopParam(self, pParam):
        pParamError = Config_EmergencyStopParam()
        ret = _WMX3ApiPython.Config_SetEmergencyStopParam(self, pParam, pParamError)
        return ret, pParamError



    def GetFeedbackParam(self, axis):
        pParam = Config_FeedbackParam()
        ret = _WMX3ApiPython.Config_GetFeedbackParam(self, axis, pParam)
        return ret, pParam



    def GetHomeParam(self, axis):
        pParam = Config_HomeParam()
        ret = _WMX3ApiPython.Config_GetHomeParam(self, axis, pParam)
        return ret, pParam



    def GetLimitParam(self, axis):
        pParam = Config_LimitParam()
        ret = _WMX3ApiPython.Config_GetLimitParam(self, axis, pParam)
        return ret, pParam



    def GetMotionParam(self, axis):
        pParam = Config_MotionParam()
        ret = _WMX3ApiPython.Config_GetMotionParam(self, axis, pParam)
        return ret, pParam



    def GetAlarmParam(self, axis):
        pParam = Config_AlarmParam()
        ret = _WMX3ApiPython.Config_GetAlarmParam(self, axis, pParam)
        return ret, pParam



    def GetSyncParam(self, axis):
        pParam = Config_SyncParam()
        ret = _WMX3ApiPython.Config_GetSyncParam(self, axis, pParam)
        return ret, pParam



    def GetFlightRecorderParam(self):
        pParam = Config_FlightRecorderParam()
        ret = _WMX3ApiPython.Config_GetFlightRecorderParam(self, pParam)
        return ret, pParam



    def GetEmergencyStopParam(self):
        pParam = Config_EmergencyStopParam()
        ret = _WMX3ApiPython.Config_GetEmergencyStopParam(self, pParam)
        return ret, pParam



    def GetDefaultParam(self):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetDefaultParam(self, pParam)
        return ret, pParam



    def GetDefaultAxisParam(self):
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetDefaultAxisParam(self, pAxisParam)
        return ret, pAxisParam



    def Export_SysPrm(self, pPath, pParam):
        return _WMX3ApiPython.Config_Export_SysPrm(self, pPath, pParam)

    def Export_AxisPrm(self, pPath, pAxisParam):
        return _WMX3ApiPython.Config_Export_AxisPrm(self, pPath, pAxisParam)

    def Export_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam):
        return _WMX3ApiPython.Config_Export_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam)

    def Export_SysPrm_Axis(self, pPath, pParam, axis):
        return _WMX3ApiPython.Config_Export_SysPrm_Axis(self, pPath, pParam, axis)

    def Export_AxisPrm_Axis(self, pPath, pAxisParam, axis):
        return _WMX3ApiPython.Config_Export_AxisPrm_Axis(self, pPath, pAxisParam, axis)

    def Export_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis):
        return _WMX3ApiPython.Config_Export_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis)

    def Import_SysPrm(self, pPath):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm(self, pPath, pParam)
        return ret, pParam



    def Import_AxisPrm(self, pPath):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_AxisPrm(self, pPath, pParam)
        return ret, pParam



    def Import_SysPrm_AxisPrm(self, pPath):
        pParam = Config_SystemParam()
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam)
        return ret, pParam, pAxisParam



    def Import_SysPrm_Axis(self, pPath, axis, copyParamToAxes):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_Axis(self, pPath, pParam, axis, copyParamToAxes)
        return ret, pParam



    def Import_AxisPrm_Axis(self, pPath, axis, copyParamToAxes):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_AxisPrm_Axis(self, pPath, pParam, axis, copyParamToAxes)
        return ret, pParam



    def Import_SysPrm_AxisPrm_Axis(self, pPath, pAxisPath, axis, copyParamToAxes):
        pParam = Config_SystemParam()
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis, copyParamToAxes)
        return ret, pParam, pAxisParam



    def GetAndExportAll(self, pPath):
        return _WMX3ApiPython.Config_GetAndExportAll(self, pPath)

    def ImportAndSetAll(self, pPath):
        systemParamError = Config_SystemParam()
        axisParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_ImportAndSetAll(self, pPath, systemParamError, axisParamError)
        return ret


Config_swigregister = _WMX3ApiPython.Config_swigregister
Config_swigregister(Config)

class CoreMotion(_object):
    """CoreMotion.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreMotion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreMotion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        CoreMotion.rtdll Ver.3.5.0.0 is required to use.
        CoreMotion.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_CoreMotion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotion
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.CoreMotion_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.CoreMotion_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.CoreMotion_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.CoreMotion_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.CoreMotion_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.CoreMotion_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.CoreMotion_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.CoreMotion_GetVersion(self)

    def GetStatus(self):
        status = CoreMotionStatus()
        ret = _WMX3ApiPython.CoreMotion_GetStatus(self, status)
        return ret, status



    def ClearVibrationStatus(self, axis):
        return _WMX3ApiPython.CoreMotion_ClearVibrationStatus(self, axis)

    def ClearVibrationStatus_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CoreMotion_ClearVibrationStatus_AxisSel(self, pAxisSelection)

    def ExecEStop(self, level):
        return _WMX3ApiPython.CoreMotion_ExecEStop(self, level)

    def ReleaseEStop(self):
        return _WMX3ApiPython.CoreMotion_ReleaseEStop(self)

    def TriggerFlightRecorder(self):
        return _WMX3ApiPython.CoreMotion_TriggerFlightRecorder(self)

    def ResetFlightRecorder(self):
        return _WMX3ApiPython.CoreMotion_ResetFlightRecorder(self)
    __swig_setmethods__["axisControl"] = _WMX3ApiPython.CoreMotion_axisControl_set
    __swig_getmethods__["axisControl"] = _WMX3ApiPython.CoreMotion_axisControl_get
    if _newclass:
        axisControl = _swig_property(_WMX3ApiPython.CoreMotion_axisControl_get, _WMX3ApiPython.CoreMotion_axisControl_set)
    __swig_setmethods__["motion"] = _WMX3ApiPython.CoreMotion_motion_set
    __swig_getmethods__["motion"] = _WMX3ApiPython.CoreMotion_motion_get
    if _newclass:
        motion = _swig_property(_WMX3ApiPython.CoreMotion_motion_get, _WMX3ApiPython.CoreMotion_motion_set)
    __swig_setmethods__["home"] = _WMX3ApiPython.CoreMotion_home_set
    __swig_getmethods__["home"] = _WMX3ApiPython.CoreMotion_home_get
    if _newclass:
        home = _swig_property(_WMX3ApiPython.CoreMotion_home_get, _WMX3ApiPython.CoreMotion_home_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.CoreMotion_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.CoreMotion_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.CoreMotion_velocity_get, _WMX3ApiPython.CoreMotion_velocity_set)
    __swig_setmethods__["torque"] = _WMX3ApiPython.CoreMotion_torque_set
    __swig_getmethods__["torque"] = _WMX3ApiPython.CoreMotion_torque_get
    if _newclass:
        torque = _swig_property(_WMX3ApiPython.CoreMotion_torque_get, _WMX3ApiPython.CoreMotion_torque_set)
    __swig_setmethods__["sync"] = _WMX3ApiPython.CoreMotion_sync_set
    __swig_getmethods__["sync"] = _WMX3ApiPython.CoreMotion_sync_get
    if _newclass:
        sync = _swig_property(_WMX3ApiPython.CoreMotion_sync_get, _WMX3ApiPython.CoreMotion_sync_set)
    __swig_setmethods__["config"] = _WMX3ApiPython.CoreMotion_config_set
    __swig_getmethods__["config"] = _WMX3ApiPython.CoreMotion_config_get
    if _newclass:
        config = _swig_property(_WMX3ApiPython.CoreMotion_config_get, _WMX3ApiPython.CoreMotion_config_set)
CoreMotion_swigregister = _WMX3ApiPython.CoreMotion_swigregister
CoreMotion_swigregister(CoreMotion)

def CoreMotion_ErrorToString(errCode):
    return _WMX3ApiPython.CoreMotion_ErrorToString(errCode)
CoreMotion_ErrorToString = _WMX3ApiPython.CoreMotion_ErrorToString

def CoreMotion_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.CoreMotion_ApiLogToString(pLogData, logDataSize)
CoreMotion_ApiLogToString = _WMX3ApiPython.CoreMotion_ApiLogToString

def CoreMotion_GetLibVersion():
    return _WMX3ApiPython.CoreMotion_GetLibVersion()
CoreMotion_GetLibVersion = _WMX3ApiPython.CoreMotion_GetLibVersion

class IOErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOErrorCode, name)
    __repr__ = _swig_repr
    SharedMemoryNull = _WMX3ApiPython.IOErrorCode_SharedMemoryNull
    IOCountOutOfRange = _WMX3ApiPython.IOErrorCode_IOCountOutOfRange

    def __init__(self):
        this = _WMX3ApiPython.new_IOErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IOErrorCode
    __del__ = lambda self: None
IOErrorCode_swigregister = _WMX3ApiPython.IOErrorCode_swigregister
IOErrorCode_swigregister(IOErrorCode)

class IoLogInput(LogInput):
    __swig_setmethods__ = {}
    for _s in [LogInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoLogInput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, pIoLogInput):
        return _WMX3ApiPython.IoLogInput_SetData(self, pIoLogInput)

    def GetData(self, pIoLogInput):
        return _WMX3ApiPython.IoLogInput_GetData(self, pIoLogInput)

    def __init__(self):
        this = _WMX3ApiPython.new_IoLogInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.IoLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.IoLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.IoLogInput_GetLogInput(self)
    __swig_setmethods__["inputIOAddress"] = _WMX3ApiPython.IoLogInput_inputIOAddress_set
    __swig_getmethods__["inputIOAddress"] = _WMX3ApiPython.IoLogInput_inputIOAddress_get
    if _newclass:
        inputIOAddress = _swig_property(_WMX3ApiPython.IoLogInput_inputIOAddress_get, _WMX3ApiPython.IoLogInput_inputIOAddress_set)

    def SetInputIOAddress(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetInputIOAddress(self, index, value)

    def GetInputIOAddress(self, index):
        return _WMX3ApiPython.IoLogInput_GetInputIOAddress(self, index)
    __swig_setmethods__["inputSize"] = _WMX3ApiPython.IoLogInput_inputSize_set
    __swig_getmethods__["inputSize"] = _WMX3ApiPython.IoLogInput_inputSize_get
    if _newclass:
        inputSize = _swig_property(_WMX3ApiPython.IoLogInput_inputSize_get, _WMX3ApiPython.IoLogInput_inputSize_set)
    __swig_setmethods__["outputIOAddress"] = _WMX3ApiPython.IoLogInput_outputIOAddress_set
    __swig_getmethods__["outputIOAddress"] = _WMX3ApiPython.IoLogInput_outputIOAddress_get
    if _newclass:
        outputIOAddress = _swig_property(_WMX3ApiPython.IoLogInput_outputIOAddress_get, _WMX3ApiPython.IoLogInput_outputIOAddress_set)

    def SetOutputIOAddress(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetOutputIOAddress(self, index, value)

    def GetOutputIOAddress(self, index):
        return _WMX3ApiPython.IoLogInput_GetOutputIOAddress(self, index)
    __swig_setmethods__["outputSize"] = _WMX3ApiPython.IoLogInput_outputSize_set
    __swig_getmethods__["outputSize"] = _WMX3ApiPython.IoLogInput_outputSize_get
    if _newclass:
        outputSize = _swig_property(_WMX3ApiPython.IoLogInput_outputSize_get, _WMX3ApiPython.IoLogInput_outputSize_set)
    __swig_setmethods__["inputIOLogFormat"] = _WMX3ApiPython.IoLogInput_inputIOLogFormat_set
    __swig_getmethods__["inputIOLogFormat"] = _WMX3ApiPython.IoLogInput_inputIOLogFormat_get
    if _newclass:
        inputIOLogFormat = _swig_property(_WMX3ApiPython.IoLogInput_inputIOLogFormat_get, _WMX3ApiPython.IoLogInput_inputIOLogFormat_set)

    def SetInputIOLogFormat(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetInputIOLogFormat(self, index, value)

    def GetInputIOLogFormat(self, index):
        return _WMX3ApiPython.IoLogInput_GetInputIOLogFormat(self, index)
    __swig_setmethods__["inputIOFormatCount"] = _WMX3ApiPython.IoLogInput_inputIOFormatCount_set
    __swig_getmethods__["inputIOFormatCount"] = _WMX3ApiPython.IoLogInput_inputIOFormatCount_get
    if _newclass:
        inputIOFormatCount = _swig_property(_WMX3ApiPython.IoLogInput_inputIOFormatCount_get, _WMX3ApiPython.IoLogInput_inputIOFormatCount_set)
    __swig_setmethods__["outputIOLogFormat"] = _WMX3ApiPython.IoLogInput_outputIOLogFormat_set
    __swig_getmethods__["outputIOLogFormat"] = _WMX3ApiPython.IoLogInput_outputIOLogFormat_get
    if _newclass:
        outputIOLogFormat = _swig_property(_WMX3ApiPython.IoLogInput_outputIOLogFormat_get, _WMX3ApiPython.IoLogInput_outputIOLogFormat_set)

    def SetOutputIOLogFormat(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetOutputIOLogFormat(self, index, value)

    def GetOutputIOLogFormat(self, index):
        return _WMX3ApiPython.IoLogInput_GetOutputIOLogFormat(self, index)
    __swig_setmethods__["outputIOFormatCount"] = _WMX3ApiPython.IoLogInput_outputIOFormatCount_set
    __swig_getmethods__["outputIOFormatCount"] = _WMX3ApiPython.IoLogInput_outputIOFormatCount_get
    if _newclass:
        outputIOFormatCount = _swig_property(_WMX3ApiPython.IoLogInput_outputIOFormatCount_get, _WMX3ApiPython.IoLogInput_outputIOFormatCount_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoLogInput
    __del__ = lambda self: None
IoLogInput_swigregister = _WMX3ApiPython.IoLogInput_swigregister
IoLogInput_swigregister(IoLogInput)

class IoLogOutput(LogOutput):
    __swig_setmethods__ = {}
    for _s in [LogOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoLogOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoLogOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.IoLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.IoLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.IoLogOutput_SetLogOutput(self, src)
    __swig_setmethods__["input"] = _WMX3ApiPython.IoLogOutput_input_set
    __swig_getmethods__["input"] = _WMX3ApiPython.IoLogOutput_input_get
    if _newclass:
        input = _swig_property(_WMX3ApiPython.IoLogOutput_input_get, _WMX3ApiPython.IoLogOutput_input_set)

    def SetInput(self, index1, index2, value):
        return _WMX3ApiPython.IoLogOutput_SetInput(self, index1, index2, value)

    def GetInput(self, index1, index2):
        return _WMX3ApiPython.IoLogOutput_GetInput(self, index1, index2)
    __swig_setmethods__["output"] = _WMX3ApiPython.IoLogOutput_output_set
    __swig_getmethods__["output"] = _WMX3ApiPython.IoLogOutput_output_get
    if _newclass:
        output = _swig_property(_WMX3ApiPython.IoLogOutput_output_get, _WMX3ApiPython.IoLogOutput_output_set)

    def SetOutput(self, index1, index2, value):
        return _WMX3ApiPython.IoLogOutput_SetOutput(self, index1, index2, value)

    def GetOutput(self, index1, index2):
        return _WMX3ApiPython.IoLogOutput_GetOutput(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_IoLogOutput
    __del__ = lambda self: None
IoLogOutput_swigregister = _WMX3ApiPython.IoLogOutput_swigregister
IoLogOutput_swigregister(IoLogOutput)

class BaseIoEventInputFunctionArguments_IOSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseIoEventInputFunctionArguments_IOSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseIoEventInputFunctionArguments_IOSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOSingle
    __del__ = lambda self: None
BaseIoEventInputFunctionArguments_IOSingle_swigregister = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_swigregister
BaseIoEventInputFunctionArguments_IOSingle_swigregister(BaseIoEventInputFunctionArguments_IOSingle)

class BaseIoEventInputFunctionArguments_IOMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseIoEventInputFunctionArguments_IOMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseIoEventInputFunctionArguments_IOMulti, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetByteAddress(self, index)

    def SetIOSourceType(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetIOSourceType(self, index, value)

    def GetIOSourceType(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetIOSourceType(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOMulti
    __del__ = lambda self: None
BaseIoEventInputFunctionArguments_IOMulti_swigregister = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_swigregister
BaseIoEventInputFunctionArguments_IOMulti_swigregister(BaseIoEventInputFunctionArguments_IOMulti)

class BaseIoEventInputFunctionArguments_IOBytes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseIoEventInputFunctionArguments_IOBytes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseIoEventInputFunctionArguments_IOBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_set)
    __swig_setmethods__["value"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_set
    __swig_getmethods__["value"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_get
    if _newclass:
        value = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOBytes
    __del__ = lambda self: None
BaseIoEventInputFunctionArguments_IOBytes_swigregister = _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_swigregister
BaseIoEventInputFunctionArguments_IOBytes_swigregister(BaseIoEventInputFunctionArguments_IOBytes)

class IoEventInputFunctionArguments_IOBit(BaseIoEventInputFunctionArguments_IOSingle):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_IOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_IOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_IOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_IOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_IOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_IOBit_swigregister
IoEventInputFunctionArguments_IOBit_swigregister(IoEventInputFunctionArguments_IOBit)

class IoEventInputFunctionArguments_NotIOBit(BaseIoEventInputFunctionArguments_IOSingle):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_NotIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_NotIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_NotIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NotIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_NotIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_NotIOBit_swigregister
IoEventInputFunctionArguments_NotIOBit_swigregister(IoEventInputFunctionArguments_NotIOBit)

class IoEventInputFunctionArguments_OrIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_OrIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_OrIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_OrIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_OrIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_OrIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_OrIOBit_swigregister
IoEventInputFunctionArguments_OrIOBit_swigregister(IoEventInputFunctionArguments_OrIOBit)

class IoEventInputFunctionArguments_AndIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_AndIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_AndIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_AndIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_AndIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_AndIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_AndIOBit_swigregister
IoEventInputFunctionArguments_AndIOBit_swigregister(IoEventInputFunctionArguments_AndIOBit)

class IoEventInputFunctionArguments_XorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_XorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_XorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_XorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_XorIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_XorIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_XorIOBit_swigregister
IoEventInputFunctionArguments_XorIOBit_swigregister(IoEventInputFunctionArguments_XorIOBit)

class IoEventInputFunctionArguments_NandIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_NandIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_NandIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_NandIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NandIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_NandIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_NandIOBit_swigregister
IoEventInputFunctionArguments_NandIOBit_swigregister(IoEventInputFunctionArguments_NandIOBit)

class IoEventInputFunctionArguments_NorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_NorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_NorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_NorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NorIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_NorIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_NorIOBit_swigregister
IoEventInputFunctionArguments_NorIOBit_swigregister(IoEventInputFunctionArguments_NorIOBit)

class IoEventInputFunctionArguments_XnorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_XnorIOBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_XnorIOBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_XnorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_XnorIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_XnorIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_XnorIOBit_swigregister
IoEventInputFunctionArguments_XnorIOBit_swigregister(IoEventInputFunctionArguments_XnorIOBit)

class IoEventInputFunctionArguments_DelayIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_DelayIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_DelayIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_DelayIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_DelayIOBit
    __del__ = lambda self: None
IoEventInputFunctionArguments_DelayIOBit_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_swigregister
IoEventInputFunctionArguments_DelayIOBit_swigregister(IoEventInputFunctionArguments_DelayIOBit)

class IoEventInputFunctionArguments_EqualIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_EqualIOBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_EqualIOBytes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_EqualIOBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_EqualIOBytes
    __del__ = lambda self: None
IoEventInputFunctionArguments_EqualIOBytes_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_EqualIOBytes_swigregister
IoEventInputFunctionArguments_EqualIOBytes_swigregister(IoEventInputFunctionArguments_EqualIOBytes)

class IoEventInputFunctionArguments_GreaterIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_GreaterIOBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_GreaterIOBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSigned"] = _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_set
    __swig_getmethods__["isSigned"] = _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_get
    if _newclass:
        isSigned = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_get, _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_GreaterIOBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_GreaterIOBytes
    __del__ = lambda self: None
IoEventInputFunctionArguments_GreaterIOBytes_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_swigregister
IoEventInputFunctionArguments_GreaterIOBytes_swigregister(IoEventInputFunctionArguments_GreaterIOBytes)

class IoEventInputFunctionArguments_LessIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    __swig_setmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputFunctionArguments_LessIOBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseIoEventInputFunctionArguments_IOBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputFunctionArguments_LessIOBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSigned"] = _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_set
    __swig_getmethods__["isSigned"] = _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_get
    if _newclass:
        isSigned = _swig_property(_WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_get, _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputFunctionArguments_LessIOBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_LessIOBytes
    __del__ = lambda self: None
IoEventInputFunctionArguments_LessIOBytes_swigregister = _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_swigregister
IoEventInputFunctionArguments_LessIOBytes_swigregister(IoEventInputFunctionArguments_LessIOBytes)

class IoEventInputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInputType, name)
    __repr__ = _swig_repr
    IOBit = _WMX3ApiPython.IoEventInputType_IOBit
    NotIOBit = _WMX3ApiPython.IoEventInputType_NotIOBit
    OrIOBit = _WMX3ApiPython.IoEventInputType_OrIOBit
    AndIOBit = _WMX3ApiPython.IoEventInputType_AndIOBit
    XorIOBit = _WMX3ApiPython.IoEventInputType_XorIOBit
    NandIOBit = _WMX3ApiPython.IoEventInputType_NandIOBit
    NorIOBit = _WMX3ApiPython.IoEventInputType_NorIOBit
    XnorIOBit = _WMX3ApiPython.IoEventInputType_XnorIOBit
    DelayIOBit = _WMX3ApiPython.IoEventInputType_DelayIOBit
    EqualIOBytes = _WMX3ApiPython.IoEventInputType_EqualIOBytes
    GreaterIOBytes = _WMX3ApiPython.IoEventInputType_GreaterIOBytes
    LessIOBytes = _WMX3ApiPython.IoEventInputType_LessIOBytes

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputType
    __del__ = lambda self: None
IoEventInputType_swigregister = _WMX3ApiPython.IoEventInputType_swigregister
IoEventInputType_swigregister(IoEventInputType)

class IoEventInput(EventInput):
    __swig_setmethods__ = {}
    for _s in [EventInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventInput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventInput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputModuleId(self):
        return _WMX3ApiPython.IoEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.IoEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoEventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_setmethods__["type"] = _WMX3ApiPython.IoEventInput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.IoEventInput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.IoEventInput_type_get, _WMX3ApiPython.IoEventInput_type_set)
    __swig_setmethods__["ioBit"] = _WMX3ApiPython.IoEventInput_ioBit_set
    __swig_getmethods__["ioBit"] = _WMX3ApiPython.IoEventInput_ioBit_get
    if _newclass:
        ioBit = _swig_property(_WMX3ApiPython.IoEventInput_ioBit_get, _WMX3ApiPython.IoEventInput_ioBit_set)
    __swig_setmethods__["notIOBit"] = _WMX3ApiPython.IoEventInput_notIOBit_set
    __swig_getmethods__["notIOBit"] = _WMX3ApiPython.IoEventInput_notIOBit_get
    if _newclass:
        notIOBit = _swig_property(_WMX3ApiPython.IoEventInput_notIOBit_get, _WMX3ApiPython.IoEventInput_notIOBit_set)
    __swig_setmethods__["orIOBit"] = _WMX3ApiPython.IoEventInput_orIOBit_set
    __swig_getmethods__["orIOBit"] = _WMX3ApiPython.IoEventInput_orIOBit_get
    if _newclass:
        orIOBit = _swig_property(_WMX3ApiPython.IoEventInput_orIOBit_get, _WMX3ApiPython.IoEventInput_orIOBit_set)
    __swig_setmethods__["andIOBit"] = _WMX3ApiPython.IoEventInput_andIOBit_set
    __swig_getmethods__["andIOBit"] = _WMX3ApiPython.IoEventInput_andIOBit_get
    if _newclass:
        andIOBit = _swig_property(_WMX3ApiPython.IoEventInput_andIOBit_get, _WMX3ApiPython.IoEventInput_andIOBit_set)
    __swig_setmethods__["xorIOBit"] = _WMX3ApiPython.IoEventInput_xorIOBit_set
    __swig_getmethods__["xorIOBit"] = _WMX3ApiPython.IoEventInput_xorIOBit_get
    if _newclass:
        xorIOBit = _swig_property(_WMX3ApiPython.IoEventInput_xorIOBit_get, _WMX3ApiPython.IoEventInput_xorIOBit_set)
    __swig_setmethods__["nandIOBit"] = _WMX3ApiPython.IoEventInput_nandIOBit_set
    __swig_getmethods__["nandIOBit"] = _WMX3ApiPython.IoEventInput_nandIOBit_get
    if _newclass:
        nandIOBit = _swig_property(_WMX3ApiPython.IoEventInput_nandIOBit_get, _WMX3ApiPython.IoEventInput_nandIOBit_set)
    __swig_setmethods__["norIOBit"] = _WMX3ApiPython.IoEventInput_norIOBit_set
    __swig_getmethods__["norIOBit"] = _WMX3ApiPython.IoEventInput_norIOBit_get
    if _newclass:
        norIOBit = _swig_property(_WMX3ApiPython.IoEventInput_norIOBit_get, _WMX3ApiPython.IoEventInput_norIOBit_set)
    __swig_setmethods__["xnorIOBit"] = _WMX3ApiPython.IoEventInput_xnorIOBit_set
    __swig_getmethods__["xnorIOBit"] = _WMX3ApiPython.IoEventInput_xnorIOBit_get
    if _newclass:
        xnorIOBit = _swig_property(_WMX3ApiPython.IoEventInput_xnorIOBit_get, _WMX3ApiPython.IoEventInput_xnorIOBit_set)
    __swig_setmethods__["delayIOBit"] = _WMX3ApiPython.IoEventInput_delayIOBit_set
    __swig_getmethods__["delayIOBit"] = _WMX3ApiPython.IoEventInput_delayIOBit_get
    if _newclass:
        delayIOBit = _swig_property(_WMX3ApiPython.IoEventInput_delayIOBit_get, _WMX3ApiPython.IoEventInput_delayIOBit_set)
    __swig_setmethods__["equalIOBytes"] = _WMX3ApiPython.IoEventInput_equalIOBytes_set
    __swig_getmethods__["equalIOBytes"] = _WMX3ApiPython.IoEventInput_equalIOBytes_get
    if _newclass:
        equalIOBytes = _swig_property(_WMX3ApiPython.IoEventInput_equalIOBytes_get, _WMX3ApiPython.IoEventInput_equalIOBytes_set)
    __swig_setmethods__["greaterIOBytes"] = _WMX3ApiPython.IoEventInput_greaterIOBytes_set
    __swig_getmethods__["greaterIOBytes"] = _WMX3ApiPython.IoEventInput_greaterIOBytes_get
    if _newclass:
        greaterIOBytes = _swig_property(_WMX3ApiPython.IoEventInput_greaterIOBytes_get, _WMX3ApiPython.IoEventInput_greaterIOBytes_set)
    __swig_setmethods__["lessIOBytes"] = _WMX3ApiPython.IoEventInput_lessIOBytes_set
    __swig_getmethods__["lessIOBytes"] = _WMX3ApiPython.IoEventInput_lessIOBytes_get
    if _newclass:
        lessIOBytes = _swig_property(_WMX3ApiPython.IoEventInput_lessIOBytes_get, _WMX3ApiPython.IoEventInput_lessIOBytes_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInput
    __del__ = lambda self: None
IoEventInput_swigregister = _WMX3ApiPython.IoEventInput_swigregister
IoEventInput_swigregister(IoEventInput)

class IoEventOutputFunctionArguments_SetIOOutBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventOutputFunctionArguments_SetIOOutBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventOutputFunctionArguments_SetIOOutBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventOutputFunctionArguments_SetIOOutBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutputFunctionArguments_SetIOOutBit
    __del__ = lambda self: None
IoEventOutputFunctionArguments_SetIOOutBit_swigregister = _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_swigregister
IoEventOutputFunctionArguments_SetIOOutBit_swigregister(IoEventOutputFunctionArguments_SetIOOutBit)

class IoEventOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventOutputType, name)
    __repr__ = _swig_repr
    SetIOOutBit = _WMX3ApiPython.IoEventOutputType_SetIOOutBit

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutputType
    __del__ = lambda self: None
IoEventOutputType_swigregister = _WMX3ApiPython.IoEventOutputType_swigregister
IoEventOutputType_swigregister(IoEventOutputType)

class IoEventOutput(EventOutput):
    __swig_setmethods__ = {}
    for _s in [EventOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IoEventOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IoEventOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_IoEventOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOutputModuleId(self):
        return _WMX3ApiPython.IoEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.IoEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_setmethods__["type"] = _WMX3ApiPython.IoEventOutput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.IoEventOutput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.IoEventOutput_type_get, _WMX3ApiPython.IoEventOutput_type_set)
    __swig_setmethods__["setIOOutBit"] = _WMX3ApiPython.IoEventOutput_setIOOutBit_set
    __swig_getmethods__["setIOOutBit"] = _WMX3ApiPython.IoEventOutput_setIOOutBit_get
    if _newclass:
        setIOOutBit = _swig_property(_WMX3ApiPython.IoEventOutput_setIOOutBit_get, _WMX3ApiPython.IoEventOutput_setIOOutBit_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutput
    __del__ = lambda self: None
IoEventOutput_swigregister = _WMX3ApiPython.IoEventOutput_swigregister
IoEventOutput_swigregister(IoEventOutput)

class Io(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Io, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Io, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _WMX3ApiPython.new_Io(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Io
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.Io_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.Io_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.Io_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.Io_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.Io_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.Io_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.Io_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Io_GetVersion(self)

    def SetOutBit(self, addr, bit, data):
        return _WMX3ApiPython.Io_SetOutBit(self, addr, bit, data)

    def SetOutByte(self, addr, data):
        return _WMX3ApiPython.Io_SetOutByte(self, addr, data)

    def SetOutBytes(self, addr, size, pData):
        return _WMX3ApiPython.Io_SetOutBytes(self, addr, size, pData)

    def SetOutBits(self, pByte, pBit, pData, count):
        return _WMX3ApiPython.Io_SetOutBits(self, pByte, pBit, pData, count)

    def SetOutAnalogDataChar(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataChar(self, addr, analogData)

    def SetOutAnalogDataUChar(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUChar(self, addr, analogData)

    def SetOutAnalogDataShort(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataShort(self, addr, analogData)

    def SetOutAnalogDataUShort(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUShort(self, addr, analogData)

    def SetOutAnalogDataInt(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataInt(self, addr, analogData)

    def SetOutAnalogDataUInt(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUInt(self, addr, analogData)

    def GetInBit(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInByte(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetInAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBit(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutByte(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetOutBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetOutAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetOutBitEx(self, addr, bit, data):
        return _WMX3ApiPython.Io_SetOutBitEx(self, addr, bit, data)

    def SetOutByteEx(self, addr, data):
        return _WMX3ApiPython.Io_SetOutByteEx(self, addr, data)

    def SetOutBytesEx(self, addr, size, pData):
        return _WMX3ApiPython.Io_SetOutBytesEx(self, addr, size, pData)

    def SetOutBitsEx(self, pByte, pBit, pData, count):
        return _WMX3ApiPython.Io_SetOutBitsEx(self, pByte, pBit, pData, count)

    def SetOutAnalogDataCharEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataCharEx(self, addr, analogData)

    def SetOutAnalogDataUCharEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUCharEx(self, addr, analogData)

    def SetOutAnalogDataShortEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataShortEx(self, addr, analogData)

    def SetOutAnalogDataUShortEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUShortEx(self, addr, analogData)

    def SetOutAnalogDataIntEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataIntEx(self, addr, analogData)

    def SetOutAnalogDataUIntEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUIntEx(self, addr, analogData)

    def GetInBitEx(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInByteEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInBytesEx(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetInAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBitEx(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutByteEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBytesEx(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetOutBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetOutAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetInitialOutByte(self, addr, data, enable):
        return _WMX3ApiPython.Io_SetInitialOutByte(self, addr, data, enable)

    def SetInitialOutBytes(self, addr, size, pData, pEnable):
        return _WMX3ApiPython.Io_SetInitialOutBytes(self, addr, size, pData, pEnable)

    def GetInitialOutByte(self, addr):
        dataPtr = intp()
        enablePtr = intp()
        ret = _WMX3ApiPython.Io_GetInitialOutByte(self, addr, dataPtr, enablePtr)
        if ret == 0:
            return ret, dataPtr.value(), enablePtr.value()
        else:
            return ret, 0, 0



    def GetInitialOutBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        enableList = []
        enableArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInitialOutBytes(self, addr, size, dataArray, enableArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
                enableList.append(enableArray[i])
            return ret, dataList, enableList
        else:
            return ret, [], []



    def GetInitialOutByteInterruptId(self, addr):
        interruptIdPtr = intp()
        ret = _WMX3ApiPython.Io_GetInitialOutByteInterruptId(self, addr, interruptIdPtr)
        if ret == 0:
            return ret, interruptIdPtr.value()
        else:
            return ret, 0



    def GetInitialOutBytesInterruptId(self, addr, size):
        interruptIdList = []
        interruptIdArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInitialOutBytesInterruptId(self, addr, size, interruptIdArray)
        if ret == 0:
            for i in range(size):
                interruptIdList.append(interruptIdArray[i])
            return ret, interruptIdList
        else:
            return ret, []


Io_swigregister = _WMX3ApiPython.Io_swigregister
Io_swigregister(Io)

def Io_ErrorToString(errCode):
    return _WMX3ApiPython.Io_ErrorToString(errCode)
Io_ErrorToString = _WMX3ApiPython.Io_ErrorToString

def Io_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.Io_ApiLogToString(pLogData, logDataSize)
Io_ApiLogToString = _WMX3ApiPython.Io_ApiLogToString

def Io_GetLibVersion():
    return _WMX3ApiPython.Io_GetLibVersion()
Io_GetLibVersion = _WMX3ApiPython.Io_GetLibVersion

class LogErrorCodeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogErrorCodeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogErrorCodeArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_LogErrorCodeArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogErrorCodeArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.LogErrorCodeArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogErrorCodeArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogErrorCodeArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.LogErrorCodeArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.LogErrorCodeArray_frompointer
LogErrorCodeArray_swigregister = _WMX3ApiPython.LogErrorCodeArray_swigregister
LogErrorCodeArray_swigregister(LogErrorCodeArray)

def LogErrorCodeArray_frompointer(t):
    return _WMX3ApiPython.LogErrorCodeArray_frompointer(t)
LogErrorCodeArray_frompointer = _WMX3ApiPython.LogErrorCodeArray_frompointer

class LogStateArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogStateArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogStateArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_LogStateArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogStateArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.LogStateArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogStateArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogStateArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.LogStateArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.LogStateArray_frompointer
LogStateArray_swigregister = _WMX3ApiPython.LogStateArray_swigregister
LogStateArray_swigregister(LogStateArray)

def LogStateArray_frompointer(t):
    return _WMX3ApiPython.LogStateArray_frompointer(t)
LogStateArray_frompointer = _WMX3ApiPython.LogStateArray_frompointer

class LogStatusArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogStatusArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogStatusArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_LogStatusArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogStatusArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.LogStatusArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogStatusArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogStatusArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.LogStatusArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.LogStatusArray_frompointer
LogStatusArray_swigregister = _WMX3ApiPython.LogStatusArray_swigregister
LogStatusArray_swigregister(LogStatusArray)

def LogStatusArray_frompointer(t):
    return _WMX3ApiPython.LogStatusArray_frompointer(t)
LogStatusArray_frompointer = _WMX3ApiPython.LogStatusArray_frompointer

class LogOptionsArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogOptionsArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogOptionsArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_LogOptionsArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogOptionsArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.LogOptionsArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogOptionsArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogOptionsArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.LogOptionsArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.LogOptionsArray_frompointer
LogOptionsArray_swigregister = _WMX3ApiPython.LogOptionsArray_swigregister
LogOptionsArray_swigregister(LogOptionsArray)

def LogOptionsArray_frompointer(t):
    return _WMX3ApiPython.LogOptionsArray_frompointer(t)
LogOptionsArray_frompointer = _WMX3ApiPython.LogOptionsArray_frompointer

class IOLogFormatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOLogFormatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOLogFormatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_IOLogFormatArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IOLogFormatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.IOLogFormatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.IOLogFormatArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.IOLogFormatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.IOLogFormatArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.IOLogFormatArray_frompointer
IOLogFormatArray_swigregister = _WMX3ApiPython.IOLogFormatArray_swigregister
IOLogFormatArray_swigregister(IOLogFormatArray)

def IOLogFormatArray_frompointer(t):
    return _WMX3ApiPython.IOLogFormatArray_frompointer(t)
IOLogFormatArray_frompointer = _WMX3ApiPython.IOLogFormatArray_frompointer

class MLogFormatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLogFormatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLogFormatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MLogFormatArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MLogFormatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MLogFormatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MLogFormatArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MLogFormatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MLogFormatArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MLogFormatArray_frompointer
MLogFormatArray_swigregister = _WMX3ApiPython.MLogFormatArray_swigregister
MLogFormatArray_swigregister(MLogFormatArray)

def MLogFormatArray_frompointer(t):
    return _WMX3ApiPython.MLogFormatArray_frompointer(t)
MLogFormatArray_frompointer = _WMX3ApiPython.MLogFormatArray_frompointer

class MemoryLogStatusArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogStatusArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogStatusArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogStatusArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogStatusArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogStatusArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogStatusArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogStatusArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogStatusArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogStatusArray_frompointer
MemoryLogStatusArray_swigregister = _WMX3ApiPython.MemoryLogStatusArray_swigregister
MemoryLogStatusArray_swigregister(MemoryLogStatusArray)

def MemoryLogStatusArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogStatusArray_frompointer(t)
MemoryLogStatusArray_frompointer = _WMX3ApiPython.MemoryLogStatusArray_frompointer

class MemoryLogAxisDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogAxisDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogAxisDataArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogAxisDataArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogAxisDataArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogAxisDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogAxisDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogAxisDataArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogAxisDataArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogAxisDataArray_frompointer
MemoryLogAxisDataArray_swigregister = _WMX3ApiPython.MemoryLogAxisDataArray_swigregister
MemoryLogAxisDataArray_swigregister(MemoryLogAxisDataArray)

def MemoryLogAxisDataArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogAxisDataArray_frompointer(t)
MemoryLogAxisDataArray_frompointer = _WMX3ApiPython.MemoryLogAxisDataArray_frompointer

class MemoryLogIODataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogIODataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogIODataArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogIODataArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogIODataArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogIODataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogIODataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogIODataArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogIODataArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogIODataArray_frompointer
MemoryLogIODataArray_swigregister = _WMX3ApiPython.MemoryLogIODataArray_swigregister
MemoryLogIODataArray_swigregister(MemoryLogIODataArray)

def MemoryLogIODataArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogIODataArray_frompointer(t)
MemoryLogIODataArray_frompointer = _WMX3ApiPython.MemoryLogIODataArray_frompointer

class MemoryLogMDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogMDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogMDataArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogMDataArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogMDataArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogMDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogMDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogMDataArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogMDataArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogMDataArray_frompointer
MemoryLogMDataArray_swigregister = _WMX3ApiPython.MemoryLogMDataArray_swigregister
MemoryLogMDataArray_swigregister(MemoryLogMDataArray)

def MemoryLogMDataArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogMDataArray_frompointer(t)
MemoryLogMDataArray_frompointer = _WMX3ApiPython.MemoryLogMDataArray_frompointer

class MemoryLogOptionsArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogOptionsArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogOptionsArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogOptionsArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogOptionsArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogOptionsArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogOptionsArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogOptionsArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogOptionsArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogOptionsArray_frompointer
MemoryLogOptionsArray_swigregister = _WMX3ApiPython.MemoryLogOptionsArray_swigregister
MemoryLogOptionsArray_swigregister(MemoryLogOptionsArray)

def MemoryLogOptionsArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogOptionsArray_frompointer(t)
MemoryLogOptionsArray_frompointer = _WMX3ApiPython.MemoryLogOptionsArray_frompointer

class MemoryLogDatasArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogDatasArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogDatasArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogDatasArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDatasArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogDatasArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogDatasArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogDatasArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogDatasArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogDatasArray_frompointer
MemoryLogDatasArray_swigregister = _WMX3ApiPython.MemoryLogDatasArray_swigregister
MemoryLogDatasArray_swigregister(MemoryLogDatasArray)

def MemoryLogDatasArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogDatasArray_frompointer(t)
MemoryLogDatasArray_frompointer = _WMX3ApiPython.MemoryLogDatasArray_frompointer

class MemoryLogDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogDataArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_MemoryLogDataArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDataArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogDataArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.MemoryLogDataArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.MemoryLogDataArray_frompointer
MemoryLogDataArray_swigregister = _WMX3ApiPython.MemoryLogDataArray_swigregister
MemoryLogDataArray_swigregister(MemoryLogDataArray)

def MemoryLogDataArray_frompointer(t):
    return _WMX3ApiPython.MemoryLogDataArray_frompointer(t)
MemoryLogDataArray_frompointer = _WMX3ApiPython.MemoryLogDataArray_frompointer

class LogErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogErrorCode, name)
    __repr__ = _swig_repr
    LogTimeIsZero = _WMX3ApiPython.LogErrorCode_LogTimeIsZero
    LogBufferIsNotOpened = _WMX3ApiPython.LogErrorCode_LogBufferIsNotOpened
    LogBufferAlreadyOpened = _WMX3ApiPython.LogErrorCode_LogBufferAlreadyOpened
    LogBufferAlreadyClosed = _WMX3ApiPython.LogErrorCode_LogBufferAlreadyClosed
    LogBufferOpenFailed = _WMX3ApiPython.LogErrorCode_LogBufferOpenFailed
    LogBufferIsNull = _WMX3ApiPython.LogErrorCode_LogBufferIsNull
    LockLogBufferFailed = _WMX3ApiPython.LogErrorCode_LockLogBufferFailed
    SetLogIsNotFinished = _WMX3ApiPython.LogErrorCode_SetLogIsNotFinished
    LogBufferDataNotFound = _WMX3ApiPython.LogErrorCode_LogBufferDataNotFound
    CurrentlyCollectingLogData = _WMX3ApiPython.LogErrorCode_CurrentlyCollectingLogData
    CurrentlyNotCollectingLogData = _WMX3ApiPython.LogErrorCode_CurrentlyNotCollectingLogData
    LengthOutOfRange = _WMX3ApiPython.LogErrorCode_LengthOutOfRange
    FilePathStringTooLarge = _WMX3ApiPython.LogErrorCode_FilePathStringTooLarge
    FileNameNotSpecified = _WMX3ApiPython.LogErrorCode_FileNameNotSpecified
    FileDirectoryNotSpecified = _WMX3ApiPython.LogErrorCode_FileDirectoryNotSpecified
    PrecisionOutOfRange = _WMX3ApiPython.LogErrorCode_PrecisionOutOfRange
    InvalidFilePath = _WMX3ApiPython.LogErrorCode_InvalidFilePath
    TriggerEventCountOutOfRange = _WMX3ApiPython.LogErrorCode_TriggerEventCountOutOfRange
    TriggerEventIDOutOfRange = _WMX3ApiPython.LogErrorCode_TriggerEventIDOutOfRange
    SamplingPeriodOutOfRange = _WMX3ApiPython.LogErrorCode_SamplingPeriodOutOfRange
    MaxLogFileCountSetButNotMaxLogFileSize = _WMX3ApiPython.LogErrorCode_MaxLogFileCountSetButNotMaxLogFileSize
    IOFormatCountOutOfRange = _WMX3ApiPython.LogErrorCode_IOFormatCountOutOfRange
    UserMemoryFormatCountOutOfRange = _WMX3ApiPython.LogErrorCode_UserMemoryFormatCountOutOfRange
    DataSourceModuleNotLoaded = _WMX3ApiPython.LogErrorCode_DataSourceModuleNotLoaded
    NoMoreLogData = _WMX3ApiPython.LogErrorCode_NoMoreLogData

    def __init__(self):
        this = _WMX3ApiPython.new_LogErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogErrorCode
    __del__ = lambda self: None
LogErrorCode_swigregister = _WMX3ApiPython.LogErrorCode_swigregister
LogErrorCode_swigregister(LogErrorCode)

class LogState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.LogState_Idle
    Running = _WMX3ApiPython.LogState_Running
    WriteFail = _WMX3ApiPython.LogState_WriteFail
    BufferOverflow = _WMX3ApiPython.LogState_BufferOverflow
    Finished = _WMX3ApiPython.LogState_Finished

    def __init__(self):
        this = _WMX3ApiPython.new_LogState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogState
    __del__ = lambda self: None
LogState_swigregister = _WMX3ApiPython.LogState_swigregister
LogState_swigregister(LogState)

class LogStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogStatus, name)
    __repr__ = _swig_repr

    def GetData(self, logStatus):
        return _WMX3ApiPython.LogStatus_GetData(self, logStatus)

    def SetData(self, logStatus):
        return _WMX3ApiPython.LogStatus_SetData(self, logStatus)
    __swig_setmethods__["bufferOpened"] = _WMX3ApiPython.LogStatus_bufferOpened_set
    __swig_getmethods__["bufferOpened"] = _WMX3ApiPython.LogStatus_bufferOpened_get
    if _newclass:
        bufferOpened = _swig_property(_WMX3ApiPython.LogStatus_bufferOpened_get, _WMX3ApiPython.LogStatus_bufferOpened_set)
    __swig_setmethods__["logState"] = _WMX3ApiPython.LogStatus_logState_set
    __swig_getmethods__["logState"] = _WMX3ApiPython.LogStatus_logState_get
    if _newclass:
        logState = _swig_property(_WMX3ApiPython.LogStatus_logState_get, _WMX3ApiPython.LogStatus_logState_set)
    __swig_setmethods__["samplesToCollect"] = _WMX3ApiPython.LogStatus_samplesToCollect_set
    __swig_getmethods__["samplesToCollect"] = _WMX3ApiPython.LogStatus_samplesToCollect_get
    if _newclass:
        samplesToCollect = _swig_property(_WMX3ApiPython.LogStatus_samplesToCollect_get, _WMX3ApiPython.LogStatus_samplesToCollect_set)
    __swig_setmethods__["samplesCollected"] = _WMX3ApiPython.LogStatus_samplesCollected_set
    __swig_getmethods__["samplesCollected"] = _WMX3ApiPython.LogStatus_samplesCollected_get
    if _newclass:
        samplesCollected = _swig_property(_WMX3ApiPython.LogStatus_samplesCollected_get, _WMX3ApiPython.LogStatus_samplesCollected_set)
    __swig_setmethods__["samplesWritten"] = _WMX3ApiPython.LogStatus_samplesWritten_set
    __swig_getmethods__["samplesWritten"] = _WMX3ApiPython.LogStatus_samplesWritten_get
    if _newclass:
        samplesWritten = _swig_property(_WMX3ApiPython.LogStatus_samplesWritten_get, _WMX3ApiPython.LogStatus_samplesWritten_set)
    __swig_setmethods__["millisecondsToCollect"] = _WMX3ApiPython.LogStatus_millisecondsToCollect_set
    __swig_getmethods__["millisecondsToCollect"] = _WMX3ApiPython.LogStatus_millisecondsToCollect_get
    if _newclass:
        millisecondsToCollect = _swig_property(_WMX3ApiPython.LogStatus_millisecondsToCollect_get, _WMX3ApiPython.LogStatus_millisecondsToCollect_set)
    __swig_setmethods__["millisecondsCollected"] = _WMX3ApiPython.LogStatus_millisecondsCollected_set
    __swig_getmethods__["millisecondsCollected"] = _WMX3ApiPython.LogStatus_millisecondsCollected_get
    if _newclass:
        millisecondsCollected = _swig_property(_WMX3ApiPython.LogStatus_millisecondsCollected_get, _WMX3ApiPython.LogStatus_millisecondsCollected_set)
    __swig_setmethods__["millisecondsWritten"] = _WMX3ApiPython.LogStatus_millisecondsWritten_set
    __swig_getmethods__["millisecondsWritten"] = _WMX3ApiPython.LogStatus_millisecondsWritten_get
    if _newclass:
        millisecondsWritten = _swig_property(_WMX3ApiPython.LogStatus_millisecondsWritten_get, _WMX3ApiPython.LogStatus_millisecondsWritten_set)

    def __init__(self):
        this = _WMX3ApiPython.new_LogStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogStatus
    __del__ = lambda self: None
LogStatus_swigregister = _WMX3ApiPython.LogStatus_swigregister
LogStatus_swigregister(LogStatus)

class LogOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogOptions, name)
    __repr__ = _swig_repr

    def GetData(self, logOptions):
        return _WMX3ApiPython.LogOptions_GetData(self, logOptions)

    def SetData(self, logOptions):
        return _WMX3ApiPython.LogOptions_SetData(self, logOptions)
    __swig_setmethods__["commandPos"] = _WMX3ApiPython.LogOptions_commandPos_set
    __swig_getmethods__["commandPos"] = _WMX3ApiPython.LogOptions_commandPos_get
    if _newclass:
        commandPos = _swig_property(_WMX3ApiPython.LogOptions_commandPos_get, _WMX3ApiPython.LogOptions_commandPos_set)
    __swig_setmethods__["feedbackPos"] = _WMX3ApiPython.LogOptions_feedbackPos_set
    __swig_getmethods__["feedbackPos"] = _WMX3ApiPython.LogOptions_feedbackPos_get
    if _newclass:
        feedbackPos = _swig_property(_WMX3ApiPython.LogOptions_feedbackPos_get, _WMX3ApiPython.LogOptions_feedbackPos_set)
    __swig_setmethods__["compCommandPos"] = _WMX3ApiPython.LogOptions_compCommandPos_set
    __swig_getmethods__["compCommandPos"] = _WMX3ApiPython.LogOptions_compCommandPos_get
    if _newclass:
        compCommandPos = _swig_property(_WMX3ApiPython.LogOptions_compCommandPos_get, _WMX3ApiPython.LogOptions_compCommandPos_set)
    __swig_setmethods__["compFeedbackPos"] = _WMX3ApiPython.LogOptions_compFeedbackPos_set
    __swig_getmethods__["compFeedbackPos"] = _WMX3ApiPython.LogOptions_compFeedbackPos_get
    if _newclass:
        compFeedbackPos = _swig_property(_WMX3ApiPython.LogOptions_compFeedbackPos_get, _WMX3ApiPython.LogOptions_compFeedbackPos_set)
    __swig_setmethods__["encoderCommandPos"] = _WMX3ApiPython.LogOptions_encoderCommandPos_set
    __swig_getmethods__["encoderCommandPos"] = _WMX3ApiPython.LogOptions_encoderCommandPos_get
    if _newclass:
        encoderCommandPos = _swig_property(_WMX3ApiPython.LogOptions_encoderCommandPos_get, _WMX3ApiPython.LogOptions_encoderCommandPos_set)
    __swig_setmethods__["encoderFeedbackPos"] = _WMX3ApiPython.LogOptions_encoderFeedbackPos_set
    __swig_getmethods__["encoderFeedbackPos"] = _WMX3ApiPython.LogOptions_encoderFeedbackPos_get
    if _newclass:
        encoderFeedbackPos = _swig_property(_WMX3ApiPython.LogOptions_encoderFeedbackPos_get, _WMX3ApiPython.LogOptions_encoderFeedbackPos_set)
    __swig_setmethods__["commandVelocity"] = _WMX3ApiPython.LogOptions_commandVelocity_set
    __swig_getmethods__["commandVelocity"] = _WMX3ApiPython.LogOptions_commandVelocity_get
    if _newclass:
        commandVelocity = _swig_property(_WMX3ApiPython.LogOptions_commandVelocity_get, _WMX3ApiPython.LogOptions_commandVelocity_set)
    __swig_setmethods__["feedbackVelocity"] = _WMX3ApiPython.LogOptions_feedbackVelocity_set
    __swig_getmethods__["feedbackVelocity"] = _WMX3ApiPython.LogOptions_feedbackVelocity_get
    if _newclass:
        feedbackVelocity = _swig_property(_WMX3ApiPython.LogOptions_feedbackVelocity_get, _WMX3ApiPython.LogOptions_feedbackVelocity_set)
    __swig_setmethods__["encoderCommandVelocity"] = _WMX3ApiPython.LogOptions_encoderCommandVelocity_set
    __swig_getmethods__["encoderCommandVelocity"] = _WMX3ApiPython.LogOptions_encoderCommandVelocity_get
    if _newclass:
        encoderCommandVelocity = _swig_property(_WMX3ApiPython.LogOptions_encoderCommandVelocity_get, _WMX3ApiPython.LogOptions_encoderCommandVelocity_set)
    __swig_setmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.LogOptions_encoderFeedbackVelocity_set
    __swig_getmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.LogOptions_encoderFeedbackVelocity_get
    if _newclass:
        encoderFeedbackVelocity = _swig_property(_WMX3ApiPython.LogOptions_encoderFeedbackVelocity_get, _WMX3ApiPython.LogOptions_encoderFeedbackVelocity_set)
    __swig_setmethods__["commandTrq"] = _WMX3ApiPython.LogOptions_commandTrq_set
    __swig_getmethods__["commandTrq"] = _WMX3ApiPython.LogOptions_commandTrq_get
    if _newclass:
        commandTrq = _swig_property(_WMX3ApiPython.LogOptions_commandTrq_get, _WMX3ApiPython.LogOptions_commandTrq_set)
    __swig_setmethods__["feedbackTrq"] = _WMX3ApiPython.LogOptions_feedbackTrq_set
    __swig_getmethods__["feedbackTrq"] = _WMX3ApiPython.LogOptions_feedbackTrq_get
    if _newclass:
        feedbackTrq = _swig_property(_WMX3ApiPython.LogOptions_feedbackTrq_get, _WMX3ApiPython.LogOptions_feedbackTrq_set)
    __swig_setmethods__["encoderCommandTrq"] = _WMX3ApiPython.LogOptions_encoderCommandTrq_set
    __swig_getmethods__["encoderCommandTrq"] = _WMX3ApiPython.LogOptions_encoderCommandTrq_get
    if _newclass:
        encoderCommandTrq = _swig_property(_WMX3ApiPython.LogOptions_encoderCommandTrq_get, _WMX3ApiPython.LogOptions_encoderCommandTrq_set)
    __swig_setmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.LogOptions_encoderFeedbackTrq_set
    __swig_getmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.LogOptions_encoderFeedbackTrq_get
    if _newclass:
        encoderFeedbackTrq = _swig_property(_WMX3ApiPython.LogOptions_encoderFeedbackTrq_get, _WMX3ApiPython.LogOptions_encoderFeedbackTrq_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.LogOptions_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.LogOptions_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.LogOptions_followingError_get, _WMX3ApiPython.LogOptions_followingError_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.LogOptions_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.LogOptions_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.LogOptions_homeOffset_get, _WMX3ApiPython.LogOptions_homeOffset_set)
    __swig_setmethods__["inPosFlag"] = _WMX3ApiPython.LogOptions_inPosFlag_set
    __swig_getmethods__["inPosFlag"] = _WMX3ApiPython.LogOptions_inPosFlag_get
    if _newclass:
        inPosFlag = _swig_property(_WMX3ApiPython.LogOptions_inPosFlag_get, _WMX3ApiPython.LogOptions_inPosFlag_set)
    __swig_setmethods__["inPosFlag2"] = _WMX3ApiPython.LogOptions_inPosFlag2_set
    __swig_getmethods__["inPosFlag2"] = _WMX3ApiPython.LogOptions_inPosFlag2_get
    if _newclass:
        inPosFlag2 = _swig_property(_WMX3ApiPython.LogOptions_inPosFlag2_get, _WMX3ApiPython.LogOptions_inPosFlag2_set)
    __swig_setmethods__["inPosFlag3"] = _WMX3ApiPython.LogOptions_inPosFlag3_set
    __swig_getmethods__["inPosFlag3"] = _WMX3ApiPython.LogOptions_inPosFlag3_get
    if _newclass:
        inPosFlag3 = _swig_property(_WMX3ApiPython.LogOptions_inPosFlag3_get, _WMX3ApiPython.LogOptions_inPosFlag3_set)
    __swig_setmethods__["inPosFlag4"] = _WMX3ApiPython.LogOptions_inPosFlag4_set
    __swig_getmethods__["inPosFlag4"] = _WMX3ApiPython.LogOptions_inPosFlag4_get
    if _newclass:
        inPosFlag4 = _swig_property(_WMX3ApiPython.LogOptions_inPosFlag4_get, _WMX3ApiPython.LogOptions_inPosFlag4_set)
    __swig_setmethods__["inPosFlag5"] = _WMX3ApiPython.LogOptions_inPosFlag5_set
    __swig_getmethods__["inPosFlag5"] = _WMX3ApiPython.LogOptions_inPosFlag5_get
    if _newclass:
        inPosFlag5 = _swig_property(_WMX3ApiPython.LogOptions_inPosFlag5_get, _WMX3ApiPython.LogOptions_inPosFlag5_set)
    __swig_setmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.LogOptions_commandDistributionEndFlag_set
    __swig_getmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.LogOptions_commandDistributionEndFlag_get
    if _newclass:
        commandDistributionEndFlag = _swig_property(_WMX3ApiPython.LogOptions_commandDistributionEndFlag_get, _WMX3ApiPython.LogOptions_commandDistributionEndFlag_set)
    __swig_setmethods__["posSetFlag"] = _WMX3ApiPython.LogOptions_posSetFlag_set
    __swig_getmethods__["posSetFlag"] = _WMX3ApiPython.LogOptions_posSetFlag_get
    if _newclass:
        posSetFlag = _swig_property(_WMX3ApiPython.LogOptions_posSetFlag_get, _WMX3ApiPython.LogOptions_posSetFlag_set)
    __swig_setmethods__["delayedPosSetFlag"] = _WMX3ApiPython.LogOptions_delayedPosSetFlag_set
    __swig_getmethods__["delayedPosSetFlag"] = _WMX3ApiPython.LogOptions_delayedPosSetFlag_get
    if _newclass:
        delayedPosSetFlag = _swig_property(_WMX3ApiPython.LogOptions_delayedPosSetFlag_get, _WMX3ApiPython.LogOptions_delayedPosSetFlag_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.LogOptions_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.LogOptions_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.LogOptions_opState_get, _WMX3ApiPython.LogOptions_opState_set)
    __swig_setmethods__["detailOpState"] = _WMX3ApiPython.LogOptions_detailOpState_set
    __swig_getmethods__["detailOpState"] = _WMX3ApiPython.LogOptions_detailOpState_get
    if _newclass:
        detailOpState = _swig_property(_WMX3ApiPython.LogOptions_detailOpState_get, _WMX3ApiPython.LogOptions_detailOpState_set)
    __swig_setmethods__["userOffsetCommandPos"] = _WMX3ApiPython.LogOptions_userOffsetCommandPos_set
    __swig_getmethods__["userOffsetCommandPos"] = _WMX3ApiPython.LogOptions_userOffsetCommandPos_get
    if _newclass:
        userOffsetCommandPos = _swig_property(_WMX3ApiPython.LogOptions_userOffsetCommandPos_get, _WMX3ApiPython.LogOptions_userOffsetCommandPos_set)
    __swig_setmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.LogOptions_userOffsetFeedbackPos_set
    __swig_getmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.LogOptions_userOffsetFeedbackPos_get
    if _newclass:
        userOffsetFeedbackPos = _swig_property(_WMX3ApiPython.LogOptions_userOffsetFeedbackPos_get, _WMX3ApiPython.LogOptions_userOffsetFeedbackPos_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.LogOptions_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.LogOptions_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.LogOptions_axisCommandMode_get, _WMX3ApiPython.LogOptions_axisCommandMode_set)
    __swig_setmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.LogOptions_axisCommandModeFeedback_set
    __swig_getmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.LogOptions_axisCommandModeFeedback_get
    if _newclass:
        axisCommandModeFeedback = _swig_property(_WMX3ApiPython.LogOptions_axisCommandModeFeedback_get, _WMX3ApiPython.LogOptions_axisCommandModeFeedback_set)
    __swig_setmethods__["followingErrorAlarm"] = _WMX3ApiPython.LogOptions_followingErrorAlarm_set
    __swig_getmethods__["followingErrorAlarm"] = _WMX3ApiPython.LogOptions_followingErrorAlarm_get
    if _newclass:
        followingErrorAlarm = _swig_property(_WMX3ApiPython.LogOptions_followingErrorAlarm_get, _WMX3ApiPython.LogOptions_followingErrorAlarm_set)
    __swig_setmethods__["ampAlarm"] = _WMX3ApiPython.LogOptions_ampAlarm_set
    __swig_getmethods__["ampAlarm"] = _WMX3ApiPython.LogOptions_ampAlarm_get
    if _newclass:
        ampAlarm = _swig_property(_WMX3ApiPython.LogOptions_ampAlarm_get, _WMX3ApiPython.LogOptions_ampAlarm_set)
    __swig_setmethods__["ampAlarmCode"] = _WMX3ApiPython.LogOptions_ampAlarmCode_set
    __swig_getmethods__["ampAlarmCode"] = _WMX3ApiPython.LogOptions_ampAlarmCode_get
    if _newclass:
        ampAlarmCode = _swig_property(_WMX3ApiPython.LogOptions_ampAlarmCode_get, _WMX3ApiPython.LogOptions_ampAlarmCode_set)
    __swig_setmethods__["servoOn"] = _WMX3ApiPython.LogOptions_servoOn_set
    __swig_getmethods__["servoOn"] = _WMX3ApiPython.LogOptions_servoOn_get
    if _newclass:
        servoOn = _swig_property(_WMX3ApiPython.LogOptions_servoOn_get, _WMX3ApiPython.LogOptions_servoOn_set)
    __swig_setmethods__["servoOffline"] = _WMX3ApiPython.LogOptions_servoOffline_set
    __swig_getmethods__["servoOffline"] = _WMX3ApiPython.LogOptions_servoOffline_get
    if _newclass:
        servoOffline = _swig_property(_WMX3ApiPython.LogOptions_servoOffline_get, _WMX3ApiPython.LogOptions_servoOffline_set)
    __swig_setmethods__["positiveLS"] = _WMX3ApiPython.LogOptions_positiveLS_set
    __swig_getmethods__["positiveLS"] = _WMX3ApiPython.LogOptions_positiveLS_get
    if _newclass:
        positiveLS = _swig_property(_WMX3ApiPython.LogOptions_positiveLS_get, _WMX3ApiPython.LogOptions_positiveLS_set)
    __swig_setmethods__["negativeLS"] = _WMX3ApiPython.LogOptions_negativeLS_set
    __swig_getmethods__["negativeLS"] = _WMX3ApiPython.LogOptions_negativeLS_get
    if _newclass:
        negativeLS = _swig_property(_WMX3ApiPython.LogOptions_negativeLS_get, _WMX3ApiPython.LogOptions_negativeLS_set)
    __swig_setmethods__["nearPositiveLS"] = _WMX3ApiPython.LogOptions_nearPositiveLS_set
    __swig_getmethods__["nearPositiveLS"] = _WMX3ApiPython.LogOptions_nearPositiveLS_get
    if _newclass:
        nearPositiveLS = _swig_property(_WMX3ApiPython.LogOptions_nearPositiveLS_get, _WMX3ApiPython.LogOptions_nearPositiveLS_set)
    __swig_setmethods__["nearNegativeLS"] = _WMX3ApiPython.LogOptions_nearNegativeLS_set
    __swig_getmethods__["nearNegativeLS"] = _WMX3ApiPython.LogOptions_nearNegativeLS_get
    if _newclass:
        nearNegativeLS = _swig_property(_WMX3ApiPython.LogOptions_nearNegativeLS_get, _WMX3ApiPython.LogOptions_nearNegativeLS_set)
    __swig_setmethods__["externalPositiveLS"] = _WMX3ApiPython.LogOptions_externalPositiveLS_set
    __swig_getmethods__["externalPositiveLS"] = _WMX3ApiPython.LogOptions_externalPositiveLS_get
    if _newclass:
        externalPositiveLS = _swig_property(_WMX3ApiPython.LogOptions_externalPositiveLS_get, _WMX3ApiPython.LogOptions_externalPositiveLS_set)
    __swig_setmethods__["externalNegativeLS"] = _WMX3ApiPython.LogOptions_externalNegativeLS_set
    __swig_getmethods__["externalNegativeLS"] = _WMX3ApiPython.LogOptions_externalNegativeLS_get
    if _newclass:
        externalNegativeLS = _swig_property(_WMX3ApiPython.LogOptions_externalNegativeLS_get, _WMX3ApiPython.LogOptions_externalNegativeLS_set)
    __swig_setmethods__["positiveSoftLimit"] = _WMX3ApiPython.LogOptions_positiveSoftLimit_set
    __swig_getmethods__["positiveSoftLimit"] = _WMX3ApiPython.LogOptions_positiveSoftLimit_get
    if _newclass:
        positiveSoftLimit = _swig_property(_WMX3ApiPython.LogOptions_positiveSoftLimit_get, _WMX3ApiPython.LogOptions_positiveSoftLimit_set)
    __swig_setmethods__["negativeSoftLimit"] = _WMX3ApiPython.LogOptions_negativeSoftLimit_set
    __swig_getmethods__["negativeSoftLimit"] = _WMX3ApiPython.LogOptions_negativeSoftLimit_get
    if _newclass:
        negativeSoftLimit = _swig_property(_WMX3ApiPython.LogOptions_negativeSoftLimit_get, _WMX3ApiPython.LogOptions_negativeSoftLimit_set)
    __swig_setmethods__["homeState"] = _WMX3ApiPython.LogOptions_homeState_set
    __swig_getmethods__["homeState"] = _WMX3ApiPython.LogOptions_homeState_get
    if _newclass:
        homeState = _swig_property(_WMX3ApiPython.LogOptions_homeState_get, _WMX3ApiPython.LogOptions_homeState_set)
    __swig_setmethods__["homeSwitch"] = _WMX3ApiPython.LogOptions_homeSwitch_set
    __swig_getmethods__["homeSwitch"] = _WMX3ApiPython.LogOptions_homeSwitch_get
    if _newclass:
        homeSwitch = _swig_property(_WMX3ApiPython.LogOptions_homeSwitch_get, _WMX3ApiPython.LogOptions_homeSwitch_set)
    __swig_setmethods__["homeDone"] = _WMX3ApiPython.LogOptions_homeDone_set
    __swig_getmethods__["homeDone"] = _WMX3ApiPython.LogOptions_homeDone_get
    if _newclass:
        homeDone = _swig_property(_WMX3ApiPython.LogOptions_homeDone_get, _WMX3ApiPython.LogOptions_homeDone_set)
    __swig_setmethods__["triggerOnCommandChange"] = _WMX3ApiPython.LogOptions_triggerOnCommandChange_set
    __swig_getmethods__["triggerOnCommandChange"] = _WMX3ApiPython.LogOptions_triggerOnCommandChange_get
    if _newclass:
        triggerOnCommandChange = _swig_property(_WMX3ApiPython.LogOptions_triggerOnCommandChange_get, _WMX3ApiPython.LogOptions_triggerOnCommandChange_set)
    __swig_setmethods__["triggerOnEvent"] = _WMX3ApiPython.LogOptions_triggerOnEvent_set
    __swig_getmethods__["triggerOnEvent"] = _WMX3ApiPython.LogOptions_triggerOnEvent_get
    if _newclass:
        triggerOnEvent = _swig_property(_WMX3ApiPython.LogOptions_triggerOnEvent_get, _WMX3ApiPython.LogOptions_triggerOnEvent_set)
    __swig_setmethods__["triggerEventID"] = _WMX3ApiPython.LogOptions_triggerEventID_set
    __swig_getmethods__["triggerEventID"] = _WMX3ApiPython.LogOptions_triggerEventID_get
    if _newclass:
        triggerEventID = _swig_property(_WMX3ApiPython.LogOptions_triggerEventID_get, _WMX3ApiPython.LogOptions_triggerEventID_set)

    def __init__(self):
        this = _WMX3ApiPython.new_LogOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogOptions
    __del__ = lambda self: None
LogOptions_swigregister = _WMX3ApiPython.LogOptions_swigregister
LogOptions_swigregister(LogOptions)

class IOLogFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOLogFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOLogFormat, name)
    __repr__ = _swig_repr

    def GetData(self, ioLogFormat):
        return _WMX3ApiPython.IOLogFormat_GetData(self, ioLogFormat)
    __swig_setmethods__["byte"] = _WMX3ApiPython.IOLogFormat_byte_set
    __swig_getmethods__["byte"] = _WMX3ApiPython.IOLogFormat_byte_get
    if _newclass:
        byte = _swig_property(_WMX3ApiPython.IOLogFormat_byte_get, _WMX3ApiPython.IOLogFormat_byte_set)
    __swig_setmethods__["bit"] = _WMX3ApiPython.IOLogFormat_bit_set
    __swig_getmethods__["bit"] = _WMX3ApiPython.IOLogFormat_bit_get
    if _newclass:
        bit = _swig_property(_WMX3ApiPython.IOLogFormat_bit_get, _WMX3ApiPython.IOLogFormat_bit_set)
    __swig_setmethods__["ioFormatType"] = _WMX3ApiPython.IOLogFormat_ioFormatType_set
    __swig_getmethods__["ioFormatType"] = _WMX3ApiPython.IOLogFormat_ioFormatType_get
    if _newclass:
        ioFormatType = _swig_property(_WMX3ApiPython.IOLogFormat_ioFormatType_get, _WMX3ApiPython.IOLogFormat_ioFormatType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_IOLogFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_IOLogFormat
    __del__ = lambda self: None
IOLogFormat_swigregister = _WMX3ApiPython.IOLogFormat_swigregister
IOLogFormat_swigregister(IOLogFormat)

class MLogFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLogFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLogFormat, name)
    __repr__ = _swig_repr

    def GetData(self, mLogFormat):
        return _WMX3ApiPython.MLogFormat_GetData(self, mLogFormat)
    __swig_setmethods__["byte"] = _WMX3ApiPython.MLogFormat_byte_set
    __swig_getmethods__["byte"] = _WMX3ApiPython.MLogFormat_byte_get
    if _newclass:
        byte = _swig_property(_WMX3ApiPython.MLogFormat_byte_get, _WMX3ApiPython.MLogFormat_byte_set)
    __swig_setmethods__["bit"] = _WMX3ApiPython.MLogFormat_bit_set
    __swig_getmethods__["bit"] = _WMX3ApiPython.MLogFormat_bit_get
    if _newclass:
        bit = _swig_property(_WMX3ApiPython.MLogFormat_bit_get, _WMX3ApiPython.MLogFormat_bit_set)
    __swig_setmethods__["mFormatType"] = _WMX3ApiPython.MLogFormat_mFormatType_set
    __swig_getmethods__["mFormatType"] = _WMX3ApiPython.MLogFormat_mFormatType_get
    if _newclass:
        mFormatType = _swig_property(_WMX3ApiPython.MLogFormat_mFormatType_get, _WMX3ApiPython.MLogFormat_mFormatType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_MLogFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MLogFormat
    __del__ = lambda self: None
MLogFormat_swigregister = _WMX3ApiPython.MLogFormat_swigregister
MLogFormat_swigregister(MLogFormat)

class MemoryLogStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogStatus, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogStatus):
        return _WMX3ApiPython.MemoryLogStatus_GetData(self, memoryLogStatus)

    def SetData(self, memoryLogStatus):
        return _WMX3ApiPython.MemoryLogStatus_SetData(self, memoryLogStatus)
    __swig_setmethods__["bufferOpened"] = _WMX3ApiPython.MemoryLogStatus_bufferOpened_set
    __swig_getmethods__["bufferOpened"] = _WMX3ApiPython.MemoryLogStatus_bufferOpened_get
    if _newclass:
        bufferOpened = _swig_property(_WMX3ApiPython.MemoryLogStatus_bufferOpened_get, _WMX3ApiPython.MemoryLogStatus_bufferOpened_set)
    __swig_setmethods__["logState"] = _WMX3ApiPython.MemoryLogStatus_logState_set
    __swig_getmethods__["logState"] = _WMX3ApiPython.MemoryLogStatus_logState_get
    if _newclass:
        logState = _swig_property(_WMX3ApiPython.MemoryLogStatus_logState_get, _WMX3ApiPython.MemoryLogStatus_logState_set)
    __swig_setmethods__["samplesToCollect"] = _WMX3ApiPython.MemoryLogStatus_samplesToCollect_set
    __swig_getmethods__["samplesToCollect"] = _WMX3ApiPython.MemoryLogStatus_samplesToCollect_get
    if _newclass:
        samplesToCollect = _swig_property(_WMX3ApiPython.MemoryLogStatus_samplesToCollect_get, _WMX3ApiPython.MemoryLogStatus_samplesToCollect_set)
    __swig_setmethods__["samplesCollected"] = _WMX3ApiPython.MemoryLogStatus_samplesCollected_set
    __swig_getmethods__["samplesCollected"] = _WMX3ApiPython.MemoryLogStatus_samplesCollected_get
    if _newclass:
        samplesCollected = _swig_property(_WMX3ApiPython.MemoryLogStatus_samplesCollected_get, _WMX3ApiPython.MemoryLogStatus_samplesCollected_set)
    __swig_setmethods__["usageRate"] = _WMX3ApiPython.MemoryLogStatus_usageRate_set
    __swig_getmethods__["usageRate"] = _WMX3ApiPython.MemoryLogStatus_usageRate_get
    if _newclass:
        usageRate = _swig_property(_WMX3ApiPython.MemoryLogStatus_usageRate_get, _WMX3ApiPython.MemoryLogStatus_usageRate_set)
    __swig_setmethods__["overflowFlag"] = _WMX3ApiPython.MemoryLogStatus_overflowFlag_set
    __swig_getmethods__["overflowFlag"] = _WMX3ApiPython.MemoryLogStatus_overflowFlag_get
    if _newclass:
        overflowFlag = _swig_property(_WMX3ApiPython.MemoryLogStatus_overflowFlag_get, _WMX3ApiPython.MemoryLogStatus_overflowFlag_set)
    __swig_setmethods__["interruptPeriod"] = _WMX3ApiPython.MemoryLogStatus_interruptPeriod_set
    __swig_getmethods__["interruptPeriod"] = _WMX3ApiPython.MemoryLogStatus_interruptPeriod_get
    if _newclass:
        interruptPeriod = _swig_property(_WMX3ApiPython.MemoryLogStatus_interruptPeriod_get, _WMX3ApiPython.MemoryLogStatus_interruptPeriod_set)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogStatus
    __del__ = lambda self: None
MemoryLogStatus_swigregister = _WMX3ApiPython.MemoryLogStatus_swigregister
MemoryLogStatus_swigregister(MemoryLogStatus)

class MemoryLogAxisData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogAxisData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogAxisData, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogAxisData):
        return _WMX3ApiPython.MemoryLogAxisData_GetData(self, memoryLogAxisData)

    def SetData(self, memoryLogAxisData):
        return _WMX3ApiPython.MemoryLogAxisData_SetData(self, memoryLogAxisData)
    __swig_setmethods__["commandPos"] = _WMX3ApiPython.MemoryLogAxisData_commandPos_set
    __swig_getmethods__["commandPos"] = _WMX3ApiPython.MemoryLogAxisData_commandPos_get
    if _newclass:
        commandPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_commandPos_get, _WMX3ApiPython.MemoryLogAxisData_commandPos_set)
    __swig_setmethods__["feedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_feedbackPos_set
    __swig_getmethods__["feedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_feedbackPos_get
    if _newclass:
        feedbackPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_feedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_feedbackPos_set)
    __swig_setmethods__["compCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_compCommandPos_set
    __swig_getmethods__["compCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_compCommandPos_get
    if _newclass:
        compCommandPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_compCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_compCommandPos_set)
    __swig_setmethods__["compFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_set
    __swig_getmethods__["compFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_get
    if _newclass:
        compFeedbackPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_set)
    __swig_setmethods__["encoderCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_set
    __swig_getmethods__["encoderCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_get
    if _newclass:
        encoderCommandPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_set)
    __swig_setmethods__["encoderFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_set
    __swig_getmethods__["encoderFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_get
    if _newclass:
        encoderFeedbackPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_set)
    __swig_setmethods__["commandVelocity"] = _WMX3ApiPython.MemoryLogAxisData_commandVelocity_set
    __swig_getmethods__["commandVelocity"] = _WMX3ApiPython.MemoryLogAxisData_commandVelocity_get
    if _newclass:
        commandVelocity = _swig_property(_WMX3ApiPython.MemoryLogAxisData_commandVelocity_get, _WMX3ApiPython.MemoryLogAxisData_commandVelocity_set)
    __swig_setmethods__["feedbackVelocity"] = _WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_set
    __swig_getmethods__["feedbackVelocity"] = _WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_get
    if _newclass:
        feedbackVelocity = _swig_property(_WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_get, _WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_set)
    __swig_setmethods__["encoderCommandVelocity"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_set
    __swig_getmethods__["encoderCommandVelocity"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_get
    if _newclass:
        encoderCommandVelocity = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_set)
    __swig_setmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_set
    __swig_getmethods__["encoderFeedbackVelocity"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_get
    if _newclass:
        encoderFeedbackVelocity = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_set)
    __swig_setmethods__["commandTrq"] = _WMX3ApiPython.MemoryLogAxisData_commandTrq_set
    __swig_getmethods__["commandTrq"] = _WMX3ApiPython.MemoryLogAxisData_commandTrq_get
    if _newclass:
        commandTrq = _swig_property(_WMX3ApiPython.MemoryLogAxisData_commandTrq_get, _WMX3ApiPython.MemoryLogAxisData_commandTrq_set)
    __swig_setmethods__["feedbackTrq"] = _WMX3ApiPython.MemoryLogAxisData_feedbackTrq_set
    __swig_getmethods__["feedbackTrq"] = _WMX3ApiPython.MemoryLogAxisData_feedbackTrq_get
    if _newclass:
        feedbackTrq = _swig_property(_WMX3ApiPython.MemoryLogAxisData_feedbackTrq_get, _WMX3ApiPython.MemoryLogAxisData_feedbackTrq_set)
    __swig_setmethods__["encoderCommandTrq"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_set
    __swig_getmethods__["encoderCommandTrq"] = _WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_get
    if _newclass:
        encoderCommandTrq = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_set)
    __swig_setmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_set
    __swig_getmethods__["encoderFeedbackTrq"] = _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_get
    if _newclass:
        encoderFeedbackTrq = _swig_property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.MemoryLogAxisData_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.MemoryLogAxisData_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.MemoryLogAxisData_followingError_get, _WMX3ApiPython.MemoryLogAxisData_followingError_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.MemoryLogAxisData_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.MemoryLogAxisData_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.MemoryLogAxisData_homeOffset_get, _WMX3ApiPython.MemoryLogAxisData_homeOffset_set)
    __swig_setmethods__["inPosFlag"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag_set
    __swig_getmethods__["inPosFlag"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag_get
    if _newclass:
        inPosFlag = _swig_property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag_set)
    __swig_setmethods__["inPosFlag2"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag2_set
    __swig_getmethods__["inPosFlag2"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag2_get
    if _newclass:
        inPosFlag2 = _swig_property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag2_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag2_set)
    __swig_setmethods__["inPosFlag3"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag3_set
    __swig_getmethods__["inPosFlag3"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag3_get
    if _newclass:
        inPosFlag3 = _swig_property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag3_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag3_set)
    __swig_setmethods__["inPosFlag4"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag4_set
    __swig_getmethods__["inPosFlag4"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag4_get
    if _newclass:
        inPosFlag4 = _swig_property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag4_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag4_set)
    __swig_setmethods__["inPosFlag5"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag5_set
    __swig_getmethods__["inPosFlag5"] = _WMX3ApiPython.MemoryLogAxisData_inPosFlag5_get
    if _newclass:
        inPosFlag5 = _swig_property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag5_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag5_set)
    __swig_setmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_set
    __swig_getmethods__["commandDistributionEndFlag"] = _WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_get
    if _newclass:
        commandDistributionEndFlag = _swig_property(_WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_get, _WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_set)
    __swig_setmethods__["posSetFlag"] = _WMX3ApiPython.MemoryLogAxisData_posSetFlag_set
    __swig_getmethods__["posSetFlag"] = _WMX3ApiPython.MemoryLogAxisData_posSetFlag_get
    if _newclass:
        posSetFlag = _swig_property(_WMX3ApiPython.MemoryLogAxisData_posSetFlag_get, _WMX3ApiPython.MemoryLogAxisData_posSetFlag_set)
    __swig_setmethods__["delayedPosSetFlag"] = _WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_set
    __swig_getmethods__["delayedPosSetFlag"] = _WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_get
    if _newclass:
        delayedPosSetFlag = _swig_property(_WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_get, _WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.MemoryLogAxisData_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.MemoryLogAxisData_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.MemoryLogAxisData_opState_get, _WMX3ApiPython.MemoryLogAxisData_opState_set)
    __swig_setmethods__["detailOpState"] = _WMX3ApiPython.MemoryLogAxisData_detailOpState_set
    __swig_getmethods__["detailOpState"] = _WMX3ApiPython.MemoryLogAxisData_detailOpState_get
    if _newclass:
        detailOpState = _swig_property(_WMX3ApiPython.MemoryLogAxisData_detailOpState_get, _WMX3ApiPython.MemoryLogAxisData_detailOpState_set)
    __swig_setmethods__["userOffsetCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_set
    __swig_getmethods__["userOffsetCommandPos"] = _WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_get
    if _newclass:
        userOffsetCommandPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_set)
    __swig_setmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_set
    __swig_getmethods__["userOffsetFeedbackPos"] = _WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_get
    if _newclass:
        userOffsetFeedbackPos = _swig_property(_WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.MemoryLogAxisData_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.MemoryLogAxisData_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.MemoryLogAxisData_axisCommandMode_get, _WMX3ApiPython.MemoryLogAxisData_axisCommandMode_set)
    __swig_setmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_set
    __swig_getmethods__["axisCommandModeFeedback"] = _WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_get
    if _newclass:
        axisCommandModeFeedback = _swig_property(_WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_get, _WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogAxisData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogAxisData
    __del__ = lambda self: None
MemoryLogAxisData_swigregister = _WMX3ApiPython.MemoryLogAxisData_swigregister
MemoryLogAxisData_swigregister(MemoryLogAxisData)

class MemoryLogIOData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogIOData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogIOData, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogIOData):
        return _WMX3ApiPython.MemoryLogIOData_GetData(self, memoryLogIOData)

    def SetData(self, memoryLogIOData):
        return _WMX3ApiPython.MemoryLogIOData_SetData(self, memoryLogIOData)
    __swig_setmethods__["input"] = _WMX3ApiPython.MemoryLogIOData_input_set
    __swig_getmethods__["input"] = _WMX3ApiPython.MemoryLogIOData_input_get
    if _newclass:
        input = _swig_property(_WMX3ApiPython.MemoryLogIOData_input_get, _WMX3ApiPython.MemoryLogIOData_input_set)

    def SetInput(self, index, value):
        return _WMX3ApiPython.MemoryLogIOData_SetInput(self, index, value)

    def GetInput(self, index):
        return _WMX3ApiPython.MemoryLogIOData_GetInput(self, index)
    __swig_setmethods__["output"] = _WMX3ApiPython.MemoryLogIOData_output_set
    __swig_getmethods__["output"] = _WMX3ApiPython.MemoryLogIOData_output_get
    if _newclass:
        output = _swig_property(_WMX3ApiPython.MemoryLogIOData_output_get, _WMX3ApiPython.MemoryLogIOData_output_set)

    def SetOutput(self, index, value):
        return _WMX3ApiPython.MemoryLogIOData_SetOutput(self, index, value)

    def GetOutput(self, index):
        return _WMX3ApiPython.MemoryLogIOData_GetOutput(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogIOData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogIOData
    __del__ = lambda self: None
MemoryLogIOData_swigregister = _WMX3ApiPython.MemoryLogIOData_swigregister
MemoryLogIOData_swigregister(MemoryLogIOData)

class MemoryLogMData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogMData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogMData, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogMData):
        return _WMX3ApiPython.MemoryLogMData_GetData(self, memoryLogMData)

    def SetData(self, memoryLogMData):
        return _WMX3ApiPython.MemoryLogMData_SetData(self, memoryLogMData)
    __swig_setmethods__["data"] = _WMX3ApiPython.MemoryLogMData_data_set
    __swig_getmethods__["data"] = _WMX3ApiPython.MemoryLogMData_data_get
    if _newclass:
        data = _swig_property(_WMX3ApiPython.MemoryLogMData_data_get, _WMX3ApiPython.MemoryLogMData_data_set)

    def SetMData(self, index, value):
        return _WMX3ApiPython.MemoryLogMData_SetMData(self, index, value)

    def GetMData(self, index):
        return _WMX3ApiPython.MemoryLogMData_GetMData(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogMData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogMData
    __del__ = lambda self: None
MemoryLogMData_swigregister = _WMX3ApiPython.MemoryLogMData_swigregister
MemoryLogMData_swigregister(MemoryLogMData)

class MemoryLogOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogOptions, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogOptions):
        return _WMX3ApiPython.MemoryLogOptions_GetData(self, memoryLogOptions)

    def SetData(self, memoryLogOptions):
        return _WMX3ApiPython.MemoryLogOptions_SetData(self, memoryLogOptions)
    __swig_setmethods__["triggerEventCount"] = _WMX3ApiPython.MemoryLogOptions_triggerEventCount_set
    __swig_getmethods__["triggerEventCount"] = _WMX3ApiPython.MemoryLogOptions_triggerEventCount_get
    if _newclass:
        triggerEventCount = _swig_property(_WMX3ApiPython.MemoryLogOptions_triggerEventCount_get, _WMX3ApiPython.MemoryLogOptions_triggerEventCount_set)
    __swig_setmethods__["triggerEventID"] = _WMX3ApiPython.MemoryLogOptions_triggerEventID_set
    __swig_getmethods__["triggerEventID"] = _WMX3ApiPython.MemoryLogOptions_triggerEventID_get
    if _newclass:
        triggerEventID = _swig_property(_WMX3ApiPython.MemoryLogOptions_triggerEventID_get, _WMX3ApiPython.MemoryLogOptions_triggerEventID_set)

    def SetTriggerEventID(self, index, value):
        return _WMX3ApiPython.MemoryLogOptions_SetTriggerEventID(self, index, value)

    def GetTriggerEventID(self, index):
        return _WMX3ApiPython.MemoryLogOptions_GetTriggerEventID(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogOptions
    __del__ = lambda self: None
MemoryLogOptions_swigregister = _WMX3ApiPython.MemoryLogOptions_swigregister
MemoryLogOptions_swigregister(MemoryLogOptions)

class MemoryLogDatas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogDatas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogDatas, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogDatas):
        return _WMX3ApiPython.MemoryLogDatas_GetData(self, memoryLogDatas)

    def SetData(self, memoryLogDatas):
        return _WMX3ApiPython.MemoryLogDatas_SetData(self, memoryLogDatas)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.MemoryLogDatas_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.MemoryLogDatas_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.MemoryLogDatas_cycleCounter_get, _WMX3ApiPython.MemoryLogDatas_cycleCounter_set)
    __swig_setmethods__["logAxisData"] = _WMX3ApiPython.MemoryLogDatas_logAxisData_set
    __swig_getmethods__["logAxisData"] = _WMX3ApiPython.MemoryLogDatas_logAxisData_get
    if _newclass:
        logAxisData = _swig_property(_WMX3ApiPython.MemoryLogDatas_logAxisData_get, _WMX3ApiPython.MemoryLogDatas_logAxisData_set)

    def SetLogAxisData(self, index, value):
        return _WMX3ApiPython.MemoryLogDatas_SetLogAxisData(self, index, value)

    def GetLogAxisData(self, index):
        return _WMX3ApiPython.MemoryLogDatas_GetLogAxisData(self, index)
    __swig_setmethods__["logIOData"] = _WMX3ApiPython.MemoryLogDatas_logIOData_set
    __swig_getmethods__["logIOData"] = _WMX3ApiPython.MemoryLogDatas_logIOData_get
    if _newclass:
        logIOData = _swig_property(_WMX3ApiPython.MemoryLogDatas_logIOData_get, _WMX3ApiPython.MemoryLogDatas_logIOData_set)
    __swig_setmethods__["logMData"] = _WMX3ApiPython.MemoryLogDatas_logMData_set
    __swig_getmethods__["logMData"] = _WMX3ApiPython.MemoryLogDatas_logMData_get
    if _newclass:
        logMData = _swig_property(_WMX3ApiPython.MemoryLogDatas_logMData_get, _WMX3ApiPython.MemoryLogDatas_logMData_set)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogDatas()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDatas
    __del__ = lambda self: None
MemoryLogDatas_swigregister = _WMX3ApiPython.MemoryLogDatas_swigregister
MemoryLogDatas_swigregister(MemoryLogDatas)

class MemoryLogData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryLogData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryLogData, name)
    __repr__ = _swig_repr

    def GetData(self, memoryLogData):
        return _WMX3ApiPython.MemoryLogData_GetData(self, memoryLogData)

    def SetData(self, memoryLogData):
        return _WMX3ApiPython.MemoryLogData_SetData(self, memoryLogData)
    __swig_setmethods__["count"] = _WMX3ApiPython.MemoryLogData_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.MemoryLogData_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.MemoryLogData_count_get, _WMX3ApiPython.MemoryLogData_count_set)
    __swig_setmethods__["overflowFlag"] = _WMX3ApiPython.MemoryLogData_overflowFlag_set
    __swig_getmethods__["overflowFlag"] = _WMX3ApiPython.MemoryLogData_overflowFlag_get
    if _newclass:
        overflowFlag = _swig_property(_WMX3ApiPython.MemoryLogData_overflowFlag_get, _WMX3ApiPython.MemoryLogData_overflowFlag_set)
    __swig_setmethods__["logData"] = _WMX3ApiPython.MemoryLogData_logData_set
    __swig_getmethods__["logData"] = _WMX3ApiPython.MemoryLogData_logData_get
    if _newclass:
        logData = _swig_property(_WMX3ApiPython.MemoryLogData_logData_get, _WMX3ApiPython.MemoryLogData_logData_set)

    def SetLogData(self, index, value):
        return _WMX3ApiPython.MemoryLogData_SetLogData(self, index, value)

    def GetLogData(self, index):
        return _WMX3ApiPython.MemoryLogData_GetLogData(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_MemoryLogData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogData
    __del__ = lambda self: None
MemoryLogData_swigregister = _WMX3ApiPython.MemoryLogData_swigregister
MemoryLogData_swigregister(MemoryLogData)

class LogChannelOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogChannelOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogChannelOptions, name)
    __repr__ = _swig_repr

    def SetData(self, logChannelOptions):
        return _WMX3ApiPython.LogChannelOptions_SetData(self, logChannelOptions)

    def GetData(self, logChannelOptions):
        return _WMX3ApiPython.LogChannelOptions_GetData(self, logChannelOptions)
    __swig_setmethods__["maxLogFileSize"] = _WMX3ApiPython.LogChannelOptions_maxLogFileSize_set
    __swig_getmethods__["maxLogFileSize"] = _WMX3ApiPython.LogChannelOptions_maxLogFileSize_get
    if _newclass:
        maxLogFileSize = _swig_property(_WMX3ApiPython.LogChannelOptions_maxLogFileSize_get, _WMX3ApiPython.LogChannelOptions_maxLogFileSize_set)
    __swig_setmethods__["maxLogFileCount"] = _WMX3ApiPython.LogChannelOptions_maxLogFileCount_set
    __swig_getmethods__["maxLogFileCount"] = _WMX3ApiPython.LogChannelOptions_maxLogFileCount_get
    if _newclass:
        maxLogFileCount = _swig_property(_WMX3ApiPython.LogChannelOptions_maxLogFileCount_get, _WMX3ApiPython.LogChannelOptions_maxLogFileCount_set)
    __swig_setmethods__["samplingTimeMilliseconds"] = _WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_set
    __swig_getmethods__["samplingTimeMilliseconds"] = _WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_get
    if _newclass:
        samplingTimeMilliseconds = _swig_property(_WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_get, _WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_set)
    __swig_setmethods__["isRotateFile"] = _WMX3ApiPython.LogChannelOptions_isRotateFile_set
    __swig_getmethods__["isRotateFile"] = _WMX3ApiPython.LogChannelOptions_isRotateFile_get
    if _newclass:
        isRotateFile = _swig_property(_WMX3ApiPython.LogChannelOptions_isRotateFile_get, _WMX3ApiPython.LogChannelOptions_isRotateFile_set)
    __swig_setmethods__["stopLoggingOnBufferOverflow"] = _WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_set
    __swig_getmethods__["stopLoggingOnBufferOverflow"] = _WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_get
    if _newclass:
        stopLoggingOnBufferOverflow = _swig_property(_WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_get, _WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_set)
    __swig_setmethods__["samplingPeriodInCycles"] = _WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_set
    __swig_getmethods__["samplingPeriodInCycles"] = _WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_get
    if _newclass:
        samplingPeriodInCycles = _swig_property(_WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_get, _WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_set)
    __swig_setmethods__["precision"] = _WMX3ApiPython.LogChannelOptions_precision_set
    __swig_getmethods__["precision"] = _WMX3ApiPython.LogChannelOptions_precision_get
    if _newclass:
        precision = _swig_property(_WMX3ApiPython.LogChannelOptions_precision_get, _WMX3ApiPython.LogChannelOptions_precision_set)
    __swig_setmethods__["isDelimInLastCol"] = _WMX3ApiPython.LogChannelOptions_isDelimInLastCol_set
    __swig_getmethods__["isDelimInLastCol"] = _WMX3ApiPython.LogChannelOptions_isDelimInLastCol_get
    if _newclass:
        isDelimInLastCol = _swig_property(_WMX3ApiPython.LogChannelOptions_isDelimInLastCol_get, _WMX3ApiPython.LogChannelOptions_isDelimInLastCol_set)
    __swig_setmethods__["delimiter"] = _WMX3ApiPython.LogChannelOptions_delimiter_set
    __swig_getmethods__["delimiter"] = _WMX3ApiPython.LogChannelOptions_delimiter_get
    if _newclass:
        delimiter = _swig_property(_WMX3ApiPython.LogChannelOptions_delimiter_get, _WMX3ApiPython.LogChannelOptions_delimiter_set)

    def SetDelimiter(self, index, value):
        return _WMX3ApiPython.LogChannelOptions_SetDelimiter(self, index, value)

    def GetDelimiter(self, index):
        return _WMX3ApiPython.LogChannelOptions_GetDelimiter(self, index)
    __swig_setmethods__["triggerOnCondition"] = _WMX3ApiPython.LogChannelOptions_triggerOnCondition_set
    __swig_getmethods__["triggerOnCondition"] = _WMX3ApiPython.LogChannelOptions_triggerOnCondition_get
    if _newclass:
        triggerOnCondition = _swig_property(_WMX3ApiPython.LogChannelOptions_triggerOnCondition_get, _WMX3ApiPython.LogChannelOptions_triggerOnCondition_set)
    __swig_setmethods__["triggerOnEvent"] = _WMX3ApiPython.LogChannelOptions_triggerOnEvent_set
    __swig_getmethods__["triggerOnEvent"] = _WMX3ApiPython.LogChannelOptions_triggerOnEvent_get
    if _newclass:
        triggerOnEvent = _swig_property(_WMX3ApiPython.LogChannelOptions_triggerOnEvent_get, _WMX3ApiPython.LogChannelOptions_triggerOnEvent_set)
    __swig_setmethods__["triggerEventID"] = _WMX3ApiPython.LogChannelOptions_triggerEventID_set
    __swig_getmethods__["triggerEventID"] = _WMX3ApiPython.LogChannelOptions_triggerEventID_get
    if _newclass:
        triggerEventID = _swig_property(_WMX3ApiPython.LogChannelOptions_triggerEventID_get, _WMX3ApiPython.LogChannelOptions_triggerEventID_set)

    def __init__(self):
        this = _WMX3ApiPython.new_LogChannelOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogChannelOptions
    __del__ = lambda self: None
LogChannelOptions_swigregister = _WMX3ApiPython.LogChannelOptions_swigregister
LogChannelOptions_swigregister(LogChannelOptions)

class LogFilePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFilePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFilePath, name)
    __repr__ = _swig_repr

    def SetData(self, logFilePath):
        return _WMX3ApiPython.LogFilePath_SetData(self, logFilePath)

    def GetData(self, logFilePath):
        return _WMX3ApiPython.LogFilePath_GetData(self, logFilePath)
    __swig_setmethods__["dirPath"] = _WMX3ApiPython.LogFilePath_dirPath_set
    __swig_getmethods__["dirPath"] = _WMX3ApiPython.LogFilePath_dirPath_get
    if _newclass:
        dirPath = _swig_property(_WMX3ApiPython.LogFilePath_dirPath_get, _WMX3ApiPython.LogFilePath_dirPath_set)

    def SetDirPath(self, index, value):
        return _WMX3ApiPython.LogFilePath_SetDirPath(self, index, value)

    def GetDirPath(self, index):
        return _WMX3ApiPython.LogFilePath_GetDirPath(self, index)
    __swig_setmethods__["fileName"] = _WMX3ApiPython.LogFilePath_fileName_set
    __swig_getmethods__["fileName"] = _WMX3ApiPython.LogFilePath_fileName_get
    if _newclass:
        fileName = _swig_property(_WMX3ApiPython.LogFilePath_fileName_get, _WMX3ApiPython.LogFilePath_fileName_set)

    def SetFileName(self, index, value):
        return _WMX3ApiPython.LogFilePath_SetFileName(self, index, value)

    def GetFileName(self, index):
        return _WMX3ApiPython.LogFilePath_GetFileName(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_LogFilePath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogFilePath
    __del__ = lambda self: None
LogFilePath_swigregister = _WMX3ApiPython.LogFilePath_swigregister
LogFilePath_swigregister(LogFilePath)

class DetailLogState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetailLogState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetailLogState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.DetailLogState_Idle
    WaitingForTrigger = _WMX3ApiPython.DetailLogState_WaitingForTrigger
    Running = _WMX3ApiPython.DetailLogState_Running
    Pause = _WMX3ApiPython.DetailLogState_Pause
    Stop = _WMX3ApiPython.DetailLogState_Stop
    WriteFail = _WMX3ApiPython.DetailLogState_WriteFail
    BufferOverflow = _WMX3ApiPython.DetailLogState_BufferOverflow
    Finished = _WMX3ApiPython.DetailLogState_Finished

    def __init__(self):
        this = _WMX3ApiPython.new_DetailLogState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogState
    __del__ = lambda self: None
DetailLogState_swigregister = _WMX3ApiPython.DetailLogState_swigregister
DetailLogState_swigregister(DetailLogState)

class DetailLogBufferStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetailLogBufferStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetailLogBufferStatus, name)
    __repr__ = _swig_repr

    def SetData(self, detailLogBufferStatus):
        return _WMX3ApiPython.DetailLogBufferStatus_SetData(self, detailLogBufferStatus)

    def GetData(self, detailLogBufferStatus):
        return _WMX3ApiPython.DetailLogBufferStatus_GetData(self, detailLogBufferStatus)
    __swig_setmethods__["opened"] = _WMX3ApiPython.DetailLogBufferStatus_opened_set
    __swig_getmethods__["opened"] = _WMX3ApiPython.DetailLogBufferStatus_opened_get
    if _newclass:
        opened = _swig_property(_WMX3ApiPython.DetailLogBufferStatus_opened_get, _WMX3ApiPython.DetailLogBufferStatus_opened_set)
    __swig_setmethods__["samplesToCollect"] = _WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_set
    __swig_getmethods__["samplesToCollect"] = _WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_get
    if _newclass:
        samplesToCollect = _swig_property(_WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_get, _WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_set)
    __swig_setmethods__["samplesCollected"] = _WMX3ApiPython.DetailLogBufferStatus_samplesCollected_set
    __swig_getmethods__["samplesCollected"] = _WMX3ApiPython.DetailLogBufferStatus_samplesCollected_get
    if _newclass:
        samplesCollected = _swig_property(_WMX3ApiPython.DetailLogBufferStatus_samplesCollected_get, _WMX3ApiPython.DetailLogBufferStatus_samplesCollected_set)
    __swig_setmethods__["millisecondsToCollect"] = _WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_set
    __swig_getmethods__["millisecondsToCollect"] = _WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_get
    if _newclass:
        millisecondsToCollect = _swig_property(_WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_get, _WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_set)
    __swig_setmethods__["millisecondsCollected"] = _WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_set
    __swig_getmethods__["millisecondsCollected"] = _WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_get
    if _newclass:
        millisecondsCollected = _swig_property(_WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_get, _WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DetailLogBufferStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogBufferStatus
    __del__ = lambda self: None
DetailLogBufferStatus_swigregister = _WMX3ApiPython.DetailLogBufferStatus_swigregister
DetailLogBufferStatus_swigregister(DetailLogBufferStatus)

class DetailLogStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetailLogStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetailLogStatus, name)
    __repr__ = _swig_repr

    def SetData(self, detailLogStatus):
        return _WMX3ApiPython.DetailLogStatus_SetData(self, detailLogStatus)

    def GetData(self, detailLogStatus):
        return _WMX3ApiPython.DetailLogStatus_GetData(self, detailLogStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.DetailLogStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.DetailLogStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.DetailLogStatus_state_get, _WMX3ApiPython.DetailLogStatus_state_set)
    __swig_setmethods__["buffer"] = _WMX3ApiPython.DetailLogStatus_buffer_set
    __swig_getmethods__["buffer"] = _WMX3ApiPython.DetailLogStatus_buffer_get
    if _newclass:
        buffer = _swig_property(_WMX3ApiPython.DetailLogStatus_buffer_get, _WMX3ApiPython.DetailLogStatus_buffer_set)
    __swig_setmethods__["interruptPeriod"] = _WMX3ApiPython.DetailLogStatus_interruptPeriod_set
    __swig_getmethods__["interruptPeriod"] = _WMX3ApiPython.DetailLogStatus_interruptPeriod_get
    if _newclass:
        interruptPeriod = _swig_property(_WMX3ApiPython.DetailLogStatus_interruptPeriod_get, _WMX3ApiPython.DetailLogStatus_interruptPeriod_set)
    __swig_setmethods__["logFileCount"] = _WMX3ApiPython.DetailLogStatus_logFileCount_set
    __swig_getmethods__["logFileCount"] = _WMX3ApiPython.DetailLogStatus_logFileCount_get
    if _newclass:
        logFileCount = _swig_property(_WMX3ApiPython.DetailLogStatus_logFileCount_get, _WMX3ApiPython.DetailLogStatus_logFileCount_set)
    __swig_setmethods__["samplesWrittenSize"] = _WMX3ApiPython.DetailLogStatus_samplesWrittenSize_set
    __swig_getmethods__["samplesWrittenSize"] = _WMX3ApiPython.DetailLogStatus_samplesWrittenSize_get
    if _newclass:
        samplesWrittenSize = _swig_property(_WMX3ApiPython.DetailLogStatus_samplesWrittenSize_get, _WMX3ApiPython.DetailLogStatus_samplesWrittenSize_set)
    __swig_setmethods__["samplesWritten"] = _WMX3ApiPython.DetailLogStatus_samplesWritten_set
    __swig_getmethods__["samplesWritten"] = _WMX3ApiPython.DetailLogStatus_samplesWritten_get
    if _newclass:
        samplesWritten = _swig_property(_WMX3ApiPython.DetailLogStatus_samplesWritten_get, _WMX3ApiPython.DetailLogStatus_samplesWritten_set)
    __swig_setmethods__["millisecondsWritten"] = _WMX3ApiPython.DetailLogStatus_millisecondsWritten_set
    __swig_getmethods__["millisecondsWritten"] = _WMX3ApiPython.DetailLogStatus_millisecondsWritten_get
    if _newclass:
        millisecondsWritten = _swig_property(_WMX3ApiPython.DetailLogStatus_millisecondsWritten_get, _WMX3ApiPython.DetailLogStatus_millisecondsWritten_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DetailLogStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogStatus
    __del__ = lambda self: None
DetailLogStatus_swigregister = _WMX3ApiPython.DetailLogStatus_swigregister
DetailLogStatus_swigregister(DetailLogStatus)

class DetailLogMemoryStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetailLogMemoryStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetailLogMemoryStatus, name)
    __repr__ = _swig_repr

    def SetData(self, detailLogMemoryStatus):
        return _WMX3ApiPython.DetailLogMemoryStatus_SetData(self, detailLogMemoryStatus)

    def GetData(self, detailLogMemoryStatus):
        return _WMX3ApiPython.DetailLogMemoryStatus_GetData(self, detailLogMemoryStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.DetailLogMemoryStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.DetailLogMemoryStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.DetailLogMemoryStatus_state_get, _WMX3ApiPython.DetailLogMemoryStatus_state_set)
    __swig_setmethods__["buffer"] = _WMX3ApiPython.DetailLogMemoryStatus_buffer_set
    __swig_getmethods__["buffer"] = _WMX3ApiPython.DetailLogMemoryStatus_buffer_get
    if _newclass:
        buffer = _swig_property(_WMX3ApiPython.DetailLogMemoryStatus_buffer_get, _WMX3ApiPython.DetailLogMemoryStatus_buffer_set)
    __swig_setmethods__["usageRate"] = _WMX3ApiPython.DetailLogMemoryStatus_usageRate_set
    __swig_getmethods__["usageRate"] = _WMX3ApiPython.DetailLogMemoryStatus_usageRate_get
    if _newclass:
        usageRate = _swig_property(_WMX3ApiPython.DetailLogMemoryStatus_usageRate_get, _WMX3ApiPython.DetailLogMemoryStatus_usageRate_set)
    __swig_setmethods__["overflowFlag"] = _WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_set
    __swig_getmethods__["overflowFlag"] = _WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_get
    if _newclass:
        overflowFlag = _swig_property(_WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_get, _WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_set)

    def __init__(self):
        this = _WMX3ApiPython.new_DetailLogMemoryStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogMemoryStatus
    __del__ = lambda self: None
DetailLogMemoryStatus_swigregister = _WMX3ApiPython.DetailLogMemoryStatus_swigregister
DetailLogMemoryStatus_swigregister(DetailLogMemoryStatus)

class LogHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogHeader, name)
    __repr__ = _swig_repr

    def __init__(self, numLines):
        this = _WMX3ApiPython.new_LogHeader(numLines)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogHeader
    __del__ = lambda self: None
    __swig_setmethods__["ppLine"] = _WMX3ApiPython.LogHeader_ppLine_set
    __swig_getmethods__["ppLine"] = _WMX3ApiPython.LogHeader_ppLine_get
    if _newclass:
        ppLine = _swig_property(_WMX3ApiPython.LogHeader_ppLine_get, _WMX3ApiPython.LogHeader_ppLine_set)

    def GetNumLines(self):
        return _WMX3ApiPython.LogHeader_GetNumLines(self)

    def SetPpLine(self, index, value):
        return _WMX3ApiPython.LogHeader_SetPpLine(self, index, value)

    def GetPpLine(self, index):
        return _WMX3ApiPython.LogHeader_GetPpLine(self, index)
LogHeader_swigregister = _WMX3ApiPython.LogHeader_swigregister
LogHeader_swigregister(LogHeader)

class LogInputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogInputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogInputType, name)
    __repr__ = _swig_repr
    CycleCounter = _WMX3ApiPython.LogInputType_CycleCounter
    Time = _WMX3ApiPython.LogInputType_Time

    def __init__(self):
        this = _WMX3ApiPython.new_LogInputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogInputType
    __del__ = lambda self: None
LogInputType_swigregister = _WMX3ApiPython.LogInputType_swigregister
LogInputType_swigregister(LogInputType)

class LogApiLogInput(LogInput):
    __swig_setmethods__ = {}
    for _s in [LogInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogApiLogInput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogApiLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, pLogApiLogInput):
        return _WMX3ApiPython.LogApiLogInput_SetData(self, pLogApiLogInput)

    def GetData(self, pLogApiLogInput):
        return _WMX3ApiPython.LogApiLogInput_GetData(self, pLogApiLogInput)

    def __init__(self, *args):
        this = _WMX3ApiPython.new_LogApiLogInput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _WMX3ApiPython.LogApiLogInput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.LogApiLogInput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.LogApiLogInput_type_get, _WMX3ApiPython.LogApiLogInput_type_set)

    def GetModuleId(self):
        return _WMX3ApiPython.LogApiLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.LogApiLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.LogApiLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.LogApiLogInput_GetLogInput(self)
    __swig_destroy__ = _WMX3ApiPython.delete_LogApiLogInput
    __del__ = lambda self: None
LogApiLogInput_swigregister = _WMX3ApiPython.LogApiLogInput_swigregister
LogApiLogInput_swigregister(LogApiLogInput)

class LogApiLogOutput(LogOutput):
    __swig_setmethods__ = {}
    for _s in [LogOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogApiLogOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogApiLogOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_LogApiLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.LogApiLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.LogApiLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.LogApiLogOutput_SetLogOutput(self, src)
    __swig_destroy__ = _WMX3ApiPython.delete_LogApiLogOutput
    __del__ = lambda self: None
LogApiLogOutput_swigregister = _WMX3ApiPython.LogApiLogOutput_swigregister
LogApiLogOutput_swigregister(LogApiLogOutput)

class LogOutputs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogOutputs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogOutputs, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _WMX3ApiPython.new_LogOutputs(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogOutputs
    __del__ = lambda self: None
    __swig_setmethods__["ppOutput"] = _WMX3ApiPython.LogOutputs_ppOutput_set
    __swig_getmethods__["ppOutput"] = _WMX3ApiPython.LogOutputs_ppOutput_get
    if _newclass:
        ppOutput = _swig_property(_WMX3ApiPython.LogOutputs_ppOutput_get, _WMX3ApiPython.LogOutputs_ppOutput_set)

    def GetSize(self):
        return _WMX3ApiPython.LogOutputs_GetSize(self)

    def SetPpOutput(self, index, pOutput):
        return _WMX3ApiPython.LogOutputs_SetPpOutput(self, index, pOutput)

    def GetPpOutput(self, index):
        return _WMX3ApiPython.LogOutputs_GetPpOutput(self, index)
LogOutputs_swigregister = _WMX3ApiPython.LogOutputs_swigregister
LogOutputs_swigregister(LogOutputs)

class LogType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogType, name)
    __repr__ = _swig_repr
    Log = _WMX3ApiPython.LogType_Log
    MemoryLog = _WMX3ApiPython.LogType_MemoryLog

    def __init__(self):
        this = _WMX3ApiPython.new_LogType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_LogType
    __del__ = lambda self: None
LogType_swigregister = _WMX3ApiPython.LogType_swigregister
LogType_swigregister(LogType)

class ApiLogType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiLogType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiLogType, name)
    __repr__ = _swig_repr
    Command = _WMX3ApiPython.ApiLogType_Command
    Response = _WMX3ApiPython.ApiLogType_Response

    def __init__(self):
        this = _WMX3ApiPython.new_ApiLogType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogType
    __del__ = lambda self: None
ApiLogType_swigregister = _WMX3ApiPython.ApiLogType_swigregister
ApiLogType_swigregister(ApiLogType)

class ApiLogInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiLogInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiLogInfo, name)
    __repr__ = _swig_repr

    def SetData(self, apiLogInfo):
        return _WMX3ApiPython.ApiLogInfo_SetData(self, apiLogInfo)

    def GetData(self, apiLogInfo):
        return _WMX3ApiPython.ApiLogInfo_GetData(self, apiLogInfo)
    __swig_setmethods__["majorVer"] = _WMX3ApiPython.ApiLogInfo_majorVer_set
    __swig_getmethods__["majorVer"] = _WMX3ApiPython.ApiLogInfo_majorVer_get
    if _newclass:
        majorVer = _swig_property(_WMX3ApiPython.ApiLogInfo_majorVer_get, _WMX3ApiPython.ApiLogInfo_majorVer_set)
    __swig_setmethods__["minorVer"] = _WMX3ApiPython.ApiLogInfo_minorVer_set
    __swig_getmethods__["minorVer"] = _WMX3ApiPython.ApiLogInfo_minorVer_get
    if _newclass:
        minorVer = _swig_property(_WMX3ApiPython.ApiLogInfo_minorVer_get, _WMX3ApiPython.ApiLogInfo_minorVer_set)
    __swig_setmethods__["revision"] = _WMX3ApiPython.ApiLogInfo_revision_set
    __swig_getmethods__["revision"] = _WMX3ApiPython.ApiLogInfo_revision_get
    if _newclass:
        revision = _swig_property(_WMX3ApiPython.ApiLogInfo_revision_get, _WMX3ApiPython.ApiLogInfo_revision_set)
    __swig_setmethods__["devId"] = _WMX3ApiPython.ApiLogInfo_devId_set
    __swig_getmethods__["devId"] = _WMX3ApiPython.ApiLogInfo_devId_get
    if _newclass:
        devId = _swig_property(_WMX3ApiPython.ApiLogInfo_devId_get, _WMX3ApiPython.ApiLogInfo_devId_set)
    __swig_setmethods__["moduleId"] = _WMX3ApiPython.ApiLogInfo_moduleId_set
    __swig_getmethods__["moduleId"] = _WMX3ApiPython.ApiLogInfo_moduleId_get
    if _newclass:
        moduleId = _swig_property(_WMX3ApiPython.ApiLogInfo_moduleId_get, _WMX3ApiPython.ApiLogInfo_moduleId_set)
    __swig_setmethods__["mode"] = _WMX3ApiPython.ApiLogInfo_mode_set
    __swig_getmethods__["mode"] = _WMX3ApiPython.ApiLogInfo_mode_get
    if _newclass:
        mode = _swig_property(_WMX3ApiPython.ApiLogInfo_mode_get, _WMX3ApiPython.ApiLogInfo_mode_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.ApiLogInfo_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.ApiLogInfo_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.ApiLogInfo_type_get, _WMX3ApiPython.ApiLogInfo_type_set)
    __swig_setmethods__["dataLen"] = _WMX3ApiPython.ApiLogInfo_dataLen_set
    __swig_getmethods__["dataLen"] = _WMX3ApiPython.ApiLogInfo_dataLen_get
    if _newclass:
        dataLen = _swig_property(_WMX3ApiPython.ApiLogInfo_dataLen_get, _WMX3ApiPython.ApiLogInfo_dataLen_set)
    __swig_setmethods__["logId"] = _WMX3ApiPython.ApiLogInfo_logId_set
    __swig_getmethods__["logId"] = _WMX3ApiPython.ApiLogInfo_logId_get
    if _newclass:
        logId = _swig_property(_WMX3ApiPython.ApiLogInfo_logId_get, _WMX3ApiPython.ApiLogInfo_logId_set)
    __swig_setmethods__["timestamp"] = _WMX3ApiPython.ApiLogInfo_timestamp_set
    __swig_getmethods__["timestamp"] = _WMX3ApiPython.ApiLogInfo_timestamp_get
    if _newclass:
        timestamp = _swig_property(_WMX3ApiPython.ApiLogInfo_timestamp_get, _WMX3ApiPython.ApiLogInfo_timestamp_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiLogInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogInfo
    __del__ = lambda self: None
ApiLogInfo_swigregister = _WMX3ApiPython.ApiLogInfo_swigregister
ApiLogInfo_swigregister(ApiLogInfo)

class ApiLogOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiLogOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiLogOptions, name)
    __repr__ = _swig_repr

    def SetData(self, apiLogOptions):
        return _WMX3ApiPython.ApiLogOptions_SetData(self, apiLogOptions)

    def GetData(self, apiLogOptions):
        return _WMX3ApiPython.ApiLogOptions_GetData(self, apiLogOptions)
    __swig_setmethods__["sizePerFile"] = _WMX3ApiPython.ApiLogOptions_sizePerFile_set
    __swig_getmethods__["sizePerFile"] = _WMX3ApiPython.ApiLogOptions_sizePerFile_get
    if _newclass:
        sizePerFile = _swig_property(_WMX3ApiPython.ApiLogOptions_sizePerFile_get, _WMX3ApiPython.ApiLogOptions_sizePerFile_set)
    __swig_setmethods__["deviceExcluded"] = _WMX3ApiPython.ApiLogOptions_deviceExcluded_set
    __swig_getmethods__["deviceExcluded"] = _WMX3ApiPython.ApiLogOptions_deviceExcluded_get
    if _newclass:
        deviceExcluded = _swig_property(_WMX3ApiPython.ApiLogOptions_deviceExcluded_get, _WMX3ApiPython.ApiLogOptions_deviceExcluded_set)

    def SetDeviceExcluded(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetDeviceExcluded(self, index, value)

    def GetDeviceExcluded(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetDeviceExcluded(self, index)
    __swig_setmethods__["moduleExcluded"] = _WMX3ApiPython.ApiLogOptions_moduleExcluded_set
    __swig_getmethods__["moduleExcluded"] = _WMX3ApiPython.ApiLogOptions_moduleExcluded_get
    if _newclass:
        moduleExcluded = _swig_property(_WMX3ApiPython.ApiLogOptions_moduleExcluded_get, _WMX3ApiPython.ApiLogOptions_moduleExcluded_set)

    def SetModuleExcluded(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetModuleExcluded(self, index, value)

    def GetModuleExcluded(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetModuleExcluded(self, index)
    __swig_setmethods__["moduleResp"] = _WMX3ApiPython.ApiLogOptions_moduleResp_set
    __swig_getmethods__["moduleResp"] = _WMX3ApiPython.ApiLogOptions_moduleResp_get
    if _newclass:
        moduleResp = _swig_property(_WMX3ApiPython.ApiLogOptions_moduleResp_get, _WMX3ApiPython.ApiLogOptions_moduleResp_set)

    def SetModuleResp(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetModuleResp(self, index, value)

    def GetModuleResp(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetModuleResp(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiLogOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogOptions
    __del__ = lambda self: None
ApiLogOptions_swigregister = _WMX3ApiPython.ApiLogOptions_swigregister
ApiLogOptions_swigregister(ApiLogOptions)

class ApiLogState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiLogState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiLogState, name)
    __repr__ = _swig_repr
    Stopped = _WMX3ApiPython.ApiLogState_Stopped
    Stopping = _WMX3ApiPython.ApiLogState_Stopping
    Running = _WMX3ApiPython.ApiLogState_Running
    Error = _WMX3ApiPython.ApiLogState_Error
    Unknown = _WMX3ApiPython.ApiLogState_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_ApiLogState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogState
    __del__ = lambda self: None
ApiLogState_swigregister = _WMX3ApiPython.ApiLogState_swigregister
ApiLogState_swigregister(ApiLogState)

class ApiLogStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiLogStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiLogStatus, name)
    __repr__ = _swig_repr

    def SetData(self, apiLogStatus):
        return _WMX3ApiPython.ApiLogStatus_SetData(self, apiLogStatus)

    def GetData(self, apiLogStatus):
        return _WMX3ApiPython.ApiLogStatus_GetData(self, apiLogStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.ApiLogStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.ApiLogStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.ApiLogStatus_state_get, _WMX3ApiPython.ApiLogStatus_state_set)
    __swig_setmethods__["queueSize"] = _WMX3ApiPython.ApiLogStatus_queueSize_set
    __swig_getmethods__["queueSize"] = _WMX3ApiPython.ApiLogStatus_queueSize_get
    if _newclass:
        queueSize = _swig_property(_WMX3ApiPython.ApiLogStatus_queueSize_get, _WMX3ApiPython.ApiLogStatus_queueSize_set)
    __swig_setmethods__["dataSize"] = _WMX3ApiPython.ApiLogStatus_dataSize_set
    __swig_getmethods__["dataSize"] = _WMX3ApiPython.ApiLogStatus_dataSize_get
    if _newclass:
        dataSize = _swig_property(_WMX3ApiPython.ApiLogStatus_dataSize_get, _WMX3ApiPython.ApiLogStatus_dataSize_set)
    __swig_setmethods__["errorCode"] = _WMX3ApiPython.ApiLogStatus_errorCode_set
    __swig_getmethods__["errorCode"] = _WMX3ApiPython.ApiLogStatus_errorCode_get
    if _newclass:
        errorCode = _swig_property(_WMX3ApiPython.ApiLogStatus_errorCode_get, _WMX3ApiPython.ApiLogStatus_errorCode_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiLogStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogStatus
    __del__ = lambda self: None
ApiLogStatus_swigregister = _WMX3ApiPython.ApiLogStatus_swigregister
ApiLogStatus_swigregister(ApiLogStatus)

class Log(_object):
    """Log.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Log.rtdll Ver.3.5.0.0 is required to use.
        Log.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Log
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.Log_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.Log_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.Log_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.Log_ApiLogToString
    if _newclass:
        TimestampToString = staticmethod(_WMX3ApiPython.Log_TimestampToString)
    else:
        TimestampToString = _WMX3ApiPython.Log_TimestampToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.Log_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.Log_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.Log_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Log_GetVersion(self)

    def StartLog(self, channel):
        return _WMX3ApiPython.Log_StartLog(self, channel)

    def StopLog(self, channel):
        return _WMX3ApiPython.Log_StopLog(self, channel)

    def ResetLog(self, channel):
        return _WMX3ApiPython.Log_ResetLog(self, channel)

    def SetLogHeader(self, channel, pLogHeader):
        return _WMX3ApiPython.Log_SetLogHeader(self, channel, pLogHeader)

    def SetCustomLog(self, channel, input):
        return _WMX3ApiPython.Log_SetCustomLog(self, channel, input)

    def SetLogOption(self, channel, pOption):
        return _WMX3ApiPython.Log_SetLogOption(self, channel, pOption)

    def GetLogOption(self, channel):
        dataPtr = LogChannelOptions()
        ret = _WMX3ApiPython.Log_GetLogOption(self, channel, dataPtr)
        return ret, dataPtr



    def SetLogFilePath(self, channel, pPath):
        return _WMX3ApiPython.Log_SetLogFilePath(self, channel, pPath)

    def GetLogFilePath(self, channel):
        dataPtr = LogFilePath()
        ret = _WMX3ApiPython.Log_GetLogFilePath(self, channel, dataPtr)
        return ret, dataPtr



    def GetLogStatus(self, channel):
        dataPtr = LogStatus()
        ret = _WMX3ApiPython.Log_GetLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def GetDetailLogStatus(self, channel):
        dataPtr = DetailLogStatus()
        ret = _WMX3ApiPython.Log_GetDetailLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def SetLog(self, *args):
        return _WMX3ApiPython.Log_SetLog(self, *args)

    def SetIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize):
        return _WMX3ApiPython.Log_SetIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)

    def SetIOLogFormat(self, channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount):
        return _WMX3ApiPython.Log_SetIOLogFormat(self, channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)

    def SetMLog(self, channel, pMAddress, size):
        return _WMX3ApiPython.Log_SetMLog(self, channel, pMAddress, size)

    def SetMLogFormat(self, channel, pMLogFormat, mFormatCount):
        return _WMX3ApiPython.Log_SetMLogFormat(self, channel, pMLogFormat, mFormatCount)

    def OpenMemoryLogBuffer(self, channel):
        return _WMX3ApiPython.Log_OpenMemoryLogBuffer(self, channel)

    def CloseMemoryLogBuffer(self, channel):
        return _WMX3ApiPython.Log_CloseMemoryLogBuffer(self, channel)

    def SetMemoryLog_LogInput(self, channel, input):
        return _WMX3ApiPython.Log_SetMemoryLog_LogInput(self, channel, input)

    def SetMemoryLogOption(self, channel, pOption):
        return _WMX3ApiPython.Log_SetMemoryLogOption(self, channel, pOption)

    def GetMemoryLogOption(self, channel):
        dataPtr = MemoryLogOptions()
        ret = _WMX3ApiPython.Log_GetMemoryLogOption(self, channel, dataPtr)
        return ret, dataPtr



    def StartMemoryLog(self, channel):
        return _WMX3ApiPython.Log_StartMemoryLog(self, channel)

    def StopMemoryLog(self, channel):
        return _WMX3ApiPython.Log_StopMemoryLog(self, channel)

    def ResetMemoryLog(self, channel):
        return _WMX3ApiPython.Log_ResetMemoryLog(self, channel)

    def GetMemoryLogStatus(self, channel):
        dataPtr = MemoryLogStatus()
        ret = _WMX3ApiPython.Log_GetMemoryLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def GetMemoryLogData_LogOutput(self, channel, pOutput):
        return _WMX3ApiPython.Log_GetMemoryLogData_LogOutput(self, channel, pOutput)

    def GetMemoryLogData_LogOutputs(self, channel, pOutputs):
        return _WMX3ApiPython.Log_GetMemoryLogData_LogOutputs(self, channel, pOutputs)

    def SetMemoryLog(self, channel, pAxisSelection, pOption):
        return _WMX3ApiPython.Log_SetMemoryLog(self, channel, pAxisSelection, pOption)

    def SetMemoryIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize):
        return _WMX3ApiPython.Log_SetMemoryIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)

    def SetMemoryMLog(self, channel, pMAddress, size):
        return _WMX3ApiPython.Log_SetMemoryMLog(self, channel, pMAddress, size)

    def GetMemoryLogData(self, channel):
        dataPtr = MemoryLogData()
        ret = _WMX3ApiPython.Log_GetMemoryLogData(self, channel, dataPtr)
        return ret, dataPtr



    def SetApiLog(self, *args):
        return _WMX3ApiPython.Log_SetApiLog(self, *args)

    def StartApiLog(self):
        return _WMX3ApiPython.Log_StartApiLog(self)

    def StopApiLog(self):
        return _WMX3ApiPython.Log_StopApiLog(self)

    def GetApiLogStatus(self):
        pStatus = ApiLogStatus()
        ret = _WMX3ApiPython.Log_GetApiLogStatus(self, pStatus)
        return ret, pStatus



    def OpenApiLogFile(self, pPath):
        return _WMX3ApiPython.Log_OpenApiLogFile(self, pPath)

    def GetApiLogData(self, pFile, buffSize) :
        dataList = []
        pDataBuff = intArray(buffSize)
        ret = _WMX3ApiPython.Log_GetApiLogData(self, pFile, pDataBuff, buffSize)
        if ret == 0:
            for i in range(buffSize):
                dataList.append(pDataBuff[i])
            return ret, dataList
        else:
            return ret, []



    def GetApiLogData_ApiLogInfo(self, pFile, buffSize):
        dataList = []
        pDataBuff = intArray(buffSize)
        pApiLogInfo = ApiLogInfo()

        ret = _WMX3ApiPython.Log_GetApiLogData_ApiLogInfo(self, pFile, pDataBuff, buffSize, pApiLogInfo)

        if ret == 0:
            for i in range(buffSize):
                dataList.append(pDataBuff[i])
            return ret, dataList, pApiLogInfo
        else:
            return ret, [], pApiLogInfo



    def CloseApiLogFile(self, pFile):
        ret = _WMX3ApiPython.Log_CloseApiLogFile(self, pFile)
        pFile.close()
        return ret


Log_swigregister = _WMX3ApiPython.Log_swigregister
Log_swigregister(Log)

def Log_ErrorToString(errCode):
    return _WMX3ApiPython.Log_ErrorToString(errCode)
Log_ErrorToString = _WMX3ApiPython.Log_ErrorToString

def Log_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.Log_ApiLogToString(pLogData, logDataSize)
Log_ApiLogToString = _WMX3ApiPython.Log_ApiLogToString

def Log_TimestampToString(timestamp):
    return _WMX3ApiPython.Log_TimestampToString(timestamp)
Log_TimestampToString = _WMX3ApiPython.Log_TimestampToString

def Log_GetLibVersion():
    return _WMX3ApiPython.Log_GetLibVersion()
Log_GetLibVersion = _WMX3ApiPython.Log_GetLibVersion

class ApiBufferErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferErrorCode, name)
    __repr__ = _swig_repr
    OverMaxLevel = _WMX3ApiPython.ApiBufferErrorCode_OverMaxLevel
    InvalidLevel = _WMX3ApiPython.ApiBufferErrorCode_InvalidLevel
    InvalidBuffControl = _WMX3ApiPython.ApiBufferErrorCode_InvalidBuffControl
    InvalidWatchTriggerRoutineChannel = _WMX3ApiPython.ApiBufferErrorCode_InvalidWatchTriggerRoutineChannel
    WatchTriggerRoutineChannelSameAsExecChannel = _WMX3ApiPython.ApiBufferErrorCode_WatchTriggerRoutineChannelSameAsExecChannel
    RewindFailedFirstCommandOverwritten = _WMX3ApiPython.ApiBufferErrorCode_RewindFailedFirstCommandOverwritten
    AleadyRecordingForSpecifiedChannel = _WMX3ApiPython.ApiBufferErrorCode_AleadyRecordingForSpecifiedChannel
    NotRecording = _WMX3ApiPython.ApiBufferErrorCode_NotRecording

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferErrorCode
    __del__ = lambda self: None
ApiBufferErrorCode_swigregister = _WMX3ApiPython.ApiBufferErrorCode_swigregister
ApiBufferErrorCode_swigregister(ApiBufferErrorCode)

class ApiBufferConditionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionType, name)
    __repr__ = _swig_repr
    NeverTrue = _WMX3ApiPython.ApiBufferConditionType_NeverTrue
    AlwaysTrue = _WMX3ApiPython.ApiBufferConditionType_AlwaysTrue
    IOInput = _WMX3ApiPython.ApiBufferConditionType_IOInput
    IOOutput = _WMX3ApiPython.ApiBufferConditionType_IOOutput
    UserMemory = _WMX3ApiPython.ApiBufferConditionType_UserMemory
    Event = _WMX3ApiPython.ApiBufferConditionType_Event
    MinimumTrq = _WMX3ApiPython.ApiBufferConditionType_MinimumTrq
    OpState = _WMX3ApiPython.ApiBufferConditionType_OpState
    AxisCmdMode = _WMX3ApiPython.ApiBufferConditionType_AxisCmdMode
    InPos = _WMX3ApiPython.ApiBufferConditionType_InPos
    PosSET = _WMX3ApiPython.ApiBufferConditionType_PosSET
    DelayedPosSET = _WMX3ApiPython.ApiBufferConditionType_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.ApiBufferConditionType_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.ApiBufferConditionType_RemainingTime
    RemainingDistance = _WMX3ApiPython.ApiBufferConditionType_RemainingDistance
    CompletedTime = _WMX3ApiPython.ApiBufferConditionType_CompletedTime
    CompletedDistance = _WMX3ApiPython.ApiBufferConditionType_CompletedDistance
    DecelerationStarted = _WMX3ApiPython.ApiBufferConditionType_DecelerationStarted
    DistanceToTarget = _WMX3ApiPython.ApiBufferConditionType_DistanceToTarget
    AxisIdle = _WMX3ApiPython.ApiBufferConditionType_AxisIdle
    MotionStarted = _WMX3ApiPython.ApiBufferConditionType_MotionStarted
    MotionStartedOverrideReady = _WMX3ApiPython.ApiBufferConditionType_MotionStartedOverrideReady

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionType
    __del__ = lambda self: None
ApiBufferConditionType_swigregister = _WMX3ApiPython.ApiBufferConditionType_swigregister
ApiBufferConditionType_swigregister(ApiBufferConditionType)

class ApiBufferState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.ApiBufferState_Idle
    Active = _WMX3ApiPython.ApiBufferState_Active
    Stop = _WMX3ApiPython.ApiBufferState_Stop
    Delay = _WMX3ApiPython.ApiBufferState_Delay

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferState
    __del__ = lambda self: None
ApiBufferState_swigregister = _WMX3ApiPython.ApiBufferState_swigregister
ApiBufferState_swigregister(ApiBufferState)

class ApiBufferConditionArguments_NeverTrue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_NeverTrue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_NeverTrue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_get, _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_NeverTrue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_NeverTrue
    __del__ = lambda self: None
ApiBufferConditionArguments_NeverTrue_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_swigregister
ApiBufferConditionArguments_NeverTrue_swigregister(ApiBufferConditionArguments_NeverTrue)

class ApiBufferConditionArguments_AlwaysTrue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_AlwaysTrue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_AlwaysTrue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_get, _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_AlwaysTrue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AlwaysTrue
    __del__ = lambda self: None
ApiBufferConditionArguments_AlwaysTrue_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_swigregister
ApiBufferConditionArguments_AlwaysTrue_swigregister(ApiBufferConditionArguments_AlwaysTrue)

class ApiBufferConditionArguments_IOInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_IOInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_IOInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_IOInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_IOInput
    __del__ = lambda self: None
ApiBufferConditionArguments_IOInput_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_IOInput_swigregister
ApiBufferConditionArguments_IOInput_swigregister(ApiBufferConditionArguments_IOInput)

class ApiBufferConditionArguments_IOOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_IOOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_IOOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_IOOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_IOOutput
    __del__ = lambda self: None
ApiBufferConditionArguments_IOOutput_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_swigregister
ApiBufferConditionArguments_IOOutput_swigregister(ApiBufferConditionArguments_IOOutput)

class ApiBufferConditionArguments_UserMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_UserMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_UserMemory, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_UserMemory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_UserMemory
    __del__ = lambda self: None
ApiBufferConditionArguments_UserMemory_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_swigregister
ApiBufferConditionArguments_UserMemory_swigregister(ApiBufferConditionArguments_UserMemory)

class ApiBufferConditionArguments_MinimumTrq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_MinimumTrq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_MinimumTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_set)
    __swig_setmethods__["torque"] = _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_set
    __swig_getmethods__["torque"] = _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_get
    if _newclass:
        torque = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_get, _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_MinimumTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MinimumTrq
    __del__ = lambda self: None
ApiBufferConditionArguments_MinimumTrq_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_swigregister
ApiBufferConditionArguments_MinimumTrq_swigregister(ApiBufferConditionArguments_MinimumTrq)

class ApiBufferConditionArguments_OpState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_OpState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_OpState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_get, _WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_OpState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_OpState
    __del__ = lambda self: None
ApiBufferConditionArguments_OpState_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_OpState_swigregister
ApiBufferConditionArguments_OpState_swigregister(ApiBufferConditionArguments_OpState)

class ApiBufferConditionArguments_AxisCmdMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_AxisCmdMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_AxisCmdMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_set)
    __swig_setmethods__["axisCommandMode"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_set
    __swig_getmethods__["axisCommandMode"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_get
    if _newclass:
        axisCommandMode = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_AxisCmdMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AxisCmdMode
    __del__ = lambda self: None
ApiBufferConditionArguments_AxisCmdMode_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_swigregister
ApiBufferConditionArguments_AxisCmdMode_swigregister(ApiBufferConditionArguments_AxisCmdMode)

class ApiBufferConditionArguments_InPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_InPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_InPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_set)
    __swig_setmethods__["channel"] = _WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_get, _WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_InPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_InPos
    __del__ = lambda self: None
ApiBufferConditionArguments_InPos_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_InPos_swigregister
ApiBufferConditionArguments_InPos_swigregister(ApiBufferConditionArguments_InPos)

class ApiBufferConditionArguments_PosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_PosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_PosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_PosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_PosSET
    __del__ = lambda self: None
ApiBufferConditionArguments_PosSET_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_PosSET_swigregister
ApiBufferConditionArguments_PosSET_swigregister(ApiBufferConditionArguments_PosSET)

class ApiBufferConditionArguments_DelayedPosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_DelayedPosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_DelayedPosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_DelayedPosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DelayedPosSET
    __del__ = lambda self: None
ApiBufferConditionArguments_DelayedPosSET_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_swigregister
ApiBufferConditionArguments_DelayedPosSET_swigregister(ApiBufferConditionArguments_DelayedPosSET)

class ApiBufferConditionArguments_CommandDistributedEnd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_CommandDistributedEnd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_CommandDistributedEnd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_CommandDistributedEnd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CommandDistributedEnd
    __del__ = lambda self: None
ApiBufferConditionArguments_CommandDistributedEnd_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_swigregister
ApiBufferConditionArguments_CommandDistributedEnd_swigregister(ApiBufferConditionArguments_CommandDistributedEnd)

class ApiBufferConditionArguments_RemainingTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_RemainingTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_RemainingTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_RemainingTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_RemainingTime
    __del__ = lambda self: None
ApiBufferConditionArguments_RemainingTime_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_swigregister
ApiBufferConditionArguments_RemainingTime_swigregister(ApiBufferConditionArguments_RemainingTime)

class ApiBufferConditionArguments_RemainingDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_RemainingDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_RemainingDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_RemainingDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_RemainingDistance
    __del__ = lambda self: None
ApiBufferConditionArguments_RemainingDistance_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_swigregister
ApiBufferConditionArguments_RemainingDistance_swigregister(ApiBufferConditionArguments_RemainingDistance)

class ApiBufferConditionArguments_CompletedTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_CompletedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_CompletedTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_CompletedTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CompletedTime
    __del__ = lambda self: None
ApiBufferConditionArguments_CompletedTime_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_swigregister
ApiBufferConditionArguments_CompletedTime_swigregister(ApiBufferConditionArguments_CompletedTime)

class ApiBufferConditionArguments_CompletedDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_CompletedDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_CompletedDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_CompletedDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CompletedDistance
    __del__ = lambda self: None
ApiBufferConditionArguments_CompletedDistance_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_swigregister
ApiBufferConditionArguments_CompletedDistance_swigregister(ApiBufferConditionArguments_CompletedDistance)

class ApiBufferConditionArguments_DistanceToTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_DistanceToTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_DistanceToTarget, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_DistanceToTarget()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DistanceToTarget
    __del__ = lambda self: None
ApiBufferConditionArguments_DistanceToTarget_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_swigregister
ApiBufferConditionArguments_DistanceToTarget_swigregister(ApiBufferConditionArguments_DistanceToTarget)

class ApiBufferConditionArguments_DecelerationStarted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_DecelerationStarted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_DecelerationStarted, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_DecelerationStarted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DecelerationStarted
    __del__ = lambda self: None
ApiBufferConditionArguments_DecelerationStarted_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_swigregister
ApiBufferConditionArguments_DecelerationStarted_swigregister(ApiBufferConditionArguments_DecelerationStarted)

class ApiBufferConditionArguments_AxisIdle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_AxisIdle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_AxisIdle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_GetAxis(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_AxisIdle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AxisIdle
    __del__ = lambda self: None
ApiBufferConditionArguments_AxisIdle_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_swigregister
ApiBufferConditionArguments_AxisIdle_swigregister(ApiBufferConditionArguments_AxisIdle)

class ApiBufferConditionArguments_MotionStarted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_MotionStarted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_MotionStarted, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_MotionStarted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MotionStarted
    __del__ = lambda self: None
ApiBufferConditionArguments_MotionStarted_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_swigregister
ApiBufferConditionArguments_MotionStarted_swigregister(ApiBufferConditionArguments_MotionStarted)

class ApiBufferConditionArguments_MotionStartedOverrideReady(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_MotionStartedOverrideReady, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_MotionStartedOverrideReady, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_MotionStartedOverrideReady()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MotionStartedOverrideReady
    __del__ = lambda self: None
ApiBufferConditionArguments_MotionStartedOverrideReady_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_swigregister
ApiBufferConditionArguments_MotionStartedOverrideReady_swigregister(ApiBufferConditionArguments_MotionStartedOverrideReady)

class ApiBufferConditionArguments_Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferConditionArguments_Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferConditionArguments_Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_get, _WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferConditionArguments_Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_Event
    __del__ = lambda self: None
ApiBufferConditionArguments_Event_swigregister = _WMX3ApiPython.ApiBufferConditionArguments_Event_swigregister
ApiBufferConditionArguments_Event_swigregister(ApiBufferConditionArguments_Event)

class ApiBufferCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferCondition, name)
    __repr__ = _swig_repr

    def GetData(self, apiBufferCondition):
        return _WMX3ApiPython.ApiBufferCondition_GetData(self, apiBufferCondition)

    def SetData(self, apiBufferCondition):
        return _WMX3ApiPython.ApiBufferCondition_SetData(self, apiBufferCondition)
    __swig_setmethods__["bufferConditionType"] = _WMX3ApiPython.ApiBufferCondition_bufferConditionType_set
    __swig_getmethods__["bufferConditionType"] = _WMX3ApiPython.ApiBufferCondition_bufferConditionType_get
    if _newclass:
        bufferConditionType = _swig_property(_WMX3ApiPython.ApiBufferCondition_bufferConditionType_get, _WMX3ApiPython.ApiBufferCondition_bufferConditionType_set)
    __swig_setmethods__["arg_neverTrue"] = _WMX3ApiPython.ApiBufferCondition_arg_neverTrue_set
    __swig_getmethods__["arg_neverTrue"] = _WMX3ApiPython.ApiBufferCondition_arg_neverTrue_get
    if _newclass:
        arg_neverTrue = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_neverTrue_get, _WMX3ApiPython.ApiBufferCondition_arg_neverTrue_set)
    __swig_setmethods__["arg_alwaysTrue"] = _WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_set
    __swig_getmethods__["arg_alwaysTrue"] = _WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_get
    if _newclass:
        arg_alwaysTrue = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_get, _WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_set)
    __swig_setmethods__["arg_ioInput"] = _WMX3ApiPython.ApiBufferCondition_arg_ioInput_set
    __swig_getmethods__["arg_ioInput"] = _WMX3ApiPython.ApiBufferCondition_arg_ioInput_get
    if _newclass:
        arg_ioInput = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_ioInput_get, _WMX3ApiPython.ApiBufferCondition_arg_ioInput_set)
    __swig_setmethods__["arg_ioOutput"] = _WMX3ApiPython.ApiBufferCondition_arg_ioOutput_set
    __swig_getmethods__["arg_ioOutput"] = _WMX3ApiPython.ApiBufferCondition_arg_ioOutput_get
    if _newclass:
        arg_ioOutput = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_ioOutput_get, _WMX3ApiPython.ApiBufferCondition_arg_ioOutput_set)
    __swig_setmethods__["arg_userMemory"] = _WMX3ApiPython.ApiBufferCondition_arg_userMemory_set
    __swig_getmethods__["arg_userMemory"] = _WMX3ApiPython.ApiBufferCondition_arg_userMemory_get
    if _newclass:
        arg_userMemory = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_userMemory_get, _WMX3ApiPython.ApiBufferCondition_arg_userMemory_set)
    __swig_setmethods__["arg_minimumTrq"] = _WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_set
    __swig_getmethods__["arg_minimumTrq"] = _WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_get
    if _newclass:
        arg_minimumTrq = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_get, _WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_set)
    __swig_setmethods__["arg_opState"] = _WMX3ApiPython.ApiBufferCondition_arg_opState_set
    __swig_getmethods__["arg_opState"] = _WMX3ApiPython.ApiBufferCondition_arg_opState_get
    if _newclass:
        arg_opState = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_opState_get, _WMX3ApiPython.ApiBufferCondition_arg_opState_set)
    __swig_setmethods__["arg_axisCmdMode"] = _WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_set
    __swig_getmethods__["arg_axisCmdMode"] = _WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_get
    if _newclass:
        arg_axisCmdMode = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_get, _WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_set)
    __swig_setmethods__["arg_inPos"] = _WMX3ApiPython.ApiBufferCondition_arg_inPos_set
    __swig_getmethods__["arg_inPos"] = _WMX3ApiPython.ApiBufferCondition_arg_inPos_get
    if _newclass:
        arg_inPos = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_inPos_get, _WMX3ApiPython.ApiBufferCondition_arg_inPos_set)
    __swig_setmethods__["arg_posSET"] = _WMX3ApiPython.ApiBufferCondition_arg_posSET_set
    __swig_getmethods__["arg_posSET"] = _WMX3ApiPython.ApiBufferCondition_arg_posSET_get
    if _newclass:
        arg_posSET = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_posSET_get, _WMX3ApiPython.ApiBufferCondition_arg_posSET_set)
    __swig_setmethods__["arg_delayedPosSET"] = _WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_set
    __swig_getmethods__["arg_delayedPosSET"] = _WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_get
    if _newclass:
        arg_delayedPosSET = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_get, _WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_set)
    __swig_setmethods__["arg_commandDistributedEnd"] = _WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_set
    __swig_getmethods__["arg_commandDistributedEnd"] = _WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_get
    if _newclass:
        arg_commandDistributedEnd = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_get, _WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_set)
    __swig_setmethods__["arg_remainingTime"] = _WMX3ApiPython.ApiBufferCondition_arg_remainingTime_set
    __swig_getmethods__["arg_remainingTime"] = _WMX3ApiPython.ApiBufferCondition_arg_remainingTime_get
    if _newclass:
        arg_remainingTime = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_remainingTime_get, _WMX3ApiPython.ApiBufferCondition_arg_remainingTime_set)
    __swig_setmethods__["arg_remainingDistance"] = _WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_set
    __swig_getmethods__["arg_remainingDistance"] = _WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_get
    if _newclass:
        arg_remainingDistance = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_get, _WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_set)
    __swig_setmethods__["arg_completedTime"] = _WMX3ApiPython.ApiBufferCondition_arg_completedTime_set
    __swig_getmethods__["arg_completedTime"] = _WMX3ApiPython.ApiBufferCondition_arg_completedTime_get
    if _newclass:
        arg_completedTime = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_completedTime_get, _WMX3ApiPython.ApiBufferCondition_arg_completedTime_set)
    __swig_setmethods__["arg_completedDistance"] = _WMX3ApiPython.ApiBufferCondition_arg_completedDistance_set
    __swig_getmethods__["arg_completedDistance"] = _WMX3ApiPython.ApiBufferCondition_arg_completedDistance_get
    if _newclass:
        arg_completedDistance = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_completedDistance_get, _WMX3ApiPython.ApiBufferCondition_arg_completedDistance_set)
    __swig_setmethods__["arg_distanceToTarget"] = _WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_set
    __swig_getmethods__["arg_distanceToTarget"] = _WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_get
    if _newclass:
        arg_distanceToTarget = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_get, _WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_set)
    __swig_setmethods__["arg_decelerationStarted"] = _WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_set
    __swig_getmethods__["arg_decelerationStarted"] = _WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_get
    if _newclass:
        arg_decelerationStarted = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_get, _WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_set)
    __swig_setmethods__["arg_axisIdle"] = _WMX3ApiPython.ApiBufferCondition_arg_axisIdle_set
    __swig_getmethods__["arg_axisIdle"] = _WMX3ApiPython.ApiBufferCondition_arg_axisIdle_get
    if _newclass:
        arg_axisIdle = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_axisIdle_get, _WMX3ApiPython.ApiBufferCondition_arg_axisIdle_set)
    __swig_setmethods__["arg_motionStarted"] = _WMX3ApiPython.ApiBufferCondition_arg_motionStarted_set
    __swig_getmethods__["arg_motionStarted"] = _WMX3ApiPython.ApiBufferCondition_arg_motionStarted_get
    if _newclass:
        arg_motionStarted = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_motionStarted_get, _WMX3ApiPython.ApiBufferCondition_arg_motionStarted_set)
    __swig_setmethods__["arg_motionStartedOverrideReady"] = _WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_set
    __swig_getmethods__["arg_motionStartedOverrideReady"] = _WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_get
    if _newclass:
        arg_motionStartedOverrideReady = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_get, _WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_set)
    __swig_setmethods__["arg_event"] = _WMX3ApiPython.ApiBufferCondition_arg_event_set
    __swig_getmethods__["arg_event"] = _WMX3ApiPython.ApiBufferCondition_arg_event_get
    if _newclass:
        arg_event = _swig_property(_WMX3ApiPython.ApiBufferCondition_arg_event_get, _WMX3ApiPython.ApiBufferCondition_arg_event_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferCondition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferCondition
    __del__ = lambda self: None
ApiBufferCondition_swigregister = _WMX3ApiPython.ApiBufferCondition_swigregister
ApiBufferCondition_swigregister(ApiBufferCondition)

class ApiBufferErrorLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferErrorLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferErrorLog, name)
    __repr__ = _swig_repr

    def GetData(self, apiBufferErrorLog):
        return _WMX3ApiPython.ApiBufferErrorLog_GetData(self, apiBufferErrorLog)

    def SetData(self, apiBufferErrorLog):
        return _WMX3ApiPython.ApiBufferErrorLog_SetData(self, apiBufferErrorLog)
    __swig_setmethods__["execBlockNumber"] = _WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_set
    __swig_getmethods__["execBlockNumber"] = _WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_get
    if _newclass:
        execBlockNumber = _swig_property(_WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_get, _WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_set)
    __swig_setmethods__["errorCode"] = _WMX3ApiPython.ApiBufferErrorLog_errorCode_set
    __swig_getmethods__["errorCode"] = _WMX3ApiPython.ApiBufferErrorLog_errorCode_get
    if _newclass:
        errorCode = _swig_property(_WMX3ApiPython.ApiBufferErrorLog_errorCode_get, _WMX3ApiPython.ApiBufferErrorLog_errorCode_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferErrorLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferErrorLog
    __del__ = lambda self: None
ApiBufferErrorLog_swigregister = _WMX3ApiPython.ApiBufferErrorLog_swigregister
ApiBufferErrorLog_swigregister(ApiBufferErrorLog)

class ApiBufferStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferStatus, name)
    __repr__ = _swig_repr

    def GetData(self, apiBufferStatus):
        return _WMX3ApiPython.ApiBufferStatus_GetData(self, apiBufferStatus)

    def SetData(self, apiBufferStatus):
        return _WMX3ApiPython.ApiBufferStatus_SetData(self, apiBufferStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.ApiBufferStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.ApiBufferStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.ApiBufferStatus_state_get, _WMX3ApiPython.ApiBufferStatus_state_set)
    __swig_setmethods__["blockCount"] = _WMX3ApiPython.ApiBufferStatus_blockCount_set
    __swig_getmethods__["blockCount"] = _WMX3ApiPython.ApiBufferStatus_blockCount_get
    if _newclass:
        blockCount = _swig_property(_WMX3ApiPython.ApiBufferStatus_blockCount_get, _WMX3ApiPython.ApiBufferStatus_blockCount_set)
    __swig_setmethods__["remainingBlockCount"] = _WMX3ApiPython.ApiBufferStatus_remainingBlockCount_set
    __swig_getmethods__["remainingBlockCount"] = _WMX3ApiPython.ApiBufferStatus_remainingBlockCount_get
    if _newclass:
        remainingBlockCount = _swig_property(_WMX3ApiPython.ApiBufferStatus_remainingBlockCount_get, _WMX3ApiPython.ApiBufferStatus_remainingBlockCount_set)
    __swig_setmethods__["bufferSize"] = _WMX3ApiPython.ApiBufferStatus_bufferSize_set
    __swig_getmethods__["bufferSize"] = _WMX3ApiPython.ApiBufferStatus_bufferSize_get
    if _newclass:
        bufferSize = _swig_property(_WMX3ApiPython.ApiBufferStatus_bufferSize_get, _WMX3ApiPython.ApiBufferStatus_bufferSize_set)
    __swig_setmethods__["freeSize"] = _WMX3ApiPython.ApiBufferStatus_freeSize_set
    __swig_getmethods__["freeSize"] = _WMX3ApiPython.ApiBufferStatus_freeSize_get
    if _newclass:
        freeSize = _swig_property(_WMX3ApiPython.ApiBufferStatus_freeSize_get, _WMX3ApiPython.ApiBufferStatus_freeSize_set)
    __swig_setmethods__["execBlockCount"] = _WMX3ApiPython.ApiBufferStatus_execBlockCount_set
    __swig_getmethods__["execBlockCount"] = _WMX3ApiPython.ApiBufferStatus_execBlockCount_get
    if _newclass:
        execBlockCount = _swig_property(_WMX3ApiPython.ApiBufferStatus_execBlockCount_get, _WMX3ApiPython.ApiBufferStatus_execBlockCount_set)
    __swig_setmethods__["errorCount"] = _WMX3ApiPython.ApiBufferStatus_errorCount_set
    __swig_getmethods__["errorCount"] = _WMX3ApiPython.ApiBufferStatus_errorCount_get
    if _newclass:
        errorCount = _swig_property(_WMX3ApiPython.ApiBufferStatus_errorCount_get, _WMX3ApiPython.ApiBufferStatus_errorCount_set)
    __swig_setmethods__["errorLog"] = _WMX3ApiPython.ApiBufferStatus_errorLog_set
    __swig_getmethods__["errorLog"] = _WMX3ApiPython.ApiBufferStatus_errorLog_get
    if _newclass:
        errorLog = _swig_property(_WMX3ApiPython.ApiBufferStatus_errorLog_get, _WMX3ApiPython.ApiBufferStatus_errorLog_set)

    def SetErrorLog(self, index, value):
        return _WMX3ApiPython.ApiBufferStatus_SetErrorLog(self, index, value)

    def GetErrorLog(self, index):
        return _WMX3ApiPython.ApiBufferStatus_GetErrorLog(self, index)
    __swig_setmethods__["watchError"] = _WMX3ApiPython.ApiBufferStatus_watchError_set
    __swig_getmethods__["watchError"] = _WMX3ApiPython.ApiBufferStatus_watchError_get
    if _newclass:
        watchError = _swig_property(_WMX3ApiPython.ApiBufferStatus_watchError_get, _WMX3ApiPython.ApiBufferStatus_watchError_set)
    __swig_setmethods__["watchErrorCode"] = _WMX3ApiPython.ApiBufferStatus_watchErrorCode_set
    __swig_getmethods__["watchErrorCode"] = _WMX3ApiPython.ApiBufferStatus_watchErrorCode_get
    if _newclass:
        watchErrorCode = _swig_property(_WMX3ApiPython.ApiBufferStatus_watchErrorCode_get, _WMX3ApiPython.ApiBufferStatus_watchErrorCode_set)
    __swig_setmethods__["watchErrorAxis"] = _WMX3ApiPython.ApiBufferStatus_watchErrorAxis_set
    __swig_getmethods__["watchErrorAxis"] = _WMX3ApiPython.ApiBufferStatus_watchErrorAxis_get
    if _newclass:
        watchErrorAxis = _swig_property(_WMX3ApiPython.ApiBufferStatus_watchErrorAxis_get, _WMX3ApiPython.ApiBufferStatus_watchErrorAxis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferStatus
    __del__ = lambda self: None
ApiBufferStatus_swigregister = _WMX3ApiPython.ApiBufferStatus_swigregister
ApiBufferStatus_swigregister(ApiBufferStatus)

class ApiBufferOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferOptions, name)
    __repr__ = _swig_repr

    def GetData(self, apiBufferOptions):
        return _WMX3ApiPython.ApiBufferOptions_GetData(self, apiBufferOptions)

    def SetData(self, apiBufferOptions):
        return _WMX3ApiPython.ApiBufferOptions_SetData(self, apiBufferOptions)
    __swig_setmethods__["stopOnError"] = _WMX3ApiPython.ApiBufferOptions_stopOnError_set
    __swig_getmethods__["stopOnError"] = _WMX3ApiPython.ApiBufferOptions_stopOnError_get
    if _newclass:
        stopOnError = _swig_property(_WMX3ApiPython.ApiBufferOptions_stopOnError_get, _WMX3ApiPython.ApiBufferOptions_stopOnError_set)
    __swig_setmethods__["autoRewind"] = _WMX3ApiPython.ApiBufferOptions_autoRewind_set
    __swig_getmethods__["autoRewind"] = _WMX3ApiPython.ApiBufferOptions_autoRewind_get
    if _newclass:
        autoRewind = _swig_property(_WMX3ApiPython.ApiBufferOptions_autoRewind_get, _WMX3ApiPython.ApiBufferOptions_autoRewind_set)
    __swig_setmethods__["stopOnLastBlock"] = _WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_set
    __swig_getmethods__["stopOnLastBlock"] = _WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_get
    if _newclass:
        stopOnLastBlock = _swig_property(_WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_get, _WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferOptions
    __del__ = lambda self: None
ApiBufferOptions_swigregister = _WMX3ApiPython.ApiBufferOptions_swigregister
ApiBufferOptions_swigregister(ApiBufferOptions)

class ApiBufferWatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferWatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferWatch, name)
    __repr__ = _swig_repr

    def GetData(self, apiBufferWatch):
        return _WMX3ApiPython.ApiBufferWatch_GetData(self, apiBufferWatch)

    def SetData(self, apiBufferWatch):
        return _WMX3ApiPython.ApiBufferWatch_SetData(self, apiBufferWatch)
    __swig_setmethods__["enableWatch"] = _WMX3ApiPython.ApiBufferWatch_enableWatch_set
    __swig_getmethods__["enableWatch"] = _WMX3ApiPython.ApiBufferWatch_enableWatch_get
    if _newclass:
        enableWatch = _swig_property(_WMX3ApiPython.ApiBufferWatch_enableWatch_get, _WMX3ApiPython.ApiBufferWatch_enableWatch_set)
    __swig_setmethods__["watchAxes"] = _WMX3ApiPython.ApiBufferWatch_watchAxes_set
    __swig_getmethods__["watchAxes"] = _WMX3ApiPython.ApiBufferWatch_watchAxes_get
    if _newclass:
        watchAxes = _swig_property(_WMX3ApiPython.ApiBufferWatch_watchAxes_get, _WMX3ApiPython.ApiBufferWatch_watchAxes_set)
    __swig_setmethods__["enableWatchTriggerRoutine"] = _WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_set
    __swig_getmethods__["enableWatchTriggerRoutine"] = _WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_get
    if _newclass:
        enableWatchTriggerRoutine = _swig_property(_WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_get, _WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_set)
    __swig_setmethods__["watchTriggerRoutineChannel"] = _WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_set
    __swig_getmethods__["watchTriggerRoutineChannel"] = _WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_get
    if _newclass:
        watchTriggerRoutineChannel = _swig_property(_WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_get, _WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferWatch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferWatch
    __del__ = lambda self: None
ApiBufferWatch_swigregister = _WMX3ApiPython.ApiBufferWatch_swigregister
ApiBufferWatch_swigregister(ApiBufferWatch)

class ApiBufferEventOutputFunctionArguments_StartAPIBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferEventOutputFunctionArguments_StartAPIBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferEventOutputFunctionArguments_StartAPIBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel"] = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_get, _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferEventOutputFunctionArguments_StartAPIBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputFunctionArguments_StartAPIBuffer
    __del__ = lambda self: None
ApiBufferEventOutputFunctionArguments_StartAPIBuffer_swigregister = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_swigregister
ApiBufferEventOutputFunctionArguments_StartAPIBuffer_swigregister(ApiBufferEventOutputFunctionArguments_StartAPIBuffer)

class ApiBufferEventOutputFunctionArguments_HaltAPIBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferEventOutputFunctionArguments_HaltAPIBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferEventOutputFunctionArguments_HaltAPIBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel"] = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_get, _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferEventOutputFunctionArguments_HaltAPIBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputFunctionArguments_HaltAPIBuffer
    __del__ = lambda self: None
ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_swigregister = _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_swigregister
ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_swigregister(ApiBufferEventOutputFunctionArguments_HaltAPIBuffer)

class ApiBufferEventOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferEventOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferEventOutputType, name)
    __repr__ = _swig_repr
    StartAPIBuffer = _WMX3ApiPython.ApiBufferEventOutputType_StartAPIBuffer
    HaltAPIBuffer = _WMX3ApiPython.ApiBufferEventOutputType_HaltAPIBuffer

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferEventOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputType
    __del__ = lambda self: None
ApiBufferEventOutputType_swigregister = _WMX3ApiPython.ApiBufferEventOutputType_swigregister
ApiBufferEventOutputType_swigregister(ApiBufferEventOutputType)

class ApiBufferEventOutput(EventOutput):
    __swig_setmethods__ = {}
    for _s in [EventOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBufferEventOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBufferEventOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_ApiBufferEventOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _WMX3ApiPython.ApiBufferEventOutput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.ApiBufferEventOutput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.ApiBufferEventOutput_type_get, _WMX3ApiPython.ApiBufferEventOutput_type_set)

    def GetOutputModuleId(self):
        return _WMX3ApiPython.ApiBufferEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.ApiBufferEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.ApiBufferEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_setmethods__["startAPIBuffer"] = _WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_set
    __swig_getmethods__["startAPIBuffer"] = _WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_get
    if _newclass:
        startAPIBuffer = _swig_property(_WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_get, _WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_set)
    __swig_setmethods__["haltAPIBuffer"] = _WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_set
    __swig_getmethods__["haltAPIBuffer"] = _WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_get
    if _newclass:
        haltAPIBuffer = _swig_property(_WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_get, _WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_set)
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutput
    __del__ = lambda self: None
ApiBufferEventOutput_swigregister = _WMX3ApiPython.ApiBufferEventOutput_swigregister
ApiBufferEventOutput_swigregister(ApiBufferEventOutput)

class ApiBuffer(_object):
    """ApiBuffer.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        ApiBuffer.rtdll Ver.3.5.0.0 is required to use.
        ApiBuffer.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_ApiBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBuffer
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.ApiBuffer_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.ApiBuffer_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.ApiBuffer_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.ApiBuffer_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.ApiBuffer_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.ApiBuffer_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.ApiBuffer_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.ApiBuffer_GetVersion(self)

    def CreateApiBuffer(self, *args):
        return _WMX3ApiPython.ApiBuffer_CreateApiBuffer(self, *args)

    def FreeApiBuffer(self, channel):
        return _WMX3ApiPython.ApiBuffer_FreeApiBuffer(self, channel)

    def StartRecordBufferChannel(self, channel):
        return _WMX3ApiPython.ApiBuffer_StartRecordBufferChannel(self, channel)

    def EndRecordBufferChannel(self):
        return _WMX3ApiPython.ApiBuffer_EndRecordBufferChannel(self)

    def GetRecordingBufferChannel(self):
        channel = intp()
        enable = uintp()
        ret = _WMX3ApiPython.ApiBuffer_GetRecordingBufferChannel(self, channel, enable)
        return ret, channel.value(), enable.value()



    def Execute(self, channel):
        return _WMX3ApiPython.ApiBuffer_Execute(self, channel)

    def SetOptions(self, channel, pOptions):
        return _WMX3ApiPython.ApiBuffer_SetOptions(self, channel, pOptions)

    def GetOptions(self, channel):
        pOptions = ApiBufferOptions()
        ret = _WMX3ApiPython.ApiBuffer_GetOptions(self, channel, pOptions)
        return ret, pOptions



    def Halt(self, channel):
        return _WMX3ApiPython.ApiBuffer_Halt(self, channel)

    def Clear(self, channel):
        return _WMX3ApiPython.ApiBuffer_Clear(self, channel)

    def Rewind(self, channel):
        return _WMX3ApiPython.ApiBuffer_Rewind(self, channel)

    def GetStatus(self, channel):
        status = ApiBufferStatus()
        ret = _WMX3ApiPython.ApiBuffer_GetStatus(self, channel, status)
        return ret, status



    def SetWatch(self, channel, pWatch):
        return _WMX3ApiPython.ApiBuffer_SetWatch(self, channel, pWatch)

    def GetWatch(self, channel):
        watch = ApiBufferWatch()
        ret = _WMX3ApiPython.ApiBuffer_GetWatch(self, channel, watch)
        return ret, watch



    def Sleep(self, milliseconds):
        return _WMX3ApiPython.ApiBuffer_Sleep(self, milliseconds)

    def Wait(self, axis):
        return _WMX3ApiPython.ApiBuffer_Wait(self, axis)

    def Wait_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.ApiBuffer_Wait_AxisSel(self, pAxisSelection)

    def Wait_ApiBufferCondition(self, condition):
        return _WMX3ApiPython.ApiBuffer_Wait_ApiBufferCondition(self, condition)

    def FlowIf(self, *args):
        return _WMX3ApiPython.ApiBuffer_FlowIf(self, *args)

    def FlowElseIf(self, condition):
        return _WMX3ApiPython.ApiBuffer_FlowElseIf(self, condition)

    def FlowElse(self):
        return _WMX3ApiPython.ApiBuffer_FlowElse(self)

    def FlowEndIf(self):
        return _WMX3ApiPython.ApiBuffer_FlowEndIf(self)
ApiBuffer_swigregister = _WMX3ApiPython.ApiBuffer_swigregister
ApiBuffer_swigregister(ApiBuffer)

def ApiBuffer_ErrorToString(errCode):
    return _WMX3ApiPython.ApiBuffer_ErrorToString(errCode)
ApiBuffer_ErrorToString = _WMX3ApiPython.ApiBuffer_ErrorToString

def ApiBuffer_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.ApiBuffer_ApiLogToString(pLogData, logDataSize)
ApiBuffer_ApiLogToString = _WMX3ApiPython.ApiBuffer_ApiLogToString

def ApiBuffer_GetLibVersion():
    return _WMX3ApiPython.ApiBuffer_GetLibVersion()
ApiBuffer_GetLibVersion = _WMX3ApiPython.ApiBuffer_GetLibVersion

class CyclicBufferErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferErrorCode, name)
    __repr__ = _swig_repr
    CreateBufferFailed = _WMX3ApiPython.CyclicBufferErrorCode_CreateBufferFailed
    BufferIsNull = _WMX3ApiPython.CyclicBufferErrorCode_BufferIsNull
    OpenBufferError = _WMX3ApiPython.CyclicBufferErrorCode_OpenBufferError
    BufferIsNotOpened = _WMX3ApiPython.CyclicBufferErrorCode_BufferIsNotOpened
    BufferSizeIsNotEnough = _WMX3ApiPython.CyclicBufferErrorCode_BufferSizeIsNotEnough
    LockBufferFailed = _WMX3ApiPython.CyclicBufferErrorCode_LockBufferFailed
    BufferAlreadyOpened = _WMX3ApiPython.CyclicBufferErrorCode_BufferAlreadyOpened

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferErrorCode
    __del__ = lambda self: None
CyclicBufferErrorCode_swigregister = _WMX3ApiPython.CyclicBufferErrorCode_swigregister
CyclicBufferErrorCode_swigregister(CyclicBufferErrorCode)

class CyclicBufferCommandType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferCommandType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferCommandType, name)
    __repr__ = _swig_repr
    AbsolutePos = _WMX3ApiPython.CyclicBufferCommandType_AbsolutePos
    RelativePos = _WMX3ApiPython.CyclicBufferCommandType_RelativePos

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferCommandType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferCommandType
    __del__ = lambda self: None
CyclicBufferCommandType_swigregister = _WMX3ApiPython.CyclicBufferCommandType_swigregister
CyclicBufferCommandType_swigregister(CyclicBufferCommandType)

class CyclicBufferState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferState, name)
    __repr__ = _swig_repr
    Stopped = _WMX3ApiPython.CyclicBufferState_Stopped
    ExecutingCommand = _WMX3ApiPython.CyclicBufferState_ExecutingCommand
    WaitingForCommand = _WMX3ApiPython.CyclicBufferState_WaitingForCommand
    MaxAccError = _WMX3ApiPython.CyclicBufferState_MaxAccError

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferState
    __del__ = lambda self: None
CyclicBufferState_swigregister = _WMX3ApiPython.CyclicBufferState_swigregister
CyclicBufferState_swigregister(CyclicBufferState)

class CyclicBufferSingleAxisCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferSingleAxisCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferSingleAxisCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_type_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_type_set)

    def GetData(self, cyclicBufferSingleAxisCommand):
        return _WMX3ApiPython.CyclicBufferSingleAxisCommand_GetData(self, cyclicBufferSingleAxisCommand)
    __swig_setmethods__["command"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_command_set
    __swig_getmethods__["command"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_command_get
    if _newclass:
        command = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_command_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_command_set)
    __swig_setmethods__["intervalCycles"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_set
    __swig_getmethods__["intervalCycles"] = _WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_get
    if _newclass:
        intervalCycles = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferSingleAxisCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisCommand
    __del__ = lambda self: None
CyclicBufferSingleAxisCommand_swigregister = _WMX3ApiPython.CyclicBufferSingleAxisCommand_swigregister
CyclicBufferSingleAxisCommand_swigregister(CyclicBufferSingleAxisCommand)

class CyclicBufferMultiAxisCommands(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferMultiAxisCommands, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferMultiAxisCommands, name)
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisCommands):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_GetData(self, cyclicBufferMultiAxisCommands)
    __swig_setmethods__["cmd"] = _WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_set
    __swig_getmethods__["cmd"] = _WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_get
    if _newclass:
        cmd = _swig_property(_WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_get, _WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_set)

    def SetCmd(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_SetCmd(self, index, value)

    def GetCmd(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_GetCmd(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferMultiAxisCommands()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisCommands
    __del__ = lambda self: None
CyclicBufferMultiAxisCommands_swigregister = _WMX3ApiPython.CyclicBufferMultiAxisCommands_swigregister
CyclicBufferMultiAxisCommands_swigregister(CyclicBufferMultiAxisCommands)

class CyclicBufferSingleAxisOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferSingleAxisOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferSingleAxisOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxAcc"] = _WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_set
    __swig_getmethods__["maxAcc"] = _WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_get
    if _newclass:
        maxAcc = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_get, _WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_set)

    def GetData(self, cyclicBufferSingleAxisOption):
        return _WMX3ApiPython.CyclicBufferSingleAxisOption_GetData(self, cyclicBufferSingleAxisOption)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferSingleAxisOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisOption
    __del__ = lambda self: None
CyclicBufferSingleAxisOption_swigregister = _WMX3ApiPython.CyclicBufferSingleAxisOption_swigregister
CyclicBufferSingleAxisOption_swigregister(CyclicBufferSingleAxisOption)

class CyclicBufferMultiAxisOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferMultiAxisOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferMultiAxisOption, name)
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisOption):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_GetData(self, cyclicBufferMultiAxisOption)
    __swig_setmethods__["option"] = _WMX3ApiPython.CyclicBufferMultiAxisOption_option_set
    __swig_getmethods__["option"] = _WMX3ApiPython.CyclicBufferMultiAxisOption_option_get
    if _newclass:
        option = _swig_property(_WMX3ApiPython.CyclicBufferMultiAxisOption_option_get, _WMX3ApiPython.CyclicBufferMultiAxisOption_option_set)

    def SetOption(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_SetOption(self, index, value)

    def GetOption(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_GetOption(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferMultiAxisOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisOption
    __del__ = lambda self: None
CyclicBufferMultiAxisOption_swigregister = _WMX3ApiPython.CyclicBufferMultiAxisOption_swigregister
CyclicBufferMultiAxisOption_swigregister(CyclicBufferMultiAxisOption)

class CyclicBufferSingleAxisStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferSingleAxisStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferSingleAxisStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_state_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_state_set)

    def GetData(self, cyclicBufferSingleAxisStatus):
        return _WMX3ApiPython.CyclicBufferSingleAxisStatus_GetData(self, cyclicBufferSingleAxisStatus)

    def SetData(self, cyclicBufferSingleAxisStatus):
        return _WMX3ApiPython.CyclicBufferSingleAxisStatus_SetData(self, cyclicBufferSingleAxisStatus)
    __swig_setmethods__["remainCount"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_set
    __swig_getmethods__["remainCount"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_get
    if _newclass:
        remainCount = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_set)
    __swig_setmethods__["availableCount"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_set
    __swig_getmethods__["availableCount"] = _WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_get
    if _newclass:
        availableCount = _swig_property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferSingleAxisStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisStatus
    __del__ = lambda self: None
CyclicBufferSingleAxisStatus_swigregister = _WMX3ApiPython.CyclicBufferSingleAxisStatus_swigregister
CyclicBufferSingleAxisStatus_swigregister(CyclicBufferSingleAxisStatus)

class CyclicBufferMultiAxisStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBufferMultiAxisStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBufferMultiAxisStatus, name)
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisStatus):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_GetData(self, cyclicBufferMultiAxisStatus)

    def SetData(self, cyclicBufferMultiAxisStatus):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_SetData(self, cyclicBufferMultiAxisStatus)
    __swig_setmethods__["status"] = _WMX3ApiPython.CyclicBufferMultiAxisStatus_status_set
    __swig_getmethods__["status"] = _WMX3ApiPython.CyclicBufferMultiAxisStatus_status_get
    if _newclass:
        status = _swig_property(_WMX3ApiPython.CyclicBufferMultiAxisStatus_status_get, _WMX3ApiPython.CyclicBufferMultiAxisStatus_status_set)

    def SetStatus(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_SetStatus(self, index, value)

    def GetStatus(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_GetStatus(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_CyclicBufferMultiAxisStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisStatus
    __del__ = lambda self: None
CyclicBufferMultiAxisStatus_swigregister = _WMX3ApiPython.CyclicBufferMultiAxisStatus_swigregister
CyclicBufferMultiAxisStatus_swigregister(CyclicBufferMultiAxisStatus)

class CyclicBuffer(_object):
    """CyclicBuffer.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CyclicBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CyclicBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        CyclicBuffer.rtdll Ver.3.5.0.0 is required to use.
        CyclicBuffer.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_CyclicBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBuffer
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.CyclicBuffer_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.CyclicBuffer_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.CyclicBuffer_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.CyclicBuffer_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.CyclicBuffer_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.CyclicBuffer_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.CyclicBuffer_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.CyclicBuffer_GetVersion(self)

    def OpenCyclicBuffer(self, axis, numOfCycles):
        return _WMX3ApiPython.CyclicBuffer_OpenCyclicBuffer(self, axis, numOfCycles)

    def OpenCyclicBuffer_AxisSel(self, pAxisSelection, numOfCycles):
        return _WMX3ApiPython.CyclicBuffer_OpenCyclicBuffer_AxisSel(self, pAxisSelection, numOfCycles)

    def CloseCyclicBuffer(self, axis):
        return _WMX3ApiPython.CyclicBuffer_CloseCyclicBuffer(self, axis)

    def CloseCyclicBuffer_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CyclicBuffer_CloseCyclicBuffer_AxisSel(self, pAxisSelection)

    def AddCommand(self, *args):
        return _WMX3ApiPython.CyclicBuffer_AddCommand(self, *args)

    def AddCommand_AxisSel(self, *args):
        return _WMX3ApiPython.CyclicBuffer_AddCommand_AxisSel(self, *args)

    def Execute(self, *args):
        return _WMX3ApiPython.CyclicBuffer_Execute(self, *args)

    def Execute_AxisSel(self, *args):
        return _WMX3ApiPython.CyclicBuffer_Execute_AxisSel(self, *args)

    def Abort(self, axis):
        return _WMX3ApiPython.CyclicBuffer_Abort(self, axis)

    def Abort_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CyclicBuffer_Abort_AxisSel(self, pAxisSelection)

    def GetStatus(self, axis):
        GetPtr = CyclicBufferSingleAxisStatus()
        ret = _WMX3ApiPython.CyclicBuffer_GetStatus(self, axis, GetPtr)
        return ret, GetPtr



    def GetStatus_AxisSel(self, pAxisSelection):
        GetPtr = CyclicBufferMultiAxisStatus()
        ret = _WMX3ApiPython.CyclicBuffer_GetStatus_AxisSel(self, pAxisSelection, GetPtr)
        return ret, GetPtr


CyclicBuffer_swigregister = _WMX3ApiPython.CyclicBuffer_swigregister
CyclicBuffer_swigregister(CyclicBuffer)

def CyclicBuffer_ErrorToString(errCode):
    return _WMX3ApiPython.CyclicBuffer_ErrorToString(errCode)
CyclicBuffer_ErrorToString = _WMX3ApiPython.CyclicBuffer_ErrorToString

def CyclicBuffer_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.CyclicBuffer_ApiLogToString(pLogData, logDataSize)
CyclicBuffer_ApiLogToString = _WMX3ApiPython.CyclicBuffer_ApiLogToString

def CyclicBuffer_GetLibVersion():
    return _WMX3ApiPython.CyclicBuffer_GetLibVersion()
CyclicBuffer_GetLibVersion = _WMX3ApiPython.CyclicBuffer_GetLibVersion

class CompensationErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompensationErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompensationErrorCode, name)
    __repr__ = _swig_repr
    PitchErrorCompensationIsEnabled = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationIsEnabled
    PitchErrorCompensationIsDisabled = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationIsDisabled
    PitchErrorCompensationDataIsNotSet = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationDataIsNotSet
    BacklashCompensationIsEnabled = _WMX3ApiPython.CompensationErrorCode_BacklashCompensationIsEnabled
    BacklashCompensationIsDisabled = _WMX3ApiPython.CompensationErrorCode_BacklashCompensationIsDisabled
    PitchCountOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchCountOutOfRange
    PitchOriginIndexOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchOriginIndexOutOfRange
    PitchIntervalOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchIntervalOutOfRange
    EdgeDropoffDistanceOutOfRange = _WMX3ApiPython.CompensationErrorCode_EdgeDropoffDistanceOutOfRange
    CompensationAxisNotPosMode = _WMX3ApiPython.CompensationErrorCode_CompensationAxisNotPosMode
    ReferenceAxisNotPosMode = _WMX3ApiPython.CompensationErrorCode_ReferenceAxisNotPosMode
    NotUsingPitchIntervalMode = _WMX3ApiPython.CompensationErrorCode_NotUsingPitchIntervalMode
    NotUsingFreePositionMode = _WMX3ApiPython.CompensationErrorCode_NotUsingFreePositionMode
    PitchPositionRangeTooLarge = _WMX3ApiPython.CompensationErrorCode_PitchPositionRangeTooLarge
    PitchPositionNotInAscendingOrder = _WMX3ApiPython.CompensationErrorCode_PitchPositionNotInAscendingOrder

    def __init__(self):
        this = _WMX3ApiPython.new_CompensationErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CompensationErrorCode
    __del__ = lambda self: None
CompensationErrorCode_swigregister = _WMX3ApiPython.CompensationErrorCode_swigregister
CompensationErrorCode_swigregister(CompensationErrorCode)

class PitchErrorCompensationOriginPositionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PitchErrorCompensationOriginPositionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PitchErrorCompensationOriginPositionType, name)
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.PitchErrorCompensationOriginPositionType_Absolute
    Relative = _WMX3ApiPython.PitchErrorCompensationOriginPositionType_Relative

    def __init__(self):
        this = _WMX3ApiPython.new_PitchErrorCompensationOriginPositionType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationOriginPositionType
    __del__ = lambda self: None
PitchErrorCompensationOriginPositionType_swigregister = _WMX3ApiPython.PitchErrorCompensationOriginPositionType_swigregister
PitchErrorCompensationOriginPositionType_swigregister(PitchErrorCompensationOriginPositionType)

class PitchErrorCompensationAlignmentType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PitchErrorCompensationAlignmentType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PitchErrorCompensationAlignmentType, name)
    __repr__ = _swig_repr
    AlignBeforeCompensation = _WMX3ApiPython.PitchErrorCompensationAlignmentType_AlignBeforeCompensation

    def __init__(self):
        this = _WMX3ApiPython.new_PitchErrorCompensationAlignmentType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationAlignmentType
    __del__ = lambda self: None
PitchErrorCompensationAlignmentType_swigregister = _WMX3ApiPython.PitchErrorCompensationAlignmentType_swigregister
PitchErrorCompensationAlignmentType_swigregister(PitchErrorCompensationAlignmentType)

class PitchErrorCompensationOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PitchErrorCompensationOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PitchErrorCompensationOptions, name)
    __repr__ = _swig_repr

    def GetData(self, pitchErrorCompensationOptions):
        return _WMX3ApiPython.PitchErrorCompensationOptions_GetData(self, pitchErrorCompensationOptions)

    def SetData(self, pitchErrorCompensationOptions):
        return _WMX3ApiPython.PitchErrorCompensationOptions_SetData(self, pitchErrorCompensationOptions)
    __swig_setmethods__["catchUpVelocity"] = _WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_set
    __swig_getmethods__["catchUpVelocity"] = _WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_get
    if _newclass:
        catchUpVelocity = _swig_property(_WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_get, _WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_set)
    __swig_setmethods__["catchUpAcc"] = _WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_set
    __swig_getmethods__["catchUpAcc"] = _WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_get
    if _newclass:
        catchUpAcc = _swig_property(_WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_get, _WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_set)
    __swig_setmethods__["originPositionType"] = _WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_set
    __swig_getmethods__["originPositionType"] = _WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_get
    if _newclass:
        originPositionType = _swig_property(_WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_get, _WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_set)
    __swig_setmethods__["alignmentType"] = _WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_set
    __swig_getmethods__["alignmentType"] = _WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_get
    if _newclass:
        alignmentType = _swig_property(_WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_get, _WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_set)
    __swig_setmethods__["preventCatchUpMotion"] = _WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_set
    __swig_getmethods__["preventCatchUpMotion"] = _WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_get
    if _newclass:
        preventCatchUpMotion = _swig_property(_WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_get, _WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_set)

    def __init__(self):
        this = _WMX3ApiPython.new_PitchErrorCompensationOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationOptions
    __del__ = lambda self: None
PitchErrorCompensationOptions_swigregister = _WMX3ApiPython.PitchErrorCompensationOptions_swigregister
PitchErrorCompensationOptions_swigregister(PitchErrorCompensationOptions)

class PitchErrorCompensationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PitchErrorCompensationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PitchErrorCompensationData, name)
    __repr__ = _swig_repr

    def GetData(self, pitchErrorCompensationData):
        return _WMX3ApiPython.PitchErrorCompensationData_GetData(self, pitchErrorCompensationData)

    def SetData(self, pitchErrorCompensationData):
        return _WMX3ApiPython.PitchErrorCompensationData_SetData(self, pitchErrorCompensationData)
    __swig_setmethods__["enable"] = _WMX3ApiPython.PitchErrorCompensationData_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.PitchErrorCompensationData_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_enable_get, _WMX3ApiPython.PitchErrorCompensationData_enable_set)
    __swig_setmethods__["pitchOriginPosition"] = _WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_set
    __swig_getmethods__["pitchOriginPosition"] = _WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_get
    if _newclass:
        pitchOriginPosition = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_get, _WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_set)
    __swig_setmethods__["pitchOriginIndex"] = _WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_set
    __swig_getmethods__["pitchOriginIndex"] = _WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_get
    if _newclass:
        pitchOriginIndex = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_get, _WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_set)
    __swig_setmethods__["pitchInterval"] = _WMX3ApiPython.PitchErrorCompensationData_pitchInterval_set
    __swig_getmethods__["pitchInterval"] = _WMX3ApiPython.PitchErrorCompensationData_pitchInterval_get
    if _newclass:
        pitchInterval = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchInterval_get, _WMX3ApiPython.PitchErrorCompensationData_pitchInterval_set)
    __swig_setmethods__["pitchIntervalDirection"] = _WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_set
    __swig_getmethods__["pitchIntervalDirection"] = _WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_get
    if _newclass:
        pitchIntervalDirection = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_get, _WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_set)
    __swig_setmethods__["pitchCount"] = _WMX3ApiPython.PitchErrorCompensationData_pitchCount_set
    __swig_getmethods__["pitchCount"] = _WMX3ApiPython.PitchErrorCompensationData_pitchCount_get
    if _newclass:
        pitchCount = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchCount_get, _WMX3ApiPython.PitchErrorCompensationData_pitchCount_set)
    __swig_setmethods__["edgeDropoffDistance"] = _WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_set
    __swig_getmethods__["edgeDropoffDistance"] = _WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_get
    if _newclass:
        edgeDropoffDistance = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_get, _WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_set)
    __swig_setmethods__["pitchCompensationValue"] = _WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_set
    __swig_getmethods__["pitchCompensationValue"] = _WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_get
    if _newclass:
        pitchCompensationValue = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_get, _WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index, value):
        return _WMX3ApiPython.PitchErrorCompensationData_SetPitchCompensationValue(self, index, value)

    def GetPitchCompensationValue(self, index):
        return _WMX3ApiPython.PitchErrorCompensationData_GetPitchCompensationValue(self, index)
    __swig_setmethods__["options"] = _WMX3ApiPython.PitchErrorCompensationData_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.PitchErrorCompensationData_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.PitchErrorCompensationData_options_get, _WMX3ApiPython.PitchErrorCompensationData_options_set)

    def __init__(self):
        this = _WMX3ApiPython.new_PitchErrorCompensationData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationData
    __del__ = lambda self: None
PitchErrorCompensationData_swigregister = _WMX3ApiPython.PitchErrorCompensationData_swigregister
PitchErrorCompensationData_swigregister(PitchErrorCompensationData)

class PitchErrorCompensationFreePositionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PitchErrorCompensationFreePositionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PitchErrorCompensationFreePositionData, name)
    __repr__ = _swig_repr

    def GetData(self, pitchErrorCompensationFreePositionData):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_GetData(self, pitchErrorCompensationFreePositionData)

    def SetData(self, pitchErrorCompensationFreePositionData):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_SetData(self, pitchErrorCompensationFreePositionData)
    __swig_setmethods__["enable"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_enable_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_enable_set)
    __swig_setmethods__["pitchPosition"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchPosition_set
    __swig_getmethods__["pitchPosition"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchPosition_get
    if _newclass:
        pitchPosition = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchPosition_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchPosition_set)

    def SetPitchPosition(self, index, value):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_SetPitchPosition(self, index, value)

    def GetPitchPosition(self, index):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_GetPitchPosition(self, index)
    __swig_setmethods__["pitchCount"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCount_set
    __swig_getmethods__["pitchCount"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCount_get
    if _newclass:
        pitchCount = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCount_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCount_set)
    __swig_setmethods__["pitchCompensationValue"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCompensationValue_set
    __swig_getmethods__["pitchCompensationValue"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCompensationValue_get
    if _newclass:
        pitchCompensationValue = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCompensationValue_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index, value):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_SetPitchCompensationValue(self, index, value)

    def GetPitchCompensationValue(self, index):
        return _WMX3ApiPython.PitchErrorCompensationFreePositionData_GetPitchCompensationValue(self, index)
    __swig_setmethods__["edgeDropoffDistance"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_edgeDropoffDistance_set
    __swig_getmethods__["edgeDropoffDistance"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_edgeDropoffDistance_get
    if _newclass:
        edgeDropoffDistance = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_edgeDropoffDistance_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_edgeDropoffDistance_set)
    __swig_setmethods__["options"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.PitchErrorCompensationFreePositionData_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.PitchErrorCompensationFreePositionData_options_get, _WMX3ApiPython.PitchErrorCompensationFreePositionData_options_set)

    def __init__(self):
        this = _WMX3ApiPython.new_PitchErrorCompensationFreePositionData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationFreePositionData
    __del__ = lambda self: None
PitchErrorCompensationFreePositionData_swigregister = _WMX3ApiPython.PitchErrorCompensationFreePositionData_swigregister
PitchErrorCompensationFreePositionData_swigregister(PitchErrorCompensationFreePositionData)

class TwoDPitchErrorCompensationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoDPitchErrorCompensationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoDPitchErrorCompensationData, name)
    __repr__ = _swig_repr

    def GetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetData(self, twoDPitchErrorCompensationData)

    def SetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetData(self, twoDPitchErrorCompensationData)
    __swig_setmethods__["enable"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_enable_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_enable_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_axis_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_axis_set)
    __swig_setmethods__["referenceAxis"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_set
    __swig_getmethods__["referenceAxis"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_get
    if _newclass:
        referenceAxis = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_set)

    def SetReferenceAxis(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetReferenceAxis(self, index, value)

    def GetReferenceAxis(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetReferenceAxis(self, index)
    __swig_setmethods__["pitchOriginPosition"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_set
    __swig_getmethods__["pitchOriginPosition"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_get
    if _newclass:
        pitchOriginPosition = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_set)

    def SetPitchOriginPosition(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchOriginPosition(self, index, value)

    def GetPitchOriginPosition(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchOriginPosition(self, index)
    __swig_setmethods__["pitchOriginIndex"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_set
    __swig_getmethods__["pitchOriginIndex"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_get
    if _newclass:
        pitchOriginIndex = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_set)

    def SetPitchOriginIndex(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchOriginIndex(self, index, value)

    def GetPitchOriginIndex(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchOriginIndex(self, index)
    __swig_setmethods__["pitchInterval"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_set
    __swig_getmethods__["pitchInterval"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_get
    if _newclass:
        pitchInterval = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_set)

    def SetPitchInterval(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchInterval(self, index, value)

    def GetPitchInterval(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchInterval(self, index)
    __swig_setmethods__["pitchCount"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_set
    __swig_getmethods__["pitchCount"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_get
    if _newclass:
        pitchCount = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_set)

    def SetPitchCount(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchCount(self, index, value)

    def GetPitchCount(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchCount(self, index)
    __swig_setmethods__["edgeDropoffDistance"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_set
    __swig_getmethods__["edgeDropoffDistance"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_get
    if _newclass:
        edgeDropoffDistance = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_set)

    def SetEdgeDropoffDistance(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetEdgeDropoffDistance(self, index, value)

    def GetEdgeDropoffDistance(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetEdgeDropoffDistance(self, index)
    __swig_setmethods__["pitchCompensationValue"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_set
    __swig_getmethods__["pitchCompensationValue"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_get
    if _newclass:
        pitchCompensationValue = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index1, index2, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchCompensationValue(self, index1, index2, value)

    def GetPitchCompensationValue(self, index1, index2):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchCompensationValue(self, index1, index2)
    __swig_setmethods__["options"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.TwoDPitchErrorCompensationData_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationData_options_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_options_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TwoDPitchErrorCompensationData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TwoDPitchErrorCompensationData
    __del__ = lambda self: None
TwoDPitchErrorCompensationData_swigregister = _WMX3ApiPython.TwoDPitchErrorCompensationData_swigregister
TwoDPitchErrorCompensationData_swigregister(TwoDPitchErrorCompensationData)

class TwoDPitchErrorCompensationFreePositionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoDPitchErrorCompensationFreePositionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoDPitchErrorCompensationFreePositionData, name)
    __repr__ = _swig_repr

    def GetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetData(self, twoDPitchErrorCompensationData)

    def SetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetData(self, twoDPitchErrorCompensationData)
    __swig_setmethods__["enable"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_enable_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_enable_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_axis_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_axis_set)
    __swig_setmethods__["referenceAxis"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_referenceAxis_set
    __swig_getmethods__["referenceAxis"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_referenceAxis_get
    if _newclass:
        referenceAxis = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_referenceAxis_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_referenceAxis_set)

    def SetReferenceAxis(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetReferenceAxis(self, index, value)

    def GetReferenceAxis(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetReferenceAxis(self, index)
    __swig_setmethods__["pitchPosition"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchPosition_set
    __swig_getmethods__["pitchPosition"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchPosition_get
    if _newclass:
        pitchPosition = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchPosition_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchPosition_set)

    def SetPitchPosition(self, index1, index2, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetPitchPosition(self, index1, index2, value)

    def GetPitchPosition(self, index1, index2):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetPitchPosition(self, index1, index2)
    __swig_setmethods__["pitchCount"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCount_set
    __swig_getmethods__["pitchCount"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCount_get
    if _newclass:
        pitchCount = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCount_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCount_set)

    def SetPitchCount(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetPitchCount(self, index, value)

    def GetPitchCount(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetPitchCount(self, index)
    __swig_setmethods__["edgeDropoffDistance"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_edgeDropoffDistance_set
    __swig_getmethods__["edgeDropoffDistance"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_edgeDropoffDistance_get
    if _newclass:
        edgeDropoffDistance = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_edgeDropoffDistance_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_edgeDropoffDistance_set)

    def SetEdgeDropoffDistance(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetEdgeDropoffDistance(self, index, value)

    def GetEdgeDropoffDistance(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetEdgeDropoffDistance(self, index)
    __swig_setmethods__["pitchCompensationValue"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCompensationValue_set
    __swig_getmethods__["pitchCompensationValue"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCompensationValue_get
    if _newclass:
        pitchCompensationValue = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCompensationValue_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index1, index2, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_SetPitchCompensationValue(self, index1, index2, value)

    def GetPitchCompensationValue(self, index1, index2):
        return _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_GetPitchCompensationValue(self, index1, index2)
    __swig_setmethods__["options"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_options_get, _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_options_set)

    def __init__(self):
        this = _WMX3ApiPython.new_TwoDPitchErrorCompensationFreePositionData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_TwoDPitchErrorCompensationFreePositionData
    __del__ = lambda self: None
TwoDPitchErrorCompensationFreePositionData_swigregister = _WMX3ApiPython.TwoDPitchErrorCompensationFreePositionData_swigregister
TwoDPitchErrorCompensationFreePositionData_swigregister(TwoDPitchErrorCompensationFreePositionData)

class BacklashCompensationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BacklashCompensationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BacklashCompensationData, name)
    __repr__ = _swig_repr

    def GetData(self, backlashCompensationData):
        return _WMX3ApiPython.BacklashCompensationData_GetData(self, backlashCompensationData)

    def SetData(self, backlashCompensationData):
        return _WMX3ApiPython.BacklashCompensationData_SetData(self, backlashCompensationData)
    __swig_setmethods__["enable"] = _WMX3ApiPython.BacklashCompensationData_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.BacklashCompensationData_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.BacklashCompensationData_enable_get, _WMX3ApiPython.BacklashCompensationData_enable_set)
    __swig_setmethods__["offsetDirection"] = _WMX3ApiPython.BacklashCompensationData_offsetDirection_set
    __swig_getmethods__["offsetDirection"] = _WMX3ApiPython.BacklashCompensationData_offsetDirection_get
    if _newclass:
        offsetDirection = _swig_property(_WMX3ApiPython.BacklashCompensationData_offsetDirection_get, _WMX3ApiPython.BacklashCompensationData_offsetDirection_set)
    __swig_setmethods__["backlashHigh"] = _WMX3ApiPython.BacklashCompensationData_backlashHigh_set
    __swig_getmethods__["backlashHigh"] = _WMX3ApiPython.BacklashCompensationData_backlashHigh_get
    if _newclass:
        backlashHigh = _swig_property(_WMX3ApiPython.BacklashCompensationData_backlashHigh_get, _WMX3ApiPython.BacklashCompensationData_backlashHigh_set)
    __swig_setmethods__["backlashLow"] = _WMX3ApiPython.BacklashCompensationData_backlashLow_set
    __swig_getmethods__["backlashLow"] = _WMX3ApiPython.BacklashCompensationData_backlashLow_get
    if _newclass:
        backlashLow = _swig_property(_WMX3ApiPython.BacklashCompensationData_backlashLow_get, _WMX3ApiPython.BacklashCompensationData_backlashLow_set)
    __swig_setmethods__["distanceHigh"] = _WMX3ApiPython.BacklashCompensationData_distanceHigh_set
    __swig_getmethods__["distanceHigh"] = _WMX3ApiPython.BacklashCompensationData_distanceHigh_get
    if _newclass:
        distanceHigh = _swig_property(_WMX3ApiPython.BacklashCompensationData_distanceHigh_get, _WMX3ApiPython.BacklashCompensationData_distanceHigh_set)
    __swig_setmethods__["distanceLow"] = _WMX3ApiPython.BacklashCompensationData_distanceLow_set
    __swig_getmethods__["distanceLow"] = _WMX3ApiPython.BacklashCompensationData_distanceLow_get
    if _newclass:
        distanceLow = _swig_property(_WMX3ApiPython.BacklashCompensationData_distanceLow_get, _WMX3ApiPython.BacklashCompensationData_distanceLow_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BacklashCompensationData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BacklashCompensationData
    __del__ = lambda self: None
BacklashCompensationData_swigregister = _WMX3ApiPython.BacklashCompensationData_swigregister
BacklashCompensationData_swigregister(BacklashCompensationData)

class Compensation(_object):
    """Compensation.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compensation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Compensation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Compensation.rtdll Ver.3.5.0.0 is required to use.
        Compensation.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_Compensation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Compensation
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.Compensation_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.Compensation_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.Compensation_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.Compensation_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.Compensation_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.Compensation_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.Compensation_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Compensation_GetVersion(self)

    def SetPitchErrorCompensation(self, axis, pitchErrCompData):
        return _WMX3ApiPython.Compensation_SetPitchErrorCompensation(self, axis, pitchErrCompData)

    def SetPitchErrorCompensation_FreePosition(self, axis, pitchErrCompData):
        return _WMX3ApiPython.Compensation_SetPitchErrorCompensation_FreePosition(self, axis, pitchErrCompData)

    def GetPitchErrorCompensation(self, axis):
        pitchErrCompData = PitchErrorCompensationData()
        ret = _WMX3ApiPython.Compensation_GetPitchErrorCompensation(self, axis, pitchErrCompData)
        return ret, pitchErrCompData



    def GetPitchErrorCompensation_FreePosition(self, axis, pitchErrCompData):
        return _WMX3ApiPython.Compensation_GetPitchErrorCompensation_FreePosition(self, axis, pitchErrCompData)

    def EnablePitchErrorCompensation(self, axis):
        return _WMX3ApiPython.Compensation_EnablePitchErrorCompensation(self, axis)

    def DisablePitchErrorCompensation(self, axis):
        return _WMX3ApiPython.Compensation_DisablePitchErrorCompensation(self, axis)

    def GetPitchErrorCompensationAtPosition(self, axis, pos):
        pCompensation = doublep()
        ret = _WMX3ApiPython.Compensation_GetPitchErrorCompensationAtPosition(self, axis, pos, pCompensation)
        return ret, pCompensation.value()



    def Set2DPitchErrorCompensation(self, channel, pitchErrCompData2D):
        return _WMX3ApiPython.Compensation_Set2DPitchErrorCompensation(self, channel, pitchErrCompData2D)

    def Set2DPitchErrorCompensation_FreePosition(self, channel, pitchErrCompData2D):
        return _WMX3ApiPython.Compensation_Set2DPitchErrorCompensation_FreePosition(self, channel, pitchErrCompData2D)

    def Get2DPitchErrorCompensation(self, channel):
        pitchErrCompData2D = TwoDPitchErrorCompensationData()
        ret = _WMX3ApiPython.Compensation_Get2DPitchErrorCompensation(self, channel, pitchErrCompData2D)
        return ret, pitchErrCompData2D



    def Get2DPitchErrorCompensation_FreePosition(self, channel, pitchErrCompData2D):
        return _WMX3ApiPython.Compensation_Get2DPitchErrorCompensation_FreePosition(self, channel, pitchErrCompData2D)

    def Enable2DPitchErrorCompensation(self, channel):
        return _WMX3ApiPython.Compensation_Enable2DPitchErrorCompensation(self, channel)

    def Disable2DPitchErrorCompensation(self, channel):
        return _WMX3ApiPython.Compensation_Disable2DPitchErrorCompensation(self, channel)

    def Get2DPitchErrorCompensationAtPosition(self, channel, refPos1, refPos2):
        pCompensation = doublep()
        ret = _WMX3ApiPython.Compensation_Get2DPitchErrorCompensationAtPosition(self, channel, refPos1, refPos2, pCompensation)
        return ret, pCompensation.value()



    def SetBacklashCompensation(self, axis, pBacklashCompData):
        return _WMX3ApiPython.Compensation_SetBacklashCompensation(self, axis, pBacklashCompData)

    def GetBacklashCompensation(self, axis):
        pBacklashCompData = BacklashCompensationData()
        ret = _WMX3ApiPython.Compensation_GetBacklashCompensation(self, axis, pBacklashCompData)
        return ret, pBacklashCompData



    def EnableBacklashCompensation(self, axis):
        return _WMX3ApiPython.Compensation_EnableBacklashCompensation(self, axis)

    def DisableBacklashCompensation(self, axis):
        return _WMX3ApiPython.Compensation_DisableBacklashCompensation(self, axis)
Compensation_swigregister = _WMX3ApiPython.Compensation_swigregister
Compensation_swigregister(Compensation)

def Compensation_ErrorToString(errCode):
    return _WMX3ApiPython.Compensation_ErrorToString(errCode)
Compensation_ErrorToString = _WMX3ApiPython.Compensation_ErrorToString

def Compensation_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.Compensation_ApiLogToString(pLogData, logDataSize)
Compensation_ApiLogToString = _WMX3ApiPython.Compensation_ApiLogToString

def Compensation_GetLibVersion():
    return _WMX3ApiPython.Compensation_GetLibVersion()
Compensation_GetLibVersion = _WMX3ApiPython.Compensation_GetLibVersion

class EventControl_PlannedVelocityDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PlannedVelocityDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PlannedVelocityDataArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _WMX3ApiPython.new_EventControl_PlannedVelocityDataArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityDataArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_WMX3ApiPython.EventControl_PlannedVelocityDataArray_frompointer)
    else:
        frompointer = _WMX3ApiPython.EventControl_PlannedVelocityDataArray_frompointer
EventControl_PlannedVelocityDataArray_swigregister = _WMX3ApiPython.EventControl_PlannedVelocityDataArray_swigregister
EventControl_PlannedVelocityDataArray_swigregister(EventControl_PlannedVelocityDataArray)

def EventControl_PlannedVelocityDataArray_frompointer(t):
    return _WMX3ApiPython.EventControl_PlannedVelocityDataArray_frompointer(t)
EventControl_PlannedVelocityDataArray_frompointer = _WMX3ApiPython.EventControl_PlannedVelocityDataArray_frompointer

class EventErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventErrorCode, name)
    __repr__ = _swig_repr
    MaxEventDefinitionsDefined = _WMX3ApiPython.EventErrorCode_MaxEventDefinitionsDefined
    MaxEventInputsDefined = _WMX3ApiPython.EventErrorCode_MaxEventInputsDefined
    MaxEventOutputsDefined = _WMX3ApiPython.EventErrorCode_MaxEventOutputsDefined
    MaxEventBitArrayUsed = _WMX3ApiPython.EventErrorCode_MaxEventBitArrayUsed
    IDOutOfRange = _WMX3ApiPython.EventErrorCode_IDOutOfRange
    IDNotDefined = _WMX3ApiPython.EventErrorCode_IDNotDefined
    IDBusyUpdating = _WMX3ApiPython.EventErrorCode_IDBusyUpdating
    ChannelUninitialized = _WMX3ApiPython.EventErrorCode_ChannelUninitialized
    IDInUse = _WMX3ApiPython.EventErrorCode_IDInUse
    HardTouchProbeChannelOutOfRange = _WMX3ApiPython.EventErrorCode_HardTouchProbeChannelOutOfRange
    EventInDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventInDataSizeOutOfRange
    EventOutDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventOutDataSizeOutOfRange
    EventConfigureOfModuleDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventConfigureOfModuleDataSizeOutOfRange
    EventNotDefined = _WMX3ApiPython.EventErrorCode_EventNotDefined
    EventInputModuleIdNotMatched = _WMX3ApiPython.EventErrorCode_EventInputModuleIdNotMatched
    EventOutputModuleIdNotMatched = _WMX3ApiPython.EventErrorCode_EventOutputModuleIdNotMatched
    EventInputDataAllocateFailed = _WMX3ApiPython.EventErrorCode_EventInputDataAllocateFailed
    EventOutputDataAllocateFailed = _WMX3ApiPython.EventErrorCode_EventOutputDataAllocateFailed
    GetFunctionDoesNotMatchSetFunction = _WMX3ApiPython.EventErrorCode_GetFunctionDoesNotMatchSetFunction
    ChannelEnabled = _WMX3ApiPython.EventErrorCode_ChannelEnabled
    InterruptIdForActiveChannelError = _WMX3ApiPython.EventErrorCode_InterruptIdForActiveChannelError
    InvalidModuleID = _WMX3ApiPython.EventErrorCode_InvalidModuleID
    EventIsEnabled = _WMX3ApiPython.EventErrorCode_EventIsEnabled
    EventIsClearing = _WMX3ApiPython.EventErrorCode_EventIsClearing
    SourceTypeOutOfRange = _WMX3ApiPython.EventErrorCode_SourceTypeOutOfRange
    PointCountOutOfRange = _WMX3ApiPython.EventErrorCode_PointCountOutOfRange
    IntervalOutOfRange = _WMX3ApiPython.EventErrorCode_IntervalOutOfRange

    def __init__(self):
        this = _WMX3ApiPython.new_EventErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventErrorCode
    __del__ = lambda self: None
EventErrorCode_swigregister = _WMX3ApiPython.EventErrorCode_swigregister
EventErrorCode_swigregister(EventErrorCode)

class EventOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventOption, name)
    __repr__ = _swig_repr

    def SetData(self, eventOption):
        return _WMX3ApiPython.EventOption_SetData(self, eventOption)

    def GetData(self, eventOption):
        return _WMX3ApiPython.EventOption_GetData(self, eventOption)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventOption_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventOption_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventOption_singleShot_get, _WMX3ApiPython.EventOption_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventOption_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventOption_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventOption_disableAfterActivate_get, _WMX3ApiPython.EventOption_disableAfterActivate_set)
    __swig_setmethods__["enable"] = _WMX3ApiPython.EventOption_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.EventOption_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.EventOption_enable_get, _WMX3ApiPython.EventOption_enable_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventOption
    __del__ = lambda self: None
EventOption_swigregister = _WMX3ApiPython.EventOption_swigregister
EventOption_swigregister(EventOption)

class CustomEventOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomEventOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomEventOption, name)
    __repr__ = _swig_repr

    def SetData(self, customEventOption):
        return _WMX3ApiPython.CustomEventOption_SetData(self, customEventOption)

    def GetData(self, customEventOption):
        return _WMX3ApiPython.CustomEventOption_GetData(self, customEventOption)
    __swig_setmethods__["option"] = _WMX3ApiPython.CustomEventOption_option_set
    __swig_getmethods__["option"] = _WMX3ApiPython.CustomEventOption_option_get
    if _newclass:
        option = _swig_property(_WMX3ApiPython.CustomEventOption_option_get, _WMX3ApiPython.CustomEventOption_option_set)
    __swig_setmethods__["initialState"] = _WMX3ApiPython.CustomEventOption_initialState_set
    __swig_getmethods__["initialState"] = _WMX3ApiPython.CustomEventOption_initialState_get
    if _newclass:
        initialState = _swig_property(_WMX3ApiPython.CustomEventOption_initialState_get, _WMX3ApiPython.CustomEventOption_initialState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CustomEventOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CustomEventOption
    __del__ = lambda self: None
CustomEventOption_swigregister = _WMX3ApiPython.CustomEventOption_swigregister
CustomEventOption_swigregister(CustomEventOption)

class AllEventID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllEventID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AllEventID, name)
    __repr__ = _swig_repr

    def GetData(self, allEventID):
        return _WMX3ApiPython.AllEventID_GetData(self, allEventID)

    def SetData(self, allEventID):
        return _WMX3ApiPython.AllEventID_SetData(self, allEventID)
    __swig_setmethods__["count"] = _WMX3ApiPython.AllEventID_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.AllEventID_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.AllEventID_count_get, _WMX3ApiPython.AllEventID_count_set)
    __swig_setmethods__["id"] = _WMX3ApiPython.AllEventID_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.AllEventID_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.AllEventID_id_get, _WMX3ApiPython.AllEventID_id_set)

    def SetId(self, index, value):
        return _WMX3ApiPython.AllEventID_SetId(self, index, value)

    def GetId(self, index):
        return _WMX3ApiPython.AllEventID_GetId(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AllEventID()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AllEventID
    __del__ = lambda self: None
AllEventID_swigregister = _WMX3ApiPython.AllEventID_swigregister
AllEventID_swigregister(AllEventID)

class EventApiEventInputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputType, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventApiEventInputType_PyNone
    AnotherEvent = _WMX3ApiPython.EventApiEventInputType_AnotherEvent
    DelayAnotherEvent = _WMX3ApiPython.EventApiEventInputType_DelayAnotherEvent
    OrEvent = _WMX3ApiPython.EventApiEventInputType_OrEvent
    AndEvent = _WMX3ApiPython.EventApiEventInputType_AndEvent
    XorEvent = _WMX3ApiPython.EventApiEventInputType_XorEvent
    DeviceCloseEvent = _WMX3ApiPython.EventApiEventInputType_DeviceCloseEvent
    DeviceTimeoutEvent = _WMX3ApiPython.EventApiEventInputType_DeviceTimeoutEvent

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputType
    __del__ = lambda self: None
EventApiEventInputType_swigregister = _WMX3ApiPython.EventApiEventInputType_swigregister
EventApiEventInputType_swigregister(EventApiEventInputType)

class EventApiEventInput(EventInput):
    __swig_setmethods__ = {}
    for _s in [EventInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputFunction"] = _WMX3ApiPython.EventApiEventInput_inputFunction_set
    __swig_getmethods__["inputFunction"] = _WMX3ApiPython.EventApiEventInput_inputFunction_get
    if _newclass:
        inputFunction = _swig_property(_WMX3ApiPython.EventApiEventInput_inputFunction_get, _WMX3ApiPython.EventApiEventInput_inputFunction_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputModuleId(self):
        return _WMX3ApiPython.EventApiEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.EventApiEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventApiEventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInput
    __del__ = lambda self: None
EventApiEventInput_swigregister = _WMX3ApiPython.EventApiEventInput_swigregister
EventApiEventInput_swigregister(EventApiEventInput)

class BaseEventApiEventInputFunctionArguments_Multi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseEventApiEventInputFunctionArguments_Multi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseEventApiEventInputFunctionArguments_Multi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_set)
    __swig_setmethods__["invertResult"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_set
    __swig_getmethods__["invertResult"] = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_get
    if _newclass:
        invertResult = _swig_property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_set)

    def SetEventID(self, index, value):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_SetEventID(self, index, value)

    def GetEventID(self, index):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_GetEventID(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseEventApiEventInputFunctionArguments_Multi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseEventApiEventInputFunctionArguments_Multi
    __del__ = lambda self: None
BaseEventApiEventInputFunctionArguments_Multi_swigregister = _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_swigregister
BaseEventApiEventInputFunctionArguments_Multi_swigregister(BaseEventApiEventInputFunctionArguments_Multi)

class EventApiEventInputFunctionArguments_None(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_None, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_None, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_None()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_None
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_None_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_None_swigregister
EventApiEventInputFunctionArguments_None_swigregister(EventApiEventInputFunctionArguments_None)

class EventApiEventInputFunctionArguments_AnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_AnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_AnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_AnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_AnotherEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_AnotherEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_swigregister
EventApiEventInputFunctionArguments_AnotherEvent_swigregister(EventApiEventInputFunctionArguments_AnotherEvent)

class EventApiEventInputFunctionArguments_DelayAnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_DelayAnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_DelayAnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DelayAnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DelayAnotherEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_DelayAnotherEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_swigregister
EventApiEventInputFunctionArguments_DelayAnotherEvent_swigregister(EventApiEventInputFunctionArguments_DelayAnotherEvent)

class EventApiEventInputFunctionArguments_OrEvent(BaseEventApiEventInputFunctionArguments_Multi):
    __swig_setmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_OrEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_OrEvent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_OrEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_OrEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_OrEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_OrEvent_swigregister
EventApiEventInputFunctionArguments_OrEvent_swigregister(EventApiEventInputFunctionArguments_OrEvent)

class EventApiEventInputFunctionArguments_AndEvent(BaseEventApiEventInputFunctionArguments_Multi):
    __swig_setmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_AndEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_AndEvent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_AndEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_AndEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_AndEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_AndEvent_swigregister
EventApiEventInputFunctionArguments_AndEvent_swigregister(EventApiEventInputFunctionArguments_AndEvent)

class EventApiEventInputFunctionArguments_XorrEvent(BaseEventApiEventInputFunctionArguments_Multi):
    __swig_setmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_XorrEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEventApiEventInputFunctionArguments_Multi]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_XorrEvent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_XorrEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_XorrEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_XorrEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_XorrEvent_swigregister
EventApiEventInputFunctionArguments_XorrEvent_swigregister(EventApiEventInputFunctionArguments_XorrEvent)

class EventApiEventInputFunctionArguments_DeviceCloseEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_DeviceCloseEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_DeviceCloseEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceId"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_set
    __swig_getmethods__["deviceId"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_get
    if _newclass:
        deviceId = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DeviceCloseEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DeviceCloseEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_DeviceCloseEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_swigregister
EventApiEventInputFunctionArguments_DeviceCloseEvent_swigregister(EventApiEventInputFunctionArguments_DeviceCloseEvent)

class EventApiEventInputFunctionArguments_DeviceTimeoutEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventInputFunctionArguments_DeviceTimeoutEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventInputFunctionArguments_DeviceTimeoutEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceId"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_set
    __swig_getmethods__["deviceId"] = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_get
    if _newclass:
        deviceId = _swig_property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DeviceTimeoutEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DeviceTimeoutEvent
    __del__ = lambda self: None
EventApiEventInputFunctionArguments_DeviceTimeoutEvent_swigregister = _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_swigregister
EventApiEventInputFunctionArguments_DeviceTimeoutEvent_swigregister(EventApiEventInputFunctionArguments_DeviceTimeoutEvent)

class EventApiEventOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventOutputType, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventApiEventOutputType_PyNone
    EnableAnotherEvent = _WMX3ApiPython.EventApiEventOutputType_EnableAnotherEvent

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputType
    __del__ = lambda self: None
EventApiEventOutputType_swigregister = _WMX3ApiPython.EventApiEventOutputType_swigregister
EventApiEventOutputType_swigregister(EventApiEventOutputType)

class EventApiEventOutput(EventOutput):
    __swig_setmethods__ = {}
    for _s in [EventOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["outputFunction"] = _WMX3ApiPython.EventApiEventOutput_outputFunction_set
    __swig_getmethods__["outputFunction"] = _WMX3ApiPython.EventApiEventOutput_outputFunction_get
    if _newclass:
        outputFunction = _swig_property(_WMX3ApiPython.EventApiEventOutput_outputFunction_get, _WMX3ApiPython.EventApiEventOutput_outputFunction_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOutputModuleId(self):
        return _WMX3ApiPython.EventApiEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EventApiEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventApiEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutput
    __del__ = lambda self: None
EventApiEventOutput_swigregister = _WMX3ApiPython.EventApiEventOutput_swigregister
EventApiEventOutput_swigregister(EventApiEventOutput)

class EventApiEventOutputFunctionArguments_None(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventOutputFunctionArguments_None, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventOutputFunctionArguments_None, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventOutputFunctionArguments_None()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputFunctionArguments_None
    __del__ = lambda self: None
EventApiEventOutputFunctionArguments_None_swigregister = _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_swigregister
EventApiEventOutputFunctionArguments_None_swigregister(EventApiEventOutputFunctionArguments_None)

class EventApiEventOutputFunctionArguments_EnableAnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventApiEventOutputFunctionArguments_EnableAnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventApiEventOutputFunctionArguments_EnableAnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targetEventID"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_set
    __swig_getmethods__["targetEventID"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_get
    if _newclass:
        targetEventID = _swig_property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventApiEventOutputFunctionArguments_EnableAnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputFunctionArguments_EnableAnotherEvent
    __del__ = lambda self: None
EventApiEventOutputFunctionArguments_EnableAnotherEvent_swigregister = _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_swigregister
EventApiEventOutputFunctionArguments_EnableAnotherEvent_swigregister(EventApiEventOutputFunctionArguments_EnableAnotherEvent)

class EventControl_EventInputFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_EventInputFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_EventInputFunction, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventControl_EventInputFunction_PyNone
    IOBit = _WMX3ApiPython.EventControl_EventInputFunction_IOBit
    NotIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NotIOBit
    OrIOBit = _WMX3ApiPython.EventControl_EventInputFunction_OrIOBit
    AndIOBit = _WMX3ApiPython.EventControl_EventInputFunction_AndIOBit
    XorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_XorIOBit
    NandIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NandIOBit
    NorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NorIOBit
    XnorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_XnorIOBit
    DelayIOBit = _WMX3ApiPython.EventControl_EventInputFunction_DelayIOBit
    MBit = _WMX3ApiPython.EventControl_EventInputFunction_MBit
    NotMBit = _WMX3ApiPython.EventControl_EventInputFunction_NotMBit
    OrMBit = _WMX3ApiPython.EventControl_EventInputFunction_OrMBit
    AndMBit = _WMX3ApiPython.EventControl_EventInputFunction_AndMBit
    XorMBit = _WMX3ApiPython.EventControl_EventInputFunction_XorMBit
    NandMBit = _WMX3ApiPython.EventControl_EventInputFunction_NandMBit
    NorMBit = _WMX3ApiPython.EventControl_EventInputFunction_NorMBit
    XnorMBit = _WMX3ApiPython.EventControl_EventInputFunction_XnorMBit
    DelayMBit = _WMX3ApiPython.EventControl_EventInputFunction_DelayMBit
    AnotherEvent = _WMX3ApiPython.EventControl_EventInputFunction_AnotherEvent
    DelayAnotherEvent = _WMX3ApiPython.EventControl_EventInputFunction_DelayAnotherEvent
    EqualPos = _WMX3ApiPython.EventControl_EventInputFunction_EqualPos
    GreaterPos = _WMX3ApiPython.EventControl_EventInputFunction_GreaterPos
    LessPos = _WMX3ApiPython.EventControl_EventInputFunction_LessPos
    EqualVelocity = _WMX3ApiPython.EventControl_EventInputFunction_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.EventControl_EventInputFunction_GreaterVelocity
    LessVelocity = _WMX3ApiPython.EventControl_EventInputFunction_LessVelocity
    EqualTrq = _WMX3ApiPython.EventControl_EventInputFunction_EqualTrq
    GreaterTrq = _WMX3ApiPython.EventControl_EventInputFunction_GreaterTrq
    LessTrq = _WMX3ApiPython.EventControl_EventInputFunction_LessTrq
    OpState = _WMX3ApiPython.EventControl_EventInputFunction_OpState
    PosSET = _WMX3ApiPython.EventControl_EventInputFunction_PosSET
    DelayedPosSET = _WMX3ApiPython.EventControl_EventInputFunction_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.EventControl_EventInputFunction_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.EventControl_EventInputFunction_RemainingTime
    RemainingDistance = _WMX3ApiPython.EventControl_EventInputFunction_RemainingDistance
    CompletedDistance = _WMX3ApiPython.EventControl_EventInputFunction_CompletedDistance
    CompletedTime = _WMX3ApiPython.EventControl_EventInputFunction_CompletedTime
    Unknown = _WMX3ApiPython.EventControl_EventInputFunction_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_EventInputFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_EventInputFunction
    __del__ = lambda self: None
EventControl_EventInputFunction_swigregister = _WMX3ApiPython.EventControl_EventInputFunction_swigregister
EventControl_EventInputFunction_swigregister(EventControl_EventInputFunction)

class EventControl_EventOutputFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_EventOutputFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_EventOutputFunction, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventControl_EventOutputFunction_PyNone
    SetIOOutBit = _WMX3ApiPython.EventControl_EventOutputFunction_SetIOOutBit
    SetMBit = _WMX3ApiPython.EventControl_EventOutputFunction_SetMBit
    EnableAnotherEvent = _WMX3ApiPython.EventControl_EventOutputFunction_EnableAnotherEvent
    StopSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_StopSingleAxis
    StartSinglePos = _WMX3ApiPython.EventControl_EventOutputFunction_StartSinglePos
    StartSingleMov = _WMX3ApiPython.EventControl_EventOutputFunction_StartSingleMov
    StartMultiplePos = _WMX3ApiPython.EventControl_EventOutputFunction_StartMultiplePos
    StartMultipleMov = _WMX3ApiPython.EventControl_EventOutputFunction_StartMultipleMov
    LinearIntplPos = _WMX3ApiPython.EventControl_EventOutputFunction_LinearIntplPos
    LinearIntplMov = _WMX3ApiPython.EventControl_EventOutputFunction_LinearIntplMov
    StartAPIBuffer = _WMX3ApiPython.EventControl_EventOutputFunction_StartAPIBuffer
    ExecQuickStopSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_ExecQuickStopSingleAxis
    OverrideVelSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_OverrideVelSingleAxis
    ExecEStop = _WMX3ApiPython.EventControl_EventOutputFunction_ExecEStop
    TriggerFlightRecorder = _WMX3ApiPython.EventControl_EventOutputFunction_TriggerFlightRecorder
    ResetFlightRecorder = _WMX3ApiPython.EventControl_EventOutputFunction_ResetFlightRecorder
    Unknown = _WMX3ApiPython.EventControl_EventOutputFunction_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_EventOutputFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_EventOutputFunction
    __del__ = lambda self: None
EventControl_EventOutputFunction_swigregister = _WMX3ApiPython.EventControl_EventOutputFunction_swigregister
EventControl_EventOutputFunction_swigregister(EventControl_EventOutputFunction)

class EventControl_TouchProbeSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_TouchProbeSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_TouchProbeSource, name)
    __repr__ = _swig_repr
    ZPulse = _WMX3ApiPython.EventControl_TouchProbeSource_ZPulse
    TouchProbe = _WMX3ApiPython.EventControl_TouchProbeSource_TouchProbe

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_TouchProbeSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_TouchProbeSource
    __del__ = lambda self: None
EventControl_TouchProbeSource_swigregister = _WMX3ApiPython.EventControl_TouchProbeSource_swigregister
EventControl_TouchProbeSource_swigregister(EventControl_TouchProbeSource)

class EventControl_TouchProbeMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_TouchProbeMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_TouchProbeMode, name)
    __repr__ = _swig_repr
    LatchFirst = _WMX3ApiPython.EventControl_TouchProbeMode_LatchFirst
    LatchLast = _WMX3ApiPython.EventControl_TouchProbeMode_LatchLast

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_TouchProbeMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_TouchProbeMode
    __del__ = lambda self: None
EventControl_TouchProbeMode_swigregister = _WMX3ApiPython.EventControl_TouchProbeMode_swigregister
EventControl_TouchProbeMode_swigregister(EventControl_TouchProbeMode)

class EventControl_PSOOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PSOOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PSOOutputType, name)
    __repr__ = _swig_repr
    IOOutput = _WMX3ApiPython.EventControl_PSOOutputType_IOOutput
    UserMemory = _WMX3ApiPython.EventControl_PSOOutputType_UserMemory

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PSOOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOutputType
    __del__ = lambda self: None
EventControl_PSOOutputType_swigregister = _WMX3ApiPython.EventControl_PSOOutputType_swigregister
EventControl_PSOOutputType_swigregister(EventControl_PSOOutputType)

class EventControl_ComparatorSourceType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_ComparatorSourceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_ComparatorSourceType, name)
    __repr__ = _swig_repr
    PosCommand = _WMX3ApiPython.EventControl_ComparatorSourceType_PosCommand
    PosFeedback = _WMX3ApiPython.EventControl_ComparatorSourceType_PosFeedback
    FollowingError = _WMX3ApiPython.EventControl_ComparatorSourceType_FollowingError

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_ComparatorSourceType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparatorSourceType
    __del__ = lambda self: None
EventControl_ComparatorSourceType_swigregister = _WMX3ApiPython.EventControl_ComparatorSourceType_swigregister
EventControl_ComparatorSourceType_swigregister(EventControl_ComparatorSourceType)

class EventControl_ComparisonType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_ComparisonType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_ComparisonType, name)
    __repr__ = _swig_repr
    Disable = _WMX3ApiPython.EventControl_ComparisonType_Disable
    Equal = _WMX3ApiPython.EventControl_ComparisonType_Equal
    PositiveDirection = _WMX3ApiPython.EventControl_ComparisonType_PositiveDirection
    NegativeDirection = _WMX3ApiPython.EventControl_ComparisonType_NegativeDirection
    MoreThan = _WMX3ApiPython.EventControl_ComparisonType_MoreThan
    LessThan = _WMX3ApiPython.EventControl_ComparisonType_LessThan

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_ComparisonType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparisonType
    __del__ = lambda self: None
EventControl_ComparisonType_swigregister = _WMX3ApiPython.EventControl_ComparisonType_swigregister
EventControl_ComparisonType_swigregister(EventControl_ComparisonType)

class EventControl_Event_InputFunctionArguments_None(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_None, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_None, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_set
    __swig_getmethods__["reserved"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_get
    if _newclass:
        reserved = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_None()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_None
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_None_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_swigregister
EventControl_Event_InputFunctionArguments_None_swigregister(EventControl_Event_InputFunctionArguments_None)

class EventControl_Event_InputFunctionArguments_IOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_IOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_IOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_IOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_IOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_IOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_swigregister
EventControl_Event_InputFunctionArguments_IOBit_swigregister(EventControl_Event_InputFunctionArguments_IOBit)

class EventControl_Event_InputFunctionArguments_NotIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NotIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NotIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NotIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NotIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NotIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_swigregister
EventControl_Event_InputFunctionArguments_NotIOBit_swigregister(EventControl_Event_InputFunctionArguments_NotIOBit)

class EventControl_Event_InputFunctionArguments_OrIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_OrIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_OrIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OrIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OrIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_OrIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_swigregister
EventControl_Event_InputFunctionArguments_OrIOBit_swigregister(EventControl_Event_InputFunctionArguments_OrIOBit)

class EventControl_Event_InputFunctionArguments_AndIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_AndIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_AndIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AndIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AndIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_AndIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_swigregister
EventControl_Event_InputFunctionArguments_AndIOBit_swigregister(EventControl_Event_InputFunctionArguments_AndIOBit)

class EventControl_Event_InputFunctionArguments_XorIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_XorIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_XorIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XorIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_XorIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_swigregister
EventControl_Event_InputFunctionArguments_XorIOBit_swigregister(EventControl_Event_InputFunctionArguments_XorIOBit)

class EventControl_Event_InputFunctionArguments_NandIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NandIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NandIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NandIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NandIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NandIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_swigregister
EventControl_Event_InputFunctionArguments_NandIOBit_swigregister(EventControl_Event_InputFunctionArguments_NandIOBit)

class EventControl_Event_InputFunctionArguments_NorIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NorIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NorIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NorIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NorIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_swigregister
EventControl_Event_InputFunctionArguments_NorIOBit_swigregister(EventControl_Event_InputFunctionArguments_NorIOBit)

class EventControl_Event_InputFunctionArguments_XnorIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_XnorIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_XnorIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetInvert(self, index)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XnorIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XnorIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_XnorIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_swigregister
EventControl_Event_InputFunctionArguments_XnorIOBit_swigregister(EventControl_Event_InputFunctionArguments_XnorIOBit)

class EventControl_Event_InputFunctionArguments_DelayIOBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_DelayIOBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_DelayIOBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_set)
    __swig_setmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_set
    __swig_getmethods__["ioSourceType"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_get
    if _newclass:
        ioSourceType = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayIOBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayIOBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_DelayIOBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_swigregister
EventControl_Event_InputFunctionArguments_DelayIOBit_swigregister(EventControl_Event_InputFunctionArguments_DelayIOBit)

class EventControl_Event_InputFunctionArguments_MBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_MBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_MBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_MBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_MBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_MBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_swigregister
EventControl_Event_InputFunctionArguments_MBit_swigregister(EventControl_Event_InputFunctionArguments_MBit)

class EventControl_Event_InputFunctionArguments_NotMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NotMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NotMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NotMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NotMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NotMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_swigregister
EventControl_Event_InputFunctionArguments_NotMBit_swigregister(EventControl_Event_InputFunctionArguments_NotMBit)

class EventControl_Event_InputFunctionArguments_OrMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_OrMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_OrMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OrMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OrMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_OrMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_swigregister
EventControl_Event_InputFunctionArguments_OrMBit_swigregister(EventControl_Event_InputFunctionArguments_OrMBit)

class EventControl_Event_InputFunctionArguments_AndMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_AndMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_AndMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AndMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AndMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_AndMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_swigregister
EventControl_Event_InputFunctionArguments_AndMBit_swigregister(EventControl_Event_InputFunctionArguments_AndMBit)

class EventControl_Event_InputFunctionArguments_XorMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_XorMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_XorMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XorMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_XorMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_swigregister
EventControl_Event_InputFunctionArguments_XorMBit_swigregister(EventControl_Event_InputFunctionArguments_XorMBit)

class EventControl_Event_InputFunctionArguments_NandMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NandMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NandMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NandMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NandMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NandMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_swigregister
EventControl_Event_InputFunctionArguments_NandMBit_swigregister(EventControl_Event_InputFunctionArguments_NandMBit)

class EventControl_Event_InputFunctionArguments_NorMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_NorMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_NorMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NorMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_NorMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_swigregister
EventControl_Event_InputFunctionArguments_NorMBit_swigregister(EventControl_Event_InputFunctionArguments_NorMBit)

class EventControl_Event_InputFunctionArguments_XnorMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_XnorMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_XnorMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetByteAddress(self, index)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetBitAddress(self, index)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XnorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XnorMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_XnorMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_swigregister
EventControl_Event_InputFunctionArguments_XnorMBit_swigregister(EventControl_Event_InputFunctionArguments_XnorMBit)

class EventControl_Event_InputFunctionArguments_DelayMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_DelayMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_DelayMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayMBit
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_DelayMBit_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_swigregister
EventControl_Event_InputFunctionArguments_DelayMBit_swigregister(EventControl_Event_InputFunctionArguments_DelayMBit)

class EventControl_Event_InputFunctionArguments_AnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_AnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_AnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AnotherEvent
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_AnotherEvent_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_swigregister
EventControl_Event_InputFunctionArguments_AnotherEvent_swigregister(EventControl_Event_InputFunctionArguments_AnotherEvent)

class EventControl_Event_InputFunctionArguments_DelayAnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_DelayAnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_DelayAnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayAnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayAnotherEvent
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_DelayAnotherEvent_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_swigregister
EventControl_Event_InputFunctionArguments_DelayAnotherEvent_swigregister(EventControl_Event_InputFunctionArguments_DelayAnotherEvent)

class EventControl_Event_InputFunctionArguments_EqualPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_EqualPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_EqualPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_set)
    __swig_setmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_set
    __swig_getmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_get
    if _newclass:
        disablePositiveDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_set)
    __swig_setmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_set
    __swig_getmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_get
    if _newclass:
        disableNegativeDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_set)
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualPos
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_EqualPos_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_swigregister
EventControl_Event_InputFunctionArguments_EqualPos_swigregister(EventControl_Event_InputFunctionArguments_EqualPos)

class EventControl_Event_InputFunctionArguments_GreaterPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_GreaterPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_GreaterPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_set)
    __swig_setmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_set
    __swig_getmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_get
    if _newclass:
        disablePositiveDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_set)
    __swig_setmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_set
    __swig_getmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_get
    if _newclass:
        disableNegativeDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterPos
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_GreaterPos_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_swigregister
EventControl_Event_InputFunctionArguments_GreaterPos_swigregister(EventControl_Event_InputFunctionArguments_GreaterPos)

class EventControl_Event_InputFunctionArguments_LessPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_LessPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_LessPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_set)
    __swig_setmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_set
    __swig_getmethods__["disablePositiveDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_get
    if _newclass:
        disablePositiveDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_set)
    __swig_setmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_set
    __swig_getmethods__["disableNegativeDirection"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_get
    if _newclass:
        disableNegativeDirection = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessPos
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_LessPos_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_swigregister
EventControl_Event_InputFunctionArguments_LessPos_swigregister(EventControl_Event_InputFunctionArguments_LessPos)

class EventControl_Event_InputFunctionArguments_EqualVelocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_EqualVelocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_EqualVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_set)
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualVelocity
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_EqualVelocity_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_swigregister
EventControl_Event_InputFunctionArguments_EqualVelocity_swigregister(EventControl_Event_InputFunctionArguments_EqualVelocity)

class EventControl_Event_InputFunctionArguments_GreaterVelocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_GreaterVelocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_GreaterVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterVelocity
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_GreaterVelocity_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_swigregister
EventControl_Event_InputFunctionArguments_GreaterVelocity_swigregister(EventControl_Event_InputFunctionArguments_GreaterVelocity)

class EventControl_Event_InputFunctionArguments_LessVelocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_LessVelocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_LessVelocity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_set)
    __swig_setmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_set
    __swig_getmethods__["useFeedback"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_get
    if _newclass:
        useFeedback = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessVelocity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessVelocity
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_LessVelocity_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_swigregister
EventControl_Event_InputFunctionArguments_LessVelocity_swigregister(EventControl_Event_InputFunctionArguments_LessVelocity)

class EventControl_Event_InputFunctionArguments_EqualTrq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_EqualTrq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_EqualTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_set)
    __swig_setmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_set
    __swig_getmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_get
    if _newclass:
        trq = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_set)
    __swig_setmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_set
    __swig_getmethods__["enableTolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_get
    if _newclass:
        enableTolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_set)
    __swig_setmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_set
    __swig_getmethods__["tolerance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_get
    if _newclass:
        tolerance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualTrq
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_EqualTrq_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_swigregister
EventControl_Event_InputFunctionArguments_EqualTrq_swigregister(EventControl_Event_InputFunctionArguments_EqualTrq)

class EventControl_Event_InputFunctionArguments_GreaterTrq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_GreaterTrq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_GreaterTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_set)
    __swig_setmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_set
    __swig_getmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_get
    if _newclass:
        trq = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterTrq
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_GreaterTrq_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_swigregister
EventControl_Event_InputFunctionArguments_GreaterTrq_swigregister(EventControl_Event_InputFunctionArguments_GreaterTrq)

class EventControl_Event_InputFunctionArguments_LessTrq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_LessTrq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_LessTrq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_set)
    __swig_setmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_set
    __swig_getmethods__["trq"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_get
    if _newclass:
        trq = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_set)
    __swig_setmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_set
    __swig_getmethods__["enableUnsigned"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_get
    if _newclass:
        enableUnsigned = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessTrq()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessTrq
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_LessTrq_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_swigregister
EventControl_Event_InputFunctionArguments_LessTrq_swigregister(EventControl_Event_InputFunctionArguments_LessTrq)

class EventControl_Event_InputFunctionArguments_OpState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_OpState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_OpState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_set)
    __swig_setmethods__["opState"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_set
    __swig_getmethods__["opState"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_get
    if _newclass:
        opState = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OpState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OpState
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_OpState_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_swigregister
EventControl_Event_InputFunctionArguments_OpState_swigregister(EventControl_Event_InputFunctionArguments_OpState)

class EventControl_Event_InputFunctionArguments_PosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_PosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_PosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_PosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_PosSET
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_PosSET_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_swigregister
EventControl_Event_InputFunctionArguments_PosSET_swigregister(EventControl_Event_InputFunctionArguments_PosSET)

class EventControl_Event_InputFunctionArguments_DelayedPosSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_DelayedPosSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_DelayedPosSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayedPosSET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayedPosSET
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_DelayedPosSET_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_swigregister
EventControl_Event_InputFunctionArguments_DelayedPosSET_swigregister(EventControl_Event_InputFunctionArguments_DelayedPosSET)

class EventControl_Event_InputFunctionArguments_CommandDistributedEnd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_CommandDistributedEnd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_CommandDistributedEnd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CommandDistributedEnd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CommandDistributedEnd
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_CommandDistributedEnd_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_swigregister
EventControl_Event_InputFunctionArguments_CommandDistributedEnd_swigregister(EventControl_Event_InputFunctionArguments_CommandDistributedEnd)

class EventControl_Event_InputFunctionArguments_RemainingTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_RemainingTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_RemainingTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_RemainingTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_RemainingTime
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_RemainingTime_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_swigregister
EventControl_Event_InputFunctionArguments_RemainingTime_swigregister(EventControl_Event_InputFunctionArguments_RemainingTime)

class EventControl_Event_InputFunctionArguments_RemainingDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_RemainingDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_RemainingDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_RemainingDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_RemainingDistance
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_RemainingDistance_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_swigregister
EventControl_Event_InputFunctionArguments_RemainingDistance_swigregister(EventControl_Event_InputFunctionArguments_RemainingDistance)

class EventControl_Event_InputFunctionArguments_CompletedDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_CompletedDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_CompletedDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_set)
    __swig_setmethods__["distance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_set
    __swig_getmethods__["distance"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_get
    if _newclass:
        distance = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CompletedDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CompletedDistance
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_CompletedDistance_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_swigregister
EventControl_Event_InputFunctionArguments_CompletedDistance_swigregister(EventControl_Event_InputFunctionArguments_CompletedDistance)

class EventControl_Event_InputFunctionArguments_CompletedTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_InputFunctionArguments_CompletedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_InputFunctionArguments_CompletedTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_set)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CompletedTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CompletedTime
    __del__ = lambda self: None
EventControl_Event_InputFunctionArguments_CompletedTime_swigregister = _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_swigregister
EventControl_Event_InputFunctionArguments_CompletedTime_swigregister(EventControl_Event_InputFunctionArguments_CompletedTime)

class EventControl_Event_OutputFunctionArguments_None(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_None, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_None, name)
    __repr__ = _swig_repr
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_None()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_None
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_None_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_swigregister
EventControl_Event_OutputFunctionArguments_None_swigregister(EventControl_Event_OutputFunctionArguments_None)

class EventControl_Event_OutputFunctionArguments_SetIOOutBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_SetIOOutBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_SetIOOutBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_SetIOOutBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_SetIOOutBit
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_SetIOOutBit_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_swigregister
EventControl_Event_OutputFunctionArguments_SetIOOutBit_swigregister(EventControl_Event_OutputFunctionArguments_SetIOOutBit)

class EventControl_Event_OutputFunctionArguments_SetMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_SetMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_SetMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_SetMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_SetMBit
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_SetMBit_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_swigregister
EventControl_Event_OutputFunctionArguments_SetMBit_swigregister(EventControl_Event_OutputFunctionArguments_SetMBit)

class EventControl_Event_OutputFunctionArguments_EnableAnotherEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_EnableAnotherEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_EnableAnotherEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_set
    __swig_getmethods__["eventID"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_get
    if _newclass:
        eventID = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_EnableAnotherEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_EnableAnotherEvent
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_swigregister
EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_swigregister(EventControl_Event_OutputFunctionArguments_EnableAnotherEvent)

class EventControl_Event_OutputFunctionArguments_StopSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StopSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StopSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StopSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StopSingleAxis
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StopSingleAxis_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_swigregister
EventControl_Event_OutputFunctionArguments_StopSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_StopSingleAxis)

class EventControl_Event_OutputFunctionArguments_StartSinglePos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StartSinglePos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StartSinglePos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartSinglePos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartSinglePos
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StartSinglePos_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_swigregister
EventControl_Event_OutputFunctionArguments_StartSinglePos_swigregister(EventControl_Event_OutputFunctionArguments_StartSinglePos)

class EventControl_Event_OutputFunctionArguments_StartSingleMov(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StartSingleMov, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StartSingleMov, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartSingleMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartSingleMov
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StartSingleMov_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_swigregister
EventControl_Event_OutputFunctionArguments_StartSingleMov_swigregister(EventControl_Event_OutputFunctionArguments_StartSingleMov)

class EventControl_Event_OutputFunctionArguments_StartMultiplePos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StartMultiplePos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StartMultiplePos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetTarget(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetType(self, index)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetVelocity(self, index)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAcc(self, index)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetDec(self, index)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkAcc(self, index)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkDec(self, index)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkAccRatio(self, index)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkDecRatio(self, index)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAccTime(self, index)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetDecTime(self, index)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetStartingVelocity(self, index)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetEndVelocity(self, index)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetSecondVelocity(self, index)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartMultiplePos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartMultiplePos
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StartMultiplePos_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_swigregister
EventControl_Event_OutputFunctionArguments_StartMultiplePos_swigregister(EventControl_Event_OutputFunctionArguments_StartMultiplePos)

class EventControl_Event_OutputFunctionArguments_StartMultipleMov(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StartMultipleMov, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StartMultipleMov, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetTarget(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetType(self, index)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetVelocity(self, index)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAcc(self, index)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetDec(self, index)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkAcc(self, index)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkDec(self, index)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkAccRatio(self, index)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkDecRatio(self, index)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAccTime(self, index)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetDecTime(self, index)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetStartingVelocity(self, index)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetEndVelocity(self, index)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetSecondVelocity(self, index)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartMultipleMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartMultipleMov
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StartMultipleMov_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_swigregister
EventControl_Event_OutputFunctionArguments_StartMultipleMov_swigregister(EventControl_Event_OutputFunctionArguments_StartMultipleMov)

class EventControl_Event_OutputFunctionArguments_LinearIntplPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_LinearIntplPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_LinearIntplPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetTarget(self, index)
    __swig_setmethods__["maxVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_set
    __swig_getmethods__["maxVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_get
    if _newclass:
        maxVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxVelocity(self, index)
    __swig_setmethods__["maxAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_set
    __swig_getmethods__["maxAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_get
    if _newclass:
        maxAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxAcc(self, index)
    __swig_setmethods__["maxDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_set
    __swig_getmethods__["maxDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_get
    if _newclass:
        maxDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxDec(self, index)
    __swig_setmethods__["maxJerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_set
    __swig_getmethods__["maxJerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_get
    if _newclass:
        maxJerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxJerkAcc(self, index)
    __swig_setmethods__["maxJerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_set
    __swig_getmethods__["maxJerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_get
    if _newclass:
        maxJerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxJerkDec(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_LinearIntplPos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_LinearIntplPos
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_LinearIntplPos_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_swigregister
EventControl_Event_OutputFunctionArguments_LinearIntplPos_swigregister(EventControl_Event_OutputFunctionArguments_LinearIntplPos)

class EventControl_Event_OutputFunctionArguments_LinearIntplMov(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_LinearIntplMov, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_LinearIntplMov, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetTarget(self, index)
    __swig_setmethods__["maxVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_set
    __swig_getmethods__["maxVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_get
    if _newclass:
        maxVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxVelocity(self, index)
    __swig_setmethods__["maxAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_set
    __swig_getmethods__["maxAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_get
    if _newclass:
        maxAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxAcc(self, index)
    __swig_setmethods__["maxDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_set
    __swig_getmethods__["maxDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_get
    if _newclass:
        maxDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxDec(self, index)
    __swig_setmethods__["maxJerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_set
    __swig_getmethods__["maxJerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_get
    if _newclass:
        maxJerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxJerkAcc(self, index)
    __swig_setmethods__["maxJerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_set
    __swig_getmethods__["maxJerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_get
    if _newclass:
        maxJerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxJerkDec(self, index)
    __swig_setmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_set)
    __swig_setmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_set
    __swig_getmethods__["accTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_get
    if _newclass:
        accTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_set)
    __swig_setmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_set
    __swig_getmethods__["decTime"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_get
    if _newclass:
        decTime = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_LinearIntplMov()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_LinearIntplMov
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_LinearIntplMov_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_swigregister
EventControl_Event_OutputFunctionArguments_LinearIntplMov_swigregister(EventControl_Event_OutputFunctionArguments_LinearIntplMov)

class EventControl_Event_OutputFunctionArguments_StartAPIBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_StartAPIBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_StartAPIBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartAPIBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartAPIBuffer
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_StartAPIBuffer_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_swigregister
EventControl_Event_OutputFunctionArguments_StartAPIBuffer_swigregister(EventControl_Event_OutputFunctionArguments_StartAPIBuffer)

class EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_swigregister
EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis)

class EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_swigregister
EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis)

class EventControl_Event_OutputFunctionArguments_ExecEStop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_ExecEStop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_ExecEStop, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eStopLevel"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_set
    __swig_getmethods__["eStopLevel"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_get
    if _newclass:
        eStopLevel = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_set)
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ExecEStop()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ExecEStop
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_ExecEStop_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_swigregister
EventControl_Event_OutputFunctionArguments_ExecEStop_swigregister(EventControl_Event_OutputFunctionArguments_ExecEStop)

class EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_swigregister
EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_swigregister(EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder)

class EventControl_Event_OutputFunctionArguments_ResetFlightRecorder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event_OutputFunctionArguments_ResetFlightRecorder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event_OutputFunctionArguments_ResetFlightRecorder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_set
    __swig_getmethods__["singleShot"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_get
    if _newclass:
        singleShot = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_set)
    __swig_setmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_set
    __swig_getmethods__["disableAfterActivate"] = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_get
    if _newclass:
        disableAfterActivate = _swig_property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ResetFlightRecorder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ResetFlightRecorder
    __del__ = lambda self: None
EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_swigregister = _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_swigregister
EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_swigregister(EventControl_Event_OutputFunctionArguments_ResetFlightRecorder)

class EventControl_Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_Event, name)
    __repr__ = _swig_repr

    def GetData(self, event):
        return _WMX3ApiPython.EventControl_Event_GetData(self, event)

    def SetData(self, event):
        return _WMX3ApiPython.EventControl_Event_SetData(self, event)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EventControl_Event_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EventControl_Event_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EventControl_Event_enabled_get, _WMX3ApiPython.EventControl_Event_enabled_set)
    __swig_setmethods__["inputFunction"] = _WMX3ApiPython.EventControl_Event_inputFunction_set
    __swig_getmethods__["inputFunction"] = _WMX3ApiPython.EventControl_Event_inputFunction_get
    if _newclass:
        inputFunction = _swig_property(_WMX3ApiPython.EventControl_Event_inputFunction_get, _WMX3ApiPython.EventControl_Event_inputFunction_set)
    __swig_setmethods__["input_none"] = _WMX3ApiPython.EventControl_Event_input_none_set
    __swig_getmethods__["input_none"] = _WMX3ApiPython.EventControl_Event_input_none_get
    if _newclass:
        input_none = _swig_property(_WMX3ApiPython.EventControl_Event_input_none_get, _WMX3ApiPython.EventControl_Event_input_none_set)
    __swig_setmethods__["input_ioBit"] = _WMX3ApiPython.EventControl_Event_input_ioBit_set
    __swig_getmethods__["input_ioBit"] = _WMX3ApiPython.EventControl_Event_input_ioBit_get
    if _newclass:
        input_ioBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_ioBit_get, _WMX3ApiPython.EventControl_Event_input_ioBit_set)
    __swig_setmethods__["input_notIOBit"] = _WMX3ApiPython.EventControl_Event_input_notIOBit_set
    __swig_getmethods__["input_notIOBit"] = _WMX3ApiPython.EventControl_Event_input_notIOBit_get
    if _newclass:
        input_notIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_notIOBit_get, _WMX3ApiPython.EventControl_Event_input_notIOBit_set)
    __swig_setmethods__["input_orIOBit"] = _WMX3ApiPython.EventControl_Event_input_orIOBit_set
    __swig_getmethods__["input_orIOBit"] = _WMX3ApiPython.EventControl_Event_input_orIOBit_get
    if _newclass:
        input_orIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_orIOBit_get, _WMX3ApiPython.EventControl_Event_input_orIOBit_set)
    __swig_setmethods__["input_andIOBit"] = _WMX3ApiPython.EventControl_Event_input_andIOBit_set
    __swig_getmethods__["input_andIOBit"] = _WMX3ApiPython.EventControl_Event_input_andIOBit_get
    if _newclass:
        input_andIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_andIOBit_get, _WMX3ApiPython.EventControl_Event_input_andIOBit_set)
    __swig_setmethods__["input_xorIOBit"] = _WMX3ApiPython.EventControl_Event_input_xorIOBit_set
    __swig_getmethods__["input_xorIOBit"] = _WMX3ApiPython.EventControl_Event_input_xorIOBit_get
    if _newclass:
        input_xorIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_xorIOBit_get, _WMX3ApiPython.EventControl_Event_input_xorIOBit_set)
    __swig_setmethods__["input_nandIOBit"] = _WMX3ApiPython.EventControl_Event_input_nandIOBit_set
    __swig_getmethods__["input_nandIOBit"] = _WMX3ApiPython.EventControl_Event_input_nandIOBit_get
    if _newclass:
        input_nandIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_nandIOBit_get, _WMX3ApiPython.EventControl_Event_input_nandIOBit_set)
    __swig_setmethods__["input_norIOBit"] = _WMX3ApiPython.EventControl_Event_input_norIOBit_set
    __swig_getmethods__["input_norIOBit"] = _WMX3ApiPython.EventControl_Event_input_norIOBit_get
    if _newclass:
        input_norIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_norIOBit_get, _WMX3ApiPython.EventControl_Event_input_norIOBit_set)
    __swig_setmethods__["input_xnorIOBit"] = _WMX3ApiPython.EventControl_Event_input_xnorIOBit_set
    __swig_getmethods__["input_xnorIOBit"] = _WMX3ApiPython.EventControl_Event_input_xnorIOBit_get
    if _newclass:
        input_xnorIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_xnorIOBit_get, _WMX3ApiPython.EventControl_Event_input_xnorIOBit_set)
    __swig_setmethods__["input_delayIOBit"] = _WMX3ApiPython.EventControl_Event_input_delayIOBit_set
    __swig_getmethods__["input_delayIOBit"] = _WMX3ApiPython.EventControl_Event_input_delayIOBit_get
    if _newclass:
        input_delayIOBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_delayIOBit_get, _WMX3ApiPython.EventControl_Event_input_delayIOBit_set)
    __swig_setmethods__["input_mBit"] = _WMX3ApiPython.EventControl_Event_input_mBit_set
    __swig_getmethods__["input_mBit"] = _WMX3ApiPython.EventControl_Event_input_mBit_get
    if _newclass:
        input_mBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_mBit_get, _WMX3ApiPython.EventControl_Event_input_mBit_set)
    __swig_setmethods__["input_notMBit"] = _WMX3ApiPython.EventControl_Event_input_notMBit_set
    __swig_getmethods__["input_notMBit"] = _WMX3ApiPython.EventControl_Event_input_notMBit_get
    if _newclass:
        input_notMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_notMBit_get, _WMX3ApiPython.EventControl_Event_input_notMBit_set)
    __swig_setmethods__["input_orMBit"] = _WMX3ApiPython.EventControl_Event_input_orMBit_set
    __swig_getmethods__["input_orMBit"] = _WMX3ApiPython.EventControl_Event_input_orMBit_get
    if _newclass:
        input_orMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_orMBit_get, _WMX3ApiPython.EventControl_Event_input_orMBit_set)
    __swig_setmethods__["input_andMBit"] = _WMX3ApiPython.EventControl_Event_input_andMBit_set
    __swig_getmethods__["input_andMBit"] = _WMX3ApiPython.EventControl_Event_input_andMBit_get
    if _newclass:
        input_andMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_andMBit_get, _WMX3ApiPython.EventControl_Event_input_andMBit_set)
    __swig_setmethods__["input_xorMBit"] = _WMX3ApiPython.EventControl_Event_input_xorMBit_set
    __swig_getmethods__["input_xorMBit"] = _WMX3ApiPython.EventControl_Event_input_xorMBit_get
    if _newclass:
        input_xorMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_xorMBit_get, _WMX3ApiPython.EventControl_Event_input_xorMBit_set)
    __swig_setmethods__["input_nandMBit"] = _WMX3ApiPython.EventControl_Event_input_nandMBit_set
    __swig_getmethods__["input_nandMBit"] = _WMX3ApiPython.EventControl_Event_input_nandMBit_get
    if _newclass:
        input_nandMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_nandMBit_get, _WMX3ApiPython.EventControl_Event_input_nandMBit_set)
    __swig_setmethods__["input_norMBit"] = _WMX3ApiPython.EventControl_Event_input_norMBit_set
    __swig_getmethods__["input_norMBit"] = _WMX3ApiPython.EventControl_Event_input_norMBit_get
    if _newclass:
        input_norMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_norMBit_get, _WMX3ApiPython.EventControl_Event_input_norMBit_set)
    __swig_setmethods__["input_xnorMBit"] = _WMX3ApiPython.EventControl_Event_input_xnorMBit_set
    __swig_getmethods__["input_xnorMBit"] = _WMX3ApiPython.EventControl_Event_input_xnorMBit_get
    if _newclass:
        input_xnorMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_xnorMBit_get, _WMX3ApiPython.EventControl_Event_input_xnorMBit_set)
    __swig_setmethods__["input_delayMBit"] = _WMX3ApiPython.EventControl_Event_input_delayMBit_set
    __swig_getmethods__["input_delayMBit"] = _WMX3ApiPython.EventControl_Event_input_delayMBit_get
    if _newclass:
        input_delayMBit = _swig_property(_WMX3ApiPython.EventControl_Event_input_delayMBit_get, _WMX3ApiPython.EventControl_Event_input_delayMBit_set)
    __swig_setmethods__["input_anotherEvent"] = _WMX3ApiPython.EventControl_Event_input_anotherEvent_set
    __swig_getmethods__["input_anotherEvent"] = _WMX3ApiPython.EventControl_Event_input_anotherEvent_get
    if _newclass:
        input_anotherEvent = _swig_property(_WMX3ApiPython.EventControl_Event_input_anotherEvent_get, _WMX3ApiPython.EventControl_Event_input_anotherEvent_set)
    __swig_setmethods__["input_delayAnotherEvent"] = _WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_set
    __swig_getmethods__["input_delayAnotherEvent"] = _WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_get
    if _newclass:
        input_delayAnotherEvent = _swig_property(_WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_get, _WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_set)
    __swig_setmethods__["input_equalPos"] = _WMX3ApiPython.EventControl_Event_input_equalPos_set
    __swig_getmethods__["input_equalPos"] = _WMX3ApiPython.EventControl_Event_input_equalPos_get
    if _newclass:
        input_equalPos = _swig_property(_WMX3ApiPython.EventControl_Event_input_equalPos_get, _WMX3ApiPython.EventControl_Event_input_equalPos_set)
    __swig_setmethods__["input_greaterPos"] = _WMX3ApiPython.EventControl_Event_input_greaterPos_set
    __swig_getmethods__["input_greaterPos"] = _WMX3ApiPython.EventControl_Event_input_greaterPos_get
    if _newclass:
        input_greaterPos = _swig_property(_WMX3ApiPython.EventControl_Event_input_greaterPos_get, _WMX3ApiPython.EventControl_Event_input_greaterPos_set)
    __swig_setmethods__["input_lessPos"] = _WMX3ApiPython.EventControl_Event_input_lessPos_set
    __swig_getmethods__["input_lessPos"] = _WMX3ApiPython.EventControl_Event_input_lessPos_get
    if _newclass:
        input_lessPos = _swig_property(_WMX3ApiPython.EventControl_Event_input_lessPos_get, _WMX3ApiPython.EventControl_Event_input_lessPos_set)
    __swig_setmethods__["input_equalVelocity"] = _WMX3ApiPython.EventControl_Event_input_equalVelocity_set
    __swig_getmethods__["input_equalVelocity"] = _WMX3ApiPython.EventControl_Event_input_equalVelocity_get
    if _newclass:
        input_equalVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_input_equalVelocity_get, _WMX3ApiPython.EventControl_Event_input_equalVelocity_set)
    __swig_setmethods__["input_greaterVelocity"] = _WMX3ApiPython.EventControl_Event_input_greaterVelocity_set
    __swig_getmethods__["input_greaterVelocity"] = _WMX3ApiPython.EventControl_Event_input_greaterVelocity_get
    if _newclass:
        input_greaterVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_input_greaterVelocity_get, _WMX3ApiPython.EventControl_Event_input_greaterVelocity_set)
    __swig_setmethods__["input_lessVelocity"] = _WMX3ApiPython.EventControl_Event_input_lessVelocity_set
    __swig_getmethods__["input_lessVelocity"] = _WMX3ApiPython.EventControl_Event_input_lessVelocity_get
    if _newclass:
        input_lessVelocity = _swig_property(_WMX3ApiPython.EventControl_Event_input_lessVelocity_get, _WMX3ApiPython.EventControl_Event_input_lessVelocity_set)
    __swig_setmethods__["input_equalTrq"] = _WMX3ApiPython.EventControl_Event_input_equalTrq_set
    __swig_getmethods__["input_equalTrq"] = _WMX3ApiPython.EventControl_Event_input_equalTrq_get
    if _newclass:
        input_equalTrq = _swig_property(_WMX3ApiPython.EventControl_Event_input_equalTrq_get, _WMX3ApiPython.EventControl_Event_input_equalTrq_set)
    __swig_setmethods__["input_greaterTrq"] = _WMX3ApiPython.EventControl_Event_input_greaterTrq_set
    __swig_getmethods__["input_greaterTrq"] = _WMX3ApiPython.EventControl_Event_input_greaterTrq_get
    if _newclass:
        input_greaterTrq = _swig_property(_WMX3ApiPython.EventControl_Event_input_greaterTrq_get, _WMX3ApiPython.EventControl_Event_input_greaterTrq_set)
    __swig_setmethods__["input_lessTrq"] = _WMX3ApiPython.EventControl_Event_input_lessTrq_set
    __swig_getmethods__["input_lessTrq"] = _WMX3ApiPython.EventControl_Event_input_lessTrq_get
    if _newclass:
        input_lessTrq = _swig_property(_WMX3ApiPython.EventControl_Event_input_lessTrq_get, _WMX3ApiPython.EventControl_Event_input_lessTrq_set)
    __swig_setmethods__["input_opState"] = _WMX3ApiPython.EventControl_Event_input_opState_set
    __swig_getmethods__["input_opState"] = _WMX3ApiPython.EventControl_Event_input_opState_get
    if _newclass:
        input_opState = _swig_property(_WMX3ApiPython.EventControl_Event_input_opState_get, _WMX3ApiPython.EventControl_Event_input_opState_set)
    __swig_setmethods__["input_posSET"] = _WMX3ApiPython.EventControl_Event_input_posSET_set
    __swig_getmethods__["input_posSET"] = _WMX3ApiPython.EventControl_Event_input_posSET_get
    if _newclass:
        input_posSET = _swig_property(_WMX3ApiPython.EventControl_Event_input_posSET_get, _WMX3ApiPython.EventControl_Event_input_posSET_set)
    __swig_setmethods__["input_delayedPosSET"] = _WMX3ApiPython.EventControl_Event_input_delayedPosSET_set
    __swig_getmethods__["input_delayedPosSET"] = _WMX3ApiPython.EventControl_Event_input_delayedPosSET_get
    if _newclass:
        input_delayedPosSET = _swig_property(_WMX3ApiPython.EventControl_Event_input_delayedPosSET_get, _WMX3ApiPython.EventControl_Event_input_delayedPosSET_set)
    __swig_setmethods__["input_commandDistributedEnd"] = _WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_set
    __swig_getmethods__["input_commandDistributedEnd"] = _WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_get
    if _newclass:
        input_commandDistributedEnd = _swig_property(_WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_get, _WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_set)
    __swig_setmethods__["input_remainingTime"] = _WMX3ApiPython.EventControl_Event_input_remainingTime_set
    __swig_getmethods__["input_remainingTime"] = _WMX3ApiPython.EventControl_Event_input_remainingTime_get
    if _newclass:
        input_remainingTime = _swig_property(_WMX3ApiPython.EventControl_Event_input_remainingTime_get, _WMX3ApiPython.EventControl_Event_input_remainingTime_set)
    __swig_setmethods__["input_remainingDistance"] = _WMX3ApiPython.EventControl_Event_input_remainingDistance_set
    __swig_getmethods__["input_remainingDistance"] = _WMX3ApiPython.EventControl_Event_input_remainingDistance_get
    if _newclass:
        input_remainingDistance = _swig_property(_WMX3ApiPython.EventControl_Event_input_remainingDistance_get, _WMX3ApiPython.EventControl_Event_input_remainingDistance_set)
    __swig_setmethods__["input_completedDistance"] = _WMX3ApiPython.EventControl_Event_input_completedDistance_set
    __swig_getmethods__["input_completedDistance"] = _WMX3ApiPython.EventControl_Event_input_completedDistance_get
    if _newclass:
        input_completedDistance = _swig_property(_WMX3ApiPython.EventControl_Event_input_completedDistance_get, _WMX3ApiPython.EventControl_Event_input_completedDistance_set)
    __swig_setmethods__["input_completedTime"] = _WMX3ApiPython.EventControl_Event_input_completedTime_set
    __swig_getmethods__["input_completedTime"] = _WMX3ApiPython.EventControl_Event_input_completedTime_get
    if _newclass:
        input_completedTime = _swig_property(_WMX3ApiPython.EventControl_Event_input_completedTime_get, _WMX3ApiPython.EventControl_Event_input_completedTime_set)
    __swig_setmethods__["outputFunction"] = _WMX3ApiPython.EventControl_Event_outputFunction_set
    __swig_getmethods__["outputFunction"] = _WMX3ApiPython.EventControl_Event_outputFunction_get
    if _newclass:
        outputFunction = _swig_property(_WMX3ApiPython.EventControl_Event_outputFunction_get, _WMX3ApiPython.EventControl_Event_outputFunction_set)
    __swig_setmethods__["output_none"] = _WMX3ApiPython.EventControl_Event_output_none_set
    __swig_getmethods__["output_none"] = _WMX3ApiPython.EventControl_Event_output_none_get
    if _newclass:
        output_none = _swig_property(_WMX3ApiPython.EventControl_Event_output_none_get, _WMX3ApiPython.EventControl_Event_output_none_set)
    __swig_setmethods__["output_setIOOutBit"] = _WMX3ApiPython.EventControl_Event_output_setIOOutBit_set
    __swig_getmethods__["output_setIOOutBit"] = _WMX3ApiPython.EventControl_Event_output_setIOOutBit_get
    if _newclass:
        output_setIOOutBit = _swig_property(_WMX3ApiPython.EventControl_Event_output_setIOOutBit_get, _WMX3ApiPython.EventControl_Event_output_setIOOutBit_set)
    __swig_setmethods__["output_setMBit"] = _WMX3ApiPython.EventControl_Event_output_setMBit_set
    __swig_getmethods__["output_setMBit"] = _WMX3ApiPython.EventControl_Event_output_setMBit_get
    if _newclass:
        output_setMBit = _swig_property(_WMX3ApiPython.EventControl_Event_output_setMBit_get, _WMX3ApiPython.EventControl_Event_output_setMBit_set)
    __swig_setmethods__["output_enableAnotherEvent"] = _WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_set
    __swig_getmethods__["output_enableAnotherEvent"] = _WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_get
    if _newclass:
        output_enableAnotherEvent = _swig_property(_WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_get, _WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_set)
    __swig_setmethods__["output_stopSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_stopSingleAxis_set
    __swig_getmethods__["output_stopSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_stopSingleAxis_get
    if _newclass:
        output_stopSingleAxis = _swig_property(_WMX3ApiPython.EventControl_Event_output_stopSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_stopSingleAxis_set)
    __swig_setmethods__["output_startSinglePos"] = _WMX3ApiPython.EventControl_Event_output_startSinglePos_set
    __swig_getmethods__["output_startSinglePos"] = _WMX3ApiPython.EventControl_Event_output_startSinglePos_get
    if _newclass:
        output_startSinglePos = _swig_property(_WMX3ApiPython.EventControl_Event_output_startSinglePos_get, _WMX3ApiPython.EventControl_Event_output_startSinglePos_set)
    __swig_setmethods__["output_startSingleMov"] = _WMX3ApiPython.EventControl_Event_output_startSingleMov_set
    __swig_getmethods__["output_startSingleMov"] = _WMX3ApiPython.EventControl_Event_output_startSingleMov_get
    if _newclass:
        output_startSingleMov = _swig_property(_WMX3ApiPython.EventControl_Event_output_startSingleMov_get, _WMX3ApiPython.EventControl_Event_output_startSingleMov_set)
    __swig_setmethods__["output_startMultiplePos"] = _WMX3ApiPython.EventControl_Event_output_startMultiplePos_set
    __swig_getmethods__["output_startMultiplePos"] = _WMX3ApiPython.EventControl_Event_output_startMultiplePos_get
    if _newclass:
        output_startMultiplePos = _swig_property(_WMX3ApiPython.EventControl_Event_output_startMultiplePos_get, _WMX3ApiPython.EventControl_Event_output_startMultiplePos_set)
    __swig_setmethods__["output_startMultipleMov"] = _WMX3ApiPython.EventControl_Event_output_startMultipleMov_set
    __swig_getmethods__["output_startMultipleMov"] = _WMX3ApiPython.EventControl_Event_output_startMultipleMov_get
    if _newclass:
        output_startMultipleMov = _swig_property(_WMX3ApiPython.EventControl_Event_output_startMultipleMov_get, _WMX3ApiPython.EventControl_Event_output_startMultipleMov_set)
    __swig_setmethods__["output_linearIntplPos"] = _WMX3ApiPython.EventControl_Event_output_linearIntplPos_set
    __swig_getmethods__["output_linearIntplPos"] = _WMX3ApiPython.EventControl_Event_output_linearIntplPos_get
    if _newclass:
        output_linearIntplPos = _swig_property(_WMX3ApiPython.EventControl_Event_output_linearIntplPos_get, _WMX3ApiPython.EventControl_Event_output_linearIntplPos_set)
    __swig_setmethods__["output_linearIntplMov"] = _WMX3ApiPython.EventControl_Event_output_linearIntplMov_set
    __swig_getmethods__["output_linearIntplMov"] = _WMX3ApiPython.EventControl_Event_output_linearIntplMov_get
    if _newclass:
        output_linearIntplMov = _swig_property(_WMX3ApiPython.EventControl_Event_output_linearIntplMov_get, _WMX3ApiPython.EventControl_Event_output_linearIntplMov_set)
    __swig_setmethods__["output_startAPIBuffer"] = _WMX3ApiPython.EventControl_Event_output_startAPIBuffer_set
    __swig_getmethods__["output_startAPIBuffer"] = _WMX3ApiPython.EventControl_Event_output_startAPIBuffer_get
    if _newclass:
        output_startAPIBuffer = _swig_property(_WMX3ApiPython.EventControl_Event_output_startAPIBuffer_get, _WMX3ApiPython.EventControl_Event_output_startAPIBuffer_set)
    __swig_setmethods__["output_execQuickStopSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_set
    __swig_getmethods__["output_execQuickStopSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_get
    if _newclass:
        output_execQuickStopSingleAxis = _swig_property(_WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_set)
    __swig_setmethods__["output_overrideVelSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_set
    __swig_getmethods__["output_overrideVelSingleAxis"] = _WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_get
    if _newclass:
        output_overrideVelSingleAxis = _swig_property(_WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_set)
    __swig_setmethods__["output_execEStop"] = _WMX3ApiPython.EventControl_Event_output_execEStop_set
    __swig_getmethods__["output_execEStop"] = _WMX3ApiPython.EventControl_Event_output_execEStop_get
    if _newclass:
        output_execEStop = _swig_property(_WMX3ApiPython.EventControl_Event_output_execEStop_get, _WMX3ApiPython.EventControl_Event_output_execEStop_set)
    __swig_setmethods__["output_triggerFlightRecorder"] = _WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_set
    __swig_getmethods__["output_triggerFlightRecorder"] = _WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_get
    if _newclass:
        output_triggerFlightRecorder = _swig_property(_WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_get, _WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_set)
    __swig_setmethods__["output_resetFlightRecorder"] = _WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_set
    __swig_getmethods__["output_resetFlightRecorder"] = _WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_get
    if _newclass:
        output_resetFlightRecorder = _swig_property(_WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_get, _WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event
    __del__ = lambda self: None
EventControl_Event_swigregister = _WMX3ApiPython.EventControl_Event_swigregister
EventControl_Event_swigregister(EventControl_Event)

class EventControl_HardwareTouchProbeStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_HardwareTouchProbeStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_HardwareTouchProbeStatus, name)
    __repr__ = _swig_repr

    def GetData(self, hardwareTouchProbeStatus):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetData(self, hardwareTouchProbeStatus)

    def SetData(self, hardwareTouchProbeStatus):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetData(self, hardwareTouchProbeStatus)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_set)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_set)
    __swig_setmethods__["mode"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_set
    __swig_getmethods__["mode"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_get
    if _newclass:
        mode = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_set)
    __swig_setmethods__["triggerSource"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_set
    __swig_getmethods__["triggerSource"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_get
    if _newclass:
        triggerSource = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_set)
    __swig_setmethods__["channel"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_set
    __swig_getmethods__["channel"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_get
    if _newclass:
        channel = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_set)
    __swig_setmethods__["latched"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_set
    __swig_getmethods__["latched"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_get
    if _newclass:
        latched = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_set)
    __swig_setmethods__["latchedValueCount"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_set
    __swig_getmethods__["latchedValueCount"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_get
    if _newclass:
        latchedValueCount = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_set)
    __swig_setmethods__["latchedValue"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_set
    __swig_getmethods__["latchedValue"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_get
    if _newclass:
        latchedValue = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_set)

    def SetLatchedValue(self, index, value):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetLatchedValue(self, index, value)

    def GetLatchedValue(self, index):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetLatchedValue(self, index)
    __swig_setmethods__["latchedPos"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_set
    __swig_getmethods__["latchedPos"] = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_get
    if _newclass:
        latchedPos = _swig_property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_set)

    def SetLatchedPos(self, index, value):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetLatchedPos(self, index, value)

    def GetLatchedPos(self, index):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetLatchedPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_HardwareTouchProbeStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_HardwareTouchProbeStatus
    __del__ = lambda self: None
EventControl_HardwareTouchProbeStatus_swigregister = _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_swigregister
EventControl_HardwareTouchProbeStatus_swigregister(EventControl_HardwareTouchProbeStatus)

class EventControl_PSOOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PSOOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PSOOutput, name)
    __repr__ = _swig_repr

    def GetData(self, pSOOutput):
        return _WMX3ApiPython.EventControl_PSOOutput_GetData(self, pSOOutput)

    def SetData(self, pSOOutput):
        return _WMX3ApiPython.EventControl_PSOOutput_SetData(self, pSOOutput)
    __swig_setmethods__["outputType"] = _WMX3ApiPython.EventControl_PSOOutput_outputType_set
    __swig_getmethods__["outputType"] = _WMX3ApiPython.EventControl_PSOOutput_outputType_get
    if _newclass:
        outputType = _swig_property(_WMX3ApiPython.EventControl_PSOOutput_outputType_get, _WMX3ApiPython.EventControl_PSOOutput_outputType_set)
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.EventControl_PSOOutput_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.EventControl_PSOOutput_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.EventControl_PSOOutput_byteAddress_get, _WMX3ApiPython.EventControl_PSOOutput_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.EventControl_PSOOutput_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.EventControl_PSOOutput_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.EventControl_PSOOutput_bitAddress_get, _WMX3ApiPython.EventControl_PSOOutput_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.EventControl_PSOOutput_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.EventControl_PSOOutput_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.EventControl_PSOOutput_invert_get, _WMX3ApiPython.EventControl_PSOOutput_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PSOOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOutput
    __del__ = lambda self: None
EventControl_PSOOutput_swigregister = _WMX3ApiPython.EventControl_PSOOutput_swigregister
EventControl_PSOOutput_swigregister(EventControl_PSOOutput)

class EventControl_PSOStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PSOStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PSOStatus, name)
    __repr__ = _swig_repr

    def GetData(self, pSOStatus):
        return _WMX3ApiPython.EventControl_PSOStatus_GetData(self, pSOStatus)

    def SetData(self, pSOStatus):
        return _WMX3ApiPython.EventControl_PSOStatus_SetData(self, pSOStatus)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EventControl_PSOStatus_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EventControl_PSOStatus_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EventControl_PSOStatus_enabled_get, _WMX3ApiPython.EventControl_PSOStatus_enabled_set)
    __swig_setmethods__["active"] = _WMX3ApiPython.EventControl_PSOStatus_active_set
    __swig_getmethods__["active"] = _WMX3ApiPython.EventControl_PSOStatus_active_get
    if _newclass:
        active = _swig_property(_WMX3ApiPython.EventControl_PSOStatus_active_get, _WMX3ApiPython.EventControl_PSOStatus_active_set)
    __swig_setmethods__["activeDataIndex"] = _WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_set
    __swig_getmethods__["activeDataIndex"] = _WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_get
    if _newclass:
        activeDataIndex = _swig_property(_WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_get, _WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_set)
    __swig_setmethods__["output"] = _WMX3ApiPython.EventControl_PSOStatus_output_set
    __swig_getmethods__["output"] = _WMX3ApiPython.EventControl_PSOStatus_output_get
    if _newclass:
        output = _swig_property(_WMX3ApiPython.EventControl_PSOStatus_output_get, _WMX3ApiPython.EventControl_PSOStatus_output_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PSOStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOStatus
    __del__ = lambda self: None
EventControl_PSOStatus_swigregister = _WMX3ApiPython.EventControl_PSOStatus_swigregister
EventControl_PSOStatus_swigregister(EventControl_PSOStatus)

class EventControl_PSOOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PSOOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PSOOption, name)
    __repr__ = _swig_repr

    def GetData(self, pPSOOption):
        return _WMX3ApiPython.EventControl_PSOOption_GetData(self, pPSOOption)

    def SetData(self, pPSOOption):
        return _WMX3ApiPython.EventControl_PSOOption_SetData(self, pPSOOption)
    __swig_setmethods__["allowTriggerOnStart"] = _WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_set
    __swig_getmethods__["allowTriggerOnStart"] = _WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_get
    if _newclass:
        allowTriggerOnStart = _swig_property(_WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_get, _WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PSOOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOption
    __del__ = lambda self: None
EventControl_PSOOption_swigregister = _WMX3ApiPython.EventControl_PSOOption_swigregister
EventControl_PSOOption_swigregister(EventControl_PSOOption)

class EventControl_ComparatorSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_ComparatorSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_ComparatorSource, name)
    __repr__ = _swig_repr

    def GetData(self, comparatorSource):
        return _WMX3ApiPython.EventControl_ComparatorSource_GetData(self, comparatorSource)

    def SetData(self, comparatorSource):
        return _WMX3ApiPython.EventControl_ComparatorSource_SetData(self, comparatorSource)
    __swig_setmethods__["sourceType"] = _WMX3ApiPython.EventControl_ComparatorSource_sourceType_set
    __swig_getmethods__["sourceType"] = _WMX3ApiPython.EventControl_ComparatorSource_sourceType_get
    if _newclass:
        sourceType = _swig_property(_WMX3ApiPython.EventControl_ComparatorSource_sourceType_get, _WMX3ApiPython.EventControl_ComparatorSource_sourceType_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_ComparatorSource_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_ComparatorSource_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_ComparatorSource_axis_get, _WMX3ApiPython.EventControl_ComparatorSource_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_ComparatorSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparatorSource
    __del__ = lambda self: None
EventControl_ComparatorSource_swigregister = _WMX3ApiPython.EventControl_ComparatorSource_swigregister
EventControl_ComparatorSource_swigregister(EventControl_ComparatorSource)

class EventControl_PlannedVelocityData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PlannedVelocityData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PlannedVelocityData, name)
    __repr__ = _swig_repr

    def GetData(self, plannedVelocityData):
        return _WMX3ApiPython.EventControl_PlannedVelocityData_GetData(self, plannedVelocityData)

    def SetData(self, plannedVelocityData):
        return _WMX3ApiPython.EventControl_PlannedVelocityData_SetData(self, plannedVelocityData)
    __swig_setmethods__["pos"] = _WMX3ApiPython.EventControl_PlannedVelocityData_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.EventControl_PlannedVelocityData_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityData_pos_get, _WMX3ApiPython.EventControl_PlannedVelocityData_pos_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.EventControl_PlannedVelocityData_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.EventControl_PlannedVelocityData_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityData_velocity_get, _WMX3ApiPython.EventControl_PlannedVelocityData_velocity_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PlannedVelocityData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityData
    __del__ = lambda self: None
EventControl_PlannedVelocityData_swigregister = _WMX3ApiPython.EventControl_PlannedVelocityData_swigregister
EventControl_PlannedVelocityData_swigregister(EventControl_PlannedVelocityData)

class EventControl_PlannedVelocityStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl_PlannedVelocityStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl_PlannedVelocityStatus, name)
    __repr__ = _swig_repr

    def GetData(self, plannedVelocityStatus):
        return _WMX3ApiPython.EventControl_PlannedVelocityStatus_GetData(self, plannedVelocityStatus)

    def SetData(self, plannedVelocityStatus):
        return _WMX3ApiPython.EventControl_PlannedVelocityStatus_SetData(self, plannedVelocityStatus)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_set)
    __swig_setmethods__["active"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_active_set
    __swig_getmethods__["active"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_active_get
    if _newclass:
        active = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_active_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_active_set)
    __swig_setmethods__["activeDataIndex"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_set
    __swig_getmethods__["activeDataIndex"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_get
    if _newclass:
        activeDataIndex = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_set)
    __swig_setmethods__["activeVelocityCommand"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_set
    __swig_getmethods__["activeVelocityCommand"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_get
    if _newclass:
        activeVelocityCommand = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EventControl_PlannedVelocityStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityStatus
    __del__ = lambda self: None
EventControl_PlannedVelocityStatus_swigregister = _WMX3ApiPython.EventControl_PlannedVelocityStatus_swigregister
EventControl_PlannedVelocityStatus_swigregister(EventControl_PlannedVelocityStatus)

class EventControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _WMX3ApiPython.new_EventControl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.EventControl_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.EventControl_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.EventControl_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.EventControl_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.EventControl_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.EventControl_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.EventControl_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.EventControl_GetVersion(self)

    def SetEvent_Option(self, eventInput, eventOutput, option):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_Option(self, pId, eventInput, eventOutput, option)
        return ret, pId.value()



    def SetEvent_ID(self, eventInput, eventOutput, id):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_ID(self, pId, eventInput, eventOutput, id)
        return ret, pId.value()



    def SetEvent_ID_Option(self, eventInput, eventOutput, id, option):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_ID_Option(self, pId, eventInput, eventOutput, id, option)
        return ret, pId.value()



    def GetEventModuleId(self, id):
        pInputModuleId = intp()
        pOutputModuleId = intp()
        ret = _WMX3ApiPython.EventControl_GetEventModuleId(self, id, pInputModuleId, pOutputModuleId)
        return ret, pInputModuleId.value(), pOutputModuleId.value()



    def GetEvent_InOut(self, id):
        pEventInput = EventApiEventInput()
        pEventOutput = EventApiEventOutput()
        pOption = EventOption()
        ret = _WMX3ApiPython.EventControl_GetEvent_InOut(self, id, pEventInput, pEventOutput, pOption)
        return ret, pEventInput, pEventOutput, pOption



    def GetEventOption(self, id):
        pOption = EventOption()
        ret = _WMX3ApiPython.EventControl_GetEventOption(self, pOption)
        return ret, pOption



    def SetEventInput(self, id, pEventInput):
        return _WMX3ApiPython.EventControl_SetEventInput(self, id, pEventInput)

    def SetEventOutput(self, id, pEventOutput):
        return _WMX3ApiPython.EventControl_SetEventOutput(self, id, pEventOutput)

    def GetEventInput(self, id):
        pEventInput = EventApiEventInput()
        ret = _WMX3ApiPython.EventControl_GetEventInput(self, id, pEventInput)
        return ret, pEventInput



    def GetEventOutput(self, id):
        pEventOutput = EventApiEventOutput()
        ret = _WMX3ApiPython.EventControl_GetEventOutput(self, id, pEventOutput)
        return ret, pEventOutput



    def SetEvent(self, eventInput, eventOutput):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent(self, pId, eventInput, eventOutput)
        return ret, pId.value()



    def GetEvent(self, id):
        pEventData = EventControl_Event()
        ret = _WMX3ApiPython.EventControl_GetEvent(self, id, pEventData)
        return ret, pEventData



    def EnableEvent(self, id, enable):
        return _WMX3ApiPython.EventControl_EnableEvent(self, id, enable)

    def RemoveEvent(self, id):
        return _WMX3ApiPython.EventControl_RemoveEvent(self, id)

    def ClearAllEvent(self):
        return _WMX3ApiPython.EventControl_ClearAllEvent(self)

    def GetAllEventID(self):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID(self, pEventIdData)
        return ret, pEventIdData



    def GetAllEventID_In(self, input):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID_In(self, pEventIdData, input)
        return ret, pEventIdData



    def GetAllEventID_InOut(self, input, output):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID_InOut(self, pEventIdData, input, output)
        return ret, pEventIdData



    def SetSoftwareTouchProbe(self, channel, enable, axis, byteAddrs, bitOffset, logic, mode):
        return _WMX3ApiPython.EventControl_SetSoftwareTouchProbe(self, channel, enable, axis, byteAddrs, bitOffset, logic, mode)

    def EnableSoftwareTouchProbe(self, channel, enable):
        return _WMX3ApiPython.EventControl_EnableSoftwareTouchProbe(self, channel, enable)

    def GetSoftwareTouchProbe(self, channel):
        pEnabled = uintp()
        pAxis = intp()
        pByteAddrs = intp()
        pBitOffset = intp()
        pLogic = uintp()
        pMode = intp()
        ret = _WMX3ApiPython.EventControl_GetSoftwareTouchProbe(self, channel, pEnabled, pAxis, pByteAddrs, pBitOffset, pLogic, pMode)
        return ret, pEnabled.value(), pAxis.value(), pByteAddrs.value(), pBitOffset.value(), pLogic.value(), pMode.value()



    def IsSoftwareTouchProbeLatched(self, channel):
        pLatched = uintp()
        ret = _WMX3ApiPython.EventControl_IsSoftwareTouchProbeLatched(self, channel, pLatched)
        return ret, pLatched.value()



    def GetSoftwareTouchProbeCounterValue(self, channel):
        pLatched = uintp()
        pCounterValue = doublep()
        ret = _WMX3ApiPython.EventControl_GetSoftwareTouchProbeCounterValue(self, channel, pLatched, pCounterValue)
        return ret, pLatched.value(), pCounterValue.value()



    def SetHardwareTouchProbe(self, axis, enable, mode, triggerSource, channel):
        return _WMX3ApiPython.EventControl_SetHardwareTouchProbe(self, axis, enable, mode, triggerSource, channel)

    def GetHardwareTouchProbeStatus(self, channel):
        pStatus = EventControl_HardwareTouchProbeStatus()
        ret = _WMX3ApiPython.EventControl_GetHardwareTouchProbeStatus(self, channel, pStatus)
        return ret, pStatus



    def EnableHardwareTouchProbe(self, axis, enable):
        return _WMX3ApiPython.EventControl_EnableHardwareTouchProbe(self, axis, enable)

    def SetPSOConfig(self, channel, type, pSource, pOutput, minDurationMilliseconds):
        return _WMX3ApiPython.EventControl_SetPSOConfig(self, channel, type, pSource, pOutput, minDurationMilliseconds)

    def SetPSOConfig_Option(self, channel, type, pSource, pOutput, minDurationMilliseconds, pOption):
        return _WMX3ApiPython.EventControl_SetPSOConfig_Option(self, channel, type, pSource, pOutput, minDurationMilliseconds, pOption)

    def GetPSOConfig(self, channel):
        pCount = intp()
        pSource = EventControl_ComparatorSource()
        pOutput = EventControl_PSOOutput()
        pMinDurationMilliseconds = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOConfig(self, channel, pCount, pSource, pOutput, pMinDurationMilliseconds)
        return ret, pCount.value(), pSource, pOutput, pMinDurationMilliseconds.value()



    def GetPSOConfig_Option(self, channel):
        pCount = intp()
        pSource = EventControl_ComparatorSource()
        pOutput = EventControl_PSOOutput()
        pOption = EventControl_PSOOption()
        pMinDurationMilliseconds = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOConfig_Option(self, channel, pCount, pSource, pOutput, pMinDurationMilliseconds, pOption)
        return ret, pCount.value(), pSource, pOutput, pMinDurationMilliseconds.value(), pOption



    def SetPSOSingleData(self, channel, sData):
        return _WMX3ApiPython.EventControl_SetPSOSingleData(self, channel, sData)

    def SetPSOMultipleData(self, channel, count, pMData):
        return _WMX3ApiPython.EventControl_SetPSOMultipleData(self, channel, count, pMData)

    def SetPSOIntervalData(self, channel, rangeStart, rangeEnd, interval):
        return _WMX3ApiPython.EventControl_SetPSOIntervalData(self, channel, rangeStart, rangeEnd, interval)

    def GetPSOData(self, channel, maxCount):
        pCount = intp()
        pMData = []
        dataArray = doubleArray(maxCount)

        ret = _WMX3ApiPython.EventControl_GetPSOData(self, channel, pCount, dataArray, maxCount)
        if ret == 0 and pCount.value() > 0:
            for i in range(pCount.value()):
                pMData.append(dataArray[i])
            return ret, pCount.value(), pMData
        else:
            return ret, pCount.value(), []



    def GetPSODataCount(self, channel):
        pCount = intp()
        ret = _WMX3ApiPython.EventControl_GetPSODataCount(self, channel, pCount)
        return ret, pCount.value()



    def GetPSOIntervalData(self, channel):
        pRangeStart = doublep()
        pRangeEnd = doublep()
        pInterval = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOIntervalData(self, channel, pRangeStart, pRangeEnd, pInterval)
        return ret, pRangeStart.value(), pRangeEnd.value(), pInterval.value()



    def StartPSO(self, channel):
        return _WMX3ApiPython.EventControl_StartPSO(self, channel)

    def StopPSO(self, channel):
        return _WMX3ApiPython.EventControl_StopPSO(self, channel)

    def GetPSOStatus(self, channel):
        pStatus = EventControl_PSOStatus()
        ret = _WMX3ApiPython.EventControl_GetPSOStatus(self, channel, pStatus)
        return ret, pStatus



    def SetPlannedVelOverrideConfig(self, channel, type, pSource, axis):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideConfig(self, channel, type, pSource, axis)

    def GetPlannedVelOverrideConfig(self, channel):
        pType = intp()
        pSource = EventControl_ComparatorSource()
        pAxis = intp()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideConfig(self, channel, pType, pSource, pAxis)
        return ret, pType.value(), pSource, pAxis.value()



    def SetPlannedVelOverrideSingleData(self, channel, sData):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideSingleData(self, channel, sData)

    def SetPlannedVelOverrideMultipleData(self, channel, count, pMData):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideMultipleData(self, channel, count, pMData)

    def GetPlannedVelOverrideData(self, channel, maxCount):
        pCount = intp()
        pMData = []
        dataArray = EventControl_PlannedVelocityDataArray(maxCount)

        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideData(self, channel, pCount, dataArray, maxCount)
        if ret == 0:
            for i in range(pCount.value()):
                pMData.append(dataArray[i])
            return ret, pCount.value(), pMData
        else:
            return ret, pCount.value(), []



    def GetPlannedVelOverrideDataCount(self, channel):
        pCount = intp()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideDataCount(self, channel, pCount)
        return ret, pCount.value()



    def StartPlannedVelOverride(self, channel):
        return _WMX3ApiPython.EventControl_StartPlannedVelOverride(self, channel)

    def StopPlannedVelOverride(self, channel):
        return _WMX3ApiPython.EventControl_StopPlannedVelOverride(self, channel)

    def GetPlannedVelOverrideStatus(self, channel):
        pStatus = EventControl_PlannedVelocityStatus()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideStatus(self, channel, pStatus)
        return ret, pStatus


EventControl_swigregister = _WMX3ApiPython.EventControl_swigregister
EventControl_swigregister(EventControl)

def EventControl_ErrorToString(errCode):
    return _WMX3ApiPython.EventControl_ErrorToString(errCode)
EventControl_ErrorToString = _WMX3ApiPython.EventControl_ErrorToString

def EventControl_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.EventControl_ApiLogToString(pLogData, logDataSize)
EventControl_ApiLogToString = _WMX3ApiPython.EventControl_ApiLogToString

def EventControl_GetLibVersion():
    return _WMX3ApiPython.EventControl_GetLibVersion()
EventControl_GetLibVersion = _WMX3ApiPython.EventControl_GetLibVersion

class AdvancedMotionErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedMotionErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedMotionErrorCode, name)
    __repr__ = _swig_repr
    PositionNotOnPath = _WMX3ApiPython.AdvancedMotionErrorCode_PositionNotOnPath
    SplineModeNotSupported = _WMX3ApiPython.AdvancedMotionErrorCode_SplineModeNotSupported
    SplineStartingPositionNotCurrentPosition = _WMX3ApiPython.AdvancedMotionErrorCode_SplineStartingPositionNotCurrentPosition
    PathInterpolationChannelNotCleared = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationChannelNotCleared
    PathInterpolationConfigurationNotSet = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationConfigurationNotSet
    PathInterpolationAxesHaveBeenMoved = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationAxesHaveBeenMoved
    PathInterpolationAbnormalStop = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationAbnormalStop
    NotConstLinearVelocitySlave = _WMX3ApiPython.AdvancedMotionErrorCode_NotConstLinearVelocitySlave
    ConstLinearVelocityMinRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityMinRTooSmall
    ConstLinearVelocityPositiveMaxRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityPositiveMaxRTooSmall
    ConstLinearVelocityNegativeMaxRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityNegativeMaxRTooSmall
    InvalidCurrentVelocity = _WMX3ApiPython.AdvancedMotionErrorCode_InvalidCurrentVelocity
    MasterPositionNotAscendingOrder = _WMX3ApiPython.AdvancedMotionErrorCode_MasterPositionNotAscendingOrder
    PositionNotWithinSingleTurnEncoderCount = _WMX3ApiPython.AdvancedMotionErrorCode_PositionNotWithinSingleTurnEncoderCount
    TimeBetweenPointsTooClose = _WMX3ApiPython.AdvancedMotionErrorCode_TimeBetweenPointsTooClose
    TotalTimeTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_TotalTimeTooSmall
    DimensionOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DimensionOutOfRange
    PointCountBelowMinimum = _WMX3ApiPython.AdvancedMotionErrorCode_PointCountBelowMinimum
    L1ArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_L1ArgumentOutOfRange
    L2ArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_L2ArgumentOutOfRange
    LdirArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_LdirArgumentOutOfRange
    RzeroArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_RzeroArgumentOutOfRange
    RspanArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_RspanArgumentOutOfRange
    L1ArgumentGreaterThanL2 = _WMX3ApiPython.AdvancedMotionErrorCode_L1ArgumentGreaterThanL2
    SlaveCurrentPositionNotInRange = _WMX3ApiPython.AdvancedMotionErrorCode_SlaveCurrentPositionNotInRange
    OutputCountOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputCountOutOfRange
    OutputPointNotFound = _WMX3ApiPython.AdvancedMotionErrorCode_OutputPointNotFound
    ConfigurationNotSet = _WMX3ApiPython.AdvancedMotionErrorCode_ConfigurationNotSet
    SegmentTypeNotSupported = _WMX3ApiPython.AdvancedMotionErrorCode_SegmentTypeNotSupported
    AngleCorrectionProfileArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_AngleCorrectionProfileArgumentOutOfRange
    AxisNotExecutingPathIntpl = _WMX3ApiPython.AdvancedMotionErrorCode_AxisNotExecutingPathIntpl
    AxisNotExecutingPathIntpl3D = _WMX3ApiPython.AdvancedMotionErrorCode_AxisNotExecutingPathIntpl3D
    VelocityMultiplierOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_VelocityMultiplierOutOfRange
    NoCommandsInBuffer = _WMX3ApiPython.AdvancedMotionErrorCode_NoCommandsInBuffer
    DancerControlDerivativeSamplesOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlDerivativeSamplesOutOfRange
    DancerControlIntegralTimeOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlIntegralTimeOutOfRange
    DancerControlInputMinMaxDifferenceOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlInputMinMaxDifferenceOutOfRange
    FirstPointTimeNotZero = _WMX3ApiPython.AdvancedMotionErrorCode_FirstPointTimeNotZero
    SmoothRatioOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_SmoothRatioOutOfRange
    TwoLinkMotionTypeOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_TwoLinkMotionTypeOutOfRange
    OutputIOAddressOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputIOAddressOutOfRange
    OutputPointOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputPointOutOfRange
    TotalDistanceBelowMinimum = _WMX3ApiPython.AdvancedMotionErrorCode_TotalDistanceBelowMinimum
    DistanceBetweenPointsTooClose = _WMX3ApiPython.AdvancedMotionErrorCode_DistanceBetweenPointsTooClose

    def __init__(self):
        this = _WMX3ApiPython.new_AdvancedMotionErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvancedMotionErrorCode
    __del__ = lambda self: None
AdvancedMotionErrorCode_swigregister = _WMX3ApiPython.AdvancedMotionErrorCode_swigregister
AdvancedMotionErrorCode_swigregister(AdvancedMotionErrorCode)

class AdvMotion_SplinePoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_SplinePoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_SplinePoint, name)
    __repr__ = _swig_repr

    def GetData(self, pSplinePoint):
        return _WMX3ApiPython.AdvMotion_SplinePoint_GetData(self, pSplinePoint)
    __swig_setmethods__["pos"] = _WMX3ApiPython.AdvMotion_SplinePoint_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.AdvMotion_SplinePoint_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.AdvMotion_SplinePoint_pos_get, _WMX3ApiPython.AdvMotion_SplinePoint_pos_set)

    def SetPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SplinePoint_SetPos(self, index, value)

    def GetPos(self, index):
        return _WMX3ApiPython.AdvMotion_SplinePoint_GetPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_SplinePoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SplinePoint
    __del__ = lambda self: None
AdvMotion_SplinePoint_swigregister = _WMX3ApiPython.AdvMotion_SplinePoint_swigregister
AdvMotion_SplinePoint_swigregister(AdvMotion_SplinePoint)

class AdvMotion_PointTimeSplineCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PointTimeSplineCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PointTimeSplineCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPointTimeSplineCommand):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_GetData(self, pPointTimeSplineCommand)
    __swig_setmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_set
    __swig_getmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_get
    if _newclass:
        dimensionCount = _swig_property(_WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_GetAxis(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PointTimeSplineCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PointTimeSplineCommand
    __del__ = lambda self: None
AdvMotion_PointTimeSplineCommand_swigregister = _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_swigregister
AdvMotion_PointTimeSplineCommand_swigregister(AdvMotion_PointTimeSplineCommand)

class AdvMotion_TotalTimeSplineCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_TotalTimeSplineCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_TotalTimeSplineCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pTotalTimeSplineCommand):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetData(self, pTotalTimeSplineCommand)
    __swig_setmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_set
    __swig_getmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_get
    if _newclass:
        dimensionCount = _swig_property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetAxis(self, index)
    __swig_setmethods__["totalTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_set
    __swig_getmethods__["totalTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_get
    if _newclass:
        totalTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_set)
    __swig_setmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_set
    __swig_getmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_get
    if _newclass:
        ignoreDimensionForDistanceCalc = _swig_property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_TotalTimeSplineCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TotalTimeSplineCommand
    __del__ = lambda self: None
AdvMotion_TotalTimeSplineCommand_swigregister = _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_swigregister
AdvMotion_TotalTimeSplineCommand_swigregister(AdvMotion_TotalTimeSplineCommand)

class AdvMotion_ProfileSplineCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_ProfileSplineCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_ProfileSplineCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pProfileSplineCommand):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetData(self, pProfileSplineCommand)
    __swig_setmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_set
    __swig_getmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_get
    if _newclass:
        dimensionCount = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetAxis(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_set)
    __swig_setmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_set
    __swig_getmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_get
    if _newclass:
        ignoreDimensionForDistanceCalc = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)
    __swig_setmethods__["sampleMultiplier"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_set
    __swig_getmethods__["sampleMultiplier"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_get
    if _newclass:
        sampleMultiplier = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_set)
    __swig_setmethods__["sampleMultiplierCubicDistribution"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_set
    __swig_getmethods__["sampleMultiplierCubicDistribution"] = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_get
    if _newclass:
        sampleMultiplierCubicDistribution = _swig_property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_ProfileSplineCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_ProfileSplineCommand
    __del__ = lambda self: None
AdvMotion_ProfileSplineCommand_swigregister = _WMX3ApiPython.AdvMotion_ProfileSplineCommand_swigregister
AdvMotion_ProfileSplineCommand_swigregister(AdvMotion_ProfileSplineCommand)

class AdvMotion_VelAccLimitedSplineCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_VelAccLimitedSplineCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_VelAccLimitedSplineCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pVelAccLimitedSplineCommand):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetData(self, pVelAccLimitedSplineCommand)
    __swig_setmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_set
    __swig_getmethods__["dimensionCount"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_get
    if _newclass:
        dimensionCount = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetAxis(self, index)
    __swig_setmethods__["velLimit"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_set
    __swig_getmethods__["velLimit"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_get
    if _newclass:
        velLimit = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_set)

    def SetVelLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetVelLimit(self, index, value)

    def GetVelLimit(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetVelLimit(self, index)
    __swig_setmethods__["accLimit"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_set
    __swig_getmethods__["accLimit"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_get
    if _newclass:
        accLimit = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_set)

    def SetAccLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetAccLimit(self, index, value)

    def GetAccLimit(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetAccLimit(self, index)
    __swig_setmethods__["compositeVel"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_set
    __swig_getmethods__["compositeVel"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_get
    if _newclass:
        compositeVel = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_set)
    __swig_setmethods__["compositeAcc"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_set
    __swig_getmethods__["compositeAcc"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_get
    if _newclass:
        compositeAcc = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_set)
    __swig_setmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_set
    __swig_getmethods__["ignoreDimensionForDistanceCalc"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_get
    if _newclass:
        ignoreDimensionForDistanceCalc = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)
    __swig_setmethods__["sampleMultiplier"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_set
    __swig_getmethods__["sampleMultiplier"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_get
    if _newclass:
        sampleMultiplier = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_set)
    __swig_setmethods__["sampleMultiplierCubicDistribution"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_set
    __swig_getmethods__["sampleMultiplierCubicDistribution"] = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_get
    if _newclass:
        sampleMultiplierCubicDistribution = _swig_property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_VelAccLimitedSplineCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_VelAccLimitedSplineCommand
    __del__ = lambda self: None
AdvMotion_VelAccLimitedSplineCommand_swigregister = _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_swigregister
AdvMotion_VelAccLimitedSplineCommand_swigregister(AdvMotion_VelAccLimitedSplineCommand)

class AdvMotion_PathIntplSegmentType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplSegmentType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplSegmentType, name)
    __repr__ = _swig_repr
    Linear = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Linear
    Circular = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Circular
    Pause = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Pause

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplSegmentType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplSegmentType
    __del__ = lambda self: None
AdvMotion_PathIntplSegmentType_swigregister = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_swigregister
AdvMotion_PathIntplSegmentType_swigregister(AdvMotion_PathIntplSegmentType)

class AdvMotion_PathIntplOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplOutputType, name)
    __repr__ = _swig_repr
    Immediate = _WMX3ApiPython.AdvMotion_PathIntplOutputType_Immediate
    RemainingTime = _WMX3ApiPython.AdvMotion_PathIntplOutputType_RemainingTime
    CompletedTime = _WMX3ApiPython.AdvMotion_PathIntplOutputType_CompletedTime
    RemainingDist = _WMX3ApiPython.AdvMotion_PathIntplOutputType_RemainingDist
    CompletedDist = _WMX3ApiPython.AdvMotion_PathIntplOutputType_CompletedDist
    DistanceRatio = _WMX3ApiPython.AdvMotion_PathIntplOutputType_DistanceRatio

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplOutputType
    __del__ = lambda self: None
AdvMotion_PathIntplOutputType_swigregister = _WMX3ApiPython.AdvMotion_PathIntplOutputType_swigregister
AdvMotion_PathIntplOutputType_swigregister(AdvMotion_PathIntplOutputType)

class AdvMotion_PathIntplOutputSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplOutputSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplOutputSource, name)
    __repr__ = _swig_repr
    IOOutput = _WMX3ApiPython.AdvMotion_PathIntplOutputSource_IOOutput
    UserMemory = _WMX3ApiPython.AdvMotion_PathIntplOutputSource_UserMemory

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplOutputSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplOutputSource
    __del__ = lambda self: None
AdvMotion_PathIntplOutputSource_swigregister = _WMX3ApiPython.AdvMotion_PathIntplOutputSource_swigregister
AdvMotion_PathIntplOutputSource_swigregister(AdvMotion_PathIntplOutputSource)

class AdvMotion_PathIntplCoordinateType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplCoordinateType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplCoordinateType, name)
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_Absolute
    RelativeFromStart = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_RelativeFromStart
    RelativeFromEnd = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_RelativeFromEnd

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplCoordinateType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplCoordinateType
    __del__ = lambda self: None
AdvMotion_PathIntplCoordinateType_swigregister = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_swigregister
AdvMotion_PathIntplCoordinateType_swigregister(AdvMotion_PathIntplCoordinateType)

class AdvMotion_PathIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetData(self, pPathIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_axis_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetAxis(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetType(self, index)
    __swig_setmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_direction_set
    __swig_getmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_direction_get
    if _newclass:
        direction = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_direction_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetDirection(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetCenterPos(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_set
    __swig_getmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_get
    if _newclass:
        enableAutoSmooth = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_set)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetAutoSmoothRadius(self, index)
    __swig_setmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_set
    __swig_getmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_get
    if _newclass:
        enableConstProfile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_set)
    __swig_setmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_set
    __swig_getmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_get
    if _newclass:
        numOutputs = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_set)
    __swig_setmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_set
    __swig_getmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_get
    if _newclass:
        outputType = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputType(self, index)
    __swig_setmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_set
    __swig_getmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_get
    if _newclass:
        outputPoint = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputPoint(self, index)
    __swig_setmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_set
    __swig_getmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_get
    if _newclass:
        outputTriggerValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputTriggerValue(self, index)
    __swig_setmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_set
    __swig_getmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_get
    if _newclass:
        outputSource = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputSource(self, index)
    __swig_setmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_set
    __swig_getmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_get
    if _newclass:
        outputByteAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputByteAddr(self, index)
    __swig_setmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_set
    __swig_getmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_get
    if _newclass:
        outputBitAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputBitAddr(self, index)
    __swig_setmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_set
    __swig_getmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_get
    if _newclass:
        outputValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputValue(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplCommand
    __del__ = lambda self: None
AdvMotion_PathIntplCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntplCommand_swigregister
AdvMotion_PathIntplCommand_swigregister(AdvMotion_PathIntplCommand)

class AdvMotion_PathIntplAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplAdditionalCommand, name)
    __repr__ = _swig_repr

    def SetData(self, pPathIntplAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetData(self, pPathIntplAdditionalCommand)

    def GetData(self, pPathIntplAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetData(self, pPathIntplAdditionalCommand)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetType(self, index)
    __swig_setmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_set
    __swig_getmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_get
    if _newclass:
        direction = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetDirection(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetCenterPos(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetAutoSmoothRadius(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplAdditionalCommand
    __del__ = lambda self: None
AdvMotion_PathIntplAdditionalCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_swigregister
AdvMotion_PathIntplAdditionalCommand_swigregister(AdvMotion_PathIntplAdditionalCommand)

class AdvMotion_PathIntpl3DCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntpl3DCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntpl3DCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntpl3DCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetData(self, pPathIntpl3DCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetAxis(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetType(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_set
    __swig_getmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_get
    if _newclass:
        circleIntermediateTarget = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetCircleIntermediateTarget(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_set
    __swig_getmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_get
    if _newclass:
        enableAutoSmooth = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_set)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetAutoSmoothRadius(self, index)
    __swig_setmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_set
    __swig_getmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_get
    if _newclass:
        enableConstProfile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_set)
    __swig_setmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_set
    __swig_getmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_get
    if _newclass:
        numOutputs = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_set)
    __swig_setmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_set
    __swig_getmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_get
    if _newclass:
        outputType = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputType(self, index)
    __swig_setmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_set
    __swig_getmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_get
    if _newclass:
        outputPoint = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputPoint(self, index)
    __swig_setmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_set
    __swig_getmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_get
    if _newclass:
        outputTriggerValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputTriggerValue(self, index)
    __swig_setmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_set
    __swig_getmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_get
    if _newclass:
        outputSource = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputSource(self, index)
    __swig_setmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_set
    __swig_getmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_get
    if _newclass:
        outputByteAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputByteAddr(self, index)
    __swig_setmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_set
    __swig_getmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_get
    if _newclass:
        outputBitAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputBitAddr(self, index)
    __swig_setmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_set
    __swig_getmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_get
    if _newclass:
        outputValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputValue(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntpl3DCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntpl3DCommand
    __del__ = lambda self: None
AdvMotion_PathIntpl3DCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_swigregister
AdvMotion_PathIntpl3DCommand_swigregister(AdvMotion_PathIntpl3DCommand)

class AdvMotion_PathIntpl3DAdditionalCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntpl3DAdditionalCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntpl3DAdditionalCommand, name)
    __repr__ = _swig_repr

    def SetData(self, pPathIntpl3DAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetData(self, pPathIntpl3DAdditionalCommand)

    def GetData(self, pPathIntpl3DAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetData(self, pPathIntpl3DAdditionalCommand)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetType(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_set
    __swig_getmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_get
    if _newclass:
        circleIntermediateTarget = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetCircleIntermediateTarget(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetAutoSmoothRadius(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntpl3DAdditionalCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntpl3DAdditionalCommand
    __del__ = lambda self: None
AdvMotion_PathIntpl3DAdditionalCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_swigregister
AdvMotion_PathIntpl3DAdditionalCommand_swigregister(AdvMotion_PathIntpl3DAdditionalCommand)

class AdvMotion_PathIntplWithRotationConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplWithRotationConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplWithRotationConfiguration, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationConfiguration):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetData(self, pPathIntplWithRotationConfiguration)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetAxis(self, index)
    __swig_setmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_set
    __swig_getmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_get
    if _newclass:
        enableAutoSmooth = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_set)
    __swig_setmethods__["axisCoordinateFlip"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_set
    __swig_getmethods__["axisCoordinateFlip"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_get
    if _newclass:
        axisCoordinateFlip = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_set)

    def SetAxisCoordinateFlip(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetAxisCoordinateFlip(self, index, value)

    def GetAxisCoordinateFlip(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetAxisCoordinateFlip(self, index)
    __swig_setmethods__["rotationalAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_set
    __swig_getmethods__["rotationalAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_get
    if _newclass:
        rotationalAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_set)
    __swig_setmethods__["rotationalAxisPolarity"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_set
    __swig_getmethods__["rotationalAxisPolarity"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_get
    if _newclass:
        rotationalAxisPolarity = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_set)
    __swig_setmethods__["disableRotationalAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_set
    __swig_getmethods__["disableRotationalAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_get
    if _newclass:
        disableRotationalAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_set)
    __swig_setmethods__["disableXYRotationalMotion"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_set
    __swig_getmethods__["disableXYRotationalMotion"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_get
    if _newclass:
        disableXYRotationalMotion = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_set)
    __swig_setmethods__["centerOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_set
    __swig_getmethods__["centerOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_get
    if _newclass:
        centerOfRotation = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_set)

    def SetCenterOfRotation(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetCenterOfRotation(self, index, value)

    def GetCenterOfRotation(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetCenterOfRotation(self, index)
    __swig_setmethods__["coordinateType"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_set
    __swig_getmethods__["coordinateType"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_get
    if _newclass:
        coordinateType = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_set)
    __swig_setmethods__["enableZAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_set
    __swig_getmethods__["enableZAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_get
    if _newclass:
        enableZAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_set)
    __swig_setmethods__["zAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_set
    __swig_getmethods__["zAxis"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_get
    if _newclass:
        zAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_set)
    __swig_setmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_set
    __swig_getmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_get
    if _newclass:
        enableConstProfile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_set)
    __swig_setmethods__["enableLocalCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_set
    __swig_getmethods__["enableLocalCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_get
    if _newclass:
        enableLocalCenterOfRotation = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_set)
    __swig_setmethods__["angleCorrectionMinimumAngle"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_set
    __swig_getmethods__["angleCorrectionMinimumAngle"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_get
    if _newclass:
        angleCorrectionMinimumAngle = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_set)
    __swig_setmethods__["angleCorrectionProfile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_set
    __swig_getmethods__["angleCorrectionProfile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_get
    if _newclass:
        angleCorrectionProfile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_set)
    __swig_setmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_set
    __swig_getmethods__["numOutputs"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_get
    if _newclass:
        numOutputs = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_set)
    __swig_setmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_set
    __swig_getmethods__["outputType"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_get
    if _newclass:
        outputType = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputType(self, index)
    __swig_setmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_set
    __swig_getmethods__["outputPoint"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_get
    if _newclass:
        outputPoint = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputPoint(self, index)
    __swig_setmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_set
    __swig_getmethods__["outputTriggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_get
    if _newclass:
        outputTriggerValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputTriggerValue(self, index)
    __swig_setmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_set
    __swig_getmethods__["outputSource"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_get
    if _newclass:
        outputSource = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputSource(self, index)
    __swig_setmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_set
    __swig_getmethods__["outputByteAddr"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_get
    if _newclass:
        outputByteAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputByteAddr(self, index)
    __swig_setmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_set
    __swig_getmethods__["outputBitAddr"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_get
    if _newclass:
        outputBitAddr = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputBitAddr(self, index)
    __swig_setmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_set
    __swig_getmethods__["outputValue"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_get
    if _newclass:
        outputValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputValue(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationConfiguration
    __del__ = lambda self: None
AdvMotion_PathIntplWithRotationConfiguration_swigregister = _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_swigregister
AdvMotion_PathIntplWithRotationConfiguration_swigregister(AdvMotion_PathIntplWithRotationConfiguration)

class AdvMotion_PathIntplWithRotationCommandPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplWithRotationCommandPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplWithRotationCommandPoint, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationCommandPoint):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetData(self, pPathIntplWithRotationCommandPoint)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_set)
    __swig_setmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_set
    __swig_getmethods__["direction"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_get
    if _newclass:
        direction = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetTarget(self, index)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetCenterPos(self, index)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_set)
    __swig_setmethods__["zAxisTarget"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_set
    __swig_getmethods__["zAxisTarget"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_get
    if _newclass:
        zAxisTarget = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_set)
    __swig_setmethods__["useLocalCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_set
    __swig_getmethods__["useLocalCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_get
    if _newclass:
        useLocalCenterOfRotation = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_set)
    __swig_setmethods__["localCenterOfRotationDirection"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_set
    __swig_getmethods__["localCenterOfRotationDirection"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_get
    if _newclass:
        localCenterOfRotationDirection = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_set)
    __swig_setmethods__["localCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_set
    __swig_getmethods__["localCenterOfRotation"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_get
    if _newclass:
        localCenterOfRotation = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_set)

    def SetLocalCenterOfRotation(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetLocalCenterOfRotation(self, index, value)

    def GetLocalCenterOfRotation(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetLocalCenterOfRotation(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationCommandPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationCommandPoint
    __del__ = lambda self: None
AdvMotion_PathIntplWithRotationCommandPoint_swigregister = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_swigregister
AdvMotion_PathIntplWithRotationCommandPoint_swigregister(AdvMotion_PathIntplWithRotationCommandPoint)

class AdvMotion_PathIntplWithRotationCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplWithRotationCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplWithRotationCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_GetData(self, pPathIntplWithRotationCommand)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_set)
    __swig_setmethods__["point"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_set
    __swig_getmethods__["point"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_get
    if _newclass:
        point = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_set)

    def SetPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_SetPoint(self, index, value)

    def GetPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_GetPoint(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationCommand
    __del__ = lambda self: None
AdvMotion_PathIntplWithRotationCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_swigregister
AdvMotion_PathIntplWithRotationCommand_swigregister(AdvMotion_PathIntplWithRotationCommand)

class AdvMotion_PathIntplWithRotationState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplWithRotationState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplWithRotationState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_Idle
    Executing = _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_Executing

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationState
    __del__ = lambda self: None
AdvMotion_PathIntplWithRotationState_swigregister = _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_swigregister
AdvMotion_PathIntplWithRotationState_swigregister(AdvMotion_PathIntplWithRotationState)

class AdvMotion_PathIntplWithRotationStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplWithRotationStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplWithRotationStatus, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_GetData(self, pPathIntplWithRotationStatus)

    def SetData(self, pPathIntplWithRotationStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_SetData(self, pPathIntplWithRotationStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_set)
    __swig_setmethods__["freeBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_set
    __swig_getmethods__["freeBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_get
    if _newclass:
        freeBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_set)
    __swig_setmethods__["executedBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_set
    __swig_getmethods__["executedBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_get
    if _newclass:
        executedBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_set)
    __swig_setmethods__["maxBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_set
    __swig_getmethods__["maxBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_get
    if _newclass:
        maxBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_set)
    __swig_setmethods__["totalBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_set
    __swig_getmethods__["totalBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_get
    if _newclass:
        totalBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_set)
    __swig_setmethods__["executedCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_set
    __swig_getmethods__["executedCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_get
    if _newclass:
        executedCommandCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_set)
    __swig_setmethods__["totalCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_set
    __swig_getmethods__["totalCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_get
    if _newclass:
        totalCommandCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_set)
    __swig_setmethods__["pos"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_set
    __swig_getmethods__["pos"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_get
    if _newclass:
        pos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_set)
    __swig_setmethods__["totalDist"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_set
    __swig_getmethods__["totalDist"] = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_get
    if _newclass:
        totalDist = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationStatus
    __del__ = lambda self: None
AdvMotion_PathIntplWithRotationStatus_swigregister = _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_swigregister
AdvMotion_PathIntplWithRotationStatus_swigregister(AdvMotion_PathIntplWithRotationStatus)

class AdvMotion_PathIntplLookaheadSegmentType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadSegmentType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadSegmentType, name)
    __repr__ = _swig_repr
    Linear = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_Linear
    CenterAndLengthCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_CenterAndLengthCircular
    CenterAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_CenterAndEndCircular
    ThroughAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_ThroughAndEndCircular
    LengthAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_LengthAndEndCircular
    RadiusAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_RadiusAndEndCircular
    ThroughAndEnd3DCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_ThroughAndEnd3DCircular
    Sleep = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_Sleep
    SetOutputBit = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_SetOutputBit

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadSegmentType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadSegmentType
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadSegmentType_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_swigregister
AdvMotion_PathIntplLookaheadSegmentType_swigregister(AdvMotion_PathIntplLookaheadSegmentType)

class AdvMotion_PathIntplLookaheadCoordinateType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCoordinateType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCoordinateType, name)
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_Absolute
    RelativeFromPreviousPoint = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_RelativeFromPreviousPoint
    RelativeFromStart = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_RelativeFromStart

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCoordinateType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCoordinateType
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCoordinateType_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_swigregister
AdvMotion_PathIntplLookaheadCoordinateType_swigregister(AdvMotion_PathIntplLookaheadCoordinateType)

class AdvMotion_PathIntplLookaheadConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadConfiguration, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadConfiguration):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetData(self, pPathIntplLookaheadConfiguration)
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetAxis(self, index)
    __swig_setmethods__["velocityLimit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_set
    __swig_getmethods__["velocityLimit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_get
    if _newclass:
        velocityLimit = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_set)

    def SetVelocityLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetVelocityLimit(self, index, value)

    def GetVelocityLimit(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetVelocityLimit(self, index)
    __swig_setmethods__["accLimit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_set
    __swig_getmethods__["accLimit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_get
    if _newclass:
        accLimit = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_set)

    def SetAccLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetAccLimit(self, index, value)

    def GetAccLimit(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetAccLimit(self, index)
    __swig_setmethods__["compositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_set
    __swig_getmethods__["compositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_get
    if _newclass:
        compositeVel = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_set)
    __swig_setmethods__["compositeAcc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_set
    __swig_getmethods__["compositeAcc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_get
    if _newclass:
        compositeAcc = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_set)
    __swig_setmethods__["sampleDistance"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_set
    __swig_getmethods__["sampleDistance"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_get
    if _newclass:
        sampleDistance = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_set)
    __swig_setmethods__["setOverrideTime"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_set
    __swig_getmethods__["setOverrideTime"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_get
    if _newclass:
        setOverrideTime = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_set)
    __swig_setmethods__["overrideTimePointsPerMillisecond"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_set
    __swig_getmethods__["overrideTimePointsPerMillisecond"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_get
    if _newclass:
        overrideTimePointsPerMillisecond = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_set)
    __swig_setmethods__["setAngleTolerance"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_set
    __swig_getmethods__["setAngleTolerance"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_get
    if _newclass:
        setAngleTolerance = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_set)
    __swig_setmethods__["angleToleranceDegrees"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_set
    __swig_getmethods__["angleToleranceDegrees"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_get
    if _newclass:
        angleToleranceDegrees = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_set)
    __swig_setmethods__["coordinateType"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_set
    __swig_getmethods__["coordinateType"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_get
    if _newclass:
        coordinateType = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_set)
    __swig_setmethods__["stopOnEmptyBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_set
    __swig_getmethods__["stopOnEmptyBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_get
    if _newclass:
        stopOnEmptyBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_set)
    __swig_setmethods__["setSmoothingTime"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_set
    __swig_getmethods__["setSmoothingTime"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_get
    if _newclass:
        setSmoothingTime = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_set)
    __swig_setmethods__["firstSmoothingTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_firstSmoothingTimeMilliseconds_set
    __swig_getmethods__["firstSmoothingTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_firstSmoothingTimeMilliseconds_get
    if _newclass:
        firstSmoothingTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_firstSmoothingTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_firstSmoothingTimeMilliseconds_set)

    def SetFirstSmoothingTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetFirstSmoothingTimeMilliseconds(self, index, value)

    def GetFirstSmoothingTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetFirstSmoothingTimeMilliseconds(self, index)
    __swig_setmethods__["secondSmoothingTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_secondSmoothingTimeMilliseconds_set
    __swig_getmethods__["secondSmoothingTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_secondSmoothingTimeMilliseconds_get
    if _newclass:
        secondSmoothingTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_secondSmoothingTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_secondSmoothingTimeMilliseconds_set)

    def SetSecondSmoothingTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetSecondSmoothingTimeMilliseconds(self, index, value)

    def GetSecondSmoothingTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetSecondSmoothingTimeMilliseconds(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadConfiguration
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadConfiguration_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_swigregister
AdvMotion_PathIntplLookaheadConfiguration_swigregister(AdvMotion_PathIntplLookaheadConfiguration)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_linear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_linear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_linear, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_set
    __swig_getmethods__["axisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_get
    if _newclass:
        axisCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_set)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetAxis(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetTarget(self, index)
    __swig_setmethods__["smoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_set
    __swig_getmethods__["smoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_get
    if _newclass:
        smoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_linear()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_linear
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_linear)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetAxis(self, index)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetCenterPos(self, index)
    __swig_setmethods__["arcLengthDegree"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_set
    __swig_getmethods__["arcLengthDegree"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_get
    if _newclass:
        arcLengthDegree = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetAxis(self, index)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetCenterPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetEndPos(self, index)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetAxis(self, index)
    __swig_setmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_set
    __swig_getmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_get
    if _newclass:
        throughPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetThroughPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetEndPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetAxis(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetEndPos(self, index)
    __swig_setmethods__["arcLengthDegree"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_set
    __swig_getmethods__["arcLengthDegree"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_get
    if _newclass:
        arcLengthDegree = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetAxis(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetEndPos(self, index)
    __swig_setmethods__["radius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_set
    __swig_getmethods__["radius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_get
    if _newclass:
        radius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_set)
    __swig_setmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_set
    __swig_getmethods__["clockwise"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_get
    if _newclass:
        clockwise = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAxis(self, index)
    __swig_setmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_set
    __swig_getmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_get
    if _newclass:
        throughPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetThroughPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetEndPos(self, index)
    __swig_setmethods__["auxiliaryAxisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_set
    __swig_getmethods__["auxiliaryAxisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_get
    if _newclass:
        auxiliaryAxisCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_set)
    __swig_setmethods__["auxiliaryAxis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_set
    __swig_getmethods__["auxiliaryAxis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_get
    if _newclass:
        auxiliaryAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAuxiliaryAxis(self, index)
    __swig_setmethods__["auxiliaryTarget"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_set
    __swig_getmethods__["auxiliaryTarget"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_get
    if _newclass:
        auxiliaryTarget = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_GetAxis(self, index)
    __swig_setmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_throughPos_set
    __swig_getmethods__["throughPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_throughPos_get
    if _newclass:
        throughPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_throughPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_GetThroughPos(self, index)
    __swig_setmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_endPos_set
    __swig_getmethods__["endPos"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_endPos_get
    if _newclass:
        endPos = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_GetEndPos(self, index)
    __swig_setmethods__["auxiliaryAxisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxisCount_set
    __swig_getmethods__["auxiliaryAxisCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxisCount_get
    if _newclass:
        auxiliaryAxisCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxisCount_set)
    __swig_setmethods__["auxiliaryAxis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxis_set
    __swig_getmethods__["auxiliaryAxis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxis_get
    if _newclass:
        auxiliaryAxis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_GetAuxiliaryAxis(self, index)
    __swig_setmethods__["auxiliaryTarget"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryTarget_set
    __swig_getmethods__["auxiliaryTarget"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryTarget_get
    if _newclass:
        auxiliaryTarget = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_GetAuxiliaryTarget(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircularWithAuxiliary)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["milliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_set
    __swig_getmethods__["milliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_get
    if _newclass:
        milliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_set)
    __swig_setmethods__["triggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_set
    __swig_getmethods__["triggerValue"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_get
    if _newclass:
        triggerValue = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_set)
    __swig_setmethods__["source"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_set
    __swig_getmethods__["source"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_get
    if _newclass:
        source = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_set)
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_set)
    __swig_setmethods__["value"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_set
    __swig_getmethods__["value"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_get
    if _newclass:
        value = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit)

class AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_target_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_target_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_type_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_type_set)
    __swig_setmethods__["velocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_velocity_set
    __swig_getmethods__["velocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_velocity_get
    if _newclass:
        velocity = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_velocity_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_velocity_set)
    __swig_setmethods__["acc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_acc_set
    __swig_getmethods__["acc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_acc_get
    if _newclass:
        acc = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_acc_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_acc_set)
    __swig_setmethods__["dec"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_dec_set
    __swig_getmethods__["dec"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_dec_get
    if _newclass:
        dec = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_dec_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_dec_set)
    __swig_setmethods__["jerkAcc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAcc_set
    __swig_getmethods__["jerkAcc"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAcc_get
    if _newclass:
        jerkAcc = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAcc_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAcc_set)
    __swig_setmethods__["jerkDec"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDec_set
    __swig_getmethods__["jerkDec"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDec_get
    if _newclass:
        jerkDec = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDec_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDec_set)
    __swig_setmethods__["jerkAccRatio"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAccRatio_set
    __swig_getmethods__["jerkAccRatio"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAccRatio_get
    if _newclass:
        jerkAccRatio = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAccRatio_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkAccRatio_set)
    __swig_setmethods__["jerkDecRatio"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDecRatio_set
    __swig_getmethods__["jerkDecRatio"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDecRatio_get
    if _newclass:
        jerkDecRatio = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDecRatio_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_jerkDecRatio_set)
    __swig_setmethods__["accTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_accTimeMilliseconds_set
    __swig_getmethods__["accTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_accTimeMilliseconds_get
    if _newclass:
        accTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_accTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_accTimeMilliseconds_set)
    __swig_setmethods__["decTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_decTimeMilliseconds_set
    __swig_getmethods__["decTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_decTimeMilliseconds_get
    if _newclass:
        decTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_decTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_decTimeMilliseconds_set)
    __swig_setmethods__["startingVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_startingVelocity_set
    __swig_getmethods__["startingVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_startingVelocity_get
    if _newclass:
        startingVelocity = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_startingVelocity_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_startingVelocity_set)
    __swig_setmethods__["endVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_endVelocity_set
    __swig_getmethods__["endVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_endVelocity_get
    if _newclass:
        endVelocity = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_endVelocity_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_endVelocity_set)
    __swig_setmethods__["secondVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_secondVelocity_set
    __swig_getmethods__["secondVelocity"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_secondVelocity_get
    if _newclass:
        secondVelocity = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_secondVelocity_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_secondVelocity_set)
    __swig_setmethods__["movingAverageTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_movingAverageTimeMilliseconds_set
    __swig_getmethods__["movingAverageTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_movingAverageTimeMilliseconds_get
    if _newclass:
        movingAverageTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_movingAverageTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_movingAverageTimeMilliseconds_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_followMotion)

class AdvMotion_PathIntplLookaheadCommandPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommandPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommandPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_set)
    __swig_setmethods__["smoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_smoothRadius_set
    __swig_getmethods__["smoothRadius"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_smoothRadius_get
    if _newclass:
        smoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_smoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_smoothRadius_set)
    __swig_setmethods__["setSegmentCompositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setSegmentCompositeVel_set
    __swig_getmethods__["setSegmentCompositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setSegmentCompositeVel_get
    if _newclass:
        setSegmentCompositeVel = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setSegmentCompositeVel_set)
    __swig_setmethods__["segmentCompositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_segmentCompositeVel_set
    __swig_getmethods__["segmentCompositeVel"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_segmentCompositeVel_get
    if _newclass:
        segmentCompositeVel = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_segmentCompositeVel_set)

    def GetData(self, pPathIntplLookaheadCommandPoint):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_GetData(self, pPathIntplLookaheadCommandPoint)
    __swig_setmethods__["linear"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_set
    __swig_getmethods__["linear"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_get
    if _newclass:
        linear = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_set)
    __swig_setmethods__["centerAndLengthCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_set
    __swig_getmethods__["centerAndLengthCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_get
    if _newclass:
        centerAndLengthCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_set)
    __swig_setmethods__["centerAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_set
    __swig_getmethods__["centerAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_get
    if _newclass:
        centerAndEndCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_set)
    __swig_setmethods__["throughAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_set
    __swig_getmethods__["throughAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_get
    if _newclass:
        throughAndEndCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_set)
    __swig_setmethods__["lengthAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_set
    __swig_getmethods__["lengthAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_get
    if _newclass:
        lengthAndEndCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_set)
    __swig_setmethods__["radiusAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_set
    __swig_getmethods__["radiusAndEndCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_get
    if _newclass:
        radiusAndEndCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_set)
    __swig_setmethods__["throughAndEnd3DCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_set
    __swig_getmethods__["throughAndEnd3DCircular"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_get
    if _newclass:
        throughAndEnd3DCircular = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_set)
    __swig_setmethods__["throughAndEnd3DCircularWithAuxiliary"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircularWithAuxiliary_set
    __swig_getmethods__["throughAndEnd3DCircularWithAuxiliary"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircularWithAuxiliary_get
    if _newclass:
        throughAndEnd3DCircularWithAuxiliary = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircularWithAuxiliary_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircularWithAuxiliary_set)
    __swig_setmethods__["sleep"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_set
    __swig_getmethods__["sleep"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_get
    if _newclass:
        sleep = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_set)
    __swig_setmethods__["setOutputBit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_set
    __swig_getmethods__["setOutputBit"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_get
    if _newclass:
        setOutputBit = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_set)
    __swig_setmethods__["followMotion"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_followMotion_set
    __swig_getmethods__["followMotion"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_followMotion_get
    if _newclass:
        followMotion = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_followMotion_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_followMotion_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommandPoint_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_swigregister
AdvMotion_PathIntplLookaheadCommandPoint_swigregister(AdvMotion_PathIntplLookaheadCommandPoint)

class AdvMotion_PathIntplLookaheadCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_GetData(self, pPathIntplLookaheadCommand)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_set)
    __swig_setmethods__["point"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_set
    __swig_getmethods__["point"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_get
    if _newclass:
        point = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_set)

    def SetPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_SetPoint(self, index, value)

    def GetPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_GetPoint(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommand
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadCommand_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_swigregister
AdvMotion_PathIntplLookaheadCommand_swigregister(AdvMotion_PathIntplLookaheadCommand)

class AdvMotion_PathIntplLookaheadState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Idle
    Executing = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Executing
    Stopping = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Stopping
    Stopped = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Stopped

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadState
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadState_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_swigregister
AdvMotion_PathIntplLookaheadState_swigregister(AdvMotion_PathIntplLookaheadState)

class AdvMotion_PathIntplLookaheadStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PathIntplLookaheadStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PathIntplLookaheadStatus, name)
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_GetData(self, pPathIntplLookaheadStatus)

    def SetData(self, pPathIntplLookaheadStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_SetData(self, pPathIntplLookaheadStatus)
    __swig_setmethods__["state"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_set)
    __swig_setmethods__["remainBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_set
    __swig_getmethods__["remainBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_get
    if _newclass:
        remainBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_set)
    __swig_setmethods__["freeBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_set
    __swig_getmethods__["freeBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_get
    if _newclass:
        freeBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_set)
    __swig_setmethods__["executedBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_set
    __swig_getmethods__["executedBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_get
    if _newclass:
        executedBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_set)
    __swig_setmethods__["maxBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_set
    __swig_getmethods__["maxBuffer"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_get
    if _newclass:
        maxBuffer = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_set)
    __swig_setmethods__["remainCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_set
    __swig_getmethods__["remainCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_get
    if _newclass:
        remainCommandCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_set)
    __swig_setmethods__["executedCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_set
    __swig_getmethods__["executedCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_get
    if _newclass:
        executedCommandCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_set)
    __swig_setmethods__["totalCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_set
    __swig_getmethods__["totalCommandCount"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_get
    if _newclass:
        totalCommandCount = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_set)
    __swig_setmethods__["lastOverrideTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_set
    __swig_getmethods__["lastOverrideTimeMilliseconds"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_get
    if _newclass:
        lastOverrideTimeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_set)
    __swig_setmethods__["lastOverridePointsPerMillisecond"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_set
    __swig_getmethods__["lastOverridePointsPerMillisecond"] = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_get
    if _newclass:
        lastOverridePointsPerMillisecond = _swig_property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadStatus
    __del__ = lambda self: None
AdvMotion_PathIntplLookaheadStatus_swigregister = _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_swigregister
AdvMotion_PathIntplLookaheadStatus_swigregister(AdvMotion_PathIntplLookaheadStatus)

class AdvMotion_PosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_PosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_PosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pPosCommand):
        return _WMX3ApiPython.AdvMotion_PosCommand_GetData(self, pPosCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_PosCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_PosCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_PosCommand_axis_get, _WMX3ApiPython.AdvMotion_PosCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_PosCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_PosCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_PosCommand_target_get, _WMX3ApiPython.AdvMotion_PosCommand_target_set)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_PosCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_PosCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_PosCommand_profile_get, _WMX3ApiPython.AdvMotion_PosCommand_profile_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_PosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PosCommand
    __del__ = lambda self: None
AdvMotion_PosCommand_swigregister = _WMX3ApiPython.AdvMotion_PosCommand_swigregister
AdvMotion_PosCommand_swigregister(AdvMotion_PosCommand)

class AdvMotion_CoordinatedPosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_CoordinatedPosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_CoordinatedPosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pCoordinatedPosCommand):
        return _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_GetData(self, pCoordinatedPosCommand)
    __swig_setmethods__["posCommand"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_set
    __swig_getmethods__["posCommand"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_get
    if _newclass:
        posCommand = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_set)
    __swig_setmethods__["axis2"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_set
    __swig_getmethods__["axis2"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_get
    if _newclass:
        axis2 = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_set)
    __swig_setmethods__["axis2Target"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_set
    __swig_getmethods__["axis2Target"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_get
    if _newclass:
        axis2Target = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_set)
    __swig_setmethods__["axis2SmoothRatio"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_set
    __swig_getmethods__["axis2SmoothRatio"] = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_get
    if _newclass:
        axis2SmoothRatio = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_CoordinatedPosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_CoordinatedPosCommand
    __del__ = lambda self: None
AdvMotion_CoordinatedPosCommand_swigregister = _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_swigregister
AdvMotion_CoordinatedPosCommand_swigregister(AdvMotion_CoordinatedPosCommand)

class AdvMotion_CoordinatedJerkRatioPosCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_CoordinatedJerkRatioPosCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_CoordinatedJerkRatioPosCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pCoordinatedJerkRatioPosCommand):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetData(self, pCoordinatedJerkRatioPosCommand)
    __swig_setmethods__["posCommand"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_set
    __swig_getmethods__["posCommand"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_get
    if _newclass:
        posCommand = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_set)
    __swig_setmethods__["followerAxisCount"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_set
    __swig_getmethods__["followerAxisCount"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_get
    if _newclass:
        followerAxisCount = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_set)
    __swig_setmethods__["followerAxis"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_set
    __swig_getmethods__["followerAxis"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_get
    if _newclass:
        followerAxis = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_set)

    def SetFollowerAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxis(self, index, value)

    def GetFollowerAxis(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxis(self, index)
    __swig_setmethods__["followerAxisTarget"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_set
    __swig_getmethods__["followerAxisTarget"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_get
    if _newclass:
        followerAxisTarget = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_set)

    def SetFollowerAxisTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisTarget(self, index, value)

    def GetFollowerAxisTarget(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisTarget(self, index)
    __swig_setmethods__["followerAxisAcc"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_set
    __swig_getmethods__["followerAxisAcc"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_get
    if _newclass:
        followerAxisAcc = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_set)

    def SetFollowerAxisAcc(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisAcc(self, index, value)

    def GetFollowerAxisAcc(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisAcc(self, index)
    __swig_setmethods__["followerAxisJerkAccRatio"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_set
    __swig_getmethods__["followerAxisJerkAccRatio"] = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_get
    if _newclass:
        followerAxisJerkAccRatio = _swig_property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_set)

    def SetFollowerAxisJerkAccRatio(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisJerkAccRatio(self, index, value)

    def GetFollowerAxisJerkAccRatio(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisJerkAccRatio(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_CoordinatedJerkRatioPosCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_CoordinatedJerkRatioPosCommand
    __del__ = lambda self: None
AdvMotion_CoordinatedJerkRatioPosCommand_swigregister = _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_swigregister
AdvMotion_CoordinatedJerkRatioPosCommand_swigregister(AdvMotion_CoordinatedJerkRatioPosCommand)

class AdvMotion_TwoLinkLinearCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_TwoLinkLinearCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_TwoLinkLinearCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pTwoLinkLinearCommand):
        return _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_GetData(self, pTwoLinkLinearCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_set)
    __swig_setmethods__["masterProfile"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_set
    __swig_getmethods__["masterProfile"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_get
    if _newclass:
        masterProfile = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_set)
    __swig_setmethods__["L1"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_set
    __swig_getmethods__["L1"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_get
    if _newclass:
        L1 = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_set)
    __swig_setmethods__["L2"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_set
    __swig_getmethods__["L2"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_get
    if _newclass:
        L2 = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_set)
    __swig_setmethods__["Lzero"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_set
    __swig_getmethods__["Lzero"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_get
    if _newclass:
        Lzero = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_set)
    __swig_setmethods__["Lpolarity"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_set
    __swig_getmethods__["Lpolarity"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_get
    if _newclass:
        Lpolarity = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_set)
    __swig_setmethods__["Rspan"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_set
    __swig_getmethods__["Rspan"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_get
    if _newclass:
        Rspan = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_set)
    __swig_setmethods__["Rzero"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_set
    __swig_getmethods__["Rzero"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_get
    if _newclass:
        Rzero = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_set)
    __swig_setmethods__["specifyTargetInRotaryCoordinates"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_set
    __swig_getmethods__["specifyTargetInRotaryCoordinates"] = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_get
    if _newclass:
        specifyTargetInRotaryCoordinates = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_TwoLinkLinearCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TwoLinkLinearCommand
    __del__ = lambda self: None
AdvMotion_TwoLinkLinearCommand_swigregister = _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_swigregister
AdvMotion_TwoLinkLinearCommand_swigregister(AdvMotion_TwoLinkLinearCommand)

class AdvMotion_TwoLinkRotaryCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_TwoLinkRotaryCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_TwoLinkRotaryCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pTwoLinkRotaryCommand):
        return _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_GetData(self, pTwoLinkRotaryCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_set)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_set)
    __swig_setmethods__["masterProfile"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_set
    __swig_getmethods__["masterProfile"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_get
    if _newclass:
        masterProfile = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_set)
    __swig_setmethods__["L1"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_set
    __swig_getmethods__["L1"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_get
    if _newclass:
        L1 = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_set)
    __swig_setmethods__["L2"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_set
    __swig_getmethods__["L2"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_get
    if _newclass:
        L2 = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_set)
    __swig_setmethods__["Lzero"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_set
    __swig_getmethods__["Lzero"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_get
    if _newclass:
        Lzero = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_set)
    __swig_setmethods__["Lpolarity"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_set
    __swig_getmethods__["Lpolarity"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_get
    if _newclass:
        Lpolarity = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_set)
    __swig_setmethods__["Rzero"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_set
    __swig_getmethods__["Rzero"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_get
    if _newclass:
        Rzero = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_set)
    __swig_setmethods__["specifyTargetInLinearCoordinates"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_set
    __swig_getmethods__["specifyTargetInLinearCoordinates"] = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_get
    if _newclass:
        specifyTargetInLinearCoordinates = _swig_property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_TwoLinkRotaryCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TwoLinkRotaryCommand
    __del__ = lambda self: None
AdvMotion_TwoLinkRotaryCommand_swigregister = _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_swigregister
AdvMotion_TwoLinkRotaryCommand_swigregister(AdvMotion_TwoLinkRotaryCommand)

class AdvMotion_SimulatePathIntplCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_SimulatePathIntplCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_SimulatePathIntplCommand, name)
    __repr__ = _swig_repr

    def GetData(self, pSimulatePathIntplCommand):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetData(self, pSimulatePathIntplCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetAxis(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetType(self, index)
    __swig_setmethods__["direction"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_set
    __swig_getmethods__["direction"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_get
    if _newclass:
        direction = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetDirection(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_set
    __swig_getmethods__["centerPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_get
    if _newclass:
        centerPos = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetCenterPos(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_set
    __swig_getmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_get
    if _newclass:
        enableAutoSmooth = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_set)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetAutoSmoothRadius(self, index)
    __swig_setmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_set
    __swig_getmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_get
    if _newclass:
        enableConstProfile = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_set)
    __swig_setmethods__["setStartPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_set
    __swig_getmethods__["setStartPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_get
    if _newclass:
        setStartPos = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_set)
    __swig_setmethods__["startPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_set
    __swig_getmethods__["startPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_get
    if _newclass:
        startPos = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetStartPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_SimulatePathIntplCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SimulatePathIntplCommand
    __del__ = lambda self: None
AdvMotion_SimulatePathIntplCommand_swigregister = _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_swigregister
AdvMotion_SimulatePathIntplCommand_swigregister(AdvMotion_SimulatePathIntplCommand)

class AdvMotion_SimulatePathIntpl3DCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion_SimulatePathIntpl3DCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion_SimulatePathIntpl3DCommand, name)
    __repr__ = _swig_repr

    def GetData(self, simulatePathIntpl3DCommand):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetData(self, simulatePathIntpl3DCommand)
    __swig_setmethods__["axis"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_set
    __swig_getmethods__["axis"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_get
    if _newclass:
        axis = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetAxis(self, index)
    __swig_setmethods__["profile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_set
    __swig_getmethods__["profile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_get
    if _newclass:
        profile = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetProfile(self, index)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetType(self, index)
    __swig_setmethods__["target"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_set
    __swig_getmethods__["target"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_get
    if _newclass:
        target = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetTarget(self, index1, index2)
    __swig_setmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_set
    __swig_getmethods__["circleIntermediateTarget"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_get
    if _newclass:
        circleIntermediateTarget = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetCircleIntermediateTarget(self, index1, index2)
    __swig_setmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_set
    __swig_getmethods__["timeMilliseconds"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_get
    if _newclass:
        timeMilliseconds = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetTimeMilliseconds(self, index)
    __swig_setmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_set
    __swig_getmethods__["enableAutoSmooth"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_get
    if _newclass:
        enableAutoSmooth = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_set)
    __swig_setmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_set
    __swig_getmethods__["autoSmoothRadius"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_get
    if _newclass:
        autoSmoothRadius = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetAutoSmoothRadius(self, index)
    __swig_setmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_set
    __swig_getmethods__["enableConstProfile"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_get
    if _newclass:
        enableConstProfile = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_set)
    __swig_setmethods__["setStartPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_set
    __swig_getmethods__["setStartPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_get
    if _newclass:
        setStartPos = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_set)
    __swig_setmethods__["startPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_set
    __swig_getmethods__["startPos"] = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_get
    if _newclass:
        startPos = _swig_property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetStartPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvMotion_SimulatePathIntpl3DCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SimulatePathIntpl3DCommand
    __del__ = lambda self: None
AdvMotion_SimulatePathIntpl3DCommand_swigregister = _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_swigregister
AdvMotion_SimulatePathIntpl3DCommand_swigregister(AdvMotion_SimulatePathIntpl3DCommand)

class AdvMotion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvMotion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvMotion, name)
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        this = _WMX3ApiPython.new_AdvMotion(advMotion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvMotion_IsDeviceValid(self)

    def CreateSplineBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreateSplineBuffer(self, channel, points)

    def FreeSplineBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreeSplineBuffer(self, channel)

    def GetSplineBufferPoints(self, channel):
        pPoints = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetSplineBufferPoints(self, channel, pPoints)
        return ret, pPoints.value()



    def GetSplineBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetSplineBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def StartCSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCBSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCBSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def CreatePathIntplBuffer(self, axis, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplBuffer(self, axis, points)

    def FreePathIntplBuffer(self, axis):
        return _WMX3ApiPython.AdvMotion_FreePathIntplBuffer(self, axis)

    def GetPathIntplBufferPoints(self, axis, pPoints):
        return _WMX3ApiPython.AdvMotion_GetPathIntplBufferPoints(self, axis, pPoints)

    def GetPathIntplBytesPerPoint(self, pBytes):
        return _WMX3ApiPython.AdvMotion_GetPathIntplBytesPerPoint(self, pBytes)

    def OverridePathIntplVelocityMultiplier(self, axis, multiplier):
        return _WMX3ApiPython.AdvMotion_OverridePathIntplVelocityMultiplier(self, axis, multiplier)

    def StartPathIntplPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos(self, *args)

    def StartPathIntplMov(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov(self, *args)

    def StartPathIntplPos_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos_Trigger(self, *args)

    def StartPathIntplMov_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov_Trigger(self, *args)

    def StartPathIntplPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos_TriggerEvents(self, *args)

    def StartPathIntplMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov_TriggerEvents(self, *args)

    def StartPathIntpl3DPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos(self, *args)

    def StartPathIntpl3DMov(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov(self, *args)

    def StartPathIntpl3DPos_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos_Trigger(self, *args)

    def StartPathIntpl3DMov_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov_Trigger(self, *args)

    def StartPathIntpl3DPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos_TriggerEvents(self, *args)

    def StartPathIntpl3DMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov_TriggerEvents(self, *args)

    def OverridePathIntpl3DVelocityMultiplier(self, axis, multiplier):
        return _WMX3ApiPython.AdvMotion_OverridePathIntpl3DVelocityMultiplier(self, axis, multiplier)

    def CreatePathIntplWithRotationBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplWithRotationBuffer(self, channel, points)

    def FreePathIntplWithRotationBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreePathIntplWithRotationBuffer(self, channel)

    def GetPathIntplWithRotationBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplWithRotationBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def SetPathIntplWithRotationConfiguration(self, channel, pConfig):
        return _WMX3ApiPython.AdvMotion_SetPathIntplWithRotationConfiguration(self, channel, pConfig)

    def AddPathIntplWithRotationCommand(self, channel, pCommand):
        return _WMX3ApiPython.AdvMotion_AddPathIntplWithRotationCommand(self, channel, pCommand)

    def StartPathIntplWithRotation(self, channel):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation(self, channel)

    def StartPathIntplWithRotation_Trigger(self, channel, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Trigger(self, channel, pTrigger)

    def StartPathIntplWithRotation_TriggerEvents(self, channel, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_TriggerEvents(self, channel, pTriggerEvents)

    def StartPathIntplWithRotation_Pos(self, channel, pos):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos(self, channel, pos)

    def StartPathIntplWithRotation_Pos_Trigger(self, channel, pos, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos_Trigger(self, channel, pos, pTrigger)

    def StartPathIntplWithRotation_Pos_TriggerEvents(self, channel, pos, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos_TriggerEvents(self, channel, pos, pTriggerEvents)

    def StartPathIntplWithRotation_Point(self, channel, point):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point(self, channel, point)

    def StartPathIntplWithRotation_Point_Trigger(self, channel, point, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point_Trigger(self, channel, point, pTrigger)

    def StartPathIntplWithRotation_Point_TriggerEvents(self, channel, point, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point_TriggerEvents(self, channel, point, pTriggerEvents)

    def ClearPathIntplWithRotation(self, channel):
        return _WMX3ApiPython.AdvMotion_ClearPathIntplWithRotation(self, channel)

    def GetPathIntplWithRotationStatus(self, channel):
        pStatus = AdvMotion_PathIntplWithRotationStatus()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplWithRotationStatus(self, channel, pStatus)
        return ret, pStatus



    def CreatePathIntplLookaheadBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplLookaheadBuffer(self, channel, points)

    def FreePathIntplLookaheadBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreePathIntplLookaheadBuffer(self, channel)

    def GetPathIntplLookaheadBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplLookaheadBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def SetPathIntplLookaheadConfiguration(self, channel, pConfig):
        return _WMX3ApiPython.AdvMotion_SetPathIntplLookaheadConfiguration(self, channel, pConfig)

    def AddPathIntplLookaheadCommand(self, channel, pCommand):
        return _WMX3ApiPython.AdvMotion_AddPathIntplLookaheadCommand(self, channel, pCommand)

    def StartPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_StartPathIntplLookahead(self, channel)

    def StopPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_StopPathIntplLookahead(self, channel)

    def ClearPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_ClearPathIntplLookahead(self, channel)

    def GetPathIntplLookaheadStatus(self, channel):
        pStatus = AdvMotion_PathIntplLookaheadStatus()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplLookaheadStatus(self, channel, pStatus)
        return ret, pStatus



    def StartCoordinatedPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartCoordinatedPos(self, *args)

    def StartCoordinatedPos_JerkRatio(self, pPosCommand):
        return _WMX3ApiPython.AdvMotion_StartCoordinatedPos_JerkRatio(self, pPosCommand)

    def StartTwoLinkLinearPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkLinearPos(self, pTwoLinkCommand)

    def StartTwoLinkLinearMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkLinearMov(self, pTwoLinkCommand)

    def StartTwoLinkRotaryPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkRotaryPos(self, pTwoLinkCommand)

    def StartTwoLinkRotaryMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkRotaryMov(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredLinearPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredLinearPos(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredLinearMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredLinearMov(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredRotaryPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredRotaryPos(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredRotaryMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredRotaryMov(self, pTwoLinkCommand)

    def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds):
        pPos1 = doublep()
        pPos2 = doublep()
        pMoveDistance = doublep()
        pRemainDistance = doublep()
        pTotalDistance = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds, pPos1, pPos2, pMoveDistance, pRemainDistance, pTotalDistance)
        return ret, pPos1.value(), pPos2.value(), pMoveDistance.value(), pRemainDistance.value(), pTotalDistance.value()



    def SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex , pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulateTimeAtDist(self, pPathIntplCommand, specificDistance):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtDist(self, pPathIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds):
        pPos1 = doublep()
        pPos2 = doublep()
        pPos3 = doublep()
        pMoveDistance = doublep()
        pRemainDistance = doublep()
        pTotalDistance = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds, pPos1, pPos2, pPos3, pMoveDistance, pRemainDistance, pTotalDistance)
        return ret, pPos1.value(), pPos2.value(), pMoveDistance.value(), pRemainDistance.value(), pTotalDistance.value()



    def SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtPos_3D(self, pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex , pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulateTimeAtDist(self, pPathIntplCommand, specificDistance):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtDist_3D(self, pPathIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()


AdvMotion_swigregister = _WMX3ApiPython.AdvMotion_swigregister
AdvMotion_swigregister(AdvMotion)

class AdvVelocity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvVelocity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvVelocity, name)
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        this = _WMX3ApiPython.new_AdvVelocity(advMotion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvVelocity
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvVelocity_IsDeviceValid(self)

    def SetConstantLinearVel(self, masterAxis, slaveAxis, centerPos, minR, positiveMaxR, negativeMaxR, constLinVel, initVelVariance):
        return _WMX3ApiPython.AdvVelocity_SetConstantLinearVel(self, masterAxis, slaveAxis, centerPos, minR, positiveMaxR, negativeMaxR, constLinVel, initVelVariance)

    def ResolveConstantLinearVel(self, axis):
        return _WMX3ApiPython.AdvVelocity_ResolveConstantLinearVel(self, axis)
AdvVelocity_swigregister = _WMX3ApiPython.AdvVelocity_swigregister
AdvVelocity_swigregister(AdvVelocity)

class AdvSync_ECAMType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMType, name)
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.AdvSync_ECAMType_Normal
    Periodic = _WMX3ApiPython.AdvSync_ECAMType_Periodic
    Repeat = _WMX3ApiPython.AdvSync_ECAMType_Repeat

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMType
    __del__ = lambda self: None
AdvSync_ECAMType_swigregister = _WMX3ApiPython.AdvSync_ECAMType_swigregister
AdvSync_ECAMType_swigregister(AdvSync_ECAMType)

class AdvSync_ECAMSourceType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMSourceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMSourceType, name)
    __repr__ = _swig_repr
    MasterCommandPos = _WMX3ApiPython.AdvSync_ECAMSourceType_MasterCommandPos
    MasterFeedbackPos = _WMX3ApiPython.AdvSync_ECAMSourceType_MasterFeedbackPos
    EncoderInput = _WMX3ApiPython.AdvSync_ECAMSourceType_EncoderInput

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMSourceType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMSourceType
    __del__ = lambda self: None
AdvSync_ECAMSourceType_swigregister = _WMX3ApiPython.AdvSync_ECAMSourceType_swigregister
AdvSync_ECAMSourceType_swigregister(AdvSync_ECAMSourceType)

class AdvSync_ECAMSourceOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMSourceOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMSourceOptions, name)
    __repr__ = _swig_repr

    def SetData(self, pECAMSourceOptions):
        return _WMX3ApiPython.AdvSync_ECAMSourceOptions_SetData(self, pECAMSourceOptions)

    def GetData(self, pECAMSourceOptions):
        return _WMX3ApiPython.AdvSync_ECAMSourceOptions_GetData(self, pECAMSourceOptions)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_type_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_type_set)
    __swig_setmethods__["encoderByteAddress"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_set
    __swig_getmethods__["encoderByteAddress"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_get
    if _newclass:
        encoderByteAddress = _swig_property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_set)
    __swig_setmethods__["encoderSize"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_set
    __swig_getmethods__["encoderSize"] = _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_get
    if _newclass:
        encoderSize = _swig_property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMSourceOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMSourceOptions
    __del__ = lambda self: None
AdvSync_ECAMSourceOptions_swigregister = _WMX3ApiPython.AdvSync_ECAMSourceOptions_swigregister
AdvSync_ECAMSourceOptions_swigregister(AdvSync_ECAMSourceOptions)

class AdvSync_ECAMClutchType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMClutchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMClutchType, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.AdvSync_ECAMClutchType_PyNone
    SimpleCatchUp = _WMX3ApiPython.AdvSync_ECAMClutchType_SimpleCatchUp

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMClutchType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMClutchType
    __del__ = lambda self: None
AdvSync_ECAMClutchType_swigregister = _WMX3ApiPython.AdvSync_ECAMClutchType_swigregister
AdvSync_ECAMClutchType_swigregister(AdvSync_ECAMClutchType)

class AdvSync_ECAMClutchOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMClutchOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMClutchOptions, name)
    __repr__ = _swig_repr

    def SetData(self, pECAMClutchOptions):
        return _WMX3ApiPython.AdvSync_ECAMClutchOptions_SetData(self, pECAMClutchOptions)

    def GetData(self, pECAMClutchOptions):
        return _WMX3ApiPython.AdvSync_ECAMClutchOptions_GetData(self, pECAMClutchOptions)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_type_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_type_set)
    __swig_setmethods__["simpleCatchUpVelocity"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_set
    __swig_getmethods__["simpleCatchUpVelocity"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_get
    if _newclass:
        simpleCatchUpVelocity = _swig_property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_set)
    __swig_setmethods__["simpleCatchUpAcc"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_set
    __swig_getmethods__["simpleCatchUpAcc"] = _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_get
    if _newclass:
        simpleCatchUpAcc = _swig_property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMClutchOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMClutchOptions
    __del__ = lambda self: None
AdvSync_ECAMClutchOptions_swigregister = _WMX3ApiPython.AdvSync_ECAMClutchOptions_swigregister
AdvSync_ECAMClutchOptions_swigregister(AdvSync_ECAMClutchOptions)

class AdvSync_ECAMOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMOptions, name)
    __repr__ = _swig_repr

    def SetData(self, pECAMOptions):
        return _WMX3ApiPython.AdvSync_ECAMOptions_SetData(self, pECAMOptions)

    def GetData(self, pECAMOptions):
        return _WMX3ApiPython.AdvSync_ECAMOptions_GetData(self, pECAMOptions)
    __swig_setmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMOptions_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.AdvSync_ECAMOptions_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.AdvSync_ECAMOptions_type_get, _WMX3ApiPython.AdvSync_ECAMOptions_type_set)
    __swig_setmethods__["source"] = _WMX3ApiPython.AdvSync_ECAMOptions_source_set
    __swig_getmethods__["source"] = _WMX3ApiPython.AdvSync_ECAMOptions_source_get
    if _newclass:
        source = _swig_property(_WMX3ApiPython.AdvSync_ECAMOptions_source_get, _WMX3ApiPython.AdvSync_ECAMOptions_source_set)
    __swig_setmethods__["clutch"] = _WMX3ApiPython.AdvSync_ECAMOptions_clutch_set
    __swig_getmethods__["clutch"] = _WMX3ApiPython.AdvSync_ECAMOptions_clutch_get
    if _newclass:
        clutch = _swig_property(_WMX3ApiPython.AdvSync_ECAMOptions_clutch_get, _WMX3ApiPython.AdvSync_ECAMOptions_clutch_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMOptions
    __del__ = lambda self: None
AdvSync_ECAMOptions_swigregister = _WMX3ApiPython.AdvSync_ECAMOptions_swigregister
AdvSync_ECAMOptions_swigregister(AdvSync_ECAMOptions)

class AdvSync_ECAMData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_ECAMData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_ECAMData, name)
    __repr__ = _swig_repr

    def SetData(self, pECAMData):
        return _WMX3ApiPython.AdvSync_ECAMData_SetData(self, pECAMData)

    def GetData(self, pECAMData):
        return _WMX3ApiPython.AdvSync_ECAMData_GetData(self, pECAMData)
    __swig_setmethods__["slaveAxis"] = _WMX3ApiPython.AdvSync_ECAMData_slaveAxis_set
    __swig_getmethods__["slaveAxis"] = _WMX3ApiPython.AdvSync_ECAMData_slaveAxis_get
    if _newclass:
        slaveAxis = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_slaveAxis_get, _WMX3ApiPython.AdvSync_ECAMData_slaveAxis_set)
    __swig_setmethods__["masterAxis"] = _WMX3ApiPython.AdvSync_ECAMData_masterAxis_set
    __swig_getmethods__["masterAxis"] = _WMX3ApiPython.AdvSync_ECAMData_masterAxis_get
    if _newclass:
        masterAxis = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_masterAxis_get, _WMX3ApiPython.AdvSync_ECAMData_masterAxis_set)
    __swig_setmethods__["numPoints"] = _WMX3ApiPython.AdvSync_ECAMData_numPoints_set
    __swig_getmethods__["numPoints"] = _WMX3ApiPython.AdvSync_ECAMData_numPoints_get
    if _newclass:
        numPoints = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_numPoints_get, _WMX3ApiPython.AdvSync_ECAMData_numPoints_set)
    __swig_setmethods__["options"] = _WMX3ApiPython.AdvSync_ECAMData_options_set
    __swig_getmethods__["options"] = _WMX3ApiPython.AdvSync_ECAMData_options_get
    if _newclass:
        options = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_options_get, _WMX3ApiPython.AdvSync_ECAMData_options_set)
    __swig_setmethods__["slavePos"] = _WMX3ApiPython.AdvSync_ECAMData_slavePos_set
    __swig_getmethods__["slavePos"] = _WMX3ApiPython.AdvSync_ECAMData_slavePos_get
    if _newclass:
        slavePos = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_slavePos_get, _WMX3ApiPython.AdvSync_ECAMData_slavePos_set)

    def SetSlavePos(self, index, value):
        return _WMX3ApiPython.AdvSync_ECAMData_SetSlavePos(self, index, value)

    def GetSlavePos(self, index):
        return _WMX3ApiPython.AdvSync_ECAMData_GetSlavePos(self, index)
    __swig_setmethods__["masterPos"] = _WMX3ApiPython.AdvSync_ECAMData_masterPos_set
    __swig_getmethods__["masterPos"] = _WMX3ApiPython.AdvSync_ECAMData_masterPos_get
    if _newclass:
        masterPos = _swig_property(_WMX3ApiPython.AdvSync_ECAMData_masterPos_get, _WMX3ApiPython.AdvSync_ECAMData_masterPos_set)

    def SetMasterPos(self, index, value):
        return _WMX3ApiPython.AdvSync_ECAMData_SetMasterPos(self, index, value)

    def GetMasterPos(self, index):
        return _WMX3ApiPython.AdvSync_ECAMData_GetMasterPos(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_ECAMData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMData
    __del__ = lambda self: None
AdvSync_ECAMData_swigregister = _WMX3ApiPython.AdvSync_ECAMData_swigregister
AdvSync_ECAMData_swigregister(AdvSync_ECAMData)

class AdvSync_DancerControlOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_DancerControlOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_DancerControlOptions, name)
    __repr__ = _swig_repr

    def SetData(self, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_DancerControlOptions_SetData(self, pDancerControlOptions)

    def GetData(self, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_DancerControlOptions_GetData(self, pDancerControlOptions)
    __swig_setmethods__["proportionalGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_set
    __swig_getmethods__["proportionalGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_get
    if _newclass:
        proportionalGain = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_set)
    __swig_setmethods__["integralGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_set
    __swig_getmethods__["integralGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_get
    if _newclass:
        integralGain = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_set)
    __swig_setmethods__["derivativeGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_set
    __swig_getmethods__["derivativeGain"] = _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_get
    if _newclass:
        derivativeGain = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_set)
    __swig_setmethods__["gainFactor"] = _WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_set
    __swig_getmethods__["gainFactor"] = _WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_get
    if _newclass:
        gainFactor = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_get, _WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_set)
    __swig_setmethods__["derivativeSamples"] = _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_set
    __swig_getmethods__["derivativeSamples"] = _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_get
    if _newclass:
        derivativeSamples = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_get, _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_set)
    __swig_setmethods__["integralTimeCycles"] = _WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_set
    __swig_getmethods__["integralTimeCycles"] = _WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_get
    if _newclass:
        integralTimeCycles = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_get, _WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_set)
    __swig_setmethods__["maxIntegral"] = _WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_set
    __swig_getmethods__["maxIntegral"] = _WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_get
    if _newclass:
        maxIntegral = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_get, _WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_set)
    __swig_setmethods__["inputByteAddress"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_set
    __swig_getmethods__["inputByteAddress"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_get
    if _newclass:
        inputByteAddress = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_set)
    __swig_setmethods__["inputSize"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_set
    __swig_getmethods__["inputSize"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_get
    if _newclass:
        inputSize = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_set)
    __swig_setmethods__["inputZero"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_set
    __swig_getmethods__["inputZero"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_get
    if _newclass:
        inputZero = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_set)
    __swig_setmethods__["inputMax"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_set
    __swig_getmethods__["inputMax"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_get
    if _newclass:
        inputMax = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_set)
    __swig_setmethods__["inputMin"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_set
    __swig_getmethods__["inputMin"] = _WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_get
    if _newclass:
        inputMin = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_set)
    __swig_setmethods__["useOutput"] = _WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_set
    __swig_getmethods__["useOutput"] = _WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_get
    if _newclass:
        useOutput = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_get, _WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_set)
    __swig_setmethods__["zeroClampMinInput"] = _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_set
    __swig_getmethods__["zeroClampMinInput"] = _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_get
    if _newclass:
        zeroClampMinInput = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_get, _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_set)
    __swig_setmethods__["zeroClampMinVel"] = _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_set
    __swig_getmethods__["zeroClampMinVel"] = _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_get
    if _newclass:
        zeroClampMinVel = _swig_property(_WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_get, _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_DancerControlOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_DancerControlOptions
    __del__ = lambda self: None
AdvSync_DancerControlOptions_swigregister = _WMX3ApiPython.AdvSync_DancerControlOptions_swigregister
AdvSync_DancerControlOptions_swigregister(AdvSync_DancerControlOptions)

class AdvSync_DancerControlStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync_DancerControlStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync_DancerControlStatus, name)
    __repr__ = _swig_repr

    def GetData(self, pDancerControlStatus):
        return _WMX3ApiPython.AdvSync_DancerControlStatus_GetData(self, pDancerControlStatus)

    def SetData(self, pDancerControlStatus):
        return _WMX3ApiPython.AdvSync_DancerControlStatus_SetData(self, pDancerControlStatus)
    __swig_setmethods__["P"] = _WMX3ApiPython.AdvSync_DancerControlStatus_P_set
    __swig_getmethods__["P"] = _WMX3ApiPython.AdvSync_DancerControlStatus_P_get
    if _newclass:
        P = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_P_get, _WMX3ApiPython.AdvSync_DancerControlStatus_P_set)
    __swig_setmethods__["I"] = _WMX3ApiPython.AdvSync_DancerControlStatus_I_set
    __swig_getmethods__["I"] = _WMX3ApiPython.AdvSync_DancerControlStatus_I_get
    if _newclass:
        I = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_I_get, _WMX3ApiPython.AdvSync_DancerControlStatus_I_set)
    __swig_setmethods__["D"] = _WMX3ApiPython.AdvSync_DancerControlStatus_D_set
    __swig_getmethods__["D"] = _WMX3ApiPython.AdvSync_DancerControlStatus_D_get
    if _newclass:
        D = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_D_get, _WMX3ApiPython.AdvSync_DancerControlStatus_D_set)
    __swig_setmethods__["inputValue"] = _WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_set
    __swig_getmethods__["inputValue"] = _WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_get
    if _newclass:
        inputValue = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_get, _WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_set)
    __swig_setmethods__["iSamples"] = _WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_set
    __swig_getmethods__["iSamples"] = _WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_get
    if _newclass:
        iSamples = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_get, _WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_set)
    __swig_setmethods__["dSamples"] = _WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_set
    __swig_getmethods__["dSamples"] = _WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_get
    if _newclass:
        dSamples = _swig_property(_WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_get, _WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_set)

    def __init__(self):
        this = _WMX3ApiPython.new_AdvSync_DancerControlStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_DancerControlStatus
    __del__ = lambda self: None
AdvSync_DancerControlStatus_swigregister = _WMX3ApiPython.AdvSync_DancerControlStatus_swigregister
AdvSync_DancerControlStatus_swigregister(AdvSync_DancerControlStatus)

class AdvSync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSync, name)
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        this = _WMX3ApiPython.new_AdvSync(advMotion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync
    __del__ = lambda self: None

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvSync_IsDeviceValid(self)

    def StartECAM(self, channel, pECAMData):
        return _WMX3ApiPython.AdvSync_StartECAM(self, channel, pECAMData)

    def GetECAM(self, channel):
        pECAMData = AdvSync_ECAMData()
        ret = _WMX3ApiPython.AdvSync_GetECAM(self, channel, pECAMData)
        return ret, pECAMData



    def StopECAM(self, channel):
        return _WMX3ApiPython.AdvSync_StopECAM(self, channel)

    def StartDancerControl(self, axis, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_StartDancerControl(self, axis, pDancerControlOptions)

    def StopDancerControl(self, axis):
        return _WMX3ApiPython.AdvSync_StopDancerControl(self, axis)

    def GetDancerControlStatus(self, axis):
        pDancerControlStatus = AdvSync_DancerControlStatus()
        ret = _WMX3ApiPython.AdvSync_GetDancerControlStatus(self, axis, pDancerControlStatus)
        return ret, pDancerControlStatus


AdvSync_swigregister = _WMX3ApiPython.AdvSync_swigregister
AdvSync_swigregister(AdvSync)

class AdvancedMotion(_object):
    """AdvancedMotion.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedMotion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedMotion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        AdvancedMotion.rtdll Ver.3.5.0.0 is required to use.
        AdvancedMotion.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_AdvancedMotion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_AdvancedMotion
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.AdvancedMotion_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.AdvancedMotion_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.AdvancedMotion_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.AdvancedMotion_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.AdvancedMotion_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.AdvancedMotion_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvancedMotion_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.AdvancedMotion_GetVersion(self)
    __swig_setmethods__["advMotion"] = _WMX3ApiPython.AdvancedMotion_advMotion_set
    __swig_getmethods__["advMotion"] = _WMX3ApiPython.AdvancedMotion_advMotion_get
    if _newclass:
        advMotion = _swig_property(_WMX3ApiPython.AdvancedMotion_advMotion_get, _WMX3ApiPython.AdvancedMotion_advMotion_set)
    __swig_setmethods__["advSync"] = _WMX3ApiPython.AdvancedMotion_advSync_set
    __swig_getmethods__["advSync"] = _WMX3ApiPython.AdvancedMotion_advSync_get
    if _newclass:
        advSync = _swig_property(_WMX3ApiPython.AdvancedMotion_advSync_get, _WMX3ApiPython.AdvancedMotion_advSync_set)
    __swig_setmethods__["advVelocity"] = _WMX3ApiPython.AdvancedMotion_advVelocity_set
    __swig_getmethods__["advVelocity"] = _WMX3ApiPython.AdvancedMotion_advVelocity_get
    if _newclass:
        advVelocity = _swig_property(_WMX3ApiPython.AdvancedMotion_advVelocity_get, _WMX3ApiPython.AdvancedMotion_advVelocity_set)
AdvancedMotion_swigregister = _WMX3ApiPython.AdvancedMotion_swigregister
AdvancedMotion_swigregister(AdvancedMotion)

def AdvancedMotion_ErrorToString(errCode):
    return _WMX3ApiPython.AdvancedMotion_ErrorToString(errCode)
AdvancedMotion_ErrorToString = _WMX3ApiPython.AdvancedMotion_ErrorToString

def AdvancedMotion_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.AdvancedMotion_ApiLogToString(pLogData, logDataSize)
AdvancedMotion_ApiLogToString = _WMX3ApiPython.AdvancedMotion_ApiLogToString

def AdvancedMotion_GetLibVersion():
    return _WMX3ApiPython.AdvancedMotion_GetLibVersion()
AdvancedMotion_GetLibVersion = _WMX3ApiPython.AdvancedMotion_GetLibVersion

class UserMemoryErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryErrorCode, name)
    __repr__ = _swig_repr
    CurrentlyReallocatingUserMemory = _WMX3ApiPython.UserMemoryErrorCode_CurrentlyReallocatingUserMemory
    FailedToReallocateUserMemory = _WMX3ApiPython.UserMemoryErrorCode_FailedToReallocateUserMemory
    UserMemoryCountOutOfRange = _WMX3ApiPython.UserMemoryErrorCode_UserMemoryCountOutOfRange
    SharedMemoryNull = _WMX3ApiPython.UserMemoryErrorCode_SharedMemoryNull

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryErrorCode
    __del__ = lambda self: None
UserMemoryErrorCode_swigregister = _WMX3ApiPython.UserMemoryErrorCode_swigregister
UserMemoryErrorCode_swigregister(UserMemoryErrorCode)

class BaseUserMemoryEventInputFunctionArguments_MSingle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseUserMemoryEventInputFunctionArguments_MSingle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseUserMemoryEventInputFunctionArguments_MSingle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MSingle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MSingle
    __del__ = lambda self: None
BaseUserMemoryEventInputFunctionArguments_MSingle_swigregister = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_swigregister
BaseUserMemoryEventInputFunctionArguments_MSingle_swigregister(BaseUserMemoryEventInputFunctionArguments_MSingle)

class BaseUserMemoryEventInputFunctionArguments_MMulti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseUserMemoryEventInputFunctionArguments_MMulti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseUserMemoryEventInputFunctionArguments_MMulti, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetByteAddress(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetInvert(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MMulti()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MMulti
    __del__ = lambda self: None
BaseUserMemoryEventInputFunctionArguments_MMulti_swigregister = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_swigregister
BaseUserMemoryEventInputFunctionArguments_MMulti_swigregister(BaseUserMemoryEventInputFunctionArguments_MMulti)

class BaseUserMemoryEventInputFunctionArguments_MBytes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseUserMemoryEventInputFunctionArguments_MBytes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseUserMemoryEventInputFunctionArguments_MBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_set)
    __swig_setmethods__["value"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_set
    __swig_getmethods__["value"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_get
    if _newclass:
        value = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_set)

    def __init__(self):
        this = _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MBytes
    __del__ = lambda self: None
BaseUserMemoryEventInputFunctionArguments_MBytes_swigregister = _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_swigregister
BaseUserMemoryEventInputFunctionArguments_MBytes_swigregister(BaseUserMemoryEventInputFunctionArguments_MBytes)

class UserMemoryEventInputFunctionArguments_MBit(BaseUserMemoryEventInputFunctionArguments_MSingle):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_MBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_MBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_MBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_MBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_MBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_MBit_swigregister
UserMemoryEventInputFunctionArguments_MBit_swigregister(UserMemoryEventInputFunctionArguments_MBit)

class UserMemoryEventInputFunctionArguments_NotMBit(BaseUserMemoryEventInputFunctionArguments_MSingle):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MSingle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_NotMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MSingle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_NotMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NotMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NotMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_NotMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NotMBit_swigregister
UserMemoryEventInputFunctionArguments_NotMBit_swigregister(UserMemoryEventInputFunctionArguments_NotMBit)

class UserMemoryEventInputFunctionArguments_OrMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_OrMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_OrMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_OrMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_OrMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_OrMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_OrMBit_swigregister
UserMemoryEventInputFunctionArguments_OrMBit_swigregister(UserMemoryEventInputFunctionArguments_OrMBit)

class UserMemoryEventInputFunctionArguments_AndMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_AndMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_AndMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_AndMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_AndMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_AndMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_AndMBit_swigregister
UserMemoryEventInputFunctionArguments_AndMBit_swigregister(UserMemoryEventInputFunctionArguments_AndMBit)

class UserMemoryEventInputFunctionArguments_XorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_XorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_XorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_XorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_XorMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_XorMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_XorMBit_swigregister
UserMemoryEventInputFunctionArguments_XorMBit_swigregister(UserMemoryEventInputFunctionArguments_XorMBit)

class UserMemoryEventInputFunctionArguments_NandMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_NandMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_NandMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NandMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NandMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_NandMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NandMBit_swigregister
UserMemoryEventInputFunctionArguments_NandMBit_swigregister(UserMemoryEventInputFunctionArguments_NandMBit)

class UserMemoryEventInputFunctionArguments_NorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_NorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_NorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NorMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_NorMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NorMBit_swigregister
UserMemoryEventInputFunctionArguments_NorMBit_swigregister(UserMemoryEventInputFunctionArguments_NorMBit)

class UserMemoryEventInputFunctionArguments_XnorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_XnorMBit, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MMulti]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_XnorMBit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_XnorMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_XnorMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_XnorMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_XnorMBit_swigregister
UserMemoryEventInputFunctionArguments_XnorMBit_swigregister(UserMemoryEventInputFunctionArguments_XnorMBit)

class UserMemoryEventInputFunctionArguments_DelayMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_DelayMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_DelayMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_set)
    __swig_setmethods__["delayTime"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_set
    __swig_getmethods__["delayTime"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_get
    if _newclass:
        delayTime = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_set)

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_DelayMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_DelayMBit
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_DelayMBit_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_swigregister
UserMemoryEventInputFunctionArguments_DelayMBit_swigregister(UserMemoryEventInputFunctionArguments_DelayMBit)

class UserMemoryEventInputFunctionArguments_EqualMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_EqualMBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_EqualMBytes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_EqualMBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_EqualMBytes
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_EqualMBytes_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_EqualMBytes_swigregister
UserMemoryEventInputFunctionArguments_EqualMBytes_swigregister(UserMemoryEventInputFunctionArguments_EqualMBytes)

class UserMemoryEventInputFunctionArguments_GreaterMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_GreaterMBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_GreaterMBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSigned"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_set
    __swig_getmethods__["isSigned"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_get
    if _newclass:
        isSigned = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_GreaterMBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_GreaterMBytes
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_GreaterMBytes_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_swigregister
UserMemoryEventInputFunctionArguments_GreaterMBytes_swigregister(UserMemoryEventInputFunctionArguments_GreaterMBytes)

class UserMemoryEventInputFunctionArguments_LessMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    __swig_setmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputFunctionArguments_LessMBytes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseUserMemoryEventInputFunctionArguments_MBytes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputFunctionArguments_LessMBytes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSigned"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_set
    __swig_getmethods__["isSigned"] = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_get
    if _newclass:
        isSigned = _swig_property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_set)

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_LessMBytes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_LessMBytes
    __del__ = lambda self: None
UserMemoryEventInputFunctionArguments_LessMBytes_swigregister = _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_swigregister
UserMemoryEventInputFunctionArguments_LessMBytes_swigregister(UserMemoryEventInputFunctionArguments_LessMBytes)

class UserMemoryEventInputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInputType, name)
    __repr__ = _swig_repr
    MBit = _WMX3ApiPython.UserMemoryEventInputType_MBit
    NotMBit = _WMX3ApiPython.UserMemoryEventInputType_NotMBit
    OrMBit = _WMX3ApiPython.UserMemoryEventInputType_OrMBit
    AndMBit = _WMX3ApiPython.UserMemoryEventInputType_AndMBit
    XorMBit = _WMX3ApiPython.UserMemoryEventInputType_XorMBit
    NandMBit = _WMX3ApiPython.UserMemoryEventInputType_NandMBit
    NorMBit = _WMX3ApiPython.UserMemoryEventInputType_NorMBit
    XnorMBit = _WMX3ApiPython.UserMemoryEventInputType_XnorMBit
    DelayMBit = _WMX3ApiPython.UserMemoryEventInputType_DelayMBit
    EqualMBytes = _WMX3ApiPython.UserMemoryEventInputType_EqualMBytes
    GreaterMBytes = _WMX3ApiPython.UserMemoryEventInputType_GreaterMBytes
    LessMBytes = _WMX3ApiPython.UserMemoryEventInputType_LessMBytes

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputType
    __del__ = lambda self: None
UserMemoryEventInputType_swigregister = _WMX3ApiPython.UserMemoryEventInputType_swigregister
UserMemoryEventInputType_swigregister(UserMemoryEventInputType)

class UserMemoryEventInput(EventInput):
    __swig_setmethods__ = {}
    for _s in [EventInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventInput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventInput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputModuleId(self):
        return _WMX3ApiPython.UserMemoryEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.UserMemoryEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryEventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_setmethods__["type"] = _WMX3ApiPython.UserMemoryEventInput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.UserMemoryEventInput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.UserMemoryEventInput_type_get, _WMX3ApiPython.UserMemoryEventInput_type_set)
    __swig_setmethods__["mBit"] = _WMX3ApiPython.UserMemoryEventInput_mBit_set
    __swig_getmethods__["mBit"] = _WMX3ApiPython.UserMemoryEventInput_mBit_get
    if _newclass:
        mBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_mBit_get, _WMX3ApiPython.UserMemoryEventInput_mBit_set)
    __swig_setmethods__["notMBit"] = _WMX3ApiPython.UserMemoryEventInput_notMBit_set
    __swig_getmethods__["notMBit"] = _WMX3ApiPython.UserMemoryEventInput_notMBit_get
    if _newclass:
        notMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_notMBit_get, _WMX3ApiPython.UserMemoryEventInput_notMBit_set)
    __swig_setmethods__["orMBit"] = _WMX3ApiPython.UserMemoryEventInput_orMBit_set
    __swig_getmethods__["orMBit"] = _WMX3ApiPython.UserMemoryEventInput_orMBit_get
    if _newclass:
        orMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_orMBit_get, _WMX3ApiPython.UserMemoryEventInput_orMBit_set)
    __swig_setmethods__["andMBit"] = _WMX3ApiPython.UserMemoryEventInput_andMBit_set
    __swig_getmethods__["andMBit"] = _WMX3ApiPython.UserMemoryEventInput_andMBit_get
    if _newclass:
        andMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_andMBit_get, _WMX3ApiPython.UserMemoryEventInput_andMBit_set)
    __swig_setmethods__["xorMBit"] = _WMX3ApiPython.UserMemoryEventInput_xorMBit_set
    __swig_getmethods__["xorMBit"] = _WMX3ApiPython.UserMemoryEventInput_xorMBit_get
    if _newclass:
        xorMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_xorMBit_get, _WMX3ApiPython.UserMemoryEventInput_xorMBit_set)
    __swig_setmethods__["nandMBit"] = _WMX3ApiPython.UserMemoryEventInput_nandMBit_set
    __swig_getmethods__["nandMBit"] = _WMX3ApiPython.UserMemoryEventInput_nandMBit_get
    if _newclass:
        nandMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_nandMBit_get, _WMX3ApiPython.UserMemoryEventInput_nandMBit_set)
    __swig_setmethods__["norMBit"] = _WMX3ApiPython.UserMemoryEventInput_norMBit_set
    __swig_getmethods__["norMBit"] = _WMX3ApiPython.UserMemoryEventInput_norMBit_get
    if _newclass:
        norMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_norMBit_get, _WMX3ApiPython.UserMemoryEventInput_norMBit_set)
    __swig_setmethods__["xnorMBit"] = _WMX3ApiPython.UserMemoryEventInput_xnorMBit_set
    __swig_getmethods__["xnorMBit"] = _WMX3ApiPython.UserMemoryEventInput_xnorMBit_get
    if _newclass:
        xnorMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_xnorMBit_get, _WMX3ApiPython.UserMemoryEventInput_xnorMBit_set)
    __swig_setmethods__["delayMBit"] = _WMX3ApiPython.UserMemoryEventInput_delayMBit_set
    __swig_getmethods__["delayMBit"] = _WMX3ApiPython.UserMemoryEventInput_delayMBit_get
    if _newclass:
        delayMBit = _swig_property(_WMX3ApiPython.UserMemoryEventInput_delayMBit_get, _WMX3ApiPython.UserMemoryEventInput_delayMBit_set)
    __swig_setmethods__["equalMBytes"] = _WMX3ApiPython.UserMemoryEventInput_equalMBytes_set
    __swig_getmethods__["equalMBytes"] = _WMX3ApiPython.UserMemoryEventInput_equalMBytes_get
    if _newclass:
        equalMBytes = _swig_property(_WMX3ApiPython.UserMemoryEventInput_equalMBytes_get, _WMX3ApiPython.UserMemoryEventInput_equalMBytes_set)
    __swig_setmethods__["greaterMBytes"] = _WMX3ApiPython.UserMemoryEventInput_greaterMBytes_set
    __swig_getmethods__["greaterMBytes"] = _WMX3ApiPython.UserMemoryEventInput_greaterMBytes_get
    if _newclass:
        greaterMBytes = _swig_property(_WMX3ApiPython.UserMemoryEventInput_greaterMBytes_get, _WMX3ApiPython.UserMemoryEventInput_greaterMBytes_set)
    __swig_setmethods__["lessMBytes"] = _WMX3ApiPython.UserMemoryEventInput_lessMBytes_set
    __swig_getmethods__["lessMBytes"] = _WMX3ApiPython.UserMemoryEventInput_lessMBytes_get
    if _newclass:
        lessMBytes = _swig_property(_WMX3ApiPython.UserMemoryEventInput_lessMBytes_get, _WMX3ApiPython.UserMemoryEventInput_lessMBytes_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInput
    __del__ = lambda self: None
UserMemoryEventInput_swigregister = _WMX3ApiPython.UserMemoryEventInput_swigregister
UserMemoryEventInput_swigregister(UserMemoryEventInput)

class UserMemoryEventOutputFunctionArguments_SetMBit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventOutputFunctionArguments_SetMBit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventOutputFunctionArguments_SetMBit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byteAddress"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_set
    __swig_getmethods__["byteAddress"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_get
    if _newclass:
        byteAddress = _swig_property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_set)
    __swig_setmethods__["bitAddress"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_set
    __swig_getmethods__["bitAddress"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_get
    if _newclass:
        bitAddress = _swig_property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_set)
    __swig_setmethods__["invert"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_set
    __swig_getmethods__["invert"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_get
    if _newclass:
        invert = _swig_property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_set)
    __swig_setmethods__["setOffState"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_set
    __swig_getmethods__["setOffState"] = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_get
    if _newclass:
        setOffState = _swig_property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_set)

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventOutputFunctionArguments_SetMBit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutputFunctionArguments_SetMBit
    __del__ = lambda self: None
UserMemoryEventOutputFunctionArguments_SetMBit_swigregister = _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_swigregister
UserMemoryEventOutputFunctionArguments_SetMBit_swigregister(UserMemoryEventOutputFunctionArguments_SetMBit)

class UserMemoryEventOutputType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventOutputType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventOutputType, name)
    __repr__ = _swig_repr
    SetMBit = _WMX3ApiPython.UserMemoryEventOutputType_SetMBit

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventOutputType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutputType
    __del__ = lambda self: None
UserMemoryEventOutputType_swigregister = _WMX3ApiPython.UserMemoryEventOutputType_swigregister
UserMemoryEventOutputType_swigregister(UserMemoryEventOutputType)

class UserMemoryEventOutput(EventOutput):
    __swig_setmethods__ = {}
    for _s in [EventOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryEventOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [EventOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryEventOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryEventOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOutputModuleId(self):
        return _WMX3ApiPython.UserMemoryEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.UserMemoryEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_setmethods__["type"] = _WMX3ApiPython.UserMemoryEventOutput_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.UserMemoryEventOutput_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.UserMemoryEventOutput_type_get, _WMX3ApiPython.UserMemoryEventOutput_type_set)
    __swig_setmethods__["setMBit"] = _WMX3ApiPython.UserMemoryEventOutput_setMBit_set
    __swig_getmethods__["setMBit"] = _WMX3ApiPython.UserMemoryEventOutput_setMBit_get
    if _newclass:
        setMBit = _swig_property(_WMX3ApiPython.UserMemoryEventOutput_setMBit_get, _WMX3ApiPython.UserMemoryEventOutput_setMBit_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutput
    __del__ = lambda self: None
UserMemoryEventOutput_swigregister = _WMX3ApiPython.UserMemoryEventOutput_swigregister
UserMemoryEventOutput_swigregister(UserMemoryEventOutput)

class UserMemoryLogInput(LogInput):
    __swig_setmethods__ = {}
    for _s in [LogInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryLogInput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, pUserMemoryLogInput):
        return _WMX3ApiPython.UserMemoryLogInput_SetData(self, pUserMemoryLogInput)

    def GetData(self, pUserMemoryLogInput):
        return _WMX3ApiPython.UserMemoryLogInput_GetData(self, pUserMemoryLogInput)

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryLogInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.UserMemoryLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.UserMemoryLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.UserMemoryLogInput_GetLogInput(self)
    __swig_setmethods__["mAddress"] = _WMX3ApiPython.UserMemoryLogInput_mAddress_set
    __swig_getmethods__["mAddress"] = _WMX3ApiPython.UserMemoryLogInput_mAddress_get
    if _newclass:
        mAddress = _swig_property(_WMX3ApiPython.UserMemoryLogInput_mAddress_get, _WMX3ApiPython.UserMemoryLogInput_mAddress_set)

    def SetMAddress(self, index, value):
        return _WMX3ApiPython.UserMemoryLogInput_SetMAddress(self, index, value)

    def GetMAddress(self, index):
        return _WMX3ApiPython.UserMemoryLogInput_GetMAddress(self, index)
    __swig_setmethods__["mAddressSize"] = _WMX3ApiPython.UserMemoryLogInput_mAddressSize_set
    __swig_getmethods__["mAddressSize"] = _WMX3ApiPython.UserMemoryLogInput_mAddressSize_get
    if _newclass:
        mAddressSize = _swig_property(_WMX3ApiPython.UserMemoryLogInput_mAddressSize_get, _WMX3ApiPython.UserMemoryLogInput_mAddressSize_set)
    __swig_setmethods__["mLogFormat"] = _WMX3ApiPython.UserMemoryLogInput_mLogFormat_set
    __swig_getmethods__["mLogFormat"] = _WMX3ApiPython.UserMemoryLogInput_mLogFormat_get
    if _newclass:
        mLogFormat = _swig_property(_WMX3ApiPython.UserMemoryLogInput_mLogFormat_get, _WMX3ApiPython.UserMemoryLogInput_mLogFormat_set)

    def SetMLogFormat(self, index, value):
        return _WMX3ApiPython.UserMemoryLogInput_SetMLogFormat(self, index, value)

    def GetMLogFormat(self, index):
        return _WMX3ApiPython.UserMemoryLogInput_GetMLogFormat(self, index)
    __swig_setmethods__["mFormatCount"] = _WMX3ApiPython.UserMemoryLogInput_mFormatCount_set
    __swig_getmethods__["mFormatCount"] = _WMX3ApiPython.UserMemoryLogInput_mFormatCount_get
    if _newclass:
        mFormatCount = _swig_property(_WMX3ApiPython.UserMemoryLogInput_mFormatCount_get, _WMX3ApiPython.UserMemoryLogInput_mFormatCount_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryLogInput
    __del__ = lambda self: None
UserMemoryLogInput_swigregister = _WMX3ApiPython.UserMemoryLogInput_swigregister
UserMemoryLogInput_swigregister(UserMemoryLogInput)

class UserMemoryLogOutput(LogOutput):
    __swig_setmethods__ = {}
    for _s in [LogOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemoryLogOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemoryLogOutput, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _WMX3ApiPython.new_UserMemoryLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.UserMemoryLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.UserMemoryLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.UserMemoryLogOutput_SetLogOutput(self, src)
    __swig_setmethods__["data"] = _WMX3ApiPython.UserMemoryLogOutput_data_set
    __swig_getmethods__["data"] = _WMX3ApiPython.UserMemoryLogOutput_data_get
    if _newclass:
        data = _swig_property(_WMX3ApiPython.UserMemoryLogOutput_data_get, _WMX3ApiPython.UserMemoryLogOutput_data_set)

    def SetData(self, index1, index2, value):
        return _WMX3ApiPython.UserMemoryLogOutput_SetData(self, index1, index2, value)

    def GetData(self, index1, index2):
        return _WMX3ApiPython.UserMemoryLogOutput_GetData(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryLogOutput
    __del__ = lambda self: None
UserMemoryLogOutput_swigregister = _WMX3ApiPython.UserMemoryLogOutput_swigregister
UserMemoryLogOutput_swigregister(UserMemoryLogOutput)

class UserMemory(_object):
    """UserMemory.rtdll Ver.3.5.0.0 is required to use."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMemory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        UserMemory.rtdll Ver.3.5.0.0 is required to use.
        UserMemory.rtdll Ver.3.5.0.0 is required to use.
        """
        this = _WMX3ApiPython.new_UserMemory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemory
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.UserMemory_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.UserMemory_ErrorToString
    if _newclass:
        ApiLogToString = staticmethod(_WMX3ApiPython.UserMemory_ApiLogToString)
    else:
        ApiLogToString = _WMX3ApiPython.UserMemory_ApiLogToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.UserMemory_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.UserMemory_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.UserMemory_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.UserMemory_GetVersion(self)

    def SetMBit(self, addr, bit, data):
        return _WMX3ApiPython.UserMemory_SetMBit(self, addr, bit, data)

    def SetMByte(self, addr, data):
        return _WMX3ApiPython.UserMemory_SetMByte(self, addr, data)

    def SetMBytes(self, addr, size, pData):
        return _WMX3ApiPython.UserMemory_SetMBytes(self, addr, size, pData)

    def SetMBits(self, pAddr, pBit, pData, count):
        return _WMX3ApiPython.UserMemory_SetMBits(self, pAddr, pBit, pData, count)

    def SetMAnalogDataChar(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataChar(self, addr, analogData)

    def SetMAnalogDataUChar(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUChar(self, addr, analogData)

    def SetMAnalogDataShort(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataShort(self, addr, analogData)

    def SetMAnalogDataUShort(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUShort(self, addr, analogData)

    def SetMAnalogDataInt(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataInt(self, addr, analogData)

    def SetMAnalogDataUInt(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUInt(self, addr, analogData)

    def GetMBit(self, bit, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMByte(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMBytes(self, addr, size):
        dataList = []
        dataArray = uintArray(size)
        ret = _WMX3ApiPython.UserMemory_GetMBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetMAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetMBitEx(self, addr, bit, data):
        return _WMX3ApiPython.UserMemory_SetMBitEx(self, addr, bit, data)

    def SetMByteEx(self, addr, data):
        return _WMX3ApiPython.UserMemory_SetMByteEx(self, addr, data)

    def SetMBytesEx(self, addr, size, pData):
        return _WMX3ApiPython.UserMemory_SetMBytesEx(self, addr, size, pData)

    def SetMBitsEx(self, pAddr, pBit, pData, count):
        return _WMX3ApiPython.UserMemory_SetMBitsEx(self, pAddr, pBit, pData, count)

    def SetMAnalogDataCharEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataCharEx(self, addr, analogData)

    def SetMAnalogDataUCharEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUCharEx(self, addr, analogData)

    def SetMAnalogDataShortEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataShortEx(self, addr, analogData)

    def SetMAnalogDataUShortEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUShortEx(self, addr, analogData)

    def SetMAnalogDataIntEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataIntEx(self, addr, analogData)

    def SetMAnalogDataUIntEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUIntEx(self, addr, analogData)

    def GetMBitEx(self, bit, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMByteEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMBytesEx(self, addr, size):
        dataList = []
        dataArray = uintArray(size)
        ret = _WMX3ApiPython.UserMemory_GetMBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetMAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0


UserMemory_swigregister = _WMX3ApiPython.UserMemory_swigregister
UserMemory_swigregister(UserMemory)

def UserMemory_ErrorToString(errCode):
    return _WMX3ApiPython.UserMemory_ErrorToString(errCode)
UserMemory_ErrorToString = _WMX3ApiPython.UserMemory_ErrorToString

def UserMemory_ApiLogToString(pLogData, logDataSize):
    return _WMX3ApiPython.UserMemory_ApiLogToString(pLogData, logDataSize)
UserMemory_ApiLogToString = _WMX3ApiPython.UserMemory_ApiLogToString

def UserMemory_GetLibVersion():
    return _WMX3ApiPython.UserMemory_GetLibVersion()
UserMemory_GetLibVersion = _WMX3ApiPython.UserMemory_GetLibVersion

class EcStateMachine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcStateMachine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcStateMachine, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EcStateMachine_PyNone
    Init = _WMX3ApiPython.EcStateMachine_Init
    Preop = _WMX3ApiPython.EcStateMachine_Preop
    Boot = _WMX3ApiPython.EcStateMachine_Boot
    Safeop = _WMX3ApiPython.EcStateMachine_Safeop
    Op = _WMX3ApiPython.EcStateMachine_Op

    def __init__(self):
        this = _WMX3ApiPython.new_EcStateMachine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcStateMachine
    __del__ = lambda self: None
EcStateMachine_swigregister = _WMX3ApiPython.EcStateMachine_swigregister
EcStateMachine_swigregister(EcStateMachine)

class EcSdoType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSdoType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSdoType, name)
    __repr__ = _swig_repr
    Expedited = _WMX3ApiPython.EcSdoType_Expedited
    Normal = _WMX3ApiPython.EcSdoType_Normal

    def __init__(self):
        this = _WMX3ApiPython.new_EcSdoType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSdoType
    __del__ = lambda self: None
EcSdoType_swigregister = _WMX3ApiPython.EcSdoType_swigregister
EcSdoType_swigregister(EcSdoType)

class EcObjectDescriptionListType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcObjectDescriptionListType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcObjectDescriptionListType, name)
    __repr__ = _swig_repr
    Len = _WMX3ApiPython.EcObjectDescriptionListType_Len
    AllObjects = _WMX3ApiPython.EcObjectDescriptionListType_AllObjects
    RxPdo = _WMX3ApiPython.EcObjectDescriptionListType_RxPdo
    TxPdo = _WMX3ApiPython.EcObjectDescriptionListType_TxPdo
    DevReplacement = _WMX3ApiPython.EcObjectDescriptionListType_DevReplacement
    Startup = _WMX3ApiPython.EcObjectDescriptionListType_Startup

    def __init__(self):
        this = _WMX3ApiPython.new_EcObjectDescriptionListType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcObjectDescriptionListType
    __del__ = lambda self: None
EcObjectDescriptionListType_swigregister = _WMX3ApiPython.EcObjectDescriptionListType_swigregister
EcObjectDescriptionListType_swigregister(EcObjectDescriptionListType)

class EcHotconnectState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcHotconnectState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcHotconnectState, name)
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.EcHotconnectState_Idle
    Running = _WMX3ApiPython.EcHotconnectState_Running
    Abort = _WMX3ApiPython.EcHotconnectState_Abort
    Unknown = _WMX3ApiPython.EcHotconnectState_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EcHotconnectState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcHotconnectState
    __del__ = lambda self: None
EcHotconnectState_swigregister = _WMX3ApiPython.EcHotconnectState_swigregister
EcHotconnectState_swigregister(EcHotconnectState)

class EcHotconnectAbortCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcHotconnectAbortCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcHotconnectAbortCode, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EcHotconnectAbortCode_PyNone
    PortOpenError = _WMX3ApiPython.EcHotconnectAbortCode_PortOpenError
    Timeout = _WMX3ApiPython.EcHotconnectAbortCode_Timeout
    ScanNetworkFailed = _WMX3ApiPython.EcHotconnectAbortCode_ScanNetworkFailed
    ApplyNewTopologyError = _WMX3ApiPython.EcHotconnectAbortCode_ApplyNewTopologyError
    InitNewSlavesError = _WMX3ApiPython.EcHotconnectAbortCode_InitNewSlavesError
    RecalculateDcError = _WMX3ApiPython.EcHotconnectAbortCode_RecalculateDcError
    ClearDLEventError = _WMX3ApiPython.EcHotconnectAbortCode_ClearDLEventError
    Unknown = _WMX3ApiPython.EcHotconnectAbortCode_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EcHotconnectAbortCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcHotconnectAbortCode
    __del__ = lambda self: None
EcHotconnectAbortCode_swigregister = _WMX3ApiPython.EcHotconnectAbortCode_swigregister
EcHotconnectAbortCode_swigregister(EcHotconnectAbortCode)

class EcOperationMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcOperationMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcOperationMode, name)
    __repr__ = _swig_repr
    NONE = _WMX3ApiPython.EcOperationMode_NONE
    PP = _WMX3ApiPython.EcOperationMode_PP
    VL = _WMX3ApiPython.EcOperationMode_VL
    PV = _WMX3ApiPython.EcOperationMode_PV
    TQ = _WMX3ApiPython.EcOperationMode_TQ
    HM = _WMX3ApiPython.EcOperationMode_HM
    IP = _WMX3ApiPython.EcOperationMode_IP
    CSP = _WMX3ApiPython.EcOperationMode_CSP
    CSV = _WMX3ApiPython.EcOperationMode_CSV
    CST = _WMX3ApiPython.EcOperationMode_CST
    CSTCA = _WMX3ApiPython.EcOperationMode_CSTCA
    Unknown = _WMX3ApiPython.EcOperationMode_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_EcOperationMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcOperationMode
    __del__ = lambda self: None
EcOperationMode_swigregister = _WMX3ApiPython.EcOperationMode_swigregister
EcOperationMode_swigregister(EcOperationMode)

class EcMasterMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMasterMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMasterMode, name)
    __repr__ = _swig_repr
    CyclicMode = _WMX3ApiPython.EcMasterMode_CyclicMode
    PPMode = _WMX3ApiPython.EcMasterMode_PPMode
    MonitorMode = _WMX3ApiPython.EcMasterMode_MonitorMode

    def __init__(self):
        this = _WMX3ApiPython.new_EcMasterMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterMode
    __del__ = lambda self: None
EcMasterMode_swigregister = _WMX3ApiPython.EcMasterMode_swigregister
EcMasterMode_swigregister(EcMasterMode)

class EcErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EcErrorCode, name)
    __repr__ = _swig_repr
    EcError = _WMX3ApiPython.EcErrorCode_EcError
    ScanNetworkFailed = _WMX3ApiPython.EcErrorCode_ScanNetworkFailed
    HotconnectFailed = _WMX3ApiPython.EcErrorCode_HotconnectFailed
    SharedMemoryNull = _WMX3ApiPython.EcErrorCode_SharedMemoryNull
    SlaveStateChangeError = _WMX3ApiPython.EcErrorCode_SlaveStateChangeError
    SlaveStateBelowPreop = _WMX3ApiPython.EcErrorCode_SlaveStateBelowPreop
    SlaveInvalidAddressingMode = _WMX3ApiPython.EcErrorCode_SlaveInvalidAddressingMode
    SlaveInEmergencyState = _WMX3ApiPython.EcErrorCode_SlaveInEmergencyState
    SlaveMailboxInUse = _WMX3ApiPython.EcErrorCode_SlaveMailboxInUse
    SlaveSdoDownloadError = _WMX3ApiPython.EcErrorCode_SlaveSdoDownloadError
    SlaveSdoUploadError = _WMX3ApiPython.EcErrorCode_SlaveSdoUploadError
    SlaveSdoInfoGetODListError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetODListError
    SlaveSdoInfoGetODError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetODError
    SlaveSdoInfoGetEDError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetEDError
    SlaveActualSizeLargerThanBufferSize = _WMX3ApiPython.EcErrorCode_SlaveActualSizeLargerThanBufferSize
    SlaveRegWriteError = _WMX3ApiPython.EcErrorCode_SlaveRegWriteError
    SlaveRegReadError = _WMX3ApiPython.EcErrorCode_SlaveRegReadError
    SlaveSIIWriteError = _WMX3ApiPython.EcErrorCode_SlaveSIIWriteError
    SlaveSIIWriteFailedToSetChecksum = _WMX3ApiPython.EcErrorCode_SlaveSIIWriteFailedToSetChecksum
    SlaveSIIReadError = _WMX3ApiPython.EcErrorCode_SlaveSIIReadError
    SlavePdoReadWriteNotAllowed = _WMX3ApiPython.EcErrorCode_SlavePdoReadWriteNotAllowed
    SlavePdoReadWriteTimeout = _WMX3ApiPython.EcErrorCode_SlavePdoReadWriteTimeout
    SlavePdoNotMapped = _WMX3ApiPython.EcErrorCode_SlavePdoNotMapped
    SlaveTxPdoWriteNotAllowed = _WMX3ApiPython.EcErrorCode_SlaveTxPdoWriteNotAllowed
    SlaveFoENotInBootState = _WMX3ApiPython.EcErrorCode_SlaveFoENotInBootState
    SlaveFoEFileOpenError = _WMX3ApiPython.EcErrorCode_SlaveFoEFileOpenError
    SlaveFoEReadError = _WMX3ApiPython.EcErrorCode_SlaveFoEReadError
    SlaveFoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveFoEWriteError
    SlaveFoEFilePathTooLong = _WMX3ApiPython.EcErrorCode_SlaveFoEFilePathTooLong
    SlaveFoEFileNameTooLong = _WMX3ApiPython.EcErrorCode_SlaveFoEFileNameTooLong
    SlaveAoEReadError = _WMX3ApiPython.EcErrorCode_SlaveAoEReadError
    SlaveAoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveAoEWriteError
    SlaveSoEReadError = _WMX3ApiPython.EcErrorCode_SlaveSoEReadError
    SlaveSoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveSoEWriteError
    SlaveVoEReadError = _WMX3ApiPython.EcErrorCode_SlaveVoEReadError
    SlaveVoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveVoEWriteError
    AxisNotServoOn = _WMX3ApiPython.EcErrorCode_AxisNotServoOn
    NotInPPMode = _WMX3ApiPython.EcErrorCode_NotInPPMode
    NotInHMMode = _WMX3ApiPython.EcErrorCode_NotInHMMode
    NotInPVMode = _WMX3ApiPython.EcErrorCode_NotInPVMode
    NotInTQMode = _WMX3ApiPython.EcErrorCode_NotInTQMode
    PdoNotMapped = _WMX3ApiPython.EcErrorCode_PdoNotMapped
    SlaveNotSupportVirtualSerial = _WMX3ApiPython.EcErrorCode_SlaveNotSupportVirtualSerial
    OpenComFailed = _WMX3ApiPython.EcErrorCode_OpenComFailed
    CreateComProcessThreadFailed = _WMX3ApiPython.EcErrorCode_CreateComProcessThreadFailed
    NotInMonitorMode = _WMX3ApiPython.EcErrorCode_NotInMonitorMode
    VirtualSlaveNotEnabled = _WMX3ApiPython.EcErrorCode_VirtualSlaveNotEnabled
    OtherOperationIsRunning = _WMX3ApiPython.EcErrorCode_OtherOperationIsRunning

    def __init__(self):
        this = _WMX3ApiPython.new_EcErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcErrorCode
    __del__ = lambda self: None
EcErrorCode_swigregister = _WMX3ApiPython.EcErrorCode_swigregister
EcErrorCode_swigregister(EcErrorCode)

class EcLogInputPdo_DataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogInputPdo_DataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogInputPdo_DataType, name)
    __repr__ = _swig_repr
    Signed = _WMX3ApiPython.EcLogInputPdo_DataType_Signed
    Unsigned = _WMX3ApiPython.EcLogInputPdo_DataType_Unsigned
    Hexadecimal = _WMX3ApiPython.EcLogInputPdo_DataType_Hexadecimal

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogInputPdo_DataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInputPdo_DataType
    __del__ = lambda self: None
EcLogInputPdo_DataType_swigregister = _WMX3ApiPython.EcLogInputPdo_DataType_swigregister
EcLogInputPdo_DataType_swigregister(EcLogInputPdo_DataType)

class EcLogInputPdo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogInputPdo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogInputPdo, name)
    __repr__ = _swig_repr

    def SetData(self, ecLogInputPdo):
        return _WMX3ApiPython.EcLogInputPdo_SetData(self, ecLogInputPdo)

    def GetData(self, ecLogInputPdo):
        return _WMX3ApiPython.EcLogInputPdo_GetData(self, ecLogInputPdo)
    __swig_setmethods__["slaveId"] = _WMX3ApiPython.EcLogInputPdo_slaveId_set
    __swig_getmethods__["slaveId"] = _WMX3ApiPython.EcLogInputPdo_slaveId_get
    if _newclass:
        slaveId = _swig_property(_WMX3ApiPython.EcLogInputPdo_slaveId_get, _WMX3ApiPython.EcLogInputPdo_slaveId_set)
    __swig_setmethods__["type"] = _WMX3ApiPython.EcLogInputPdo_type_set
    __swig_getmethods__["type"] = _WMX3ApiPython.EcLogInputPdo_type_get
    if _newclass:
        type = _swig_property(_WMX3ApiPython.EcLogInputPdo_type_get, _WMX3ApiPython.EcLogInputPdo_type_set)
    __swig_setmethods__["index"] = _WMX3ApiPython.EcLogInputPdo_index_set
    __swig_getmethods__["index"] = _WMX3ApiPython.EcLogInputPdo_index_get
    if _newclass:
        index = _swig_property(_WMX3ApiPython.EcLogInputPdo_index_get, _WMX3ApiPython.EcLogInputPdo_index_set)
    __swig_setmethods__["subIndex"] = _WMX3ApiPython.EcLogInputPdo_subIndex_set
    __swig_getmethods__["subIndex"] = _WMX3ApiPython.EcLogInputPdo_subIndex_get
    if _newclass:
        subIndex = _swig_property(_WMX3ApiPython.EcLogInputPdo_subIndex_get, _WMX3ApiPython.EcLogInputPdo_subIndex_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogInputPdo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInputPdo
    __del__ = lambda self: None
EcLogInputPdo_swigregister = _WMX3ApiPython.EcLogInputPdo_swigregister
EcLogInputPdo_swigregister(EcLogInputPdo)

class EcLogInput(LogInput):
    __swig_setmethods__ = {}
    for _s in [LogInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogInput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogInput, name)
    __repr__ = _swig_repr

    def SetData(self, ecLogInput):
        return _WMX3ApiPython.EcLogInput_SetData(self, ecLogInput)

    def GetData(self, ecLogInput):
        return _WMX3ApiPython.EcLogInput_GetData(self, ecLogInput)

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.EcLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EcLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EcLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.EcLogInput_GetLogInput(self)
    __swig_setmethods__["masterId"] = _WMX3ApiPython.EcLogInput_masterId_set
    __swig_getmethods__["masterId"] = _WMX3ApiPython.EcLogInput_masterId_get
    if _newclass:
        masterId = _swig_property(_WMX3ApiPython.EcLogInput_masterId_get, _WMX3ApiPython.EcLogInput_masterId_set)
    __swig_setmethods__["numOfPdo"] = _WMX3ApiPython.EcLogInput_numOfPdo_set
    __swig_getmethods__["numOfPdo"] = _WMX3ApiPython.EcLogInput_numOfPdo_get
    if _newclass:
        numOfPdo = _swig_property(_WMX3ApiPython.EcLogInput_numOfPdo_get, _WMX3ApiPython.EcLogInput_numOfPdo_set)
    __swig_setmethods__["pdo"] = _WMX3ApiPython.EcLogInput_pdo_set
    __swig_getmethods__["pdo"] = _WMX3ApiPython.EcLogInput_pdo_get
    if _newclass:
        pdo = _swig_property(_WMX3ApiPython.EcLogInput_pdo_get, _WMX3ApiPython.EcLogInput_pdo_set)

    def SetPdo(self, index, value):
        return _WMX3ApiPython.EcLogInput_SetPdo(self, index, value)

    def GetPdo(self, index):
        return _WMX3ApiPython.EcLogInput_GetPdo(self, index)
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInput
    __del__ = lambda self: None
EcLogInput_swigregister = _WMX3ApiPython.EcLogInput_swigregister
EcLogInput_swigregister(EcLogInput)

class EcLogOutputPdo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogOutputPdo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogOutputPdo, name)
    __repr__ = _swig_repr

    def SetThisData(self, ecLogOutputPdo):
        return _WMX3ApiPython.EcLogOutputPdo_SetThisData(self, ecLogOutputPdo)

    def GetThisData(self, ecLogOutputPdo):
        return _WMX3ApiPython.EcLogOutputPdo_GetThisData(self, ecLogOutputPdo)
    __swig_setmethods__["slaveId"] = _WMX3ApiPython.EcLogOutputPdo_slaveId_set
    __swig_getmethods__["slaveId"] = _WMX3ApiPython.EcLogOutputPdo_slaveId_get
    if _newclass:
        slaveId = _swig_property(_WMX3ApiPython.EcLogOutputPdo_slaveId_get, _WMX3ApiPython.EcLogOutputPdo_slaveId_set)
    __swig_setmethods__["index"] = _WMX3ApiPython.EcLogOutputPdo_index_set
    __swig_getmethods__["index"] = _WMX3ApiPython.EcLogOutputPdo_index_get
    if _newclass:
        index = _swig_property(_WMX3ApiPython.EcLogOutputPdo_index_get, _WMX3ApiPython.EcLogOutputPdo_index_set)
    __swig_setmethods__["subIndex"] = _WMX3ApiPython.EcLogOutputPdo_subIndex_set
    __swig_getmethods__["subIndex"] = _WMX3ApiPython.EcLogOutputPdo_subIndex_get
    if _newclass:
        subIndex = _swig_property(_WMX3ApiPython.EcLogOutputPdo_subIndex_get, _WMX3ApiPython.EcLogOutputPdo_subIndex_set)
    __swig_setmethods__["length"] = _WMX3ApiPython.EcLogOutputPdo_length_set
    __swig_getmethods__["length"] = _WMX3ApiPython.EcLogOutputPdo_length_get
    if _newclass:
        length = _swig_property(_WMX3ApiPython.EcLogOutputPdo_length_get, _WMX3ApiPython.EcLogOutputPdo_length_set)
    __swig_setmethods__["data"] = _WMX3ApiPython.EcLogOutputPdo_data_set
    __swig_getmethods__["data"] = _WMX3ApiPython.EcLogOutputPdo_data_get
    if _newclass:
        data = _swig_property(_WMX3ApiPython.EcLogOutputPdo_data_get, _WMX3ApiPython.EcLogOutputPdo_data_set)

    def SetData(self, index, value):
        return _WMX3ApiPython.EcLogOutputPdo_SetData(self, index, value)

    def GetData(self, index):
        return _WMX3ApiPython.EcLogOutputPdo_GetData(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogOutputPdo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutputPdo
    __del__ = lambda self: None
EcLogOutputPdo_swigregister = _WMX3ApiPython.EcLogOutputPdo_swigregister
EcLogOutputPdo_swigregister(EcLogOutputPdo)

class EcLogOutputData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogOutputData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogOutputData, name)
    __repr__ = _swig_repr

    def SetData(self, ecLogOutputData):
        return _WMX3ApiPython.EcLogOutputData_SetData(self, ecLogOutputData)

    def GetData(self, ecLogOutputData):
        return _WMX3ApiPython.EcLogOutputData_GetData(self, ecLogOutputData)
    __swig_setmethods__["masterId"] = _WMX3ApiPython.EcLogOutputData_masterId_set
    __swig_getmethods__["masterId"] = _WMX3ApiPython.EcLogOutputData_masterId_get
    if _newclass:
        masterId = _swig_property(_WMX3ApiPython.EcLogOutputData_masterId_get, _WMX3ApiPython.EcLogOutputData_masterId_set)
    __swig_setmethods__["numOfPdo"] = _WMX3ApiPython.EcLogOutputData_numOfPdo_set
    __swig_getmethods__["numOfPdo"] = _WMX3ApiPython.EcLogOutputData_numOfPdo_get
    if _newclass:
        numOfPdo = _swig_property(_WMX3ApiPython.EcLogOutputData_numOfPdo_get, _WMX3ApiPython.EcLogOutputData_numOfPdo_set)
    __swig_setmethods__["pdo"] = _WMX3ApiPython.EcLogOutputData_pdo_set
    __swig_getmethods__["pdo"] = _WMX3ApiPython.EcLogOutputData_pdo_get
    if _newclass:
        pdo = _swig_property(_WMX3ApiPython.EcLogOutputData_pdo_get, _WMX3ApiPython.EcLogOutputData_pdo_set)

    def SetPdo(self, index, value):
        return _WMX3ApiPython.EcLogOutputData_SetPdo(self, index, value)

    def GetPdo(self, index):
        return _WMX3ApiPython.EcLogOutputData_GetPdo(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogOutputData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutputData
    __del__ = lambda self: None
EcLogOutputData_swigregister = _WMX3ApiPython.EcLogOutputData_swigregister
EcLogOutputData_swigregister(EcLogOutputData)

class EcLogOutput(LogOutput):
    __swig_setmethods__ = {}
    for _s in [LogOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcLogOutput, name, value)
    __swig_getmethods__ = {}
    for _s in [LogOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EcLogOutput, name)
    __repr__ = _swig_repr

    def SetData(self, ecLogOutput):
        return _WMX3ApiPython.EcLogOutput_SetData(self, ecLogOutput)

    def GetData(self, ecLogOutput):
        return _WMX3ApiPython.EcLogOutput_GetData(self, ecLogOutput)

    def __init__(self):
        this = _WMX3ApiPython.new_EcLogOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetModuleId(self):
        return _WMX3ApiPython.EcLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.EcLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.EcLogOutput_SetLogOutput(self, src)
    __swig_setmethods__["ecData"] = _WMX3ApiPython.EcLogOutput_ecData_set
    __swig_getmethods__["ecData"] = _WMX3ApiPython.EcLogOutput_ecData_get
    if _newclass:
        ecData = _swig_property(_WMX3ApiPython.EcLogOutput_ecData_get, _WMX3ApiPython.EcLogOutput_ecData_set)

    def SetEcData(self, index, value):
        return _WMX3ApiPython.EcLogOutput_SetEcData(self, index, value)

    def GetEcData(self, index):
        return _WMX3ApiPython.EcLogOutput_GetEcData(self, index)
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutput
    __del__ = lambda self: None
EcLogOutput_swigregister = _WMX3ApiPython.EcLogOutput_swigregister
EcLogOutput_swigregister(EcLogOutput)

class EcAoESender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcAoESender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcAoESender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["senderNetId"] = _WMX3ApiPython.EcAoESender_senderNetId_set
    __swig_getmethods__["senderNetId"] = _WMX3ApiPython.EcAoESender_senderNetId_get
    if _newclass:
        senderNetId = _swig_property(_WMX3ApiPython.EcAoESender_senderNetId_get, _WMX3ApiPython.EcAoESender_senderNetId_set)

    def SetSenderNetId(self, index, value):
        return _WMX3ApiPython.EcAoESender_SetSenderNetId(self, index, value)

    def GetSenderNetId(self, index):
        return _WMX3ApiPython.EcAoESender_GetSenderNetId(self, index)
    __swig_setmethods__["senderPort"] = _WMX3ApiPython.EcAoESender_senderPort_set
    __swig_getmethods__["senderPort"] = _WMX3ApiPython.EcAoESender_senderPort_get
    if _newclass:
        senderPort = _swig_property(_WMX3ApiPython.EcAoESender_senderPort_get, _WMX3ApiPython.EcAoESender_senderPort_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcAoESender()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcAoESender
    __del__ = lambda self: None
EcAoESender_swigregister = _WMX3ApiPython.EcAoESender_swigregister
EcAoESender_swigregister(EcAoESender)

class EcSlaveSdoInfoObjectDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveSdoInfoObjectDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveSdoInfoObjectDescription, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoObjectDescription):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_GetData(self, ecSlaveSdoInfoObjectDescription)
    __swig_setmethods__["index"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_set
    __swig_getmethods__["index"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_get
    if _newclass:
        index = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_set)
    __swig_setmethods__["dataType"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_set
    __swig_getmethods__["dataType"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_get
    if _newclass:
        dataType = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_set)
    __swig_setmethods__["maxSubIndex"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_set
    __swig_getmethods__["maxSubIndex"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_get
    if _newclass:
        maxSubIndex = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_set)
    __swig_setmethods__["objectCode"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_set
    __swig_getmethods__["objectCode"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_get
    if _newclass:
        objectCode = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_set)
    __swig_setmethods__["name"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_set
    __swig_getmethods__["name"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_get
    if _newclass:
        name = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveSdoInfoObjectDescription()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoObjectDescription
    __del__ = lambda self: None
EcSlaveSdoInfoObjectDescription_swigregister = _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_swigregister
EcSlaveSdoInfoObjectDescription_swigregister(EcSlaveSdoInfoObjectDescription)

class EcSlaveSdoInfoObjectDescriptionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveSdoInfoObjectDescriptionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveSdoInfoObjectDescriptionList, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoObjectDescriptionList):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_GetData(self, ecSlaveSdoInfoObjectDescriptionList)
    __swig_setmethods__["num"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_set
    __swig_getmethods__["num"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_get
    if _newclass:
        num = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_set)
    __swig_setmethods__["objects"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_set
    __swig_getmethods__["objects"] = _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_get
    if _newclass:
        objects = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_set)

    def SetObjects(self, index, value):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_SetObjects(self, index, value)

    def GetObjects(self, index):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_GetObjects(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveSdoInfoObjectDescriptionList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoObjectDescriptionList
    __del__ = lambda self: None
EcSlaveSdoInfoObjectDescriptionList_swigregister = _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_swigregister
EcSlaveSdoInfoObjectDescriptionList_swigregister(EcSlaveSdoInfoObjectDescriptionList)

class EcSlaveSdoInfoEntryDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveSdoInfoEntryDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveSdoInfoEntryDescription, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoEntryDescription):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_GetData(self, ecSlaveSdoInfoEntryDescription)
    __swig_setmethods__["index"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_set
    __swig_getmethods__["index"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_get
    if _newclass:
        index = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_set)
    __swig_setmethods__["subIndex"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_set
    __swig_getmethods__["subIndex"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_get
    if _newclass:
        subIndex = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_set)
    __swig_setmethods__["valueInfo"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_set
    __swig_getmethods__["valueInfo"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_get
    if _newclass:
        valueInfo = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_set)
    __swig_setmethods__["dataType"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_set
    __swig_getmethods__["dataType"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_get
    if _newclass:
        dataType = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_set)
    __swig_setmethods__["bitLen"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_set
    __swig_getmethods__["bitLen"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_get
    if _newclass:
        bitLen = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_set)
    __swig_setmethods__["objectAccess"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_set
    __swig_getmethods__["objectAccess"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_get
    if _newclass:
        objectAccess = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_set)
    __swig_setmethods__["unitType"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_set
    __swig_getmethods__["unitType"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_get
    if _newclass:
        unitType = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_set)
    __swig_setmethods__["defaultValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_set
    __swig_getmethods__["defaultValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_get
    if _newclass:
        defaultValue = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_set)
    __swig_setmethods__["minimumValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_set
    __swig_getmethods__["minimumValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_get
    if _newclass:
        minimumValue = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_set)
    __swig_setmethods__["maximumValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_set
    __swig_getmethods__["maximumValue"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_get
    if _newclass:
        maximumValue = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_set)
    __swig_setmethods__["name"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_set
    __swig_getmethods__["name"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_get
    if _newclass:
        name = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveSdoInfoEntryDescription()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoEntryDescription
    __del__ = lambda self: None
EcSlaveSdoInfoEntryDescription_swigregister = _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_swigregister
EcSlaveSdoInfoEntryDescription_swigregister(EcSlaveSdoInfoEntryDescription)

class EcSlaveSdoInfoEntryDescriptionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveSdoInfoEntryDescriptionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveSdoInfoEntryDescriptionList, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoEntryDescriptionList):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_GetData(self, ecSlaveSdoInfoEntryDescriptionList)
    __swig_setmethods__["num"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_set
    __swig_getmethods__["num"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_get
    if _newclass:
        num = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_set)
    __swig_setmethods__["entry"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_set
    __swig_getmethods__["entry"] = _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_get
    if _newclass:
        entry = _swig_property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_set)

    def SetEntry(self, index, value):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_SetEntry(self, index, value)

    def GetEntry(self, index):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_GetEntry(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveSdoInfoEntryDescriptionList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoEntryDescriptionList
    __del__ = lambda self: None
EcSlaveSdoInfoEntryDescriptionList_swigregister = _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_swigregister
EcSlaveSdoInfoEntryDescriptionList_swigregister(EcSlaveSdoInfoEntryDescriptionList)

class EcSlavePdo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlavePdo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlavePdo, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlavePdo):
        return _WMX3ApiPython.EcSlavePdo_GetData(self, ecSlavePdo)

    def SetData(self, ecSlavePdo):
        return _WMX3ApiPython.EcSlavePdo_SetData(self, ecSlavePdo)
    __swig_setmethods__["enable"] = _WMX3ApiPython.EcSlavePdo_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.EcSlavePdo_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.EcSlavePdo_enable_get, _WMX3ApiPython.EcSlavePdo_enable_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.EcSlavePdo_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.EcSlavePdo_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.EcSlavePdo_size_get, _WMX3ApiPython.EcSlavePdo_size_set)
    __swig_setmethods__["offset"] = _WMX3ApiPython.EcSlavePdo_offset_set
    __swig_getmethods__["offset"] = _WMX3ApiPython.EcSlavePdo_offset_get
    if _newclass:
        offset = _swig_property(_WMX3ApiPython.EcSlavePdo_offset_get, _WMX3ApiPython.EcSlavePdo_offset_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlavePdo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlavePdo
    __del__ = lambda self: None
EcSlavePdo_swigregister = _WMX3ApiPython.EcSlavePdo_swigregister
EcSlavePdo_swigregister(EcSlavePdo)

class EcSlavePdoInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlavePdoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlavePdoInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlavePdoInfo):
        return _WMX3ApiPython.EcSlavePdoInfo_GetData(self, ecSlavePdoInfo)

    def SetData(self, ecSlavePdoInfo):
        return _WMX3ApiPython.EcSlavePdoInfo_SetData(self, ecSlavePdoInfo)
    __swig_setmethods__["statusWord"] = _WMX3ApiPython.EcSlavePdoInfo_statusWord_set
    __swig_getmethods__["statusWord"] = _WMX3ApiPython.EcSlavePdoInfo_statusWord_get
    if _newclass:
        statusWord = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_statusWord_get, _WMX3ApiPython.EcSlavePdoInfo_statusWord_set)
    __swig_setmethods__["modesOfOperationDisplay"] = _WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_set
    __swig_getmethods__["modesOfOperationDisplay"] = _WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_get
    if _newclass:
        modesOfOperationDisplay = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_get, _WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_set)
    __swig_setmethods__["positionActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_positionActualValue_set
    __swig_getmethods__["positionActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_positionActualValue_get
    if _newclass:
        positionActualValue = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_positionActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_positionActualValue_set)
    __swig_setmethods__["velocityActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_set
    __swig_getmethods__["velocityActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_get
    if _newclass:
        velocityActualValue = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_set)
    __swig_setmethods__["torqueActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_set
    __swig_getmethods__["torqueActualValue"] = _WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_get
    if _newclass:
        torqueActualValue = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_set)
    __swig_setmethods__["errorCode"] = _WMX3ApiPython.EcSlavePdoInfo_errorCode_set
    __swig_getmethods__["errorCode"] = _WMX3ApiPython.EcSlavePdoInfo_errorCode_get
    if _newclass:
        errorCode = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_errorCode_get, _WMX3ApiPython.EcSlavePdoInfo_errorCode_set)
    __swig_setmethods__["touchProbeStatus"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_set
    __swig_getmethods__["touchProbeStatus"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_get
    if _newclass:
        touchProbeStatus = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_set)
    __swig_setmethods__["touchProbePositionPos1"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_set
    __swig_getmethods__["touchProbePositionPos1"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_get
    if _newclass:
        touchProbePositionPos1 = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_set)
    __swig_setmethods__["touchProbePositionPos2"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_set
    __swig_getmethods__["touchProbePositionPos2"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_get
    if _newclass:
        touchProbePositionPos2 = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.EcSlavePdoInfo_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.EcSlavePdoInfo_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_followingError_get, _WMX3ApiPython.EcSlavePdoInfo_followingError_set)
    __swig_setmethods__["digitalInput"] = _WMX3ApiPython.EcSlavePdoInfo_digitalInput_set
    __swig_getmethods__["digitalInput"] = _WMX3ApiPython.EcSlavePdoInfo_digitalInput_get
    if _newclass:
        digitalInput = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_digitalInput_get, _WMX3ApiPython.EcSlavePdoInfo_digitalInput_set)
    __swig_setmethods__["controlWord"] = _WMX3ApiPython.EcSlavePdoInfo_controlWord_set
    __swig_getmethods__["controlWord"] = _WMX3ApiPython.EcSlavePdoInfo_controlWord_get
    if _newclass:
        controlWord = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_controlWord_get, _WMX3ApiPython.EcSlavePdoInfo_controlWord_set)
    __swig_setmethods__["modesOfOperation"] = _WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_set
    __swig_getmethods__["modesOfOperation"] = _WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_get
    if _newclass:
        modesOfOperation = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_get, _WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_set)
    __swig_setmethods__["targetPosition"] = _WMX3ApiPython.EcSlavePdoInfo_targetPosition_set
    __swig_getmethods__["targetPosition"] = _WMX3ApiPython.EcSlavePdoInfo_targetPosition_get
    if _newclass:
        targetPosition = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_targetPosition_get, _WMX3ApiPython.EcSlavePdoInfo_targetPosition_set)
    __swig_setmethods__["targetVelocity"] = _WMX3ApiPython.EcSlavePdoInfo_targetVelocity_set
    __swig_getmethods__["targetVelocity"] = _WMX3ApiPython.EcSlavePdoInfo_targetVelocity_get
    if _newclass:
        targetVelocity = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_targetVelocity_get, _WMX3ApiPython.EcSlavePdoInfo_targetVelocity_set)
    __swig_setmethods__["targetTorque"] = _WMX3ApiPython.EcSlavePdoInfo_targetTorque_set
    __swig_getmethods__["targetTorque"] = _WMX3ApiPython.EcSlavePdoInfo_targetTorque_get
    if _newclass:
        targetTorque = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_targetTorque_get, _WMX3ApiPython.EcSlavePdoInfo_targetTorque_set)
    __swig_setmethods__["maxTorque"] = _WMX3ApiPython.EcSlavePdoInfo_maxTorque_set
    __swig_getmethods__["maxTorque"] = _WMX3ApiPython.EcSlavePdoInfo_maxTorque_get
    if _newclass:
        maxTorque = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_maxTorque_get, _WMX3ApiPython.EcSlavePdoInfo_maxTorque_set)
    __swig_setmethods__["positiveTorqueLimit"] = _WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_set
    __swig_getmethods__["positiveTorqueLimit"] = _WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_get
    if _newclass:
        positiveTorqueLimit = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_get, _WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_set)
    __swig_setmethods__["negativeTorqueLimit"] = _WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_set
    __swig_getmethods__["negativeTorqueLimit"] = _WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_get
    if _newclass:
        negativeTorqueLimit = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_get, _WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_set)
    __swig_setmethods__["touchProbeFunction"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_set
    __swig_getmethods__["touchProbeFunction"] = _WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_get
    if _newclass:
        touchProbeFunction = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_set)
    __swig_setmethods__["velocityOffset"] = _WMX3ApiPython.EcSlavePdoInfo_velocityOffset_set
    __swig_getmethods__["velocityOffset"] = _WMX3ApiPython.EcSlavePdoInfo_velocityOffset_get
    if _newclass:
        velocityOffset = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_velocityOffset_get, _WMX3ApiPython.EcSlavePdoInfo_velocityOffset_set)
    __swig_setmethods__["torqueOffset"] = _WMX3ApiPython.EcSlavePdoInfo_torqueOffset_set
    __swig_getmethods__["torqueOffset"] = _WMX3ApiPython.EcSlavePdoInfo_torqueOffset_get
    if _newclass:
        torqueOffset = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_torqueOffset_get, _WMX3ApiPython.EcSlavePdoInfo_torqueOffset_set)
    __swig_setmethods__["maxMotorSpeed"] = _WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_set
    __swig_getmethods__["maxMotorSpeed"] = _WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_get
    if _newclass:
        maxMotorSpeed = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_get, _WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_set)
    __swig_setmethods__["digitalOutput"] = _WMX3ApiPython.EcSlavePdoInfo_digitalOutput_set
    __swig_getmethods__["digitalOutput"] = _WMX3ApiPython.EcSlavePdoInfo_digitalOutput_get
    if _newclass:
        digitalOutput = _swig_property(_WMX3ApiPython.EcSlavePdoInfo_digitalOutput_get, _WMX3ApiPython.EcSlavePdoInfo_digitalOutput_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlavePdoInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlavePdoInfo
    __del__ = lambda self: None
EcSlavePdoInfo_swigregister = _WMX3ApiPython.EcSlavePdoInfo_swigregister
EcSlavePdoInfo_swigregister(EcSlavePdoInfo)

class EcSlaveAxisInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveAxisInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveAxisInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveAxisInfo):
        return _WMX3ApiPython.EcSlaveAxisInfo_GetData(self, ecSlaveAxisInfo)

    def SetData(self, ecSlaveAxisInfo):
        return _WMX3ApiPython.EcSlaveAxisInfo_SetData(self, ecSlaveAxisInfo)
    __swig_setmethods__["axisIndex"] = _WMX3ApiPython.EcSlaveAxisInfo_axisIndex_set
    __swig_getmethods__["axisIndex"] = _WMX3ApiPython.EcSlaveAxisInfo_axisIndex_get
    if _newclass:
        axisIndex = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_axisIndex_get, _WMX3ApiPython.EcSlaveAxisInfo_axisIndex_set)
    __swig_setmethods__["digitalInputAddr"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_set
    __swig_getmethods__["digitalInputAddr"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_get
    if _newclass:
        digitalInputAddr = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_set)
    __swig_setmethods__["digitalInputSize"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_set
    __swig_getmethods__["digitalInputSize"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_get
    if _newclass:
        digitalInputSize = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_set)
    __swig_setmethods__["digitalOutputAddr"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_set
    __swig_getmethods__["digitalOutputAddr"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_get
    if _newclass:
        digitalOutputAddr = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_set)
    __swig_setmethods__["digitalOutputSize"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_set
    __swig_getmethods__["digitalOutputSize"] = _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_get
    if _newclass:
        digitalOutputSize = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_set)
    __swig_setmethods__["pdoInfo"] = _WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_set
    __swig_getmethods__["pdoInfo"] = _WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_get
    if _newclass:
        pdoInfo = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_get, _WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_set)
    __swig_setmethods__["operationMode"] = _WMX3ApiPython.EcSlaveAxisInfo_operationMode_set
    __swig_getmethods__["operationMode"] = _WMX3ApiPython.EcSlaveAxisInfo_operationMode_get
    if _newclass:
        operationMode = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_operationMode_get, _WMX3ApiPython.EcSlaveAxisInfo_operationMode_set)
    __swig_setmethods__["targetReached"] = _WMX3ApiPython.EcSlaveAxisInfo_targetReached_set
    __swig_getmethods__["targetReached"] = _WMX3ApiPython.EcSlaveAxisInfo_targetReached_get
    if _newclass:
        targetReached = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_targetReached_get, _WMX3ApiPython.EcSlaveAxisInfo_targetReached_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.EcSlaveAxisInfo_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.EcSlaveAxisInfo_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_followingError_get, _WMX3ApiPython.EcSlaveAxisInfo_followingError_set)
    __swig_setmethods__["homingError"] = _WMX3ApiPython.EcSlaveAxisInfo_homingError_set
    __swig_getmethods__["homingError"] = _WMX3ApiPython.EcSlaveAxisInfo_homingError_get
    if _newclass:
        homingError = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_homingError_get, _WMX3ApiPython.EcSlaveAxisInfo_homingError_set)
    __swig_setmethods__["homingAttained"] = _WMX3ApiPython.EcSlaveAxisInfo_homingAttained_set
    __swig_getmethods__["homingAttained"] = _WMX3ApiPython.EcSlaveAxisInfo_homingAttained_get
    if _newclass:
        homingAttained = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_homingAttained_get, _WMX3ApiPython.EcSlaveAxisInfo_homingAttained_set)
    __swig_setmethods__["halt"] = _WMX3ApiPython.EcSlaveAxisInfo_halt_set
    __swig_getmethods__["halt"] = _WMX3ApiPython.EcSlaveAxisInfo_halt_get
    if _newclass:
        halt = _swig_property(_WMX3ApiPython.EcSlaveAxisInfo_halt_get, _WMX3ApiPython.EcSlaveAxisInfo_halt_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveAxisInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveAxisInfo
    __del__ = lambda self: None
EcSlaveAxisInfo_swigregister = _WMX3ApiPython.EcSlaveAxisInfo_swigregister
EcSlaveAxisInfo_swigregister(EcSlaveAxisInfo)

class EcSlaveInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcSlaveInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcSlaveInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecSlaveInfo):
        return _WMX3ApiPython.EcSlaveInfo_GetData(self, ecSlaveInfo)

    def SetData(self, ecSlaveInfo):
        return _WMX3ApiPython.EcSlaveInfo_SetData(self, ecSlaveInfo)
    __swig_setmethods__["id"] = _WMX3ApiPython.EcSlaveInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.EcSlaveInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.EcSlaveInfo_id_get, _WMX3ApiPython.EcSlaveInfo_id_set)
    __swig_setmethods__["position"] = _WMX3ApiPython.EcSlaveInfo_position_set
    __swig_getmethods__["position"] = _WMX3ApiPython.EcSlaveInfo_position_get
    if _newclass:
        position = _swig_property(_WMX3ApiPython.EcSlaveInfo_position_get, _WMX3ApiPython.EcSlaveInfo_position_set)
    __swig_setmethods__["address"] = _WMX3ApiPython.EcSlaveInfo_address_set
    __swig_getmethods__["address"] = _WMX3ApiPython.EcSlaveInfo_address_get
    if _newclass:
        address = _swig_property(_WMX3ApiPython.EcSlaveInfo_address_get, _WMX3ApiPython.EcSlaveInfo_address_set)
    __swig_setmethods__["vendorId"] = _WMX3ApiPython.EcSlaveInfo_vendorId_set
    __swig_getmethods__["vendorId"] = _WMX3ApiPython.EcSlaveInfo_vendorId_get
    if _newclass:
        vendorId = _swig_property(_WMX3ApiPython.EcSlaveInfo_vendorId_get, _WMX3ApiPython.EcSlaveInfo_vendorId_set)
    __swig_setmethods__["productCode"] = _WMX3ApiPython.EcSlaveInfo_productCode_set
    __swig_getmethods__["productCode"] = _WMX3ApiPython.EcSlaveInfo_productCode_get
    if _newclass:
        productCode = _swig_property(_WMX3ApiPython.EcSlaveInfo_productCode_get, _WMX3ApiPython.EcSlaveInfo_productCode_set)
    __swig_setmethods__["revisionNo"] = _WMX3ApiPython.EcSlaveInfo_revisionNo_set
    __swig_getmethods__["revisionNo"] = _WMX3ApiPython.EcSlaveInfo_revisionNo_get
    if _newclass:
        revisionNo = _swig_property(_WMX3ApiPython.EcSlaveInfo_revisionNo_get, _WMX3ApiPython.EcSlaveInfo_revisionNo_set)
    __swig_setmethods__["serialNo"] = _WMX3ApiPython.EcSlaveInfo_serialNo_set
    __swig_getmethods__["serialNo"] = _WMX3ApiPython.EcSlaveInfo_serialNo_get
    if _newclass:
        serialNo = _swig_property(_WMX3ApiPython.EcSlaveInfo_serialNo_get, _WMX3ApiPython.EcSlaveInfo_serialNo_set)
    __swig_setmethods__["alias"] = _WMX3ApiPython.EcSlaveInfo_alias_set
    __swig_getmethods__["alias"] = _WMX3ApiPython.EcSlaveInfo_alias_get
    if _newclass:
        alias = _swig_property(_WMX3ApiPython.EcSlaveInfo_alias_get, _WMX3ApiPython.EcSlaveInfo_alias_set)
    __swig_setmethods__["numOfAxes"] = _WMX3ApiPython.EcSlaveInfo_numOfAxes_set
    __swig_getmethods__["numOfAxes"] = _WMX3ApiPython.EcSlaveInfo_numOfAxes_get
    if _newclass:
        numOfAxes = _swig_property(_WMX3ApiPython.EcSlaveInfo_numOfAxes_get, _WMX3ApiPython.EcSlaveInfo_numOfAxes_set)
    __swig_setmethods__["axisInfo"] = _WMX3ApiPython.EcSlaveInfo_axisInfo_set
    __swig_getmethods__["axisInfo"] = _WMX3ApiPython.EcSlaveInfo_axisInfo_get
    if _newclass:
        axisInfo = _swig_property(_WMX3ApiPython.EcSlaveInfo_axisInfo_get, _WMX3ApiPython.EcSlaveInfo_axisInfo_set)

    def SetAxisInfo(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetAxisInfo(self, index, value)

    def GetAxisInfo(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetAxisInfo(self, index)
    __swig_setmethods__["state"] = _WMX3ApiPython.EcSlaveInfo_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.EcSlaveInfo_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.EcSlaveInfo_state_get, _WMX3ApiPython.EcSlaveInfo_state_set)
    __swig_setmethods__["alStatusCode"] = _WMX3ApiPython.EcSlaveInfo_alStatusCode_set
    __swig_getmethods__["alStatusCode"] = _WMX3ApiPython.EcSlaveInfo_alStatusCode_get
    if _newclass:
        alStatusCode = _swig_property(_WMX3ApiPython.EcSlaveInfo_alStatusCode_get, _WMX3ApiPython.EcSlaveInfo_alStatusCode_set)
    __swig_setmethods__["offline"] = _WMX3ApiPython.EcSlaveInfo_offline_set
    __swig_getmethods__["offline"] = _WMX3ApiPython.EcSlaveInfo_offline_get
    if _newclass:
        offline = _swig_property(_WMX3ApiPython.EcSlaveInfo_offline_get, _WMX3ApiPython.EcSlaveInfo_offline_set)
    __swig_setmethods__["inaccessible"] = _WMX3ApiPython.EcSlaveInfo_inaccessible_set
    __swig_getmethods__["inaccessible"] = _WMX3ApiPython.EcSlaveInfo_inaccessible_get
    if _newclass:
        inaccessible = _swig_property(_WMX3ApiPython.EcSlaveInfo_inaccessible_get, _WMX3ApiPython.EcSlaveInfo_inaccessible_set)
    __swig_setmethods__["newSlave"] = _WMX3ApiPython.EcSlaveInfo_newSlave_set
    __swig_getmethods__["newSlave"] = _WMX3ApiPython.EcSlaveInfo_newSlave_get
    if _newclass:
        newSlave = _swig_property(_WMX3ApiPython.EcSlaveInfo_newSlave_get, _WMX3ApiPython.EcSlaveInfo_newSlave_set)
    __swig_setmethods__["reverseSlave"] = _WMX3ApiPython.EcSlaveInfo_reverseSlave_set
    __swig_getmethods__["reverseSlave"] = _WMX3ApiPython.EcSlaveInfo_reverseSlave_get
    if _newclass:
        reverseSlave = _swig_property(_WMX3ApiPython.EcSlaveInfo_reverseSlave_get, _WMX3ApiPython.EcSlaveInfo_reverseSlave_set)
    __swig_setmethods__["dcSupport"] = _WMX3ApiPython.EcSlaveInfo_dcSupport_set
    __swig_getmethods__["dcSupport"] = _WMX3ApiPython.EcSlaveInfo_dcSupport_get
    if _newclass:
        dcSupport = _swig_property(_WMX3ApiPython.EcSlaveInfo_dcSupport_get, _WMX3ApiPython.EcSlaveInfo_dcSupport_set)
    __swig_setmethods__["dcWidth"] = _WMX3ApiPython.EcSlaveInfo_dcWidth_set
    __swig_getmethods__["dcWidth"] = _WMX3ApiPython.EcSlaveInfo_dcWidth_get
    if _newclass:
        dcWidth = _swig_property(_WMX3ApiPython.EcSlaveInfo_dcWidth_get, _WMX3ApiPython.EcSlaveInfo_dcWidth_set)
    __swig_setmethods__["portState"] = _WMX3ApiPython.EcSlaveInfo_portState_set
    __swig_getmethods__["portState"] = _WMX3ApiPython.EcSlaveInfo_portState_get
    if _newclass:
        portState = _swig_property(_WMX3ApiPython.EcSlaveInfo_portState_get, _WMX3ApiPython.EcSlaveInfo_portState_set)

    def SetPortState(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetPortState(self, index, value)

    def GetPortState(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetPortState(self, index)
    __swig_setmethods__["neighbor"] = _WMX3ApiPython.EcSlaveInfo_neighbor_set
    __swig_getmethods__["neighbor"] = _WMX3ApiPython.EcSlaveInfo_neighbor_get
    if _newclass:
        neighbor = _swig_property(_WMX3ApiPython.EcSlaveInfo_neighbor_get, _WMX3ApiPython.EcSlaveInfo_neighbor_set)

    def SetNeighbor(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetNeighbor(self, index, value)

    def GetNeighbor(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetNeighbor(self, index)
    __swig_setmethods__["propagaDelay"] = _WMX3ApiPython.EcSlaveInfo_propagaDelay_set
    __swig_getmethods__["propagaDelay"] = _WMX3ApiPython.EcSlaveInfo_propagaDelay_get
    if _newclass:
        propagaDelay = _swig_property(_WMX3ApiPython.EcSlaveInfo_propagaDelay_get, _WMX3ApiPython.EcSlaveInfo_propagaDelay_set)
    __swig_setmethods__["systemTime"] = _WMX3ApiPython.EcSlaveInfo_systemTime_set
    __swig_getmethods__["systemTime"] = _WMX3ApiPython.EcSlaveInfo_systemTime_get
    if _newclass:
        systemTime = _swig_property(_WMX3ApiPython.EcSlaveInfo_systemTime_get, _WMX3ApiPython.EcSlaveInfo_systemTime_set)
    __swig_setmethods__["systemTimeOffset"] = _WMX3ApiPython.EcSlaveInfo_systemTimeOffset_set
    __swig_getmethods__["systemTimeOffset"] = _WMX3ApiPython.EcSlaveInfo_systemTimeOffset_get
    if _newclass:
        systemTimeOffset = _swig_property(_WMX3ApiPython.EcSlaveInfo_systemTimeOffset_get, _WMX3ApiPython.EcSlaveInfo_systemTimeOffset_set)
    __swig_setmethods__["startTime"] = _WMX3ApiPython.EcSlaveInfo_startTime_set
    __swig_getmethods__["startTime"] = _WMX3ApiPython.EcSlaveInfo_startTime_get
    if _newclass:
        startTime = _swig_property(_WMX3ApiPython.EcSlaveInfo_startTime_get, _WMX3ApiPython.EcSlaveInfo_startTime_set)
    __swig_setmethods__["inputAddr"] = _WMX3ApiPython.EcSlaveInfo_inputAddr_set
    __swig_getmethods__["inputAddr"] = _WMX3ApiPython.EcSlaveInfo_inputAddr_get
    if _newclass:
        inputAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_inputAddr_get, _WMX3ApiPython.EcSlaveInfo_inputAddr_set)
    __swig_setmethods__["inputSize"] = _WMX3ApiPython.EcSlaveInfo_inputSize_set
    __swig_getmethods__["inputSize"] = _WMX3ApiPython.EcSlaveInfo_inputSize_get
    if _newclass:
        inputSize = _swig_property(_WMX3ApiPython.EcSlaveInfo_inputSize_get, _WMX3ApiPython.EcSlaveInfo_inputSize_set)
    __swig_setmethods__["outputAddr"] = _WMX3ApiPython.EcSlaveInfo_outputAddr_set
    __swig_getmethods__["outputAddr"] = _WMX3ApiPython.EcSlaveInfo_outputAddr_get
    if _newclass:
        outputAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_outputAddr_get, _WMX3ApiPython.EcSlaveInfo_outputAddr_set)
    __swig_setmethods__["outputSize"] = _WMX3ApiPython.EcSlaveInfo_outputSize_set
    __swig_getmethods__["outputSize"] = _WMX3ApiPython.EcSlaveInfo_outputSize_get
    if _newclass:
        outputSize = _swig_property(_WMX3ApiPython.EcSlaveInfo_outputSize_get, _WMX3ApiPython.EcSlaveInfo_outputSize_set)
    __swig_setmethods__["rxLogicAddr"] = _WMX3ApiPython.EcSlaveInfo_rxLogicAddr_set
    __swig_getmethods__["rxLogicAddr"] = _WMX3ApiPython.EcSlaveInfo_rxLogicAddr_get
    if _newclass:
        rxLogicAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_rxLogicAddr_get, _WMX3ApiPython.EcSlaveInfo_rxLogicAddr_set)
    __swig_setmethods__["rxPhyAddr"] = _WMX3ApiPython.EcSlaveInfo_rxPhyAddr_set
    __swig_getmethods__["rxPhyAddr"] = _WMX3ApiPython.EcSlaveInfo_rxPhyAddr_get
    if _newclass:
        rxPhyAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_rxPhyAddr_get, _WMX3ApiPython.EcSlaveInfo_rxPhyAddr_set)
    __swig_setmethods__["rxSize"] = _WMX3ApiPython.EcSlaveInfo_rxSize_set
    __swig_getmethods__["rxSize"] = _WMX3ApiPython.EcSlaveInfo_rxSize_get
    if _newclass:
        rxSize = _swig_property(_WMX3ApiPython.EcSlaveInfo_rxSize_get, _WMX3ApiPython.EcSlaveInfo_rxSize_set)
    __swig_setmethods__["txLogicAddr"] = _WMX3ApiPython.EcSlaveInfo_txLogicAddr_set
    __swig_getmethods__["txLogicAddr"] = _WMX3ApiPython.EcSlaveInfo_txLogicAddr_get
    if _newclass:
        txLogicAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_txLogicAddr_get, _WMX3ApiPython.EcSlaveInfo_txLogicAddr_set)
    __swig_setmethods__["txPhyAddr"] = _WMX3ApiPython.EcSlaveInfo_txPhyAddr_set
    __swig_getmethods__["txPhyAddr"] = _WMX3ApiPython.EcSlaveInfo_txPhyAddr_get
    if _newclass:
        txPhyAddr = _swig_property(_WMX3ApiPython.EcSlaveInfo_txPhyAddr_get, _WMX3ApiPython.EcSlaveInfo_txPhyAddr_set)
    __swig_setmethods__["txSize"] = _WMX3ApiPython.EcSlaveInfo_txSize_set
    __swig_getmethods__["txSize"] = _WMX3ApiPython.EcSlaveInfo_txSize_get
    if _newclass:
        txSize = _swig_property(_WMX3ApiPython.EcSlaveInfo_txSize_get, _WMX3ApiPython.EcSlaveInfo_txSize_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcSlaveInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveInfo
    __del__ = lambda self: None
EcSlaveInfo_swigregister = _WMX3ApiPython.EcSlaveInfo_swigregister
EcSlaveInfo_swigregister(EcSlaveInfo)

class EcMasterStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMasterStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMasterStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecMasterStatisticsInfo):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetData(self, ecMasterStatisticsInfo)

    def SetData(self, ecMasterStatisticsInfo):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetData(self, ecMasterStatisticsInfo)
    __swig_setmethods__["commPeriod"] = _WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_set
    __swig_getmethods__["commPeriod"] = _WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_get
    if _newclass:
        commPeriod = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_get, _WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_set)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_get, _WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_set)
    __swig_setmethods__["interruptIntervalRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalRatio_set
    __swig_getmethods__["interruptIntervalRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalRatio_get
    if _newclass:
        interruptIntervalRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalRatio_set)

    def SetInterruptIntervalRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetInterruptIntervalRatio(self, index, value)

    def GetInterruptIntervalRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetInterruptIntervalRatio(self, index)
    __swig_setmethods__["cycleProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeRatio_set
    __swig_getmethods__["cycleProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeRatio_get
    if _newclass:
        cycleProcessTimeRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeRatio_set)

    def SetCycleProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCycleProcessTimeRatio(self, index, value)

    def GetCycleProcessTimeRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCycleProcessTimeRatio(self, index)
    __swig_setmethods__["processTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_processTimeRatio_set
    __swig_getmethods__["processTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_processTimeRatio_get
    if _newclass:
        processTimeRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_processTimeRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_processTimeRatio_set)

    def SetProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetProcessTimeRatio(self, index, value)

    def GetProcessTimeRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetProcessTimeRatio(self, index)
    __swig_setmethods__["commandProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeRatio_set
    __swig_getmethods__["commandProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeRatio_get
    if _newclass:
        commandProcessTimeRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeRatio_set)

    def SetCommandProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCommandProcessTimeRatio(self, index, value)

    def GetCommandProcessTimeRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCommandProcessTimeRatio(self, index)
    __swig_setmethods__["feedbackProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeRatio_set
    __swig_getmethods__["feedbackProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeRatio_get
    if _newclass:
        feedbackProcessTimeRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeRatio_set)

    def SetFeedbackProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetFeedbackProcessTimeRatio(self, index, value)

    def GetFeedbackProcessTimeRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetFeedbackProcessTimeRatio(self, index)
    __swig_setmethods__["communicateProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeRatio_set
    __swig_getmethods__["communicateProcessTimeRatio"] = _WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeRatio_get
    if _newclass:
        communicateProcessTimeRatio = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeRatio_get, _WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeRatio_set)

    def SetCommunicateProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCommunicateProcessTimeRatio(self, index, value)

    def GetCommunicateProcessTimeRatio(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCommunicateProcessTimeRatio(self, index)
    __swig_setmethods__["txDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_txDelay_set
    __swig_getmethods__["txDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_txDelay_get
    if _newclass:
        txDelay = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_txDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_txDelay_set)
    __swig_setmethods__["minTxDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_set
    __swig_getmethods__["minTxDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_get
    if _newclass:
        minTxDelay = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_set)
    __swig_setmethods__["maxTxDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_set
    __swig_getmethods__["maxTxDelay"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_get
    if _newclass:
        maxTxDelay = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_set)
    __swig_setmethods__["packetLoss"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_set
    __swig_getmethods__["packetLoss"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_get
    if _newclass:
        packetLoss = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_set)
    __swig_setmethods__["packetTimeout"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_set
    __swig_getmethods__["packetTimeout"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_get
    if _newclass:
        packetTimeout = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_set)
    __swig_setmethods__["packetLossMode"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_set
    __swig_getmethods__["packetLossMode"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_get
    if _newclass:
        packetLossMode = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_set)

    def SetPacketLossMode(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetPacketLossMode(self, index, value)

    def GetPacketLossMode(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetPacketLossMode(self, index)
    __swig_setmethods__["packetTimeoutMode"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_set
    __swig_getmethods__["packetTimeoutMode"] = _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_get
    if _newclass:
        packetTimeoutMode = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_set)

    def SetPacketTimeoutMode(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetPacketTimeoutMode(self, index, value)

    def GetPacketTimeoutMode(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetPacketTimeoutMode(self, index)
    __swig_setmethods__["minRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_set
    __swig_getmethods__["minRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_get
    if _newclass:
        minRefClockInterval = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_set)
    __swig_setmethods__["maxRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_set
    __swig_getmethods__["maxRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_get
    if _newclass:
        maxRefClockInterval = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_set)
    __swig_setmethods__["avgRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_set
    __swig_getmethods__["avgRefClockInterval"] = _WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_get
    if _newclass:
        avgRefClockInterval = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_set)
    __swig_setmethods__["curRefClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_set
    __swig_getmethods__["curRefClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_get
    if _newclass:
        curRefClock = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_set)
    __swig_setmethods__["nextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_set
    __swig_getmethods__["nextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_get
    if _newclass:
        nextDcClock = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_set)
    __swig_setmethods__["diffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_set
    __swig_getmethods__["diffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_get
    if _newclass:
        diffFromNextDcClock = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_set)
    __swig_setmethods__["minDiffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_set
    __swig_getmethods__["minDiffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_get
    if _newclass:
        minDiffFromNextDcClock = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_set)
    __swig_setmethods__["maxDiffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_set
    __swig_getmethods__["maxDiffFromNextDcClock"] = _WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_get
    if _newclass:
        maxDiffFromNextDcClock = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_set)
    __swig_setmethods__["totalAxesNum"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_set
    __swig_getmethods__["totalAxesNum"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_get
    if _newclass:
        totalAxesNum = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_set)
    __swig_setmethods__["totalRxPdoSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_set
    __swig_getmethods__["totalRxPdoSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_get
    if _newclass:
        totalRxPdoSize = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_set)
    __swig_setmethods__["totalTxPdoSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_set
    __swig_getmethods__["totalTxPdoSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_get
    if _newclass:
        totalTxPdoSize = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_set)
    __swig_setmethods__["totalInputSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_set
    __swig_getmethods__["totalInputSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_get
    if _newclass:
        totalInputSize = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_set)
    __swig_setmethods__["totalOutputSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_set
    __swig_getmethods__["totalOutputSize"] = _WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_get
    if _newclass:
        totalOutputSize = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_set)
    __swig_setmethods__["overCycle"] = _WMX3ApiPython.EcMasterStatisticsInfo_overCycle_set
    __swig_getmethods__["overCycle"] = _WMX3ApiPython.EcMasterStatisticsInfo_overCycle_get
    if _newclass:
        overCycle = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_overCycle_get, _WMX3ApiPython.EcMasterStatisticsInfo_overCycle_set)
    __swig_setmethods__["ringNum"] = _WMX3ApiPython.EcMasterStatisticsInfo_ringNum_set
    __swig_getmethods__["ringNum"] = _WMX3ApiPython.EcMasterStatisticsInfo_ringNum_get
    if _newclass:
        ringNum = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_ringNum_get, _WMX3ApiPython.EcMasterStatisticsInfo_ringNum_set)
    __swig_setmethods__["numOfCyclicFrames"] = _WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_set
    __swig_getmethods__["numOfCyclicFrames"] = _WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_get
    if _newclass:
        numOfCyclicFrames = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_get, _WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_set)
    __swig_setmethods__["hcState"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcState_set
    __swig_getmethods__["hcState"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcState_get
    if _newclass:
        hcState = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_hcState_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcState_set)
    __swig_setmethods__["hcAbortCode"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_set
    __swig_getmethods__["hcAbortCode"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_get
    if _newclass:
        hcAbortCode = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_set)
    __swig_setmethods__["hcErrorCode"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_set
    __swig_getmethods__["hcErrorCode"] = _WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_get
    if _newclass:
        hcErrorCode = _swig_property(_WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMasterStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterStatisticsInfo
    __del__ = lambda self: None
EcMasterStatisticsInfo_swigregister = _WMX3ApiPython.EcMasterStatisticsInfo_swigregister
EcMasterStatisticsInfo_swigregister(EcMasterStatisticsInfo)

class EcVirtualSlavePdo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcVirtualSlavePdo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcVirtualSlavePdo, name)
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlavePdo):
        return _WMX3ApiPython.EcVirtualSlavePdo_GetData(self, ecVirtualSlavePdo)

    def SetData(self, ecVirtualSlavePdo):
        return _WMX3ApiPython.EcVirtualSlavePdo_SetData(self, ecVirtualSlavePdo)
    __swig_setmethods__["index"] = _WMX3ApiPython.EcVirtualSlavePdo_index_set
    __swig_getmethods__["index"] = _WMX3ApiPython.EcVirtualSlavePdo_index_get
    if _newclass:
        index = _swig_property(_WMX3ApiPython.EcVirtualSlavePdo_index_get, _WMX3ApiPython.EcVirtualSlavePdo_index_set)
    __swig_setmethods__["subIndex"] = _WMX3ApiPython.EcVirtualSlavePdo_subIndex_set
    __swig_getmethods__["subIndex"] = _WMX3ApiPython.EcVirtualSlavePdo_subIndex_get
    if _newclass:
        subIndex = _swig_property(_WMX3ApiPython.EcVirtualSlavePdo_subIndex_get, _WMX3ApiPython.EcVirtualSlavePdo_subIndex_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.EcVirtualSlavePdo_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.EcVirtualSlavePdo_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.EcVirtualSlavePdo_size_get, _WMX3ApiPython.EcVirtualSlavePdo_size_set)
    __swig_setmethods__["offset"] = _WMX3ApiPython.EcVirtualSlavePdo_offset_set
    __swig_getmethods__["offset"] = _WMX3ApiPython.EcVirtualSlavePdo_offset_get
    if _newclass:
        offset = _swig_property(_WMX3ApiPython.EcVirtualSlavePdo_offset_get, _WMX3ApiPython.EcVirtualSlavePdo_offset_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcVirtualSlavePdo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlavePdo
    __del__ = lambda self: None
EcVirtualSlavePdo_swigregister = _WMX3ApiPython.EcVirtualSlavePdo_swigregister
EcVirtualSlavePdo_swigregister(EcVirtualSlavePdo)

class EcVirtualSlaveDcStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcVirtualSlaveDcStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcVirtualSlaveDcStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveDcStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_GetData(self, ecVirtualSlaveDcStatisticsInfo)

    def SetData(self, ecVirtualSlaveDcStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_SetData(self, ecVirtualSlaveDcStatisticsInfo)
    __swig_setmethods__["minRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_set
    __swig_getmethods__["minRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_get
    if _newclass:
        minRefClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_set)
    __swig_setmethods__["sysIntvlWhenMinRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set
    __swig_getmethods__["sysIntvlWhenMinRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get
    if _newclass:
        sysIntvlWhenMinRefClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set)
    __swig_setmethods__["maxRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_set
    __swig_getmethods__["maxRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_get
    if _newclass:
        maxRefClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_set)
    __swig_setmethods__["sysIntvlWhenMaxRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set
    __swig_getmethods__["sysIntvlWhenMaxRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get
    if _newclass:
        sysIntvlWhenMaxRefClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set)
    __swig_setmethods__["avgRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_set
    __swig_getmethods__["avgRefClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_get
    if _newclass:
        avgRefClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_set)
    __swig_setmethods__["minSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_set
    __swig_getmethods__["minSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_get
    if _newclass:
        minSysClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_set)
    __swig_setmethods__["maxSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_set
    __swig_getmethods__["maxSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_get
    if _newclass:
        maxSysClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_set)
    __swig_setmethods__["avgSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_set
    __swig_getmethods__["avgSysClockIntvl"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_get
    if _newclass:
        avgSysClockIntvl = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_set)
    __swig_setmethods__["count"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcVirtualSlaveDcStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveDcStatisticsInfo
    __del__ = lambda self: None
EcVirtualSlaveDcStatisticsInfo_swigregister = _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_swigregister
EcVirtualSlaveDcStatisticsInfo_swigregister(EcVirtualSlaveDcStatisticsInfo)

class EcVirtualSlaveStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcVirtualSlaveStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcVirtualSlaveStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_GetData(self, ecVirtualSlaveStatisticsInfo)

    def SetData(self, ecVirtualSlaveStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_SetData(self, ecVirtualSlaveStatisticsInfo)
    __swig_setmethods__["dc"] = _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_set
    __swig_getmethods__["dc"] = _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_get
    if _newclass:
        dc = _swig_property(_WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_get, _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcVirtualSlaveStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveStatisticsInfo
    __del__ = lambda self: None
EcVirtualSlaveStatisticsInfo_swigregister = _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_swigregister
EcVirtualSlaveStatisticsInfo_swigregister(EcVirtualSlaveStatisticsInfo)

class EcVirtualSlaveInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcVirtualSlaveInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcVirtualSlaveInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveInfo):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetData(self, ecVirtualSlaveInfo)

    def SetData(self, ecVirtualSlaveInfo):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetData(self, ecVirtualSlaveInfo)
    __swig_setmethods__["state"] = _WMX3ApiPython.EcVirtualSlaveInfo_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.EcVirtualSlaveInfo_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_state_get, _WMX3ApiPython.EcVirtualSlaveInfo_state_set)
    __swig_setmethods__["address"] = _WMX3ApiPython.EcVirtualSlaveInfo_address_set
    __swig_getmethods__["address"] = _WMX3ApiPython.EcVirtualSlaveInfo_address_get
    if _newclass:
        address = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_address_get, _WMX3ApiPython.EcVirtualSlaveInfo_address_set)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EcVirtualSlaveInfo_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EcVirtualSlaveInfo_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_enabled_get, _WMX3ApiPython.EcVirtualSlaveInfo_enabled_set)
    __swig_setmethods__["vendorId"] = _WMX3ApiPython.EcVirtualSlaveInfo_vendorId_set
    __swig_getmethods__["vendorId"] = _WMX3ApiPython.EcVirtualSlaveInfo_vendorId_get
    if _newclass:
        vendorId = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_vendorId_get, _WMX3ApiPython.EcVirtualSlaveInfo_vendorId_set)
    __swig_setmethods__["productCode"] = _WMX3ApiPython.EcVirtualSlaveInfo_productCode_set
    __swig_getmethods__["productCode"] = _WMX3ApiPython.EcVirtualSlaveInfo_productCode_get
    if _newclass:
        productCode = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_productCode_get, _WMX3ApiPython.EcVirtualSlaveInfo_productCode_set)
    __swig_setmethods__["revisionNo"] = _WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_set
    __swig_getmethods__["revisionNo"] = _WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_get
    if _newclass:
        revisionNo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_get, _WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_set)
    __swig_setmethods__["serialNo"] = _WMX3ApiPython.EcVirtualSlaveInfo_serialNo_set
    __swig_getmethods__["serialNo"] = _WMX3ApiPython.EcVirtualSlaveInfo_serialNo_get
    if _newclass:
        serialNo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_serialNo_get, _WMX3ApiPython.EcVirtualSlaveInfo_serialNo_set)
    __swig_setmethods__["alias"] = _WMX3ApiPython.EcVirtualSlaveInfo_alias_set
    __swig_getmethods__["alias"] = _WMX3ApiPython.EcVirtualSlaveInfo_alias_get
    if _newclass:
        alias = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_alias_get, _WMX3ApiPython.EcVirtualSlaveInfo_alias_set)
    __swig_setmethods__["commPeriod"] = _WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_set
    __swig_getmethods__["commPeriod"] = _WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_get
    if _newclass:
        commPeriod = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_get, _WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_set)
    __swig_setmethods__["numOfMappedRxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_set
    __swig_getmethods__["numOfMappedRxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_get
    if _newclass:
        numOfMappedRxPdo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_set)
    __swig_setmethods__["mappedRxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_set
    __swig_getmethods__["mappedRxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_get
    if _newclass:
        mappedRxPdo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_set)

    def SetMappedRxPdo(self, index, value):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetMappedRxPdo(self, index, value)

    def GetMappedRxPdo(self, index):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetMappedRxPdo(self, index)
    __swig_setmethods__["numOfMappedTxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_set
    __swig_getmethods__["numOfMappedTxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_get
    if _newclass:
        numOfMappedTxPdo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_set)
    __swig_setmethods__["mappedTxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_set
    __swig_getmethods__["mappedTxPdo"] = _WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_get
    if _newclass:
        mappedTxPdo = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_set)

    def SetMappedTxPdo(self, index, value):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetMappedTxPdo(self, index, value)

    def GetMappedTxPdo(self, index):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetMappedTxPdo(self, index)
    __swig_setmethods__["statistics"] = _WMX3ApiPython.EcVirtualSlaveInfo_statistics_set
    __swig_getmethods__["statistics"] = _WMX3ApiPython.EcVirtualSlaveInfo_statistics_get
    if _newclass:
        statistics = _swig_property(_WMX3ApiPython.EcVirtualSlaveInfo_statistics_get, _WMX3ApiPython.EcVirtualSlaveInfo_statistics_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcVirtualSlaveInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveInfo
    __del__ = lambda self: None
EcVirtualSlaveInfo_swigregister = _WMX3ApiPython.EcVirtualSlaveInfo_swigregister
EcVirtualSlaveInfo_swigregister(EcVirtualSlaveInfo)

class EcMonitorDcStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMonitorDcStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMonitorDcStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecMonitorDcStatisticsInfo):
        return _WMX3ApiPython.EcMonitorDcStatisticsInfo_GetData(self, ecMonitorDcStatisticsInfo)

    def SetData(self, ecMonitorDcStatisticsInfo):
        return _WMX3ApiPython.EcMonitorDcStatisticsInfo_SetData(self, ecMonitorDcStatisticsInfo)
    __swig_setmethods__["minRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_set
    __swig_getmethods__["minRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_get
    if _newclass:
        minRefClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_set)
    __swig_setmethods__["sysIntvlWhenMinRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set
    __swig_getmethods__["sysIntvlWhenMinRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get
    if _newclass:
        sysIntvlWhenMinRefClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set)
    __swig_setmethods__["maxRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_set
    __swig_getmethods__["maxRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_get
    if _newclass:
        maxRefClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_set)
    __swig_setmethods__["sysIntvlWhenMaxRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set
    __swig_getmethods__["sysIntvlWhenMaxRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get
    if _newclass:
        sysIntvlWhenMaxRefClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set)
    __swig_setmethods__["avgRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_set
    __swig_getmethods__["avgRefClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_get
    if _newclass:
        avgRefClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_set)
    __swig_setmethods__["minSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_set
    __swig_getmethods__["minSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_get
    if _newclass:
        minSysClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_set)
    __swig_setmethods__["maxSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_set
    __swig_getmethods__["maxSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_get
    if _newclass:
        maxSysClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_set)
    __swig_setmethods__["avgSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_set
    __swig_getmethods__["avgSysClockIntvl"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_get
    if _newclass:
        avgSysClockIntvl = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_set)
    __swig_setmethods__["count"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_count_set
    __swig_getmethods__["count"] = _WMX3ApiPython.EcMonitorDcStatisticsInfo_count_get
    if _newclass:
        count = _swig_property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_count_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_count_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMonitorDcStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorDcStatisticsInfo
    __del__ = lambda self: None
EcMonitorDcStatisticsInfo_swigregister = _WMX3ApiPython.EcMonitorDcStatisticsInfo_swigregister
EcMonitorDcStatisticsInfo_swigregister(EcMonitorDcStatisticsInfo)

class EcMonitorStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMonitorStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMonitorStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecMonitorStatisticsInfo):
        return _WMX3ApiPython.EcMonitorStatisticsInfo_GetData(self, ecMonitorStatisticsInfo)

    def SetData(self, ecMonitorStatisticsInfo):
        return _WMX3ApiPython.EcMonitorStatisticsInfo_SetData(self, ecMonitorStatisticsInfo)
    __swig_setmethods__["dc"] = _WMX3ApiPython.EcMonitorStatisticsInfo_dc_set
    __swig_getmethods__["dc"] = _WMX3ApiPython.EcMonitorStatisticsInfo_dc_get
    if _newclass:
        dc = _swig_property(_WMX3ApiPython.EcMonitorStatisticsInfo_dc_get, _WMX3ApiPython.EcMonitorStatisticsInfo_dc_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMonitorStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorStatisticsInfo
    __del__ = lambda self: None
EcMonitorStatisticsInfo_swigregister = _WMX3ApiPython.EcMonitorStatisticsInfo_swigregister
EcMonitorStatisticsInfo_swigregister(EcMonitorStatisticsInfo)

class EcMonitorInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMonitorInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMonitorInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecMonitorInfo):
        return _WMX3ApiPython.EcMonitorInfo_GetData(self, ecMonitorInfo)

    def SetData(self, ecMonitorInfo):
        return _WMX3ApiPython.EcMonitorInfo_SetData(self, ecMonitorInfo)
    __swig_setmethods__["enabled"] = _WMX3ApiPython.EcMonitorInfo_enabled_set
    __swig_getmethods__["enabled"] = _WMX3ApiPython.EcMonitorInfo_enabled_get
    if _newclass:
        enabled = _swig_property(_WMX3ApiPython.EcMonitorInfo_enabled_get, _WMX3ApiPython.EcMonitorInfo_enabled_set)
    __swig_setmethods__["id"] = _WMX3ApiPython.EcMonitorInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.EcMonitorInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.EcMonitorInfo_id_get, _WMX3ApiPython.EcMonitorInfo_id_set)
    __swig_setmethods__["commPeriod"] = _WMX3ApiPython.EcMonitorInfo_commPeriod_set
    __swig_getmethods__["commPeriod"] = _WMX3ApiPython.EcMonitorInfo_commPeriod_get
    if _newclass:
        commPeriod = _swig_property(_WMX3ApiPython.EcMonitorInfo_commPeriod_get, _WMX3ApiPython.EcMonitorInfo_commPeriod_set)
    __swig_setmethods__["numOfSlaves"] = _WMX3ApiPython.EcMonitorInfo_numOfSlaves_set
    __swig_getmethods__["numOfSlaves"] = _WMX3ApiPython.EcMonitorInfo_numOfSlaves_get
    if _newclass:
        numOfSlaves = _swig_property(_WMX3ApiPython.EcMonitorInfo_numOfSlaves_get, _WMX3ApiPython.EcMonitorInfo_numOfSlaves_set)
    __swig_setmethods__["position"] = _WMX3ApiPython.EcMonitorInfo_position_set
    __swig_getmethods__["position"] = _WMX3ApiPython.EcMonitorInfo_position_get
    if _newclass:
        position = _swig_property(_WMX3ApiPython.EcMonitorInfo_position_get, _WMX3ApiPython.EcMonitorInfo_position_set)
    __swig_setmethods__["statistics"] = _WMX3ApiPython.EcMonitorInfo_statistics_set
    __swig_getmethods__["statistics"] = _WMX3ApiPython.EcMonitorInfo_statistics_get
    if _newclass:
        statistics = _swig_property(_WMX3ApiPython.EcMonitorInfo_statistics_get, _WMX3ApiPython.EcMonitorInfo_statistics_set)
    __swig_setmethods__["virtualSlave"] = _WMX3ApiPython.EcMonitorInfo_virtualSlave_set
    __swig_getmethods__["virtualSlave"] = _WMX3ApiPython.EcMonitorInfo_virtualSlave_get
    if _newclass:
        virtualSlave = _swig_property(_WMX3ApiPython.EcMonitorInfo_virtualSlave_get, _WMX3ApiPython.EcMonitorInfo_virtualSlave_set)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMonitorInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorInfo
    __del__ = lambda self: None
EcMonitorInfo_swigregister = _WMX3ApiPython.EcMonitorInfo_swigregister
EcMonitorInfo_swigregister(EcMonitorInfo)

class EcMasterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMasterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMasterInfo, name)
    __repr__ = _swig_repr

    def GetData(self, ecMasterInfo):
        return _WMX3ApiPython.EcMasterInfo_GetData(self, ecMasterInfo)

    def SetData(self, ecMasterInfo):
        return _WMX3ApiPython.EcMasterInfo_SetData(self, ecMasterInfo)
    __swig_setmethods__["id"] = _WMX3ApiPython.EcMasterInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.EcMasterInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.EcMasterInfo_id_get, _WMX3ApiPython.EcMasterInfo_id_set)
    __swig_setmethods__["state"] = _WMX3ApiPython.EcMasterInfo_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.EcMasterInfo_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.EcMasterInfo_state_get, _WMX3ApiPython.EcMasterInfo_state_set)
    __swig_setmethods__["mode"] = _WMX3ApiPython.EcMasterInfo_mode_set
    __swig_getmethods__["mode"] = _WMX3ApiPython.EcMasterInfo_mode_get
    if _newclass:
        mode = _swig_property(_WMX3ApiPython.EcMasterInfo_mode_get, _WMX3ApiPython.EcMasterInfo_mode_set)
    __swig_setmethods__["numOfSlaves"] = _WMX3ApiPython.EcMasterInfo_numOfSlaves_set
    __swig_getmethods__["numOfSlaves"] = _WMX3ApiPython.EcMasterInfo_numOfSlaves_get
    if _newclass:
        numOfSlaves = _swig_property(_WMX3ApiPython.EcMasterInfo_numOfSlaves_get, _WMX3ApiPython.EcMasterInfo_numOfSlaves_set)
    __swig_setmethods__["slaves"] = _WMX3ApiPython.EcMasterInfo_slaves_set
    __swig_getmethods__["slaves"] = _WMX3ApiPython.EcMasterInfo_slaves_get
    if _newclass:
        slaves = _swig_property(_WMX3ApiPython.EcMasterInfo_slaves_get, _WMX3ApiPython.EcMasterInfo_slaves_set)

    def SetSlaves(self, index, value):
        return _WMX3ApiPython.EcMasterInfo_SetSlaves(self, index, value)

    def GetSlaves(self, index):
        return _WMX3ApiPython.EcMasterInfo_GetSlaves(self, index)
    __swig_setmethods__["statisticsInfo"] = _WMX3ApiPython.EcMasterInfo_statisticsInfo_set
    __swig_getmethods__["statisticsInfo"] = _WMX3ApiPython.EcMasterInfo_statisticsInfo_get
    if _newclass:
        statisticsInfo = _swig_property(_WMX3ApiPython.EcMasterInfo_statisticsInfo_get, _WMX3ApiPython.EcMasterInfo_statisticsInfo_set)

    def GetOnlineSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetOnlineSlaveCount(self)

    def GetOfflineSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetOfflineSlaveCount(self)

    def GetInaccessibleSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetInaccessibleSlaveCount(self)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMasterInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterInfo
    __del__ = lambda self: None
EcMasterInfo_swigregister = _WMX3ApiPython.EcMasterInfo_swigregister
EcMasterInfo_swigregister(EcMasterInfo)

class EcMasterInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EcMasterInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EcMasterInfoList, name)
    __repr__ = _swig_repr

    def GetData(self, ecMasterInfoList):
        return _WMX3ApiPython.EcMasterInfoList_GetData(self, ecMasterInfoList)

    def SetData(self, ecMasterInfoList):
        return _WMX3ApiPython.EcMasterInfoList_SetData(self, ecMasterInfoList)
    __swig_setmethods__["numOfMasters"] = _WMX3ApiPython.EcMasterInfoList_numOfMasters_set
    __swig_getmethods__["numOfMasters"] = _WMX3ApiPython.EcMasterInfoList_numOfMasters_get
    if _newclass:
        numOfMasters = _swig_property(_WMX3ApiPython.EcMasterInfoList_numOfMasters_get, _WMX3ApiPython.EcMasterInfoList_numOfMasters_set)
    __swig_setmethods__["masters"] = _WMX3ApiPython.EcMasterInfoList_masters_set
    __swig_getmethods__["masters"] = _WMX3ApiPython.EcMasterInfoList_masters_get
    if _newclass:
        masters = _swig_property(_WMX3ApiPython.EcMasterInfoList_masters_get, _WMX3ApiPython.EcMasterInfoList_masters_set)

    def SetMasters(self, index, value):
        return _WMX3ApiPython.EcMasterInfoList_SetMasters(self, index, value)

    def GetMasters(self, index):
        return _WMX3ApiPython.EcMasterInfoList_GetMasters(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_EcMasterInfoList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterInfoList
    __del__ = lambda self: None
EcMasterInfoList_swigregister = _WMX3ApiPython.EcMasterInfoList_swigregister
EcMasterInfoList_swigregister(EcMasterInfoList)

class Ecat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ecat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ecat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _WMX3ApiPython.new_Ecat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_Ecat
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.Ecat_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.Ecat_ErrorToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.Ecat_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.Ecat_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.Ecat_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Ecat_GetVersion(self)

    def SetMonitorMode(self, enable):
        return _WMX3ApiPython.Ecat_SetMonitorMode(self, enable)

    def ScanNetwork(self):
        return _WMX3ApiPython.Ecat_ScanNetwork(self)

    def ChangeSlaveState(self, slaveId, state):
        errorCode = intp()
        ret = _WMX3ApiPython.Ecat_ChangeSlaveState(self, slaveId, state, errorCode)
        return ret, errorCode.value()



    def StartHotconnect(self):
        return _WMX3ApiPython.Ecat_StartHotconnect(self)

    def ResetMonitorStatisticsInfo(self):
        return _WMX3ApiPython.Ecat_ResetMonitorStatisticsInfo(self)

    def GetMasterInfo(self):
        info = EcMasterInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterInfo(self, info)
        return ret, info



    def GetMasterMonitorInfo(self):
        info = EcMonitorInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterMonitorInfo(self, info)
        return ret, info



    def SdoDownload(self, slaveId, index, subindex, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload(self, slaveId, index, subindex, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_WaitTime(self, slaveId, index, subindex, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_WaitTime(self, slaveId, index, subindex, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoUpload(self, slaveId, index, subindex, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload(self, slaveId, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_WaitTime(self, slaveId, index, subindex, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_WaitTime(self, slaveId, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoDownload_SdoType(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoDownload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, waitTime, complete):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode, waitTime, complete)
        return ret, errCode.value()



    def SdoUpload_SdoType(self, slaveId, index, subindex, sdoType, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoBuffSize, waitTime, complete):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime, complete)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def TxPdoWrite(self, *args):
        return _WMX3ApiPython.Ecat_TxPdoWrite(self, *args)

    def ClearTxPdoWrite(self, slaveId, index, subindex):
        return _WMX3ApiPython.Ecat_ClearTxPdoWrite(self, slaveId, index, subindex)

    def PdoRead(self, slaveId, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_PdoRead(self, slaveId, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()



    def SetAxisMode(self, slaveId, axisIndex, mode):
        return _WMX3ApiPython.Ecat_SetAxisMode(self, slaveId, axisIndex, mode)

    def StartAxisPP(self, *args):
        return _WMX3ApiPython.Ecat_StartAxisPP(self, *args)

    def StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc):
        return _WMX3ApiPython.Ecat_StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)

    def HaltAxis(self, slaveId, axisIndex):
        return _WMX3ApiPython.Ecat_HaltAxis(self, slaveId, axisIndex)

    def HaltAxisRelease(self, slaveId, axisIndex):
        return _WMX3ApiPython.Ecat_HaltAxisRelease(self, slaveId, axisIndex)

    def VirtualSlaveTxPdoWrite(self, *args):
        return _WMX3ApiPython.Ecat_VirtualSlaveTxPdoWrite(self, *args)

    def VirtualSlaveClearTxPdoWrite(self, index, subindex):
        return _WMX3ApiPython.Ecat_VirtualSlaveClearTxPdoWrite(self, index, subindex)

    def VirtualSlavePdoRead(self, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_VirtualSlavePdoRead(self, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()



    def SetMonitorMode_MasterId(self, masterId, enable):
        return _WMX3ApiPython.Ecat_SetMonitorMode_MasterId(self, masterId, enable)

    def ResetMonitorStatisticsInfo_MasterId(self, masterId):
        return _WMX3ApiPython.Ecat_ResetMonitorStatisticsInfo_MasterId(self, masterId)

    def SetUpdatePeriod(self, period):
        return _WMX3ApiPython.Ecat_SetUpdatePeriod(self, period)

    def GetMasterMonitorInfo_MasterId(self, masterId):
        info = EcMonitorInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterMonitorInfo_MasterId(self, masterId, info)
        return ret, info



    def VirtualSlaveTxPdoWrite_MasterId(self, *args):
        return _WMX3ApiPython.Ecat_VirtualSlaveTxPdoWrite_MasterId(self, *args)

    def VirtualSlaveClearTxPdoWrite_MasterId(self, masterId, index, subindex):
        return _WMX3ApiPython.Ecat_VirtualSlaveClearTxPdoWrite_MasterId(self, masterId, index, subindex)

    def VirtualSlavePdoRead_MasterId(self, masterId, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_VirtualSlavePdoRead_MasterId(self, masterId, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()


Ecat_swigregister = _WMX3ApiPython.Ecat_swigregister
Ecat_swigregister(Ecat)

def Ecat_ErrorToString(errCode):
    return _WMX3ApiPython.Ecat_ErrorToString(errCode)
Ecat_ErrorToString = _WMX3ApiPython.Ecat_ErrorToString

def Ecat_GetLibVersion():
    return _WMX3ApiPython.Ecat_GetLibVersion()
Ecat_GetLibVersion = _WMX3ApiPython.Ecat_GetLibVersion

class CCLinkErrorCode(ErrorCode):
    __swig_setmethods__ = {}
    for _s in [ErrorCode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkErrorCode, name, value)
    __swig_getmethods__ = {}
    for _s in [ErrorCode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkErrorCode, name)
    __repr__ = _swig_repr
    CCLinkError = _WMX3ApiPython.CCLinkErrorCode_CCLinkError
    ScanNetworkFailed = _WMX3ApiPython.CCLinkErrorCode_ScanNetworkFailed
    HotconnectFailed = _WMX3ApiPython.CCLinkErrorCode_HotconnectFailed
    SharedMemoryNull = _WMX3ApiPython.CCLinkErrorCode_SharedMemoryNull
    ActualSizeLargerThanBufferSize = _WMX3ApiPython.CCLinkErrorCode_ActualSizeLargerThanBufferSize
    SlaveStateBelowPreOp = _WMX3ApiPython.CCLinkErrorCode_SlaveStateBelowPreOp
    OtherSdoIsRunning = _WMX3ApiPython.CCLinkErrorCode_OtherSdoIsRunning
    SdoTimeout = _WMX3ApiPython.CCLinkErrorCode_SdoTimeout
    SdoDownloadFailed = _WMX3ApiPython.CCLinkErrorCode_SdoDownloadFailed
    SdoUploadFailed = _WMX3ApiPython.CCLinkErrorCode_SdoUploadFailed
    AxisNotServoOn = _WMX3ApiPython.CCLinkErrorCode_AxisNotServoOn
    NotInPPMode = _WMX3ApiPython.CCLinkErrorCode_NotInPPMode
    NotInHMMode = _WMX3ApiPython.CCLinkErrorCode_NotInHMMode
    NotInPVMode = _WMX3ApiPython.CCLinkErrorCode_NotInPVMode
    NotInTQMode = _WMX3ApiPython.CCLinkErrorCode_NotInTQMode
    PdoNotMapped = _WMX3ApiPython.CCLinkErrorCode_PdoNotMapped
    SlmpSendFailed = _WMX3ApiPython.CCLinkErrorCode_SlmpSendFailed
    SlmpReceiveTimeout = _WMX3ApiPython.CCLinkErrorCode_SlmpReceiveTimeout
    MarshalingObjectFailed = _WMX3ApiPython.CCLinkErrorCode_MarshalingObjectFailed

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkErrorCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkErrorCode
    __del__ = lambda self: None
CCLinkErrorCode_swigregister = _WMX3ApiPython.CCLinkErrorCode_swigregister
CCLinkErrorCode_swigregister(CCLinkErrorCode)

class CCLinkMasterStateMachine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkMasterStateMachine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkMasterStateMachine, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.CCLinkMasterStateMachine_PyNone
    Init = _WMX3ApiPython.CCLinkMasterStateMachine_Init
    Start = _WMX3ApiPython.CCLinkMasterStateMachine_Start
    Comm = _WMX3ApiPython.CCLinkMasterStateMachine_Comm

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkMasterStateMachine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkMasterStateMachine
    __del__ = lambda self: None
CCLinkMasterStateMachine_swigregister = _WMX3ApiPython.CCLinkMasterStateMachine_swigregister
CCLinkMasterStateMachine_swigregister(CCLinkMasterStateMachine)

class CCLinkSlaveStateMachine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlaveStateMachine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlaveStateMachine, name)
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.CCLinkSlaveStateMachine_PyNone
    Init = _WMX3ApiPython.CCLinkSlaveStateMachine_Init
    Preop = _WMX3ApiPython.CCLinkSlaveStateMachine_Preop
    Boot = _WMX3ApiPython.CCLinkSlaveStateMachine_Boot
    Safeop = _WMX3ApiPython.CCLinkSlaveStateMachine_Safeop
    Op = _WMX3ApiPython.CCLinkSlaveStateMachine_Op

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlaveStateMachine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlaveStateMachine
    __del__ = lambda self: None
CCLinkSlaveStateMachine_swigregister = _WMX3ApiPython.CCLinkSlaveStateMachine_swigregister
CCLinkSlaveStateMachine_swigregister(CCLinkSlaveStateMachine)

class CCLinkMasterMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkMasterMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkMasterMode, name)
    __repr__ = _swig_repr
    CyclicMode = _WMX3ApiPython.CCLinkMasterMode_CyclicMode
    PPMode = _WMX3ApiPython.CCLinkMasterMode_PPMode

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkMasterMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkMasterMode
    __del__ = lambda self: None
CCLinkMasterMode_swigregister = _WMX3ApiPython.CCLinkMasterMode_swigregister
CCLinkMasterMode_swigregister(CCLinkMasterMode)

class CCLinkOperationMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkOperationMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkOperationMode, name)
    __repr__ = _swig_repr
    NONE = _WMX3ApiPython.CCLinkOperationMode_NONE
    PP = _WMX3ApiPython.CCLinkOperationMode_PP
    PV = _WMX3ApiPython.CCLinkOperationMode_PV
    TQ = _WMX3ApiPython.CCLinkOperationMode_TQ
    HM = _WMX3ApiPython.CCLinkOperationMode_HM
    CSP = _WMX3ApiPython.CCLinkOperationMode_CSP
    CSV = _WMX3ApiPython.CCLinkOperationMode_CSV
    CST = _WMX3ApiPython.CCLinkOperationMode_CST
    Unknown = _WMX3ApiPython.CCLinkOperationMode_Unknown

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkOperationMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkOperationMode
    __del__ = lambda self: None
CCLinkOperationMode_swigregister = _WMX3ApiPython.CCLinkOperationMode_swigregister
CCLinkOperationMode_swigregister(CCLinkOperationMode)

class CCLinkSdoType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSdoType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSdoType, name)
    __repr__ = _swig_repr
    Single = _WMX3ApiPython.CCLinkSdoType_Single
    Block = _WMX3ApiPython.CCLinkSdoType_Block

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSdoType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSdoType
    __del__ = lambda self: None
CCLinkSdoType_swigregister = _WMX3ApiPython.CCLinkSdoType_swigregister
CCLinkSdoType_swigregister(CCLinkSdoType)

class CCLinkSlavePdo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlavePdo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlavePdo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkSlavePdo):
        return _WMX3ApiPython.CCLinkSlavePdo_GetData(self, cclinkSlavePdo)

    def SetData(self, cclinkSlavePdo):
        return _WMX3ApiPython.CCLinkSlavePdo_SetData(self, cclinkSlavePdo)
    __swig_setmethods__["enable"] = _WMX3ApiPython.CCLinkSlavePdo_enable_set
    __swig_getmethods__["enable"] = _WMX3ApiPython.CCLinkSlavePdo_enable_get
    if _newclass:
        enable = _swig_property(_WMX3ApiPython.CCLinkSlavePdo_enable_get, _WMX3ApiPython.CCLinkSlavePdo_enable_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.CCLinkSlavePdo_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.CCLinkSlavePdo_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.CCLinkSlavePdo_size_get, _WMX3ApiPython.CCLinkSlavePdo_size_set)
    __swig_setmethods__["offset"] = _WMX3ApiPython.CCLinkSlavePdo_offset_set
    __swig_getmethods__["offset"] = _WMX3ApiPython.CCLinkSlavePdo_offset_get
    if _newclass:
        offset = _swig_property(_WMX3ApiPython.CCLinkSlavePdo_offset_get, _WMX3ApiPython.CCLinkSlavePdo_offset_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlavePdo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlavePdo
    __del__ = lambda self: None
CCLinkSlavePdo_swigregister = _WMX3ApiPython.CCLinkSlavePdo_swigregister
CCLinkSlavePdo_swigregister(CCLinkSlavePdo)

class CCLinkSlavePdoInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlavePdoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlavePdoInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkSlavePdoInfo):
        return _WMX3ApiPython.CCLinkSlavePdoInfo_GetData(self, cclinkSlavePdoInfo)

    def SetData(self, cclinkSlavePdoInfo):
        return _WMX3ApiPython.CCLinkSlavePdoInfo_SetData(self, cclinkSlavePdoInfo)
    __swig_setmethods__["statusWord"] = _WMX3ApiPython.CCLinkSlavePdoInfo_statusWord_set
    __swig_getmethods__["statusWord"] = _WMX3ApiPython.CCLinkSlavePdoInfo_statusWord_get
    if _newclass:
        statusWord = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_statusWord_get, _WMX3ApiPython.CCLinkSlavePdoInfo_statusWord_set)
    __swig_setmethods__["modesOfOperationDisplay"] = _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperationDisplay_set
    __swig_getmethods__["modesOfOperationDisplay"] = _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperationDisplay_get
    if _newclass:
        modesOfOperationDisplay = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperationDisplay_get, _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperationDisplay_set)
    __swig_setmethods__["positionActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_positionActualValue_set
    __swig_getmethods__["positionActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_positionActualValue_get
    if _newclass:
        positionActualValue = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_positionActualValue_get, _WMX3ApiPython.CCLinkSlavePdoInfo_positionActualValue_set)
    __swig_setmethods__["velocityActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_velocityActualValue_set
    __swig_getmethods__["velocityActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_velocityActualValue_get
    if _newclass:
        velocityActualValue = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_velocityActualValue_get, _WMX3ApiPython.CCLinkSlavePdoInfo_velocityActualValue_set)
    __swig_setmethods__["torqueActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_torqueActualValue_set
    __swig_getmethods__["torqueActualValue"] = _WMX3ApiPython.CCLinkSlavePdoInfo_torqueActualValue_get
    if _newclass:
        torqueActualValue = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_torqueActualValue_get, _WMX3ApiPython.CCLinkSlavePdoInfo_torqueActualValue_set)
    __swig_setmethods__["errorCode"] = _WMX3ApiPython.CCLinkSlavePdoInfo_errorCode_set
    __swig_getmethods__["errorCode"] = _WMX3ApiPython.CCLinkSlavePdoInfo_errorCode_get
    if _newclass:
        errorCode = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_errorCode_get, _WMX3ApiPython.CCLinkSlavePdoInfo_errorCode_set)
    __swig_setmethods__["touchProbeStatus"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeStatus_set
    __swig_getmethods__["touchProbeStatus"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeStatus_get
    if _newclass:
        touchProbeStatus = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeStatus_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeStatus_set)
    __swig_setmethods__["touchProbePositionPos1"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos1_set
    __swig_getmethods__["touchProbePositionPos1"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos1_get
    if _newclass:
        touchProbePositionPos1 = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos1_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos1_set)
    __swig_setmethods__["touchProbePositionNeg1"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg1_set
    __swig_getmethods__["touchProbePositionNeg1"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg1_get
    if _newclass:
        touchProbePositionNeg1 = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg1_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg1_set)
    __swig_setmethods__["touchProbePositionPos2"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos2_set
    __swig_getmethods__["touchProbePositionPos2"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos2_get
    if _newclass:
        touchProbePositionPos2 = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos2_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionPos2_set)
    __swig_setmethods__["touchProbePositionNeg2"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg2_set
    __swig_getmethods__["touchProbePositionNeg2"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg2_get
    if _newclass:
        touchProbePositionNeg2 = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg2_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbePositionNeg2_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.CCLinkSlavePdoInfo_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.CCLinkSlavePdoInfo_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_followingError_get, _WMX3ApiPython.CCLinkSlavePdoInfo_followingError_set)
    __swig_setmethods__["digitalInput"] = _WMX3ApiPython.CCLinkSlavePdoInfo_digitalInput_set
    __swig_getmethods__["digitalInput"] = _WMX3ApiPython.CCLinkSlavePdoInfo_digitalInput_get
    if _newclass:
        digitalInput = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_digitalInput_get, _WMX3ApiPython.CCLinkSlavePdoInfo_digitalInput_set)
    __swig_setmethods__["watchDogUL"] = _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogUL_set
    __swig_getmethods__["watchDogUL"] = _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogUL_get
    if _newclass:
        watchDogUL = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_watchDogUL_get, _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogUL_set)
    __swig_setmethods__["controlWord"] = _WMX3ApiPython.CCLinkSlavePdoInfo_controlWord_set
    __swig_getmethods__["controlWord"] = _WMX3ApiPython.CCLinkSlavePdoInfo_controlWord_get
    if _newclass:
        controlWord = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_controlWord_get, _WMX3ApiPython.CCLinkSlavePdoInfo_controlWord_set)
    __swig_setmethods__["modesOfOperation"] = _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperation_set
    __swig_getmethods__["modesOfOperation"] = _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperation_get
    if _newclass:
        modesOfOperation = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperation_get, _WMX3ApiPython.CCLinkSlavePdoInfo_modesOfOperation_set)
    __swig_setmethods__["targetPosition"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetPosition_set
    __swig_getmethods__["targetPosition"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetPosition_get
    if _newclass:
        targetPosition = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_targetPosition_get, _WMX3ApiPython.CCLinkSlavePdoInfo_targetPosition_set)
    __swig_setmethods__["targetVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetVelocity_set
    __swig_getmethods__["targetVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetVelocity_get
    if _newclass:
        targetVelocity = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_targetVelocity_get, _WMX3ApiPython.CCLinkSlavePdoInfo_targetVelocity_set)
    __swig_setmethods__["targetTorque"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetTorque_set
    __swig_getmethods__["targetTorque"] = _WMX3ApiPython.CCLinkSlavePdoInfo_targetTorque_get
    if _newclass:
        targetTorque = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_targetTorque_get, _WMX3ApiPython.CCLinkSlavePdoInfo_targetTorque_set)
    __swig_setmethods__["profileVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileVelocity_set
    __swig_getmethods__["profileVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileVelocity_get
    if _newclass:
        profileVelocity = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_profileVelocity_get, _WMX3ApiPython.CCLinkSlavePdoInfo_profileVelocity_set)
    __swig_setmethods__["profileAcceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileAcceleration_set
    __swig_getmethods__["profileAcceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileAcceleration_get
    if _newclass:
        profileAcceleration = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_profileAcceleration_get, _WMX3ApiPython.CCLinkSlavePdoInfo_profileAcceleration_set)
    __swig_setmethods__["profileDeceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileDeceleration_set
    __swig_getmethods__["profileDeceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_profileDeceleration_get
    if _newclass:
        profileDeceleration = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_profileDeceleration_get, _WMX3ApiPython.CCLinkSlavePdoInfo_profileDeceleration_set)
    __swig_setmethods__["maxTorque"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxTorque_set
    __swig_getmethods__["maxTorque"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxTorque_get
    if _newclass:
        maxTorque = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_maxTorque_get, _WMX3ApiPython.CCLinkSlavePdoInfo_maxTorque_set)
    __swig_setmethods__["positiveTorqueLimit"] = _WMX3ApiPython.CCLinkSlavePdoInfo_positiveTorqueLimit_set
    __swig_getmethods__["positiveTorqueLimit"] = _WMX3ApiPython.CCLinkSlavePdoInfo_positiveTorqueLimit_get
    if _newclass:
        positiveTorqueLimit = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_positiveTorqueLimit_get, _WMX3ApiPython.CCLinkSlavePdoInfo_positiveTorqueLimit_set)
    __swig_setmethods__["negativeTorqueLimit"] = _WMX3ApiPython.CCLinkSlavePdoInfo_negativeTorqueLimit_set
    __swig_getmethods__["negativeTorqueLimit"] = _WMX3ApiPython.CCLinkSlavePdoInfo_negativeTorqueLimit_get
    if _newclass:
        negativeTorqueLimit = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_negativeTorqueLimit_get, _WMX3ApiPython.CCLinkSlavePdoInfo_negativeTorqueLimit_set)
    __swig_setmethods__["touchProbeFunction"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeFunction_set
    __swig_getmethods__["touchProbeFunction"] = _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeFunction_get
    if _newclass:
        touchProbeFunction = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeFunction_get, _WMX3ApiPython.CCLinkSlavePdoInfo_touchProbeFunction_set)
    __swig_setmethods__["maxProfileVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxProfileVelocity_set
    __swig_getmethods__["maxProfileVelocity"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxProfileVelocity_get
    if _newclass:
        maxProfileVelocity = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_maxProfileVelocity_get, _WMX3ApiPython.CCLinkSlavePdoInfo_maxProfileVelocity_set)
    __swig_setmethods__["velocityOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_velocityOffset_set
    __swig_getmethods__["velocityOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_velocityOffset_get
    if _newclass:
        velocityOffset = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_velocityOffset_get, _WMX3ApiPython.CCLinkSlavePdoInfo_velocityOffset_set)
    __swig_setmethods__["torqueOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_torqueOffset_set
    __swig_getmethods__["torqueOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_torqueOffset_get
    if _newclass:
        torqueOffset = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_torqueOffset_get, _WMX3ApiPython.CCLinkSlavePdoInfo_torqueOffset_set)
    __swig_setmethods__["maxMotorSpeed"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxMotorSpeed_set
    __swig_getmethods__["maxMotorSpeed"] = _WMX3ApiPython.CCLinkSlavePdoInfo_maxMotorSpeed_get
    if _newclass:
        maxMotorSpeed = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_maxMotorSpeed_get, _WMX3ApiPython.CCLinkSlavePdoInfo_maxMotorSpeed_set)
    __swig_setmethods__["digitalOutput"] = _WMX3ApiPython.CCLinkSlavePdoInfo_digitalOutput_set
    __swig_getmethods__["digitalOutput"] = _WMX3ApiPython.CCLinkSlavePdoInfo_digitalOutput_get
    if _newclass:
        digitalOutput = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_digitalOutput_get, _WMX3ApiPython.CCLinkSlavePdoInfo_digitalOutput_set)
    __swig_setmethods__["watchDogDL"] = _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogDL_set
    __swig_getmethods__["watchDogDL"] = _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogDL_get
    if _newclass:
        watchDogDL = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_watchDogDL_get, _WMX3ApiPython.CCLinkSlavePdoInfo_watchDogDL_set)
    __swig_setmethods__["homingMethod"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homingMethod_set
    __swig_getmethods__["homingMethod"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homingMethod_get
    if _newclass:
        homingMethod = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_homingMethod_get, _WMX3ApiPython.CCLinkSlavePdoInfo_homingMethod_set)
    __swig_setmethods__["speedduringSearchForSwitch"] = _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForSwitch_set
    __swig_getmethods__["speedduringSearchForSwitch"] = _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForSwitch_get
    if _newclass:
        speedduringSearchForSwitch = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForSwitch_get, _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForSwitch_set)
    __swig_setmethods__["speedduringSearchForZero"] = _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForZero_set
    __swig_getmethods__["speedduringSearchForZero"] = _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForZero_get
    if _newclass:
        speedduringSearchForZero = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForZero_get, _WMX3ApiPython.CCLinkSlavePdoInfo_speedduringSearchForZero_set)
    __swig_setmethods__["homingAcceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homingAcceleration_set
    __swig_getmethods__["homingAcceleration"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homingAcceleration_get
    if _newclass:
        homingAcceleration = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_homingAcceleration_get, _WMX3ApiPython.CCLinkSlavePdoInfo_homingAcceleration_set)
    __swig_setmethods__["homeOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homeOffset_set
    __swig_getmethods__["homeOffset"] = _WMX3ApiPython.CCLinkSlavePdoInfo_homeOffset_get
    if _newclass:
        homeOffset = _swig_property(_WMX3ApiPython.CCLinkSlavePdoInfo_homeOffset_get, _WMX3ApiPython.CCLinkSlavePdoInfo_homeOffset_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlavePdoInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlavePdoInfo
    __del__ = lambda self: None
CCLinkSlavePdoInfo_swigregister = _WMX3ApiPython.CCLinkSlavePdoInfo_swigregister
CCLinkSlavePdoInfo_swigregister(CCLinkSlavePdoInfo)

class CCLinkSlaveAxisInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlaveAxisInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlaveAxisInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkSlaveAxisInfo):
        return _WMX3ApiPython.CCLinkSlaveAxisInfo_GetData(self, cclinkSlaveAxisInfo)

    def SetData(self, cclinkSlaveAxisInfo):
        return _WMX3ApiPython.CCLinkSlaveAxisInfo_SetData(self, cclinkSlaveAxisInfo)
    __swig_setmethods__["axisIndex"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_axisIndex_set
    __swig_getmethods__["axisIndex"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_axisIndex_get
    if _newclass:
        axisIndex = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_axisIndex_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_axisIndex_set)
    __swig_setmethods__["digitalIoInputAddr"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputAddr_set
    __swig_getmethods__["digitalIoInputAddr"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputAddr_get
    if _newclass:
        digitalIoInputAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputAddr_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputAddr_set)
    __swig_setmethods__["digitalIoInputSize"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputSize_set
    __swig_getmethods__["digitalIoInputSize"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputSize_get
    if _newclass:
        digitalIoInputSize = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputSize_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoInputSize_set)
    __swig_setmethods__["digitalIoOutputAddr"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputAddr_set
    __swig_getmethods__["digitalIoOutputAddr"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputAddr_get
    if _newclass:
        digitalIoOutputAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputAddr_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputAddr_set)
    __swig_setmethods__["digitalIoOutputSize"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputSize_set
    __swig_getmethods__["digitalIoOutputSize"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputSize_get
    if _newclass:
        digitalIoOutputSize = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputSize_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_digitalIoOutputSize_set)
    __swig_setmethods__["watchDogUL"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogUL_set
    __swig_getmethods__["watchDogUL"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogUL_get
    if _newclass:
        watchDogUL = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogUL_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogUL_set)
    __swig_setmethods__["watchDogDL"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogDL_set
    __swig_getmethods__["watchDogDL"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogDL_get
    if _newclass:
        watchDogDL = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogDL_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_watchDogDL_set)
    __swig_setmethods__["pdoInfo"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_pdoInfo_set
    __swig_getmethods__["pdoInfo"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_pdoInfo_get
    if _newclass:
        pdoInfo = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_pdoInfo_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_pdoInfo_set)
    __swig_setmethods__["operationMode"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_operationMode_set
    __swig_getmethods__["operationMode"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_operationMode_get
    if _newclass:
        operationMode = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_operationMode_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_operationMode_set)
    __swig_setmethods__["targetReached"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_targetReached_set
    __swig_getmethods__["targetReached"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_targetReached_get
    if _newclass:
        targetReached = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_targetReached_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_targetReached_set)
    __swig_setmethods__["followingError"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_followingError_set
    __swig_getmethods__["followingError"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_followingError_get
    if _newclass:
        followingError = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_followingError_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_followingError_set)
    __swig_setmethods__["homingError"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_homingError_set
    __swig_getmethods__["homingError"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_homingError_get
    if _newclass:
        homingError = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_homingError_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_homingError_set)
    __swig_setmethods__["homingAttained"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_homingAttained_set
    __swig_getmethods__["homingAttained"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_homingAttained_get
    if _newclass:
        homingAttained = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_homingAttained_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_homingAttained_set)
    __swig_setmethods__["halt"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_halt_set
    __swig_getmethods__["halt"] = _WMX3ApiPython.CCLinkSlaveAxisInfo_halt_get
    if _newclass:
        halt = _swig_property(_WMX3ApiPython.CCLinkSlaveAxisInfo_halt_get, _WMX3ApiPython.CCLinkSlaveAxisInfo_halt_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlaveAxisInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlaveAxisInfo
    __del__ = lambda self: None
CCLinkSlaveAxisInfo_swigregister = _WMX3ApiPython.CCLinkSlaveAxisInfo_swigregister
CCLinkSlaveAxisInfo_swigregister(CCLinkSlaveAxisInfo)

class CCLinkSlavePduInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlavePduInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlavePduInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkSlavePduInfo):
        return _WMX3ApiPython.CCLinkSlavePduInfo_GetData(self, cclinkSlavePduInfo)

    def SetData(self, cclinkSlavePduInfo):
        return _WMX3ApiPython.CCLinkSlavePduInfo_SetData(self, cclinkSlavePduInfo)
    __swig_setmethods__["localAddr"] = _WMX3ApiPython.CCLinkSlavePduInfo_localAddr_set
    __swig_getmethods__["localAddr"] = _WMX3ApiPython.CCLinkSlavePduInfo_localAddr_get
    if _newclass:
        localAddr = _swig_property(_WMX3ApiPython.CCLinkSlavePduInfo_localAddr_get, _WMX3ApiPython.CCLinkSlavePduInfo_localAddr_set)
    __swig_setmethods__["remoteAddr"] = _WMX3ApiPython.CCLinkSlavePduInfo_remoteAddr_set
    __swig_getmethods__["remoteAddr"] = _WMX3ApiPython.CCLinkSlavePduInfo_remoteAddr_get
    if _newclass:
        remoteAddr = _swig_property(_WMX3ApiPython.CCLinkSlavePduInfo_remoteAddr_get, _WMX3ApiPython.CCLinkSlavePduInfo_remoteAddr_set)
    __swig_setmethods__["size"] = _WMX3ApiPython.CCLinkSlavePduInfo_size_set
    __swig_getmethods__["size"] = _WMX3ApiPython.CCLinkSlavePduInfo_size_get
    if _newclass:
        size = _swig_property(_WMX3ApiPython.CCLinkSlavePduInfo_size_get, _WMX3ApiPython.CCLinkSlavePduInfo_size_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlavePduInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlavePduInfo
    __del__ = lambda self: None
CCLinkSlavePduInfo_swigregister = _WMX3ApiPython.CCLinkSlavePduInfo_swigregister
CCLinkSlavePduInfo_swigregister(CCLinkSlavePduInfo)

class CCLinkSlaveInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkSlaveInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkSlaveInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkSlaveInfo):
        return _WMX3ApiPython.CCLinkSlaveInfo_GetData(self, cclinkSlaveInfo)

    def SetData(self, cclinkSlaveInfo):
        return _WMX3ApiPython.CCLinkSlaveInfo_SetData(self, cclinkSlaveInfo)
    __swig_setmethods__["id"] = _WMX3ApiPython.CCLinkSlaveInfo_id_set
    __swig_getmethods__["id"] = _WMX3ApiPython.CCLinkSlaveInfo_id_get
    if _newclass:
        id = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_id_get, _WMX3ApiPython.CCLinkSlaveInfo_id_set)
    __swig_setmethods__["modelCode"] = _WMX3ApiPython.CCLinkSlaveInfo_modelCode_set
    __swig_getmethods__["modelCode"] = _WMX3ApiPython.CCLinkSlaveInfo_modelCode_get
    if _newclass:
        modelCode = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_modelCode_get, _WMX3ApiPython.CCLinkSlaveInfo_modelCode_set)
    __swig_setmethods__["ipAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_ipAddr_set
    __swig_getmethods__["ipAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_ipAddr_get
    if _newclass:
        ipAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_ipAddr_get, _WMX3ApiPython.CCLinkSlaveInfo_ipAddr_set)

    def SetIpAddr(self, index, value):
        return _WMX3ApiPython.CCLinkSlaveInfo_SetIpAddr(self, index, value)

    def GetIpAddr(self, index):
        return _WMX3ApiPython.CCLinkSlaveInfo_GetIpAddr(self, index)
    __swig_setmethods__["macAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_macAddr_set
    __swig_getmethods__["macAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_macAddr_get
    if _newclass:
        macAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_macAddr_get, _WMX3ApiPython.CCLinkSlaveInfo_macAddr_set)

    def SetMacAddr(self, index, value):
        return _WMX3ApiPython.CCLinkSlaveInfo_SetMacAddr(self, index, value)

    def GetMacAddr(self, index):
        return _WMX3ApiPython.CCLinkSlaveInfo_GetMacAddr(self, index)
    __swig_setmethods__["deviceType"] = _WMX3ApiPython.CCLinkSlaveInfo_deviceType_set
    __swig_getmethods__["deviceType"] = _WMX3ApiPython.CCLinkSlaveInfo_deviceType_get
    if _newclass:
        deviceType = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_deviceType_get, _WMX3ApiPython.CCLinkSlaveInfo_deviceType_set)
    __swig_setmethods__["deviceVer"] = _WMX3ApiPython.CCLinkSlaveInfo_deviceVer_set
    __swig_getmethods__["deviceVer"] = _WMX3ApiPython.CCLinkSlaveInfo_deviceVer_get
    if _newclass:
        deviceVer = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_deviceVer_get, _WMX3ApiPython.CCLinkSlaveInfo_deviceVer_set)
    __swig_setmethods__["exModelCode"] = _WMX3ApiPython.CCLinkSlaveInfo_exModelCode_set
    __swig_getmethods__["exModelCode"] = _WMX3ApiPython.CCLinkSlaveInfo_exModelCode_get
    if _newclass:
        exModelCode = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_exModelCode_get, _WMX3ApiPython.CCLinkSlaveInfo_exModelCode_set)
    __swig_setmethods__["vendorCode"] = _WMX3ApiPython.CCLinkSlaveInfo_vendorCode_set
    __swig_getmethods__["vendorCode"] = _WMX3ApiPython.CCLinkSlaveInfo_vendorCode_get
    if _newclass:
        vendorCode = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_vendorCode_get, _WMX3ApiPython.CCLinkSlaveInfo_vendorCode_set)
    __swig_setmethods__["offline"] = _WMX3ApiPython.CCLinkSlaveInfo_offline_set
    __swig_getmethods__["offline"] = _WMX3ApiPython.CCLinkSlaveInfo_offline_get
    if _newclass:
        offline = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_offline_get, _WMX3ApiPython.CCLinkSlaveInfo_offline_set)
    __swig_setmethods__["state"] = _WMX3ApiPython.CCLinkSlaveInfo_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.CCLinkSlaveInfo_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_state_get, _WMX3ApiPython.CCLinkSlaveInfo_state_set)
    __swig_setmethods__["ctrlFlag"] = _WMX3ApiPython.CCLinkSlaveInfo_ctrlFlag_set
    __swig_getmethods__["ctrlFlag"] = _WMX3ApiPython.CCLinkSlaveInfo_ctrlFlag_get
    if _newclass:
        ctrlFlag = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_ctrlFlag_get, _WMX3ApiPython.CCLinkSlaveInfo_ctrlFlag_set)
    __swig_setmethods__["timingErr"] = _WMX3ApiPython.CCLinkSlaveInfo_timingErr_set
    __swig_getmethods__["timingErr"] = _WMX3ApiPython.CCLinkSlaveInfo_timingErr_get
    if _newclass:
        timingErr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_timingErr_get, _WMX3ApiPython.CCLinkSlaveInfo_timingErr_set)
    __swig_setmethods__["appStopped"] = _WMX3ApiPython.CCLinkSlaveInfo_appStopped_set
    __swig_getmethods__["appStopped"] = _WMX3ApiPython.CCLinkSlaveInfo_appStopped_get
    if _newclass:
        appStopped = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_appStopped_get, _WMX3ApiPython.CCLinkSlaveInfo_appStopped_set)
    __swig_setmethods__["appError"] = _WMX3ApiPython.CCLinkSlaveInfo_appError_set
    __swig_getmethods__["appError"] = _WMX3ApiPython.CCLinkSlaveInfo_appError_get
    if _newclass:
        appError = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_appError_get, _WMX3ApiPython.CCLinkSlaveInfo_appError_set)
    __swig_setmethods__["networkErr"] = _WMX3ApiPython.CCLinkSlaveInfo_networkErr_set
    __swig_getmethods__["networkErr"] = _WMX3ApiPython.CCLinkSlaveInfo_networkErr_get
    if _newclass:
        networkErr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_networkErr_get, _WMX3ApiPython.CCLinkSlaveInfo_networkErr_set)
    __swig_setmethods__["cycleDisable"] = _WMX3ApiPython.CCLinkSlaveInfo_cycleDisable_set
    __swig_getmethods__["cycleDisable"] = _WMX3ApiPython.CCLinkSlaveInfo_cycleDisable_get
    if _newclass:
        cycleDisable = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_cycleDisable_get, _WMX3ApiPython.CCLinkSlaveInfo_cycleDisable_set)
    __swig_setmethods__["disconnectEvt"] = _WMX3ApiPython.CCLinkSlaveInfo_disconnectEvt_set
    __swig_getmethods__["disconnectEvt"] = _WMX3ApiPython.CCLinkSlaveInfo_disconnectEvt_get
    if _newclass:
        disconnectEvt = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_disconnectEvt_get, _WMX3ApiPython.CCLinkSlaveInfo_disconnectEvt_set)
    __swig_setmethods__["wdtErr"] = _WMX3ApiPython.CCLinkSlaveInfo_wdtErr_set
    __swig_getmethods__["wdtErr"] = _WMX3ApiPython.CCLinkSlaveInfo_wdtErr_get
    if _newclass:
        wdtErr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_wdtErr_get, _WMX3ApiPython.CCLinkSlaveInfo_wdtErr_set)
    __swig_setmethods__["EMG"] = _WMX3ApiPython.CCLinkSlaveInfo_EMG_set
    __swig_getmethods__["EMG"] = _WMX3ApiPython.CCLinkSlaveInfo_EMG_get
    if _newclass:
        EMG = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_EMG_get, _WMX3ApiPython.CCLinkSlaveInfo_EMG_set)
    __swig_setmethods__["GOF"] = _WMX3ApiPython.CCLinkSlaveInfo_GOF_set
    __swig_getmethods__["GOF"] = _WMX3ApiPython.CCLinkSlaveInfo_GOF_get
    if _newclass:
        GOF = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_GOF_get, _WMX3ApiPython.CCLinkSlaveInfo_GOF_set)
    __swig_setmethods__["ALM"] = _WMX3ApiPython.CCLinkSlaveInfo_ALM_set
    __swig_getmethods__["ALM"] = _WMX3ApiPython.CCLinkSlaveInfo_ALM_get
    if _newclass:
        ALM = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_ALM_get, _WMX3ApiPython.CCLinkSlaveInfo_ALM_set)
    __swig_setmethods__["inPduBit"] = _WMX3ApiPython.CCLinkSlaveInfo_inPduBit_set
    __swig_getmethods__["inPduBit"] = _WMX3ApiPython.CCLinkSlaveInfo_inPduBit_get
    if _newclass:
        inPduBit = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_inPduBit_get, _WMX3ApiPython.CCLinkSlaveInfo_inPduBit_set)
    __swig_setmethods__["inPduWord"] = _WMX3ApiPython.CCLinkSlaveInfo_inPduWord_set
    __swig_getmethods__["inPduWord"] = _WMX3ApiPython.CCLinkSlaveInfo_inPduWord_get
    if _newclass:
        inPduWord = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_inPduWord_get, _WMX3ApiPython.CCLinkSlaveInfo_inPduWord_set)
    __swig_setmethods__["outPduBit"] = _WMX3ApiPython.CCLinkSlaveInfo_outPduBit_set
    __swig_getmethods__["outPduBit"] = _WMX3ApiPython.CCLinkSlaveInfo_outPduBit_get
    if _newclass:
        outPduBit = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_outPduBit_get, _WMX3ApiPython.CCLinkSlaveInfo_outPduBit_set)
    __swig_setmethods__["outPduWord"] = _WMX3ApiPython.CCLinkSlaveInfo_outPduWord_set
    __swig_getmethods__["outPduWord"] = _WMX3ApiPython.CCLinkSlaveInfo_outPduWord_get
    if _newclass:
        outPduWord = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_outPduWord_get, _WMX3ApiPython.CCLinkSlaveInfo_outPduWord_set)
    __swig_setmethods__["inputAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_inputAddr_set
    __swig_getmethods__["inputAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_inputAddr_get
    if _newclass:
        inputAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_inputAddr_get, _WMX3ApiPython.CCLinkSlaveInfo_inputAddr_set)
    __swig_setmethods__["inputSize"] = _WMX3ApiPython.CCLinkSlaveInfo_inputSize_set
    __swig_getmethods__["inputSize"] = _WMX3ApiPython.CCLinkSlaveInfo_inputSize_get
    if _newclass:
        inputSize = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_inputSize_get, _WMX3ApiPython.CCLinkSlaveInfo_inputSize_set)
    __swig_setmethods__["outputAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_outputAddr_set
    __swig_getmethods__["outputAddr"] = _WMX3ApiPython.CCLinkSlaveInfo_outputAddr_get
    if _newclass:
        outputAddr = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_outputAddr_get, _WMX3ApiPython.CCLinkSlaveInfo_outputAddr_set)
    __swig_setmethods__["outputSize"] = _WMX3ApiPython.CCLinkSlaveInfo_outputSize_set
    __swig_getmethods__["outputSize"] = _WMX3ApiPython.CCLinkSlaveInfo_outputSize_get
    if _newclass:
        outputSize = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_outputSize_get, _WMX3ApiPython.CCLinkSlaveInfo_outputSize_set)
    __swig_setmethods__["rxPdoSize"] = _WMX3ApiPython.CCLinkSlaveInfo_rxPdoSize_set
    __swig_getmethods__["rxPdoSize"] = _WMX3ApiPython.CCLinkSlaveInfo_rxPdoSize_get
    if _newclass:
        rxPdoSize = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_rxPdoSize_get, _WMX3ApiPython.CCLinkSlaveInfo_rxPdoSize_set)
    __swig_setmethods__["txPdoSize"] = _WMX3ApiPython.CCLinkSlaveInfo_txPdoSize_set
    __swig_getmethods__["txPdoSize"] = _WMX3ApiPython.CCLinkSlaveInfo_txPdoSize_get
    if _newclass:
        txPdoSize = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_txPdoSize_get, _WMX3ApiPython.CCLinkSlaveInfo_txPdoSize_set)
    __swig_setmethods__["packetTimeout"] = _WMX3ApiPython.CCLinkSlaveInfo_packetTimeout_set
    __swig_getmethods__["packetTimeout"] = _WMX3ApiPython.CCLinkSlaveInfo_packetTimeout_get
    if _newclass:
        packetTimeout = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_packetTimeout_get, _WMX3ApiPython.CCLinkSlaveInfo_packetTimeout_set)
    __swig_setmethods__["numOfAxes"] = _WMX3ApiPython.CCLinkSlaveInfo_numOfAxes_set
    __swig_getmethods__["numOfAxes"] = _WMX3ApiPython.CCLinkSlaveInfo_numOfAxes_get
    if _newclass:
        numOfAxes = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_numOfAxes_get, _WMX3ApiPython.CCLinkSlaveInfo_numOfAxes_set)
    __swig_setmethods__["axisInfo"] = _WMX3ApiPython.CCLinkSlaveInfo_axisInfo_set
    __swig_getmethods__["axisInfo"] = _WMX3ApiPython.CCLinkSlaveInfo_axisInfo_get
    if _newclass:
        axisInfo = _swig_property(_WMX3ApiPython.CCLinkSlaveInfo_axisInfo_get, _WMX3ApiPython.CCLinkSlaveInfo_axisInfo_set)

    def SetAxisInfo(self, index, value):
        return _WMX3ApiPython.CCLinkSlaveInfo_SetAxisInfo(self, index, value)

    def GetAxisInfo(self, index):
        return _WMX3ApiPython.CCLinkSlaveInfo_GetAxisInfo(self, index)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkSlaveInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkSlaveInfo
    __del__ = lambda self: None
CCLinkSlaveInfo_swigregister = _WMX3ApiPython.CCLinkSlaveInfo_swigregister
CCLinkSlaveInfo_swigregister(CCLinkSlaveInfo)

class CCLinkStatisticsSyncInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkStatisticsSyncInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkStatisticsSyncInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkStatisticsSyncInfo):
        return _WMX3ApiPython.CCLinkStatisticsSyncInfo_GetData(self, cclinkStatisticsSyncInfo)

    def SetData(self, cclinkStatisticsSyncInfo):
        return _WMX3ApiPython.CCLinkStatisticsSyncInfo_SetData(self, cclinkStatisticsSyncInfo)
    __swig_setmethods__["intervalCount"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_intervalCount_set
    __swig_getmethods__["intervalCount"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_intervalCount_get
    if _newclass:
        intervalCount = _swig_property(_WMX3ApiPython.CCLinkStatisticsSyncInfo_intervalCount_get, _WMX3ApiPython.CCLinkStatisticsSyncInfo_intervalCount_set)
    __swig_setmethods__["minInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_minInterval_set
    __swig_getmethods__["minInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_minInterval_get
    if _newclass:
        minInterval = _swig_property(_WMX3ApiPython.CCLinkStatisticsSyncInfo_minInterval_get, _WMX3ApiPython.CCLinkStatisticsSyncInfo_minInterval_set)
    __swig_setmethods__["maxInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_maxInterval_set
    __swig_getmethods__["maxInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_maxInterval_get
    if _newclass:
        maxInterval = _swig_property(_WMX3ApiPython.CCLinkStatisticsSyncInfo_maxInterval_get, _WMX3ApiPython.CCLinkStatisticsSyncInfo_maxInterval_set)
    __swig_setmethods__["avgInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_avgInterval_set
    __swig_getmethods__["avgInterval"] = _WMX3ApiPython.CCLinkStatisticsSyncInfo_avgInterval_get
    if _newclass:
        avgInterval = _swig_property(_WMX3ApiPython.CCLinkStatisticsSyncInfo_avgInterval_get, _WMX3ApiPython.CCLinkStatisticsSyncInfo_avgInterval_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkStatisticsSyncInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkStatisticsSyncInfo
    __del__ = lambda self: None
CCLinkStatisticsSyncInfo_swigregister = _WMX3ApiPython.CCLinkStatisticsSyncInfo_swigregister
CCLinkStatisticsSyncInfo_swigregister(CCLinkStatisticsSyncInfo)

class CCLinkStatisticsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkStatisticsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkStatisticsInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkStatisticsInfo):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetData(self, cclinkStatisticsInfo)

    def SetData(self, cclinkStatisticsInfo):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetData(self, cclinkStatisticsInfo)
    __swig_setmethods__["interruptIntervalRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_interruptIntervalRatio_set
    __swig_getmethods__["interruptIntervalRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_interruptIntervalRatio_get
    if _newclass:
        interruptIntervalRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_interruptIntervalRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_interruptIntervalRatio_set)

    def SetInterruptIntervalRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetInterruptIntervalRatio(self, index, value)

    def GetInterruptIntervalRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetInterruptIntervalRatio(self, index)
    __swig_setmethods__["cycleProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_cycleProcessTimeRatio_set
    __swig_getmethods__["cycleProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_cycleProcessTimeRatio_get
    if _newclass:
        cycleProcessTimeRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_cycleProcessTimeRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_cycleProcessTimeRatio_set)

    def SetCycleProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetCycleProcessTimeRatio(self, index, value)

    def GetCycleProcessTimeRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetCycleProcessTimeRatio(self, index)
    __swig_setmethods__["processTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_processTimeRatio_set
    __swig_getmethods__["processTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_processTimeRatio_get
    if _newclass:
        processTimeRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_processTimeRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_processTimeRatio_set)

    def SetProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetProcessTimeRatio(self, index, value)

    def GetProcessTimeRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetProcessTimeRatio(self, index)
    __swig_setmethods__["commandProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_commandProcessTimeRatio_set
    __swig_getmethods__["commandProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_commandProcessTimeRatio_get
    if _newclass:
        commandProcessTimeRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_commandProcessTimeRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_commandProcessTimeRatio_set)

    def SetCommandProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetCommandProcessTimeRatio(self, index, value)

    def GetCommandProcessTimeRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetCommandProcessTimeRatio(self, index)
    __swig_setmethods__["feedbackProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_feedbackProcessTimeRatio_set
    __swig_getmethods__["feedbackProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_feedbackProcessTimeRatio_get
    if _newclass:
        feedbackProcessTimeRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_feedbackProcessTimeRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_feedbackProcessTimeRatio_set)

    def SetFeedbackProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetFeedbackProcessTimeRatio(self, index, value)

    def GetFeedbackProcessTimeRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetFeedbackProcessTimeRatio(self, index)
    __swig_setmethods__["communicateProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_communicateProcessTimeRatio_set
    __swig_getmethods__["communicateProcessTimeRatio"] = _WMX3ApiPython.CCLinkStatisticsInfo_communicateProcessTimeRatio_get
    if _newclass:
        communicateProcessTimeRatio = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_communicateProcessTimeRatio_get, _WMX3ApiPython.CCLinkStatisticsInfo_communicateProcessTimeRatio_set)

    def SetCommunicateProcessTimeRatio(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetCommunicateProcessTimeRatio(self, index, value)

    def GetCommunicateProcessTimeRatio(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetCommunicateProcessTimeRatio(self, index)
    __swig_setmethods__["overCycle"] = _WMX3ApiPython.CCLinkStatisticsInfo_overCycle_set
    __swig_getmethods__["overCycle"] = _WMX3ApiPython.CCLinkStatisticsInfo_overCycle_get
    if _newclass:
        overCycle = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_overCycle_get, _WMX3ApiPython.CCLinkStatisticsInfo_overCycle_set)

    def SetOverCycle(self, index, value):
        return _WMX3ApiPython.CCLinkStatisticsInfo_SetOverCycle(self, index, value)

    def GetOverCycle(self, index):
        return _WMX3ApiPython.CCLinkStatisticsInfo_GetOverCycle(self, index)
    __swig_setmethods__["txErr"] = _WMX3ApiPython.CCLinkStatisticsInfo_txErr_set
    __swig_getmethods__["txErr"] = _WMX3ApiPython.CCLinkStatisticsInfo_txErr_get
    if _newclass:
        txErr = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_txErr_get, _WMX3ApiPython.CCLinkStatisticsInfo_txErr_set)
    __swig_setmethods__["packetTimeout"] = _WMX3ApiPython.CCLinkStatisticsInfo_packetTimeout_set
    __swig_getmethods__["packetTimeout"] = _WMX3ApiPython.CCLinkStatisticsInfo_packetTimeout_get
    if _newclass:
        packetTimeout = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_packetTimeout_get, _WMX3ApiPython.CCLinkStatisticsInfo_packetTimeout_set)
    __swig_setmethods__["syncStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_syncStat_set
    __swig_getmethods__["syncStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_syncStat_get
    if _newclass:
        syncStat = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_syncStat_get, _WMX3ApiPython.CCLinkStatisticsInfo_syncStat_set)
    __swig_setmethods__["pdelayReqRcvStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqRcvStat_set
    __swig_getmethods__["pdelayReqRcvStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqRcvStat_get
    if _newclass:
        pdelayReqRcvStat = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqRcvStat_get, _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqRcvStat_set)
    __swig_setmethods__["pdelayReqFollowUpStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqFollowUpStat_set
    __swig_getmethods__["pdelayReqFollowUpStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqFollowUpStat_get
    if _newclass:
        pdelayReqFollowUpStat = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqFollowUpStat_get, _WMX3ApiPython.CCLinkStatisticsInfo_pdelayReqFollowUpStat_set)
    __swig_setmethods__["pdelayStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayStat_set
    __swig_getmethods__["pdelayStat"] = _WMX3ApiPython.CCLinkStatisticsInfo_pdelayStat_get
    if _newclass:
        pdelayStat = _swig_property(_WMX3ApiPython.CCLinkStatisticsInfo_pdelayStat_get, _WMX3ApiPython.CCLinkStatisticsInfo_pdelayStat_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkStatisticsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkStatisticsInfo
    __del__ = lambda self: None
CCLinkStatisticsInfo_swigregister = _WMX3ApiPython.CCLinkStatisticsInfo_swigregister
CCLinkStatisticsInfo_swigregister(CCLinkStatisticsInfo)

class CCLinkMasterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLinkMasterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLinkMasterInfo, name)
    __repr__ = _swig_repr

    def GetData(self, cclinkMasterInfo):
        return _WMX3ApiPython.CCLinkMasterInfo_GetData(self, cclinkMasterInfo)

    def SetData(self, cclinkMasterInfo):
        return _WMX3ApiPython.CCLinkMasterInfo_SetData(self, cclinkMasterInfo)
    __swig_setmethods__["state"] = _WMX3ApiPython.CCLinkMasterInfo_state_set
    __swig_getmethods__["state"] = _WMX3ApiPython.CCLinkMasterInfo_state_get
    if _newclass:
        state = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_state_get, _WMX3ApiPython.CCLinkMasterInfo_state_set)
    __swig_setmethods__["mode"] = _WMX3ApiPython.CCLinkMasterInfo_mode_set
    __swig_getmethods__["mode"] = _WMX3ApiPython.CCLinkMasterInfo_mode_get
    if _newclass:
        mode = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_mode_get, _WMX3ApiPython.CCLinkMasterInfo_mode_set)
    __swig_setmethods__["commPeriod"] = _WMX3ApiPython.CCLinkMasterInfo_commPeriod_set
    __swig_getmethods__["commPeriod"] = _WMX3ApiPython.CCLinkMasterInfo_commPeriod_get
    if _newclass:
        commPeriod = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_commPeriod_get, _WMX3ApiPython.CCLinkMasterInfo_commPeriod_set)
    __swig_setmethods__["cycleCounter"] = _WMX3ApiPython.CCLinkMasterInfo_cycleCounter_set
    __swig_getmethods__["cycleCounter"] = _WMX3ApiPython.CCLinkMasterInfo_cycleCounter_get
    if _newclass:
        cycleCounter = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_cycleCounter_get, _WMX3ApiPython.CCLinkMasterInfo_cycleCounter_set)
    __swig_setmethods__["cycleNum"] = _WMX3ApiPython.CCLinkMasterInfo_cycleNum_set
    __swig_getmethods__["cycleNum"] = _WMX3ApiPython.CCLinkMasterInfo_cycleNum_get
    if _newclass:
        cycleNum = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_cycleNum_get, _WMX3ApiPython.CCLinkMasterInfo_cycleNum_set)
    __swig_setmethods__["tslt"] = _WMX3ApiPython.CCLinkMasterInfo_tslt_set
    __swig_getmethods__["tslt"] = _WMX3ApiPython.CCLinkMasterInfo_tslt_get
    if _newclass:
        tslt = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_tslt_get, _WMX3ApiPython.CCLinkMasterInfo_tslt_set)

    def SetTslt(self, index, value):
        return _WMX3ApiPython.CCLinkMasterInfo_SetTslt(self, index, value)

    def GetTslt(self, index):
        return _WMX3ApiPython.CCLinkMasterInfo_GetTslt(self, index)
    __swig_setmethods__["ipAddr"] = _WMX3ApiPython.CCLinkMasterInfo_ipAddr_set
    __swig_getmethods__["ipAddr"] = _WMX3ApiPython.CCLinkMasterInfo_ipAddr_get
    if _newclass:
        ipAddr = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_ipAddr_get, _WMX3ApiPython.CCLinkMasterInfo_ipAddr_set)

    def SetIpAddr(self, index, value):
        return _WMX3ApiPython.CCLinkMasterInfo_SetIpAddr(self, index, value)

    def GetIpAddr(self, index):
        return _WMX3ApiPython.CCLinkMasterInfo_GetIpAddr(self, index)
    __swig_setmethods__["macAddr"] = _WMX3ApiPython.CCLinkMasterInfo_macAddr_set
    __swig_getmethods__["macAddr"] = _WMX3ApiPython.CCLinkMasterInfo_macAddr_get
    if _newclass:
        macAddr = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_macAddr_get, _WMX3ApiPython.CCLinkMasterInfo_macAddr_set)

    def SetMacAddr(self, index, value):
        return _WMX3ApiPython.CCLinkMasterInfo_SetMacAddr(self, index, value)

    def GetMacAddr(self, index):
        return _WMX3ApiPython.CCLinkMasterInfo_GetMacAddr(self, index)
    __swig_setmethods__["numOfSlaves"] = _WMX3ApiPython.CCLinkMasterInfo_numOfSlaves_set
    __swig_getmethods__["numOfSlaves"] = _WMX3ApiPython.CCLinkMasterInfo_numOfSlaves_get
    if _newclass:
        numOfSlaves = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_numOfSlaves_get, _WMX3ApiPython.CCLinkMasterInfo_numOfSlaves_set)
    __swig_setmethods__["slaves"] = _WMX3ApiPython.CCLinkMasterInfo_slaves_set
    __swig_getmethods__["slaves"] = _WMX3ApiPython.CCLinkMasterInfo_slaves_get
    if _newclass:
        slaves = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_slaves_get, _WMX3ApiPython.CCLinkMasterInfo_slaves_set)

    def SetSlaves(self, index, value):
        return _WMX3ApiPython.CCLinkMasterInfo_SetSlaves(self, index, value)

    def GetSlaves(self, index):
        return _WMX3ApiPython.CCLinkMasterInfo_GetSlaves(self, index)
    __swig_setmethods__["statisticsInfo"] = _WMX3ApiPython.CCLinkMasterInfo_statisticsInfo_set
    __swig_getmethods__["statisticsInfo"] = _WMX3ApiPython.CCLinkMasterInfo_statisticsInfo_get
    if _newclass:
        statisticsInfo = _swig_property(_WMX3ApiPython.CCLinkMasterInfo_statisticsInfo_get, _WMX3ApiPython.CCLinkMasterInfo_statisticsInfo_set)

    def __init__(self):
        this = _WMX3ApiPython.new_CCLinkMasterInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLinkMasterInfo
    __del__ = lambda self: None
CCLinkMasterInfo_swigregister = _WMX3ApiPython.CCLinkMasterInfo_swigregister
CCLinkMasterInfo_swigregister(CCLinkMasterInfo)

class CCLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _WMX3ApiPython.new_CCLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WMX3ApiPython.delete_CCLink
    __del__ = lambda self: None
    if _newclass:
        ErrorToString = staticmethod(_WMX3ApiPython.CCLink_ErrorToString)
    else:
        ErrorToString = _WMX3ApiPython.CCLink_ErrorToString
    if _newclass:
        GetLibVersion = staticmethod(_WMX3ApiPython.CCLink_GetLibVersion)
    else:
        GetLibVersion = _WMX3ApiPython.CCLink_GetLibVersion

    def IsDeviceValid(self):
        return _WMX3ApiPython.CCLink_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.CCLink_GetVersion(self)

    def ResetSlaveError(self, slaveId):
        return _WMX3ApiPython.CCLink_ResetSlaveError(self, slaveId)

    def SetUpdatePeriod(self, period):
        return _WMX3ApiPython.CCLink_SetUpdatePeriod(self, period)

    def GetMasterInfo(self):
        info = CCLinkMasterInfo()
        ret = _WMX3ApiPython.CCLink_GetMasterInfo(self, info)
        return ret, info



    def ScanNetwork(self):
        return _WMX3ApiPython.CCLink_ScanNetwork(self)

    def StartHotconnect(self):
        return _WMX3ApiPython.CCLink_StartHotconnect(self)

    def ResetSyncStatisticsInfo(self):
        return _WMX3ApiPython.CCLink_ResetSyncStatisticsInfo(self)

    def SdoDownload(self, slaveId, dropNo, index, subindex, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoDownload(self, slaveId, dropNo, index, subindex, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_WaitTime(self, slaveId, dropNo, index, subindex, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoDownload_WaitTime(self, slaveId, dropNo, index, subindex, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoUpload(self, slaveId, dropNo, index, subindex, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoUpload(self, slaveId, dropNo, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_WaitTime(self, slaveId, dropNo, index, subindex, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoUpload_WaitTime(self, slaveId, dropNo, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoDownload_SdoType(self, slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoDownload_SdoType(self, slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_SdoType_WaitTime(self, slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoDownload_SdoType_WaitTime(self, slaveId, dropNo, index, subindex, sdoType, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoUpload_SdoType(self, slaveId, dropNo, index, subindex, sdoType, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoUpload_SdoType(self, slaveId, dropNo, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_SdoType_WaitTime(self, slaveId, dropNo, index, subindex, sdoType, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.CCLink_SdoUpload_SdoType_WaitTime(self, slaveId, dropNo, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SetAxisMode(self, slaveId, axisIndex, mode):
        return _WMX3ApiPython.CCLink_SetAxisMode(self, slaveId, axisIndex, mode)

    def StartAxisPP(self, *args):
        return _WMX3ApiPython.CCLink_StartAxisPP(self, *args)

    def StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc):
        return _WMX3ApiPython.CCLink_StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)

    def HaltAxis(self, slaveId, axisIndex):
        return _WMX3ApiPython.CCLink_HaltAxis(self, slaveId, axisIndex)

    def HaltAxisRelease(self, slaveId, axisIndex):
        return _WMX3ApiPython.CCLink_HaltAxisRelease(self, slaveId, axisIndex)

    def SlmpSendBySlaveId(self, slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize):
        buffArray = uintArray(buffSize)
        actualSize = uintp()
        errCode = ushortp()
        ret = _WMX3ApiPython.CCLink_SlmpSendBySlaveId(self, slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize, buffArray, actualSize, errCode)

        buff = []
        for i in range(buffSize):
            buff.append(buffArray[i])

        return ret, buff, actualSize.value(), errCode.value()



    def SlmpSendBySlaveId_WaitTime(self, slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize, waitTime):
        buffArray = uintArray(buffSize)
        actualSize = uintp()
        errCode = ushortp()
        ret = _WMX3ApiPython.CCLink_SlmpSendBySlaveId_WaitTime(self, slaveId, port, dropNo, command, subCommand, dataSize, data, buffSize, buffArray, actualSize, errCode, waitTime)

        buff = []
        for i in range(buffSize):
            buff.append(buffArray[i])

        return ret, buff, actualSize.value(), errCode.value()



    def SlmpSendByMacIpAddr(self, macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize):
        buffArray = uintArray(buffSize)
        actualSize = uintp()
        errCode = ushortp()
        ret = _WMX3ApiPython.CCLink_SlmpSendByMacIpAddr(self, macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize, buffArray, actualSize, errCode)

        buff = []
        for i in range(buffSize):
            buff.append(buffArray[i])

        return ret, buff, actualSize.value(), errCode.value()



    def SlmpSendByMacIpAddr_WaitTime(self, macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize, waitTime):
        buffArray = uintArray(buffSize)
        actualSize = uintp()
        errCode = ushortp()
        ret = _WMX3ApiPython.CCLink_SlmpSendByMacIpAddr_WaitTime(self, macAddr, ipAddr, port, dropNo, command, subCommand, dataSize, data, buffSize, buffArray, actualSize, errCode, waitTime)

        buff = []
        for i in range(buffSize):
            buff.append(buffArray[i])

        return ret, buff, actualSize.value(), errCode.value()


CCLink_swigregister = _WMX3ApiPython.CCLink_swigregister
CCLink_swigregister(CCLink)

def CCLink_ErrorToString(errCode):
    return _WMX3ApiPython.CCLink_ErrorToString(errCode)
CCLink_ErrorToString = _WMX3ApiPython.CCLink_ErrorToString

def CCLink_GetLibVersion():
    return _WMX3ApiPython.CCLink_GetLibVersion()
CCLink_GetLibVersion = _WMX3ApiPython.CCLink_GetLibVersion

# This file is compatible with both classic and new-style classes.


